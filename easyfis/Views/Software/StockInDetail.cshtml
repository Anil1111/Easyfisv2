@{
    var userId = ViewData["UserId"];
}
<!DOCTYPE html>
<html>
<head>
    <!-- Meta -->
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">

    <!-- Title of the Page -->
    <link rel="shortcut icon" href="~/Images/icon/easyfislogomini.ico">
    <title>Stock In Detail</title>

    <!-- CSS StyleSheets-->
    @Styles.Render("~/Content/Software-css")
</head>
<body>
    <div id="o-wrapper" class="o-wrapper">
        <main class="o-content">
            @Html.Partial("_SoftwareHeader")
            <section class="content-header">
                <div class="container">
                    <h3>
                        Stock In Detail 
                    </h3>
                    <p>
                        <i class="fa fa-building-o fa-fw"></i> &nbsp; @ViewData["Company"] <br />
                        <i class="fa fa-home fa-fw"></i> &nbsp; <a href="#" onclick="getUserBranches()" style="color: white;">@ViewData["Branch"]</a>
                    </p>
                </div>
            </section>
            <section class="container">
                <div class="panel panel-default">
                    <div class="panel-heading">
                        <div class="row">
                            <div class="col-md-12" align="right">
                                <button class="btn btn-primary " id="cmdStockInJournal" onclick="stockInJournal_OnClick()"><i class="fa fa-book"></i> Journal</button>
                                <button class="btn btn-primary " id="cmdStockInSaveLock" onclick="btnStockInSaveLock_OnClick()"><i class=" fa fa-lock"></i> Lock</button>
                                <button class="btn btn-primary " id="cmdStockInEdit" onclick="btnStockInEdit_OnClick()"><i class=" fa fa-unlock"></i> Unlock</button>
                                <button class="btn btn-primary " id="cmdStockInPrint" onclick="btnStockInPrint_OnClick()"><i class="fa fa-print"></i> Print</button>
                                <button onclick="window.location.href = '@Url.Action("StockIn", "Software")'" class="btn btn-danger " id="cmdStockInClose"><i class=" fa fa-times"></i> Close</button>
                            </div>
                        </div>
                    </div>
                    <div class="panel-body">
                        <form class="form-horizontal" role="form">
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Branch</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboINBranch"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">IN Number</label>
                                        <div class="col-sm-8">
                                            <input type="text" class="form-control requiredStockIn" id="StockIn_INnumber" placeholder="IN Number" disabled />
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">IN Date</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="INDate"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Account</label>
                                        <div class="col-sm-8">
                                            <table style="width: 100%" border="0">
                                                <tr>
                                                    <td style="width: 30%">
                                                        <div class="" id="cboINAccountCode"></div>
                                                    </td>
                                                    <td style="width: 1%"></td>
                                                    <td style="width: 69%">
                                                        <div class="" id="cboINAccount"></div>
                                                    </td>
                                                </tr>
                                            </table>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Article</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboINArticle"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Particulars</label>
                                        <div class="col-sm-8">
                                            <textarea rows="5" class="form-control textarea-custom requiredStockIn" id="StockIn_Particulars" placeholder="Particulars"></textarea>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Manual IN Number</label>
                                        <div class="col-sm-8">
                                            <input type="text" class="form-control  requiredStockIn" id="StockIn_ManualINNumber" placeholder="Manual IN Number">
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Is Produce</label>
                                        <div class="col-sm-8">
                                            <input type="checkbox" id="StockIn_Produce">
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Prepared by</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboINPreparedBy"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Checked by</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboINCheckedBy"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Approved by</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboINApprovedBy"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
                <!-- Stock In line -->
                <ul class="nav nav-tabs" role="tablist" id="myTab">
                    <li role="presentation" class="active"><a data-toggle="tab" href="#Items" id="itemTabId">Items</a></li>
                    <li role="presentation"><a data-toggle="tab" href="#InventoryEntries" id="inventoryEntryTabId">Inventory Entries</a></li>
                </ul>
                <br />
                <div class="tab-content">
                    <div id="Items" class="tab-pane fade in active">
                        <div class="panel panel-default">
                            <div class="panel-heading">
                                <div class="row">
                                    <div class="col-lg-12" align="right">
                                        <button class="btn btn-primary " id="btnAddStockInItem" onclick="cmdAddStockInItem_OnClick()"><i class="fa fa-plus"></i> Add</button>
                                        <button class="btn btn-primary " id="cmdINLineItemQueryButton" onclick="cmdINLineItemQueryButton_OnClick()"><i class="fa fa-search-plus"></i> Item Query</button>
                                    </div>
                                </div>
                            </div>
                            <div class="panel-body">
                                <div id="ItemGrid" class="grid"></div>
                            </div>
                        </div>
                    </div>
                    <div id="InventoryEntries" class="tab-pane fade in" style="margin-bottom: 15px;">
                        <div id="InventoryEntryGrid" class="grid"></div>
                    </div>
                </div>
            </section>

            @Html.Partial("_SoftwareFooter")
        </main>
    </div>
    <div id="c-mask" class="c-mask"></div>

    <!-- ==================== -->
    <!-- Stock In Item Detail -->
    <!-- ==================== -->
    <div class="modal fade" id="stockInItemsEdit" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="stockInItemsModalLabel">Stock-In Item</h4>
                </div>
                <div class="modal-body">
                    <center>
                        <span id="loadingModalItem"></span>
                    </center>
                    <div id="stockInItemsDetailForm">
                        <dl class="dl-horizontal">
                            <dt>Item</dt>
                            <dd>
                                <table style="width: 100%" border="0">
                                    <tr>
                                        <td style="width: 30%">
                                            <div class="comboBox-wide" id="cboINItemCode"></div>
                                        </td>
                                        <td style="width: 1%"></td>
                                        <td style="width: 69%">
                                            <div class="comboBox-wide" id="cboINItemDescription"></div>
                                        </td>
                                    </tr>
                                </table>
                            </dd>
                            <dt>Particulars</dt>
                            <dd><textarea rows="5" class="form-control textarea-custom requiredStockInItem" id="stockInItem_Particulars"></textarea></dd>
                            <dt>Quantity</dt>
                            <dd><input type="text" class="form-control  numberField  requiredStockInItem" id="stockInItem_Quantity" placeholder="0.00" /></dd>
                            <dt>Unit</dt>
                            <dd><div class="comboBox-wide" id="cboINItemUnit"></div></dd>
                            <dt>Cost</dt>
                            <dd><input type="text" class="form-control  numberField  requiredStockInItem" id="stockInItem_Cost" placeholder="0.00" /></dd>
                            <dt>Amount</dt>
                            <dd><input type="text" class="form-control  numberField  requiredStockInItem" id="stockInItem_Amount" placeholder="0.00" disabled /></dd>
                        </dl>
                    </div>
                </div>
                <div class="modal-footer">
                    <button id="cmdSaveStockInItemButton" class="btn btn-primary" onclick="cmdStockInItemSaveButton_OnClick()"><i class="fa fa-save"></i> Save</button>
                    <button id="cmdStockInItemDetailCloseButton" class="btn btn-danger" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Journal -->
    <div class="modal fade" id="journalDetail" role="dialog">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title" id="journalModalLabel"> Journal</h4>
                </div>
                <div class="modal-body">
                    <center>
                        <span id="loadingJournalGridList"></span>
                    </center>
                    <div id="journal_Content">
                        <div id="journalFlexGrid" style="max-height: 250px;"></div>
                        <br /><br />
                        <div class="row">
                            <div class="col-md-7"></div>
                            <div class="col-md-5">
                                <dl class="dl-horizontal">
                                    <dt>
                                        <b>Total Debit</b>
                                    </dt>
                                    <dd>
                                        <input type="text" class="form-control  numberField  requiredStockTransferItem" id="totalDebitInJournal" placeholder="0.00" disabled />
                                    </dd>
                                    <dt>
                                        <b>Total Credit</b>
                                    </dt>
                                    <dd>
                                        <input type="text" class="form-control  numberField  requiredStockTransferItem" id="totalCreditInJournal" placeholder="0.00" disabled />
                                    </dd>
                                    <dt>
                                        <b>Variance</b>
                                    </dt>
                                    <dd>
                                        <input type="text" class="form-control  numberField  requiredStockTransferItem" id="variance" placeholder="0.00" disabled />
                                    </dd>
                                </dl>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button id="cmdJournalDetailCloseButton" class="btn btn-danger" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- ======================================== -->
    <!-- Stock-In Items Delete Modal Confirmation -->
    <!-- ======================================== -->
    <div class="modal fade" id="deletStockInItemsConfirm" role="dialog">
        <div class="modal-dialog modal-sm">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Delete</h4>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete this stock in item?
                </div>
                <div class="modal-footer">
                    <button id="cmdConfirmDeleteStockInItems"  class="btn btn-danger" onclick="cmdStockInItemsConfirmDeleteButton_OnClick()"><i class="fa fa-trash"></i> Delete</button>
                    <button id="cmdConfirmDeleteStockInItemsCloseButton" class="btn btn-primary" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal for Item Query -->
    <div class="modal fade" id="INLinesItemQuery" role="dialog">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Item Query</h4>
                </div>
                <div class="modal-body">
                    <center>
                        <span id="loadingItemQuery"></span>
                    </center>
                    <div id="itemQueryPanel">
                        <div class="panel panel-default">
                            <div class="panel-heading">
                                <div class="input-group  ">
                                    <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                    <input type="text" class="form-control" id="itemQueryFilter" placeholder="Search">
                                </div>
                            </div>
                        </div>
                        <div id="itemQueryGrid" style="max-height: 300px;"></div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    @Scripts.Render("~/Scripts/Software-js")
    <script type="text/javascript">
        // ================
        // Global Variables
        // ================
        var cboINBranch = new wijmo.input.ComboBox('#cboINBranch');
        var cboINAccountCode = new wijmo.input.ComboBox('#cboINAccountCode');
        var cboINAccount = new wijmo.input.ComboBox('#cboINAccount');
        var cboINArticle = new wijmo.input.ComboBox('#cboINArticle');
        var cboINPreparedBy = new wijmo.input.ComboBox('#cboINPreparedBy');
        var cboINCheckedBy = new wijmo.input.ComboBox('#cboINCheckedBy');
        var cboINApprovedBy = new wijmo.input.ComboBox('#cboINApprovedBy');
        var INDate = new wijmo.input.InputDate('#INDate');
        var isAccountChanged = false;
        var isLocked = false;
        var articleIdSelectedId = 0;
        var cboINItemCode = new wijmo.input.ComboBox('#cboINItemCode');
        var cboINItemDescription = new wijmo.input.ComboBox('#cboINItemDescription');
        var cboINItemUnit = new wijmo.input.ComboBox('#cboINItemUnit');
        var items;
        var itemGrid;
        var stockInItemId = 0;
        var inventoryCollectionView;
        var inventoryFlexGrid;
        var journalCollectionView;
        var journalFlexGrid = new wijmo.grid.FlexGrid('#journalFlexGrid');
        var itemQueryItemsCollection;
        var itemQueryGrid = new wijmo.grid.FlexGrid('#itemQueryGrid');

        // =======================
        // Get URL Parameter Value
        // =======================
        function getParam(name) {
            name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");

            var regexS = "[\\?&]" + name + "=([^&#]*)";
            var regex = new RegExp(regexS);

            var results = regex.exec(window.location.href);
            if (results == null) {
                return "";
            } else {
                return results[1];
            }
        }

        // ========================
        // GET Branch for Combo Box
        // ========================
        function getBranchesForComboBox() {
            NProgress.start();
            var branchesObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listBranch',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (branchListResults) {
                    if (branchListResults.length > 0) {
                        for (i = 0; i < branchListResults.length; i++) {
                            branchesObservableArray.push({
                                Id: branchListResults[i]["Id"],
                                Branch: branchListResults[i]["Branch"]
                            });
                        }
                    }

                    cboINBranch.dispose();
                    cboINBranch = new wijmo.input.ComboBox('#cboINBranch', {
                        disabled: true,
                        isEditable: false,
                        placeholder: "Select Branch",
                        itemsSource: branchesObservableArray,
                        displayMemberPath: "Branch",
                        selectedValuePath: "Id"
                    });

                    getAccountForComboBox();
                }
            });
        }

        // ====================
        // Get Stock In Account
        // ====================
        function getAccountForComboBox() {
            var accountsObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listAccount',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (accountListResults) {
                    if (accountListResults.length > 0) {
                        for (i = 0; i < accountListResults.length; i++) {
                            accountsObservableArray.push({
                                Id: accountListResults[i]["Id"],
                                AccountCode: accountListResults[i]["AccountCode"],
                                Account: accountListResults[i]["Account"]
                            });
                        }
                    }

                    cboINAccountCode.dispose();
                    cboINAccountCode = new wijmo.input.ComboBox('#cboINAccountCode', {
                        isEditable: false,
                        placeholder: "Select Code",
                        itemsSource: accountsObservableArray,
                        displayMemberPath: "AccountCode",
                        selectedValuePath: "Id",
                        onSelectedIndexChanged: function () {
                            cboINAccount.selectedValue = this.selectedValue;
                        }
                    });

                    cboINAccount.dispose();
                    cboINAccount = new wijmo.input.ComboBox('#cboINAccount', {
                        isEditable: false,
                        placeholder: "Select Account",
                        itemsSource: accountsObservableArray,
                        displayMemberPath: "Account",
                        selectedValuePath: "Id",
                        onSelectedIndexChanged: function () {
                            cboINAccountCode.selectedValue = this.selectedValue;
                            isAccountChanged = true;

                            getArticlesForComboBox();
                        }
                    });

                    getArticlesForComboBox();
                }
            });
        }

        // ==========================
        // GET Articles for Combo Box
        // ==========================
        function getArticlesForComboBox() {
            var articlesObservableArray = new wijmo.collections.ObservableArray();
            if (cboINAccount.selectedValue != null) {
                $.ajax({
                    url: '/api/listArticle/byAccount/' + cboINAccount.selectedValue,
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    success: function (articlesListResults) {
                        if (articlesListResults.length > 0) {
                            for (i = 0; i < articlesListResults.length; i++) {
                                articlesObservableArray.push({
                                    Id: articlesListResults[i]["Id"],
                                    Article: articlesListResults[i]["Article"]
                                });
                            }
                        }

                        var disabled = true;
                        if (!isLocked) {
                            if (articlesListResults.length > 0) {
                                disabled = false;
                            } else {
                                $("#cmdStockInSaveLock").prop("disabled", true);
                            }
                        } else {
                            $("#cmdStockInSaveLock").prop("disabled", true);
                        }

                        cboINArticle.dispose();
                        cboINArticle = new wijmo.input.ComboBox('#cboINArticle', {
                            disabled: disabled,
                            isEditable: false,
                            placeholder: "Select Article",
                            itemsSource: articlesObservableArray,
                            displayMemberPath: "Article",
                            selectedValuePath: "Id",
                            selectedValue: articleIdSelectedId
                        });

                        if (!isAccountChanged) {
                            getUsersForComboBox();
                        }
                    }
                });
            } else {
                cboINArticle.dispose();
                cboINArticle = new wijmo.input.ComboBox('#cboINArticle', {
                    disabled: true,
                    isEditable: false,
                    itemsSource: articlesObservableArray,
                });

                if (!isAccountChanged) {
                    getUsersForComboBox();
                }
            }
        }

        // =======================
        // GET Users for Combo Box
        // =======================
        function getUsersForComboBox() {
            var usersObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listUser',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (userListResults) {
                    if (userListResults.length > 0) {
                        for (i = 0; i < userListResults.length; i++) {
                            usersObservableArray.push({
                                Id: userListResults[i]["Id"],
                                FullName: userListResults[i]["FullName"]
                            });
                        }
                    }

                    cboINPreparedBy.dispose();
                    cboINPreparedBy = new wijmo.input.ComboBox('#cboINPreparedBy', {
                        disabled: true,
                        isEditable: false,
                        placeholder: "Select User",
                        itemsSource: usersObservableArray,
                        displayMemberPath: "FullName",
                        selectedValuePath: "Id"
                    });

                    cboINCheckedBy.dispose();
                    cboINCheckedBy = new wijmo.input.ComboBox('#cboINCheckedBy', {
                        isEditable: false,
                        placeholder: "Select User",
                        itemsSource: usersObservableArray,
                        displayMemberPath: "FullName",
                        selectedValuePath: "Id"
                    });

                    cboINApprovedBy.dispose();
                    cboINApprovedBy = new wijmo.input.ComboBox('#cboINApprovedBy', {
                        isEditable: false,
                        placeholder: "Select User",
                        itemsSource: usersObservableArray,
                        displayMemberPath: "FullName",
                        selectedValuePath: "Id"
                    });

                    getStockInById();
                }
            });
        }

        // ================
        // GET Stock In List
        // ================
        function getStockInById() {
            if (document.location.search.length > 0) {
                var stockInId = getParam("id");
                $.ajax({
                    url: '/api/stockIn/' + stockInId,
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    success: function (Results) {
                        if (Results != null) {
                            cboINBranch.selectedValue = Results.BranchId;
                            document.getElementById('StockIn_INnumber').value = Results.INNumber;
                            INDate.dispose();
                            INDate = new wijmo.input.InputDate('#INDate', {
                                format: 'MM-dd-yyyy',
                                value: new Date(Results.INDate),
                            });
                            cboINAccountCode.selectedValue = Results.AccountId;
                            cboINAccount.selectedValue = Results.AccountId;
                            cboINArticle.selectedValue = Results.ArticleId;
                            articleIdSelectedId = Results.ArticleId;
                            document.getElementById('StockIn_Particulars').value = Results.Particulars;
                            document.getElementById('StockIn_ManualINNumber').value = Results.ManualINNumber
                            document.getElementById('StockIn_Produce').checked = Results.IsProduced;
                            cboINPreparedBy.selectedValue = Results.PreparedById;
                            cboINCheckedBy.selectedValue = Results.CheckedById;
                            cboINApprovedBy.selectedValue = Results.ApprovedById;

                            document.getElementById('createdBy').innerHTML = Results.CreatedBy;
                            document.getElementById('createdDate').innerHTML = Results.CreatedDateTime;
                            document.getElementById('updatedBy').innerHTML = Results.UpdatedBy;
                            document.getElementById('updatedDate').innerHTML = Results.UpdatedDateTime;

                            if (Results.IsLocked) {
                                cboINBranch.disabled = true;
                                INDate.disabled = true;
                                cboINAccountCode.disabled = true;
                                cboINAccount.disabled = true;
                                cboINArticle.disabled = true;
                                document.getElementById('StockIn_Particulars').disabled = true;
                                document.getElementById('StockIn_ManualINNumber').disabled = true;
                                document.getElementById('StockIn_Produce').disabled = true;
                                cboINPreparedBy.disabled = true;
                                cboINCheckedBy.disabled = true;
                                cboINApprovedBy.disabled = true;

                                $("#cmdStockInSaveLock").prop("disabled", true);
                                $("#btnAddStockInItem").prop("disabled", true);
                                $("#cmdINLineItemQueryButton").prop("disabled", true);

                                var canUnLock = "@ViewData["CanUnlock"]";
                                if (canUnLock == "False") {
                                    $("#cmdStockInEdit").prop("disabled", true);
                                }

                                var canPrint = "@ViewData["CanPrint"]";
                                if (canPrint == "False") {
                                    $("#cmdStockInPrint").prop("disabled", true);
                                }

                                isLocked = true;
                            } else {
                                $("#cmdStockInJournal").prop("disabled", true);
                                $("#cmdStockInEdit").prop("disabled", true);
                                $("#cmdStockInPrint").prop("disabled", true);

                                var canLock = "@ViewData["CanLock"]";
                                if (canLock == "False") {
                                    $("#cmdStockInSaveLock").prop("disabled", true);
                                }

                                var canAdd = "@ViewData["CanAdd"]";
                                if (canAdd == "False") {
                                    $("#btnAddStockInItem").prop("disabled", true)
                                    $("#cmdINLineItemQueryButton").prop("disabled", true)
                                }
                            }

                            createStockInItemsFlexGrid();
                            createInventoryFlexGrid();
                        }
                    }
                });
            } else {
                alert("No Id Parameter Value");
                window.location = "/Software/StockIn";
            }
        }

        // ====================
        // Stock IN Save - Lock
        // ====================
        function btnStockInSaveLock_OnClick() {
            var stockInObject = new Object();
            var stockInId = getParam("id");
            stockInObject.BranchId = cboINBranch.selectedValue;
            stockInObject.INNumber = document.getElementById('StockIn_INnumber').value;
            stockInObject.INDate = INDate.value.toLocaleDateString();
            stockInObject.AccountId = cboINAccount.selectedValue;
            stockInObject.ArticleId = cboINArticle.selectedValue;
            stockInObject.Particulars = document.getElementById('StockIn_Particulars').value;
            stockInObject.ManualINNumber = document.getElementById('StockIn_ManualINNumber').value;
            stockInObject.IsProduced = document.getElementById('StockIn_Produce').checked;
            stockInObject.PreparedById = cboINPreparedBy.selectedValue;
            stockInObject.CheckedById = cboINCheckedBy.selectedValue;
            stockInObject.ApprovedById = cboINApprovedBy.selectedValue;
            var data = JSON.stringify(stockInObject);

            var isValid = true;
            $('.requiredStockIn').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                } else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            if (isValid) {
                document.getElementById('cmdStockInSaveLock').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Locking";
                $("#cmdStockInJournal").prop("disabled", true);
                $("#cmdStockInSaveLock").prop("disabled", true);
                $("#cmdStockInEdit").prop("disabled", true);
                $("#cmdStockInPrint").prop("disabled", true);
                $("#cmdStockInClose").prop("disabled", true);

                $.ajax({
                    type: "PUT",
                    url: '/api/updateStockIn/' + stockInId,
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    data: data,
                    statusCode: {
                        200: function () {
                            toastr.success("Lock Successful");
                            window.setTimeout(function () {
                                location.reload()
                            }, 1000);
                        },
                        404: function () {
                            toastr.error("Not Found");
                            document.getElementById('cmdStockInSaveLock').innerHTML = "<i class='fa fa-lock'></i> Lock";
                            $("#cmdStockInSaveLock").prop("disabled", false);
                            $("#cmdStockInClose").prop("disabled", false);
                        },
                        400: function () {
                            toastr.error("Bad Request");
                            document.getElementById('cmdStockInSaveLock').innerHTML = "<i class='fa fa-lock'></i> Lock";
                            $("#cmdStockInSaveLock").prop("disabled", false);
                            $("#cmdStockInClose").prop("disabled", false);
                        }
                    }
                });
            } else {
                toastr.error("Invalid Entry");
            }
        }

        // ======================
        // Stock IN Edit - UnLock
        // ======================
        function btnStockInEdit_OnClick() {
            document.getElementById('cmdStockInEdit').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Unlocking";
            $("#cmdStockInJournal").prop("disabled", true);
            $("#cmdStockInSaveLock").prop("disabled", true);
            $("#cmdStockInEdit").prop("disabled", true);
            $("#cmdStockInPrint").prop("disabled", true);
            $("#cmdStockInClose").prop("disabled", true);

            var stockInId = getParam("id");
            $.ajax({
                type: "PUT",
                url: '/api/updateStockInIsLocked/' + stockInId,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Unlock Successful");
                        window.setTimeout(function () {
                            location.reload()
                        }, 1000);
                    },
                    404: function () {
                        toastr.error("Not Found");
                        document.getElementById('cmdStockInEdit').innerHTML = "<i class='fa fa-unlock'></i> Unlock";
                        $("#cmdStockInJournal").prop("disabled", false);
                        $("#cmdStockInEdit").prop("disabled", false);
                        $("#cmdStockInPrint").prop("disabled", false);
                        $("#cmdStockInClose").prop("disabled", false);

                    },
                    400: function () {
                        toastr.error("Bad Request");
                        document.getElementById('cmdStockInEdit').innerHTML = "<i class='fa fa-unlock'></i> Unlock";
                        $("#cmdStockInJournal").prop("disabled", false);
                        $("#cmdStockInEdit").prop("disabled", false);
                        $("#cmdStockInPrint").prop("disabled", false);
                        $("#cmdStockInClose").prop("disabled", false);
                    }
                }
            });
        }

        // ========
        // Print IN
        // ========
        function btnStockInPrint_OnClick() {
            var stockInId = getParam("id");
            window.location = "/RepStockIn/StockIn?StockInId=" + stockInId;
        }

        function computeAmount() {
            var stockIn_Quantity = document.getElementById('stockInItem_Quantity').value.replace(/\,/g, '');
            var stockIn_Cost = document.getElementById('stockInItem_Cost').value.replace(/\,/g, '');
            var stockInItemAmount = stockIn_Quantity * stockIn_Cost;
            document.getElementById('stockInItem_Amount').value = stockInItemAmount.toLocaleString();
        }

        $('#stockInItem_Quantity').keyup(function () {
            computeAmount();
        });

        $('#stockInItem_Cost').keyup(function () {
            computeAmount();
        });

        // ======================
        // GET Stock IN Item List
        // ======================
        function getItem() {
            var itemsObservableArray = new wijmo.collections.ObservableArray;
            if (document.location.search.length > 0) {
                var stockInId = getParam("id");
                NProgress.start();
                $.ajax({
                    url: '/api/listStockInItemByINId/' + stockInId,
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    success: function (Results) {
                        if (Results.length > 0) {
                            var canEdit = "@ViewData["CanEdit"]";
                            var editDisabled = "";
                            if (canEdit == "False") {
                                editDisabled = "disabled";
                            }

                            var canDelete = "@ViewData["CanDelete"]";
                            var deleteDisabled = "";
                            if (canDelete == "False") {
                                deleteDisabled = "disabled";
                            }

                            var btnEditId = "<button class='btn btn-primary btn-xs btn-block' onclick='btnEditStockInItem_Onclick()' " + editDisabled + "><i class='fa fa-edit'></i> Edit</button>";
                            var btnDeleteId = "<button class='btn btn-danger btn-xs btn-block' onclick='btnDeleteStockInItem_Onclick()'" + deleteDisabled + "><i class='fa fa-trash'></i> Delete</button>";
                            if (isLocked) {
                                btnEditId = "<button class='btn btn-primary btn-xs btn-block' onclick='btnEditStockInItem_Onclick()' disabled><i class='fa fa-edit'></i> Edit</button>";
                                btnDeleteId =  "<button class='btn btn-danger btn-xs btn-block' onclick='btnDeleteStockInItem_Onclick()' disabled><i class='fa fa-trash'></i> Delete</button>";
                            }

                            for (i = 0; i < Results.length; i++) {
                                itemsObservableArray.push({
                                    EditId: btnEditId,
                                    DeleteId: btnDeleteId,
                                    Id: Results[i]["Id"],
                                    INId: Results[i]["INId"],
                                    IN: Results[i]["IN"],
                                    ItemId: Results[i]["ItemId"],
                                    ItemCode: Results[i]["ItemCode"],
                                    Item: Results[i]["Item"],
                                    Particulars: Results[i]["Particulars"],
                                    UnitId: Results[i]["UnitId"],
                                    Unit: Results[i]["Unit"],
                                    Quantity: Results[i]["Quantity"],
                                    Cost: Results[i]["Cost"],
                                    Amount: Results[i]["Amount"],
                                    BaseUnitId: Results[i]["BaseUnitId"],
                                    BaseUnit: Results[i]["BaseUnit"],
                                    BaseQuantity: Results[i]["BaseQuantity"],
                                    BaseCost: Results[i]["BaseCost"]
                                });
                            }
                        }

                        NProgress.done();
                    }
                });
            }

            return itemsObservableArray;
        }

        // =============
        // Refresh Items
        // =============
        function refreshStockInItemsFlexGrid() {
            items = new wijmo.collections.CollectionView(getItem());
            itemGrid.itemsSource = items;
            itemGrid.trackChanges = true;
        }

        // ======
        //  Items
        // ======
        function createStockInItemsFlexGrid() {
            items = new wijmo.collections.CollectionView(getItem());

            itemGrid = new wijmo.grid.FlexGrid('#ItemGrid');
            itemGrid.initialize({
                columns: [
                    {
                        "header": "Edit",
                        "binding": "EditId",
                        "width": 70,
                        "align": "center",
                        "allowResizing": false,
                        "allowSorting": false,
                        "isContentHtml": true
                    },
                    {
                        "header": "Delete",
                        "binding": "DeleteId",
                        "width": 70,
                        "align": "center",
                        "allowResizing": false,
                        "allowSorting": false,
                        "isContentHtml": true
                    },
                    {
                        "header": "Code",
                        "binding": "ItemCode",
                        "allowSorting": true,
                        "width": 150
                    },
                    {
                        "header": "Item",
                        "binding": "Item",
                        "allowSorting": true,
                        "width": 180
                    },
                    {
                        "header": "Particulars",
                        "binding": "Particulars",
                        "allowSorting": true,
                        "width": 160
                    },
                    {
                        "header": "Quantity",
                        "binding": "Quantity",
                        "allowSorting": true,
                        "width": 110
                    },
                    {
                        "header": "Unit",
                        "binding": "Unit",
                        "allowSorting": true,
                        "width": 110
                    },
                    {
                        "header": "Cost",
                        "binding": "Cost",
                        "allowSorting": true,
                        "width": 110
                    },
                    {
                        "header": "Amount",
                        "binding": "Amount",
                        "allowSorting": true,
                        "width": 110
                    },
                    {
                        "header": "Unit",
                        "binding": "BaseUnit",
                        "allowSorting": true,
                        "width": 110
                    },
                    {
                        "header": "Quantity",
                        "binding": "BaseQuantity",
                        "allowSorting": true,
                        "width": 110
                    },
                    {
                        "header": "Cost",
                        "binding": "BaseCost",
                        "allowSorting": true,
                        "width": 110
                    },
                ],
                autoGenerateColumns: false,
                itemsSource: items,
                isReadOnly: true,
                frozenColumns: 2,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            itemGrid.trackChanges = true;

            var hr = new wijmo.grid.Row();
            itemGrid.allowMerging = wijmo.grid.AllowMerging.AllHeaders;
            itemGrid.columnHeaders.rows.push(hr);
            itemGrid.columnHeaders.rows[0].allowMerging = true;

            itemGrid.columnHeaders.columns[0].allowMerging = true;
            itemGrid.columnHeaders.setCellData(0, 0, 'Edit');

            itemGrid.columnHeaders.columns[1].allowMerging = true;
            itemGrid.columnHeaders.setCellData(0, 1, 'Delete');

            itemGrid.columnHeaders.columns[2].allowMerging = true;
            itemGrid.columnHeaders.setCellData(0, 2, 'Code');

            itemGrid.columnHeaders.columns[3].allowMerging = true;
            itemGrid.columnHeaders.setCellData(0, 3, 'Item');

            itemGrid.columnHeaders.columns[4].allowMerging = true;
            itemGrid.columnHeaders.setCellData(0, 4, 'Particulars');

            itemGrid.columnHeaders.columns[5].allowMerging = true;
            itemGrid.columnHeaders.setCellData(0, 5, 'Quantity');

            itemGrid.columnHeaders.columns[6].allowMerging = true;
            itemGrid.columnHeaders.setCellData(0, 6, 'Unit');

            itemGrid.columnHeaders.columns[7].allowMerging = true;
            itemGrid.columnHeaders.setCellData(0, 7, 'Cost');

            itemGrid.columnHeaders.columns[8].allowMerging = true;
            itemGrid.columnHeaders.setCellData(0, 8, 'Amount');

            for (var columnBasicUnitConversion = 9; columnBasicUnitConversion <= 11; columnBasicUnitConversion++) {
                itemGrid.columnHeaders.setCellData(0, columnBasicUnitConversion, 'Basic Unit Conversion');
            }
        }

        // ======================================
        // GET Item Id, Manual Code and Component
        // ======================================
        function getArticleItemForManualCodeAndComponent(itemId, unitId) {
            var articleItemsObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listArticleByArticleTypeIdByInventory/1',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            articleItemsObservableArray.push({
                                Id: results[i]["Id"],
                                ManualArticleCode: results[i]["ManualArticleCode"],
                                ItemDescription: results[i]["Article"],
                                UnitId: results[i]["UnitId"],
                                Unit: results[i]["Unit"],
                                Particulars: results[i]["Particulars"]
                            });
                        }
                    }

                    var disabled = true;
                    if (results.length > 0) {
                        disabled = false;
                        $("#cmdSaveStockInItemButton").prop("disabled", false);
                    } else {
                        $("#cmdSaveStockInItemButton").prop("disabled", true);
                    }

                    cboINItemCode.dispose();
                    cboINItemCode = new wijmo.input.ComboBox('#cboINItemCode', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: articleItemsObservableArray,
                        displayMemberPath: "ManualArticleCode",
                        selectedValuePath: "Id",
                        selectedValue: itemId,
                        onSelectedIndexChanged: function () {
                            cboINItemDescription.selectedValue = this.selectedValue;
                        }
                    });

                    cboINItemDescription.dispose();
                    cboINItemDescription = new wijmo.input.ComboBox('#cboINItemDescription', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: articleItemsObservableArray,
                        displayMemberPath: "ItemDescription",
                        selectedValuePath: "Id",
                        selectedValue: itemId,
                        onSelectedIndexChanged: function () {
                            cboINItemCode.selectedValue = this.selectedValue;
                            getStockInItemUnitForComboBox(unitId);
                        }
                    });

                    getStockInItemUnitForComboBox(unitId);
                }
            });
        }

        // =============
        // Get Item Unit
        // =============
        function getStockInItemUnitForComboBox(unitId) {
            var stockInUnits = new wijmo.collections.ObservableArray();
            if (cboINItemDescription.selectedValue != null) {
                $.ajax({
                    url: '/api/listArticleUnitByArticleId/' + cboINItemDescription.selectedValue,
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    success: function (results) {
                        if (results.length > 0) {
                            for (i = 0; i < results.length; i++) {
                                stockInUnits.push({
                                    UnitId: results[i]["UnitId"],
                                    Unit: results[i]["Unit"]
                                });
                            }
                        }

                        var disabled = true;
                        if (results.length > 0) {
                            disabled = false;
                        } else {
                            $("#cmdSaveStockInItemButton").prop("disabled", true);
                        }

                        cboINItemUnit.dispose();
                        cboINItemUnit = new wijmo.input.ComboBox('#cboINItemUnit', {
                            disabled: disabled,
                            isEditable: false,
                            itemsSource: stockInUnits,
                            displayMemberPath: "Unit",
                            selectedValuePath: "UnitId",
                            selectedValue: unitId,
                        });

                        $("#loadingModalItem").hide();
                        $("#stockInItemsDetailForm").show();
                    }
                });
            } else {
                cboINItemUnit.dispose();
                cboINItemUnit = new wijmo.input.ComboBox('#cboINItemUnit', {
                    disabled: true,
                    isEditable: false,
                    itemsSource: stockInUnits
                });

                $("#cmdSaveStockInItemButton").prop("disabled", true);
            }
        }

        // =================
        // ADD Stock In Item
        // =================
        function cmdAddStockInItem_OnClick() {
            $('#stockInItemsEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $('.requiredStockInItem').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            $("#loadingModalItem").show();
            document.getElementById("loadingModalItem").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#stockInItemsDetailForm").hide();

            document.getElementById('cmdSaveStockInItemButton').innerHTML = "<i class='fa fa-save'></i> Save";
            $("#cmdSaveStockInItemButton").prop("disabled", true);
            $("#cmdStockInItemDetailCloseButton").prop("disabled", false);

            stockInItemId = 0;
            getArticleItemForManualCodeAndComponent(0,0);
            document.getElementById('stockInItem_Particulars').value = 'NA';
            document.getElementById('stockInItem_Quantity').value = 1;
            document.getElementById('stockInItem_Cost').value = 0;
            document.getElementById('stockInItem_Amount').value = 0;
        }

        // ==================
        // SAVE Stock In Item
        // ==================
        function cmdStockInItemSaveButton_OnClick() {
            var stockInItmeObject = new Object();
            var stockInId = getParam("id");
            stockInItmeObject.INId = stockInId;
            stockInItmeObject.ItemId = cboINItemDescription.selectedValue;
            stockInItmeObject.Particulars = document.getElementById('stockInItem_Particulars').value;
            stockInItmeObject.UnitId = cboINItemUnit.selectedValue;
            stockInItmeObject.Quantity = document.getElementById('stockInItem_Quantity').value;
            stockInItmeObject.Cost = document.getElementById('stockInItem_Cost').value;
            stockInItmeObject.Amount = document.getElementById('stockInItem_Amount').value;
            var stockInItemData = JSON.stringify(stockInItmeObject);

            var isValid = true;
            $('.requiredStockInItem').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                } else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            if (isValid) {
                document.getElementById('cmdSaveStockInItemButton').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Saving";
                $("#cmdSaveStockInItemButton").prop("disabled", true);
                $("#cmdStockInItemDetailCloseButton").prop("disabled", true);

                if (stockInItemId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/addStockInItem',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: stockInItemData,
                        success: function (id) {
                            if (id > 0) {
                                toastr.success("Save Successful");
                                $('#stockInItemsEdit').modal('hide');
                                refreshStockInItemsFlexGrid();
                            } else {
                                toastr.error("Internal Server Error");
                                document.getElementById('cmdSaveStockInItemButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#cmdSaveStockInItemButton").prop("disabled", false);
                                $("#cmdStockInItemDetailCloseButton").prop("disabled", false);
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/updateStockInItem/' + stockInItemId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: stockInItemData,
                        statusCode: {
                            200: function () {
                                toastr.success("Update Successful");
                                $('#stockInItemsEdit').modal('hide');
                                refreshStockInItemsFlexGrid();
                            },
                            404: function () {
                                toastr.error("Not Found");
                                $('#stockInItemsEdit').modal('hide');
                                document.getElementById('cmdSaveStockInItemButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#cmdSaveStockInItemButton").prop("disabled", false);
                                $("#cmdStockInItemDetailCloseButton").prop("disabled", false);
                            },
                            400: function () {
                                toastr.error("Bad Request");
                                $('#stockInItemsEdit').modal('hide');
                                document.getElementById('cmdSaveStockInItemButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#cmdSaveStockInItemButton").prop("disabled", false);
                                $("#cmdStockInItemDetailCloseButton").prop("disabled", false);
                            }
                        }
                    });
                }
            } else {
                toastr.error("Invalid Entry");
            }
        }


        // ==================
        // Edit Stock In Item
        // ==================
        function btnEditStockInItem_Onclick() {
            $('#stockInItemsEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $('.requiredStockInItem').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            $("#loadingModalItem").show();
            document.getElementById("loadingModalItem").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#stockInItemsDetailForm").hide();

            document.getElementById('cmdSaveStockInItemButton').innerHTML = "<i class='fa fa-save'></i> Save";
            $("#cmdSaveStockInItemButton").prop("disabled", true);
            $("#cmdStockInItemDetailCloseButton").prop("disabled", false);

            items.editItem(items.currentItem);
            var item = items.currentEditItem;
            stockInItemId = item.Id;
            getArticleItemForManualCodeAndComponent(item.ItemId, item.UnitId);
            document.getElementById('stockInItem_Particulars').value = item.Particulars;
            document.getElementById('stockInItem_Quantity').value = item.Quantity.toLocaleString();
            document.getElementById('stockInItem_Cost').value = item.Cost.toLocaleString();
            document.getElementById('stockInItem_Amount').value = item.Amount.toLocaleString();
        }

        // ====================
        // Delete Stock In Item
        // ====================
        function btnDeleteStockInItem_Onclick() {
            $('#deletStockInItemsConfirm').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById('cmdConfirmDeleteStockInItems').innerHTML = "<i class='fa fa-trash'></i> Delete";
            $("#cmdConfirmDeleteStockInItems").prop("disabled", false);
            $("#cmdConfirmDeleteStockInItemsCloseButton").prop("disabled", false);
        }

        // confirm delete stock in items
        function cmdStockInItemsConfirmDeleteButton_OnClick() {
            document.getElementById('cmdConfirmDeleteStockInItems').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Deleting";
            $("#cmdConfirmDeleteStockInItems").prop("disabled", true);
            $("#cmdConfirmDeleteStockInItemsCloseButton").prop("disabled", true);

            items.editItem(items.currentItem);
            var item = items.currentEditItem.Id;
            $.ajax({
                url: '/api/deleteStockInItem/' + item,
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Delete Successful");
                        $('#deletStockInItemsConfirm').modal('hide');
                        refreshStockInItemsFlexGrid();
                    },
                    404: function () {
                        toastr.error("Not Found");
                        $('#deletStockInItemsConfirm').modal('hide');
                        document.getElementById('cmdConfirmDeleteStockInItems').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $("#cmdConfirmDeleteStockInItems").prop("disabled", false);
                        $("#cmdConfirmDeleteStockInItemsCloseButton").prop("disabled", false);
                    },
                    400: function () {
                        toastr.error("Bad Request");
                        $('#deletStockInItemsConfirm').modal('hide');
                        document.getElementById('cmdConfirmDeleteStockInItems').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $("#cmdConfirmDeleteStockInItems").prop("disabled", false);
                        $("#cmdConfirmDeleteStockInItemsCloseButton").prop("disabled", false);
                    }
                }
            });
        }

        // =====================
        // GET Inventory Entries
        // =====================
        function getInventoryEntries() {
            var id = getParam('id');
            var inventoryObservableArray = new wijmo.collections.ObservableArray;
            $.ajax({
                url: '/api/listInventoryByINId/' + id,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (Results) {
                    if (Results.length > 0) {
                        for (i = 0; i < Results.length; i++) {

                            var InventoryDateResult = new Date(Results[i]["InventoryDate"])
                            var InventoryDate = ('0' + (InventoryDateResult.getMonth() + 1)).slice(-2) + '-' + ('0' + InventoryDateResult.getDate()).slice(-2) + '-' + InventoryDateResult.getFullYear();

                            inventoryObservableArray.push({
                                Id: Results[i]["Id"],
                                BranchId: Results[i]["BranchId"],
                                Branch: Results[i]["Branch"],
                                InventoryDate: InventoryDate,
                                ArticleId: Results[i]["ArticleId"],
                                Article: Results[i]["Article"],
                                ArticleInventoryId: Results[i]["ArticleInventoryId"],
                                RRId: Results[i]["RRId"],
                                SIId: Results[i]["SIId"],
                                INId: Results[i]["INId"],
                                OTId: Results[i]["OTId"],
                                STId: Results[i]["STId"],
                                QuantityIn: Results[i]["QuantityIn"],
                                Quantity: Results[i]["Quantity"],
                                QuantityOut: Results[i]["QuantityOut"],
                                Amount: Results[i]["Amount"],
                                Particulars: Results[i]["Particulars"],
                                Code: Results[i]["Code"],
                                Unit: Results[i]["Unit"]
                            });
                        }
                    }

                    NProgress.done();
                }
            });

            return inventoryObservableArray;
        }

        // ===========================
        // Refresh Inventory Flex Grid
        // ===========================
        function refreshInventoryFlexGrid() {
            inventoryCollectionView = new wijmo.collections.CollectionView(getInventoryEntries());
            inventoryFlexGrid.itemsSource = inventoryCollectionView;
            inventoryFlexGrid.trackChanges = true;
        }

        // ================================
        // On Page Load for Inventory Entry
        // ================================
        function createInventoryFlexGrid() {
            inventoryCollectionView = new wijmo.collections.CollectionView(getInventoryEntries());

            inventoryFlexGrid = new wijmo.grid.FlexGrid('#InventoryEntryGrid');
            inventoryFlexGrid.initialize({
                columns: [
                    {
                        "header": "Date",
                        "binding": "InventoryDate",
                        "allowSorting": true,
                        "width": "1*"
                    },
                    {
                        "header": "Branch",
                        "binding": "Branch",
                        "allowSorting": true,
                        "width": "1.5*",
                    },
                    {
                        "header": "Item",
                        "binding": "Article",
                        "align": "left",
                        "allowSorting": true,
                        "width": "1.7*",
                    },
                    {
                        "header": "Particulars",
                        "binding": "Particulars",
                        "align": "left",
                        "allowSorting": true,
                        "width": "1.5*",
                    },
                    {
                        "header": "Inventory Code",
                        "binding": "Code",
                        "allowSorting": true,
                        "width": "1.3*",
                    },
                    {
                        "header": "Quantity",
                        "binding": "Quantity",
                        "allowSorting": true,
                        "width": "1*",
                    },
                    {
                        "header": "Unit",
                        "binding": "Unit",
                        "allowSorting": true,
                        "width": "1*",
                    },
                    {
                        "header": "Amount",
                        "binding": "Amount",
                        "allowSorting": true,
                        "width": "1*",
                    },
                ],
                autoGenerateColumns: false,
                itemsSource: inventoryCollectionView,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            inventoryFlexGrid.trackChanges = true;
        }

        // ===========
        // Get Journal
        // ===========
        function getJournalListForRR() {
            var journalsObservableArray = new wijmo.collections.ObservableArray;
            var id = getParam('id');
            $.ajax({
                url: '/api/listJournalByINId/' + id,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (Results) {
                    if (Results.length > 0) {
                        for (i = 0; i < Results.length; i++) {
                            journalsObservableArray.push({
                                Id: Results[i]["Id"],
                                JournalDate: (Results[i]["JournalDate"]).replace(/\//g, '-'),
                                BranchId: Results[i]["BranchId"],
                                Branch: Results[i]["Branch"],
                                AccountId: Results[i]["AccountId"],
                                AccountCode: Results[i]["AccountCode"],
                                Account: Results[i]["Account"],
                                ArticleId: Results[i]["ArticleId"],
                                Article: Results[i]["Article"],
                                Particulars: Results[i]["Particulars"],
                                DebitAmount: Results[i]["DebitAmount"],
                                CreditAmount: Results[i]["CreditAmount"],
                                ORId: Results[i]["ORId"],
                                CVId: Results[i]["CVId"],
                                JVId: Results[i]["JVId"],
                                RRId: Results[i]["RRId"],
                                SIId: Results[i]["SIId"],
                                INId: Results[i]["INId"],
                                OTId: Results[i]["OTId"],
                                STId: Results[i]["STId"],
                                DocumentReference: Results[i]["DocumentReference"],
                                APRRId: Results[i]["APRRId"],
                                ARSIId: Results[i]["ARSIId"]
                            });

                            var debitAmountTotal = 0;
                            var creditAmountTotal = 0;

                            var a = 0;
                            while (a < Results.length) {
                                debitAmountTotal += Results[a]["DebitAmount"];
                                creditAmountTotal += Results[a]["CreditAmount"];
                                a++;
                            }
                        }

                        document.getElementById('totalDebitInJournal').value = debitAmountTotal.toLocaleString();
                        document.getElementById('totalCreditInJournal').value = creditAmountTotal.toLocaleString();
                        var variance = debitAmountTotal - creditAmountTotal;
                        document.getElementById('variance').value = variance.toLocaleString();
                    }

                    $("#loadingJournalGridList").hide();
                    $("#journal_Content").show();
                }
            });

            return journalsObservableArray;
        }

        // ============
        // Journal List
        // ============
        function stockInJournal_OnClick() {
            $('#journalDetail').modal({
                show: true,
                backdrop: 'static'
            });

            $("#loadingJournalGridList").show();
            document.getElementById("loadingJournalGridList").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#journal_Content").hide();

            setTimeout(function () {
                createJournalFlexGrid();
            }, 500)
        }

        function createJournalFlexGrid() {
            journalCollectionView = new wijmo.collections.CollectionView(getJournalListForRR());

            journalFlexGrid.dispose();
            journalFlexGrid = new wijmo.grid.FlexGrid('#journalFlexGrid');
            journalFlexGrid.initialize({
                columns: [
                    {
                        "header": "Branch",
                        "binding": "Branch",
                        "allowSorting": true,
                        "width": "2.5*"
                    },
                    {
                        "header": "Date",
                        "binding": "JournalDate",
                        "allowSorting": true,
                        "width": "1.5*"
                    },
                    {
                        "header": "Code",
                        "binding": "AccountCode",
                        "allowSorting": true,
                        "width": "1.8*"
                    },
                    {
                        "header": "Account",
                        "binding": "Account",
                        "allowSorting": true,
                        "width": "3*"
                    },
                    {
                        "header": "Article",
                        "binding": "Article",
                        "allowSorting": true,
                        "width": "3*"
                    },
                    {
                        "header": "Debit",
                        "binding": "DebitAmount",
                        "allowSorting": true,
                        "width": "2*",
                    },
                    {
                        "header": "Credit",
                        "binding": "CreditAmount",
                        "allowSorting": true,
                        "width": "2*"
                    }
                ],
                autoGenerateColumns: false,
                itemsSource: journalCollectionView,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            journalFlexGrid.trackChanges = true;
        }

        // get Items for Item Query
        function getArticleItemForItemQuery() {
            var items = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listArticleByArticleTypeIdByInventory/1',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (articleItemsResult) {
                    if (articleItemsResult.length > 0) {
                        for (i = 0; i < articleItemsResult.length; i++) {
                            items.push({
                                Id: articleItemsResult[i]["Id"],
                                ArticleCode: articleItemsResult[i]["ArticleCode"],
                                ManualArticleCode: articleItemsResult[i]["ManualArticleCode"],
                                Article: articleItemsResult[i]["Article"],
                                Category: articleItemsResult[i]["Category"],
                                ArticleTypeId: articleItemsResult[i]["ArticleTypeId"],
                                ArticleType: articleItemsResult[i]["ArticleType"],
                                ArticleGroupId: articleItemsResult[i]["ArticleGroupId"],
                                ArticleGroup: articleItemsResult[i]["ArticleGroup"],
                                AccountId: articleItemsResult[i]["AccountId"],
                                AccountCode: articleItemsResult[i]["AccountCode"],
                                Account: articleItemsResult[i]["Account"],
                                SalesAccountId: articleItemsResult[i]["SalesAccountId"],
                                SalesAccount: articleItemsResult[i]["SalesAccount"],
                                CostAccountId: articleItemsResult[i]["CostAccountId"],
                                CostAccount: articleItemsResult[i]["CostAccount"],
                                AssetAccountId: articleItemsResult[i]["AssetAccountId"],
                                AssetAccount: articleItemsResult[i]["AssetAccount"],
                                ExpenseAccountId: articleItemsResult[i]["ExpenseAccountId"],
                                ExpenseAccount: articleItemsResult[i]["ExpenseAccount"],
                                UnitId: articleItemsResult[i]["UnitId"],
                                Unit: articleItemsResult[i]["Unit"],
                                InputTaxId: articleItemsResult[i]["InputTaxId"],
                                InputTax: articleItemsResult[i]["InputTax"],
                                OutputTaxId: articleItemsResult[i]["OutputTaxId"],
                                OutputTax: articleItemsResult[i]["OutputTax"],
                                WTaxTypeId: articleItemsResult[i]["WTaxTypeId"],
                                WTaxType: articleItemsResult[i]["WTaxType"],
                                Price: articleItemsResult[i]["Price"],
                                Cost: articleItemsResult[i]["Cost"],
                                IsInventory: articleItemsResult[i]["IsInventory"],
                                Particulars: articleItemsResult[i]["Particulars"],
                                Address: articleItemsResult[i]["Address"],
                                TermId: articleItemsResult[i]["TermId"],
                                Term: articleItemsResult[i]["Term"],
                                ContactNumber: articleItemsResult[i]["ContactNumber"],
                                ContactPerson: articleItemsResult[i]["ContactPerson"],
                                TaxNumber: articleItemsResult[i]["TaxNumber"],
                                CreditLimit: articleItemsResult[i]["CreditLimit"],
                                DateAcquired: articleItemsResult[i]["DateAcquired"],
                                UsefulLife: articleItemsResult[i]["UsefulLife"],
                                SalvageValue: articleItemsResult[i]["SalvageValue"],
                                ManualArticleOldCode: articleItemsResult[i]["ManualArticleOldCode"],
                                IsLocked: articleItemsResult[i]["IsLocked"],
                                CreatedById: articleItemsResult[i]["CreatedById"],
                                CreatedBy: articleItemsResult[i]["CreatedBy"],
                                CreatedDateTime: articleItemsResult[i]["CreatedDateTime"],
                                UpdatedById: articleItemsResult[i]["UpdatedById"],
                                UpdatedBy: articleItemsResult[i]["UpdatedBy"],
                                UpdatedDateTime: articleItemsResult[i]["UpdatedDateTime"],
                                Pick: "<button class='btn btn-primary btn-xs btn-block' onclick='pickToApplyOnClick()'><i class='fa fa-hand-o-right'></i> Pick</button>",
                            });
                        }
                    }

                    $("#itemQueryPanel").show();
                    $("#loadingItemQuery").hide();
                }
            });

            return items;
        }

        // item query
        function cmdINLineItemQueryButton_OnClick() {
            $('#INLinesItemQuery').modal({
                show: true,
                backdrop: 'static'
            });
            $("#loadingItemQuery").show();
            document.getElementById("loadingItemQuery").innerHTML = "<b><i class='fa fa-spinner fa-spin'></i></b>";
            $("#itemQueryPanel").hide();

            setTimeout(function() {
                createItemQueryFlexGrid();
            }, 500)
        }

        function createItemQueryFlexGrid() {
            itemQueryItemsCollection = new wijmo.collections.CollectionView(getArticleItemForItemQuery());
            itemQueryItemsCollection.canFilter = true;

            var filterText = '';
            $('#itemQueryFilter').keyup(function () {
                filterText = this.value.toLowerCase();
                itemQueryItemsCollection.refresh();
            });

            itemQueryItemsCollection.filter = function (item) {
                return !filterText || (item.ManualArticleCode.toLowerCase().indexOf(filterText) > -1)
                || (item.Article.toLowerCase().indexOf(filterText) > -1);
            }
            
            // Flex Grid for Purchase Order Line
            itemQueryGrid.dispose();
            itemQueryGrid = new wijmo.grid.FlexGrid('#itemQueryGrid');
            itemQueryGrid.initialize({
                columns: [
                            {
                                "header": "Code",
                                "binding": "ManualArticleCode",
                                "allowSorting": true,
                                "width": "3*"
                            },
                            {
                                "header": "Item",
                                "binding": "Article",
                                "allowSorting": true,
                                "width": "5*"
                            },
                            {
                                "header": "Price",
                                "binding": "Price",
                                "allowSorting": true,
                                "width": "2*"
                            },
                            {
                                "header": "Pick",
                                "binding": "Pick",
                                "width": "1*",
                                "align": "center",
                                "allowResizing": false,
                                "allowSorting": false,
                                "isContentHtml": true
                            },
                ],
                autoGenerateColumns: false,
                itemsSource: itemQueryItemsCollection,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            itemQueryGrid.trackChanges = true;
        }

        function pickToApplyOnClick() {
            $('#stockInItemsEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $('.requiredStockInItem').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            $("#loadingModalItem").show();
            document.getElementById("loadingModalItem").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#stockInItemsDetailForm").hide();

            document.getElementById('cmdSaveStockInItemButton').innerHTML = "<i class='fa fa-save'></i> Save";
            $("#cmdSaveStockInItemButton").prop("disabled", true);
            $("#cmdStockInItemDetailCloseButton").prop("disabled", false);

            itemQueryItemsCollection.editItem(itemQueryItemsCollection.currentItem);
            var item = itemQueryItemsCollection.currentEditItem;
            stockInItemId = 0;
            getArticleItemForManualCodeAndComponent(item.Id, item.UnitId);
            document.getElementById('stockInItem_Particulars').value = "NA";
            document.getElementById('stockInItem_Quantity').value = 1;
            document.getElementById('stockInItem_Cost').value = 0;
            document.getElementById('stockInItem_Amount').value = 0;
        }

        // ====
        // TABS
        // ====
        $('#itemTabId').click(function () {
            $('#Items').show();
            $('#InventoryEntries').hide();
            NProgress.start();
            refreshStockInItemsFlexGrid();
        });

        $('#inventoryEntryTabId').click(function () {
            $('#Items').hide();
            $('#InventoryEntries').show();
            NProgress.start();
            refreshInventoryFlexGrid();
        });

        // On load page
        $(document).ready(function () {
            getBranchesForComboBox();

            $(document).on('show.bs.modal', '.modal', function (event) {
                var zIndex = 1040 + (10 * $('.modal:visible').length);
                $(this).css('z-index', zIndex);
                setTimeout(function () {
                    $('.modal-backdrop').not('.modal-stack').css('z-index', zIndex - 1).addClass('modal-stack');
                }, 0);
            });

            $(document).on('hidden.bs.modal', '.modal', function () {
                $('.modal:visible').length && $(document.body).addClass('modal-open');
            });
        });
    </script>
    <script type="text/javascript">
        var cboUserBranches = new wijmo.input.ComboBox('#cboUserBranches');
        function getUserBranches() {
            $("#loadingUserBranches").show();
            document.getElementById("loadingUserBranches").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#userBranchContent").hide();

            $('#userBranchesModal').modal({ show: true, backdrop: 'static' });

            document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
            $("#updateUserBranch").prop("disabled", false);
            $("#closeUserBranch").prop("disabled", false);

            var userBranchesObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/userBranch/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (userBranchesResults) {
                    if (userBranchesResults.length > 0) {
                        for (i = 0; i < userBranchesResults.length; i++) {
                            userBranchesObservableArray.push({
                                BranchId: userBranchesResults[i]["BranchId"],
                                Branch: userBranchesResults[i]["Branch"]
                            });
                        }
                    }

                    var currentBranch = "@ViewData["BranchId"]";
                    cboUserBranches.dispose();
                    cboUserBranches = new wijmo.input.ComboBox('#cboUserBranches', {
                        isEditable: false,
                        placeholder: "Select Branches",
                        itemsSource: userBranchesObservableArray,
                        displayMemberPath: "Branch",
                        selectedValuePath: "BranchId",
                        selectedValue: currentBranch
                    });

                    setTimeout(function () {
                        $("#loadingUserBranches").hide();
                        $("#userBranchContent").show();
                    }, 500)
                }
            });
        }

        function updateUserBranchOnclick() {
            document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Updating";
            $("#updateUserBranch").prop("disabled", true);
            $("#closeUserBranch").prop("disabled", true);

            var userBranchObject = new Object();
            userBranchObject.BranchId = cboUserBranches.selectedValue;
            var userBranchData = JSON.stringify(userBranchObject);

            $.ajax({
                type: "PUT",
                url: '/api/userBranch/update',
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: userBranchData,
                statusCode: {
                    200: function () {
                        toastr.success("Update Successful");
                        window.setTimeout(function () {
                            location.reload()
                        }, 1000);
                    },
                    404: function () {
                        toastr.error("Not Found");
                        document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
                        $("#updateUserBranch").prop("disabled", false);
                        $("#closeUserBranch").prop("disabled", false);
                    },
                    500: function () {
                        toastr.error("Bad Request");
                        document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
                        $("#updateUserBranch").prop("disabled", false);
                        $("#closeUserBranch").prop("disabled", false);
                    }
                }
            });
        }
    </script>
    <script type="text/javascript">
        var slideLeft = new Menu({
            wrapper: '#o-wrapper',
            type: 'slide-left',
            menuOpenerClass: '.c-button',
            maskId: '#c-mask'
        });

        var slideLeftBtn = document.querySelector('#c-button--slide-left');

        slideLeftBtn.addEventListener('click', function (e) {
            e.preventDefault;
            slideLeft.open();
        });
    </script>

</body>
</html>