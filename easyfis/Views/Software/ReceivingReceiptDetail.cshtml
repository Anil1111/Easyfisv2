@{
    var userId = ViewData["UserId"];
}
<!DOCTYPE html>
<html>
<head>
    <!-- Meta -->
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">

    <!-- Title of the Page -->
    <link rel="shortcut icon" href="~/Images/icon/easyfislogomini.ico">
    <title>Receiving Receipt Detail</title>

    <!-- CSS StyleSheets-->
    @Styles.Render("~/Content/Software-css")
</head>
<body class="">
    <div id="o-wrapper" class="o-wrapper">
        <main class="o-content">
            @Html.Partial("_SoftwareHeader")
            <section class="content-header">
                <div class="container">
                    <h3>
                        Receiving Receipt Detail
                    </h3>
                    <p>
                        <i class="fa fa-building-o fa-fw"></i> &nbsp; @ViewData["Company"] <br />
                        <i class="fa fa-home fa-fw"></i> &nbsp; @ViewData["Branch"]
                    </p>
                </div>
            </section>
            <section class="container">
                <div class="panel panel-default">
                    <div class="panel-heading">
                        <div class="row">
                            <div class="col-md-12" align="right">
                                <button class="btn btn-primary " id="cmdRRJournal" onclick="RRJournal_OnClick()"><i class="fa fa-book"></i> Journal</button>
                                <button class="btn btn-primary " id="cmdSaveRRSave" onclick="RRSaveSaveButton_OnClick()"><i class="fa fa-lock"></i> Lock</button>
                                <button class="btn btn-primary " id="cmdRREdit" onclick="RREditButton_OnClick()"><i class="fa fa-unlock"></i> Unlock</button>
                                <button class="btn btn-primary " id="cmdRRPrint" onclick="RRPrintButton_OnClick()"><i class="fa fa-print"></i> Print</button>
                                <button id="cmdRRClose" onclick="window.location.href = '@Url.Action("ReceivingReceipt", "Software")'" class="btn btn-danger "><i class="fa fa-times"></i> Close</button>
                            </div>
                        </div>
                    </div>
                    <div class="panel-body">
                        <form class="form-horizontal" role="form">
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Branch:</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboRRbranch"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">RR Number</label>
                                        <div class="col-sm-8">
                                            <input type="text" class="form-control requiredRR" id="RRNumber" />
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">RR Date</label>
                                        <div class="col-sm-8">
                                            <div class="" id="cboRRDate"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Doc Reference</label>
                                        <div class="col-sm-8">
                                            <input type="text" class="form-control  requiredRR" id="RRDocReference" placeholder="Document Reference">
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Supplier</label>
                                        <div class="col-sm-8">
                                            <div class="input-group">
                                                <div class="comboBox-wide" id="cboRRSupplier"></div>
                                                <div class="input-group-btn">
                                                    <button type="button" class="btn btn-primary " id="cmdRRForPOSupplier" onclick="RRForPOSupplier_OnClick()">PO</button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Term</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboRRTerm"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Remarks</label>
                                        <div class="col-sm-8">
                                            <textarea rows="5" class="form-control textarea-custom requiredRR" id="RRRemarks" placeholder="Remarks"></textarea>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Manual RR Number</label>
                                        <div class="col-sm-8">
                                            <input type="text" class="form-control  requiredRR" id="RRManualRRNumber" placeholder="Manual RR Number">
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Received by</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboRRReceivedBy"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Prepared by</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboRRPreparedBy"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Checked by</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboRRCheckedBy"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Approved by</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboRRApprovedBy"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
                <ul class="nav nav-tabs" role="tablist" id="myTab">
                    <li role="presentation" class="active"><a data-toggle="tab" href="#Item" id="itemTabId">Items</a></li>
                    <li role="presentation"><a data-toggle="tab" href="#InventoryEntry" id="inventoryEntryTabId">Inventory Entries</a></li>
                </ul>
                <br />
                <div class="tab-content">
                    <div id="Item" class="tab-pane fade in active">
                        <div class="panel panel-default">
                            <div class="panel-heading">
                                <div class="row">
                                    <div class="col-lg-12" align="right">
                                        <button class="btn btn-primary " id="btnRRLineItem" onclick="btnAddItemRRLine_OnClick()"><i class="fa fa-plus"></i> Add</button>
                                    </div>
                                </div>
                            </div>
                            <div class="panel-body">
                                <div class="row" align="left">
                                    <div class="col-lg-12">
                                        <div id="ReceivingReceiptItemGrid" class="grid" align="left"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div id="InventoryEntry" class="tab-pane fade in active">
                        <div class="panel panel-default">
                            <div class="panel-body">
                                <div id="inventoryFlexGrid" class="grid"></div>
                            </div>
                        </div>
                    </div>
                </div>
            </section>
            @Html.Partial("_SoftwareFooter")
        </main>
    </div>
    <div id="c-mask" class="c-mask"></div>

    <div class="modal fade" id="POStatus" role="dialog">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title" id="POStatusModalLabel">Purchase Order Status</h4>
                </div>
                <div class="modal-body">
                    <center>
                        <span id="loadingPOStatus"></span>
                    </center>
                    <div id="loadingPOPanel">
                        <div class="panel panel-default">
                            <div class="panel-heading">
                                <table style="width: 100%" border="0">
                                    <tr>
                                        <td style="width: 60%">
                                            <div class="input-group ">
                                                <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                                <input type="text" class="form-control " id="inputFilterPOItem" placeholder="Search">
                                            </div>
                                        </td>
                                        <td style="width: 1%"></td>
                                        <td style="width: 39%">
                                            <div class="input-group ">
                                                <span class="input-group-addon"><b>PO Number</b></span>
                                                <div class="comboBox-wide" id="cboPONumberPOStatus"></div>
                                            </div>
                                        </td>
                                    </tr>
                                </table>
                            </div>
                        </div>
                        <div id="purchasrOrderStatusFlexGrid" style="max-height: 300px;"></div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary " id="cmdApplyPOStatusButton" onclick="cmdApplyAllPOStatusButton_OnClick()"><i class="fa fa-check"></i> Apply</button>
                    <button type="button" id="cmdPOStatusCloseButton" class="btn btn-danger " data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="journalDetail" role="dialog">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title" id="journalModalLabel"> Journal</h4>
                </div>
                <div class="modal-body">
                    <center>
                        <span id="loadingJournalGridList"></span>
                    </center>
                    <div id="journal_Content">
                        <div id="journalFlexGrid" class="grid"></div>
                        <div class="row">
                            <div class="col-md-6"></div>
                            <div class="col-md-6">
                                <table class="table table-bordered" border="0">
                                    <tr>
                                        <td align="right">
                                            <b>Total Debit: </b>
                                        </td>
                                        <td style="padding-left: 10px" align="right">
                                            <span id="totalDebitInJournal">NA</span>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td align="right">
                                            <b>Total Credit: </b>
                                        </td>
                                        <td style="padding-left: 10px" align="right">
                                            <span id="totalCreditInJournal">NA</span>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td align="right">
                                            <b>Variance: </b>
                                        </td>
                                        <td style="padding-left: 10px" align="right">
                                            <span id="variance">NA</span>
                                        </td>
                                    </tr>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button id="cmdJournalDetailCloseButton" class="btn btn-danger " data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="RRLinesEdit" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title" id="RRLinesNameModalLabel">Receiving Receipt Item</h4>
                </div>
                <div class="modal-body">
                    <center>
                        <span id="loadingModalItem"></span>
                    </center>
                    <div id="RRLinesDetailForm">
                        <ul class="nav nav-tabs" role="tablist" id="myTab">
                            <li role="presentation" class="active"><a data-toggle="tab" href="#RRItem" id="RRItemTabId">Items</a></li>
                            <li role="presentation"><a data-toggle="tab" href="#RRTax" id="RRTaxTabId">Tax</a></li>
                        </ul>
                        <br />
                        <div class="tab-content">
                            <div id="RRItem" class="tab-pane fade in active">
                                <input type="hidden" id="RRLine_Id" />
                                <dl class="dl-horizontal">
                                    <dt>Branch</dt>
                                    <dd><div class="comboBox-wide" id="cboRRItemBranch"></div></dd>
                                    <dt>Purchase Order No</dt>
                                    <dd><div class="comboBox-wide" id="cboRRItemPONumber"></div></dd>
                                    <dt>Item</dt>
                                    <dd>
                                        <table style="width: 100%" border="0">
                                            <tr>
                                                <td style="width: 30%">
                                                    <div class="" id="cboRRLineItemCode"></div>
                                                </td>
                                                <td style="width: 1%"></td>
                                                <td style="width: 69%">
                                                    <div class="" id="cboRRLineItemDescription"></div>
                                                </td>
                                            </tr>
                                        </table>
                                    </dd>
                                    <dt>Particulars</dt>
                                    <dd><textarea rows="5" class="form-control textarea-custom requiredRRLine" id="RRLine_Particulars" placeholder="Particulars"></textarea></dd>
                                    <dt>Quantity</dt>
                                    <dd><input class="form-control numberField   requiredRRLine" id="RRLine_Quantity" placeholder="0.00" /></dd>
                                    <dt>Unit</dt>
                                    <dd><div class="comboBox-wide" id="cboRRItemUnit"></div></dd>
                                    <dt>Cost</dt>
                                    <dd><input type="text" class="form-control numberField requiredRRLine" id="RRLine_Cost" placeholder="0.00" /></dd>
                                    <dt>Amount</dt>
                                    <dd><input type="text" class="form-control numberField requiredRRLine" id="RRLine_Amount" placeholder="0.00" disabled /></dd>
                                </dl>
                            </div>
                            <div id="RRTax" class="tab-pane fade">
                                <dl class="dl-horizontal">
                                    <dt>VAT</dt>
                                    <dd><div class="comboBox-wide" id="cboRRItemVAT"></div></dd>
                                    <dt>VAT Rate</dt>
                                    <dd><input type="text" class="form-control  numberField  requiredRRLine" id="RRLine_VATRate" placeholder="0.00" disabled /></dd>
                                    <dt>VAT Amount</dt>
                                    <dd><input type="text" class="form-control  numberField  requiredRRLine" id="RRLine_VATAmount" placeholder="0.00" disabled /></dd>
                                    <dt>WTAX</dt>
                                    <dd><div class="comboBox-wide" id="cboForWTAXTaxType"></div></dd>
                                    <dt>WTAX Rate</dt>
                                    <dd><input type="text" class="form-control  numberField  requiredRRLine" id="RRLine_WTAXRate" placeholder="0.00" disabled /></dd>
                                    <dt>WTAX Amount</dt>
                                    <dd><input type="text" class="form-control  numberField  requiredRRLine" id="RRLine_WTAXAmount" placeholder="0.00" disabled /></dd>
                                </dl>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary " id="cmdSaveRRLinesButton" onclick="cmdRRLinesSaveButton_OnClick()"><i class="fa fa-save"></i> Save</button>
                    <button id="cmdRRLinesDetailCloseButton" class="btn btn-danger " data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- RR PO Items Delete -->
    <div class="modal fade" id="deleteRRLinesConfirm" role="dialog">
        <div class="modal-dialog modal-sm">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Delete Item <i class="fa fa-trash"></i></h4>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete this?
                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger " id="cmdConfirmDeleteRRLines" onclick="cmdRRLinesConfirmDeleteButton_OnClick()"><i class="fa fa-trash"></i> Delete</button>
                    <button id="cmdConfirmDeleteCloseButtonRRLines" class="btn btn-primary " data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <!-- RR Status PO Apply all? -->
    <div class="modal fade" id="applyAllConfirmPOStatus" role="dialog">
        <div class="modal-dialog modal-sm">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Apply <i class="fa fa-check"></i></h4>
                </div>
                <div class="modal-body">
                    Are you sure that you want to apply?
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary " id="cmdConfirmApplyAllPOStatusPOItems" onclick="btnConfrimApplyAllPOItems_OnClick()"><i class="fa fa-check"></i> Apply</button>
                    <button id="cmdCloseButtonApplyAllPOStatusPOItems" class="btn btn-danger " data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <!-- RR Status PO Apply item? -->
    <div class="modal fade" id="applyConfirmPOStatus" role="dialog">
        <div class="modal-dialog modal-sm">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Apply PO <i class="fa fa-check-square-o"></i></h4>
                </div>
                <div class="modal-body">
                    Are you sure that you want to apply this Purchase Order Item?
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary " id="cmdConfirmApplyPOStatusPOItems" onclick="btnConfrimApplyPOItems_OnClick()"><i class="fa fa-check-square-o"></i> Apply</button>
                    <button id="cmdCloseButtonApplyPOStatusPOItems" class="btn btn-danger " data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>

    @Scripts.Render("~/Scripts/Software-js")
    <script type="text/javascript">
        // ================
        // Global Variables
        // ================
        var cboRRbranch = new wijmo.input.ComboBox('#cboRRbranch');
        var cboRRSupplier = new wijmo.input.ComboBox('#cboRRSupplier');
        var cboRRTerm = new wijmo.input.ComboBox('#cboRRTerm');
        var cboRRReceivedBy = new wijmo.input.ComboBox('#cboRRReceivedBy');
        var cboRRPreparedBy = new wijmo.input.ComboBox('#cboRRPreparedBy');
        var cboRRCheckedBy = new wijmo.input.ComboBox('#cboRRCheckedBy');
        var cboRRApprovedBy = new wijmo.input.ComboBox('#cboRRApprovedBy');
        var cboRRDate = new wijmo.input.InputDate('#cboRRDate');
        var receivingReceiptItemsCollection;
        var receivingReceiptItemGrid;
        var isLocked = false;
        var cboPONumberPOStatus = new wijmo.input.ComboBox('#cboPONumberPOStatus');
        var purchaseOrderStatusCollectionView;
        var purchasrOrderStatusFlexGrid = new wijmo.grid.FlexGrid('#purchasrOrderStatusFlexGrid');
        var cboRRItemBranch = new wijmo.input.ComboBox('#cboRRItemBranch');
        var cboRRItemPONumber = new wijmo.input.ComboBox('#cboRRItemPONumber');
        var cboRRLineItemCode = new wijmo.input.ComboBox('#cboRRLineItemCode');
        var cboRRLineItemDescription = new wijmo.input.ComboBox('#cboRRLineItemDescription');
        var cboRRItemUnit = new wijmo.input.ComboBox('#cboRRItemUnit');
        var cboRRItemVAT = new wijmo.input.ComboBox('#cboRRItemVAT');
        var cboForWTAXTaxType = new wijmo.input.ComboBox('#cboForWTAXTaxType');
        var receivingReceiptId = 0;
        var inventoryCollectionView;
        var inventoryFlexGrid;
        var journalCollectionView;
        var journalFlexGrid = new wijmo.grid.FlexGrid('#journalFlexGrid');

        // =======================
        // Get URL Parameter Value
        // =======================
        function getParam(name) {
            name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
            var regexS = "[\\?&]" + name + "=([^&#]*)";
            var regex = new RegExp(regexS);
            var results = regex.exec(window.location.href);
            if (results == null)
                return "";
            else
                return results[1];
        }

        // ========================
        // GET Branch for Combo Box
        // ========================
        function getBranchesForComboBox() {
            NProgress.start();
            var branchesObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listBranch',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (branchListResults) {
                    if (branchListResults.length > 0) {
                        for (i = 0; i < branchListResults.length; i++) {
                            branchesObservableArray.push({
                                Id: branchListResults[i]["Id"],
                                Branch: branchListResults[i]["Branch"]
                            });
                        }
                    }

                    cboRRbranch.dispose();
                    cboRRbranch = new wijmo.input.ComboBox('#cboRRbranch', {
                        disabled: true,
                        isEditable: false,
                        placeholder: "Select Branch",
                        itemsSource: branchesObservableArray,
                        displayMemberPath: "Branch",
                        selectedValuePath: "Id"
                    });

                    getSupplierForComboBox();
                }
            });
        }

        // ==========================
        // GET Supplier for Combo Box
        // ==========================
        function getSupplierForComboBox() {
            var suppliersObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listArticleByArticleTypeId/3',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (supplierListResults) {
                    if (supplierListResults.length > 0) {
                        for (i = 0; i < supplierListResults.length; i++) {
                            suppliersObservableArray.push({
                                Id: supplierListResults[i]["Id"],
                                Supplier: supplierListResults[i]["Article"]
                            });
                        }
                    }

                    cboRRSupplier.dispose();
                    cboRRSupplier = new wijmo.input.ComboBox('#cboRRSupplier', {
                        isEditable: false,
                        placeholder: "Select Supplier",
                        itemsSource: suppliersObservableArray,
                        displayMemberPath: "Supplier",
                        selectedValuePath: "Id"
                    });

                    getTermForComboBox();
                }
            });
        }

        // =======================
        // GET Terms for Combo Box
        // =======================
        function getTermForComboBox() {
            var termsObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listTerm',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (termListResults) {
                    if (termListResults.length > 0) {
                        for (i = 0; i < termListResults.length; i++) {
                            termsObservableArray.push({
                                Id: termListResults[i]["Id"],
                                Term: termListResults[i]["Term"]
                            });
                        }
                    }

                    cboRRTerm.dispose();
                    cboRRTerm = new wijmo.input.ComboBox('#cboRRTerm', {
                        isEditable: false,
                        placeholder: "Select Term",
                        itemsSource: termsObservableArray,
                        displayMemberPath: "Term",
                        selectedValuePath: "Id"
                    });

                    getUsersForComboBox();
                }
            });
        }

        // =======================
        // GET Users for Combo Box
        // =======================
        function getUsersForComboBox() {
            var usersObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listUser',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            usersObservableArray.push({
                                Id: results[i]["Id"],
                                FullName: results[i]["FullName"]
                            });
                        }
                    }

                    cboRRReceivedBy.dispose();
                    cboRRReceivedBy = new wijmo.input.ComboBox('#cboRRReceivedBy', {
                        isEditable: false,
                        placeholder: "Select User",
                        itemsSource: usersObservableArray,
                        displayMemberPath: "FullName",
                        selectedValuePath: "Id"
                    });

                    cboRRPreparedBy.dispose();
                    cboRRPreparedBy = new wijmo.input.ComboBox('#cboRRPreparedBy', {
                        disabled: true,
                        isEditable: false,
                        placeholder: "Select User",
                        itemsSource: usersObservableArray,
                        displayMemberPath: "FullName",
                        selectedValuePath: "Id"
                    });

                    cboRRCheckedBy.dispose();
                    cboRRCheckedBy = new wijmo.input.ComboBox('#cboRRCheckedBy', {
                        isEditable: false,
                        placeholder: "Select User",
                        itemsSource: usersObservableArray,
                        displayMemberPath: "FullName",
                        selectedValuePath: "Id"
                    });

                    cboRRApprovedBy.dispose();
                    cboRRApprovedBy = new wijmo.input.ComboBox('#cboRRApprovedBy', {
                        isEditable: false,
                        placeholder: "Select User",
                        itemsSource: usersObservableArray,
                        displayMemberPath: "FullName",
                        selectedValuePath: "Id"
                    });

                    getReecivingReceiptById();
                }
            });
        }

        // =================
        // GET RR List By Id
        // =================
        function getReecivingReceiptById() {
            if (document.location.search.length > 0) {
                var id = getParam('ReceivingReceiptId');
                $.ajax({
                    url: '/api/receivingReceipt/' + id,
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    data: {},
                    success: function (Results) {
                        if (Results != null) {
                            // fields
                            cboRRbranch.selectedValue = Results.BranchId;
                            document.getElementById('RRNumber').value = Results.RRNumber;
                            cboRRDate.dispose();
                            cboRRDate = new wijmo.input.InputDate('#cboRRDate', {
                                format: 'MM-dd-yyyy',
                                value: new Date(Results.RRDate),
                            });
                            document.getElementById('RRDocReference').value = Results.DocumentReference;
                            cboRRSupplier.selectedValue = Results.SupplierId;
                            cboRRTerm.selectedValue = Results.TermId;
                            document.getElementById('RRRemarks').value = Results.Remarks;
                            document.getElementById('RRManualRRNumber').value = Results.ManualRRNumber;
                            cboRRReceivedBy.selectedValue = Results.ReceivedById;
                            cboRRPreparedBy.selectedValue = Results.PreparedById;
                            cboRRCheckedBy.selectedValue = Results.CheckedById;
                            cboRRApprovedBy.selectedValue = Results.ApprovedById;

                            // user stamp
                            document.getElementById('createdBy').innerHTML = Results.CreatedBy;
                            document.getElementById('createdDate').innerHTML = Results.CreatedDateTime;
                            document.getElementById('updatedBy').innerHTML = Results.UpdatedBy;
                            document.getElementById('updatedDate').innerHTML = Results.UpdatedDateTime;

                            if (Results.IsLocked) {
                                document.getElementById('RRNumber').disabled = true;
                                cboRRDate.disabled = true;
                                document.getElementById('RRDocReference').disabled = true;
                                cboRRSupplier.disabled = true;
                                cboRRTerm.disabled = true;
                                document.getElementById('RRRemarks').disabled = true;
                                document.getElementById('RRManualRRNumber').disabled = true;
                                cboRRReceivedBy.disabled = true;
                                cboRRPreparedBy.disabled = true;
                                cboRRCheckedBy.disabled = true;
                                cboRRApprovedBy.disabled = true;
                                isLocked = true;

                                $("#cmdSaveRRSave").prop("disabled", true);
                                $("#cmdRRForPOSupplier").prop("disabled", true);
                                $("#btnRRLineItem").prop("disabled", true);

                                var canUnLock = "@ViewData["CanUnlock"]";
                                if (canUnLock == "False") {
                                    $("#cmdRREdit").prop("disabled", true);
                                }

                                var canPrint = "@ViewData["CanPrint"]";
                                if (canPrint == "False") {
                                    $("#cmdRRPrint").prop("disabled", true)
                                }
                            } else {
                                $("#cmdRRJournal").prop("disabled", true);
                                $("#cmdRREdit").prop("disabled", true);
                                $("#cmdRRPrint").prop("disabled", true);

                                var canLock = "@ViewData["CanLock"]";
                                if (canLock == "False") {
                                    $("#cmdSaveRRSave").prop("disabled", true);
                                }

                                var canAdd = "@ViewData["CanAdd"]";
                                if (canAdd == "False") {
                                    $("#cmdRRForPOSupplier").prop("disabled", true)
                                    $("#btnRRLineItem").prop("disabled", true)
                                }
                            }
                        }

                        createReceivingReceiptFlexGrid();
                    }
                });
            } else {
                alert("No Id Parameter Value");
                window.location = "/Software/ReceivingReceipt";
            }
        }

        // ===========
        // GET RR Item
        // ===========
        function getRecevingReceiptItem() {
            var itemsObservableArray = new wijmo.collections.ObservableArray;
            if (document.location.search.length > 0) {
                var id = getParam('ReceivingReceiptId');
                $.ajax({
                    url: '/api/listReceivingReceiptItemByRRId/' + id,
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    success: function (Results) {
                        if (Results.length > 0) {
                            var canEdit = "@ViewData["CanEdit"]";
                            var editDisabled = "";
                            if (canEdit == "False") {
                                editDisabled = "disabled";
                            }

                            var canDelete = "@ViewData["CanDelete"]";
                            var deleteDisabled = "";
                            if (canDelete == "False") {
                                deleteDisabled = "disabled";
                            }

                            var btnEditId = "<button class='btn btn-primary btn-xs btn-block' onclick='btnItemRRLinesEdit_OnClick()' " + editDisabled + "><i class='fa fa-edit'></i> Edit</button>";
                            var btnDeleteId = "<button class='btn btn-danger btn-xs btn-block' onclick='btnItemRRLinesDelete_OnClick()'" + deleteDisabled + "><i class='fa fa-trash'></i> Delete</button>";
                            if (isLocked) {
                                btnEditId = "<button class='btn btn-primary btn-xs btn-block' onclick='btnItemRRLinesEdit_OnClick()' disabled><i class='fa fa-edit'></i> Edit</button>";
                                btnDeleteId = "<button class='btn btn-danger btn-xs btn-block' onclick='btnItemRRLinesDelete_OnClick()' disabled><i class='fa fa-trash'></i> Delete</button>";
                            }

                            for (i = 0; i < Results.length; i++) {
                                itemsObservableArray.push({
                                    EditId: btnEditId,
                                    DeleteId: btnDeleteId,
                                    Id: Results[i]["Id"],
                                    RRId: Results[i]["RRId"],
                                    RR: Results[i]["RR"],
                                    POId: Results[i]["POId"],
                                    PO: Results[i]["PO"],
                                    ItemId: Results[i]["ItemId"],
                                    Item: Results[i]["Item"],
                                    ItemCode: Results[i]["ItemCode"],
                                    Particulars: Results[i]["Particulars"],
                                    UnitId: Results[i]["UnitId"],
                                    Unit: Results[i]["Unit"],
                                    Quantity: Results[i]["Quantity"],
                                    Cost: Results[i]["Cost"],
                                    Amount: Results[i]["Amount"],
                                    VATId: Results[i]["VATId"],
                                    VAT: Results[i]["VAT"],
                                    VATPercentage: Results[i]["VAT"] + "<hr style='margin-top: 3px; margin-bottom: 3px; border-color: #cccccc' />" + Results[i]["VATPercentage"],
                                    VATRate: Results[i]["VATPercentage"],
                                    VATAmount: Results[i]["VATAmount"],
                                    WTAXId: Results[i]["WTAXId"],
                                    WTAX: Results[i]["WTAX"],
                                    WTAXPercentage: Results[i]["WTAX"] + "<hr style='margin-top: 3px; margin-bottom: 3px; border-color: #cccccc' />" + Results[i]["WTAXPercentage"],
                                    WTAXRate: Results[i]["WTAXPercentage"],
                                    WTAXAmount: Results[i]["WTAXAmount"],
                                    BranchId: Results[i]["BranchId"],
                                    Branch: Results[i]["Branch"],
                                    BaseUnitId: Results[i]["BaseUnitId"],
                                    BaseUnit: Results[i]["BaseUnit"],
                                    BaseQuantity: Results[i]["BaseQuantity"],
                                    BaseCost: Results[i]["BaseCost"]
                                });
                            }
                        }

                        NProgress.done();
                    }
                });
            }

            return itemsObservableArray
        }

        // ====================
        // GET RR Item Flexgrid
        // ====================
        function createReceivingReceiptFlexGrid() {
            receivingReceiptItemsCollection = new wijmo.collections.CollectionView(getRecevingReceiptItem());

            // Flex Grid for Item
            receivingReceiptItemGrid = new wijmo.grid.FlexGrid('#ReceivingReceiptItemGrid');
            receivingReceiptItemGrid.initialize({
                columns: [
                    {
                        "header": "Edit",
                        "binding": "EditId",
                        "width": 70,
                        "align": "center",
                        "allowResizing": false,
                        "allowSorting": false,
                        "isContentHtml": true
                    },
                    {
                        "header": "Delete",
                        "binding": "DeleteId",
                        "width": 70,
                        "align": "center",
                        "allowResizing": false,
                        "allowSorting": false,
                        "isContentHtml": true
                    },
                    {
                        "header": "PO No.",
                        "binding": "PO",
                        "allowSorting": true,
                        "width": 90
                    },
                    {
                        "header": "Code",
                        "binding": "ItemCode",
                        "allowSorting": true,
                        "width": 120
                    },
                    {
                        "header": "Item",
                        "binding": "Item",
                        "allowSorting": true,
                        "width": 170
                    },
                    {
                        "header": "Particulars",
                        "binding": "Particulars",
                        "allowSorting": true,
                        "width": 150
                    },
                    {
                        "header": "Quantity",
                        "binding": "Quantity",
                        "allowSorting": true,
                        "width": 100
                    },
                    {
                        "header": "Unit",
                        "binding": "Unit",
                        "allowSorting": true,
                        "width": 100
                    },
                    {
                        "header": "Cost",
                        "binding": "Cost",
                        "allowSorting": true,
                        "width": 100
                    },
                    {
                        "header": "Amount",
                        "binding": "Amount",
                        "allowSorting": true,
                        "width": 100
                    },
                    {
                        "header": "Branch",
                        "binding": "Branch",
                        "allowSorting": true,
                        "width": 150
                    },
                    {
                        "header": "VAT Rate",
                        "binding": "VATPercentage",
                        "allowSorting": true,
                        "width": 100,
                        "align": "right",
                        "isContentHtml": true
                    },
                    {
                        "header": "VAT Amount",
                        "binding": "VATAmount",
                        "allowSorting": true,
                        "width": 100
                    },
                    {
                        "header": "WTAX Rate",
                        "binding": "WTAXPercentage",
                        "allowSorting": true,
                        "width": 100,
                        "align": "right",
                        "isContentHtml": true
                    },
                    {
                        "header": "WTAX Amount",
                        "binding": "WTAXAmount",
                        "allowSorting": true,
                        "width": 100
                    },
                    {
                        "header": "Unit",
                        "binding": "BaseUnit",
                        "allowSorting": true,
                        "width": 100
                    },
                    {
                        "header": "Quantity",
                        "binding": "BaseQuantity",
                        "allowSorting": true,
                        "width": 100
                    },
                    {
                        "header": "Cost",
                        "binding": "BaseCost",
                        "allowSorting": true,
                        "width": 100
                    },
                ],
                autoGenerateColumns: false,
                itemsSource: receivingReceiptItemsCollection,
                isReadOnly: true,
                frozenColumns: 2,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            receivingReceiptItemGrid.trackChanges = true;

            var hr = new wijmo.grid.Row();
            receivingReceiptItemGrid.allowMerging = wijmo.grid.AllowMerging.AllHeaders;
            receivingReceiptItemGrid.columnHeaders.rows.push(hr);
            receivingReceiptItemGrid.columnHeaders.rows[0].allowMerging = true;

            receivingReceiptItemGrid.columnHeaders.columns[0].allowMerging = true;
            receivingReceiptItemGrid.columnHeaders.setCellData(0, 0, 'Edit');

            receivingReceiptItemGrid.columnHeaders.columns[1].allowMerging = true;
            receivingReceiptItemGrid.columnHeaders.setCellData(0, 1, 'Delete');

            receivingReceiptItemGrid.columnHeaders.columns[2].allowMerging = true;
            receivingReceiptItemGrid.columnHeaders.setCellData(0, 2, 'PO No.');

            receivingReceiptItemGrid.columnHeaders.columns[3].allowMerging = true;
            receivingReceiptItemGrid.columnHeaders.setCellData(0, 3, 'Code');

            receivingReceiptItemGrid.columnHeaders.columns[4].allowMerging = true;
            receivingReceiptItemGrid.columnHeaders.setCellData(0, 4, 'Item');

            receivingReceiptItemGrid.columnHeaders.columns[5].allowMerging = true;
            receivingReceiptItemGrid.columnHeaders.setCellData(0, 5, 'Particulars');

            receivingReceiptItemGrid.columnHeaders.columns[6].allowMerging = true;
            receivingReceiptItemGrid.columnHeaders.setCellData(0, 6, 'Quantity');

            receivingReceiptItemGrid.columnHeaders.columns[7].allowMerging = true;
            receivingReceiptItemGrid.columnHeaders.setCellData(0, 7, 'Unit');

            receivingReceiptItemGrid.columnHeaders.columns[8].allowMerging = true;
            receivingReceiptItemGrid.columnHeaders.setCellData(0, 8, 'Cost');

            receivingReceiptItemGrid.columnHeaders.columns[9].allowMerging = true;
            receivingReceiptItemGrid.columnHeaders.setCellData(0, 9, 'Amount');

            receivingReceiptItemGrid.columnHeaders.columns[10].allowMerging = true;
            receivingReceiptItemGrid.columnHeaders.setCellData(0, 10, 'Branch');

            receivingReceiptItemGrid.columnHeaders.setCellData(0, 11, 'VAT');

            receivingReceiptItemGrid.columnHeaders.columns[12].allowMerging = true;
            receivingReceiptItemGrid.columnHeaders.setCellData(0, 12, 'VAT Amount');

            receivingReceiptItemGrid.columnHeaders.setCellData(0, 13, 'WTAX');

            receivingReceiptItemGrid.columnHeaders.columns[14].allowMerging = true;
            receivingReceiptItemGrid.columnHeaders.setCellData(0, 14, 'WTAX Amount');

            for (var columnBasicUnitConversion = 15; columnBasicUnitConversion <= 17; columnBasicUnitConversion++) {
                receivingReceiptItemGrid.columnHeaders.setCellData(0, columnBasicUnitConversion, 'Basic Unit Conversion');
            }

            receivingReceiptItemGrid.rows.defaultSize = 55;
        }

        // ==================
        // Save RR - IsLocked
        // ==================
        function RRSaveSaveButton_OnClick() {
            var id = getParam('ReceivingReceiptId');
            var receivingReceiptObject = new Object();
            receivingReceiptObject.BranchId = cboRRbranch.selectedValue;
            receivingReceiptObject.RRDate = cboRRDate.value;
            receivingReceiptObject.RRNumber = document.getElementById('RRNumber').value;
            receivingReceiptObject.SupplierId = cboRRSupplier.selectedValue;
            receivingReceiptObject.TermId = cboRRTerm.selectedValue;
            receivingReceiptObject.DocumentReference = document.getElementById('RRDocReference').value;
            receivingReceiptObject.ManualRRNumber = document.getElementById('RRManualRRNumber').value;
            receivingReceiptObject.Remarks = document.getElementById('RRRemarks').value;
            receivingReceiptObject.ReceivedById = cboRRReceivedBy.selectedValue;
            receivingReceiptObject.PreparedById = cboRRPreparedBy.selectedValue;
            receivingReceiptObject.CheckedById = cboRRCheckedBy.selectedValue;
            receivingReceiptObject.ApprovedById = cboRRApprovedBy.selectedValue;
            var receivingReceiptData = JSON.stringify(receivingReceiptObject);

            var isValid = true;
            $('.requiredRR').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                }
                else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            if (isValid) {
                document.getElementById('cmdSaveRRSave').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Locking";
                $("#cmdRRJournal").prop("disabled", true);
                $("#cmdSaveRRSave").prop("disabled", true);
                $("#cmdRREdit").prop("disabled", true);
                $("#cmdRRPrint").prop("disabled", true);
                $("#cmdRRClose").prop("disabled", true);

                $.ajax({
                    type: "PUT",
                    url: '/api/updateReceivingReceipt/' + id,
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    data: receivingReceiptData,
                    statusCode: {
                        200: function () {
                            toastr.success("Lock Successful");
                            window.setTimeout(function () {
                                location.reload()
                            }, 1000);
                        },
                        404: function () {
                            toastr.error("Not Found");
                            document.getElementById('cmdSaveRRSave').innerHTML = "<i class='fa fa-lock'></i> Lock";
                            $("#cmdSaveRRSave").prop("disabled", false);
                            $("#cmdRRClose").prop("disabled", false);
                        },
                        400: function () {
                            toastr.error("Bad Request");
                            document.getElementById('cmdSaveRRSave').innerHTML = "<i class='fa fa-lock'></i> Lock";
                            $("#cmdSaveRRSave").prop("disabled", false);
                            $("#cmdRRClose").prop("disabled", false);
                        }
                    }
                });
            } else {
                toastr.error("Invalid Entry");
            }
        }

        // ================
        // Edit RR - Unlock
        // ================
        function RREditButton_OnClick() {
            var id = getParam('ReceivingReceiptId');

            document.getElementById('cmdRREdit').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Unlocking";
            $("#cmdRRJournal").prop("disabled", true);
            $("#cmdSaveRRSave").prop("disabled", true);
            $("#cmdRREdit").prop("disabled", true);
            $("#cmdRRPrint").prop("disabled", true);
            $("#cmdRRClose").prop("disabled", true);

            $.ajax({
                type: "PUT",
                url: '/api/updateReceivingReceiptIsLocked/' + id,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Unlock Successful");
                        window.setTimeout(function () {
                            location.reload()
                        }, 1000);
                    },
                    404: function () {
                        toastr.error("Not Found");
                        document.getElementById('cmdRREdit').innerHTML = "<i class='fa fa-unlock'></i> Unlock";
                        $("#cmdRRJournal").prop("disabled", false);
                        $("#cmdRREdit").prop("disabled", false);
                        $("#cmdRRPrint").prop("disabled", false);
                        $("#cmdRRClose").prop("disabled", false);
                    },
                    400: function () {
                        toastr.error("Bad Request");
                        document.getElementById('cmdRREdit').innerHTML = "<i class='fa fa-unlock'></i> Unlock";
                        $("#cmdRRJournal").prop("disabled", false);
                        $("#cmdRREdit").prop("disabled", false);
                        $("#cmdRRPrint").prop("disabled", false);
                        $("#cmdRRClose").prop("disabled", false);
                    }
                }
            });
        }

        // ========
        // Print RR
        // ========
        function RRPrintButton_OnClick() {
            var id = getParam('ReceivingReceiptId');
            window.location = "/RepReceivingReceipt/ReceivingReceipt?RRId=" + id;
        }

        var returnBool = false;
        var emptyQuantity;

        var index;

        // =========
        // PO Status
        // =========
        function RRForPOSupplier_OnClick() {
            $('#POStatus').modal({
                show: true,
                backdrop: 'static'
            });

            $('#loadingPOStatus').show();
            document.getElementById("loadingPOStatus").innerHTML = "<b><i class='fa fa-spinner fa-spin'></i></b>";
            $('#loadingPOPanel').hide();
            $('#cmdApplyPOStatusButton').prop("disabled", true);

            setTimeout(function () {
                getPOInPOStatusForComboBox();
            }, 500);
        }

        // ==================================
        // GET PO for PO Status for Combo Box
        // ==================================
        function getPOInPOStatusForComboBox() {
            var purchaseOrdertatusObservableArray = new wijmo.collections.ObservableArray();
            var supplierId = cboRRSupplier.selectedValue;
            $.ajax({
                url: '/api/listPurchaseOrderBySupplierId/' + supplierId,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (purchaseOrderStatusListResults) {
                    if (purchaseOrderStatusListResults.length > 0) {
                        for (i = 0; i < purchaseOrderStatusListResults.length; i++) {
                            purchaseOrdertatusObservableArray.push({
                                Id: purchaseOrderStatusListResults[i]["Id"],
                                PONumber: purchaseOrderStatusListResults[i]["PONumber"],
                                PODate: purchaseOrderStatusListResults[i]["PODate"],
                                PODetails: purchaseOrderStatusListResults[i]["PONumber"] + " (" + (purchaseOrderStatusListResults[i]["PODate"]).replace(/\//g, '-') + ")"
                            });
                        }
                    }

                    cboPONumberPOStatus.dispose();
                    cboPONumberPOStatus = new wijmo.input.ComboBox('#cboPONumberPOStatus', {
                        isEditable: false,
                        placeholder: "Select PO Number",
                        itemsSource: purchaseOrdertatusObservableArray,
                        displayMemberPath: "PODetails",
                        selectedValuePath: "Id",
                        onSelectedIndexChanged: function () {
                            getPOBySupplierInPOStatus();
                        }
                    });

                    setTimeout(function () { getPOBySupplierInPOStatus(); }, 1000);

                }
            });
        }

        // ========================================
        // Purchase Order Line / Item for PO Status
        // ========================================
        function getPurchaseOrderItemForPOSTatus() {
            var purchaseOrderStatusObservableArray = new wijmo.collections.ObservableArray;
            var POId = cboPONumberPOStatus.selectedValue;
            $.ajax({
                url: '/api/listPurchaseOrderItemForPOStatusByPOId/' + POId,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (Results) {
                    $('#cmdApplyPOStatusButton').prop("disabled", false);
                    if (Results.length > 0) {
                        for (i = 0; i < Results.length; i++) {
                            purchaseOrderStatusObservableArray.push({
                                Id: Results[i]["Id"],
                                ItemId: Results[i]["ItemId"],
                                Item: Results[i]["Item"],
                                ItemCode: Results[i]["ItemCode"],
                                POId: Results[i]["POId"],
                                Received: Results[i]["Received"],
                                Balance: Results[i]["BaseQuantity"] - Results[i]["Received"],
                                QuantityBalanceValue: Results[i]["BaseQuantity"] - Results[i]["Received"],
                                Amount: Results[i]["Amount"],
                                Pick: (Results[i]["BaseQuantity"] - Results[i]["Received"]) == 0 ? "<button class='btn btn-primary btn-xs' onclick='pickQuantity_OnClick()'><i class='fa fa-hand-o-right'></i></button>" : "<button class='btn btn-warning btn-xs' onclick='pickReverseQuantity_OnClick()'><i class='fa fa-hand-o-left'></i></button>",
                                BaseUnitId: Results[i]["BaseUnitId"],
                                BaseQuantity: Results[i]["BaseQuantity"],
                                BaseCost: Results[i]["BaseCost"],
                                BaseUnit: Results[i]["BaseUnit"],
                            });
                        }
                    } else {
                        $('#cmdApplyPOStatusButton').prop("disabled", true);
                    }

                    $('#loadingPOStatus').hide();
                    $('#loadingPOPanel').show();
                }
            });

            return purchaseOrderStatusObservableArray;
        }

        // ===============
        // PO In PO Status
        // ===============
        function getPOBySupplierInPOStatus() {
            purchaseOrderStatusCollectionView = new wijmo.collections.CollectionView(getPurchaseOrderItemForPOSTatus());
            purchaseOrderStatusCollectionView.canFilter = true;

            var filterText = '';
            $('#inputFilterPOItem').keyup(function () {
                filterText = this.value.toLowerCase();
                purchaseOrderStatusCollectionView.refresh();
            });

            purchaseOrderStatusCollectionView.filter = function (item) {
                return !filterText || (item.ItemCode.toLowerCase().indexOf(filterText) > -1)
                || (item.Item.toLowerCase().indexOf(filterText) > -1);
            }

            // Flex Grid for Item
            purchasrOrderStatusFlexGrid.dispose();
            purchasrOrderStatusFlexGrid = new wijmo.grid.FlexGrid('#purchasrOrderStatusFlexGrid');
            purchasrOrderStatusFlexGrid.initialize({
                columns: [
                            {
                                "header": "Code",
                                "binding": "ItemCode",
                                "allowSorting": true,
                                "width": "1.5*",
                                "isReadOnly": true,
                            },
                            {
                                "header": "Item",
                                "binding": "Item",
                                "allowSorting": true,
                                "isReadOnly": true,
                                "width": "2*"
                            },
                            {
                                "header": "Unit",
                                "binding": "BaseUnit",
                                "allowSorting": true,
                                "isReadOnly": true,
                                "width": "0.7*"
                            },
                            {
                                "header": "Purchased",
                                "binding": "BaseQuantity",
                                "allowSorting": true,
                                "isReadOnly": true,
                                "width": "1*"
                            },
                            {
                                "header": "Received",
                                "binding": "Received",
                                "allowSorting": true,
                                "isReadOnly": true,
                                "width": "1*",
                            },
                            {
                                "header": "Balance",
                                "binding": "Balance",
                                "allowSorting": true,
                                "isReadOnly": true,
                                "width": "1*"
                            },
                            {
                                "header": "Pick",
                                "binding": "Pick",
                                "width": "0.5*",
                                "align": "center",
                                "isReadOnly": true,
                                "isContentHtml": true
                            },
                            {
                                "header": "Quantity",
                                "binding": "QuantityBalanceValue",
                                "allowSorting": true,
                                "width": "1*",
                                "align": "right",
                                "isReadOnly": false,
                                "isContentHtml": true
                            },
                ],
                autoGenerateColumns: false,
                itemsSource: purchaseOrderStatusCollectionView,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row,
            });

            purchasrOrderStatusFlexGrid.trackChanges = true;

            // Merge column Headers
            var hr = new wijmo.grid.Row();
            purchasrOrderStatusFlexGrid.allowMerging = wijmo.grid.AllowMerging.AllHeaders;
            purchasrOrderStatusFlexGrid.columnHeaders.rows.push(hr);
            purchasrOrderStatusFlexGrid.columnHeaders.rows[0].allowMerging = true;

            purchasrOrderStatusFlexGrid.columnHeaders.columns[0].allowMerging = true;
            purchasrOrderStatusFlexGrid.columnHeaders.setCellData(0, 0, 'Code');

            purchasrOrderStatusFlexGrid.columnHeaders.columns[1].allowMerging = true;
            purchasrOrderStatusFlexGrid.columnHeaders.setCellData(0, 1, 'Item');

            purchasrOrderStatusFlexGrid.columnHeaders.columns[2].allowMerging = true;
            purchasrOrderStatusFlexGrid.columnHeaders.setCellData(0, 2, 'Unit');

            for (var columnQuantityTopAssigned = 3; columnQuantityTopAssigned <= 5; columnQuantityTopAssigned++) {
                purchasrOrderStatusFlexGrid.columnHeaders.setCellData(0, columnQuantityTopAssigned, 'Quantities');
            }

            purchasrOrderStatusFlexGrid.columnHeaders.columns[6].allowMerging = true;
            purchasrOrderStatusFlexGrid.columnHeaders.setCellData(0, 6, 'Pick');

            purchasrOrderStatusFlexGrid.columnHeaders.columns[7].allowMerging = true;
            purchasrOrderStatusFlexGrid.columnHeaders.setCellData(0, 7, 'Quantity');
        }

        // =============
        // PICK quantity
        // =============
        function pickQuantity_OnClick() {
            purchaseOrderStatusCollectionView.editItem(purchaseOrderStatusCollectionView.currentItem);
            var purchaseOrderStatusItem = purchaseOrderStatusCollectionView.currentEditItem;
            var balance = purchaseOrderStatusItem.BaseQuantity - purchaseOrderStatusItem.Received;
            if (balance > 0) {
                purchaseOrderStatusItem.QuantityBalanceValue = balance;
                purchaseOrderStatusItem.Pick = "<button class='btn btn-warning btn-xs' onclick='pickReverseQuantity_OnClick()'><i class='fa fa-hand-o-left'></i></button>";
                purchaseOrderStatusCollectionView.refresh();
                purchasrOrderStatusFlexGrid.refresh();
            }
        }

        // ===============
        // REPICK quantity
        // ===============
        function pickReverseQuantity_OnClick() {
            purchaseOrderStatusCollectionView.editItem(purchaseOrderStatusCollectionView.currentItem);
            var purchaseOrderStatusItem = purchaseOrderStatusCollectionView.currentEditItem;
            purchaseOrderStatusItem.QuantityBalanceValue = 0;
            purchaseOrderStatusItem.Pick = "<button class='btn btn-primary btn-xs' onclick='pickQuantity_OnClick()'><i class='fa fa-hand-o-right'></i></button>";
            purchaseOrderStatusCollectionView.refresh();
            purchasrOrderStatusFlexGrid.refresh();
        }

        // ==========================
        // Apply ALL PO Items Confirm
        // ==========================
        function cmdApplyAllPOStatusButton_OnClick() {
            $('#applyAllConfirmPOStatus').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById('cmdConfirmApplyAllPOStatusPOItems').innerHTML = "<i class='fa fa-check'></i> Apply";
            $("#cmdConfirmApplyAllPOStatusPOItems").prop("disabled", false);
            $("#cmdCloseButtonApplyAllPOStatusPOItems").prop("disabled", false);
        }

        // Confirm Apply ALL PO
        function btnConfrimApplyAllPOItems_OnClick() {
            document.getElementById('cmdConfirmApplyAllPOStatusPOItems').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Applying";
            $("#cmdConfirmApplyAllPOStatusPOItems").prop("disabled", true);
            $("#cmdCloseButtonApplyAllPOStatusPOItems").prop("disabled", true);

            var id = getParam('ReceivingReceiptId');
            var BranchId = cboRRbranch.selectedValue;
            var POId = cboPONumberPOStatus.selectedValue;

            for (var i = 0; i < purchaseOrderStatusCollectionView.items.length; i++) {
                var item = purchaseOrderStatusCollectionView.items[i];
                if(item.QuantityBalanceValue > 0) {
                    var POItemObject = new Object();
                    POItemObject.RRId = id;
                    POItemObject.POId = item.POId;
                    POItemObject.ItemId = item.ItemId;
                    POItemObject.Particulars = "NA";
                    POItemObject.BaseUnitId = item.BaseUnitId;
                    POItemObject.BaseQuantity = item.QuantityBalanceValue;
                    POItemObject.BaseCost = item.BaseCost;
                    POItemObject.BranchId = BranchId;
                    var POItemObjectData = JSON.stringify(POItemObject);

                    $.ajax({
                        url: '/api/applyPurchaseOrderItems',
                        type: "POST",
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: POItemObjectData,
                        statusCode: {
                            200: function () {
                                toastr.success("Apply Successful");
                                $("#cmdConfirmApplyAllPOStatusPOItems").prop("disabled", true);
                                $("#cmdCloseButtonApplyAllPOStatusPOItems").prop("disabled", true);

                                $('#applyAllConfirmPOStatus').modal('hide');
                                $('#POStatus').modal('hide');

                                receivingReceiptItemsCollection = new wijmo.collections.CollectionView(getRecevingReceiptItem());
                                receivingReceiptItemGrid.itemsSource = receivingReceiptItemsCollection;
                                receivingReceiptItemGrid.trackChanges = true;

                                purchaseOrderStatusCollectionView = new wijmo.collections.CollectionView(getPurchaseOrderItemForPOSTatus());
                                var filterText = '';
                                $('#inputFilterPOItem').keyup(function () {
                                    filterText = this.value.toLowerCase();
                                    purchaseOrderStatusCollectionView.refresh();
                                });

                                purchaseOrderStatusCollectionView.filter = function (item) {
                                    return !filterText || (item.ItemCode.toLowerCase().indexOf(filterText) > -1)
                                    || (item.Item.toLowerCase().indexOf(filterText) > -1);
                                }

                                purchasrOrderStatusFlexGrid.itemsSource = purchaseOrderStatusCollectionView;
                                purchasrOrderStatusFlexGrid.trackChanges = true;
                            },
                            404: function () {
                                toastr.error("Not Found");
                                $('#applyAllConfirmPOStatus').modal('hide');
                                $('#POStatus').modal('hide');
                                document.getElementById('cmdConfirmApplyAllPOStatusPOItems').innerHTML = "<i class='fa fa-check'></i> Apply";
                                $("#cmdConfirmApplyAllPOStatusPOItems").prop("disabled", false);
                                $("#cmdCloseButtonApplyAllPOStatusPOItems").prop("disabled", false);
                            },
                            400: function () {
                                toastr.error("Bad Request");
                                $('#applyAllConfirmPOStatus').modal('hide');
                                $('#POStatus').modal('hide');
                                document.getElementById('cmdConfirmApplyAllPOStatusPOItems').innerHTML = "<i class='fa fa-check'></i> Apply";
                                $("#cmdConfirmApplyAllPOStatusPOItems").prop("disabled", false);
                                $("#cmdCloseButtonApplyAllPOStatusPOItems").prop("disabled", false);
                            }
                        }
                    });
                } else {
                    document.getElementById('cmdConfirmApplyAllPOStatusPOItems').innerHTML = "<i class='fa fa-check'></i> Apply";
                    $("#cmdConfirmApplyAllPOStatusPOItems").prop("disabled", false);
                    $("#cmdCloseButtonApplyAllPOStatusPOItems").prop("disabled", false);
                    $('#applyAllConfirmPOStatus').modal('hide');
                }
            }
        }

        // ========================
        // GET Branch for Combo Box
        // ========================
        function getBranchesPOItemForComboBox(branchIdSelectedValue, POIdSelectedValue, ItemIdSelectedValue, VATIdSelectedValue, WTAXSelectedValue) {
            var branchesObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listBranch',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (branchListResults) {
                    if (branchListResults.length > 0) {
                        for (i = 0; i < branchListResults.length; i++) {
                            branchesObservableArray.push({
                                Id: branchListResults[i]["Id"],
                                Branch: branchListResults[i]["Branch"]
                            });
                        }
                    }

                    cboRRItemBranch.dispose();
                    cboRRItemBranch = new wijmo.input.ComboBox('#cboRRItemBranch', {
                        isEditable: false,
                        placeholder: "Select Branch",
                        itemsSource: branchesObservableArray,
                        displayMemberPath: "Branch",
                        selectedValuePath: "Id",
                        selectedValue: branchIdSelectedValue
                    });

                    getPOForComboBox(POIdSelectedValue, ItemIdSelectedValue, VATIdSelectedValue, WTAXSelectedValue);
                }
            });
        }

        // ===========================
        // GET PO for PO for Combo Box
        // ===========================
        function getPOForComboBox(POIdSelectedValue, ItemIdSelectedValue, VATIdSelectedValue, WTAXSelectedValue) {
            var purchaseOrderObservableArray = new wijmo.collections.ObservableArray();
            var supplierId = cboRRSupplier.selectedValue;
            $.ajax({
                url: '/api/listPurchaseOrderBySupplierId/' + supplierId,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (purchaseOrderListResults) {
                    if (purchaseOrderListResults.length > 0) {
                        for (i = 0; i < purchaseOrderListResults.length; i++) {
                            purchaseOrderObservableArray.push({
                                Id: purchaseOrderListResults[i]["Id"],
                                PONumber: purchaseOrderListResults[i]["PONumber"],
                                PODate: purchaseOrderListResults[i]["PODate"],
                                PODetails: purchaseOrderListResults[i]["PONumber"] + " (" + (purchaseOrderListResults[i]["PODate"]).replace(/\//g, '-') + ")"
                            });
                        }
                    }

                    cboRRItemPONumber.dispose();
                    cboRRItemPONumber = new wijmo.input.ComboBox('#cboRRItemPONumber', {
                        isEditable: false,
                        placeholder: "Select PO Number",
                        itemsSource: purchaseOrderObservableArray,
                        displayMemberPath: "PODetails",
                        selectedValuePath: "Id",
                        selectedValue: POIdSelectedValue,
                        onSelectedIndexChanged: function () {
                            getPOItemForComboBox(ItemIdSelectedValue, VATIdSelectedValue, WTAXSelectedValue);
                        }
                    });

                    getPOItemForComboBox(ItemIdSelectedValue, VATIdSelectedValue, WTAXSelectedValue);
                }
            });
        }

        // =================================
        // GET PO Items for PO for Combo Box
        // =================================
        function getPOItemForComboBox(ItemIdSelectedValue, VATIdSelectedValue, WTAXSelectedValue) {
            var purchaseOrderItemsObservableArray = new wijmo.collections.ObservableArray();
            var POId = cboRRItemPONumber.selectedValue;
            $.ajax({
                url: '/api/listPurchaseOrderItemByPOId/' + POId,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (purchaseOrderItemsResults) {
                    if (purchaseOrderItemsResults.length > 0) {
                        for (i = 0; i < purchaseOrderItemsResults.length; i++) {
                            purchaseOrderItemsObservableArray.push({
                                Id: purchaseOrderItemsResults[i]["Id"],
                                POId: purchaseOrderItemsResults[i]["POId"],
                                PO: purchaseOrderItemsResults[i]["PO"],
                                ItemId: purchaseOrderItemsResults[i]["ItemId"],
                                ItemCode: purchaseOrderItemsResults[i]["ItemCode"],
                                ItemDescription: purchaseOrderItemsResults[i]["Item"],
                                UnitId: purchaseOrderItemsResults[i]["UnitId"],
                                Unit: purchaseOrderItemsResults[i]["Unit"],
                                Quantity: purchaseOrderItemsResults[i]["Quantity"],
                                Particulars: purchaseOrderItemsResults[i]["Particulars"],
                                Cost: purchaseOrderItemsResults[i]["Cost"],
                                Amount: purchaseOrderItemsResults[i]["Amount"],
                                VATId: purchaseOrderItemsResults[i]["VATId"],
                                WTAXId: purchaseOrderItemsResults[i]["WTAXId"]
                            });
                        }
                    }

                    cboRRLineItemCode.dispose();
                    cboRRLineItemCode = new wijmo.input.ComboBox('#cboRRLineItemCode', {
                        isEditable: false,
                        placeholder: "Select Code",
                        itemsSource: purchaseOrderItemsObservableArray,
                        displayMemberPath: "ItemCode",
                        selectedValuePath: "ItemId",
                        selectedValue: ItemIdSelectedValue,
                        onSelectedIndexChanged: function () {
                            cboRRLineItemDescription.selectedValue = this.selectedValue;
                        }
                    });

                    cboRRLineItemDescription.dispose();
                    cboRRLineItemDescription = new wijmo.input.ComboBox('#cboRRLineItemDescription', {
                        isEditable: false,
                        placeholder: "Select Code",
                        itemsSource: purchaseOrderItemsObservableArray,
                        displayMemberPath: "ItemDescription",
                        selectedValuePath: "ItemId",
                        selectedValue: ItemIdSelectedValue,
                        onSelectedIndexChanged: function () {
                            cboRRLineItemCode.selectedValue = this.selectedValue;

                            document.getElementById('RRLine_Quantity').value = (this.selectedItem["Quantity"]).toLocaleString();
                            document.getElementById('RRLine_Cost').value = (this.selectedItem["Cost"]).toLocaleString();
                            computeAmountAndTaxes();
                        }
                    });

                    if (receivingReceiptId == 0) {
                        document.getElementById('RRLine_Quantity').value = (cboRRLineItemDescription.selectedItem["Quantity"]).toLocaleString();
                        document.getElementById('RRLine_Cost').value = (cboRRLineItemDescription.selectedItem["Cost"]).toLocaleString();
                        computeAmountAndTaxes();
                    }

                    getUnitForComboBox(VATIdSelectedValue, WTAXSelectedValue);
                }
            });
        }

        // =============
        // Get Item Unit
        // =============
        function getUnitForComboBox(VATIdSelectedValue, WTAXSelectedValue) {
            var unitsObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listArticleUnitByArticleId/' + cboRRLineItemDescription.selectedValue,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (unitListResults) {
                    if (unitListResults.length > 0) {
                        for (i = 0; i < unitListResults.length; i++) {
                            unitsObservableArray.push({
                                UnitId: unitListResults[i]["UnitId"],
                                Unit: unitListResults[i]["Unit"]
                            });
                        }
                    }

                    cboRRItemUnit.dispose();
                    cboRRItemUnit = new wijmo.input.ComboBox('#cboRRItemUnit', {
                        isEditable: false,
                        placeholder: "Select Code",
                        itemsSource: unitsObservableArray,
                        displayMemberPath: "Unit",
                        selectedValuePath: "UnitId"
                    });

                    getTaxTypeForComboBox(VATIdSelectedValue, WTAXSelectedValue);
                }
            });
        }

        // ===================
        // Get Artile Tax Type
        // ===================
        function getTaxTypeForComboBox(VATIdSelectedValue, WTAXSelectedValue) {
            var taxTypesObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listTaxType',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (taxTypesResults) {
                    if (taxTypesResults.length > 0) {
                        for (i = 0; i < taxTypesResults.length; i++) {
                            taxTypesObservableArray.push({
                                Id: taxTypesResults[i]["Id"],
                                TaxType: taxTypesResults[i]["TaxType"],
                                TaxRate: taxTypesResults[i]["TaxRate"],
                                IsInclusive: taxTypesResults[i]["IsInclusive"],
                            });
                        }
                    }

                    var VATIdValue = VATIdSelectedValue;
                    var WTAXValue = WTAXSelectedValue;
                    if (receivingReceiptId == 0) {
                        VATIdValue = cboRRLineItemDescription.selectedItem["VATId"];
                        WTAXValue = cboRRLineItemDescription.selectedItem["WTAXId"];
                    }

                    cboRRItemVAT.dispose();
                    cboRRItemVAT = new wijmo.input.ComboBox('#cboRRItemVAT', {
                        isEditable: false,
                        placeholder: "Select Tax Type",
                        itemsSource: taxTypesObservableArray,
                        displayMemberPath: "TaxType",
                        selectedValuePath: "Id",
                        selectedValue: VATIdValue,
                        onSelectedIndexChanged: function () {
                            document.getElementById('RRLine_VATRate').value = this.selectedItem["TaxRate"];
                            computeTAX();
                        }
                    });

                    cboForWTAXTaxType.dispose();
                    cboForWTAXTaxType = new wijmo.input.ComboBox('#cboForWTAXTaxType', {
                        isEditable: false,
                        placeholder: "Select Tax Type",
                        itemsSource: taxTypesObservableArray,
                        displayMemberPath: "TaxType",
                        selectedValuePath: "Id",
                        selectedValue: WTAXValue,
                        onSelectedIndexChanged: function () {
                            document.getElementById('RRLine_WTAXRate').value = this.selectedItem["TaxRate"];
                            computeTAX();
                        }
                    });

                    document.getElementById('RRLine_VATRate').value = cboRRItemVAT.selectedItem["TaxRate"];
                    document.getElementById('RRLine_WTAXRate').value = cboForWTAXTaxType.selectedItem["TaxRate"];

                    computeTAX();

                    $("#loadingModalItem").hide();
                    $("#cmdSaveRRLinesButton").prop("disabled", false);
                    $("#RRLinesDetailForm").show();
                }
            });
        }

        // =================
        // ADD Item RR Lines
        // =================
        function btnAddItemRRLine_OnClick() {
            $('#RRLinesEdit').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById('cmdSaveRRLinesButton').innerHTML = "<i class='fa fa-save'></i> Save";
            $("#cmdSaveRRLinesButton").prop("disabled", true);
            $("#cmdRRLinesDetailCloseButton").prop("disabled", false);

            $("#loadingModalItem").show();
            document.getElementById("loadingModalItem").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#RRLinesDetailForm").hide();

            $('.requiredRRLine').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            getBranchesPOItemForComboBox(0,0,0,0,0);
            receivingReceiptId = 0;
            document.getElementById('RRLine_Particulars').value = "NA";
            document.getElementById('RRLine_Quantity').value = 0;
            document.getElementById('RRLine_Cost').value = 0;
            document.getElementById('RRLine_Amount').value = 0;
            document.getElementById('RRLine_VATRate').value = 0;
            document.getElementById('RRLine_VATAmount').value = 0;
            document.getElementById('RRLine_WTAXRate').value = 0;
            document.getElementById('RRLine_WTAXAmount').value = 0;
        }

        // ==================
        // EDIT Item RR Lines
        // ==================
        function btnItemRRLinesEdit_OnClick() {
            $('#RRLinesEdit').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById('cmdSaveRRLinesButton').innerHTML = "<i class='fa fa-save'></i> Save";
            $("#cmdSaveRRLinesButton").prop("disabled", true);
            $("#cmdRRLinesDetailCloseButton").prop("disabled", false);

            $("#loadingModalItem").show();
            document.getElementById("loadingModalItem").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#RRLinesDetailForm").hide();

            $('.requiredRRLine').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            receivingReceiptItemsCollection.editItem(receivingReceiptItemsCollection.currentItem);
            var item = receivingReceiptItemsCollection.currentEditItem;

            getBranchesPOItemForComboBox(item.BranchId, item.POId, item.ItemId, item.VATId, item.WTAXId);
            receivingReceiptId = item.Id;
            document.getElementById('RRLine_Particulars').value = "NA";
            document.getElementById('RRLine_Quantity').value = (item.Quantity).toLocaleString();
            document.getElementById('RRLine_Cost').value = (item.Cost).toLocaleString();
            document.getElementById('RRLine_Amount').value = (item.Amount).toLocaleString();
            document.getElementById('RRLine_VATRate').value = (item.VATRate).toLocaleString();
            document.getElementById('RRLine_VATAmount').value = (item.VATAmount).toLocaleString();
            document.getElementById('RRLine_WTAXRate').value = (item.WTAXRate).toLocaleString();
            document.getElementById('RRLine_WTAXAmount').value = (item.WTAXAmount).toLocaleString();
        }

        // =============
        // SAVE RR Lines
        // =============
        function cmdRRLinesSaveButton_OnClick() {
            var receivingReceiptItemObject = new Object();
            var id = getParam('ReceivingReceiptId');
            receivingReceiptItemObject.RRId = id;
            receivingReceiptItemObject.POId = cboRRItemPONumber.selectedValue;
            receivingReceiptItemObject.ItemId = cboRRLineItemDescription.selectedValue;
            receivingReceiptItemObject.Particulars = document.getElementById('RRLine_Particulars').value;
            receivingReceiptItemObject.UnitId = cboRRItemUnit.selectedValue;
            receivingReceiptItemObject.Quantity = document.getElementById('RRLine_Quantity').value;
            receivingReceiptItemObject.Cost = document.getElementById('RRLine_Cost').value;
            receivingReceiptItemObject.Amount = document.getElementById('RRLine_Amount').value;
            receivingReceiptItemObject.VATId = cboRRItemVAT.selectedValue;
            receivingReceiptItemObject.VATPercentage = document.getElementById('RRLine_VATRate').value;
            receivingReceiptItemObject.VATAmount = document.getElementById('RRLine_VATAmount').value;
            receivingReceiptItemObject.WTAXId = cboForWTAXTaxType.selectedValue;
            receivingReceiptItemObject.WTAXPercentage = document.getElementById('RRLine_WTAXRate').value;
            receivingReceiptItemObject.WTAXAmount = document.getElementById('RRLine_WTAXAmount').value;
            receivingReceiptItemObject.BranchId = cboRRItemBranch.selectedValue;
            var receivingReceiptItemData = JSON.stringify(receivingReceiptItemObject);

            var isValid = true;
            $('.requiredRRLine').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                }
                else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            if (isValid) {
                document.getElementById('cmdSaveRRLinesButton').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Saving";
                $("#cmdSaveRRLinesButton").prop("disabled", true);
                $("#cmdRRLinesDetailCloseButton").prop("disabled", true);

                if (receivingReceiptId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/addReceivingReceiptItem',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: receivingReceiptItemData,
                        success: function (id) {
                            if (id > 0) {
                                toastr.success("Save Successful");

                                $('#RRLinesEdit').modal('hide');

                                receivingReceiptItemsCollection = new wijmo.collections.CollectionView(getRecevingReceiptItem());
                                receivingReceiptItemGrid.itemsSource = receivingReceiptItemsCollection;
                                receivingReceiptItemGrid.trackChanges = true;
                            } else {
                                toastr.error("Internal Server Error");
                                document.getElementById('cmdSaveRRLinesButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#cmdSaveRRLinesButton").prop("disabled", false);
                                $("#cmdRRLinesDetailCloseButton").prop("disabled", false);
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/updateReceivingReceiptItem/' + receivingReceiptId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: receivingReceiptItemData,
                        statusCode: {
                            200: function () {
                                toastr.success("Update Successful");
                                $("#cmdSaveRRLinesButton").prop("disabled", true);
                                $("#cmdRRLinesDetailCloseButton").prop("disabled", true);

                                $('#RRLinesEdit').modal('hide');

                                receivingReceiptItemsCollection = new wijmo.collections.CollectionView(getRecevingReceiptItem());
                                receivingReceiptItemGrid.itemsSource = receivingReceiptItemsCollection;
                                receivingReceiptItemGrid.trackChanges = true;
                            },
                            404: function () {
                                toastr.error("Not Found");
                                document.getElementById('cmdSaveRRLinesButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#cmdSaveRRLinesButton").prop("disabled", false);
                                $("#cmdRRLinesDetailCloseButton").prop("disabled", false);
                            },
                            400: function () {
                                toastr.error("Bad Request");
                                document.getElementById('cmdSaveRRLinesButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#cmdSaveRRLinesButton").prop("disabled", false);
                                $("#cmdRRLinesDetailCloseButton").prop("disabled", false);
                            }
                        }
                    });
                }
            } else {
                toastr.error("Invalid Entry");
            }
        }

        // ========================
        //  RR Lines Confirm Delete
        // ========================
        function btnItemRRLinesDelete_OnClick() {
            $('#deleteRRLinesConfirm').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById('cmdConfirmDeleteRRLines').innerHTML = "<i class='fa fa-tash'></i> Delete";
            $("#cmdConfirmDeleteRRLines").prop("disabled", false);
            $("#cmdConfirmDeleteCloseButtonRRLines").prop("disabled", false);
        }

        // RR lines Confirm Delete Button
        function cmdRRLinesConfirmDeleteButton_OnClick() {
            document.getElementById('cmdConfirmDeleteRRLines').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Deleting";
            $("#cmdConfirmDeleteRRLines").prop("disabled", true);
            $("#cmdConfirmDeleteCloseButtonRRLines").prop("disabled", true);

            receivingReceiptItemsCollection.editItem(receivingReceiptItemsCollection.currentItem);
            var item = receivingReceiptItemsCollection.currentEditItem;
            $.ajax({
                url: '/api/deleteReceivingReceiptItem/' + item.Id + '/' + item.RRId,
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Delete Successful");

                        $('#deleteRRLinesConfirm').modal('hide');

                        receivingReceiptItemsCollection = new wijmo.collections.CollectionView(getRecevingReceiptItem());
                        receivingReceiptItemGrid.itemsSource = receivingReceiptItemsCollection;
                        receivingReceiptItemGrid.trackChanges = true;
                    },
                    404: function () {
                        toastr.error("Not Found");
                        document.getElementById('cmdConfirmDeleteRRLines').innerHTML = "<i class='fa fa-tash'></i> Delete";
                        $("#cmdConfirmDeleteRRLines").prop("disabled", false);
                        $("#cmdConfirmDeleteCloseButtonRRLines").prop("disabled", false);
                    },
                    400: function () {
                        toastr.error("Bad Request");
                        document.getElementById('cmdConfirmDeleteRRLines').innerHTML = "<i class='fa fa-tash'></i> Delete";
                        $("#cmdConfirmDeleteRRLines").prop("disabled", false);
                        $("#cmdConfirmDeleteCloseButtonRRLines").prop("disabled", false);
                    }
                }
            });
        }

        $('#RRLine_Quantity').keyup(function () {
            computeAmountAndTaxes();
        });

        $('#RRLine_Cost').keyup(function () {
            computeAmountAndTaxes();
        });

        function computeAmountAndTaxes() {
            var inputQuantity = document.getElementById('RRLine_Quantity').value;
            var inputCost = document.getElementById('RRLine_Cost').value;
            var replacedCost = inputCost.replace(/\,/g, '');
            var replacedQuantity = inputQuantity.replace(/\,/g, '');

            var VATRate = document.getElementById('RRLine_VATRate').value;
            var WTAXRate = document.getElementById('RRLine_WTAXRate').value;

            var amount = replacedCost * replacedQuantity;
            document.getElementById('RRLine_Amount').value = amount.toLocaleString();

            document.getElementById('RRLine_VATAmount').value = (Math.round(((amount / (1 + VATRate / 100)) * (VATRate / 100)) * 100) / 100).toLocaleString();
            document.getElementById('RRLine_WTAXAmount').value = (Math.round(((amount / (1 + VATRate / 100)) * (WTAXRate / 100)) * 100) / 100).toLocaleString();
        }

        // ===========
        // Compute Tax
        // ===========
        function computeTAX() {
            var inputedQuantity = document.getElementById('RRLine_Quantity').value;
            var inputedCost = document.getElementById('RRLine_Cost').value;
            var inputedAmount = document.getElementById('RRLine_Amount').value;
            var inputedVATRate = document.getElementById('RRLine_VATRate').value;
            var inputedWTAXRate = document.getElementById('RRLine_WTAXRate').value;

            var replacedQuantity = inputedQuantity.replace(/\,/g, '');
            var replacedCost = inputedCost.replace(/\,/g, '');
            var replacedAmount = inputedAmount.replace(/\,/g, '');
            var replacedVATRate = inputedVATRate.replace(/\,/g, '');
            var replacedWTAXRate = inputedWTAXRate.replace(/\,/g, '');

            if (cboRRItemVAT.selectedItem["IsInclusive"]) {
                document.getElementById('RRLine_VATAmount').value = Math.round(((replacedAmount / (1 + replacedVATRate / 100)) * (replacedVATRate / 100)) * 100) / 100;
                document.getElementById('RRLine_WTAXAmount').value = Math.round(((replacedAmount / (1 + replacedVATRate / 100)) * (replacedWTAXRate / 100)) * 100) / 100;

            } else {
                document.getElementById('RRLine_VATAmount').value = Math.round((replacedAmount * (replacedVATRate / 100)) * 100) / 100;
                document.getElementById('RRLine_WTAXAmount').value = Math.round((replacedAmount * (replacedWTAXRate / 100)) * 100) / 100;
                document.getElementById('RRLine_Amount').value = Math.round(((replacedCost * replacedQuantity) + (replacedAmount * (replacedVATRate / 100))) * 100) / 100;
            }
        }

        // =====================
        // GET Inventory Entries
        // =====================
        function getInventoryEntries() {
            NProgress.start();
            var id = getParam('ReceivingReceiptId');
            var inventoryObservableArray = new wijmo.collections.ObservableArray;
            $.ajax({
                url: '/api/listInventoryByRRId/' + id,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (Results) {
                    NProgress.done();
                    if (Results.length > 0) {
                        for (i = 0; i < Results.length; i++) {
                            inventoryObservableArray.push({
                                Id: Results[i]["Id"],
                                BranchId: Results[i]["BranchId"],
                                Branch: Results[i]["Branch"],
                                InventoryDate: Results[i]["InventoryDate"],
                                ArticleId: Results[i]["ArticleId"],
                                Article: Results[i]["Article"],
                                ArticleInventoryId: Results[i]["ArticleInventoryId"],
                                RRId: Results[i]["RRId"],
                                SIId: Results[i]["SIId"],
                                INId: Results[i]["INId"],
                                OTId: Results[i]["OTId"],
                                STId: Results[i]["STId"],
                                QuantityIn: Results[i]["QuantityIn"],
                                Quantity: Results[i]["Quantity"],
                                QuantityOut: Results[i]["QuantityOut"],
                                Amount: Results[i]["Amount"],
                                Particulars: Results[i]["Particulars"],
                                Code: Results[i]["Code"],
                                Unit: Results[i]["Unit"]
                            });
                        }
                    }
                }
            });

            return inventoryObservableArray;
        }

        // ================================
        // On Page Load for Inventory Entry
        // ================================
        function inventoryEntryTab() {
            inventoryCollectionView = new wijmo.collections.CollectionView(getInventoryEntries());
            inventoryFlexGrid = new wijmo.grid.FlexGrid('#inventoryFlexGrid');
            inventoryFlexGrid.initialize({
                columns: [
                    {
                        "header": "Date",
                        "binding": "InventoryDate",
                        "allowSorting": true,
                        "width": 100,
                    },
                    {
                        "header": "Branch",
                        "binding": "Branch",
                        "allowSorting": true,
                        "width": 200,
                    },
                    {
                        "header": "Item",
                        "binding": "Article",
                        "align": "left",
                        "allowSorting": true,
                        "width": 250,
                    },
                    {
                        "header": "Particulars",
                        "binding": "Particulars",
                        "align": "left",
                        "allowSorting": true,
                        "width": 300,
                    },
                    {
                        "header": "Inventory Code",
                        "binding": "Code",
                        "allowSorting": true,
                        "width": 200,
                    },
                    {
                        "header": "Quantity",
                        "binding": "Quantity",
                        "allowSorting": true,
                        "width": 150,
                    },
                    {
                        "header": "Unit",
                        "binding": "Unit",
                        "allowSorting": true,
                        "width": 120,
                    },
                    {
                        "header": "Amount",
                        "binding": "Amount",
                        "allowSorting": true,
                        "width": 150,
                    },
                ],
                autoGenerateColumns: false,
                itemsSource: inventoryCollectionView,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            inventoryFlexGrid.trackChanges = true;
        }

        // ===========
        // Get Journal
        // ===========
        function getJournalListForRR() {
            var journalsObservableArray = new wijmo.collections.ObservableArray;
            var id = getParam('ReceivingReceiptId');
            $.ajax({
                url: '/api/listJournalByRRId/' + id,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (Results) {
                    if (Results.length > 0) {
                        for (i = 0; i < Results.length; i++) {
                            journalsObservableArray.push({
                                Id: Results[i]["Id"],
                                JournalDate: Results[i]["JournalDate"],
                                BranchId: Results[i]["BranchId"],
                                Branch: Results[i]["Branch"],
                                AccountId: Results[i]["AccountId"],
                                AccountCode: Results[i]["AccountCode"],
                                Account: Results[i]["Account"],
                                ArticleId: Results[i]["ArticleId"],
                                Article: Results[i]["Article"],
                                Particulars: Results[i]["Particulars"],
                                DebitAmount: Results[i]["DebitAmount"],
                                CreditAmount: Results[i]["CreditAmount"],
                                ORId: Results[i]["ORId"],
                                CVId: Results[i]["CVId"],
                                JVId: Results[i]["JVId"],
                                RRId: Results[i]["RRId"],
                                SIId: Results[i]["SIId"],
                                INId: Results[i]["INId"],
                                OTId: Results[i]["OTId"],
                                STId: Results[i]["STId"],
                                DocumentReference: Results[i]["DocumentReference"],
                                APRRId: Results[i]["APRRId"],
                                ARSIId: Results[i]["ARSIId"]
                            });

                            var debitAmountTotal = 0;
                            var creditAmountTotal = 0;

                            var a = 0;
                            while (a < Results.length) {
                                debitAmountTotal += Results[a]["DebitAmount"];
                                creditAmountTotal += Results[a]["CreditAmount"];
                                a++;
                            }
                        }

                        document.getElementById('totalDebitInJournal').innerHTML = debitAmountTotal.toLocaleString();
                        document.getElementById('totalCreditInJournal').innerHTML = creditAmountTotal.toLocaleString();
                        var variance = debitAmountTotal - creditAmountTotal;
                        document.getElementById('variance').innerHTML = variance.toLocaleString();
                    }
                    $("#loadingJournalGridList").hide();
                    $("#journal_Content").show();
                }
            });

            return journalsObservableArray;
        }

        // ============
        // Journal List
        // ============
        function RRJournal_OnClick() {
            $('#journalDetail').modal({
                show: true,
                backdrop: 'static'
            });

            $("#loadingJournalGridList").show();
            document.getElementById("loadingJournalGridList").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#journal_Content").hide();

            setTimeout(function () {
                createJournalFlexGrid();
            }, 500)
        }

        function createJournalFlexGrid() {
            journalCollectionView = new wijmo.collections.CollectionView(getJournalListForRR());

            journalFlexGrid.dispose();
            journalFlexGrid = new wijmo.grid.FlexGrid('#journalFlexGrid');
            journalFlexGrid.initialize({
                columns: [
                    {
                        "header": "Code",
                        "binding": "AccountCode",
                        "allowSorting": true,
                        "width": 100
                    },
                    {
                        "header": "Account",
                        "binding": "Account",
                        "allowSorting": true,
                        "width": 220
                    },
                    {
                        "header": "Article",
                        "binding": "Article",
                        "allowSorting": true,
                        "width": 212
                    },
                    {
                        "header": "Debit",
                        "binding": "DebitAmount",
                        "allowSorting": true,
                        "width": 150
                    },
                    {
                        "header": "Credit",
                        "binding": "CreditAmount",
                        "allowSorting": true,
                        "width": 150
                    },
                    {
                        "header": "Branch",
                        "binding": "Branch",
                        "allowSorting": true,
                        "width": 200
                    },
                    {
                        "header": "Date",
                        "binding": "JournalDate",
                        "allowSorting": true,
                        "width": 100,
                    }
                ],
                autoGenerateColumns: false,
                itemsSource: journalCollectionView,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            journalFlexGrid.trackChanges = true;
        }

        // ====
        // TABS
        // ====
        $('#itemTabId').click(function () {
            $('#Item').show();
            $('#InventoryEntry').hide();
            window.itemTab = function () {
                return true;
            };
        });
        $('#inventoryEntryTabId').click(function () {
            $('#Item').hide();
            $('#InventoryEntry').show();
            inventoryEntryTab();
            window.inventoryEntryTab = function () {
                return true;
            };
        });
        $(document).ready(function () {
            $('#Item').show();
            $('#InventoryEntry').hide();

            $(document).on('show.bs.modal', '.modal', function (event) {
                var zIndex = 1040 + (10 * $('.modal:visible').length);
                $(this).css('z-index', zIndex);
                setTimeout(function () {
                    $('.modal-backdrop').not('.modal-stack').css('z-index', zIndex - 1).addClass('modal-stack');
                }, 0);
            });

            $(document).on('hidden.bs.modal', '.modal', function () {
                $('.modal:visible').length && $(document.body).addClass('modal-open');
            });
        });

        // ===============
        // OnLoad Function
        // ===============
        $(document).ready(function () {
            getBranchesForComboBox();
        });
    </script>
    <script type="text/javascript">
        var slideLeft = new Menu({
            wrapper: '#o-wrapper',
            type: 'slide-left',
            menuOpenerClass: '.c-button',
            maskId: '#c-mask'
        });

        var slideLeftBtn = document.querySelector('#c-button--slide-left');

        slideLeftBtn.addEventListener('click', function (e) {
            e.preventDefault;
            slideLeft.open();
        });
    </script>
</body>
</html>