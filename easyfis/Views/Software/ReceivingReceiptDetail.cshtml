@model easyfis.Entities.MstUserForm
@{
    // =====================
    // User Rights Variables
    // =====================
    var canAdd = Model.CanAdd;
    var canEdit = Model.CanEdit;
    var canDelete = Model.CanDelete;
    var canLock = Model.CanLock;
    var canUnlock = Model.CanUnlock;
    var canCancel = Model.CanCancel;
    var canPrint = Model.CanPrint;
}
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">
    <link rel="shortcut icon" href="~/Images/icon/easyfislogomini.ico">
    <title>Receiving Receipt Detail</title>

    @Styles.Render("~/Content/Software-css")
</head>
<body class="">
    <div id="o-wrapper" class="o-wrapper">
        <main class="o-content">
            @Html.Partial("_SoftwareHeader")

            <section class="content-header">
                <div class="container">
                    <h3>
                        Receiving Receipt Detail
                    </h3>
                    <p>
                        <i class="fa fa-building-o fa-fw"></i> &nbsp; @ViewData["Company"] <br />
                        <i class="fa fa-home fa-fw"></i> &nbsp; <a href="#" onclick="getUserBranches()" style="color: white;">@ViewData["Branch"]</a>
                    </p>
                </div>
            </section>
            <section class="container">
                <div class="panel panel-default">

                    <!--
                        =============================================
                        Options: Lock, Unlock, Print and Close Button
                        =============================================
                    -->
                    <div class="panel-heading">
                        <div class="row">
                            <div class="col-md-2">
                                <button class="btn btn-primary" id="btnReceivingReceiptSave" onclick="btnReceivingReceiptSaveOnclick()"><i class="fa fa-save"></i> Save</button>
                            </div>
                            <div class="col-md-10" align="right">
                                <button class="btn btn-primary" id="btnReceivingReceiptJournal" onclick="btnReceivingReceiptJournalOnclick()"><i class="fa fa-book"></i> Journal</button>
                                @{
                                    if (canLock)
                                    {
                                        <button class="btn btn-primary" id="btnReceivingReceiptLock" onclick="btnReceivingReceiptLockOnclick()"><i class="fa fa-lock"></i> Lock</button>
                                    }
                                    if (canUnlock)
                                    {
                                        <button class="btn btn-primary" id="btnReceivingReceiptUnlock" onclick="btnReceivingReceiptUnlockOnclick()"><i class="fa fa-unlock"></i> Unlock</button>
                                    }
                                    if (canPrint)
                                    {
                                        <button class="btn btn-primary" id="btnReceivingReceiptPrint" onclick="btnReceivingReceiptPrintOnclick()"><i class="fa fa-print"></i> Print</button>
                                    }
                                    if (canCancel)
                                    {
                                        <button class="btn btn-warning" id="btnReceivingReceiptCancel" onclick="btnReceivingReceiptCancelOnclick()"><i class="fa fa-times-circle-o"></i> Cancel</button>
                                    }
                                }
                                <button class="btn btn-danger" id="btnReceivingReceiptClose" onclick="window.location.href = '/Software/ReceivingReceipt'"><i class="fa fa-times"></i> Close</button>
                            </div>
                        </div>
                    </div>

                    <!--
                        ======================================
                        Details, Fields and Other Informations
                        ======================================
                    -->
                    <div class="panel-body">
                        <form class="form-horizontal" role="form">
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Branch:</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboReceivingReceiptBranch"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">RR Number</label>
                                        <div class="col-sm-8">
                                            <input type="text" class="form-control requiredRR" id="inpReceivingReceiptRRNumber" disabled />
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">RR Date</label>
                                        <div class="col-sm-8">
                                            <div class="" id="cboReceivingReceiptRRDate"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Doc. Ref. No.</label>
                                        <div class="col-sm-8">
                                            <input type="text" class="form-control requiredRR" id="inpReceivingReceiptDocumentReference" placeholder="Document Reference">
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">RR Ref. No.</label>
                                        <div class="col-sm-8">
                                            <input type="text" class="form-control requiredRR" id="inpReceivingReceiptManualRRNumber" placeholder="Manual RR Number">
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Supplier</label>
                                        <div class="col-sm-8">
                                            <div class="input-group">
                                                <div class="comboBox-wide" id="cboReceivingReceiptSupplier"></div>
                                                <div class="input-group-btn">
                                                    <button type="button" class="btn btn-primary" id="btnReceivingReceiptPO" onclick="btnReceivingReceiptPOOnclick()">PO</button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Term</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboReceivingReceiptTerm"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Status</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboReceivingReceiptStatus"></div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Remarks</label>
                                        <div class="col-sm-8">
                                            <textarea rows="5" class="form-control textarea-custom requiredRR" id="inpReceivingReceiptRemarks" placeholder="Remarks"></textarea>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Received by</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboReceivingReceiptReceivedBy"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Prepared by</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboReceivingReceiptPreparedBy"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Checked by</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboReceivingReceiptCheckedBy"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Approved by</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboReceivingReceiptApprovedBy"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>

                <!--
                    ============================================
                    Receiving Receipt Item and Inventory Entries
                    ============================================
                -->
                <ul class="nav nav-tabs" role="tablist" id="myTab">
                    <li role="presentation" class="active"><a data-toggle="tab" href="#receivingReceiptItemTabHref" id="receivingReceiptItemTab">Items</a></li>
                    <li role="presentation"><a data-toggle="tab" href="#receivingReceiptInventoryEntriesTabHref" id="receivingReceiptInventoryEntriesTab">Inventory Entries</a></li>
                </ul>
                <br />
                <div class="tab-content">

                    <!--
                        ==========================
                        Receiving Receipt Item Tab
                        ==========================
                    -->
                    <div id="receivingReceiptItemTabHref" class="tab-pane active">
                        <div class="panel panel-default">

                            <!--
                                ===========================================================================
                                Receiving Receipt Item: Search, Filter, Display Number of Rows and  Buttons
                                ===========================================================================
                            -->
                            <div class="panel-heading">
                                <table style="width: 100%" border="0">
                                    <tr>
                                        <td style="width: 49.5%">
                                            <div class="input-group">
                                                <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                                <input type="text" class="form-control" id="inpReceivingReceiptItemSearchFilter" placeholder="Search...">
                                            </div>
                                        </td>
                                        <td style="width: 1%"></td>
                                        <td style="width: 24%">
                                            <div class="input-group">
                                                <span class="input-group-addon"><b><i class="fa fa-table"></i></b></span>
                                                <div class="comboBox-wide" id="cboReceivingReceiptItemShowNumberOfRows"></div>
                                            </div>
                                        </td>
                                        <td style="width: 1%"></td>
                                        <td style="width: 24.5%" align="right">
                                            @{
                                                if (canAdd)
                                                {
                                                    <button class="btn btn-primary" id="btnReceivingReceiptItemAdd" onclick="btnReceivingReceiptItemAddOnclick()"><i class="fa fa-plus"></i> Add</button>
                                                }
                                            }
                                        </td>
                                    </tr>
                                </table>
                            </div>

                            <!--
                                =================================
                                Receiving Receipt Item: Flex Grid
                                =================================
                            -->
                            <div class="panel-body">
                                <div id="receivingReceiptItemFlexGrid" class="grid"></div>
                            </div>

                            <!--
                                ==========================================
                                Receiving Receipt Item: Navigation Buttons
                                ==========================================
                            -->
                            <div class="panel-footer">
                                <div class="row">
                                    <div class="btn-group col-md-7" id="receivingReceiptItemNavigationPageGrid">
                                        <button type="button" class="btn btn-default border-custom" id="btnReceivingReceiptItemMoveToFirstPageGrid">
                                            <span class="glyphicon glyphicon-fast-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" id="btnReceivingReceiptItemMoveToPreviousPageGrid">
                                            <span class="glyphicon glyphicon-step-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnReceivingReceiptItemCurrentPageGrid"></button>
                                        <button type="button" class="btn btn-default border-custom" id="btnReceivingReceiptItemMoveToNextPageGrid">
                                            <span class="glyphicon glyphicon-step-forward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" id="btnReceivingReceiptItemMoveToLastPageGrid">
                                            <span class="glyphicon glyphicon-fast-forward"></span>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!--
                            ==============================
                            Receiving Receipt Item: Totals
                            ==============================
                        -->
                        <div class="panel panel-default">
                            <div class="panel-body" style="padding-bottom: 0px;">
                                <div class="row">
                                    <div class="col-md-6">

                                    </div>
                                    <div class="col-md-6">
                                        <dl class="dl-horizontal">
                                            <dt>
                                                <b>Total Amount</b>
                                            </dt>
                                            <dd>
                                                <input type="text" class="form-control numberField" id="totalReceivingReceiptAmount" placeholder="0.00" disabled />
                                            </dd>
                                            <dt>
                                                <b>Total VAT Amount</b>
                                            </dt>
                                            <dd>
                                                <input type="text" class="form-control numberField" id="totalReceivingReceiptVATAmount" placeholder="0.00" disabled />
                                            </dd>
                                            <dt>
                                                <b>Total WTAX Amount</b>
                                            </dt>
                                            <dd>
                                                <input type="text" class="form-control numberField" id="totalReceivingReceiptWTAXAmount" placeholder="0.00" disabled />
                                            </dd>
                                        </dl>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!--
                        =====================
                        Inventory Entries Tab
                        =====================
                    -->
                    <div id="receivingReceiptInventoryEntriesTabHref" class="tab-pane">
                        <div class="panel panel-default">

                            <!--
                                ======================================================================
                                Inventory Entries: Search, Filter, Display Number of Rows and  Buttons
                                ======================================================================
                            -->
                            <div class="panel-heading">
                                <table style="width: 100%" border="0">
                                    <tr>
                                        <td style="width: 49.5%">
                                            <div class="input-group">
                                                <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                                <input type="text" class="form-control" id="inpInventoryEntriesSearchFilter" placeholder="Search...">
                                            </div>
                                        </td>
                                        <td style="width: 1%"></td>
                                        <td style="width: 24%">
                                            <div class="input-group">
                                                <span class="input-group-addon"><b><i class="fa fa-table"></i></b></span>
                                                <div class="comboBox-wide" id="cboInventoryEntriesShowNumberOfRows"></div>
                                            </div>
                                        </td>
                                        <td style="width: 1%"></td>
                                        <td style="width: 24.5%" align="right"></td>
                                    </tr>
                                </table>
                            </div>

                            <!--
                                ============================
                                Inventory Entries: Flex Grid
                                ============================
                            -->
                            <div class="panel-body">
                                <div id="inventoryEntriesFlexGrid"></div>
                            </div>

                            <!--
                                =====================================
                                Inventory Entries: Navigation Buttons
                                =====================================
                            -->
                            <div class="panel-footer">
                                <div class="row">
                                    <div class="btn-group col-md-7" id="inventoryEntriesNavigationPageGrid">
                                        <button type="button" class="btn btn-default border-custom" id="btnInventoryEntriesMoveToFirstPageGrid">
                                            <span class="glyphicon glyphicon-fast-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" id="btnInventoryEntriesMoveToPreviousPageGrid">
                                            <span class="glyphicon glyphicon-step-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnInventoryEntriesCurrentPageGrid"></button>
                                        <button type="button" class="btn btn-default border-custom" id="btnInventoryEntriesMoveToNextPageGrid">
                                            <span class="glyphicon glyphicon-step-forward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" id="btnInventoryEntriesMoveToLastPageGrid">
                                            <span class="glyphicon glyphicon-fast-forward"></span>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!--
                    ==========
                    User Stamp
                    ==========
                -->
                <div class="panel panel-default">
                    <div class="panel-heading">
                        User stamp
                    </div>
                    <div class="panel-body">
                        <div class="row">
                            <div class="col-md-6">
                                <p>Created by:</p>
                                <div style="padding-left: 10px;">
                                    <i class="fa fa-key fa-fw"></i> <label id="createdBy">NA</label>
                                    <br />
                                    <small><i class="fa fa-calendar fa-fw"></i> &nbsp;<span id="createdDate">mm/dd/yyyy</span></small>
                                </div>
                                <br />
                            </div>
                            <div class="col-md-6">
                                <p>Updated by:</p>
                                <div style="padding-left: 10px;">
                                    <i class="fa fa-key fa-fw"></i> <label id="updatedBy">NA</label>
                                    <br />
                                    <small><i class="fa fa-calendar fa-fw"></i> &nbsp;<span id="updatedDate">mm/dd/yyyy</span></small>
                                </div>
                                <br />
                            </div>
                        </div>
                    </div>
                </div>
            </section>

            @Html.Partial("_SoftwareFooter")
        </main>
    </div>
    <div id="c-mask" class="c-mask"></div>

    <!--
        ====================================
        Receiving Receipt Item: Detail Modal
        ====================================
    -->
    <div class="modal fade" id="RRLinesEdit" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="receivingReceiptItemModalTitle">Receiving Receipt Item</h4>
                </div>
                <div class="modal-body">
                    <center>
                        <span id="receivingReceiptItemLoading"></span>
                    </center>
                    <div id="receivingReceiptItemContent">
                        <ul class="nav nav-tabs" role="tablist" id="myTab">
                            <li role="presentation" class="active"><a data-toggle="tab" href="#receivingReceiptItemModalItemTab">Items</a></li>
                            <li role="presentation"><a data-toggle="tab" href="#receivingReceiptItemModalTaxTab">Tax</a></li>
                        </ul>
                        <br />
                        <div class="tab-content">
                            <div id="receivingReceiptItemModalItemTab" class="tab-pane active">
                                <dl class="dl-horizontal">
                                    <dt>Branch</dt>
                                    <dd>
                                        <div class="comboBox-wide" id="cboReceivingReceiptItemBranch"></div>
                                    </dd>
                                    <dt>PO Number</dt>
                                    <dd>
                                        <div class="comboBox-wide" id="cboReceivingReceiptItemPONumber"></div>
                                    </dd>
                                    <dt>Item</dt>
                                    <dd>
                                        <table style="width: 100%" border="0">
                                            <tr>
                                                <td style="width: 30%">
                                                    <div class="" id="cboReceivingReceiptItemCode"></div>
                                                </td>
                                                <td style="width: 1%"></td>
                                                <td style="width: 69%">
                                                    <div class="" id="cboReceivingReceiptItemDescription"></div>
                                                </td>
                                            </tr>
                                        </table>
                                    </dd>
                                    <dt>Particulars</dt>
                                    <dd>
                                        <textarea rows="5" class="form-control textarea-custom requiredRRLine" id="inpReceivingReceiptItemParticulars" placeholder="Particulars"></textarea>
                                    </dd>
                                    <dt>Quantity</dt>
                                    <dd>
                                        <input class="form-control numberField requiredRRLine" id="inpReceivingReceiptItemQuantity" placeholder="0.00" />
                                    </dd>
                                    <dt>Unit</dt>
                                    <dd>
                                        <div class="comboBox-wide" id="cboReceivingReceiptItemUnit"></div>
                                    </dd>
                                    <dt>Cost</dt>
                                    <dd>
                                        <input type="text" class="form-control numberField requiredRRLine" id="inpReceivingReceiptItemCost" placeholder="0.00" />
                                    </dd>
                                    <dt>WTAX Amount</dt>
                                    <dd>
                                        <input type="text" class="form-control numberField requiredRRLine" id="inpReceivingReceiptItemWTAXAmount" placeholder="0.00" disabled />
                                    </dd>
                                    <dt>Amount</dt>
                                    <dd>
                                        <input type="text" class="form-control numberField requiredRRLine" id="inpReceivingReceiptItemAmount" placeholder="0.00" disabled />
                                    </dd>
                                </dl>
                            </div>
                            <div id="receivingReceiptItemModalTaxTab" class="tab-pane">
                                <dl class="dl-horizontal">
                                    <dt>VAT</dt>
                                    <dd>
                                        <div class="comboBox-wide" id="cboReceivingReceiptItemVAT"></div>
                                    </dd>
                                    <dt>VAT Rate</dt>
                                    <dd>
                                        <input type="text" class="form-control numberField requiredRRLine" id="inpReceivingReceiptItemVATRate" placeholder="0.00" disabled />
                                    </dd>
                                    <dt>VAT Amount</dt>
                                    <dd>
                                        <input type="text" class="form-control numberField requiredRRLine" id="inpReceivingReceiptItemVATAmount" placeholder="0.00" disabled />
                                    </dd>
                                    <dt>WTAX</dt>
                                    <dd>
                                        <div class="comboBox-wide" id="cboReceivingReceiptItemWTAX"></div>
                                    </dd>
                                    <dt>WTAX Rate</dt>
                                    <dd>
                                        <input type="text" class="form-control numberField requiredRRLine" id="inpReceivingReceiptItemWTAXRate" placeholder="0.00" disabled />
                                    </dd>
                                </dl>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button id="btnReceivingReceiptItemSave" class="btn btn-primary" onclick="btnReceivingReceiptItemSaveOnclick()"><i class="fa fa-save"></i> Save</button>
                    <button id="btnReceivingReceiptItemCloseModal" class="btn btn-danger" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!--
        ============================================
        Receiving Receipt Item: Delete Confirm Modal
        ============================================
    -->
    <div class="modal fade" id="receivingReceiptItemDeleteConfirmModal" role="dialog">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Delete</h4>
                </div>
                <div class="modal-body">
                    Delete Receiving Receipt Item?
                </div>
                <div class="modal-footer">
                    <button id="btnReceivingReceiptItemDeleteConfirm" class="btn btn-danger" onclick="btnReceivingReceiptItemDeleteConfirmOnclick()"><i class="fa fa-trash"></i> Delete</button>
                    <button id="btnReceivingReceiptItemDeleteConfirmCloseModal" class="btn btn-primary" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <!--
        =====================
        Journal Entries Modal
        =====================
    -->
    <div class="modal fade" id="journalEntryModal" role="dialog">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title"> Journal </h4>
                </div>
                <div class="modal-body">
                    <center>
                        <span id="journalLoading"></span>
                    </center>
                    <div id="journalContent">
                        <div id="journalFlexGrid" style="max-height: 250px;"></div>
                        <br /><br />
                        <div class="row">
                            <div class="col-md-7"></div>
                            <div class="col-md-5">
                                <dl class="dl-horizontal">
                                    <dt>
                                        <b>Total Debit</b>
                                    </dt>
                                    <dd>
                                        <input type="text" class="form-control numberField" id="inpJournalTotalDebit" placeholder="0.00" disabled />
                                    </dd>
                                    <dt>
                                        <b>Total Credit</b>
                                    </dt>
                                    <dd>
                                        <input type="text" class="form-control numberField" id="inpJournalTotalCredit" placeholder="0.00" disabled />
                                    </dd>
                                    <dt>
                                        <b>Variance</b>
                                    </dt>
                                    <dd>
                                        <input type="text" class="form-control numberField" id="inpJournalVariance" placeholder="0.00" disabled />
                                    </dd>
                                </dl>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!--
        ===================================================
        Receiving Receipt Item: Purchase Order Status Modal
        ===================================================
    -->
    <div class="modal fade" id="POStatus" role="dialog">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Purchase Order Status</h4>
                </div>
                <div class="modal-body">
                    <center>
                        <span id="purchaseOrderStatusLoading"></span>
                    </center>
                    <div id="purchaseOrderStatusContent">
                        <div class="panel panel-default">

                            <!--
                                ===========================================================
                                Receiving Receipt Item: Purchase Order Status Search Filter
                                ===========================================================
                            -->
                            <div class="panel-heading">
                                <table style="width: 100%" border="0">
                                    <tr>
                                        <td style="width: 40%">
                                            <div class="input-group ">
                                                <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                                <input type="text" class="form-control" id="inpPurchaseOrderStatusSearchFilter" placeholder="Search">
                                            </div>
                                        </td>
                                        <td style="width: 1%"></td>
                                        <td style="width: 29%">
                                            <div class="input-group ">
                                                <span class="input-group-addon"><b>Receive To</b></span>
                                                <div class="comboBox-wide" id="cboPurchaseOrderStatusReceivedToBranch"></div>
                                            </div>
                                        </td>
                                        <td style="width: 1%"></td>
                                        <td style="width: 29%">
                                            <div class="input-group ">
                                                <span class="input-group-addon"><b>PO Number</b></span>
                                                <div class="comboBox-wide" id="cboPurchaseOrderStatusPONumber"></div>
                                            </div>
                                        </td>
                                    </tr>
                                </table>
                            </div>

                            <!--
                                =======================================================
                                Receiving Receipt Item: Purchase Order Status Flex Grid
                                =======================================================
                            -->
                            <div class="panel-body">
                                <div id="purchasrOrderStatusFlexGrid"></div>
                            </div>

                            <!--
                                ==================================================================
                                Receiving Receipt Item: Purchase Order Status Navigation Page Grid
                                ==================================================================
                            -->
                            <div class="panel-footer">
                                <div class="row">
                                    <div class="btn-group col-md-7" id="purchaseOrderStatusNavigationPageGrid">
                                        <button type="button" class="btn btn-default border-custom" id="btnPurchaseOrderStatusMoveToFirstPageGrid">
                                            <span class="glyphicon glyphicon-fast-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" id="btnPurchaseOrderStatusMoveToPreviousPageGrid">
                                            <span class="glyphicon glyphicon-step-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnPurchaseOrderStatusCurrentPageGrid"></button>
                                        <button type="button" class="btn btn-default border-custom" id="btnPurchaseOrderStatusMoveToNextPageGrid">
                                            <span class="glyphicon glyphicon-step-forward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" id="btnPurchaseOrderStatusMoveToLastPageGrid">
                                            <span class="glyphicon glyphicon-fast-forward"></span>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button id="btnPurchaseOrderStatusApplyPickedItems" class="btn btn-primary" onclick="btnPurchaseOrderStatusApplyPickedItemsOnclick()"><i class="fa fa-check"></i> Apply</button>
                    <button id="btnPurchaseOrderStatusApplyPickedItemsCloseModal" class="btn btn-danger" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!--
        =============================================================
        Receiving Receipt Item: Purchase Order Status Pick Item Modal
        =============================================================
    -->
    <div class="modal fade" id="poStatusPickedAmountModal" role="dialog">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Quantity</h4>
                </div>
                <div class="modal-body">
                    <dl>
                        <dt>Quantity</dt>
                        <dd>
                            <input class="form-control numberField requiredPickedAmount" id="inpPurchaseOrderStatusPickedItemQuantity" placeholder="0.00" />
                        </dd>
                    </dl>
                </div>
                <div class="modal-footer">
                    <button id="btnPurchaseOrderStatusPickedAmountContinue" class="btn btn-primary" onclick="btnPurchaseOrderStatusPickedAmountContinueOnclick()"><i class="fa fa-arrow-right"></i> Continue</button>
                    <button id="btnPurchaseOrderStatusPickedAmountContinueCloseModal" class="btn btn-danger" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!--
        =================================================================
        Receiving Receipt Item: Purchase Order Status Apply Confirm Modal
        =================================================================
    -->
    <div class="modal fade" id="applyAllConfirmPOStatus" role="dialog">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Apply</h4>
                </div>
                <div class="modal-body">
                    Apply Picked Items?
                </div>
                <div class="modal-footer">
                    <button id="btnPurchaseOrderStatusApplyConfirm" class="btn btn-primary" onclick="btnPurchaseOrderStatusApplyConfirmOnclick()"><i class="fa fa-check"></i> Apply</button>
                    <button id="btnPurchaseOrderStatusApplyConfirmCloseModal" class="btn btn-danger" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <!--
        =======================================
        Receiving Receipt: Cancel Confirm Modal
        =======================================
    -->
    <div class="modal fade" id="receivingReceiptCancelConfirmModal" role="dialog">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Cancel</h4>
                </div>
                <div class="modal-body">
                    Cancel Receiving Receipt?
                </div>
                <div class="modal-footer">
                    <button id="btnReceivingReceiptCancelConfirm" class="btn btn-warning" onclick="btnReceivingReceiptCancelConfirmOnclick()"><i class="fa fa-times-circle-o"></i> Cancel</button>
                    <button id="btnReceivingReceiptCancelConfirmCloseModal" class="btn btn-primary" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    @Scripts.Render("~/Scripts/Software-js")
    <script type="text/javascript">
        // ==============================================
        // Receiving Receipt Detail Combo Data and Fields
        // ==============================================
        var cboReceivingReceiptBranch = new wijmo.input.ComboBox('#cboReceivingReceiptBranch');
        var cboReceivingReceiptRRDate = new wijmo.input.InputDate('#cboReceivingReceiptRRDate');
        var cboReceivingReceiptSupplier = new wijmo.input.ComboBox('#cboReceivingReceiptSupplier');
        var cboReceivingReceiptTerm = new wijmo.input.ComboBox('#cboReceivingReceiptTerm');
        var cboReceivingReceiptReceivedBy = new wijmo.input.ComboBox('#cboReceivingReceiptReceivedBy');
        var cboReceivingReceiptPreparedBy = new wijmo.input.ComboBox('#cboReceivingReceiptPreparedBy');
        var cboReceivingReceiptCheckedBy = new wijmo.input.ComboBox('#cboReceivingReceiptCheckedBy');
        var cboReceivingReceiptApprovedBy = new wijmo.input.ComboBox('#cboReceivingReceiptApprovedBy');
        var cboReceivingReceiptStatus = new wijmo.input.ComboBox('#cboReceivingReceiptStatus');
        var isLocked = false;

        // ========================================================================
        // Receiving Receipt Item Collection View, Flex Grid and Navigation Buttons
        // ========================================================================
        var receivingReceiptItemCollectionView;
        var receivingReceiptItemFlexGrid;
        var cboReceivingReceiptItemShowNumberOfRows = new wijmo.input.ComboBox('#cboReceivingReceiptItemShowNumberOfRows');
        var btnReceivingReceiptItemMoveToFirstPageGrid = document.getElementById('btnReceivingReceiptItemMoveToFirstPageGrid');
        var btnReceivingReceiptItemMoveToPreviousPageGrid = document.getElementById('btnReceivingReceiptItemMoveToPreviousPageGrid');
        var btnReceivingReceiptItemMoveToNextPageGrid = document.getElementById('btnReceivingReceiptItemMoveToNextPageGrid');
        var btnReceivingReceiptItemMoveToLastPageGrid = document.getElementById('btnReceivingReceiptItemMoveToLastPageGrid');
        var btnReceivingReceiptItemCurrentPageGrid = document.getElementById('btnReceivingReceiptItemCurrentPageGrid');

        // ============================================
        // Receiving Receipt Item Combo Data and Fields
        // ============================================
        var receivingReceiptItemId = 0;
        var cboReceivingReceiptItemBranch = new wijmo.input.ComboBox('#cboReceivingReceiptItemBranch');
        var cboReceivingReceiptItemPONumber = new wijmo.input.ComboBox('#cboReceivingReceiptItemPONumber');
        var cboReceivingReceiptItemCode = new wijmo.input.ComboBox('#cboReceivingReceiptItemCode');
        var cboReceivingReceiptItemDescription = new wijmo.input.ComboBox('#cboReceivingReceiptItemDescription');
        var cboReceivingReceiptItemUnit = new wijmo.input.ComboBox('#cboReceivingReceiptItemUnit');
        var cboReceivingReceiptItemVAT = new wijmo.input.ComboBox('#cboReceivingReceiptItemVAT');
        var cboReceivingReceiptItemWTAX = new wijmo.input.ComboBox('#cboReceivingReceiptItemWTAX');

        // =============================================
        // Journal Entries Collection View and Flex Grid
        // =============================================
        var journalCollectionView;
        var journalFlexGrid = new wijmo.grid.FlexGrid('#journalFlexGrid');

        // ===================================================================
        // Inventory Entries Collection View, Flex Grid and Navigation Buttons
        // ===================================================================
        var inventoryCollectionView;
        var inventoryEntriesFlexGrid;
        var cboInventoryEntriesShowNumberOfRows = new wijmo.input.ComboBox('#cboInventoryEntriesShowNumberOfRows');
        var btnInventoryEntriesMoveToFirstPageGrid = document.getElementById('btnInventoryEntriesMoveToFirstPageGrid');
        var btnInventoryEntriesMoveToPreviousPageGrid = document.getElementById('btnInventoryEntriesMoveToPreviousPageGrid');
        var btnInventoryEntriesMoveToNextPageGrid = document.getElementById('btnInventoryEntriesMoveToNextPageGrid');
        var btnInventoryEntriesMoveToLastPageGrid = document.getElementById('btnInventoryEntriesMoveToLastPageGrid');
        var btnInventoryEntriesCurrentPageGrid = document.getElementById('btnInventoryEntriesCurrentPageGrid');

        // ================================================================================
        // Purchase Order Status Filters, Collection View, Flex Grid and Navigation Buttons
        // ================================================================================
        var cboPurchaseOrderStatusPONumber = new wijmo.input.ComboBox('#cboPurchaseOrderStatusPONumber');
        var cboPurchaseOrderStatusReceivedToBranch = new wijmo.input.ComboBox('#cboPurchaseOrderStatusReceivedToBranch');
        var purchaseOrderStatusCollectionView;
        var purchasrOrderStatusFlexGrid = new wijmo.grid.FlexGrid('#purchasrOrderStatusFlexGrid');
        var btnPurchaseOrderStatusMoveToFirstPageGrid = document.getElementById('btnPurchaseOrderStatusMoveToFirstPageGrid');
        var btnPurchaseOrderStatusMoveToPreviousPageGrid = document.getElementById('btnPurchaseOrderStatusMoveToPreviousPageGrid');
        var btnPurchaseOrderStatusMoveToNextPageGrid = document.getElementById('btnPurchaseOrderStatusMoveToNextPageGrid');
        var btnPurchaseOrderStatusMoveToLastPageGrid = document.getElementById('btnPurchaseOrderStatusMoveToLastPageGrid');
        var btnPurchaseOrderStatusCurrentPageGrid = document.getElementById('btnPurchaseOrderStatusCurrentPageGrid');
        var purchaseOrderStatusCurrentPageIndex = 0;
        var isBtnPurchaseOrderStatusClicked = false;

        // =======================
        // Get URL Parameter Value
        // =======================
        function getURLParameterValue(name) {
            name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");

            var regexS = "[\\?&]" + name + "=([^&#]*)";
            var regex = new RegExp(regexS);

            var results = regex.exec(window.location.href);
            if (results == null) {
                return "";
            } else {
                return results[1];
            }
        }

        // ============================================
        // Create Receiving Receipt Detail Combo Branch
        // ============================================
        function createCboReceivingReceiptDetailBranch() {
            NProgress.start();
            var branchesObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/receivingReceipt/dropdown/list/branch',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            branchesObservableArray.push({
                                Id: results[i]["Id"],
                                Branch: results[i]["Branch"]
                            });
                        }
                    }

                    cboReceivingReceiptBranch.dispose();
                    cboReceivingReceiptBranch = new wijmo.input.ComboBox('#cboReceivingReceiptBranch', {
                        disabled: true,
                        isEditable: false,
                        placeholder: "Select Branch",
                        itemsSource: branchesObservableArray,
                        displayMemberPath: "Branch",
                        selectedValuePath: "Id"
                    });

                    createCboReceivingReceiptDetailSupplier();
                }
            });
        }

        // ==============================================
        // Create Receiving Receipt Detail Combo Supplier
        // ==============================================
        function createCboReceivingReceiptDetailSupplier() {
            var suppliersObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/receivingReceipt/dropdown/list/supplier',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            suppliersObservableArray.push({
                                Id: results[i]["Id"],
                                Supplier: results[i]["Article"]
                            });
                        }
                    }

                    cboReceivingReceiptSupplier.dispose();
                    cboReceivingReceiptSupplier = new wijmo.input.ComboBox('#cboReceivingReceiptSupplier', {
                        isEditable: false,
                        placeholder: "Select Supplier",
                        itemsSource: suppliersObservableArray,
                        displayMemberPath: "Supplier",
                        selectedValuePath: "Id"
                    });

                    createCboReceivingReceiptDetailTerm();
                }
            });
        }

        // ==========================================
        // Create Receiving Receipt Detail Combo Term
        // ==========================================
        function createCboReceivingReceiptDetailTerm() {
            var termsObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/receivingReceipt/dropdown/list/term',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            termsObservableArray.push({
                                Id: results[i]["Id"],
                                Term: results[i]["Term"]
                            });
                        }
                    }

                    cboReceivingReceiptTerm.dispose();
                    cboReceivingReceiptTerm = new wijmo.input.ComboBox('#cboReceivingReceiptTerm', {
                        isEditable: false,
                        placeholder: "Select Term",
                        itemsSource: termsObservableArray,
                        displayMemberPath: "Term",
                        selectedValuePath: "Id"
                    });

                    createCboReceivingReceiptDetailUser();
                }
            });
        }

        // ==========================================
        // Create Receiving Receipt Detail Combo User
        // ==========================================
        function createCboReceivingReceiptDetailUser() {
            var usersObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/receivingReceipt/dropdown/list/users',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            usersObservableArray.push({
                                Id: results[i]["Id"],
                                FullName: results[i]["FullName"]
                            });
                        }
                    }

                    cboReceivingReceiptReceivedBy.dispose();
                    cboReceivingReceiptReceivedBy = new wijmo.input.ComboBox('#cboReceivingReceiptReceivedBy', {
                        isEditable: false,
                        placeholder: "Select User",
                        itemsSource: usersObservableArray,
                        displayMemberPath: "FullName",
                        selectedValuePath: "Id"
                    });

                    cboReceivingReceiptPreparedBy.dispose();
                    cboReceivingReceiptPreparedBy = new wijmo.input.ComboBox('#cboReceivingReceiptPreparedBy', {
                        disabled: true,
                        isEditable: false,
                        placeholder: "Select User",
                        itemsSource: usersObservableArray,
                        displayMemberPath: "FullName",
                        selectedValuePath: "Id"
                    });

                    cboReceivingReceiptCheckedBy.dispose();
                    cboReceivingReceiptCheckedBy = new wijmo.input.ComboBox('#cboReceivingReceiptCheckedBy', {
                        isEditable: false,
                        placeholder: "Select User",
                        itemsSource: usersObservableArray,
                        displayMemberPath: "FullName",
                        selectedValuePath: "Id"
                    });

                    cboReceivingReceiptApprovedBy.dispose();
                    cboReceivingReceiptApprovedBy = new wijmo.input.ComboBox('#cboReceivingReceiptApprovedBy', {
                        isEditable: false,
                        placeholder: "Select User",
                        itemsSource: usersObservableArray,
                        displayMemberPath: "FullName",
                        selectedValuePath: "Id"
                    });

                    createCboReceivingReceiptDetailStatus();
                }
            });
        }

        // ============================================
        // Create Receiving Receipt Detail Combo Status
        // ============================================
        function createCboReceivingReceiptDetailStatus() {
            var statusObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/receivingReceipt/dropdown/list/status',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    var disabled = false;

                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            statusObservableArray.push({
                                Id: results[i]["Id"],
                                Status: results[i]["Status"]
                            });
                        }
                    } else {
                        disabled = true;
                    }

                    cboReceivingReceiptStatus.dispose();
                    cboReceivingReceiptStatus = new wijmo.input.ComboBox('#cboReceivingReceiptStatus', {
                        disabled: disabled,
                        isEditable: false,
                        //placeholder: "Select Status",
                        itemsSource: statusObservableArray,
                        displayMemberPath: "Status",
                        selectedValuePath: "Status"
                    });

                    getReceivingReceiptDetailData();
                }
            });
        }

        // =================================
        // Get Receiving Receipt Detail Data
        // =================================
        function getReceivingReceiptDetailData() {
            if (document.location.search.length > 0) {
                var id = getURLParameterValue('id');

                $.ajax({
                    url: '/api/receivingReceipt/detail/' + id,
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    data: {},
                    success: function (results) {
                        if (results != null) {
                            cboReceivingReceiptBranch.selectedValue = results.BranchId;
                            document.getElementById('inpReceivingReceiptRRNumber').value = results.RRNumber;
                            cboReceivingReceiptRRDate.dispose();
                            cboReceivingReceiptRRDate = new wijmo.input.InputDate('#cboReceivingReceiptRRDate', {
                                format: 'MM-dd-yyyy',
                                value: new Date(results.RRDate),
                            });
                            document.getElementById('inpReceivingReceiptDocumentReference').value = results.DocumentReference;
                            cboReceivingReceiptSupplier.selectedValue = results.SupplierId;
                            cboReceivingReceiptTerm.selectedValue = results.TermId;
                            document.getElementById('inpReceivingReceiptRemarks').value = results.Remarks;
                            document.getElementById('inpReceivingReceiptManualRRNumber').value = results.ManualRRNumber;
                            cboReceivingReceiptReceivedBy.selectedValue = results.ReceivedById;
                            cboReceivingReceiptPreparedBy.selectedValue = results.PreparedById;
                            cboReceivingReceiptCheckedBy.selectedValue = results.CheckedById;
                            cboReceivingReceiptApprovedBy.selectedValue = results.ApprovedById;
                            cboReceivingReceiptStatus.selectedValue = results.Status;
                            document.getElementById('createdBy').innerHTML = results.CreatedBy;
                            document.getElementById('createdDate').innerHTML = results.CreatedDateTime;
                            document.getElementById('updatedBy').innerHTML = results.UpdatedBy;
                            document.getElementById('updatedDate').innerHTML = results.UpdatedDateTime;

                            if (results.IsLocked) {
                                document.getElementById('inpReceivingReceiptRRNumber').disabled = true;
                                cboReceivingReceiptRRDate.disabled = true;
                                document.getElementById('inpReceivingReceiptDocumentReference').disabled = true;
                                cboReceivingReceiptSupplier.disabled = true;
                                cboReceivingReceiptTerm.disabled = true;
                                document.getElementById('inpReceivingReceiptRemarks').disabled = true;
                                document.getElementById('inpReceivingReceiptManualRRNumber').disabled = true;
                                cboReceivingReceiptReceivedBy.disabled = true;
                                cboReceivingReceiptPreparedBy.disabled = true;
                                cboReceivingReceiptCheckedBy.disabled = true;
                                cboReceivingReceiptApprovedBy.disabled = true;
                                cboReceivingReceiptStatus.disabled = true;

                                isLocked = true;

                                $("#btnReceivingReceiptSave").prop("disabled", true);
                                $("#btnReceivingReceiptLock").prop("disabled", true);
                                $("#btnReceivingReceiptPO").prop("disabled", true);
                                $("#btnReceivingReceiptItemAdd").prop("disabled", true);

                                if (results.IsCancelled) {
                                    $("#btnReceivingReceiptUnlock").prop("disabled", true);
                                    $("#btnReceivingReceiptCancel").prop("disabled", true);
                                }
                            } else {
                                $("#btnReceivingReceiptJournal").prop("disabled", true);
                                $("#btnReceivingReceiptUnlock").prop("disabled", true);
                                $("#btnReceivingReceiptCancel").prop("disabled", true);
                                $("#btnReceivingReceiptPrint").prop("disabled", true);
                            }

                            createCboShowRows();
                            createReceivingReceiptFlexGrid();
                            createInventoryEntriesFlexGrid();
                        } else {
                            alert("No Data");
                            window.location = "/Software/ReceivingReceipt";
                        }
                    }
                });
            } else {
                alert("No Id Parameter Value");
                window.location = "/Software/ReceivingReceipt";
            }
        }

        // ======================
        // Save Receiving Receipt
        // ======================
        function btnReceivingReceiptSaveOnclick() {
            document.getElementById('btnReceivingReceiptSave').innerHTML = "<i class='fa fa-save'></i> Saving...";
            $("#btnReceivingReceiptSave").prop("disabled", true);
            $("#btnReceivingReceiptJournal").prop("disabled", true);
            $("#btnReceivingReceiptLock").prop("disabled", true);
            $("#btnReceivingReceiptUnlock").prop("disabled", true);
            $("#btnReceivingReceiptCancel").prop("disabled", true);
            $("#btnReceivingReceiptPrint").prop("disabled", true);
            $("#btnReceivingReceiptClose").prop("disabled", true);

            var receivingReceiptObject = new Object();
            receivingReceiptObject.BranchId = cboReceivingReceiptBranch.selectedValue;
            receivingReceiptObject.RRDate = cboReceivingReceiptRRDate.value.toLocaleDateString();
            receivingReceiptObject.RRNumber = document.getElementById('inpReceivingReceiptRRNumber').value;
            receivingReceiptObject.SupplierId = cboReceivingReceiptSupplier.selectedValue;
            receivingReceiptObject.TermId = cboReceivingReceiptTerm.selectedValue;
            receivingReceiptObject.DocumentReference = document.getElementById('inpReceivingReceiptDocumentReference').value;
            receivingReceiptObject.ManualRRNumber = document.getElementById('inpReceivingReceiptManualRRNumber').value;
            receivingReceiptObject.Remarks = document.getElementById('inpReceivingReceiptRemarks').value;
            receivingReceiptObject.ReceivedById = cboReceivingReceiptReceivedBy.selectedValue;
            receivingReceiptObject.PreparedById = cboReceivingReceiptPreparedBy.selectedValue;
            receivingReceiptObject.CheckedById = cboReceivingReceiptCheckedBy.selectedValue;
            receivingReceiptObject.ApprovedById = cboReceivingReceiptApprovedBy.selectedValue;
            receivingReceiptObject.Status = cboReceivingReceiptStatus.selectedValue;
            var receivingReceiptData = JSON.stringify(receivingReceiptObject);

            var isValid = true;
            $('.requiredRR').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                }
                else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            if (isValid) {
                var id = getURLParameterValue('id');

                $.ajax({
                    type: "PUT",
                    url: '/api/receivingReceipt/save/' + id,
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    data: receivingReceiptData,
                    statusCode: {
                        200: function () {
                            toastr.success("Save Successful");
                            window.setTimeout(function () {
                                location.reload()
                            }, 1000);
                        },
                        404: function (message) {
                            toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                            document.getElementById('btnReceivingReceiptSave').innerHTML = "<i class='fa fa-save'></i> Save";
                            $("#btnReceivingReceiptSave").prop("disabled", false);

                            if (isLocked) {
                                $("#btnReceivingReceiptJournal").prop("disabled", false);
                                $("#btnReceivingReceiptUnlock").prop("disabled", false);
                                $("#btnReceivingReceiptCancel").prop("disabled", false);
                                $("#btnReceivingReceiptPrint").prop("disabled", false);
                            } else {
                                $("#btnReceivingReceiptLock").prop("disabled", false);
                            }

                            $("#btnReceivingReceiptClose").prop("disabled", false);
                        },
                        400: function (message) {
                            toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                            document.getElementById('btnReceivingReceiptSave').innerHTML = "<i class='fa fa-save'></i> Save";
                            $("#btnReceivingReceiptSave").prop("disabled", false);

                            if (isLocked) {
                                $("#btnReceivingReceiptJournal").prop("disabled", false);
                                $("#btnReceivingReceiptUnlock").prop("disabled", false);
                                $("#btnReceivingReceiptCancel").prop("disabled", false);
                                $("#btnReceivingReceiptPrint").prop("disabled", false);
                            } else {
                                $("#btnReceivingReceiptLock").prop("disabled", false);
                            }

                            $("#btnReceivingReceiptClose").prop("disabled", false);
                        },
                        500: function (message) {
                            toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                            document.getElementById('btnReceivingReceiptSave').innerHTML = "<i class='fa fa-save'></i> Save";
                            $("#btnReceivingReceiptSave").prop("disabled", false);

                            if (isLocked) {
                                $("#btnReceivingReceiptJournal").prop("disabled", false);
                                $("#btnReceivingReceiptUnlock").prop("disabled", false);
                                $("#btnReceivingReceiptCancel").prop("disabled", false);
                                $("#btnReceivingReceiptPrint").prop("disabled", false);
                            } else {
                                $("#btnReceivingReceiptLock").prop("disabled", false);
                            }

                            $("#btnReceivingReceiptClose").prop("disabled", false);
                        }
                    },
                });
            } else {
                toastr.error("Invalid Entry");
            }
        }

        // ======================
        // Lock Receiving Receipt
        // ======================
        function btnReceivingReceiptLockOnclick() {
            document.getElementById('btnReceivingReceiptLock').innerHTML = "<i class='fa fa-lock'></i> Locking...";
            $("#btnReceivingReceiptSave").prop("disabled", true);
            $("#btnReceivingReceiptJournal").prop("disabled", true);
            $("#btnReceivingReceiptLock").prop("disabled", true);
            $("#btnReceivingReceiptUnlock").prop("disabled", true);
            $("#btnReceivingReceiptCancel").prop("disabled", true);
            $("#btnReceivingReceiptPrint").prop("disabled", true);
            $("#btnReceivingReceiptClose").prop("disabled", true);

            var receivingReceiptObject = new Object();
            receivingReceiptObject.BranchId = cboReceivingReceiptBranch.selectedValue;
            receivingReceiptObject.RRDate = cboReceivingReceiptRRDate.value.toLocaleDateString();
            receivingReceiptObject.RRNumber = document.getElementById('inpReceivingReceiptRRNumber').value;
            receivingReceiptObject.SupplierId = cboReceivingReceiptSupplier.selectedValue;
            receivingReceiptObject.TermId = cboReceivingReceiptTerm.selectedValue;
            receivingReceiptObject.DocumentReference = document.getElementById('inpReceivingReceiptDocumentReference').value;
            receivingReceiptObject.ManualRRNumber = document.getElementById('inpReceivingReceiptManualRRNumber').value;
            receivingReceiptObject.Remarks = document.getElementById('inpReceivingReceiptRemarks').value;
            receivingReceiptObject.ReceivedById = cboReceivingReceiptReceivedBy.selectedValue;
            receivingReceiptObject.PreparedById = cboReceivingReceiptPreparedBy.selectedValue;
            receivingReceiptObject.CheckedById = cboReceivingReceiptCheckedBy.selectedValue;
            receivingReceiptObject.ApprovedById = cboReceivingReceiptApprovedBy.selectedValue;
            receivingReceiptObject.Status = cboReceivingReceiptStatus.selectedValue;
            var receivingReceiptData = JSON.stringify(receivingReceiptObject);

            var isValid = true;
            $('.requiredRR').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                }
                else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            if (isValid) {
                var id = getURLParameterValue('id');

                $.ajax({
                    type: "PUT",
                    url: '/api/receivingReceipt/lock/' + id,
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    data: receivingReceiptData,
                    statusCode: {
                        200: function () {
                            toastr.success("Lock Successful");
                            window.setTimeout(function () {
                                location.reload()
                            }, 1000);
                        },
                        404: function (message) {
                            toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                            document.getElementById('btnReceivingReceiptLock').innerHTML = "<i class='fa fa-lock'></i> Lock";
                            $("#btnReceivingReceiptSave").prop("disabled", false);
                            $("#btnReceivingReceiptLock").prop("disabled", false);
                            $("#btnReceivingReceiptClose").prop("disabled", false);
                        },
                        400: function (message) {
                            toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                            document.getElementById('btnReceivingReceiptLock').innerHTML = "<i class='fa fa-lock'></i> Lock";
                            $("#btnReceivingReceiptSave").prop("disabled", false);
                            $("#btnReceivingReceiptLock").prop("disabled", false);
                            $("#btnReceivingReceiptClose").prop("disabled", false);
                        },
                        500: function (message) {
                            toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                            document.getElementById('btnReceivingReceiptLock').innerHTML = "<i class='fa fa-lock'></i> Lock";
                            $("#btnReceivingReceiptSave").prop("disabled", false);
                            $("#btnReceivingReceiptLock").prop("disabled", false);
                            $("#btnReceivingReceiptClose").prop("disabled", false);
                        }
                    },
                });
            } else {
                toastr.error("Invalid Entry");
            }
        }

        // ========================
        // Unlock Receiving Receipt
        // ========================
        function btnReceivingReceiptUnlockOnclick() {
            document.getElementById('btnReceivingReceiptUnlock').innerHTML = "<i class='fa fa-unlock'></i> Unlocking...";
            $("#btnReceivingReceiptJournal").prop("disabled", true);
            $("#btnReceivingReceiptLock").prop("disabled", true);
            $("#btnReceivingReceiptUnlock").prop("disabled", true);
            $("#btnReceivingReceiptCancel").prop("disabled", true);
            $("#btnReceivingReceiptPrint").prop("disabled", true);
            $("#btnReceivingReceiptClose").prop("disabled", true);

            var id = getURLParameterValue('id');

            $.ajax({
                type: "PUT",
                url: '/api/receivingReceipt/unlock/' + id,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Unlock Successful");
                        window.setTimeout(function () {
                            location.reload()
                        }, 1000);
                    },
                    404: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                        document.getElementById('btnReceivingReceiptUnlock').innerHTML = "<i class='fa fa-unlock'></i> Unlock";
                        $("#btnReceivingReceiptJournal").prop("disabled", false);
                        $("#btnReceivingReceiptUnlock").prop("disabled", false);
                        $("#btnReceivingReceiptCancel").prop("disabled", false);
                        $("#btnReceivingReceiptPrint").prop("disabled", false);
                        $("#btnReceivingReceiptClose").prop("disabled", false);
                    },
                    400: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                        document.getElementById('btnReceivingReceiptUnlock').innerHTML = "<i class='fa fa-unlock'></i> Unlock";
                        $("#btnReceivingReceiptJournal").prop("disabled", false);
                        $("#btnReceivingReceiptUnlock").prop("disabled", false);
                        $("#btnReceivingReceiptCancel").prop("disabled", false);
                        $("#btnReceivingReceiptPrint").prop("disabled", false);
                        $("#btnReceivingReceiptClose").prop("disabled", false);
                    },
                    500: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                        document.getElementById('btnReceivingReceiptUnlock').innerHTML = "<i class='fa fa-unlock'></i> Unlock";
                        $("#btnReceivingReceiptSave").prop("disabled", false);
                        $("#btnReceivingReceiptJournal").prop("disabled", false);
                        $("#btnReceivingReceiptUnlock").prop("disabled", false);
                        $("#btnReceivingReceiptCancel").prop("disabled", false);
                        $("#btnReceivingReceiptPrint").prop("disabled", false);
                        $("#btnReceivingReceiptClose").prop("disabled", false);
                    }
                }
            });
        }

        // ========================
        // Cancel Receiving Receipt
        // ========================
        function btnReceivingReceiptCancelOnclick() {
            $('#receivingReceiptCancelConfirmModal').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById('btnReceivingReceiptCancelConfirm').innerHTML = "<i class='fa fa-times-circle-o'></i> Cancel";
            $("#btnReceivingReceiptCancelConfirm").prop("disabled", false);
            $("#btnReceivingReceiptCancelConfirmCloseModal").prop("disabled", false);
        }

        // ================================
        // Confirm Cancel Receiving Receipt
        // ================================
        function btnReceivingReceiptCancelConfirmOnclick() {
            document.getElementById('btnReceivingReceiptCancelConfirm').innerHTML = "<i class='fa fa-times-circle-o'></i> Cancelling...";
            $("#btnReceivingReceiptCancelConfirm").prop("disabled", true);
            $("#btnReceivingReceiptCancelConfirmCloseModal").prop("disabled", true);

            document.getElementById('btnReceivingReceiptCancel').innerHTML = "<i class='fa fa-times-circle-o'></i> Cancelling...";
            $("#btnReceivingReceiptJournal").prop("disabled", true);
            $("#btnReceivingReceiptLock").prop("disabled", true);
            $("#btnReceivingReceiptUnlock").prop("disabled", true);
            $("#btnReceivingReceiptCancel").prop("disabled", true);
            $("#btnReceivingReceiptPrint").prop("disabled", true);
            $("#btnReceivingReceiptClose").prop("disabled", true);

            var id = getURLParameterValue('id');

            $.ajax({
                type: "PUT",
                url: '/api/receivingReceipt/cancel/' + id,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Cancel Successful");
                        window.setTimeout(function () {
                            location.reload()
                        }, 1000);
                    },
                    404: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                        document.getElementById('btnReceivingReceiptCancel').innerHTML = "<i class='fa fa-times-circle-o'></i> Cancel";
                        $("#btnReceivingReceiptJournal").prop("disabled", false);
                        $("#btnReceivingReceiptUnlock").prop("disabled", false);
                        $("#btnReceivingReceiptCancel").prop("disabled", false);
                        $("#btnReceivingReceiptPrint").prop("disabled", false);
                        $("#btnReceivingReceiptClose").prop("disabled", false);

                        document.getElementById('btnReceivingReceiptCancelConfirm').innerHTML = "<i class='fa fa-times-circle-o'></i> Cancel";
                        $("#btnReceivingReceiptCancelConfirm").prop("disabled", false);
                        $("#btnReceivingReceiptCancelConfirmCloseModal").prop("disabled", false);
                    },
                    400: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                        document.getElementById('btnReceivingReceiptCancel').innerHTML = "<i class='fa fa-times-circle-o'></i> Cancel";
                        $("#btnReceivingReceiptJournal").prop("disabled", false);
                        $("#btnReceivingReceiptUnlock").prop("disabled", false);
                        $("#btnReceivingReceiptCancel").prop("disabled", false);
                        $("#btnReceivingReceiptPrint").prop("disabled", false);
                        $("#btnReceivingReceiptClose").prop("disabled", false);

                        document.getElementById('btnReceivingReceiptCancelConfirm').innerHTML = "<i class='fa fa-times-circle-o'></i> Cancel";
                        $("#btnReceivingReceiptCancelConfirm").prop("disabled", false);
                        $("#btnReceivingReceiptCancelConfirmCloseModal").prop("disabled", false);
                    },
                    500: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                        document.getElementById('btnReceivingReceiptCancel').innerHTML = "<i class='fa fa-times-circle-o'></i> Cancel";
                        $("#btnReceivingReceiptJournal").prop("disabled", false);
                        $("#btnReceivingReceiptUnlock").prop("disabled", false);
                        $("#btnReceivingReceiptCancel").prop("disabled", false);
                        $("#btnReceivingReceiptPrint").prop("disabled", false);
                        $("#btnReceivingReceiptClose").prop("disabled", false);

                        document.getElementById('btnReceivingReceiptCancelConfirm').innerHTML = "<i class='fa fa-times-circle-o'></i> Cancel";
                        $("#btnReceivingReceiptCancelConfirm").prop("disabled", false);
                        $("#btnReceivingReceiptCancelConfirmCloseModal").prop("disabled", false);
                    }
                }
            });
        }

        // =======================
        // Print Receiving Receipt
        // =======================
        function btnReceivingReceiptPrintOnclick() {
            var id = getURLParameterValue('id');
            var pirntLink = "/RepReceivingReceipt/ReceivingReceipt?RRId=" + id;

            window.open(pirntLink, '_blank');
        }

        // ===============================
        // Get Receiving Receipt Item Data
        // ===============================
        function getRecevingReceiptItemData() {
            var itemsObservableArray = new wijmo.collections.ObservableArray;
            if (document.location.search.length > 0) {
                var RRId = getURLParameterValue('id');

                $.ajax({
                    url: '/api/receivingReceiptItem/list/' + RRId,
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    success: function (results) {
                        var totalAmount = 0;
                        var totalVATAmount = 0;
                        var totalWTAXAmount = 0;

                        if (results.length > 0) {
                            var btnEditId = "<button class='btn btn-primary btn-xs btn-block' onclick='btnReceivingReceiptItemEditOnclick()'><i class='fa fa-edit'></i> Edit</button>";
                            var btnDeleteId = "<button class='btn btn-danger btn-xs btn-block' onclick='btnReceivingReceiptItemDeleteOnclick()'><i class='fa fa-trash'></i> Delete</button>";
                            if (isLocked) {
                                btnEditId = "<button class='btn btn-primary btn-xs btn-block' onclick='btnReceivingReceiptItemEditOnclick()' disabled><i class='fa fa-edit'></i> Edit</button>";
                                btnDeleteId = "<button class='btn btn-danger btn-xs btn-block' onclick='btnReceivingReceiptItemDeleteOnclick()' disabled><i class='fa fa-trash'></i> Delete</button>";
                            }

                            for (i = 0; i < results.length; i++) {
                                itemsObservableArray.push({
                                    EditId: btnEditId,
                                    DeleteId: btnDeleteId,
                                    Id: results[i]["Id"],
                                    RRId: results[i]["RRId"],
                                    POId: results[i]["POId"],
                                    PONumber: results[i]["PONumber"],
                                    ItemId: results[i]["ItemId"],
                                    ItemCode: results[i]["ItemCode"],
                                    ItemManualArticleOldCode: results[i]["ItemManualArticleOldCode"],
                                    ItemDescription: results[i]["ItemDescription"],
                                    Particulars: results[i]["Particulars"],
                                    Quantity: results[i]["Quantity"],
                                    QuantityDisplay: parseFloat(results[i]["Quantity"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                    UnitId: results[i]["UnitId"],
                                    Unit: results[i]["Unit"],
                                    Cost: results[i]["Cost"],
                                    CostDisplay: parseFloat(results[i]["Cost"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                    Amount: results[i]["Amount"],
                                    AmountDisplay: parseFloat(results[i]["Amount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                    BranchId: results[i]["BranchId"],
                                    Branch: results[i]["Branch"],
                                    VATId: results[i]["VATId"],
                                    VAT: results[i]["VAT"],
                                    VATPercentage: results[i]["VAT"] + "<hr style='margin-top: 3px; margin-bottom: 3px; border-color: #cccccc' />" + parseFloat(results[i]["VATPercentage"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                    VATRate: results[i]["VATPercentage"],
                                    VATAmount: results[i]["VATAmount"],
                                    VATAmountDisplay: parseFloat(results[i]["VATAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                    WTAXId: results[i]["WTAXId"],
                                    WTAX: results[i]["WTAX"],
                                    WTAXPercentage: results[i]["WTAX"] + "<hr style='margin-top: 3px; margin-bottom: 3px; border-color: #cccccc' />" + parseFloat(results[i]["WTAXPercentage"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                    WTAXRate: results[i]["WTAXPercentage"],
                                    WTAXAmount: results[i]["WTAXAmount"],
                                    WTAXAmountDisplay: parseFloat(results[i]["WTAXAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                    BaseUnitId: results[i]["BaseUnitId"],
                                    BaseUnit: results[i]["BaseUnit"],
                                    BaseQuantity: results[i]["BaseQuantity"],
                                    BaseQuantityDisplay: parseFloat(results[i]["BaseQuantity"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                    BaseCost: results[i]["BaseCost"],
                                    BaseCostDisplay: parseFloat(results[i]["BaseCost"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                });

                                totalAmount += results[i]["Amount"];
                                totalVATAmount += results[i]["VATAmount"];
                                totalWTAXAmount += results[i]["WTAXAmount"];
                            }
                        }

                        document.getElementById('totalReceivingReceiptAmount').value = parseFloat(totalAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        document.getElementById('totalReceivingReceiptVATAmount').value = parseFloat(totalVATAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        document.getElementById('totalReceivingReceiptWTAXAmount').value = parseFloat(totalWTAXAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");

                        NProgress.done();
                    }
                });
            }

            return itemsObservableArray;
        }

        // =======================================
        // Create Receiving Receipt Item Flex Grid
        // =======================================
        function createReceivingReceiptFlexGrid() {
            receivingReceiptItemCollectionView = new wijmo.collections.CollectionView(getRecevingReceiptItemData());
            receivingReceiptItemCollectionView.canFilter = true;
            receivingReceiptItemCollectionView.pageSize = cboReceivingReceiptItemShowNumberOfRows.selectedValue;

            var filterText = '';
            $('#inpReceivingReceiptItemSearchFilter').keyup(function () {
                filterText = this.value.toLowerCase();
                receivingReceiptItemCollectionView.refresh();
            });

            receivingReceiptItemCollectionView.filter = function (item) {
                return !filterText || (item.PONumber.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.ItemCode.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.ItemDescription.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Particulars.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Unit.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Branch.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.VAT.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.WTAX.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.BaseUnit.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.ItemManualArticleOldCode.toLowerCase().indexOf(filterText) > -1);
            }

            receivingReceiptItemCollectionView.collectionChanged.addHandler(function (sender, args) {
                updateReceivingReceiptItemNavigationButtons();
            });

            receivingReceiptItemFlexGrid = new wijmo.grid.FlexGrid('#receivingReceiptItemFlexGrid');
            receivingReceiptItemFlexGrid.initialize({
                columns: [
                    @{
                        if (canEdit)
                        {
                            <text>
                                {
                                    "header": "Edit",
                                    "binding": "EditId",
                                    "width": 70,
                                    "align": "center",
                                    "allowResizing": false,
                                    "allowSorting": false,
                                    "isContentHtml": true
                                },
                            </text>
                        }
                        if (canDelete)
                        {
                            <text>
                                {
                                    "header": "Delete",
                                    "binding": "DeleteId",
                                    "width": 70,
                                    "align": "center",
                                    "allowResizing": false,
                                    "allowSorting": false,
                                    "isContentHtml": true
                                },
                            </text>
                        }
                    }
                    {
                        "header": "PO No.",
                        "binding": "PONumber",
                        "allowSorting": true,
                        "width": 90
                    },
                    {
                        "header": "Barcode",
                        "binding": "ItemCode",
                        "allowSorting": true,
                        "width": 120
                    },
                    {
                        "header": "SKU Code",
                        "binding": "ItemManualArticleOldCode",
                        "allowSorting": true,
                        "width": 120
                    },
                    {
                        "header": "Description",
                        "binding": "ItemDescription",
                        "allowSorting": true,
                        "width": 170
                    },
                    {
                        "header": "Particulars",
                        "binding": "Particulars",
                        "allowSorting": true,
                        "width": 150
                    },
                    {
                        "header": "Quantity",
                        "binding": "QuantityDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": 100
                    },
                    {
                        "header": "Unit",
                        "binding": "Unit",
                        "allowSorting": true,
                        "width": 100
                    },
                    {
                        "header": "Cost",
                        "binding": "CostDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": 100
                    },
                    {
                        "header": "Amount",
                        "binding": "AmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": 100
                    },
                    {
                        "header": "Branch",
                        "binding": "Branch",
                        "allowSorting": true,
                        "width": 150
                    },
                    {
                        "header": "Type",
                        "binding": "VAT",
                        "allowSorting": true,
                        "width": 100,
                        "isContentHtml": true
                    },
                    {
                        "header": "Rate",
                        "binding": "VATRate",
                        "allowSorting": true,
                        "width": 100,
                        "align": "right",
                        "isContentHtml": true
                    },
                    {
                        "header": "Amount",
                        "binding": "VATAmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": 100
                    },
                    {
                        "header": "Type",
                        "binding": "WTAX",
                        "allowSorting": true,
                        "width": 100,
                        "isContentHtml": true
                    },
                    {
                        "header": "Rate",
                        "binding": "WTAXRate",
                        "allowSorting": true,
                        "width": 100,
                        "align": "right",
                        "isContentHtml": true
                    },
                    {
                        "header": "Amount",
                        "binding": "WTAXAmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": 100
                    },
                    {
                        "header": "Unit",
                        "binding": "BaseUnit",
                        "allowSorting": true,
                        "width": 100
                    },
                    {
                        "header": "Quantity",
                        "binding": "BaseQuantityDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": 100
                    },
                    {
                        "header": "Cost",
                        "binding": "BaseCostDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": 100
                    },
                ],
                autoGenerateColumns: false,
                itemsSource: receivingReceiptItemCollectionView,
                isReadOnly: true,
                @{
                    if (canEdit)
                    {
                        if (canDelete)
                        {
                            <text>
                                frozenColumns: 2,
                            </text>
                        }
                        else
                        {
                            <text>
                                frozenColumns: 1,
                            </text>
                        }
                    }
                    else
                    {
                        if (canDelete)
                        {
                            <text>
                                frozenColumns: 1,
                            </text>
                        }
                        else
                        {
                            <text>
                                frozenColumns: 0,
                            </text>
                        }
                    }
                }
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            receivingReceiptItemFlexGrid.trackChanges = true;

            var hr = new wijmo.grid.Row();
            receivingReceiptItemFlexGrid.allowMerging = wijmo.grid.AllowMerging.AllHeaders;
            receivingReceiptItemFlexGrid.columnHeaders.rows.push(hr);
            receivingReceiptItemFlexGrid.columnHeaders.rows[0].allowMerging = true;

            @{
                if (canEdit)
                {
                    if (canDelete)
                    {
                        <text>
                            var columnName = "";
                            for (var i = 0; i <= 20; i++) {
                                if (i == 0) {
                                    columnName = "Edit";
                                } else if (i == 1) {
                                    columnName = "Delete";
                                } else if (i == 2) {
                                    columnName = "PO No.";
                                } else if (i == 3) {
                                    columnName = "Barcode";
                                } else if (i == 4) {
                                    columnName = "SKU Code";
                                } else if (i == 5) {
                                    columnName = "Description";
                                } else if (i == 6) {
                                    columnName = "Particulars";
                                } else if (i == 7) {
                                    columnName = "Quantity";
                                } else if (i == 8) {
                                    columnName = "Unit";
                                } else if (i == 9) {
                                    columnName = "Cost";
                                } else if (i == 10) {
                                    columnName = "Amount";
                                } else if (i == 11) {
                                    columnName = "Branch";
                                } else {
                                    if (i >= 12) {
                                        columnName = "VAT";
                                        for (var j = 12; j <= 14; j++) {
                                            receivingReceiptItemFlexGrid.columnHeaders.columns[j].allowMerging = true;
                                            receivingReceiptItemFlexGrid.columnHeaders.setCellData(0, j, columnName);
                                        }
                                    }

                                    if (i >= 15) {
                                        columnName = "WTAX";
                                        for (var j = 15; j <= 17; j++) {
                                            receivingReceiptItemFlexGrid.columnHeaders.columns[j].allowMerging = true;
                                            receivingReceiptItemFlexGrid.columnHeaders.setCellData(0, j, columnName);
                                        }
                                    }

                                    if (i >= 18) {
                                        columnName = "Basic Unit Conversion";
                                        for (var j = 18; j <= 20; j++) {
                                            receivingReceiptItemFlexGrid.columnHeaders.columns[j].allowMerging = true;
                                            receivingReceiptItemFlexGrid.columnHeaders.setCellData(0, j, columnName);
                                        }
                                    }
                                }

                                if (i <= 11) {
                                    receivingReceiptItemFlexGrid.columnHeaders.columns[i].allowMerging = true;
                                    receivingReceiptItemFlexGrid.columnHeaders.setCellData(0, i, columnName);
                                }
                            }
                        </text>
                    }
                    else
                    {
                        <text>
                            var columnName = "";
                            for (var i = 0; i <= 19; i++) {
                                if (i == 0) {
                                    columnName = "Edit";
                                } else if (i == 1) {
                                    columnName = "PO No.";
                                } else if (i == 2) {
                                    columnName = "Barcode";
                                } else if (i == 3) {
                                    columnName = "SKU Code";
                                } else if (i == 4) {
                                    columnName = "Description";
                                } else if (i == 5) {
                                    columnName = "Particulars";
                                } else if (i == 6) {
                                    columnName = "Quantity";
                                } else if (i == 7) {
                                    columnName = "Unit";
                                } else if (i == 8) {
                                    columnName = "Cost";
                                } else if (i == 9) {
                                    columnName = "Amount";
                                } else if (i == 10) {
                                    columnName = "Branch";
                                } else {
                                    if (i >= 11) {
                                        columnName = "VAT";
                                        for (var j = 11; j <= 13; j++) {
                                            receivingReceiptItemFlexGrid.columnHeaders.columns[j].allowMerging = true;
                                            receivingReceiptItemFlexGrid.columnHeaders.setCellData(0, j, columnName);
                                        }
                                    }

                                    if (i >= 14) {
                                        columnName = "WTAX";
                                        for (var j = 14; j <= 16; j++) {
                                            receivingReceiptItemFlexGrid.columnHeaders.columns[j].allowMerging = true;
                                            receivingReceiptItemFlexGrid.columnHeaders.setCellData(0, j, columnName);
                                        }
                                    }

                                    if (i >= 17) {
                                        columnName = "Basic Unit Conversion";
                                        for (var j = 17; j <= 19; j++) {
                                            receivingReceiptItemFlexGrid.columnHeaders.columns[j].allowMerging = true;
                                            receivingReceiptItemFlexGrid.columnHeaders.setCellData(0, j, columnName);
                                        }
                                    }
                                }

                                if (i <= 10) {
                                    receivingReceiptItemFlexGrid.columnHeaders.columns[i].allowMerging = true;
                                    receivingReceiptItemFlexGrid.columnHeaders.setCellData(0, i, columnName);
                                }

                            }
                        </text>
                    }
                }
                else
                {
                    if (canDelete)
                    {
                        <text>
                            var columnName = "";
                            for (var i = 0; i <= 19; i++) {
                                if (i == 0) {
                                    columnName = "Delete";
                                } else if (i == 1) {
                                    columnName = "PO No.";
                                } else if (i == 2) {
                                    columnName = "Barcode";
                                } else if (i == 3) {
                                    columnName = "SKU Code";
                                } else if (i == 4) {
                                    columnName = "Description";
                                } else if (i == 5) {
                                    columnName = "Particulars";
                                } else if (i == 6) {
                                    columnName = "Quantity";
                                } else if (i == 7) {
                                    columnName = "Unit";
                                } else if (i == 8) {
                                    columnName = "Cost";
                                } else if (i == 9) {
                                    columnName = "Amount";
                                } else if (i == 10) {
                                    columnName = "Branch";
                                } else {
                                    if (i >= 11) {
                                        columnName = "VAT";
                                        for (var j = 11; j <= 13; j++) {
                                            receivingReceiptItemFlexGrid.columnHeaders.columns[j].allowMerging = true;
                                            receivingReceiptItemFlexGrid.columnHeaders.setCellData(0, j, columnName);
                                        }
                                    }

                                    if (i >= 14) {
                                        columnName = "WTAX";
                                        for (var j = 14; j <= 16; j++) {
                                            receivingReceiptItemFlexGrid.columnHeaders.columns[j].allowMerging = true;
                                            receivingReceiptItemFlexGrid.columnHeaders.setCellData(0, j, columnName);
                                        }
                                    }

                                    if (i >= 17) {
                                        columnName = "Basic Unit Conversion";
                                        for (var j = 17; j <= 19; j++) {
                                            receivingReceiptItemFlexGrid.columnHeaders.columns[j].allowMerging = true;
                                            receivingReceiptItemFlexGrid.columnHeaders.setCellData(0, j, columnName);
                                        }
                                    }
                                }

                                if (i <= 10) {
                                    receivingReceiptItemFlexGrid.columnHeaders.columns[i].allowMerging = true;
                                    receivingReceiptItemFlexGrid.columnHeaders.setCellData(0, i, columnName);
                                }
                            }
                        </text>
                    }
                    else
                    {
                        <text>
                            var columnName = "";
                            for (var i = 0; i <= 18; i++) {
                                if (i == 0) {
                                    columnName = "PO No.";
                                } else if (i == 1) {
                                    columnName = "Barcode";
                                } else if (i == 2) {
                                    columnName = "SKU Code";
                                } else if (i == 3) {
                                    columnName = "Description";
                                } else if (i == 4) {
                                    columnName = "Particulars";
                                } else if (i == 5) {
                                    columnName = "Quantity";
                                } else if (i == 6) {
                                    columnName = "Unit";
                                } else if (i == 7) {
                                    columnName = "Cost";
                                } else if (i == 8) {
                                    columnName = "Amount";
                                } else if (i == 9) {
                                    columnName = "Branch";
                                } else {
                                    if (i >= 10) {
                                        columnName = "VAT";
                                        for (var j = 10; j <= 12; j++) {
                                            receivingReceiptItemFlexGrid.columnHeaders.columns[j].allowMerging = true;
                                            receivingReceiptItemFlexGrid.columnHeaders.setCellData(0, j, columnName);
                                        }
                                    }

                                    if (i >= 13) {
                                        columnName = "WTAX";
                                        for (var j = 13; j <= 15; j++) {
                                            receivingReceiptItemFlexGrid.columnHeaders.columns[j].allowMerging = true;
                                            receivingReceiptItemFlexGrid.columnHeaders.setCellData(0, j, columnName);
                                        }
                                    }

                                    if (i >= 16) {
                                        columnName = "Basic Unit Conversion";
                                        for (var j = 16; j <= 18; j++) {
                                            receivingReceiptItemFlexGrid.columnHeaders.columns[j].allowMerging = true;
                                            receivingReceiptItemFlexGrid.columnHeaders.setCellData(0, j, columnName);
                                        }
                                    }
                                }

                                if (i <= 9) {
                                    receivingReceiptItemFlexGrid.columnHeaders.columns[i].allowMerging = true;
                                    receivingReceiptItemFlexGrid.columnHeaders.setCellData(0, i, columnName);
                                }
                            }
                        </text>
                    }
                }
            }

            updateReceivingReceiptItemNavigationButtons();

            btnReceivingReceiptItemMoveToFirstPageGrid.addEventListener('click', function () {
                receivingReceiptItemCollectionView.moveToFirstPage();
                updateReceivingReceiptItemNavigationButtons();
            });

            btnReceivingReceiptItemMoveToPreviousPageGrid.addEventListener('click', function () {
                receivingReceiptItemCollectionView.moveToPreviousPage();
                updateReceivingReceiptItemNavigationButtons();
            });

            btnReceivingReceiptItemMoveToNextPageGrid.addEventListener('click', function () {
                receivingReceiptItemCollectionView.moveToNextPage();
                updateReceivingReceiptItemNavigationButtons();
            });

            btnReceivingReceiptItemMoveToLastPageGrid.addEventListener('click', function () {
                receivingReceiptItemCollectionView.moveToLastPage();
                updateReceivingReceiptItemNavigationButtons();
            });
        }

        // ================================================
        // Update Receiving Receipt Item Navigation Buttons
        // ================================================
        function updateReceivingReceiptItemNavigationButtons() {
            if (receivingReceiptItemCollectionView.pageSize <= 0) {
                document.getElementById('receivingReceiptItemNavigationPageGrid').style.display = 'none';
                return;
            }
            document.getElementById('receivingReceiptItemNavigationPageGrid').style.display = 'block';
            if (receivingReceiptItemCollectionView.pageIndex === 0) {
                btnReceivingReceiptItemMoveToFirstPageGrid.setAttribute('disabled', 'disabled');
                btnReceivingReceiptItemMoveToPreviousPageGrid.setAttribute('disabled', 'disabled');
                btnReceivingReceiptItemMoveToNextPageGrid.removeAttribute('disabled');
                btnReceivingReceiptItemMoveToLastPageGrid.removeAttribute('disabled');
            } else if (receivingReceiptItemCollectionView.pageIndex === (receivingReceiptItemCollectionView.pageCount - 1)) {
                btnReceivingReceiptItemMoveToFirstPageGrid.removeAttribute('disabled');
                btnReceivingReceiptItemMoveToPreviousPageGrid.removeAttribute('disabled');
                btnReceivingReceiptItemMoveToNextPageGrid.setAttribute('disabled', 'disabled');
                btnReceivingReceiptItemMoveToLastPageGrid.setAttribute('disabled', 'disabled');
            } else {
                btnReceivingReceiptItemMoveToFirstPageGrid.removeAttribute('disabled');
                btnReceivingReceiptItemMoveToPreviousPageGrid.removeAttribute('disabled');
                btnReceivingReceiptItemMoveToNextPageGrid.removeAttribute('disabled');
                btnReceivingReceiptItemMoveToLastPageGrid.removeAttribute('disabled');
            }
            btnReceivingReceiptItemCurrentPageGrid.innerHTML = (receivingReceiptItemCollectionView.pageIndex + 1) + ' / ' + receivingReceiptItemCollectionView.pageCount;
        }

        // ========================================
        // Refresh Receiving Receipt Item Flex Grid
        // ========================================
        function refreshReceivingReceiptFlexGrid() {
            receivingReceiptItemCollectionView = new wijmo.collections.CollectionView(getRecevingReceiptItemData());
            receivingReceiptItemCollectionView.canFilter = true;
            receivingReceiptItemCollectionView.pageSize = cboReceivingReceiptItemShowNumberOfRows.selectedValue;

            var filterText = '';
            $('#inpReceivingReceiptItemSearchFilter').keyup(function () {
                filterText = this.value.toLowerCase();
                receivingReceiptItemCollectionView.refresh();
            });

            receivingReceiptItemCollectionView.filter = function (item) {
                return !filterText || (item.PONumber.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.ItemCode.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.ItemDescription.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Particulars.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Unit.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Branch.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.VAT.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.WTAX.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.BaseUnit.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.ItemManualArticleOldCode.toLowerCase().indexOf(filterText) > -1);
            }

            receivingReceiptItemCollectionView.collectionChanged.addHandler(function (sender, args) {
                updateReceivingReceiptItemNavigationButtons();
            });

            receivingReceiptItemFlexGrid.itemsSource = receivingReceiptItemCollectionView;
            receivingReceiptItemFlexGrid.trackChanges = true;
        }

        // ==========================================
        // Create Receiving Receipt Item Combo Branch
        // ==========================================
        function createCboReceivingReceiptItemBranch(branchIdSelectedValue, POIdSelectedValue, ItemIdSelectedValue, VATIdSelectedValue, WTAXSelectedValue) {
            var branchesObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/receivingReceiptItem/dropdown/list/branch',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    var disabled = true;
                    document.getElementById("btnReceivingReceiptItemSave").disabled = true;

                    if (results.length > 0) {
                        disabled = false;
                        document.getElementById("btnReceivingReceiptItemSave").disabled = false;

                        for (i = 0; i < results.length; i++) {
                            branchesObservableArray.push({
                                Id: results[i]["Id"],
                                Branch: results[i]["Branch"]
                            });
                        }
                    }

                    cboReceivingReceiptItemBranch.dispose();
                    cboReceivingReceiptItemBranch = new wijmo.input.ComboBox('#cboReceivingReceiptItemBranch', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: branchesObservableArray,
                        displayMemberPath: "Branch",
                        selectedValuePath: "Id",
                        selectedValue: branchIdSelectedValue
                    });

                    createCboReceivingReceiptItemPONumber(POIdSelectedValue, ItemIdSelectedValue, VATIdSelectedValue, WTAXSelectedValue);
                }
            });
        }

        // =============================================
        // Create Receiving Receipt Item Combo PO Number
        // =============================================
        function createCboReceivingReceiptItemPONumber(POIdSelectedValue, ItemIdSelectedValue, VATIdSelectedValue, WTAXSelectedValue) {
            var purchaseOrderObservableArray = new wijmo.collections.ObservableArray();
            if (cboReceivingReceiptSupplier.selectedValue) {
                $.ajax({
                    url: '/api/receivingReceiptItem/dropdown/list/purchaseOrder/' + cboReceivingReceiptSupplier.selectedValue,
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    success: function (results) {
                        var disabled = true;

                        if (results.length > 0) {
                            disabled = false;
                            if (!document.getElementById("btnReceivingReceiptItemSave").disabled) {
                                document.getElementById("btnReceivingReceiptItemSave").disabled = false;
                            }

                            for (i = 0; i < results.length; i++) {
                                purchaseOrderObservableArray.push({
                                    Id: results[i]["Id"],
                                    PONumber: results[i]["PONumber"],
                                    PODate: results[i]["PODate"],
                                    PODetails: results[i]["PONumber"] + " (" + (results[i]["PODate"]).replace(/\//g, '-') + ")"
                                });
                            }
                        } else {
                            document.getElementById("btnReceivingReceiptItemSave").disabled = true;
                        }

                        cboReceivingReceiptItemPONumber.dispose();
                        cboReceivingReceiptItemPONumber = new wijmo.input.ComboBox('#cboReceivingReceiptItemPONumber', {
                            disabled: disabled,
                            isEditable: false,
                            itemsSource: purchaseOrderObservableArray,
                            displayMemberPath: "PODetails",
                            selectedValuePath: "Id",
                            selectedValue: POIdSelectedValue,
                            onSelectedIndexChanged: function () {
                                createCboReceivingReceiptItem(ItemIdSelectedValue, VATIdSelectedValue, WTAXSelectedValue);
                            }
                        });

                        createCboReceivingReceiptItem(ItemIdSelectedValue, VATIdSelectedValue, WTAXSelectedValue);
                    }
                });
            } else {
                document.getElementById("btnReceivingReceiptItemSave").disabled = true;

                cboReceivingReceiptItemPONumber.dispose();
                cboReceivingReceiptItemPONumber = new wijmo.input.ComboBox('#cboReceivingReceiptItemPONumber', {
                    disabled: true,
                    isEditable: false,
                    itemsSource: purchaseOrderObservableArray
                });

                createCboReceivingReceiptItem(ItemIdSelectedValue, VATIdSelectedValue, WTAXSelectedValue);
            }
        }

        // ========================================
        // Create Receiving Receipt Item Combo Item
        // ========================================
        function createCboReceivingReceiptItem(ItemIdSelectedValue, VATIdSelectedValue, WTAXSelectedValue) {
            var purchaseOrderItemsObservableArray = new wijmo.collections.ObservableArray();
            if (cboReceivingReceiptItemPONumber.selectedValue != null) {
                $.ajax({
                    url: '/api/receivingReceiptItem/dropdown/list/item/' + cboReceivingReceiptItemPONumber.selectedValue,
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    success: function (results) {
                        var disabled = true;

                        if (results.length > 0) {
                            disabled = false;
                            if (!document.getElementById("btnReceivingReceiptItemSave").disabled) {
                                document.getElementById("btnReceivingReceiptItemSave").disabled = false;
                            }

                            for (i = 0; i < results.length; i++) {
                                purchaseOrderItemsObservableArray.push({
                                    POId: results[i]["POId"],
                                    ItemId: results[i]["ItemId"],
                                    ItemCode: results[i]["ItemCode"],
                                    ItemDescription: results[i]["ItemDescription"],
                                    UnitId: results[i]["UnitId"],
                                    Unit: results[i]["Unit"],
                                    Quantity: results[i]["Quantity"],
                                    Cost: results[i]["Cost"],
                                    Amount: results[i]["Amount"],
                                    VATId: results[i]["ItemVATId"],
                                    WTAXId: results[i]["ItemWTAXId"]
                                });
                            }
                        } else {
                            document.getElementById("btnReceivingReceiptItemSave").disabled = true;
                        }

                        cboReceivingReceiptItemCode.dispose();
                        cboReceivingReceiptItemCode = new wijmo.input.ComboBox('#cboReceivingReceiptItemCode', {
                            disabled: disabled,
                            isEditable: false,
                            itemsSource: purchaseOrderItemsObservableArray,
                            displayMemberPath: "ItemCode",
                            selectedValuePath: "ItemId",
                            selectedValue: ItemIdSelectedValue,
                            onSelectedIndexChanged: function () {
                                cboReceivingReceiptItemDescription.selectedValue = this.selectedValue;
                            }
                        });

                        cboReceivingReceiptItemDescription.dispose();
                        cboReceivingReceiptItemDescription = new wijmo.input.ComboBox('#cboReceivingReceiptItemDescription', {
                            disabled: disabled,
                            isEditable: false,
                            itemsSource: purchaseOrderItemsObservableArray,
                            displayMemberPath: "ItemDescription",
                            selectedValuePath: "ItemId",
                            selectedValue: ItemIdSelectedValue,
                            onSelectedIndexChanged: function () {
                                cboReceivingReceiptItemCode.selectedValue = this.selectedValue;

                                document.getElementById('inpReceivingReceiptItemCost').value = formatDecimalValues(this.selectedItem["Cost"]);
                                computeAmount();

                                createCboReceivingReceiptItemUnit(VATIdSelectedValue, WTAXSelectedValue);
                            }
                        });

                        if (receivingReceiptItemId == 0) {
                            if (cboReceivingReceiptItemCode.selectedValue != null && cboReceivingReceiptItemDescription.selectedValue != null) {
                                document.getElementById('inpReceivingReceiptItemCost').value = formatDecimalValues(cboReceivingReceiptItemDescription.selectedItem["Cost"]);
                                computeAmount();
                            } else {
                                document.getElementById('inpReceivingReceiptItemCost').value = formatDecimalValues(0);
                                computeAmount();
                            }
                        }

                        createCboReceivingReceiptItemUnit(VATIdSelectedValue, WTAXSelectedValue);
                    }
                });
            } else {
                cboReceivingReceiptItemCode.dispose();
                cboReceivingReceiptItemCode = new wijmo.input.ComboBox('#cboReceivingReceiptItemCode', {
                    disabled: true,
                    isEditable: false,
                    itemsSource: purchaseOrderItemsObservableArray,
                });

                cboReceivingReceiptItemDescription.dispose();
                cboReceivingReceiptItemDescription = new wijmo.input.ComboBox('#cboReceivingReceiptItemDescription', {
                    disabled: true,
                    isEditable: false,
                    itemsSource: purchaseOrderItemsObservableArray,
                });

                document.getElementById('inpReceivingReceiptItemCost').value = formatDecimalValues(0);
                computeAmount();

                createCboReceivingReceiptItemUnit(VATIdSelectedValue, WTAXSelectedValue);
            }
        }

        // =============================================
        // Create Receiving Receipt Item Combo Item Unit
        // =============================================
        function createCboReceivingReceiptItemUnit(VATIdSelectedValue, WTAXSelectedValue) {
            var unitsObservableArray = new wijmo.collections.ObservableArray();
            if (cboReceivingReceiptItemCode.selectedValue != null && cboReceivingReceiptItemDescription.selectedValue != null) {
                $.ajax({
                    url: '/api/receivingReceiptItem/dropdown/list/itemUnit/' + cboReceivingReceiptItemDescription.selectedValue,
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    success: function (results) {
                        var disabled = true;

                        if (results.length > 0) {
                            disabled = false;
                            if (!document.getElementById("btnReceivingReceiptItemSave").disabled) {
                                document.getElementById("btnReceivingReceiptItemSave").disabled = false;
                            }

                            for (i = 0; i < results.length; i++) {
                                unitsObservableArray.push({
                                    UnitId: results[i]["UnitId"],
                                    Unit: results[i]["Unit"]
                                });
                            }
                        } else {
                            document.getElementById("btnReceivingReceiptItemSave").disabled = true;
                        }

                        cboReceivingReceiptItemUnit.dispose();
                        cboReceivingReceiptItemUnit = new wijmo.input.ComboBox('#cboReceivingReceiptItemUnit', {
                            disabled: disabled,
                            isEditable: false,
                            itemsSource: unitsObservableArray,
                            displayMemberPath: "Unit",
                            selectedValuePath: "UnitId"
                        });

                        createCboReceivingReceiptItemTax(VATIdSelectedValue, WTAXSelectedValue);
                    }
                });
            } else {
                document.getElementById("btnReceivingReceiptItemSave").disabled = true;

                cboReceivingReceiptItemUnit.dispose();
                cboReceivingReceiptItemUnit = new wijmo.input.ComboBox('#cboReceivingReceiptItemUnit', {
                    disabled: true,
                    isEditable: false,
                    itemsSource: unitsObservableArray
                });

                createCboReceivingReceiptItemTax(VATIdSelectedValue, WTAXSelectedValue);
            }
        }

        // ============================================
        // Create Receiving Receipt Item Combo Item Tax
        // ============================================
        function createCboReceivingReceiptItemTax(VATIdSelectedValue, WTAXSelectedValue) {
            var taxTypesObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/receivingReceiptItem/dropdown/list/TAX',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    var disabled = true;

                    if (results.length > 0) {
                        disabled = false;
                        if (!document.getElementById("btnReceivingReceiptItemSave").disabled) {
                            document.getElementById("btnReceivingReceiptItemSave").disabled = false;
                        }

                        for (i = 0; i < results.length; i++) {
                            taxTypesObservableArray.push({
                                Id: results[i]["Id"],
                                TaxType: results[i]["TaxType"],
                                TaxRate: results[i]["TaxRate"],
                                IsInclusive: results[i]["IsInclusive"],
                            });
                        }
                    } else {
                        document.getElementById("btnReceivingReceiptItemSave").disabled = true;
                    }

                    var VATIdValue = VATIdSelectedValue;
                    var WTAXValue = WTAXSelectedValue;

                    if (receivingReceiptItemId == 0) {
                        if (cboReceivingReceiptItemDescription.selectedValue != null) {
                            VATIdValue = cboReceivingReceiptItemDescription.selectedItem["VATId"];
                            WTAXValue = cboReceivingReceiptItemDescription.selectedItem["WTAXId"];
                        }
                    }

                    cboReceivingReceiptItemVAT.dispose();
                    cboReceivingReceiptItemVAT = new wijmo.input.ComboBox('#cboReceivingReceiptItemVAT', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: taxTypesObservableArray,
                        displayMemberPath: "TaxType",
                        selectedValuePath: "Id",
                        selectedValue: VATIdValue,
                        onSelectedIndexChanged: function () {
                            document.getElementById('inpReceivingReceiptItemVATRate').value = formatDecimalValues(this.selectedItem["TaxRate"]);
                            computeTAX();
                        }
                    });

                    cboReceivingReceiptItemWTAX.dispose();
                    cboReceivingReceiptItemWTAX = new wijmo.input.ComboBox('#cboReceivingReceiptItemWTAX', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: taxTypesObservableArray,
                        displayMemberPath: "TaxType",
                        selectedValuePath: "Id",
                        selectedValue: WTAXValue,
                        onSelectedIndexChanged: function () {
                            document.getElementById('inpReceivingReceiptItemWTAXRate').value = formatDecimalValues(this.selectedItem["TaxRate"]);
                            computeTAX();
                        }
                    });

                    if (cboReceivingReceiptItemVAT.selectedValue != null && cboReceivingReceiptItemWTAX.selectedValue != null) {
                        document.getElementById('inpReceivingReceiptItemVATRate').value = formatDecimalValues(cboReceivingReceiptItemVAT.selectedItem["TaxRate"]);
                        document.getElementById('inpReceivingReceiptItemWTAXRate').value = formatDecimalValues(cboReceivingReceiptItemWTAX.selectedItem["TaxRate"]);
                    } else {
                        document.getElementById('inpReceivingReceiptItemVATRate').value = formatDecimalValues(0);
                        document.getElementById('inpReceivingReceiptItemWTAXRate').value = formatDecimalValues(0);
                    }

                    computeTAX();

                    $("#receivingReceiptItemLoading").hide();
                    $("#receivingReceiptItemContent").show();
                }
            });
        }

        // ==========================
        // Add Receiving Receipt Item
        // ==========================
        function btnReceivingReceiptItemAddOnclick() {
            $('#RRLinesEdit').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById('btnReceivingReceiptItemSave').innerHTML = "<i class='fa fa-save'></i> Save";
            $("#btnReceivingReceiptItemSave").prop("disabled", true);
            $("#btnReceivingReceiptItemCloseModal").prop("disabled", false);

            $("#receivingReceiptItemLoading").show();
            document.getElementById("receivingReceiptItemLoading").innerHTML = 'Loading...';
            $("#receivingReceiptItemContent").hide();

            document.getElementById("receivingReceiptItemModalTitle").innerHTML = 'Add Receiving Receipt Item';

            $('.requiredRRLine').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            var cboRRHeaderBranchId = cboReceivingReceiptBranch.selectedValue;
            createCboReceivingReceiptItemBranch(cboRRHeaderBranchId, 0, 0, 0, 0);
            receivingReceiptItemId = 0;
            document.getElementById('inpReceivingReceiptItemParticulars').value = "NA";
            document.getElementById('inpReceivingReceiptItemQuantity').value = formatDecimalValues(1);
            document.getElementById('inpReceivingReceiptItemCost').value = formatDecimalValues(0);
            document.getElementById('inpReceivingReceiptItemAmount').value = formatDecimalValues(0);
            document.getElementById('inpReceivingReceiptItemVATRate').value = formatDecimalValues(0);
            document.getElementById('inpReceivingReceiptItemVATAmount').value = formatDecimalValues(0);
            document.getElementById('inpReceivingReceiptItemWTAXRate').value = formatDecimalValues(0);
            document.getElementById('inpReceivingReceiptItemWTAXAmount').value = formatDecimalValues(0);
        }

        // ===========================
        // Edit Receiving Receipt Item
        // ===========================
        function btnReceivingReceiptItemEditOnclick() {
            $('#RRLinesEdit').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById('btnReceivingReceiptItemSave').innerHTML = "<i class='fa fa-save'></i> Save";
            $("#btnReceivingReceiptItemSave").prop("disabled", true);
            $("#btnReceivingReceiptItemCloseModal").prop("disabled", false);

            $("#receivingReceiptItemLoading").show();
            document.getElementById("receivingReceiptItemLoading").innerHTML = 'Loading...';
            $("#receivingReceiptItemContent").hide();

            document.getElementById("receivingReceiptItemModalTitle").innerHTML = 'Edit Receiving Receipt Item';

            $('.requiredRRLine').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            receivingReceiptItemCollectionView.editItem(receivingReceiptItemCollectionView.currentItem);
            var item = receivingReceiptItemCollectionView.currentEditItem;

            createCboReceivingReceiptItemBranch(item.BranchId, item.POId, item.ItemId, item.VATId, item.WTAXId);
            receivingReceiptItemId = item.Id;
            document.getElementById('inpReceivingReceiptItemParticulars').value = "NA";
            document.getElementById('inpReceivingReceiptItemQuantity').value = formatDecimalValues(item.Quantity);
            document.getElementById('inpReceivingReceiptItemCost').value = formatDecimalValues(item.Cost);
            document.getElementById('inpReceivingReceiptItemAmount').value = formatDecimalValues(item.Amount);
            document.getElementById('inpReceivingReceiptItemVATRate').value = formatDecimalValues(item.VATRate);
            document.getElementById('inpReceivingReceiptItemVATAmount').value = formatDecimalValues(item.VATAmount);
            document.getElementById('inpReceivingReceiptItemWTAXRate').value = formatDecimalValues(item.WTAXRate);
            document.getElementById('inpReceivingReceiptItemWTAXAmount').value = formatDecimalValues(item.WTAXAmount);
        }

        // ===========================
        // Save Receiving Receipt Item
        // ===========================
        function btnReceivingReceiptItemSaveOnclick() {
            var receivingReceiptItemObject = new Object();
            var RRId = getURLParameterValue('id');

            receivingReceiptItemObject.POId = cboReceivingReceiptItemPONumber.selectedValue;
            receivingReceiptItemObject.ItemId = cboReceivingReceiptItemDescription.selectedValue;
            receivingReceiptItemObject.Particulars = document.getElementById('inpReceivingReceiptItemParticulars').value;
            receivingReceiptItemObject.UnitId = cboReceivingReceiptItemUnit.selectedValue;
            receivingReceiptItemObject.Quantity = document.getElementById('inpReceivingReceiptItemQuantity').value;
            receivingReceiptItemObject.Cost = document.getElementById('inpReceivingReceiptItemCost').value;
            receivingReceiptItemObject.Amount = document.getElementById('inpReceivingReceiptItemAmount').value;
            receivingReceiptItemObject.VATId = cboReceivingReceiptItemVAT.selectedValue;
            receivingReceiptItemObject.VATPercentage = document.getElementById('inpReceivingReceiptItemVATRate').value;
            receivingReceiptItemObject.VATAmount = document.getElementById('inpReceivingReceiptItemVATAmount').value;
            receivingReceiptItemObject.WTAXId = cboReceivingReceiptItemWTAX.selectedValue;
            receivingReceiptItemObject.WTAXPercentage = document.getElementById('inpReceivingReceiptItemWTAXRate').value;
            receivingReceiptItemObject.WTAXAmount = document.getElementById('inpReceivingReceiptItemWTAXAmount').value;
            receivingReceiptItemObject.BranchId = cboReceivingReceiptItemBranch.selectedValue;
            var receivingReceiptItemData = JSON.stringify(receivingReceiptItemObject);

            var isValid = true;
            $('.requiredRRLine').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                }
                else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            if (isValid) {
                document.getElementById('btnReceivingReceiptItemSave').innerHTML = "<i class='fa fa-save'></i> Saving...";
                $("#btnReceivingReceiptItemSave").prop("disabled", true);
                $("#btnReceivingReceiptItemCloseModal").prop("disabled", true);

                if (receivingReceiptItemId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/receivingReceiptItem/add/' + RRId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: receivingReceiptItemData,
                        statusCode: {
                            200: function () {
                                toastr.success("Save Successful");
                                $('#RRLinesEdit').modal('hide');
                                refreshReceivingReceiptFlexGrid();
                            },
                            404: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                                document.getElementById('btnReceivingReceiptItemSave').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#btnReceivingReceiptItemSave").prop("disabled", false);
                                $("#btnReceivingReceiptItemCloseModal").prop("disabled", false);
                            },
                            400: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                                document.getElementById('btnReceivingReceiptItemSave').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#btnReceivingReceiptItemSave").prop("disabled", false);
                                $("#btnReceivingReceiptItemCloseModal").prop("disabled", false);
                            },
                            500: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                                document.getElementById('btnReceivingReceiptItemSave').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#btnReceivingReceiptItemSave").prop("disabled", false);
                                $("#btnReceivingReceiptItemCloseModal").prop("disabled", false);
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/receivingReceiptItem/update/' + receivingReceiptItemId + '/' + RRId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: receivingReceiptItemData,
                        statusCode: {
                            200: function () {
                                toastr.success("Update Successful");
                                $('#RRLinesEdit').modal('hide');
                                refreshReceivingReceiptFlexGrid();
                            },
                            404: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                                document.getElementById('btnReceivingReceiptItemSave').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#btnReceivingReceiptItemSave").prop("disabled", false);
                                $("#btnReceivingReceiptItemCloseModal").prop("disabled", false);
                            },
                            400: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                                document.getElementById('btnReceivingReceiptItemSave').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#btnReceivingReceiptItemSave").prop("disabled", false);
                                $("#btnReceivingReceiptItemCloseModal").prop("disabled", false);
                            },
                            500: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                                document.getElementById('btnReceivingReceiptItemSave').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#btnReceivingReceiptItemSave").prop("disabled", false);
                                $("#btnReceivingReceiptItemCloseModal").prop("disabled", false);
                            }
                        }
                    });
                }
            } else {
                toastr.error("Invalid Entry");
            }
        }

        // =============================
        // Delete Receiving Receipt Item
        // =============================
        function btnReceivingReceiptItemDeleteOnclick() {
            $('#receivingReceiptItemDeleteConfirmModal').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById('btnReceivingReceiptItemDeleteConfirm').innerHTML = "<i class='fa fa-trash'></i> Delete";
            $("#btnReceivingReceiptItemDeleteConfirm").prop("disabled", false);
            $("#btnReceivingReceiptItemDeleteConfirmCloseModal").prop("disabled", false);
        }

        // =====================================
        // Delete Confirm Receiving Receipt Item
        // =====================================
        function btnReceivingReceiptItemDeleteConfirmOnclick() {
            document.getElementById('btnReceivingReceiptItemDeleteConfirm').innerHTML = "<i class='fa fa-trash'></i> Deleting...";
            $("#btnReceivingReceiptItemDeleteConfirm").prop("disabled", true);
            $("#btnReceivingReceiptItemDeleteConfirmCloseModal").prop("disabled", true);

            receivingReceiptItemCollectionView.editItem(receivingReceiptItemCollectionView.currentItem);
            var item = receivingReceiptItemCollectionView.currentEditItem;
            var RRId = getURLParameterValue('id');

            $.ajax({
                url: '/api/receivingReceiptItem/delete/' + item.Id + '/' + RRId,
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Delete Successful");
                        $('#receivingReceiptItemDeleteConfirmModal').modal('hide');
                        refreshReceivingReceiptFlexGrid();
                    },
                    404: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                        document.getElementById('btnReceivingReceiptItemDeleteConfirm').innerHTML = "<i class='fa fa-tash'></i> Delete";
                        $("#btnReceivingReceiptItemDeleteConfirm").prop("disabled", false);
                        $("#btnReceivingReceiptItemDeleteConfirmCloseModal").prop("disabled", false);
                    },
                    400: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                        document.getElementById('btnReceivingReceiptItemDeleteConfirm').innerHTML = "<i class='fa fa-tash'></i> Delete";
                        $("#btnReceivingReceiptItemDeleteConfirm").prop("disabled", false);
                        $("#btnReceivingReceiptItemDeleteConfirmCloseModal").prop("disabled", false);
                    },
                    500: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                        document.getElementById('btnReceivingReceiptItemDeleteConfirm').innerHTML = "<i class='fa fa-tash'></i> Delete";
                        $("#btnReceivingReceiptItemDeleteConfirm").prop("disabled", false);
                        $("#btnReceivingReceiptItemDeleteConfirmCloseModal").prop("disabled", false);
                    }
                }
            });
        }

        // ========================
        // Compute Amount and Taxes
        // ========================
        $('#inpReceivingReceiptItemQuantity').keyup(function () { computeAmount(); });
        $('#inpReceivingReceiptItemCost').keyup(function () { computeAmount(); });
        function computeAmount() {
            var quantity = parseFloat(document.getElementById('inpReceivingReceiptItemQuantity').value.replace(/\,/g, ''));
            var cost = parseFloat(document.getElementById('inpReceivingReceiptItemCost').value.replace(/\,/g, ''));

            var amount = cost * quantity;

            var WTAXAmount = parseFloat(document.getElementById('inpReceivingReceiptItemWTAXAmount').value.replace(/\,/g, ''));

            document.getElementById('inpReceivingReceiptItemAmount').value = formatDecimalValues(amount - WTAXAmount);
        }

        // ===========
        // Compute Tax
        // ===========
        function computeTAX() {
            var quantity = parseFloat(document.getElementById('inpReceivingReceiptItemQuantity').value.replace(/\,/g, ''));
            var cost = parseFloat(document.getElementById('inpReceivingReceiptItemCost').value.replace(/\,/g, ''));
            var amount = cost * quantity;

            var VATRate = parseFloat(document.getElementById('inpReceivingReceiptItemVATRate').value.replace(/\,/g, ''));
            var WTAXRate = parseFloat(document.getElementById('inpReceivingReceiptItemWTAXRate').value.replace(/\,/g, ''));

            var VATAmount = amount * (VATRate / 100);
            if (cboReceivingReceiptItemVAT.selectedItem["IsInclusive"]) {
                VATAmount = amount / (1 + (VATRate / 100)) * (VATRate / 100);
            }

            var WTAXAmount = amount * (WTAXRate / 100);
            if (cboReceivingReceiptItemWTAX.selectedItem["IsInclusive"]) {
                WTAXAmount = amount / (1 + (WTAXRate / 100)) * (WTAXRate / 100);
            }

            document.getElementById('inpReceivingReceiptItemVATAmount').value = formatDecimalValues(VATAmount);
            document.getElementById('inpReceivingReceiptItemWTAXAmount').value = formatDecimalValues(WTAXAmount);

            document.getElementById('inpReceivingReceiptItemAmount').value = formatDecimalValues(amount - WTAXAmount);
        }

        // =====================
        // Purchase Order Status
        // =====================
        function btnReceivingReceiptPOOnclick() {
            $('#POStatus').modal({
                show: true,
                backdrop: 'static'
            });

            $('#purchaseOrderStatusLoading').show();
            document.getElementById("purchaseOrderStatusLoading").innerHTML = "Loading...";
            $('#purchaseOrderStatusContent').hide();
            $('#btnPurchaseOrderStatusApplyPickedItems').prop("disabled", true);

            setTimeout(function () {
                createCboPurchaseOrderStatusPONumberOnclick();
            }, 500);
        }

        // ============================================
        // Create Purchase Order Status Combo PO Number
        // ============================================
        function createCboPurchaseOrderStatusPONumberOnclick() {
            var purchaseOrdertatusObservableArray = new wijmo.collections.ObservableArray();
            var supplierId = cboReceivingReceiptSupplier.selectedValue;
            $.ajax({
                url: '/api/receivingReceiptItem/dropdown/list/purchaseOrder/' + supplierId,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            purchaseOrdertatusObservableArray.push({
                                Id: results[i]["Id"],
                                PONumber: results[i]["PONumber"],
                                PODate: results[i]["PODate"],
                                PODetails: results[i]["PONumber"] + " (" + (results[i]["PODate"]).replace(/\//g, '-') + ")"
                            });
                        }
                    }

                    var disabled = true;
                    if (results.length > 0) {
                        disabled = false;
                    }

                    cboPurchaseOrderStatusPONumber.dispose();
                    cboPurchaseOrderStatusPONumber = new wijmo.input.ComboBox('#cboPurchaseOrderStatusPONumber', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: purchaseOrdertatusObservableArray,
                        displayMemberPath: "PODetails",
                        selectedValuePath: "Id",
                        onSelectedIndexChanged: function () {
                            createPurchaseOrderStatusFlexGrid();
                        }
                    });

                    setTimeout(function () { createCboPurchaseOrderStatusBranchOnclick(); }, 1000);
                }
            });
        }

        // =========================================
        // Create Purchase Order Status Combo Branch
        // =========================================
        function createCboPurchaseOrderStatusBranchOnclick() {
            var branchObservableArray = new wijmo.collections.ObservableArray();
            var cboRRHeaderBranchId = cboReceivingReceiptBranch.selectedValue;
            $.ajax({
                url: '/api/receivingReceiptItem/dropdown/list/branch',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            branchObservableArray.push({
                                Id: results[i]["Id"],
                                Branch: results[i]["Branch"]
                            });
                        }
                    }

                    var disabled = true;
                    if (results.length > 0) {
                        disabled = false;
                    }

                    cboPurchaseOrderStatusReceivedToBranch.dispose();
                    cboPurchaseOrderStatusReceivedToBranch = new wijmo.input.ComboBox('#cboPurchaseOrderStatusReceivedToBranch', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: branchObservableArray,
                        displayMemberPath: "Branch",
                        selectedValuePath: "Id",
                        selectedValue: cboRRHeaderBranchId
                    });

                    setTimeout(function () { createPurchaseOrderStatusFlexGrid(); }, 1000);
                }
            });
        }

        // ==============================
        // Get Purchase Order Status Data
        // ==============================
        function getPurchaseOrderStatusData() {
            var purchaseOrderStatusObservableArray = new wijmo.collections.ObservableArray;
            if (cboPurchaseOrderStatusPONumber.selectedValue != null) {

                var POId = cboPurchaseOrderStatusPONumber.selectedValue;
                $.ajax({
                    url: '/api/receivingReceiptItem/popUp/list/purchaseOrderStatus/' + POId,
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    data: {},
                    success: function (results) {
                        $('#btnPurchaseOrderStatusApplyPickedItems').prop("disabled", false);
                        if (results != null) {
                            if (results.length > 0) {
                                for (i = 0; i < results.length; i++) {
                                    purchaseOrderStatusObservableArray.push({
                                        POId: results[i]["POId"],
                                        ItemId: results[i]["ItemId"],
                                        ManualArticleOldCode: results[i]["ItemManualOldCode"],
                                        ItemCode: results[i]["ItemCode"],
                                        ItemDescription: results[i]["ItemDescription"],
                                        Particulars: results[i]["Particulars"],
                                        Amount: results[i]["Amount"],
                                        BaseUnitId: results[i]["BaseUnitId"],
                                        BaseUnit: results[i]["BaseUnit"],
                                        BaseQuantity: results[i]["BaseQuantity"],
                                        BaseQuantityDisplay: parseFloat(results[i]["BaseQuantity"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                        BaseCost: results[i]["BaseCost"],
                                        BaseCostDisplay: parseFloat(results[i]["BaseCost"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                        ReceivedQuantity: results[i]["ReceivedQuantity"],
                                        ReceivedQuantityDisplay: parseFloat(results[i]["ReceivedQuantity"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                        BalanceQuantity: results[i]["BalanceQuantity"],
                                        BalanceQuantityDisplay: parseFloat(results[i]["BalanceQuantity"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                        PickButton: "<button class='btn btn-primary btn-xs btn-block' onclick='btnPurchaseOrderStatusPickItemOnclick()'><i class='fa fa-hand-o-right'></i> Pick</button>",
                                        Balance: results[i]["BaseQuantity"] - results[i]["ReceivedQuantity"],
                                        BalanceDisplay: parseFloat(results[i]["BaseQuantity"] - results[i]["ReceivedQuantity"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                    });
                                }
                            } else {
                                $('#btnPurchaseOrderStatusApplyPickedItems').prop("disabled", true);
                            }
                        } else {
                            $('#btnPurchaseOrderStatusApplyPickedItems').prop("disabled", true);
                        }

                        $('#purchaseOrderStatusLoading').hide();
                        $('#purchaseOrderStatusContent').show();
                    }
                });
            } else {
                $('#btnPurchaseOrderStatusApplyPickedItems').prop("disabled", true);
                $('#purchaseOrderStatusLoading').hide();
                $('#purchaseOrderStatusContent').show();
            }

            return purchaseOrderStatusObservableArray;
        }

        // ======================================
        // Create Purchase Order Status Flex Grid
        // ======================================
        function createPurchaseOrderStatusFlexGrid() {
            purchaseOrderStatusCollectionView = new wijmo.collections.CollectionView(getPurchaseOrderStatusData());
            purchaseOrderStatusCollectionView.canFilter = true;
            purchaseOrderStatusCollectionView.pageSize = 10;

            var filterText = '';
            $('#inpPurchaseOrderStatusSearchFilter').keyup(function () {
                filterText = this.value.toLowerCase();
                purchaseOrderStatusCollectionView.refresh();
            });

            purchaseOrderStatusCollectionView.filter = function (item) {
                return !filterText || (item.ItemCode.toLowerCase().indexOf(filterText) > -1)
                    || (item.ManualArticleOldCode.toLowerCase().indexOf(filterText) > -1)
                    || (item.ItemDescription.toLowerCase().indexOf(filterText) > -1)
                    || (item.BaseUnit.toLowerCase().indexOf(filterText) > -1);
            }

            purchaseOrderStatusCollectionView.collectionChanged.addHandler(function (sender, args) {
                updatePurchaseOrderStatusNavigateButtons();
            });

            purchasrOrderStatusFlexGrid.dispose();
            purchasrOrderStatusFlexGrid = new wijmo.grid.FlexGrid('#purchasrOrderStatusFlexGrid');
            purchasrOrderStatusFlexGrid.initialize({
                columns: [
                    {
                        "header": "SKU",
                        "binding": "ManualArticleOldCode",
                        "allowSorting": true,
                        "width": "1*",
                        "isReadOnly": true,
                    },
                    {
                        "header": "Code",
                        "binding": "ItemCode",
                        "allowSorting": true,
                        "width": "1.5*",
                        "isReadOnly": true,
                    },
                    {
                        "header": "Description",
                        "binding": "ItemDescription",
                        "allowSorting": true,
                        "isReadOnly": true,
                        "width": "3*"
                    },
                    {
                        "header": "Unit",
                        "binding": "BaseUnit",
                        "allowSorting": true,
                        "isReadOnly": true,
                        "width": "0.7*"
                    },
                    {
                        "header": "Purchased",
                        "binding": "BaseQuantityDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "isReadOnly": true,
                        "width": "1*"
                    },
                    {
                        "header": "Received",
                        "binding": "ReceivedQuantityDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "isReadOnly": true,
                        "width": "1*",
                    },
                    {
                        "header": "Balance",
                        "binding": "BalanceQuantityDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "isReadOnly": true,
                        "width": "1*"
                    },
                    {
                        "header": "Pick",
                        "binding": "PickButton",
                        "width": 60,
                        "align": "center",
                        "isReadOnly": true,
                        "isContentHtml": true
                    },
                    {
                        "header": "Quantity",
                        "binding": "BalanceDisplay",
                        "allowSorting": true,
                        "width": "1*",
                        "align": "right",
                        "isReadOnly": true,
                        "isContentHtml": true
                    }
                ],
                autoGenerateColumns: false,
                itemsSource: purchaseOrderStatusCollectionView,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row,
            });

            purchasrOrderStatusFlexGrid.trackChanges = true;

            var hr = new wijmo.grid.Row();
            purchasrOrderStatusFlexGrid.allowMerging = wijmo.grid.AllowMerging.AllHeaders;
            purchasrOrderStatusFlexGrid.columnHeaders.rows.push(hr);
            purchasrOrderStatusFlexGrid.columnHeaders.rows[0].allowMerging = true;

            purchasrOrderStatusFlexGrid.columnHeaders.columns[0].allowMerging = true;
            purchasrOrderStatusFlexGrid.columnHeaders.setCellData(0, 0, 'SKU');

            purchasrOrderStatusFlexGrid.columnHeaders.columns[1].allowMerging = true;
            purchasrOrderStatusFlexGrid.columnHeaders.setCellData(0, 1, 'Code');

            purchasrOrderStatusFlexGrid.columnHeaders.columns[2].allowMerging = true;
            purchasrOrderStatusFlexGrid.columnHeaders.setCellData(0, 2, 'Description');

            purchasrOrderStatusFlexGrid.columnHeaders.columns[3].allowMerging = true;
            purchasrOrderStatusFlexGrid.columnHeaders.setCellData(0, 3, 'Unit');

            for (var columnQuantityTopAssigned = 4; columnQuantityTopAssigned <= 6; columnQuantityTopAssigned++) {
                purchasrOrderStatusFlexGrid.columnHeaders.setCellData(0, columnQuantityTopAssigned, 'Quantities');
            }

            purchasrOrderStatusFlexGrid.columnHeaders.columns[7].allowMerging = true;
            purchasrOrderStatusFlexGrid.columnHeaders.setCellData(0, 7, 'Pick');

            purchasrOrderStatusFlexGrid.columnHeaders.columns[8].allowMerging = true;
            purchasrOrderStatusFlexGrid.columnHeaders.setCellData(0, 8, 'Quantity');

            if (!isBtnPurchaseOrderStatusClicked) {
                updatePurchaseOrderStatusNavigateButtons();

                btnPurchaseOrderStatusMoveToFirstPageGrid.addEventListener('click', function () {
                    purchaseOrderStatusCollectionView.moveToFirstPage();
                    purchaseOrderStatusCurrentPageIndex = purchaseOrderStatusCollectionView.pageIndex + 1;
                    updatePurchaseOrderStatusNavigateButtons();
                });

                btnPurchaseOrderStatusMoveToPreviousPageGrid.addEventListener('click', function () {
                    purchaseOrderStatusCollectionView.moveToPreviousPage();
                    purchaseOrderStatusCurrentPageIndex = purchaseOrderStatusCollectionView.pageIndex + 1;
                    updatePurchaseOrderStatusNavigateButtons();
                });

                btnPurchaseOrderStatusMoveToNextPageGrid.addEventListener('click', function () {
                    purchaseOrderStatusCollectionView.moveToNextPage();
                    purchaseOrderStatusCurrentPageIndex = purchaseOrderStatusCollectionView.pageIndex + 1;
                    updatePurchaseOrderStatusNavigateButtons();
                });

                btnPurchaseOrderStatusMoveToLastPageGrid.addEventListener('click', function () {
                    purchaseOrderStatusCollectionView.moveToLastPage();
                    purchaseOrderStatusCurrentPageIndex = purchaseOrderStatusCollectionView.pageIndex + 1;
                    updatePurchaseOrderStatusNavigateButtons();
                });

                isBtnPurchaseOrderStatusClicked = true;
            }
        }

        // ===============================================
        // Update Purchase Order Status Navigation Buttons
        // ===============================================
        function updatePurchaseOrderStatusNavigateButtons() {
            if (purchaseOrderStatusCollectionView.pageSize <= 0) {
                document.getElementById('purchaseOrderStatusNavigationPageGrid').style.display = 'none';
                return;
            }
            document.getElementById('purchaseOrderStatusNavigationPageGrid').style.display = 'block';
            if (purchaseOrderStatusCollectionView.pageIndex === 0) {
                btnPurchaseOrderStatusMoveToFirstPageGrid.setAttribute('disabled', 'disabled');
                btnPurchaseOrderStatusMoveToPreviousPageGrid.setAttribute('disabled', 'disabled');
                btnPurchaseOrderStatusMoveToNextPageGrid.removeAttribute('disabled');
                btnPurchaseOrderStatusMoveToLastPageGrid.removeAttribute('disabled');
            } else if (purchaseOrderStatusCollectionView.pageIndex === (purchaseOrderStatusCollectionView.pageCount - 1)) {
                btnPurchaseOrderStatusMoveToFirstPageGrid.removeAttribute('disabled');
                btnPurchaseOrderStatusMoveToPreviousPageGrid.removeAttribute('disabled');
                btnPurchaseOrderStatusMoveToNextPageGrid.setAttribute('disabled', 'disabled');
                btnPurchaseOrderStatusMoveToLastPageGrid.setAttribute('disabled', 'disabled');
            } else {
                btnPurchaseOrderStatusMoveToFirstPageGrid.removeAttribute('disabled');
                btnPurchaseOrderStatusMoveToPreviousPageGrid.removeAttribute('disabled');
                btnPurchaseOrderStatusMoveToNextPageGrid.removeAttribute('disabled');
                btnPurchaseOrderStatusMoveToLastPageGrid.removeAttribute('disabled');
            }
            btnPurchaseOrderStatusCurrentPageGrid.innerHTML = (purchaseOrderStatusCollectionView.pageIndex + 1) + ' / ' + purchaseOrderStatusCollectionView.pageCount;
        }

        // ========================
        // Pick Purchase Order Item
        // ========================
        function btnPurchaseOrderStatusPickItemOnclick() {
            $('#poStatusPickedAmountModal').modal({
                show: true,
                backdrop: 'static'
            });

            $("#btnPurchaseOrderStatusPickedAmountContinue").prop("disabled", false);
            $("#btnPurchaseOrderStatusPickedAmountContinueCloseModal").prop("disabled", false);

            purchaseOrderStatusCollectionView.editItem(purchaseOrderStatusCollectionView.currentItem);
            var poStatusCollectionView = purchaseOrderStatusCollectionView.currentEditItem;
            var balance = poStatusCollectionView.BalanceQuantity;
            document.getElementById("inpPurchaseOrderStatusPickedItemQuantity").value = parseFloat(balance).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        }

        // ===================================================
        // Purchase Order Status Picked Item / Amount Continue
        // ===================================================
        function btnPurchaseOrderStatusPickedAmountContinueOnclick() {
            $("#btnPurchaseOrderStatusPickedAmountContinue").prop("disabled", true);
            $("#btnPurchaseOrderStatusPickedAmountContinueCloseModal").prop("disabled", true);

            var isValid = true;
            $('.requiredPickedAmount').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                } else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            if (isValid) {
                purchaseOrderStatusCollectionView.editItem(purchaseOrderStatusCollectionView.currentItem);
                var poStatusCollectionView = purchaseOrderStatusCollectionView.currentEditItem;
                var balance = document.getElementById("inpPurchaseOrderStatusPickedItemQuantity").value.split(",").join("");

                if (isNaN(balance)) {
                    toastr.error("Invalid Entry");

                    $("#btnPurchaseOrderStatusPickedAmountContinue").prop("disabled", false);
                    $("#btnPurchaseOrderStatusPickedAmountContinueCloseModal").prop("disabled", false);
                } else {
                    poStatusCollectionView.Balance = balance;
                    poStatusCollectionView.BalanceDisplay = parseFloat(balance).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                    purchaseOrderStatusCollectionView.refresh();
                    purchasrOrderStatusFlexGrid.refresh();

                    $('#poStatusPickedAmountModal').modal('hide');
                }
            } else {
                toastr.error("Invalid Entry");
            }
        }

        // ==============================
        // Apply Pick Purchase Order Item
        // ==============================
        function btnPurchaseOrderStatusApplyPickedItemsOnclick() {
            $('#applyAllConfirmPOStatus').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById('btnPurchaseOrderStatusApplyConfirm').innerHTML = "<i class='fa fa-check'></i> Apply";
            $("#btnPurchaseOrderStatusApplyConfirm").prop("disabled", false);
            $("#btnPurchaseOrderStatusApplyConfirmCloseModal").prop("disabled", false);
        }

        // ======================================
        // Apply Confirm Pick Purchase Order Item
        // ======================================
        function btnPurchaseOrderStatusApplyConfirmOnclick() {
            document.getElementById('btnPurchaseOrderStatusApplyConfirm').innerHTML = "<i class='fa fa-check'></i> Applying...";
            $("#btnPurchaseOrderStatusApplyConfirm").prop("disabled", true);
            $("#btnPurchaseOrderStatusApplyConfirmCloseModal").prop("disabled", true);

            var purchaseOrderArrays = new Array();

            purchaseOrderStatusCollectionView.moveToFirstPage();

            for (var p = 1; p <= purchaseOrderStatusCollectionView.pageCount; p++) {
                for (var i = 0; i < purchaseOrderStatusCollectionView.items.length; i++) {
                    var item = purchaseOrderStatusCollectionView.items[i];
                    if (item.Balance > 0) {
                        purchaseOrderArrays.push({
                            POId: item.POId,
                            Particulars: item.Particulars,
                            BranchId: cboPurchaseOrderStatusReceivedToBranch.selectedValue,
                            ItemId: item.ItemId,
                            Quantity: item.Balance,
                            BaseCost: item.BaseCost
                        });
                    }
                }

                purchaseOrderStatusCollectionView.moveToNextPage();
                if (p == purchaseOrderStatusCollectionView.pageCount) {
                    purchaseOrderStatusCollectionView.moveToPage(purchaseOrderStatusCurrentPageIndex - 1);
                }
            }

            var POItemObject = new Object();
            var POItemObjectData = JSON.stringify(purchaseOrderArrays);

            var RRId = getURLParameterValue('id');

            $.ajax({
                url: '/api/receivingReceiptItem/popUp/apply/purchaseOrderStatus/' + RRId,
                type: "POST",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: POItemObjectData,
                statusCode: {
                    200: function () {
                        toastr.success("Apply Successful");
                        $("#btnPurchaseOrderStatusApplyConfirm").prop("disabled", true);
                        $("#btnPurchaseOrderStatusApplyConfirmCloseModal").prop("disabled", true);

                        $('#applyAllConfirmPOStatus').modal('hide');
                        $('#POStatus').modal('hide');

                        refreshReceivingReceiptFlexGrid();
                    },
                    404: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                        $('#applyAllConfirmPOStatus').modal('hide');
                        $('#POStatus').modal('hide');
                        document.getElementById('btnPurchaseOrderStatusApplyConfirm').innerHTML = "<i class='fa fa-check'></i> Apply";
                        $("#btnPurchaseOrderStatusApplyConfirm").prop("disabled", false);
                        $("#btnPurchaseOrderStatusApplyConfirmCloseModal").prop("disabled", false);
                    },
                    400: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                        $('#applyAllConfirmPOStatus').modal('hide');
                        $('#POStatus').modal('hide');
                        document.getElementById('btnPurchaseOrderStatusApplyConfirm').innerHTML = "<i class='fa fa-check'></i> Apply";
                        $("#btnPurchaseOrderStatusApplyConfirm").prop("disabled", false);
                        $("#btnPurchaseOrderStatusApplyConfirmCloseModal").prop("disabled", false);
                    },
                    500: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                        $('#applyAllConfirmPOStatus').modal('hide');
                        $('#POStatus').modal('hide');
                        document.getElementById('btnPurchaseOrderStatusApplyConfirm').innerHTML = "<i class='fa fa-check'></i> Apply";
                        $("#btnPurchaseOrderStatusApplyConfirm").prop("disabled", false);
                        $("#btnPurchaseOrderStatusApplyConfirmCloseModal").prop("disabled", false);
                    }
                }
            });
        }

        // ==========================
        // Get Inventory Entries Data
        // ==========================
        function getInventoryEntriesData() {
            var RRId = getURLParameterValue('id');
            var inventoryObservableArray = new wijmo.collections.ObservableArray;

            $.ajax({
                url: '/api/inventory/receivingReceipt/list/' + RRId,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {

                            var InventoryDateResult = new Date(results[i]["InventoryDate"])
                            var InventoryDate = ('0' + (InventoryDateResult.getMonth() + 1)).slice(-2) + '-' + ('0' + InventoryDateResult.getDate()).slice(-2) + '-' + InventoryDateResult.getFullYear();

                            inventoryObservableArray.push({
                                Id: results[i]["Id"],
                                InventoryDate: InventoryDate,
                                Branch: results[i]["Branch"],
                                Article: results[i]["Article"],
                                Particulars: results[i]["Particulars"],
                                ArticleInventoryCode: results[i]["ArticleInventoryCode"],
                                Quantity: results[i]["Quantity"],
                                QuantityDisplay: parseFloat(results[i]["Quantity"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                ArticleUnit: results[i]["ArticleUnit"],
                                Amount: results[i]["Amount"],
                                AmountDisplay: parseFloat(results[i]["Amount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                            });
                        }
                    }

                    NProgress.done();
                }
            });

            return inventoryObservableArray;
        }

        // ==================================
        // Create Inventory Entries Flex Grid
        // ==================================
        function createInventoryEntriesFlexGrid() {
            inventoryCollectionView = new wijmo.collections.CollectionView(getInventoryEntriesData());
            inventoryCollectionView.canFilter = true;
            inventoryCollectionView.pageSize = cboInventoryEntriesShowNumberOfRows.selectedValue;

            var filterText = '';
            $('#inpInventoryEntriesSearchFilter').keyup(function () {
                filterText = this.value.toLowerCase();
                inventoryCollectionView.refresh();
            });

            inventoryCollectionView.filter = function (item) {
                return !filterText || (item.Branch.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Article.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Particulars.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.ArticleInventoryCode.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.ArticleUnit.toLowerCase().indexOf(filterText) > -1);
            }

            inventoryCollectionView.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsInventoryEntry();
            });

            inventoryEntriesFlexGrid = new wijmo.grid.FlexGrid('#inventoryEntriesFlexGrid');
            inventoryEntriesFlexGrid.initialize({
                columns: [
                    {
                        "header": "Date",
                        "binding": "InventoryDate",
                        "allowSorting": true,
                        "width": "1*"
                    },
                    {
                        "header": "Branch",
                        "binding": "Branch",
                        "allowSorting": true,
                        "width": "1.5*",
                    },
                    {
                        "header": "Item",
                        "binding": "Article",
                        "align": "left",
                        "allowSorting": true,
                        "width": "1.7*",
                    },
                    {
                        "header": "Particulars",
                        "binding": "Particulars",
                        "align": "left",
                        "allowSorting": true,
                        "width": "1.5*",
                    },
                    {
                        "header": "Inventory Code",
                        "binding": "ArticleInventoryCode",
                        "allowSorting": true,
                        "width": "1.3*",
                    },
                    {
                        "header": "Quantity",
                        "binding": "QuantityDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": "1*",
                    },
                    {
                        "header": "Unit",
                        "binding": "ArticleUnit",
                        "allowSorting": true,
                        "width": "1*",
                    },
                    {
                        "header": "Amount",
                        "binding": "AmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": "1*",
                    },
                ],
                autoGenerateColumns: false,
                itemsSource: inventoryCollectionView,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            inventoryEntriesFlexGrid.trackChanges = true;

            updateNavigateButtonsInventoryEntry();

            btnInventoryEntriesMoveToFirstPageGrid.addEventListener('click', function () {
                inventoryCollectionView.moveToFirstPage();
                updateNavigateButtonsInventoryEntry();
            });

            btnInventoryEntriesMoveToPreviousPageGrid.addEventListener('click', function () {
                inventoryCollectionView.moveToPreviousPage();
                updateNavigateButtonsInventoryEntry();
            });

            btnInventoryEntriesMoveToNextPageGrid.addEventListener('click', function () {
                inventoryCollectionView.moveToNextPage();
                updateNavigateButtonsInventoryEntry();
            });

            btnInventoryEntriesMoveToLastPageGrid.addEventListener('click', function () {
                inventoryCollectionView.moveToLastPage();
                updateNavigateButtonsInventoryEntry();
            });
        }

        // ===========================================
        // Update Enventory Entries Navigation Buttons
        // ===========================================
        function updateNavigateButtonsInventoryEntry() {
            if (inventoryCollectionView.pageSize <= 0) {
                document.getElementById('inventoryEntriesNavigationPageGrid').style.display = 'none';
                return;
            }
            document.getElementById('inventoryEntriesNavigationPageGrid').style.display = 'block';
            if (inventoryCollectionView.pageIndex === 0) {
                btnInventoryEntriesMoveToFirstPageGrid.setAttribute('disabled', 'disabled');
                btnInventoryEntriesMoveToPreviousPageGrid.setAttribute('disabled', 'disabled');
                btnInventoryEntriesMoveToNextPageGrid.removeAttribute('disabled');
                btnInventoryEntriesMoveToLastPageGrid.removeAttribute('disabled');
            } else if (inventoryCollectionView.pageIndex === (inventoryCollectionView.pageCount - 1)) {
                btnInventoryEntriesMoveToFirstPageGrid.removeAttribute('disabled');
                btnInventoryEntriesMoveToPreviousPageGrid.removeAttribute('disabled');
                btnInventoryEntriesMoveToNextPageGrid.setAttribute('disabled', 'disabled');
                btnInventoryEntriesMoveToLastPageGrid.setAttribute('disabled', 'disabled');
            } else {
                btnInventoryEntriesMoveToFirstPageGrid.removeAttribute('disabled');
                btnInventoryEntriesMoveToPreviousPageGrid.removeAttribute('disabled');
                btnInventoryEntriesMoveToNextPageGrid.removeAttribute('disabled');
                btnInventoryEntriesMoveToLastPageGrid.removeAttribute('disabled');
            }
            btnInventoryEntriesCurrentPageGrid.innerHTML = (inventoryCollectionView.pageIndex + 1) + ' / ' + inventoryCollectionView.pageCount;
        }

        // ===================================
        // Refresh Enventory Entries Flex Grid
        // ===================================
        function refreshInventoryEntriesFlexGrid() {
            inventoryCollectionView = new wijmo.collections.CollectionView(getInventoryEntriesData());
            inventoryCollectionView.canFilter = true;
            inventoryCollectionView.pageSize = cboInventoryEntriesShowNumberOfRows.selectedValue;

            var filterText = '';
            $('#inpInventoryEntriesSearchFilter').keyup(function () {
                filterText = this.value.toLowerCase();
                inventoryCollectionView.refresh();
            });

            inventoryCollectionView.filter = function (item) {
                return !filterText || (item.Branch.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Article.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Particulars.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.ArticleInventoryCode.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.ArticleUnit.toLowerCase().indexOf(filterText) > -1);
            }

            inventoryCollectionView.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsInventoryEntry();
            });

            inventoryEntriesFlexGrid.itemsSource = inventoryCollectionView;
            inventoryEntriesFlexGrid.trackChanges = true;
        }

        // ================
        // Get Journal Data
        // ================
        function getJournalData() {
            var journalsObservableArray = new wijmo.collections.ObservableArray;
            var RRId = getURLParameterValue('id');

            $.ajax({
                url: '/api/jounal/receivingReceipt/list/' + RRId,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    var totalDebitAmount = 0;
                    var totalCreditAmount = 0;

                    var variance = 0;

                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {

                            var journalDateResult = new Date(results[i]["JournalDate"])
                            var journalDate = ('0' + (journalDateResult.getMonth() + 1)).slice(-2) + '-' + ('0' + journalDateResult.getDate()).slice(-2) + '-' + journalDateResult.getFullYear();

                            journalsObservableArray.push({
                                Branch: results[i]["Branch"],
                                JournalDate: journalDate,
                                AccountCode: results[i]["AccountCode"],
                                Account: results[i]["Account"],
                                Article: results[i]["Article"],
                                DebitAmountDisplay: parseFloat(results[i]["DebitAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                CreditAmountDisplay: parseFloat(results[i]["CreditAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")
                            });

                            var debit = parseFloat(results[i]["DebitAmount"]);
                            var credit = parseFloat(results[i]["CreditAmount"]);

                            totalDebitAmount += debit;
                            totalCreditAmount += credit;
                        }

                        variance = totalDebitAmount - totalCreditAmount;
                    }

                    document.getElementById('inpJournalTotalDebit').value = parseFloat(Math.round(totalDebitAmount * 100) / 100).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                    document.getElementById('inpJournalTotalCredit').value = parseFloat(Math.round(totalCreditAmount * 100) / 100).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                    document.getElementById('inpJournalVariance').value = parseFloat(variance).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");

                    $("#journalLoading").hide();
                    $("#journalContent").show();
                }
            });

            return journalsObservableArray;
        }

        // ===============
        // Display Journal
        // ===============
        function btnReceivingReceiptJournalOnclick() {
            $('#journalEntryModal').modal({
                show: true,
                backdrop: 'static'
            });

            $("#journalLoading").show();
            document.getElementById("journalLoading").innerHTML = 'Loading...';
            $("#journalContent").hide();

            setTimeout(function () {
                createJournalFlexGrid();
            }, 500)
        }

        // ========================
        // Create Journal Flex Grid
        // ========================
        function createJournalFlexGrid() {
            journalCollectionView = new wijmo.collections.CollectionView(getJournalData());

            journalFlexGrid.dispose();
            journalFlexGrid = new wijmo.grid.FlexGrid('#journalFlexGrid');
            journalFlexGrid.initialize({
                columns: [
                    {
                        "header": "Branch",
                        "binding": "Branch",
                        "allowSorting": true,
                        "width": "2.5*"
                    },
                    {
                        "header": "Date",
                        "binding": "JournalDate",
                        "allowSorting": true,
                        "width": "1.5*"
                    },
                    {
                        "header": "Code",
                        "binding": "AccountCode",
                        "allowSorting": true,
                        "width": "1.8*"
                    },
                    {
                        "header": "Account",
                        "binding": "Account",
                        "allowSorting": true,
                        "width": "3*"
                    },
                    {
                        "header": "Article",
                        "binding": "Article",
                        "allowSorting": true,
                        "width": "3*"
                    },
                    {
                        "header": "Debit",
                        "binding": "DebitAmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": "2*",
                    },
                    {
                        "header": "Credit",
                        "binding": "CreditAmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": "2*"
                    }
                ],
                autoGenerateColumns: false,
                itemsSource: journalCollectionView,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            journalFlexGrid.trackChanges = true;
        }

        // ===============
        // Show Rows Table
        // ===============
        function createCboShowRows() {
            var rowsObservableArray = new wijmo.collections.ObservableArray();

            for (var i = 0; i <= 4; i++) {
                var rows = 0;
                var rowsString = "";

                if (i == 0) {
                    rows = 15;
                    rowsString = "Show 15 Rows";
                } else if (i == 1) {
                    rows = 50;
                    rowsString = "Show 50 Rows";
                } else if (i == 2) {
                    rows = 100;
                    rowsString = "Show 100 Rows";
                } else if (i == 3) {
                    rows = 150;
                    rowsString = "Show 150 Rows";
                } else {
                    rows = 200;
                    rowsString = "Show 200 Rows";
                }

                rowsObservableArray.push({
                    rowNumber: rows,
                    rowString: rowsString
                });
            }

            cboReceivingReceiptItemShowNumberOfRows.dispose();
            cboReceivingReceiptItemShowNumberOfRows = new wijmo.input.ComboBox('#cboReceivingReceiptItemShowNumberOfRows', {
                isEditable: false,
                itemsSource: rowsObservableArray,
                displayMemberPath: "rowString",
                selectedValuePath: "rowNumber",
                selectedValue: 50,
                onSelectedIndexChanged: function () {
                    NProgress.start();

                    setTimeout(function () {
                        var numberOfRows = cboReceivingReceiptItemShowNumberOfRows.selectedValue;
                        receivingReceiptItemCollectionView.pageSize = parseInt(numberOfRows);
                        receivingReceiptItemCollectionView.refresh();
                        receivingReceiptItemFlexGrid.refresh();

                        NProgress.done();
                    }, 300);
                }
            });

            cboInventoryEntriesShowNumberOfRows.dispose();
            cboInventoryEntriesShowNumberOfRows = new wijmo.input.ComboBox('#cboInventoryEntriesShowNumberOfRows', {
                isEditable: false,
                itemsSource: rowsObservableArray,
                displayMemberPath: "rowString",
                selectedValuePath: "rowNumber",
                selectedValue: 50,
                onSelectedIndexChanged: function () {
                    NProgress.start();

                    setTimeout(function () {
                        var numberOfRows = cboInventoryEntriesShowNumberOfRows.selectedValue;
                        inventoryCollectionView.pageSize = parseInt(numberOfRows);
                        inventoryCollectionView.refresh();
                        inventoryEntriesFlexGrid.refresh();

                        NProgress.done();
                    }, 300);
                }
            });
        }

        // ====
        // Tabs
        // ====
        $('#receivingReceiptItemTab').click(function () {
            NProgress.start();

            $('#receivingReceiptItemTabHref').show();
            $('#receivingReceiptInventoryEntriesTabHref').hide();

            refreshReceivingReceiptFlexGrid();
        });
        $('#receivingReceiptInventoryEntriesTab').click(function () {
            NProgress.start();

            $('#receivingReceiptItemTabHref').hide();
            $('#receivingReceiptInventoryEntriesTabHref').show();

            refreshInventoryEntriesFlexGrid();
        });

        // ================
        // On Load Function
        // ================
        $(document).ready(function () {
            createCboReceivingReceiptDetailBranch();

            $('#Item').show();
            $('#InventoryEntry').hide();

            $(document).on('show.bs.modal', '.modal', function (event) {
                var zIndex = 1040 + (10 * $('.modal:visible').length);
                $(this).css('z-index', zIndex);
                setTimeout(function () {
                    $('.modal-backdrop').not('.modal-stack').css('z-index', zIndex - 1).addClass('modal-stack');
                }, 0);
            });

            $(document).on('hidden.bs.modal', '.modal', function () {
                $('.modal:visible').length && $(document.body).addClass('modal-open');
            });
        });
    </script>
    <script type="text/javascript">
        // =================
        // User Branch Combo
        // =================
        var cboUserBranches = new wijmo.input.ComboBox('#cboUserBranches');

        // =========================
        // Get Current User Branches
        // =========================
        function getUserBranches() {
            $("#loadingUserBranches").show();
            document.getElementById("loadingUserBranches").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#userBranchContent").hide();

            $('#userBranchesModal').modal({ show: true, backdrop: 'static' });

            document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
            $("#updateUserBranch").prop("disabled", false);
            $("#closeUserBranch").prop("disabled", false);

            var userBranchesObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/userBranch/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (userBranchesResults) {
                    if (userBranchesResults.length > 0) {
                        for (i = 0; i < userBranchesResults.length; i++) {
                            userBranchesObservableArray.push({
                                BranchId: userBranchesResults[i]["BranchId"],
                                Branch: userBranchesResults[i]["Branch"]
                            });
                        }
                    }

                    var currentBranch = "@ViewData["BranchId"]";
                    cboUserBranches.dispose();
                    cboUserBranches = new wijmo.input.ComboBox('#cboUserBranches', {
                        isEditable: false,
                        placeholder: "Select Branches",
                        itemsSource: userBranchesObservableArray,
                        displayMemberPath: "Branch",
                        selectedValuePath: "BranchId",
                        selectedValue: currentBranch
                    });

                    setTimeout(function () {
                        $("#loadingUserBranches").hide();
                        $("#userBranchContent").show();
                    }, 500)
                }
            });
        }

        // ==========================
        // Update Current User Branch
        // ==========================
        function updateUserBranchOnclick() {
            document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Updating";
            $("#updateUserBranch").prop("disabled", true);
            $("#closeUserBranch").prop("disabled", true);

            var userBranchObject = new Object();
            userBranchObject.BranchId = cboUserBranches.selectedValue;
            var userBranchData = JSON.stringify(userBranchObject);

            $.ajax({
                type: "PUT",
                url: '/api/userBranch/update',
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: userBranchData,
                statusCode: {
                    200: function () {
                        toastr.success("Update Successful");
                        window.setTimeout(function () {
                            location.reload()
                        }, 1000);
                    },
                    404: function () {
                        toastr.error("Not Found");
                        document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
                        $("#updateUserBranch").prop("disabled", false);
                        $("#closeUserBranch").prop("disabled", false);
                    },
                    500: function () {
                        toastr.error("Bad Request");
                        document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
                        $("#updateUserBranch").prop("disabled", false);
                        $("#closeUserBranch").prop("disabled", false);
                    }
                }
            });
        }
    </script>
    <script type="text/javascript">
        // ======================
        // Side Bar Menu Settings
        // ======================
        var slideLeft = new Menu({
            wrapper: '#o-wrapper',
            type: 'slide-left',
            menuOpenerClass: '.c-button',
            maskId: '#c-mask'
        });

        var slideLeftBtn = document.querySelector('#c-button--slide-left');

        slideLeftBtn.addEventListener('click', function (e) {
            e.preventDefault;
            slideLeft.open();
        });
    </script>
</body>
</html>