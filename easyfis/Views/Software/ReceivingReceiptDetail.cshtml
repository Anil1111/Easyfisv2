@model easyfis.Entities.MstUserForm
@{
    // =====================
    // User Rights Variables
    // =====================
    var canAdd = Model.CanAdd;
    var canEdit = Model.CanEdit;
    var canDelete = Model.CanDelete;
    var canLock = Model.CanLock;
    var canUnlock = Model.CanUnlock;
    var canPrint = Model.CanPrint;
}
<!DOCTYPE html>
<html>
<head>
    <!-- Meta -->
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">

    <!-- Title of the Page -->
    <link rel="shortcut icon" href="~/Images/icon/easyfislogomini.ico">
    <title>Receiving Receipt Detail</title>

    <!-- CSS StyleSheets-->
    @Styles.Render("~/Content/Software-css")
</head>
<body class="">
    <div id="o-wrapper" class="o-wrapper">
        <main class="o-content">
            @Html.Partial("_SoftwareHeader")
            <section class="content-header">
                <div class="container">
                    <h3>
                        Receiving Receipt Detail
                    </h3>
                    <p>
                        <i class="fa fa-building-o fa-fw"></i> &nbsp; @ViewData["Company"] <br />
                        <i class="fa fa-home fa-fw"></i> &nbsp; <a href="#" onclick="getUserBranches()" style="color: white;">@ViewData["Branch"]</a>
                    </p>
                </div>
            </section>
            <section class="container">
                <div class="panel panel-default">
                    <div class="panel-heading">
                        <div class="row">
                            <div class="col-md-12" align="right">
                                <button class="btn btn-primary" id="btnReceivingReceiptJournal" onclick="btnReceivingReceiptJournalOnclick()"><i class="fa fa-book"></i> Journal</button>
                                @{
                                    if (canLock)
                                    {
                                        <button class="btn btn-primary" id="btnLockReceivingReceipt" onclick="btnLockReceivingReceiptOnclick()"><i class="fa fa-lock"></i> Lock</button>
                                    }
                                    if (canUnlock)
                                    {
                                        <button class="btn btn-primary" id="btnUnlockReceivingReceipt" onclick="btnUnlockReceivingReceiptOnclick()"><i class="fa fa-unlock"></i> Unlock</button>
                                    }
                                    if (canPrint)
                                    {
                                        <button class="btn btn-primary" id="btnPrintReceivingReceipt" onclick="btnPrintReceivingReceiptOnclick()"><i class="fa fa-print"></i> Print</button>
                                    }
                                }
                                <button class="btn btn-danger" id="btnCloseReceivingReceipt" onclick="window.location.href = '@Url.Action("ReceivingReceipt", "Software")'"><i class="fa fa-times"></i> Close</button>
                            </div>
                        </div>
                    </div>
                    <div class="panel-body">
                        <form class="form-horizontal" role="form">
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Branch:</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboRRbranch"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">RR Number</label>
                                        <div class="col-sm-8">
                                            <input type="text" class="form-control requiredRR" id="RRNumber" disabled />
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">RR Date</label>
                                        <div class="col-sm-8">
                                            <div class="" id="cboRRDate"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Doc Reference</label>
                                        <div class="col-sm-8">
                                            <input type="text" class="form-control requiredRR" id="RRDocReference" placeholder="Document Reference">
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Supplier</label>
                                        <div class="col-sm-8">
                                            <div class="input-group">
                                                <div class="comboBox-wide" id="cboRRSupplier"></div>
                                                <div class="input-group-btn">
                                                    <button type="button" class="btn btn-primary " id="cmdRRForPOSupplier" onclick="RRForPOSupplier_OnClick()">PO</button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Term</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboRRTerm"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Remarks</label>
                                        <div class="col-sm-8">
                                            <textarea rows="5" class="form-control textarea-custom requiredRR" id="RRRemarks" placeholder="Remarks"></textarea>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Manual RR Number</label>
                                        <div class="col-sm-8">
                                            <input type="text" class="form-control  requiredRR" id="RRManualRRNumber" placeholder="Manual RR Number">
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Received by</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboRRReceivedBy"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Prepared by</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboRRPreparedBy"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Checked by</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboRRCheckedBy"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Approved by</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboRRApprovedBy"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
                <ul class="nav nav-tabs" role="tablist" id="myTab">
                    <li role="presentation" class="active"><a data-toggle="tab" href="#Item" id="itemTabId">Items</a></li>
                    <li role="presentation"><a data-toggle="tab" href="#InventoryEntry" id="inventoryEntryTabId">Inventory Entries</a></li>
                </ul>
                <br />
                <div class="tab-content">
                    <div id="Item" class="tab-pane active">
                        <div class="panel panel-default">
                            <div class="panel-heading">
                                <table style="width: 100%" border="0">
                                    <tr>
                                        <td style="width: 49.5%">
                                            <div class="input-group">
                                                <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                                <input type="text" class="form-control " id="ReceivingReceiptItemInputFilter" placeholder="Search...">
                                            </div>
                                        </td>
                                        <td style="width: 1%"></td>
                                        <td style="width: 24%">
                                            <div class="input-group">
                                                <span class="input-group-addon"><b><i class="fa fa-table"></i></b></span>
                                                <div class="comboBox-wide" id="cboReceivingReceiptItemsShowNumberOfRows"></div>
                                            </div>
                                        </td>
                                        <td style="width: 1%"></td>
                                        <td style="width: 24.5%" align="right">
                                            @{
                                                if (canAdd)
                                                {
                                                    <button class="btn btn-primary" id="btnAddReceivingReceiptItem" onclick="btnAddReceivingReceiptItemOnclick()"><i class="fa fa-plus"></i> Add</button>
                                                }
                                            }
                                        </td>
                                    </tr>
                                </table>
                            </div>
                            <div class="panel-body">
                                <div id="ReceivingReceiptItemGrid" class="grid"></div>
                            </div>
                            <div class="panel-footer">
                                <div class="row">
                                    <div class="btn-group col-md-7" id="naviagtionPageGridItem">
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToFirstPageGridItem">
                                            <span class="glyphicon glyphicon-fast-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToPreviousPageGridItem">
                                            <span class="glyphicon glyphicon-step-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnCurrentPageGridItem"></button>
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToNextPageGridItem">
                                            <span class="glyphicon glyphicon-step-forward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToLastPageGridItem">
                                            <span class="glyphicon glyphicon-fast-forward"></span>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="panel panel-default">
                            <div class="panel-body" style="padding-bottom: 0px;">
                                <div class="row">
                                    <div class="col-md-6">

                                    </div>
                                    <div class="col-md-6">
                                        <dl class="dl-horizontal">
                                            <dt>
                                                <b>Total Amount</b>
                                            </dt>
                                            <dd>
                                                <input type="text" class="form-control numberField" id="totalRRAmount" placeholder="0.00" disabled />
                                            </dd>
                                            <dt>
                                                <b>Total VAT Amount</b>
                                            </dt>
                                            <dd>
                                                <input type="text" class="form-control numberField" id="totalRRVATAmount" placeholder="0.00" disabled />
                                            </dd>
                                            <dt>
                                                <b>Total WTAX Amount</b>
                                            </dt>
                                            <dd>
                                                <input type="text" class="form-control numberField" id="totalRRWTAXAmount" placeholder="0.00" disabled />
                                            </dd>
                                        </dl>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div id="InventoryEntry" class="tab-pane">
                        <div class="panel panel-default">
                            <div class="panel-heading">
                                <table style="width: 100%" border="0">
                                    <tr>
                                        <td style="width: 49.5%">
                                            <div class="input-group">
                                                <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                                <input type="text" class="form-control " id="InventoryEntryInputFilter" placeholder="Search...">
                                            </div>
                                        </td>
                                        <td style="width: 1%"></td>
                                        <td style="width: 24%">
                                            <div class="input-group">
                                                <span class="input-group-addon"><b><i class="fa fa-table"></i></b></span>
                                                <div class="comboBox-wide" id="cboInventoryEntryShowNumberOfRows"></div>
                                            </div>
                                        </td>
                                        <td style="width: 1%"></td>
                                        <td style="width: 24.5%" align="right"></td>
                                    </tr>
                                </table>
                            </div>
                            <div class="panel-body">
                                <div id="inventoryFlexGrid"></div>
                            </div>
                            <div class="panel-footer">
                                <div class="row">
                                    <div class="btn-group col-md-7" id="naviagtionPageGridInventoryEntry">
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToFirstPageGridInventoryEntry">
                                            <span class="glyphicon glyphicon-fast-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToPreviousPageGridInventoryEntry">
                                            <span class="glyphicon glyphicon-step-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnCurrentPageGridInventoryEntry"></button>
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToNextPageGridInventoryEntry">
                                            <span class="glyphicon glyphicon-step-forward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToLastPageGridInventoryEntry">
                                            <span class="glyphicon glyphicon-fast-forward"></span>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="panel panel-default">
                    <div class="panel-heading">
                        User stamp
                    </div>
                    <div class="panel-body">
                        <div class="row">
                            <div class="col-md-6">
                                <p>Created by:</p>
                                <div style="padding-left: 10px;">
                                    <i class="fa fa-key fa-fw"></i> <label id="createdBy">NA</label>
                                    <br />
                                    <small><i class="fa fa-calendar fa-fw"></i> &nbsp;<span id="createdDate">mm/dd/yyyy</span></small>
                                </div>
                                <br />
                            </div>
                            <div class="col-md-6">
                                <p>Updated by:</p>
                                <div style="padding-left: 10px;">
                                    <i class="fa fa-key fa-fw"></i> <label id="updatedBy">NA</label>
                                    <br />
                                    <small><i class="fa fa-calendar fa-fw"></i> &nbsp;<span id="updatedDate">mm/dd/yyyy</span></small>
                                </div>
                                <br />
                            </div>
                        </div>
                    </div>
                </div>
            </section>
            @Html.Partial("_SoftwareFooter")
        </main>
    </div>
    <div id="c-mask" class="c-mask"></div>

    <!-- PO Status -->
    <div class="modal fade" id="POStatus" role="dialog">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="POStatusModalLabel">Purchase Order Status</h4>
                </div>
                <div class="modal-body">
                    <center>
                        <span id="loadingPOStatus"></span>
                    </center>
                    <div id="loadingPOPanel">
                        <div class="panel panel-default">
                            <div class="panel-heading">
                                <table style="width: 100%" border="0">
                                    <tr>
                                        <td style="width: 40%">
                                            <div class="input-group ">
                                                <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                                <input type="text" class="form-control " id="inputFilterPOItem" placeholder="Search">
                                            </div>
                                        </td>
                                        <td style="width: 1%"></td>
                                        <td style="width: 29%">
                                            <div class="input-group ">
                                                <span class="input-group-addon"><b>Receive To</b></span>
                                                <div class="comboBox-wide" id="cboBranchPOStatus"></div>
                                            </div>
                                        </td>
                                        <td style="width: 1%"></td>
                                        <td style="width: 29%">
                                            <div class="input-group ">
                                                <span class="input-group-addon"><b>PO Number</b></span>
                                                <div class="comboBox-wide" id="cboPONumberPOStatus"></div>
                                            </div>
                                        </td>
                                    </tr>
                                </table>
                            </div>
                            <div class="panel-body">
                                <div id="purchasrOrderStatusFlexGrid"></div>
                            </div>
                            <div class="panel-footer">
                                <div class="row">
                                    <div class="btn-group col-md-7" id="naviagtionPageGridPOStatus">
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToFirstPageGridPOStatus">
                                            <span class="glyphicon glyphicon-fast-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToPreviousPageGridPOStatus">
                                            <span class="glyphicon glyphicon-step-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnCurrentPageGridPOStatus"></button>
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToNextPageGridPOStatus">
                                            <span class="glyphicon glyphicon-step-forward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToLastPageGridPOStatus">
                                            <span class="glyphicon glyphicon-fast-forward"></span>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button id="cmdApplyPOStatusButton" class="btn btn-primary" onclick="cmdApplyAllPOStatusButton_OnClick()"><i class="fa fa-check"></i> Apply</button>
                    <button id="cmdPOStatusCloseButton" class="btn btn-danger" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- RR Items -->
    <div class="modal fade" id="RRLinesEdit" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="RRLinesNameModalLabel">Receiving Receipt Item</h4>
                </div>
                <div class="modal-body">
                    <center>
                        <span id="loadingModalItem"></span>
                    </center>
                    <div id="RRLinesDetailForm">
                        <ul class="nav nav-tabs" role="tablist" id="myTab">
                            <li role="presentation" class="active"><a data-toggle="tab" href="#RRItem" id="RRItemTabId">Items</a></li>
                            <li role="presentation"><a data-toggle="tab" href="#RRTax" id="RRTaxTabId">Tax</a></li>
                        </ul>
                        <br />
                        <div class="tab-content">
                            <div id="RRItem" class="tab-pane fade in active">
                                <dl class="dl-horizontal">
                                    <dt>Branch</dt>
                                    <dd><div class="comboBox-wide" id="cboRRItemBranch"></div></dd>
                                    <dt>Purchase Order No</dt>
                                    <dd><div class="comboBox-wide" id="cboRRItemPONumber"></div></dd>
                                    <dt>Item</dt>
                                    <dd>
                                        <table style="width: 100%" border="0">
                                            <tr>
                                                <td style="width: 30%">
                                                    <div class="" id="cboRRLineItemCode"></div>
                                                </td>
                                                <td style="width: 1%"></td>
                                                <td style="width: 69%">
                                                    <div class="" id="cboRRLineItemDescription"></div>
                                                </td>
                                            </tr>
                                        </table>
                                    </dd>
                                    <dt>Particulars</dt>
                                    <dd><textarea rows="5" class="form-control textarea-custom requiredRRLine" id="RRLine_Particulars" placeholder="Particulars"></textarea></dd>
                                    <dt>Quantity</dt>
                                    <dd><input class="form-control numberField   requiredRRLine" id="RRLine_Quantity" placeholder="0.00" /></dd>
                                    <dt>Unit</dt>
                                    <dd><div class="comboBox-wide" id="cboRRItemUnit"></div></dd>
                                    <dt>Cost</dt>
                                    <dd><input type="text" class="form-control numberField requiredRRLine" id="RRLine_Cost" placeholder="0.00" /></dd>
                                    <dt>Amount</dt>
                                    <dd><input type="text" class="form-control numberField requiredRRLine" id="RRLine_Amount" placeholder="0.00" disabled /></dd>
                                </dl>
                            </div>
                            <div id="RRTax" class="tab-pane fade">
                                <dl class="dl-horizontal">
                                    <dt>VAT</dt>
                                    <dd><div class="comboBox-wide" id="cboRRItemVAT"></div></dd>
                                    <dt>VAT Rate</dt>
                                    <dd><input type="text" class="form-control  numberField  requiredRRLine" id="RRLine_VATRate" placeholder="0.00" disabled /></dd>
                                    <dt>VAT Amount</dt>
                                    <dd><input type="text" class="form-control  numberField  requiredRRLine" id="RRLine_VATAmount" placeholder="0.00" disabled /></dd>
                                    <dt>WTAX</dt>
                                    <dd><div class="comboBox-wide" id="cboForWTAXTaxType"></div></dd>
                                    <dt>WTAX Rate</dt>
                                    <dd><input type="text" class="form-control  numberField  requiredRRLine" id="RRLine_WTAXRate" placeholder="0.00" disabled /></dd>
                                    <dt>WTAX Amount</dt>
                                    <dd><input type="text" class="form-control  numberField  requiredRRLine" id="RRLine_WTAXAmount" placeholder="0.00" disabled /></dd>
                                </dl>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button id="cmdSaveRRLinesButton" class="btn btn-primary" onclick="cmdRRLinesSaveButton_OnClick()"><i class="fa fa-save"></i> Save</button>
                    <button id="cmdRRLinesDetailCloseButton" class="btn btn-danger" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Journal -->
    <div class="modal fade" id="journalDetail" role="dialog">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="journalModalLabel"> Journal</h4>
                </div>
                <div class="modal-body">
                    <center>
                        <span id="loadingJournalGridList"></span>
                    </center>
                    <div id="journal_Content">
                        <div id="journalFlexGrid" style="max-height: 250px;"></div>
                        <br /><br />
                        <div class="row">
                            <div class="col-md-7"></div>
                            <div class="col-md-5">
                                <dl class="dl-horizontal">
                                    <dt>
                                        <b>Total Debit</b>
                                    </dt>
                                    <dd>
                                        <input type="text" class="form-control  numberField  requiredStockTransferItem" id="totalDebitInJournal" placeholder="0.00" disabled />
                                    </dd>
                                    <dt>
                                        <b>Total Credit</b>
                                    </dt>
                                    <dd>
                                        <input type="text" class="form-control  numberField  requiredStockTransferItem" id="totalCreditInJournal" placeholder="0.00" disabled />
                                    </dd>
                                    <dt>
                                        <b>Variance</b>
                                    </dt>
                                    <dd>
                                        <input type="text" class="form-control  numberField  requiredStockTransferItem" id="variance" placeholder="0.00" disabled />
                                    </dd>
                                </dl>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button id="cmdJournalDetailCloseButton" class="btn btn-danger" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- RR PO Items Delete -->
    <div class="modal fade" id="deleteRRLinesConfirm" role="dialog">
        <div class="modal-dialog modal-sm">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Delete</h4>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete this receiving receipt item?
                </div>
                <div class="modal-footer">
                    <button id="cmdConfirmDeleteRRLines" class="btn btn-danger" onclick="cmdRRLinesConfirmDeleteButton_OnClick()"><i class="fa fa-trash"></i> Delete</button>
                    <button id="cmdConfirmDeleteCloseButtonRRLines" class="btn btn-primary" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <!-- RR Status PO Apply all -->
    <div class="modal fade" id="applyAllConfirmPOStatus" role="dialog">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Apply</h4>
                </div>
                <div class="modal-body">
                    Are you sure that you want to apply all picked purchase order items?
                </div>
                <div class="modal-footer">
                    <button id="cmdConfirmApplyAllPOStatusPOItems" class="btn btn-primary" onclick="btnConfrimApplyAllPOItems_OnClick()"><i class="fa fa-check"></i> Apply</button>
                    <button id="cmdCloseButtonApplyAllPOStatusPOItems" class="btn btn-danger" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>
    
    <div class="modal fade" id="poStatusPickedAmountModal" role="dialog">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Pick</h4>
                </div>
                <div class="modal-body">
                    <dl>
                        <dt>Quantity</dt>
                        <dd>
                            <input class="form-control numberField requiredPickedAmount" id="inpPOSTatusPickedQuantity" placeholder="0.00" />
                        </dd>
                    </dl>
                </div>
                <div class="modal-footer">
                    <button id="btnSalesInvoiceStatusPerCustomerPickAmountContinue" class="btn btn-primary" onclick="btnSalesInvoiceStatusPerCustomerPickAmountContinueOnclick()"><i class="fa fa-arrow-right"></i> Continue</button>
                    <button id="btnSalesInvoiceStatusPerCustomerPickAmountCloseModal" class="btn btn-danger" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    @Scripts.Render("~/Scripts/Software-js")
    <script type="text/javascript">
        // ================
        // Global Variables
        // ================
        var cboRRbranch = new wijmo.input.ComboBox('#cboRRbranch');
        var cboRRSupplier = new wijmo.input.ComboBox('#cboRRSupplier');
        var cboRRTerm = new wijmo.input.ComboBox('#cboRRTerm');
        var cboRRReceivedBy = new wijmo.input.ComboBox('#cboRRReceivedBy');
        var cboRRPreparedBy = new wijmo.input.ComboBox('#cboRRPreparedBy');
        var cboRRCheckedBy = new wijmo.input.ComboBox('#cboRRCheckedBy');
        var cboRRApprovedBy = new wijmo.input.ComboBox('#cboRRApprovedBy');
        var cboRRDate = new wijmo.input.InputDate('#cboRRDate');
        var receivingReceiptItemsCollection;
        var receivingReceiptItemGrid;
        var isLocked = false;
        var cboPONumberPOStatus = new wijmo.input.ComboBox('#cboPONumberPOStatus');
        var cboBranchPOStatus = new wijmo.input.ComboBox('#cboBranchPOStatus');
        var purchaseOrderStatusCollectionView;
        var purchasrOrderStatusFlexGrid = new wijmo.grid.FlexGrid('#purchasrOrderStatusFlexGrid');
        var cboRRItemBranch = new wijmo.input.ComboBox('#cboRRItemBranch');
        var cboRRItemPONumber = new wijmo.input.ComboBox('#cboRRItemPONumber');
        var cboRRLineItemCode = new wijmo.input.ComboBox('#cboRRLineItemCode');
        var cboRRLineItemDescription = new wijmo.input.ComboBox('#cboRRLineItemDescription');
        var cboRRItemUnit = new wijmo.input.ComboBox('#cboRRItemUnit');
        var cboRRItemVAT = new wijmo.input.ComboBox('#cboRRItemVAT');
        var cboForWTAXTaxType = new wijmo.input.ComboBox('#cboForWTAXTaxType');
        var receivingReceiptId = 0;
        var inventoryCollectionView;
        var inventoryFlexGrid;
        var journalCollectionView;
        var journalFlexGrid = new wijmo.grid.FlexGrid('#journalFlexGrid');
        var cboReceivingReceiptItemsShowNumberOfRows = new wijmo.input.ComboBox('#cboReceivingReceiptItemsShowNumberOfRows');
        var btnMoveToFirstPageGridItem = document.getElementById('btnMoveToFirstPageGridItem');
        var btnMoveToPreviousPageGridItem = document.getElementById('btnMoveToPreviousPageGridItem');
        var btnMoveToNextPageGridItem = document.getElementById('btnMoveToNextPageGridItem');
        var btnMoveToLastPageGridItem = document.getElementById('btnMoveToLastPageGridItem');
        var btnCurrentPageGridItem = document.getElementById('btnCurrentPageGridItem');
        var cboInventoryEntryShowNumberOfRows = new wijmo.input.ComboBox('#cboInventoryEntryShowNumberOfRows');
        var btnMoveToFirstPageGridInventoryEntry = document.getElementById('btnMoveToFirstPageGridInventoryEntry');
        var btnMoveToPreviousPageGridInventoryEntry = document.getElementById('btnMoveToPreviousPageGridInventoryEntry');
        var btnMoveToNextPageGridInventoryEntry = document.getElementById('btnMoveToNextPageGridInventoryEntry');
        var btnMoveToLastPageGridInventoryEntry = document.getElementById('btnMoveToLastPageGridInventoryEntry');
        var btnCurrentPageGridInventoryEntry = document.getElementById('btnCurrentPageGridInventoryEntry');
        var btnMoveToFirstPageGridPOStatus = document.getElementById('btnMoveToFirstPageGridPOStatus');
        var btnMoveToPreviousPageGridPOStatus = document.getElementById('btnMoveToPreviousPageGridPOStatus');
        var btnMoveToNextPageGridPOStatus = document.getElementById('btnMoveToNextPageGridPOStatus');
        var btnMoveToLastPageGridPOStatus = document.getElementById('btnMoveToLastPageGridPOStatus');
        var btnCurrentPageGridPOStatus = document.getElementById('btnCurrentPageGridPOStatus');
        var isPOStatusClicked = false;
        var currentPOStatusPageIndex = 0;

        // =======================
        // Get URL Parameter Value
        // =======================
        function getParam(name) {
            name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
            var regexS = "[\\?&]" + name + "=([^&#]*)";
            var regex = new RegExp(regexS);
            var results = regex.exec(window.location.href);
            if (results == null)
                return "";
            else
                return results[1];
        }

        // ========================
        // GET Branch for Combo Box
        // ========================
        function getBranchesForComboBox() {
            NProgress.start();
            var branchesObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/receivingReceipt/dropdown/list/branch',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            branchesObservableArray.push({
                                Id: results[i]["Id"],
                                Branch: results[i]["Branch"]
                            });
                        }
                    }

                    cboRRbranch.dispose();
                    cboRRbranch = new wijmo.input.ComboBox('#cboRRbranch', {
                        disabled: true,
                        isEditable: false,
                        placeholder: "Select Branch",
                        itemsSource: branchesObservableArray,
                        displayMemberPath: "Branch",
                        selectedValuePath: "Id"
                    });

                    getSupplierForComboBox();
                }
            });
        }

        // ==========================
        // GET Supplier for Combo Box
        // ==========================
        function getSupplierForComboBox() {
            var suppliersObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/receivingReceipt/dropdown/list/supplier',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            suppliersObservableArray.push({
                                Id: results[i]["Id"],
                                Supplier: results[i]["Article"]
                            });
                        }
                    }

                    cboRRSupplier.dispose();
                    cboRRSupplier = new wijmo.input.ComboBox('#cboRRSupplier', {
                        isEditable: false,
                        placeholder: "Select Supplier",
                        itemsSource: suppliersObservableArray,
                        displayMemberPath: "Supplier",
                        selectedValuePath: "Id"
                    });

                    getTermForComboBox();
                }
            });
        }

        // =======================
        // GET Terms for Combo Box
        // =======================
        function getTermForComboBox() {
            var termsObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/receivingReceipt/dropdown/list/term',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            termsObservableArray.push({
                                Id: results[i]["Id"],
                                Term: results[i]["Term"]
                            });
                        }
                    }

                    cboRRTerm.dispose();
                    cboRRTerm = new wijmo.input.ComboBox('#cboRRTerm', {
                        isEditable: false,
                        placeholder: "Select Term",
                        itemsSource: termsObservableArray,
                        displayMemberPath: "Term",
                        selectedValuePath: "Id"
                    });

                    getUsersForComboBox();
                }
            });
        }

        // =======================
        // GET Users for Combo Box
        // =======================
        function getUsersForComboBox() {
            var usersObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/receivingReceipt/dropdown/list/users',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            usersObservableArray.push({
                                Id: results[i]["Id"],
                                FullName: results[i]["FullName"]
                            });
                        }
                    }

                    cboRRReceivedBy.dispose();
                    cboRRReceivedBy = new wijmo.input.ComboBox('#cboRRReceivedBy', {
                        isEditable: false,
                        placeholder: "Select User",
                        itemsSource: usersObservableArray,
                        displayMemberPath: "FullName",
                        selectedValuePath: "Id"
                    });

                    cboRRPreparedBy.dispose();
                    cboRRPreparedBy = new wijmo.input.ComboBox('#cboRRPreparedBy', {
                        disabled: true,
                        isEditable: false,
                        placeholder: "Select User",
                        itemsSource: usersObservableArray,
                        displayMemberPath: "FullName",
                        selectedValuePath: "Id"
                    });

                    cboRRCheckedBy.dispose();
                    cboRRCheckedBy = new wijmo.input.ComboBox('#cboRRCheckedBy', {
                        isEditable: false,
                        placeholder: "Select User",
                        itemsSource: usersObservableArray,
                        displayMemberPath: "FullName",
                        selectedValuePath: "Id"
                    });

                    cboRRApprovedBy.dispose();
                    cboRRApprovedBy = new wijmo.input.ComboBox('#cboRRApprovedBy', {
                        isEditable: false,
                        placeholder: "Select User",
                        itemsSource: usersObservableArray,
                        displayMemberPath: "FullName",
                        selectedValuePath: "Id"
                    });

                    getReecivingReceiptById();
                }
            });
        }

        // =================
        // GET RR List By Id
        // =================
        function getReecivingReceiptById() {
            if (document.location.search.length > 0) {
                var id = getParam('id');
                $.ajax({
                    url: '/api/receivingReceipt/detail/' + id,
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    data: {},
                    success: function (results) {
                        if (results != null) {
                            cboRRbranch.selectedValue = results.BranchId;
                            document.getElementById('RRNumber').value = results.RRNumber;
                            cboRRDate.dispose();
                            cboRRDate = new wijmo.input.InputDate('#cboRRDate', {
                                format: 'MM-dd-yyyy',
                                value: new Date(results.RRDate),
                            });
                            document.getElementById('RRDocReference').value = results.DocumentReference;
                            cboRRSupplier.selectedValue = results.SupplierId;
                            cboRRTerm.selectedValue = results.TermId;
                            document.getElementById('RRRemarks').value = results.Remarks;
                            document.getElementById('RRManualRRNumber').value = results.ManualRRNumber;
                            cboRRReceivedBy.selectedValue = results.ReceivedById;
                            cboRRPreparedBy.selectedValue = results.PreparedById;
                            cboRRCheckedBy.selectedValue = results.CheckedById;
                            cboRRApprovedBy.selectedValue = results.ApprovedById;

                            // user stamp
                            document.getElementById('createdBy').innerHTML = results.CreatedBy;
                            document.getElementById('createdDate').innerHTML = results.CreatedDateTime;
                            document.getElementById('updatedBy').innerHTML = results.UpdatedBy;
                            document.getElementById('updatedDate').innerHTML = results.UpdatedDateTime;

                            if (results.IsLocked) {
                                document.getElementById('RRNumber').disabled = true;
                                cboRRDate.disabled = true;
                                document.getElementById('RRDocReference').disabled = true;
                                cboRRSupplier.disabled = true;
                                cboRRTerm.disabled = true;
                                document.getElementById('RRRemarks').disabled = true;
                                document.getElementById('RRManualRRNumber').disabled = true;
                                cboRRReceivedBy.disabled = true;
                                cboRRPreparedBy.disabled = true;
                                cboRRCheckedBy.disabled = true;
                                cboRRApprovedBy.disabled = true;
                                isLocked = true;

                                $("#btnLockReceivingReceipt").prop("disabled", true);
                                $("#cmdRRForPOSupplier").prop("disabled", true);
                                $("#btnAddReceivingReceiptItem").prop("disabled", true);
                            } else {
                                $("#btnReceivingReceiptJournal").prop("disabled", true);
                                $("#btnUnlockReceivingReceipt").prop("disabled", true);
                                $("#btnPrintReceivingReceipt").prop("disabled", true);
                            }

                            createCboShowRows();
                            createReceivingReceiptFlexGrid();
                            createInventoryFlexGrid();
                        } else {
                            alert("No Data");
                            window.location = "/Software/ReceivingReceipt";
                        }
                    }
                });
            } else {
                alert("No Id Parameter Value");
                window.location = "/Software/ReceivingReceipt";
            }
        }

        // ===========
        // GET RR Item
        // ===========
        function getRecevingReceiptItem() {
            var itemsObservableArray = new wijmo.collections.ObservableArray;
            if (document.location.search.length > 0) {
                var RRId = getParam('id');
                $.ajax({
                    url: '/api/receivingReceiptItem/list/' + RRId,
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    success: function (results) {
                        var totalAmount = 0;
                        var totalVATAmount = 0;
                        var totalWTAXAmount = 0;

                        if (results.length > 0) {
                            var btnEditId = "<button class='btn btn-primary btn-xs btn-block' onclick='btnItemRRLinesEdit_OnClick()'><i class='fa fa-edit'></i> Edit</button>";
                            var btnDeleteId = "<button class='btn btn-danger btn-xs btn-block' onclick='btnItemRRLinesDelete_OnClick()'><i class='fa fa-trash'></i> Delete</button>";
                            if (isLocked) {
                                btnEditId = "<button class='btn btn-primary btn-xs btn-block' onclick='btnItemRRLinesEdit_OnClick()' disabled><i class='fa fa-edit'></i> Edit</button>";
                                btnDeleteId = "<button class='btn btn-danger btn-xs btn-block' onclick='btnItemRRLinesDelete_OnClick()' disabled><i class='fa fa-trash'></i> Delete</button>";
                            }

                            for (i = 0; i < results.length; i++) {
                                itemsObservableArray.push({
                                    EditId: btnEditId,
                                    DeleteId: btnDeleteId,
                                    Id: results[i]["Id"],
                                    RRId: results[i]["RRId"],
                                    POId: results[i]["POId"],
                                    PONumber: results[i]["PONumber"],
                                    ItemId: results[i]["ItemId"],
                                    ItemCode: results[i]["ItemCode"],
                                    ItemManualArticleOldCode: results[i]["ItemManualArticleOldCode"],
                                    ItemDescription: results[i]["ItemDescription"],
                                    Particulars: results[i]["Particulars"],
                                    Quantity: results[i]["Quantity"],
                                    QuantityDisplay: parseFloat(results[i]["Quantity"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                    UnitId: results[i]["UnitId"],
                                    Unit: results[i]["Unit"],
                                    Cost: results[i]["Cost"],
                                    CostDisplay: parseFloat(results[i]["Cost"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                    Amount: results[i]["Amount"],
                                    AmountDisplay: parseFloat(results[i]["Amount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                    BranchId: results[i]["BranchId"],
                                    Branch: results[i]["Branch"],
                                    VATId: results[i]["VATId"],
                                    VAT: results[i]["VAT"],
                                    VATPercentage: results[i]["VAT"] + "<hr style='margin-top: 3px; margin-bottom: 3px; border-color: #cccccc' />" + parseFloat(results[i]["VATPercentage"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                    VATRate: results[i]["VATPercentage"],
                                    VATAmount: results[i]["VATAmount"],
                                    VATAmountDisplay: parseFloat(results[i]["VATAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                    WTAXId: results[i]["WTAXId"],
                                    WTAX: results[i]["WTAX"],
                                    WTAXPercentage: results[i]["WTAX"] + "<hr style='margin-top: 3px; margin-bottom: 3px; border-color: #cccccc' />" + parseFloat(results[i]["WTAXPercentage"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                    WTAXRate: results[i]["WTAXPercentage"],
                                    WTAXAmount: results[i]["WTAXAmount"],
                                    WTAXAmountDisplay: parseFloat(results[i]["WTAXAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                    BaseUnitId: results[i]["BaseUnitId"],
                                    BaseUnit: results[i]["BaseUnit"],
                                    BaseQuantity: results[i]["BaseQuantity"],
                                    BaseQuantityDisplay: parseFloat(results[i]["BaseQuantity"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                    BaseCost: results[i]["BaseCost"],
                                    BaseCostDisplay: parseFloat(results[i]["BaseCost"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                });

                                totalAmount += results[i]["Amount"];
                                totalVATAmount += results[i]["VATAmount"];
                                totalWTAXAmount += results[i]["WTAXAmount"];
                            }
                        }

                        document.getElementById('totalRRAmount').value = parseFloat(totalAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        document.getElementById('totalRRVATAmount').value = parseFloat(totalVATAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        document.getElementById('totalRRWTAXAmount').value = parseFloat(totalWTAXAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");

                        NProgress.done();
                    }
                });
            }

            return itemsObservableArray
        }

        // =========================
        // Update Navigation Buttons
        // =========================
        function updateNavigateButtonsItems() {
            if (receivingReceiptItemsCollection.pageSize <= 0) {
                document.getElementById('naviagtionPageGridItem').style.display = 'none';
                return;
            }
            document.getElementById('naviagtionPageGridItem').style.display = 'block';
            if (receivingReceiptItemsCollection.pageIndex === 0) {
                btnMoveToFirstPageGridItem.setAttribute('disabled', 'disabled');
                btnMoveToPreviousPageGridItem.setAttribute('disabled', 'disabled');
                btnMoveToNextPageGridItem.removeAttribute('disabled');
                btnMoveToLastPageGridItem.removeAttribute('disabled');
            } else if (receivingReceiptItemsCollection.pageIndex === (receivingReceiptItemsCollection.pageCount - 1)) {
                btnMoveToFirstPageGridItem.removeAttribute('disabled');
                btnMoveToPreviousPageGridItem.removeAttribute('disabled');
                btnMoveToNextPageGridItem.setAttribute('disabled', 'disabled');
                btnMoveToLastPageGridItem.setAttribute('disabled', 'disabled');
            } else {
                btnMoveToFirstPageGridItem.removeAttribute('disabled');
                btnMoveToPreviousPageGridItem.removeAttribute('disabled');
                btnMoveToNextPageGridItem.removeAttribute('disabled');
                btnMoveToLastPageGridItem.removeAttribute('disabled');
            }
            btnCurrentPageGridItem.innerHTML = (receivingReceiptItemsCollection.pageIndex + 1) + ' / ' + receivingReceiptItemsCollection.pageCount;
        }

        // ========================
        // Refresh RR Item Flexgrid
        // ========================
        function refreshReceivingReceiptFlexGrid() {
            receivingReceiptItemsCollection = new wijmo.collections.CollectionView(getRecevingReceiptItem());
            receivingReceiptItemsCollection.canFilter = true;
            receivingReceiptItemsCollection.pageSize = cboReceivingReceiptItemsShowNumberOfRows.selectedValue;

            var filterText = '';
            $('#ReceivingReceiptItemInputFilter').keyup(function () {
                filterText = this.value.toLowerCase();
                receivingReceiptItemsCollection.refresh();
            });

            receivingReceiptItemsCollection.filter = function (item) {
                return !filterText || (item.PONumber.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.ItemCode.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.ItemDescription.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Particulars.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Unit.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Branch.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.VAT.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.WTAX.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.BaseUnit.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.ItemManualArticleOldCode.toLowerCase().indexOf(filterText) > -1);
            }

            receivingReceiptItemsCollection.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsItems();
            });

            receivingReceiptItemGrid.itemsSource = receivingReceiptItemsCollection;
            receivingReceiptItemGrid.trackChanges = true;
        }

        // ====================
        // GET RR Item Flexgrid
        // ====================
        function createReceivingReceiptFlexGrid() {
            receivingReceiptItemsCollection = new wijmo.collections.CollectionView(getRecevingReceiptItem());
            receivingReceiptItemsCollection.canFilter = true;
            receivingReceiptItemsCollection.pageSize = cboReceivingReceiptItemsShowNumberOfRows.selectedValue;

            var filterText = '';
            $('#ReceivingReceiptItemInputFilter').keyup(function () {
                filterText = this.value.toLowerCase();
                receivingReceiptItemsCollection.refresh();
            });

            receivingReceiptItemsCollection.filter = function (item) {
                return !filterText || (item.PONumber.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.ItemCode.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.ItemDescription.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Particulars.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Unit.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Branch.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.VAT.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.WTAX.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.BaseUnit.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.ItemManualArticleOldCode.toLowerCase().indexOf(filterText) > -1);
            }

            receivingReceiptItemsCollection.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsItems();
            });

            // Flex Grid for Item
            receivingReceiptItemGrid = new wijmo.grid.FlexGrid('#ReceivingReceiptItemGrid');
            receivingReceiptItemGrid.initialize({
                columns: [
                    @{
                        if (canEdit)
                        {
                            <text>
                                {
                                    "header": "Edit",
                                    "binding": "EditId",
                                    "width": 70,
                                    "align": "center",
                                    "allowResizing": false,
                                    "allowSorting": false,
                                    "isContentHtml": true
                                },
                            </text>
                        }
                        if (canDelete)
                        {
                            <text>
                                {
                                    "header": "Delete",
                                    "binding": "DeleteId",
                                    "width": 70,
                                    "align": "center",
                                    "allowResizing": false,
                                    "allowSorting": false,
                                    "isContentHtml": true
                                },
                            </text>
                        }
                    }
                    {
                        "header": "PO No.",
                        "binding": "PONumber",
                        "allowSorting": true,
                        "width": 90
                    },
                    {
                        "header": "Barcode",
                        "binding": "ItemCode",
                        "allowSorting": true,
                        "width": 120
                    },
                    {
                        "header": "SKU Code",
                        "binding": "ItemManualArticleOldCode",
                        "allowSorting": true,
                        "width": 120
                    },
                    {
                        "header": "Description",
                        "binding": "ItemDescription",
                        "allowSorting": true,
                        "width": 170
                    },
                    {
                        "header": "Particulars",
                        "binding": "Particulars",
                        "allowSorting": true,
                        "width": 150
                    },
                    {
                        "header": "Quantity",
                        "binding": "QuantityDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": 100
                    },
                    {
                        "header": "Unit",
                        "binding": "Unit",
                        "allowSorting": true,
                        "width": 100
                    },
                    {
                        "header": "Cost",
                        "binding": "CostDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": 100
                    },
                    {
                        "header": "Amount",
                        "binding": "AmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": 100
                    },
                    {
                        "header": "Branch",
                        "binding": "Branch",
                        "allowSorting": true,
                        "width": 150
                    },
                    {
                        "header": "Type",
                        "binding": "VAT",
                        "allowSorting": true,
                        "width": 100,
                        "isContentHtml": true
                    },
                    {
                        "header": "Rate",
                        "binding": "VATRate",
                        "allowSorting": true,
                        "width": 100,
                        "align": "right",
                        "isContentHtml": true
                    },
                    {
                        "header": "Amount",
                        "binding": "VATAmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": 100
                    },
                    {
                        "header": "Type",
                        "binding": "WTAX",
                        "allowSorting": true,
                        "width": 100,
                        "isContentHtml": true
                    },
                    {
                        "header": "Rate",
                        "binding": "WTAXRate",
                        "allowSorting": true,
                        "width": 100,
                        "align": "right",
                        "isContentHtml": true
                    },
                    {
                        "header": "Amount",
                        "binding": "WTAXAmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": 100
                    },
                    {
                        "header": "Unit",
                        "binding": "BaseUnit",
                        "allowSorting": true,
                        "width": 100
                    },
                    {
                        "header": "Quantity",
                        "binding": "BaseQuantityDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": 100
                    },
                    {
                        "header": "Cost",
                        "binding": "BaseCostDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": 100
                    },
                ],
                autoGenerateColumns: false,
                itemsSource: receivingReceiptItemsCollection,
                isReadOnly: true,
                @{
                    if (canEdit)
                    {
                        if (canDelete)
                        {
                            <text>
                                frozenColumns: 2,
                            </text>
                        }
                        else
                        {
                            <text>
                                frozenColumns: 1,
                            </text>
                        }
                    }
                    else
                    {
                        if (canDelete)
                        {
                            <text>
                                frozenColumns: 1,
                            </text>
                        }
                        else
                        {
                            <text>
                                frozenColumns: 0,
                            </text>
                        }
                    }
                }
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            receivingReceiptItemGrid.trackChanges = true;

            var hr = new wijmo.grid.Row();
            receivingReceiptItemGrid.allowMerging = wijmo.grid.AllowMerging.AllHeaders;
            receivingReceiptItemGrid.columnHeaders.rows.push(hr);
            receivingReceiptItemGrid.columnHeaders.rows[0].allowMerging = true;

            @{
                if (canEdit)
                {
                    if (canDelete)
                    {
                        <text>
                            var columnName = "";
                            for (var i = 0; i <= 20; i++) {
                                if (i == 0) {
                                    columnName = "Edit";
                                } else if (i == 1) {
                                    columnName = "Delete";
                                } else if (i == 2) {
                                    columnName = "PO No.";
                                } else if (i == 3) {
                                    columnName = "Barcode";
                                } else if (i == 4) {
                                    columnName = "SKU Code";
                                } else if (i == 5) {
                                    columnName = "Description";
                                } else if (i == 6) {
                                    columnName = "Particulars";
                                } else if (i == 7) {
                                    columnName = "Quantity";
                                } else if (i == 8) {
                                    columnName = "Unit";
                                } else if (i == 9) {
                                    columnName = "Cost";
                                } else if (i == 10) {
                                    columnName = "Amount";
                                } else if (i == 11) {
                                    columnName = "Branch";
                                } else {
                                    if (i >= 12) {
                                        columnName = "VAT";
                                        for (var j = 12; j <= 14; j++) {
                                            receivingReceiptItemGrid.columnHeaders.columns[j].allowMerging = true;
                                            receivingReceiptItemGrid.columnHeaders.setCellData(0, j, columnName);
                                        }
                                    }

                                    if (i >= 15) {
                                        columnName = "WTAX";
                                        for (var j = 15; j <= 17; j++) {
                                            receivingReceiptItemGrid.columnHeaders.columns[j].allowMerging = true;
                                            receivingReceiptItemGrid.columnHeaders.setCellData(0, j, columnName);
                                        }
                                    }

                                    if (i >= 18) {
                                        columnName = "Basic Unit Conversion";
                                        for (var j = 18; j <= 20; j++) {
                                            receivingReceiptItemGrid.columnHeaders.columns[j].allowMerging = true;
                                            receivingReceiptItemGrid.columnHeaders.setCellData(0, j, columnName);
                                        }
                                    }
                                }

                                if (i <= 11) {
                                    receivingReceiptItemGrid.columnHeaders.columns[i].allowMerging = true;
                                    receivingReceiptItemGrid.columnHeaders.setCellData(0, i, columnName);
                                }
                            }
                        </text>
                    }
                    else
                    {
                        <text>
                            var columnName = "";
                            for (var i = 0; i <= 19; i++) {
                                if (i == 0) {
                                    columnName = "Edit";
                                } else if (i == 1) {
                                    columnName = "PO No.";
                                } else if (i == 2) {
                                    columnName = "Barcode";
                                } else if (i == 3) {
                                    columnName = "SKU Code";
                                } else if (i == 4) {
                                    columnName = "Description";
                                } else if (i == 5) {
                                    columnName = "Particulars";
                                } else if (i == 6) {
                                    columnName = "Quantity";
                                } else if (i == 7) {
                                    columnName = "Unit";
                                } else if (i == 8) {
                                    columnName = "Cost";
                                } else if (i == 9) {
                                    columnName = "Amount";
                                } else if (i == 10) {
                                    columnName = "Branch";
                                } else {
                                    if (i >= 11) {
                                        columnName = "VAT";
                                        for (var j = 11; j <= 13; j++) {
                                            receivingReceiptItemGrid.columnHeaders.columns[j].allowMerging = true;
                                            receivingReceiptItemGrid.columnHeaders.setCellData(0, j, columnName);
                                        }
                                    }

                                    if (i >= 14) {
                                        columnName = "WTAX";
                                        for (var j = 14; j <= 16; j++) {
                                            receivingReceiptItemGrid.columnHeaders.columns[j].allowMerging = true;
                                            receivingReceiptItemGrid.columnHeaders.setCellData(0, j, columnName);
                                        }
                                    }

                                    if (i >= 17) {
                                        columnName = "Basic Unit Conversion";
                                        for (var j = 17; j <= 19; j++) {
                                            receivingReceiptItemGrid.columnHeaders.columns[j].allowMerging = true;
                                            receivingReceiptItemGrid.columnHeaders.setCellData(0, j, columnName);
                                        }
                                    }
                                }

                                if (i <= 10) {
                                    receivingReceiptItemGrid.columnHeaders.columns[i].allowMerging = true;
                                    receivingReceiptItemGrid.columnHeaders.setCellData(0, i, columnName);
                                }

                            }
                        </text>
                    }
                }
                else
                {
                    if (canDelete)
                    {
                        <text>
                            var columnName = "";
                            for (var i = 0; i <= 19; i++) {
                                if (i == 0) {
                                    columnName = "Delete";
                                } else if (i == 1) {
                                    columnName = "PO No.";
                                } else if (i == 2) {
                                    columnName = "Barcode";
                                } else if (i == 3) {
                                    columnName = "SKU Code";
                                } else if (i == 4) {
                                    columnName = "Description";
                                } else if (i == 5) {
                                    columnName = "Particulars";
                                } else if (i == 6) {
                                    columnName = "Quantity";
                                } else if (i == 7) {
                                    columnName = "Unit";
                                } else if (i == 8) {
                                    columnName = "Cost";
                                } else if (i == 9) {
                                    columnName = "Amount";
                                } else if (i == 10) {
                                    columnName = "Branch";
                                } else {
                                    if (i >= 11) {
                                        columnName = "VAT";
                                        for (var j = 11; j <= 13; j++) {
                                            receivingReceiptItemGrid.columnHeaders.columns[j].allowMerging = true;
                                            receivingReceiptItemGrid.columnHeaders.setCellData(0, j, columnName);
                                        }
                                    }

                                    if (i >= 14) {
                                        columnName = "WTAX";
                                        for (var j = 14; j <= 16; j++) {
                                            receivingReceiptItemGrid.columnHeaders.columns[j].allowMerging = true;
                                            receivingReceiptItemGrid.columnHeaders.setCellData(0, j, columnName);
                                        }
                                    }

                                    if (i >= 17) {
                                        columnName = "Basic Unit Conversion";
                                        for (var j = 17; j <= 19; j++) {
                                            receivingReceiptItemGrid.columnHeaders.columns[j].allowMerging = true;
                                            receivingReceiptItemGrid.columnHeaders.setCellData(0, j, columnName);
                                        }
                                    }
                                }

                                if (i <= 10) {
                                    receivingReceiptItemGrid.columnHeaders.columns[i].allowMerging = true;
                                    receivingReceiptItemGrid.columnHeaders.setCellData(0, i, columnName);
                                }
                            }
                        </text>
                    }
                    else
                    {
                        <text>
                            var columnName = "";
                            for (var i = 0; i <= 18; i++) {
                                if (i == 0) {
                                    columnName = "PO No.";
                                } else if (i == 1) {
                                    columnName = "Barcode";
                                } else if (i == 2) {
                                    columnName = "SKU Code";
                                } else if (i == 3) {
                                    columnName = "Description";
                                } else if (i == 4) {
                                    columnName = "Particulars";
                                } else if (i == 5) {
                                    columnName = "Quantity";
                                } else if (i == 6) {
                                    columnName = "Unit";
                                } else if (i == 7) {
                                    columnName = "Cost";
                                } else if (i == 8) {
                                    columnName = "Amount";
                                } else if (i == 9) {
                                    columnName = "Branch";
                                } else {
                                    if (i >= 10) {
                                        columnName = "VAT";
                                        for (var j = 10; j <= 12; j++) {
                                            receivingReceiptItemGrid.columnHeaders.columns[j].allowMerging = true;
                                            receivingReceiptItemGrid.columnHeaders.setCellData(0, j, columnName);
                                        }
                                    }

                                    if (i >= 13) {
                                        columnName = "WTAX";
                                        for (var j = 13; j <= 15; j++) {
                                            receivingReceiptItemGrid.columnHeaders.columns[j].allowMerging = true;
                                            receivingReceiptItemGrid.columnHeaders.setCellData(0, j, columnName);
                                        }
                                    }

                                    if (i >= 16) {
                                        columnName = "Basic Unit Conversion";
                                        for (var j = 16; j <= 18; j++) {
                                            receivingReceiptItemGrid.columnHeaders.columns[j].allowMerging = true;
                                            receivingReceiptItemGrid.columnHeaders.setCellData(0, j, columnName);
                                        }
                                    }
                                }

                                if (i <= 9) {
                                    receivingReceiptItemGrid.columnHeaders.columns[i].allowMerging = true;
                                    receivingReceiptItemGrid.columnHeaders.setCellData(0, i, columnName);
                                }
                            }
                        </text>
                    }
                }
            }

            updateNavigateButtonsItems();

            btnMoveToFirstPageGridItem.addEventListener('click', function () {
                receivingReceiptItemsCollection.moveToFirstPage();
                updateNavigateButtonsItems();
            });

            btnMoveToPreviousPageGridItem.addEventListener('click', function () {
                receivingReceiptItemsCollection.moveToPreviousPage();
                updateNavigateButtonsItems();
            });

            btnMoveToNextPageGridItem.addEventListener('click', function () {
                receivingReceiptItemsCollection.moveToNextPage();
                updateNavigateButtonsItems();
            });

            btnMoveToLastPageGridItem.addEventListener('click', function () {
                receivingReceiptItemsCollection.moveToLastPage();
                updateNavigateButtonsItems();
            });
        }

        // ==================
        // Save RR - IsLocked
        // ==================
        function btnLockReceivingReceiptOnclick() {
            var receivingReceiptObject = new Object();
            receivingReceiptObject.BranchId = cboRRbranch.selectedValue;
            receivingReceiptObject.RRDate = cboRRDate.value.toLocaleDateString();
            receivingReceiptObject.RRNumber = document.getElementById('RRNumber').value;
            receivingReceiptObject.SupplierId = cboRRSupplier.selectedValue;
            receivingReceiptObject.TermId = cboRRTerm.selectedValue;
            receivingReceiptObject.DocumentReference = document.getElementById('RRDocReference').value;
            receivingReceiptObject.ManualRRNumber = document.getElementById('RRManualRRNumber').value;
            receivingReceiptObject.Remarks = document.getElementById('RRRemarks').value;
            receivingReceiptObject.ReceivedById = cboRRReceivedBy.selectedValue;
            receivingReceiptObject.PreparedById = cboRRPreparedBy.selectedValue;
            receivingReceiptObject.CheckedById = cboRRCheckedBy.selectedValue;
            receivingReceiptObject.ApprovedById = cboRRApprovedBy.selectedValue;
            var receivingReceiptData = JSON.stringify(receivingReceiptObject);

            var isValid = true;
            $('.requiredRR').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                }
                else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            if (isValid) {
                document.getElementById('btnLockReceivingReceipt').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Locking";
                $("#btnReceivingReceiptJournal").prop("disabled", true);
                $("#btnLockReceivingReceipt").prop("disabled", true);
                $("#btnUnlockReceivingReceipt").prop("disabled", true);
                $("#btnPrintReceivingReceipt").prop("disabled", true);
                $("#btnCloseReceivingReceipt").prop("disabled", true);

                var id = getParam('id');

                $.ajax({
                    type: "PUT",
                    url: '/api/receivingReceipt/lock/' + id,
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    data: receivingReceiptData,
                    statusCode: {
                        200: function () {
                            toastr.success("Lock Successful");
                            window.setTimeout(function () {
                                location.reload()
                            }, 1000);
                        },
                        404: function (message) {
                            toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                            document.getElementById('btnLockReceivingReceipt').innerHTML = "<i class='fa fa-lock'></i> Lock";
                            $("#btnLockReceivingReceipt").prop("disabled", false);
                            $("#btnCloseReceivingReceipt").prop("disabled", false);
                        },
                        400: function (message) {
                            toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                            document.getElementById('btnLockReceivingReceipt').innerHTML = "<i class='fa fa-lock'></i> Lock";
                            $("#btnLockReceivingReceipt").prop("disabled", false);
                            $("#btnCloseReceivingReceipt").prop("disabled", false);
                        },
                        500: function (message) {
                            toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                            document.getElementById('btnLockReceivingReceipt').innerHTML = "<i class='fa fa-lock'></i> Lock";
                            $("#btnLockReceivingReceipt").prop("disabled", false);
                            $("#btnCloseReceivingReceipt").prop("disabled", false);
                        }
                    },
                });
            } else {
                toastr.error("Invalid Entry");
            }
        }

        // ================
        // Edit RR - Unlock
        // ================
        function btnUnlockReceivingReceiptOnclick() {
            document.getElementById('btnUnlockReceivingReceipt').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Unlocking";
            $("#btnReceivingReceiptJournal").prop("disabled", true);
            $("#btnLockReceivingReceipt").prop("disabled", true);
            $("#btnUnlockReceivingReceipt").prop("disabled", true);
            $("#btnPrintReceivingReceipt").prop("disabled", true);
            $("#btnCloseReceivingReceipt").prop("disabled", true);

            var id = getParam('id');

            $.ajax({
                type: "PUT",
                url: '/api/receivingReceipt/unlock/' + id,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Unlock Successful");
                        window.setTimeout(function () {
                            location.reload()
                        }, 1000);
                    },
                    404: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                        document.getElementById('btnUnlockReceivingReceipt').innerHTML = "<i class='fa fa-unlock'></i> Unlock";
                        $("#btnReceivingReceiptJournal").prop("disabled", false);
                        $("#btnUnlockReceivingReceipt").prop("disabled", false);
                        $("#btnPrintReceivingReceipt").prop("disabled", false);
                        $("#btnCloseReceivingReceipt").prop("disabled", false);
                    },
                    400: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                        document.getElementById('btnUnlockReceivingReceipt').innerHTML = "<i class='fa fa-unlock'></i> Unlock";
                        $("#btnReceivingReceiptJournal").prop("disabled", false);
                        $("#btnUnlockReceivingReceipt").prop("disabled", false);
                        $("#btnPrintReceivingReceipt").prop("disabled", false);
                        $("#btnCloseReceivingReceipt").prop("disabled", false);
                    },
                    500: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                        document.getElementById('btnUnlockReceivingReceipt').innerHTML = "<i class='fa fa-unlock'></i> Unlock";
                        $("#btnReceivingReceiptJournal").prop("disabled", false);
                        $("#btnUnlockReceivingReceipt").prop("disabled", false);
                        $("#btnPrintReceivingReceipt").prop("disabled", false);
                        $("#btnCloseReceivingReceipt").prop("disabled", false);
                    }
                }
            });
        }

        // ========
        // Print RR
        // ========
        function btnPrintReceivingReceiptOnclick() {
            var id = getParam('id');
            var pirntLink = "/RepReceivingReceipt/ReceivingReceipt?RRId=" + id;
            window.open(pirntLink, '_blank');
        }

        // =========
        // PO Status
        // =========
        function RRForPOSupplier_OnClick() {
            $('#POStatus').modal({
                show: true,
                backdrop: 'static'
            });

            $('#loadingPOStatus').show();
            document.getElementById("loadingPOStatus").innerHTML = "<b><i class='fa fa-spinner fa-spin'></i></b>";
            $('#loadingPOPanel').hide();
            $('#cmdApplyPOStatusButton').prop("disabled", true);

            setTimeout(function () {
                getPOInPOStatusForComboBox();
            }, 500);
        }

        // ==================================
        // GET PO for PO Status for Combo Box
        // ==================================
        function getPOInPOStatusForComboBox() {
            var purchaseOrdertatusObservableArray = new wijmo.collections.ObservableArray();
            var supplierId = cboRRSupplier.selectedValue;
            $.ajax({
                url: '/api/receivingReceiptItem/dropdown/list/purchaseOrder/' + supplierId,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            purchaseOrdertatusObservableArray.push({
                                Id: results[i]["Id"],
                                PONumber: results[i]["PONumber"],
                                PODate: results[i]["PODate"],
                                PODetails: results[i]["PONumber"] + " (" + (results[i]["PODate"]).replace(/\//g, '-') + ")"
                            });
                        }
                    }

                    var disabled = true;
                    if (results.length > 0) {
                        disabled = false;
                    }

                    cboPONumberPOStatus.dispose();
                    cboPONumberPOStatus = new wijmo.input.ComboBox('#cboPONumberPOStatus', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: purchaseOrdertatusObservableArray,
                        displayMemberPath: "PODetails",
                        selectedValuePath: "Id",
                        onSelectedIndexChanged: function () {
                            getPOBySupplierInPOStatus();
                        }
                    });

                    setTimeout(function () { getBranchInPOStatusForComboBox(); }, 1000);
                }
            });
        }

        // ==================================
        // GET PO for PO Status for Combo Box
        // ==================================
        function getBranchInPOStatusForComboBox() {
            var branchObservableArray = new wijmo.collections.ObservableArray();
            var cboRRHeaderBranchId = cboRRbranch.selectedValue;
            $.ajax({
                url: '/api/receivingReceiptItem/dropdown/list/branch',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            branchObservableArray.push({
                                Id: results[i]["Id"],
                                Branch: results[i]["Branch"]
                            });
                        }
                    }

                    var disabled = true;
                    if (results.length > 0) {
                        disabled = false;
                    }

                    cboBranchPOStatus.dispose();
                    cboBranchPOStatus = new wijmo.input.ComboBox('#cboBranchPOStatus', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: branchObservableArray,
                        displayMemberPath: "Branch",
                        selectedValuePath: "Id",
                        selectedValue: cboRRHeaderBranchId
                    });

                    setTimeout(function () { getPOBySupplierInPOStatus(); }, 1000);
                }
            });
        }

        // ========================================
        // Purchase Order Line / Item for PO Status
        // ========================================
        function getPurchaseOrderItemForPOSTatus() {
            var purchaseOrderStatusObservableArray = new wijmo.collections.ObservableArray;
            if (cboPONumberPOStatus.selectedValue != null) {
                var POId = cboPONumberPOStatus.selectedValue;
                $.ajax({
                    url: '/api/receivingReceiptItem/popUp/list/purchaseOrderStatus/' + POId,
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    data: {},
                    success: function (results) {
                        $('#cmdApplyPOStatusButton').prop("disabled", false);
                        if (results.length > 0) {
                            for (i = 0; i < results.length; i++) {
                                purchaseOrderStatusObservableArray.push({
                                    POId: results[i]["POId"],
                                    ItemId: results[i]["ItemId"],
                                    ItemCode: results[i]["ItemCode"],
                                    ItemDescription: results[i]["ItemDescription"],
                                    Particulars: results[i]["Particulars"],
                                    Amount: results[i]["Amount"],
                                    BaseUnitId: results[i]["BaseUnitId"],
                                    BaseUnit: results[i]["BaseUnit"],
                                    BaseQuantity: results[i]["BaseQuantity"],
                                    BaseQuantityDisplay: parseFloat(results[i]["BaseQuantity"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                    BaseCost: results[i]["BaseCost"],
                                    BaseCostDisplay: parseFloat(results[i]["BaseCost"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                    ReceivedQuantity: results[i]["ReceivedQuantity"],
                                    ReceivedQuantityDisplay: parseFloat(results[i]["ReceivedQuantity"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                    BalanceQuantity: results[i]["BalanceQuantity"],
                                    BalanceQuantityDisplay: parseFloat(results[i]["BalanceQuantity"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                    PickButton: "<button class='btn btn-primary btn-xs btn-block' onclick='btnPOStatusPickOnclick()'><i class='fa fa-hand-o-right'></i> Pick</button>",
                                    Pick: (results[i]["BaseQuantity"] - results[i]["ReceivedQuantity"]) == 0 ? "<button class='btn btn-primary btn-xs' onclick='pickQuantity_OnClick()'><i class='fa fa-arrow-right'></i></button>" : "<button class='btn btn-warning btn-xs' onclick='pickReverseQuantity_OnClick()'><i class='fa fa-arrow-left'></i></button>",
                                    Balance: results[i]["BaseQuantity"] - results[i]["ReceivedQuantity"],
                                    BalanceDisplay: parseFloat(results[i]["BaseQuantity"] - results[i]["ReceivedQuantity"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                });
                            }
                        } else {
                            $('#cmdApplyPOStatusButton').prop("disabled", true);
                        }

                        $('#loadingPOStatus').hide();
                        $('#loadingPOPanel').show();
                    }
                });
            } else {
                $('#cmdApplyPOStatusButton').prop("disabled", true);
                $('#loadingPOStatus').hide();
                $('#loadingPOPanel').show();
            }

            return purchaseOrderStatusObservableArray;
        }

        function btnPOStatusPickOnclick() {
            $('#poStatusPickedAmountModal').modal({
                show: true,
                backdrop: 'static'
            });

            $("#btnSalesInvoiceStatusPerCustomerPickAmountContinue").prop("disabled", false);
            $("#btnSalesInvoiceStatusPerCustomerPickAmountCloseModal").prop("disabled", false);

            purchaseOrderStatusCollectionView.editItem(purchaseOrderStatusCollectionView.currentItem);
            var poStatusCollectionView = purchaseOrderStatusCollectionView.currentEditItem;
            var balance = poStatusCollectionView.BalanceQuantity;
            document.getElementById("inpPOSTatusPickedQuantity").value = parseFloat(balance).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        }


        // =================================================
        // Sales Invoice Status Per Customer Amount Continue
        // =================================================
        function btnSalesInvoiceStatusPerCustomerPickAmountContinueOnclick() {
            $("#btnSalesInvoiceStatusPerCustomerPickAmountContinue").prop("disabled", true);
            $("#btnSalesInvoiceStatusPerCustomerPickAmountCloseModal").prop("disabled", true);

            var isValid = true;
            $('.requiredPickedAmount').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                } else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            if (isValid) {
                purchaseOrderStatusCollectionView.editItem(purchaseOrderStatusCollectionView.currentItem);
                var poStatusCollectionView = purchaseOrderStatusCollectionView.currentEditItem;
                var balance = document.getElementById("inpPOSTatusPickedQuantity").value.split(",").join("");

                if (isNaN(balance)) {
                    toastr.error("Invalid Entry");

                    $("#btnSalesInvoiceStatusPerCustomerPickAmountContinue").prop("disabled", false);
                    $("#btnSalesInvoiceStatusPerCustomerPickAmountCloseModal").prop("disabled", false);
                } else {
                    poStatusCollectionView.Balance = balance;
                    poStatusCollectionView.BalanceDisplay = parseFloat(balance).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                    purchaseOrderStatusCollectionView.refresh();
                    purchasrOrderStatusFlexGrid.refresh();

                    $('#poStatusPickedAmountModal').modal('hide');
                }
            } else {
                toastr.error("Invalid Entry");
            }
        }


        // =========================
        // Update Navigation Buttons
        // =========================
        function updateNavigateButtonsPOStatus() {
            if (purchaseOrderStatusCollectionView.pageSize <= 0) {
                document.getElementById('naviagtionPageGridPOStatus').style.display = 'none';
                return;
            }
            document.getElementById('naviagtionPageGridPOStatus').style.display = 'block';
            if (purchaseOrderStatusCollectionView.pageIndex === 0) {
                btnMoveToFirstPageGridPOStatus.setAttribute('disabled', 'disabled');
                btnMoveToPreviousPageGridPOStatus.setAttribute('disabled', 'disabled');
                btnMoveToNextPageGridPOStatus.removeAttribute('disabled');
                btnMoveToLastPageGridPOStatus.removeAttribute('disabled');
            } else if (purchaseOrderStatusCollectionView.pageIndex === (purchaseOrderStatusCollectionView.pageCount - 1)) {
                btnMoveToFirstPageGridPOStatus.removeAttribute('disabled');
                btnMoveToPreviousPageGridPOStatus.removeAttribute('disabled');
                btnMoveToNextPageGridPOStatus.setAttribute('disabled', 'disabled');
                btnMoveToLastPageGridPOStatus.setAttribute('disabled', 'disabled');
            } else {
                btnMoveToFirstPageGridPOStatus.removeAttribute('disabled');
                btnMoveToPreviousPageGridPOStatus.removeAttribute('disabled');
                btnMoveToNextPageGridPOStatus.removeAttribute('disabled');
                btnMoveToLastPageGridPOStatus.removeAttribute('disabled');
            }
            btnCurrentPageGridPOStatus.innerHTML = (purchaseOrderStatusCollectionView.pageIndex + 1) + ' / ' + purchaseOrderStatusCollectionView.pageCount;
        }

        // ===============
        // PO In PO Status
        // ===============
        function getPOBySupplierInPOStatus() {
            purchaseOrderStatusCollectionView = new wijmo.collections.CollectionView(getPurchaseOrderItemForPOSTatus());
            purchaseOrderStatusCollectionView.canFilter = true;
            purchaseOrderStatusCollectionView.pageSize = 10;

            var filterText = '';
            $('#inputFilterPOItem').keyup(function () {
                filterText = this.value.toLowerCase();
                purchaseOrderStatusCollectionView.refresh();
            });

            purchaseOrderStatusCollectionView.filter = function (item) {
                return !filterText || (item.ItemCode.toLowerCase().indexOf(filterText) > -1)
                    || (item.ItemDescription.toLowerCase().indexOf(filterText) > -1)
                    || (item.BaseUnit.toLowerCase().indexOf(filterText) > -1);
            }

            purchaseOrderStatusCollectionView.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsPOStatus();
            });

            // Flex Grid for Item
            purchasrOrderStatusFlexGrid.dispose();
            purchasrOrderStatusFlexGrid = new wijmo.grid.FlexGrid('#purchasrOrderStatusFlexGrid');
            purchasrOrderStatusFlexGrid.initialize({
                columns: [
                            {
                                "header": "Code",
                                "binding": "ItemCode",
                                "allowSorting": true,
                                "width": "1.5*",
                                "isReadOnly": true,
                            },
                            {
                                "header": "Description",
                                "binding": "ItemDescription",
                                "allowSorting": true,
                                "isReadOnly": true,
                                "width": "2*"
                            },
                            {
                                "header": "Unit",
                                "binding": "BaseUnit",
                                "allowSorting": true,
                                "isReadOnly": true,
                                "width": "0.7*"
                            },
                            {
                                "header": "Purchased",
                                "binding": "BaseQuantityDisplay",
                                "allowSorting": true,
                                "align": "right",
                                "isReadOnly": true,
                                "width": "1*"
                            },
                            {
                                "header": "Received",
                                "binding": "ReceivedQuantityDisplay",
                                "allowSorting": true,
                                "align": "right",
                                "isReadOnly": true,
                                "width": "1*",
                            },
                            {
                                "header": "Balance",
                                "binding": "BalanceQuantityDisplay",
                                "allowSorting": true,
                                "align": "right",
                                "isReadOnly": true,
                                "width": "1*"
                            },
                            {
                                "header": "Pick",
                                "binding": "PickButton",
                                "width": 60,
                                "align": "center",
                                "isReadOnly": true,
                                "isContentHtml": true
                            },
                            {
                                "header": "Quantity",
                                "binding": "BalanceDisplay",
                                "allowSorting": true,
                                "width": "1*",
                                "align": "right",
                                "isReadOnly": true,
                                "isContentHtml": true
                            },
                ],
                autoGenerateColumns: false,
                itemsSource: purchaseOrderStatusCollectionView,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row,
            });

            purchasrOrderStatusFlexGrid.trackChanges = true;

            // Merge column Headers
            var hr = new wijmo.grid.Row();
            purchasrOrderStatusFlexGrid.allowMerging = wijmo.grid.AllowMerging.AllHeaders;
            purchasrOrderStatusFlexGrid.columnHeaders.rows.push(hr);
            purchasrOrderStatusFlexGrid.columnHeaders.rows[0].allowMerging = true;

            purchasrOrderStatusFlexGrid.columnHeaders.columns[0].allowMerging = true;
            purchasrOrderStatusFlexGrid.columnHeaders.setCellData(0, 0, 'Code');

            purchasrOrderStatusFlexGrid.columnHeaders.columns[1].allowMerging = true;
            purchasrOrderStatusFlexGrid.columnHeaders.setCellData(0, 1, 'Description');

            purchasrOrderStatusFlexGrid.columnHeaders.columns[2].allowMerging = true;
            purchasrOrderStatusFlexGrid.columnHeaders.setCellData(0, 2, 'Unit');

            for (var columnQuantityTopAssigned = 3; columnQuantityTopAssigned <= 5; columnQuantityTopAssigned++) {
                purchasrOrderStatusFlexGrid.columnHeaders.setCellData(0, columnQuantityTopAssigned, 'Quantities');
            }

            purchasrOrderStatusFlexGrid.columnHeaders.columns[6].allowMerging = true;
            purchasrOrderStatusFlexGrid.columnHeaders.setCellData(0, 6, 'Pick');

            purchasrOrderStatusFlexGrid.columnHeaders.columns[7].allowMerging = true;
            purchasrOrderStatusFlexGrid.columnHeaders.setCellData(0, 7, 'Quantity');

            if (!isPOStatusClicked) {
                updateNavigateButtonsPOStatus();

                btnMoveToFirstPageGridPOStatus.addEventListener('click', function () {
                    purchaseOrderStatusCollectionView.moveToFirstPage();
                    currentPOStatusPageIndex = purchaseOrderStatusCollectionView.pageIndex + 1;
                    updateNavigateButtonsPOStatus();
                });

                btnMoveToPreviousPageGridPOStatus.addEventListener('click', function () {
                    purchaseOrderStatusCollectionView.moveToPreviousPage();
                    currentPOStatusPageIndex = purchaseOrderStatusCollectionView.pageIndex + 1;
                    updateNavigateButtonsPOStatus();
                });

                btnMoveToNextPageGridPOStatus.addEventListener('click', function () {
                    purchaseOrderStatusCollectionView.moveToNextPage();
                    currentPOStatusPageIndex = purchaseOrderStatusCollectionView.pageIndex + 1;
                    updateNavigateButtonsPOStatus();
                });

                btnMoveToLastPageGridPOStatus.addEventListener('click', function () {
                    purchaseOrderStatusCollectionView.moveToLastPage();
                    currentPOStatusPageIndex = purchaseOrderStatusCollectionView.pageIndex + 1;
                    updateNavigateButtonsPOStatus();
                });

                isPOStatusClicked = true;
            }
        }

        // =============
        // PICK quantity
        // =============
        function pickQuantity_OnClick() {
            purchaseOrderStatusCollectionView.editItem(purchaseOrderStatusCollectionView.currentItem);
            var purchaseOrderStatusItem = purchaseOrderStatusCollectionView.currentEditItem;
            var balance = purchaseOrderStatusItem.BaseQuantity - purchaseOrderStatusItem.ReceivedQuantity;
            if (balance > 0) {
                purchaseOrderStatusItem.BalanceDisplay = formatDecimalValues(balance);
                purchaseOrderStatusItem.Balance = balance;
                purchaseOrderStatusItem.Pick = "<button class='btn btn-warning btn-xs' onclick='pickReverseQuantity_OnClick()'><i class='fa fa-arrow-left'></i></button>";
                purchaseOrderStatusCollectionView.refresh();
                purchasrOrderStatusFlexGrid.refresh();
            }
        }

        // ===============
        // REPICK quantity
        // ===============
        function pickReverseQuantity_OnClick() {
            purchaseOrderStatusCollectionView.editItem(purchaseOrderStatusCollectionView.currentItem);
            var purchaseOrderStatusItem = purchaseOrderStatusCollectionView.currentEditItem;
            purchaseOrderStatusItem.BalanceDisplay = formatDecimalValues(0);
            purchaseOrderStatusItem.Balance = 0;
            purchaseOrderStatusItem.Pick = "<button class='btn btn-primary btn-xs' onclick='pickQuantity_OnClick()'><i class='fa fa-arrow-right'></i></button>";
            purchaseOrderStatusCollectionView.refresh();
            purchasrOrderStatusFlexGrid.refresh();
        }

        // ==========================
        // Apply ALL PO Items Confirm
        // ==========================
        function cmdApplyAllPOStatusButton_OnClick() {
            $('#applyAllConfirmPOStatus').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById('cmdConfirmApplyAllPOStatusPOItems').innerHTML = "<i class='fa fa-check'></i> Apply";
            $("#cmdConfirmApplyAllPOStatusPOItems").prop("disabled", false);
            $("#cmdCloseButtonApplyAllPOStatusPOItems").prop("disabled", false);
        }

        // Confirm Apply ALL PO
        function btnConfrimApplyAllPOItems_OnClick() {
            document.getElementById('cmdConfirmApplyAllPOStatusPOItems').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Applying";
            $("#cmdConfirmApplyAllPOStatusPOItems").prop("disabled", true);
            $("#cmdCloseButtonApplyAllPOStatusPOItems").prop("disabled", true);

            var purchaseOrderArrays = new Array();

            purchaseOrderStatusCollectionView.moveToFirstPage();

            for (var p = 1; p <= purchaseOrderStatusCollectionView.pageCount; p++) {
                for (var i = 0; i < purchaseOrderStatusCollectionView.items.length; i++) {
                    var item = purchaseOrderStatusCollectionView.items[i];
                    if (item.Balance > 0) {
                        purchaseOrderArrays.push({
                            BranchId: cboBranchPOStatus.selectedValue,
                            POId: item.POId,
                            ItemId: item.ItemId,
                            Quantity: item.Balance,
                            BaseCost: item.BaseCost
                        });
                    }
                }

                purchaseOrderStatusCollectionView.moveToNextPage();
                if (p == purchaseOrderStatusCollectionView.pageCount) {
                    purchaseOrderStatusCollectionView.moveToPage(currentPOStatusPageIndex - 1);
                }
            }

            var POItemObject = new Object();
            var POItemObjectData = JSON.stringify(purchaseOrderArrays);

            var RRId = getParam('id');

            $.ajax({
                url: '/api/receivingReceiptItem/popUp/apply/purchaseOrderStatus/' + RRId,
                type: "POST",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: POItemObjectData,
                statusCode: {
                    200: function () {
                        toastr.success("Apply Successful");
                        $("#cmdConfirmApplyAllPOStatusPOItems").prop("disabled", true);
                        $("#cmdCloseButtonApplyAllPOStatusPOItems").prop("disabled", true);

                        $('#applyAllConfirmPOStatus').modal('hide');
                        $('#POStatus').modal('hide');

                        refreshReceivingReceiptFlexGrid();
                    },
                    404: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                        $('#applyAllConfirmPOStatus').modal('hide');
                        $('#POStatus').modal('hide');
                        document.getElementById('cmdConfirmApplyAllPOStatusPOItems').innerHTML = "<i class='fa fa-check'></i> Apply";
                        $("#cmdConfirmApplyAllPOStatusPOItems").prop("disabled", false);
                        $("#cmdCloseButtonApplyAllPOStatusPOItems").prop("disabled", false);
                    },
                    400: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                        $('#applyAllConfirmPOStatus').modal('hide');
                        $('#POStatus').modal('hide');
                        document.getElementById('cmdConfirmApplyAllPOStatusPOItems').innerHTML = "<i class='fa fa-check'></i> Apply";
                        $("#cmdConfirmApplyAllPOStatusPOItems").prop("disabled", false);
                        $("#cmdCloseButtonApplyAllPOStatusPOItems").prop("disabled", false);
                    },
                    500: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                        $('#applyAllConfirmPOStatus').modal('hide');
                        $('#POStatus').modal('hide');
                        document.getElementById('cmdConfirmApplyAllPOStatusPOItems').innerHTML = "<i class='fa fa-check'></i> Apply";
                        $("#cmdConfirmApplyAllPOStatusPOItems").prop("disabled", false);
                        $("#cmdCloseButtonApplyAllPOStatusPOItems").prop("disabled", false);
                    }
                }
            });
        }

        // ========================
        // GET Branch for Combo Box
        // ========================
        function getBranchesPOItemForComboBox(branchIdSelectedValue, POIdSelectedValue, ItemIdSelectedValue, VATIdSelectedValue, WTAXSelectedValue) {
            var branchesObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/receivingReceiptItem/dropdown/list/branch',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            branchesObservableArray.push({
                                Id: results[i]["Id"],
                                Branch: results[i]["Branch"]
                            });
                        }
                    }

                    cboRRItemBranch.dispose();
                    cboRRItemBranch = new wijmo.input.ComboBox('#cboRRItemBranch', {
                        isEditable: false,
                        placeholder: "Select Branch",
                        itemsSource: branchesObservableArray,
                        displayMemberPath: "Branch",
                        selectedValuePath: "Id",
                        selectedValue: branchIdSelectedValue
                    });

                    getPOForComboBox(POIdSelectedValue, ItemIdSelectedValue, VATIdSelectedValue, WTAXSelectedValue);
                }
            });
        }

        // ===========================
        // GET PO for PO for Combo Box
        // ===========================
        function getPOForComboBox(POIdSelectedValue, ItemIdSelectedValue, VATIdSelectedValue, WTAXSelectedValue) {
            var purchaseOrderObservableArray = new wijmo.collections.ObservableArray();
            var supplierId = cboRRSupplier.selectedValue;
            $.ajax({
                url: '/api/receivingReceiptItem/dropdown/list/purchaseOrder/' + supplierId,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        $("#cmdSaveRRLinesButton").prop("disabled", false);
                        for (i = 0; i < results.length; i++) {
                            purchaseOrderObservableArray.push({
                                Id: results[i]["Id"],
                                PONumber: results[i]["PONumber"],
                                PODate: results[i]["PODate"],
                                PODetails: results[i]["PONumber"] + " (" + (results[i]["PODate"]).replace(/\//g, '-') + ")"
                            });
                        }
                    }

                    var disabled = true;
                    if (results.length > 0) {
                        disabled = false;
                        $("#cmdSaveRRLinesButton").prop("disabled", false);
                    } else {
                        $("#cmdSaveRRLinesButton").prop("disabled", true);
                    }

                    cboRRItemPONumber.dispose();
                    cboRRItemPONumber = new wijmo.input.ComboBox('#cboRRItemPONumber', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: purchaseOrderObservableArray,
                        displayMemberPath: "PODetails",
                        selectedValuePath: "Id",
                        selectedValue: POIdSelectedValue,
                        onSelectedIndexChanged: function () {
                            $("#cmdSaveRRLinesButton").prop("disabled", false);
                            getPOItemForComboBox(ItemIdSelectedValue, VATIdSelectedValue, WTAXSelectedValue);
                        }
                    });

                    getPOItemForComboBox(ItemIdSelectedValue, VATIdSelectedValue, WTAXSelectedValue);
                }
            });
        }

        // =================================
        // GET PO Items for PO for Combo Box
        // =================================
        function getPOItemForComboBox(ItemIdSelectedValue, VATIdSelectedValue, WTAXSelectedValue) {
            var purchaseOrderItemsObservableArray = new wijmo.collections.ObservableArray();
            if (cboRRItemPONumber.selectedValue != null) {
                var POId = cboRRItemPONumber.selectedValue;
                $.ajax({
                    url: '/api/receivingReceiptItem/dropdown/list/item/' + POId,
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    success: function (results) {
                        if (results.length > 0) {
                            for (i = 0; i < results.length; i++) {
                                purchaseOrderItemsObservableArray.push({
                                    POId: results[i]["POId"],
                                    ItemId: results[i]["ItemId"],
                                    ItemCode: results[i]["ItemCode"],
                                    ItemDescription: results[i]["ItemDescription"],
                                    UnitId: results[i]["UnitId"],
                                    Unit: results[i]["Unit"],
                                    Quantity: results[i]["Quantity"],
                                    Cost: results[i]["Cost"],
                                    Amount: results[i]["Amount"],
                                    VATId: results[i]["ItemVATId"],
                                    WTAXId: results[i]["ItemWTAXId"]
                                });
                            }
                        }

                        var disabled = true;
                        if (results.length > 0) {
                            disabled = false;
                        } else {
                            $("#cmdSaveRRLinesButton").prop("disabled", true);
                        }

                        cboRRLineItemCode.dispose();
                        cboRRLineItemCode = new wijmo.input.ComboBox('#cboRRLineItemCode', {
                            disabled: disabled,
                            isEditable: false,
                            itemsSource: purchaseOrderItemsObservableArray,
                            displayMemberPath: "ItemCode",
                            selectedValuePath: "ItemId",
                            selectedValue: ItemIdSelectedValue,
                            onSelectedIndexChanged: function () {
                                $("#cmdSaveRRLinesButton").prop("disabled", false);
                                cboRRLineItemDescription.selectedValue = this.selectedValue;
                            }
                        });

                        cboRRLineItemDescription.dispose();
                        cboRRLineItemDescription = new wijmo.input.ComboBox('#cboRRLineItemDescription', {
                            disabled: disabled,
                            isEditable: false,
                            itemsSource: purchaseOrderItemsObservableArray,
                            displayMemberPath: "ItemDescription",
                            selectedValuePath: "ItemId",
                            selectedValue: ItemIdSelectedValue,
                            onSelectedIndexChanged: function () {
                                $("#cmdSaveRRLinesButton").prop("disabled", false);
                                cboRRLineItemCode.selectedValue = this.selectedValue;

                                document.getElementById('RRLine_Cost').value = formatDecimalValues(this.selectedItem["Cost"]);
                                computeAmountAndTaxes();

                                getUnitForComboBox(VATIdSelectedValue, WTAXSelectedValue);
                            }
                        });

                        if (receivingReceiptId == 0) {
                            if (cboRRLineItemDescription.selectedValue != null) {
                                document.getElementById('RRLine_Cost').value = formatDecimalValues(cboRRLineItemDescription.selectedItem["Cost"]);
                                computeAmountAndTaxes();
                            } else {
                                document.getElementById('RRLine_Cost').value = formatDecimalValues(0);
                                computeAmountAndTaxes();
                            }
                        }

                        getUnitForComboBox(VATIdSelectedValue, WTAXSelectedValue);
                    }
                });
            } else {
                cboRRLineItemCode.dispose();
                cboRRLineItemCode = new wijmo.input.ComboBox('#cboRRLineItemCode', {
                    disabled: true,
                    isEditable: false,
                    itemsSource: purchaseOrderItemsObservableArray,
                    displayMemberPath: "ItemCode",
                    selectedValuePath: "ItemId",
                    selectedValue: ItemIdSelectedValue
                });

                cboRRLineItemDescription.dispose();
                cboRRLineItemDescription = new wijmo.input.ComboBox('#cboRRLineItemDescription', {
                    disabled: true,
                    isEditable: false,
                    itemsSource: purchaseOrderItemsObservableArray,
                    displayMemberPath: "ItemDescription",
                    selectedValuePath: "ItemId",
                    selectedValue: ItemIdSelectedValue
                });

                if (receivingReceiptId == 0) {
                    if (cboRRLineItemDescription.selectedValue != null) {
                        document.getElementById('RRLine_Cost').value = formatDecimalValues(cboRRLineItemDescription.selectedItem["Cost"]);
                        computeAmountAndTaxes();
                    } else {
                        document.getElementById('RRLine_Cost').value = formatDecimalValues(0);
                        computeAmountAndTaxes();
                    }
                }

                getUnitForComboBox(VATIdSelectedValue, WTAXSelectedValue);
            }
        }

        // =============
        // Get Item Unit
        // =============
        function getUnitForComboBox(VATIdSelectedValue, WTAXSelectedValue) {
            var unitsObservableArray = new wijmo.collections.ObservableArray();
            if (cboRRLineItemDescription.selectedValue != null) {
                $.ajax({
                    url: '/api/receivingReceiptItem/dropdown/list/itemUnit/' + cboRRLineItemDescription.selectedValue,
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    success: function (results) {
                        if (results.length > 0) {
                            for (i = 0; i < results.length; i++) {
                                unitsObservableArray.push({
                                    UnitId: results[i]["UnitId"],
                                    Unit: results[i]["Unit"]
                                });
                            }
                        }

                        var disabled = true;
                        if (results.length > 0) {
                            disabled = false;
                        } else {
                            $("#cmdSaveRRLinesButton").prop("disabled", true);
                        }

                        cboRRItemUnit.dispose();
                        cboRRItemUnit = new wijmo.input.ComboBox('#cboRRItemUnit', {
                            disabled: disabled,
                            isEditable: false,
                            itemsSource: unitsObservableArray,
                            displayMemberPath: "Unit",
                            selectedValuePath: "UnitId"
                        });

                        getTaxTypeForComboBox(VATIdSelectedValue, WTAXSelectedValue);
                    }
                });
            } else {
                cboRRItemUnit.dispose();
                cboRRItemUnit = new wijmo.input.ComboBox('#cboRRItemUnit', {
                    disabled: true,
                    isEditable: false,
                    itemsSource: unitsObservableArray,
                    displayMemberPath: "Unit",
                    selectedValuePath: "UnitId"
                });

                getTaxTypeForComboBox(VATIdSelectedValue, WTAXSelectedValue);
                $("#cmdSaveRRLinesButton").prop("disabled", true);
            }
        }

        // ===================
        // Get Artile Tax Type
        // ===================
        function getTaxTypeForComboBox(VATIdSelectedValue, WTAXSelectedValue) {
            var taxTypesObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/receivingReceiptItem/dropdown/list/TAX',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            taxTypesObservableArray.push({
                                Id: results[i]["Id"],
                                TaxType: results[i]["TaxType"],
                                TaxRate: results[i]["TaxRate"],
                                IsInclusive: results[i]["IsInclusive"],
                            });
                        }
                    }

                    var disabled = true;
                    if (results.length > 0) {
                        disabled = false;
                    } else {
                        $("#cmdSaveRRLinesButton").prop("disabled", true);
                    }

                    var VATIdValue = VATIdSelectedValue;
                    var WTAXValue = WTAXSelectedValue;
                    if (receivingReceiptId == 0) {
                        if (cboRRLineItemDescription.selectedValue != null) {
                            VATIdValue = cboRRLineItemDescription.selectedItem["VATId"];
                            WTAXValue = cboRRLineItemDescription.selectedItem["WTAXId"];
                        } else {
                            VATIdValue = 0;
                            WTAXValue = 0;
                        }
                    }

                    cboRRItemVAT.dispose();
                    cboRRItemVAT = new wijmo.input.ComboBox('#cboRRItemVAT', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: taxTypesObservableArray,
                        displayMemberPath: "TaxType",
                        selectedValuePath: "Id",
                        selectedValue: VATIdValue,
                        onSelectedIndexChanged: function () {
                            document.getElementById('RRLine_VATRate').value = formatDecimalValues(this.selectedItem["TaxRate"]);
                            computeTAX();
                        }
                    });

                    cboForWTAXTaxType.dispose();
                    cboForWTAXTaxType = new wijmo.input.ComboBox('#cboForWTAXTaxType', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: taxTypesObservableArray,
                        displayMemberPath: "TaxType",
                        selectedValuePath: "Id",
                        selectedValue: WTAXValue,
                        onSelectedIndexChanged: function () {
                            document.getElementById('RRLine_WTAXRate').value = formatDecimalValues(this.selectedItem["TaxRate"]);
                            computeTAX();
                        }
                    });

                    document.getElementById('RRLine_VATRate').value = formatDecimalValues(cboRRItemVAT.selectedItem["TaxRate"]);
                    document.getElementById('RRLine_WTAXRate').value = formatDecimalValues(cboForWTAXTaxType.selectedItem["TaxRate"]);

                    computeTAX();

                    $("#loadingModalItem").hide();
                    $("#RRLinesDetailForm").show();
                }
            });
        }

        // =================
        // ADD Item RR Lines
        // =================
        function btnAddReceivingReceiptItemOnclick() {
            $('#RRLinesEdit').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById('cmdSaveRRLinesButton').innerHTML = "<i class='fa fa-save'></i> Save";
            $("#cmdSaveRRLinesButton").prop("disabled", true);
            $("#cmdRRLinesDetailCloseButton").prop("disabled", false);

            $("#loadingModalItem").show();
            document.getElementById("loadingModalItem").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#RRLinesDetailForm").hide();

            $('.requiredRRLine').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            var cboRRHeaderBranchId = cboRRbranch.selectedValue;
            getBranchesPOItemForComboBox(cboRRHeaderBranchId,0,0,0,0);
            receivingReceiptId = 0;
            document.getElementById('RRLine_Particulars').value = "NA";
            document.getElementById('RRLine_Quantity').value = formatDecimalValues(1);
            document.getElementById('RRLine_Cost').value = formatDecimalValues(0);
            document.getElementById('RRLine_Amount').value = formatDecimalValues(0);
            document.getElementById('RRLine_VATRate').value = formatDecimalValues(0);
            document.getElementById('RRLine_VATAmount').value = formatDecimalValues(0);
            document.getElementById('RRLine_WTAXRate').value = formatDecimalValues(0);
            document.getElementById('RRLine_WTAXAmount').value = formatDecimalValues(0);
        }

        // ==================
        // EDIT Item RR Lines
        // ==================
        function btnItemRRLinesEdit_OnClick() {
            $('#RRLinesEdit').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById('cmdSaveRRLinesButton').innerHTML = "<i class='fa fa-save'></i> Save";
            $("#cmdSaveRRLinesButton").prop("disabled", true);
            $("#cmdRRLinesDetailCloseButton").prop("disabled", false);

            $("#loadingModalItem").show();
            document.getElementById("loadingModalItem").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#RRLinesDetailForm").hide();

            $('.requiredRRLine').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            receivingReceiptItemsCollection.editItem(receivingReceiptItemsCollection.currentItem);
            var item = receivingReceiptItemsCollection.currentEditItem;

            getBranchesPOItemForComboBox(item.BranchId, item.POId, item.ItemId, item.VATId, item.WTAXId);
            receivingReceiptId = item.Id;
            document.getElementById('RRLine_Particulars').value = "NA";
            document.getElementById('RRLine_Quantity').value = formatDecimalValues(item.Quantity);
            document.getElementById('RRLine_Cost').value = formatDecimalValues(item.Cost);
            document.getElementById('RRLine_Amount').value = formatDecimalValues(item.Amount);
            document.getElementById('RRLine_VATRate').value = formatDecimalValues(item.VATRate);
            document.getElementById('RRLine_VATAmount').value = formatDecimalValues(item.VATAmount);
            document.getElementById('RRLine_WTAXRate').value = formatDecimalValues(item.WTAXRate);
            document.getElementById('RRLine_WTAXAmount').value = formatDecimalValues(item.WTAXAmount);
        }

        // =============
        // SAVE RR Lines
        // =============
        function cmdRRLinesSaveButton_OnClick() {
            var receivingReceiptItemObject = new Object();
            var RRId = getParam('id');
            receivingReceiptItemObject.POId = cboRRItemPONumber.selectedValue;
            receivingReceiptItemObject.ItemId = cboRRLineItemDescription.selectedValue;
            receivingReceiptItemObject.Particulars = document.getElementById('RRLine_Particulars').value;
            receivingReceiptItemObject.UnitId = cboRRItemUnit.selectedValue;
            receivingReceiptItemObject.Quantity = document.getElementById('RRLine_Quantity').value;
            receivingReceiptItemObject.Cost = document.getElementById('RRLine_Cost').value;
            receivingReceiptItemObject.Amount = document.getElementById('RRLine_Amount').value;
            receivingReceiptItemObject.VATId = cboRRItemVAT.selectedValue;
            receivingReceiptItemObject.VATPercentage = document.getElementById('RRLine_VATRate').value;
            receivingReceiptItemObject.VATAmount = document.getElementById('RRLine_VATAmount').value;
            receivingReceiptItemObject.WTAXId = cboForWTAXTaxType.selectedValue;
            receivingReceiptItemObject.WTAXPercentage = document.getElementById('RRLine_WTAXRate').value;
            receivingReceiptItemObject.WTAXAmount = document.getElementById('RRLine_WTAXAmount').value;
            receivingReceiptItemObject.BranchId = cboRRItemBranch.selectedValue;
            var receivingReceiptItemData = JSON.stringify(receivingReceiptItemObject);

            var isValid = true;
            $('.requiredRRLine').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                }
                else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            if (isValid) {
                document.getElementById('cmdSaveRRLinesButton').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Saving";
                $("#cmdSaveRRLinesButton").prop("disabled", true);
                $("#cmdRRLinesDetailCloseButton").prop("disabled", true);

                if (receivingReceiptId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/receivingReceiptItem/add/' + RRId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: receivingReceiptItemData,
                        statusCode: {
                            200: function () {
                                toastr.success("Save Successful");
                                $('#RRLinesEdit').modal('hide');
                                refreshReceivingReceiptFlexGrid();
                            },
                            404: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                                document.getElementById('cmdSaveRRLinesButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#cmdSaveRRLinesButton").prop("disabled", false);
                                $("#cmdRRLinesDetailCloseButton").prop("disabled", false);
                            },
                            400: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                                document.getElementById('cmdSaveRRLinesButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#cmdSaveRRLinesButton").prop("disabled", false);
                                $("#cmdRRLinesDetailCloseButton").prop("disabled", false);
                            },
                            500: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                                document.getElementById('cmdSaveRRLinesButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#cmdSaveRRLinesButton").prop("disabled", false);
                                $("#cmdRRLinesDetailCloseButton").prop("disabled", false);
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/receivingReceiptItem/update/' + receivingReceiptId + '/' + RRId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: receivingReceiptItemData,
                        statusCode: {
                            200: function () {
                                toastr.success("Update Successful");
                                $('#RRLinesEdit').modal('hide');
                                refreshReceivingReceiptFlexGrid();
                            },
                            404: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                                document.getElementById('cmdSaveRRLinesButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#cmdSaveRRLinesButton").prop("disabled", false);
                                $("#cmdRRLinesDetailCloseButton").prop("disabled", false);
                            },
                            400: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                                document.getElementById('cmdSaveRRLinesButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#cmdSaveRRLinesButton").prop("disabled", false);
                                $("#cmdRRLinesDetailCloseButton").prop("disabled", false);
                            },
                            500: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                                document.getElementById('cmdSaveRRLinesButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#cmdSaveRRLinesButton").prop("disabled", false);
                                $("#cmdRRLinesDetailCloseButton").prop("disabled", false);
                            }
                        }
                    });
                }
            } else {
                toastr.error("Invalid Entry");
            }
        }

        // ========================
        //  RR Lines Confirm Delete
        // ========================
        function btnItemRRLinesDelete_OnClick() {
            $('#deleteRRLinesConfirm').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById('cmdConfirmDeleteRRLines').innerHTML = "<i class='fa fa-tash'></i> Delete";
            $("#cmdConfirmDeleteRRLines").prop("disabled", false);
            $("#cmdConfirmDeleteCloseButtonRRLines").prop("disabled", false);
        }

        // RR lines Confirm Delete Button
        function cmdRRLinesConfirmDeleteButton_OnClick() {
            document.getElementById('cmdConfirmDeleteRRLines').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Deleting";
            $("#cmdConfirmDeleteRRLines").prop("disabled", true);
            $("#cmdConfirmDeleteCloseButtonRRLines").prop("disabled", true);

            receivingReceiptItemsCollection.editItem(receivingReceiptItemsCollection.currentItem);
            var item = receivingReceiptItemsCollection.currentEditItem;
            var RRId = getParam('id');

            $.ajax({
                url: '/api/receivingReceiptItem/delete/' + item.Id + '/' + RRId,
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Delete Successful");
                        $('#deleteRRLinesConfirm').modal('hide');
                        refreshReceivingReceiptFlexGrid();
                    },
                    404: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                        document.getElementById('cmdConfirmDeleteRRLines').innerHTML = "<i class='fa fa-tash'></i> Delete";
                        $("#cmdConfirmDeleteRRLines").prop("disabled", false);
                        $("#cmdConfirmDeleteCloseButtonRRLines").prop("disabled", false);
                    },
                    400: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                        document.getElementById('cmdConfirmDeleteRRLines').innerHTML = "<i class='fa fa-tash'></i> Delete";
                        $("#cmdConfirmDeleteRRLines").prop("disabled", false);
                        $("#cmdConfirmDeleteCloseButtonRRLines").prop("disabled", false);
                    },
                    500: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                        document.getElementById('cmdConfirmDeleteRRLines').innerHTML = "<i class='fa fa-tash'></i> Delete";
                        $("#cmdConfirmDeleteRRLines").prop("disabled", false);
                        $("#cmdConfirmDeleteCloseButtonRRLines").prop("disabled", false);
                    }
                }
            });
        }

        $('#RRLine_Quantity').keyup(function () {
            computeAmountAndTaxes();
        });

        $('#RRLine_Cost').keyup(function () {
            computeAmountAndTaxes();
        });

        function computeAmountAndTaxes() {
            var inputQuantity = document.getElementById('RRLine_Quantity').value;
            var inputCost = document.getElementById('RRLine_Cost').value;
            var replacedCost = inputCost.replace(/\,/g, '');
            var replacedQuantity = inputQuantity.replace(/\,/g, '');

            var VATRate = document.getElementById('RRLine_VATRate').value;
            var WTAXRate = document.getElementById('RRLine_WTAXRate').value;

            var amount = replacedCost * replacedQuantity;
            document.getElementById('RRLine_Amount').value = formatDecimalValues(amount);

            document.getElementById('RRLine_VATAmount').value = formatDecimalValues((amount / (1 + VATRate / 100)) * (VATRate / 100));
            document.getElementById('RRLine_WTAXAmount').value = formatDecimalValues((amount / (1 + VATRate / 100)) * (WTAXRate / 100));
        }

        // ===========
        // Compute Tax
        // ===========
        function computeTAX() {
            var inputedQuantity = document.getElementById('RRLine_Quantity').value;
            var inputedCost = document.getElementById('RRLine_Cost').value;
            var inputedAmount = document.getElementById('RRLine_Amount').value;
            var inputedVATRate = document.getElementById('RRLine_VATRate').value;
            var inputedWTAXRate = document.getElementById('RRLine_WTAXRate').value;

            var replacedQuantity = inputedQuantity.replace(/\,/g, '');
            var replacedCost = inputedCost.replace(/\,/g, '');
            var replacedAmount = inputedAmount.replace(/\,/g, '');
            var replacedVATRate = inputedVATRate.replace(/\,/g, '');
            var replacedWTAXRate = inputedWTAXRate.replace(/\,/g, '');

            if (cboRRItemVAT.selectedItem["IsInclusive"]) {
                document.getElementById('RRLine_VATAmount').value = formatDecimalValues((replacedAmount / (1 + replacedVATRate / 100)) * (replacedVATRate / 100));
                document.getElementById('RRLine_WTAXAmount').value = formatDecimalValues((replacedAmount / (1 + replacedVATRate / 100)) * (replacedWTAXRate / 100));
            } else {
                document.getElementById('RRLine_VATAmount').value = formatDecimalValues(replacedAmount * (replacedVATRate / 100));
                document.getElementById('RRLine_WTAXAmount').value = formatDecimalValues(replacedAmount * (replacedWTAXRate / 100));
                document.getElementById('RRLine_Amount').value = formatDecimalValues((replacedCost * replacedQuantity) + (replacedAmount * (replacedVATRate / 100)));
            }
        }

        // =====================
        // GET Inventory Entries
        // =====================
        function getInventoryEntries() {
            var RRId = getParam('id');
            var inventoryObservableArray = new wijmo.collections.ObservableArray;

            $.ajax({
                url: '/api/inventory/receivingReceipt/list/' + RRId,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {

                            var InventoryDateResult = new Date(results[i]["InventoryDate"])
                            var InventoryDate = ('0' + (InventoryDateResult.getMonth() + 1)).slice(-2) + '-' + ('0' + InventoryDateResult.getDate()).slice(-2) + '-' + InventoryDateResult.getFullYear();

                            inventoryObservableArray.push({
                                Id: results[i]["Id"],
                                InventoryDate: InventoryDate,
                                Branch: results[i]["Branch"],
                                Article: results[i]["Article"],
                                Particulars: results[i]["Particulars"],
                                ArticleInventoryCode: results[i]["ArticleInventoryCode"],
                                Quantity: results[i]["Quantity"],
                                QuantityDisplay: parseFloat(results[i]["Quantity"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                ArticleUnit: results[i]["ArticleUnit"],
                                Amount: results[i]["Amount"],
                                AmountDisplay: parseFloat(results[i]["Amount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                            });
                        }
                    }

                    NProgress.done();
                }
            });

            return inventoryObservableArray;
        }

        // =========================
        // Update Navigation Buttons
        // =========================
        function updateNavigateButtonsInventoryEntry() {
            if (inventoryCollectionView.pageSize <= 0) {
                document.getElementById('naviagtionPageGridInventoryEntry').style.display = 'none';
                return;
            }
            document.getElementById('naviagtionPageGridInventoryEntry').style.display = 'block';
            if (inventoryCollectionView.pageIndex === 0) {
                btnMoveToFirstPageGridInventoryEntry.setAttribute('disabled', 'disabled');
                btnMoveToPreviousPageGridInventoryEntry.setAttribute('disabled', 'disabled');
                btnMoveToNextPageGridInventoryEntry.removeAttribute('disabled');
                btnMoveToLastPageGridInventoryEntry.removeAttribute('disabled');
            } else if (inventoryCollectionView.pageIndex === (inventoryCollectionView.pageCount - 1)) {
                btnMoveToFirstPageGridInventoryEntry.removeAttribute('disabled');
                btnMoveToPreviousPageGridInventoryEntry.removeAttribute('disabled');
                btnMoveToNextPageGridInventoryEntry.setAttribute('disabled', 'disabled');
                btnMoveToLastPageGridInventoryEntry.setAttribute('disabled', 'disabled');
            } else {
                btnMoveToFirstPageGridInventoryEntry.removeAttribute('disabled');
                btnMoveToPreviousPageGridInventoryEntry.removeAttribute('disabled');
                btnMoveToNextPageGridInventoryEntry.removeAttribute('disabled');
                btnMoveToLastPageGridInventoryEntry.removeAttribute('disabled');
            }
            btnCurrentPageGridInventoryEntry.innerHTML = (inventoryCollectionView.pageIndex + 1) + ' / ' + inventoryCollectionView.pageCount;
        }

        // ===========================
        // Refresh Inventory Flex Grid
        // ===========================
        function refreshInventoryFlexGrid() {
            inventoryCollectionView = new wijmo.collections.CollectionView(getInventoryEntries());
            inventoryCollectionView.canFilter = true;
            inventoryCollectionView.pageSize = cboInventoryEntryShowNumberOfRows.selectedValue;

            var filterText = '';
            $('#InventoryEntryInputFilter').keyup(function () {
                filterText = this.value.toLowerCase();
                inventoryCollectionView.refresh();
            });

            inventoryCollectionView.filter = function (item) {
                return !filterText || (item.Branch.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Article.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Particulars.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.ArticleInventoryCode.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.ArticleUnit.toLowerCase().indexOf(filterText) > -1);
            }

            inventoryCollectionView.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsInventoryEntry();
            });

            inventoryFlexGrid.itemsSource = inventoryCollectionView;
            inventoryFlexGrid.trackChanges = true;
        }

        // ================================
        // On Page Load for Inventory Entry
        // ================================
        function createInventoryFlexGrid() {
            inventoryCollectionView = new wijmo.collections.CollectionView(getInventoryEntries());
            inventoryCollectionView.canFilter = true;
            inventoryCollectionView.pageSize = cboInventoryEntryShowNumberOfRows.selectedValue;

            var filterText = '';
            $('#InventoryEntryInputFilter').keyup(function () {
                filterText = this.value.toLowerCase();
                inventoryCollectionView.refresh();
            });

            inventoryCollectionView.filter = function (item) {
                return !filterText || (item.Branch.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Article.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Particulars.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.ArticleInventoryCode.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.ArticleUnit.toLowerCase().indexOf(filterText) > -1);
            }

            inventoryCollectionView.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsInventoryEntry();
            });

            inventoryFlexGrid = new wijmo.grid.FlexGrid('#inventoryFlexGrid');
            inventoryFlexGrid.initialize({
                columns: [
                    {
                        "header": "Date",
                        "binding": "InventoryDate",
                        "allowSorting": true,
                        "width": "1*"
                    },
                    {
                        "header": "Branch",
                        "binding": "Branch",
                        "allowSorting": true,
                        "width": "1.5*",
                    },
                    {
                        "header": "Item",
                        "binding": "Article",
                        "align": "left",
                        "allowSorting": true,
                        "width": "1.7*",
                    },
                    {
                        "header": "Particulars",
                        "binding": "Particulars",
                        "align": "left",
                        "allowSorting": true,
                        "width": "1.5*",
                    },
                    {
                        "header": "Inventory Code",
                        "binding": "ArticleInventoryCode",
                        "allowSorting": true,
                        "width": "1.3*",
                    },
                    {
                        "header": "Quantity",
                        "binding": "QuantityDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": "1*",
                    },
                    {
                        "header": "Unit",
                        "binding": "ArticleUnit",
                        "allowSorting": true,
                        "width": "1*",
                    },
                    {
                        "header": "Amount",
                        "binding": "AmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": "1*",
                    },
                ],
                autoGenerateColumns: false,
                itemsSource: inventoryCollectionView,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            inventoryFlexGrid.trackChanges = true;

            updateNavigateButtonsInventoryEntry();

            btnMoveToFirstPageGridInventoryEntry.addEventListener('click', function () {
                inventoryCollectionView.moveToFirstPage();
                updateNavigateButtonsInventoryEntry();
            });

            btnMoveToPreviousPageGridInventoryEntry.addEventListener('click', function () {
                inventoryCollectionView.moveToPreviousPage();
                updateNavigateButtonsInventoryEntry();
            });

            btnMoveToNextPageGridInventoryEntry.addEventListener('click', function () {
                inventoryCollectionView.moveToNextPage();
                updateNavigateButtonsInventoryEntry();
            });

            btnMoveToLastPageGridInventoryEntry.addEventListener('click', function () {
                inventoryCollectionView.moveToLastPage();
                updateNavigateButtonsInventoryEntry();
            });
        }

        // ===========
        // Get Journal
        // ===========
        function getJournalListForRR() {
            var journalsObservableArray = new wijmo.collections.ObservableArray;
            var RRId = getParam('id');
            $.ajax({
                url: '/api/jounal/receivingReceipt/list/' + RRId,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {

                            var journalDateResult = new Date(results[i]["JournalDate"])
                            var journalDate = ('0' + (journalDateResult.getMonth() + 1)).slice(-2) + '-' + ('0' + journalDateResult.getDate()).slice(-2) + '-' + journalDateResult.getFullYear();

                            journalsObservableArray.push({
                                Branch: results[i]["Branch"],
                                JournalDate: journalDate,
                                AccountCode: results[i]["AccountCode"],
                                Account: results[i]["Account"],
                                Article: results[i]["Article"],
                                DebitAmountDisplay: parseFloat(results[i]["DebitAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                CreditAmountDisplay: parseFloat(results[i]["CreditAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")
                            });

                            var debitAmountTotal = 0;
                            var creditAmountTotal = 0;

                            var a = 0;
                            while (a < results.length) {
                                debitAmountTotal += results[a]["DebitAmount"];
                                creditAmountTotal += results[a]["CreditAmount"];
                                a++;
                            }
                        }

                        document.getElementById('totalDebitInJournal').value = debitAmountTotal.toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        document.getElementById('totalCreditInJournal').value = creditAmountTotal.toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        var variance = debitAmountTotal - creditAmountTotal;
                        document.getElementById('variance').value = variance.toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                    }

                    $("#loadingJournalGridList").hide();
                    $("#journal_Content").show();
                }
            });

            return journalsObservableArray;
        }

        // ============
        // Journal List
        // ============
        function btnReceivingReceiptJournalOnclick() {
            $('#journalDetail').modal({
                show: true,
                backdrop: 'static'
            });

            $("#loadingJournalGridList").show();
            document.getElementById("loadingJournalGridList").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#journal_Content").hide();

            setTimeout(function () {
                createJournalFlexGrid();
            }, 500)
        }

        function createJournalFlexGrid() {
            journalCollectionView = new wijmo.collections.CollectionView(getJournalListForRR());

            journalFlexGrid.dispose();
            journalFlexGrid = new wijmo.grid.FlexGrid('#journalFlexGrid');
            journalFlexGrid.initialize({
                columns: [
                    {
                        "header": "Branch",
                        "binding": "Branch",
                        "allowSorting": true,
                        "width": "2.5*"
                    },
                    {
                        "header": "Date",
                        "binding": "JournalDate",
                        "allowSorting": true,
                        "width": "1.5*"
                    },
                    {
                        "header": "Code",
                        "binding": "AccountCode",
                        "allowSorting": true,
                        "width": "1.8*"
                    },
                    {
                        "header": "Account",
                        "binding": "Account",
                        "allowSorting": true,
                        "width": "3*"
                    },
                    {
                        "header": "Article",
                        "binding": "Article",
                        "allowSorting": true,
                        "width": "3*"
                    },
                    {
                        "header": "Debit",
                        "binding": "DebitAmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": "2*",
                    },
                    {
                        "header": "Credit",
                        "binding": "CreditAmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": "2*"
                    }
                ],
                autoGenerateColumns: false,
                itemsSource: journalCollectionView,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            journalFlexGrid.trackChanges = true;
        }

        // ===============
        // Show Rows Table
        // ===============
        function createCboShowRows() {
            var rowsObservableArray = new wijmo.collections.ObservableArray();

            for (var i = 0; i <= 4; i++) {
                var rows = 0;
                var rowsString = "";

                if (i == 0) {
                    rows = 15;
                    rowsString = "Show 15 Rows";
                } else if (i == 1) {
                    rows = 50;
                    rowsString = "Show 50 Rows";
                } else if (i == 2) {
                    rows = 100;
                    rowsString = "Show 100 Rows";
                } else if (i == 3) {
                    rows = 150;
                    rowsString = "Show 150 Rows";
                } else {
                    rows = 200;
                    rowsString = "Show 200 Rows";
                }

                rowsObservableArray.push({
                    rowNumber: rows,
                    rowString: rowsString
                });
            }

            cboReceivingReceiptItemsShowNumberOfRows.dispose();
            cboReceivingReceiptItemsShowNumberOfRows = new wijmo.input.ComboBox('#cboReceivingReceiptItemsShowNumberOfRows', {
                isEditable: false,
                itemsSource: rowsObservableArray,
                displayMemberPath: "rowString",
                selectedValuePath: "rowNumber",
                selectedValue: 50,
                onSelectedIndexChanged: function () {
                    NProgress.start();

                    setTimeout(function () {
                        var numberOfRows = cboReceivingReceiptItemsShowNumberOfRows.selectedValue;
                        receivingReceiptItemsCollection.pageSize = parseInt(numberOfRows);
                        receivingReceiptItemsCollection.refresh();
                        receivingReceiptItemGrid.refresh();

                        NProgress.done();
                    }, 300);
                }
            });

            cboInventoryEntryShowNumberOfRows.dispose();
            cboInventoryEntryShowNumberOfRows = new wijmo.input.ComboBox('#cboInventoryEntryShowNumberOfRows', {
                isEditable: false,
                itemsSource: rowsObservableArray,
                displayMemberPath: "rowString",
                selectedValuePath: "rowNumber",
                selectedValue: 50,
                onSelectedIndexChanged: function () {
                    NProgress.start();

                    setTimeout(function () {
                        var numberOfRows = cboInventoryEntryShowNumberOfRows.selectedValue;
                        inventoryCollectionView.pageSize = parseInt(numberOfRows);
                        inventoryCollectionView.refresh();
                        inventoryFlexGrid.refresh();

                        NProgress.done();
                    }, 300);
                }
            });
        }

        // ====
        // TABS
        // ====
        $('#itemTabId').click(function () {
            $('#Item').show();
            $('#InventoryEntry').hide();
            NProgress.start();
            refreshReceivingReceiptFlexGrid();
        });

        $('#inventoryEntryTabId').click(function () {
            $('#Item').hide();
            $('#InventoryEntry').show();
            NProgress.start();
            refreshInventoryFlexGrid();
        });

        $(document).ready(function () {
            $('#Item').show();
            $('#InventoryEntry').hide();

            $(document).on('show.bs.modal', '.modal', function (event) {
                var zIndex = 1040 + (10 * $('.modal:visible').length);
                $(this).css('z-index', zIndex);
                setTimeout(function () {
                    $('.modal-backdrop').not('.modal-stack').css('z-index', zIndex - 1).addClass('modal-stack');
                }, 0);
            });

            $(document).on('hidden.bs.modal', '.modal', function () {
                $('.modal:visible').length && $(document.body).addClass('modal-open');
            });
        });

        // ===============
        // OnLoad Function
        // ===============
        $(document).ready(function () {
            getBranchesForComboBox();
        });
    </script>
    <script type="text/javascript">
        var cboUserBranches = new wijmo.input.ComboBox('#cboUserBranches');
        function getUserBranches() {
            $("#loadingUserBranches").show();
            document.getElementById("loadingUserBranches").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#userBranchContent").hide();

            $('#userBranchesModal').modal({ show: true, backdrop: 'static' });

            document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
            $("#updateUserBranch").prop("disabled", false);
            $("#closeUserBranch").prop("disabled", false);

            var userBranchesObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/userBranch/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (userBranchesresults) {
                    if (userBranchesresults.length > 0) {
                        for (i = 0; i < userBranchesresults.length; i++) {
                            userBranchesObservableArray.push({
                                BranchId: userBranchesresults[i]["BranchId"],
                                Branch: userBranchesresults[i]["Branch"]
                            });
                        }
                    }

                    var currentBranch = "@ViewData["BranchId"]";
                    cboUserBranches.dispose();
                    cboUserBranches = new wijmo.input.ComboBox('#cboUserBranches', {
                        isEditable: false,
                        placeholder: "Select Branches",
                        itemsSource: userBranchesObservableArray,
                        displayMemberPath: "Branch",
                        selectedValuePath: "BranchId",
                        selectedValue: currentBranch
                    });

                    setTimeout(function () {
                        $("#loadingUserBranches").hide();
                        $("#userBranchContent").show();
                    }, 500)
                }
            });
        }

        function updateUserBranchOnclick() {
            document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Updating";
            $("#updateUserBranch").prop("disabled", true);
            $("#closeUserBranch").prop("disabled", true);

            var userBranchObject = new Object();
            userBranchObject.BranchId = cboUserBranches.selectedValue;
            var userBranchData = JSON.stringify(userBranchObject);

            $.ajax({
                type: "PUT",
                url: '/api/userBranch/update',
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: userBranchData,
                statusCode: {
                    200: function () {
                        toastr.success("Update Successful");
                        window.setTimeout(function () {
                            location.reload()
                        }, 1000);
                    },
                    404: function () {
                        toastr.error("Not Found");
                        document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
                        $("#updateUserBranch").prop("disabled", false);
                        $("#closeUserBranch").prop("disabled", false);
                    },
                    500: function () {
                        toastr.error("Bad Request");
                        document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
                        $("#updateUserBranch").prop("disabled", false);
                        $("#closeUserBranch").prop("disabled", false);
                    }
                }
            });
        }
    </script>
    <script type="text/javascript">
        var slideLeft = new Menu({
            wrapper: '#o-wrapper',
            type: 'slide-left',
            menuOpenerClass: '.c-button',
            maskId: '#c-mask'
        });

        var slideLeftBtn = document.querySelector('#c-button--slide-left');

        slideLeftBtn.addEventListener('click', function (e) {
            e.preventDefault;
            slideLeft.open();
        });
    </script>
</body>
</html>