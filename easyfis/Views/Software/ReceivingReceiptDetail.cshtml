@{
    var userId = ViewData["UserId"];
}
<!DOCTYPE html>
<html>
<head>
    <!-- Meta -->
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">

    <!-- Title of the Page -->
    <link rel="shortcut icon" href="~/Images/icon/easyfislogomini.ico">
    <title>Receiving Receipt Detail</title>

    <!-- CSS StyleSheets-->
    @Styles.Render("~/Content/Software-css")
</head>
<body class="hold-transition skin-blue fixed sidebar-mini">
    <div class="wrapper">
        @Html.Partial("_SoftwareHeader")
        @Html.Partial("_SoftwareSideBarMenu")

        <div class="content-wrapper">
            <section class="content-header">
                <h1>
                    Receiving Receipt Detail
                    <small><i class="fa fa-building"></i> @ViewData["Company"] / @ViewData["Branch"]</small>
                </h1>
                <ol class="breadcrumb">
                    <li><a href="/Software"> Dashboard</a></li>
                    <li><a href="/Software/ReceivingReceipt"> Receiving Receipt</a></li>
                    <li> Receiving Receipt Detail </li>
                </ol>
            </section>

            <section class="content">
                <div class="box box-default">
                    <div class="box-header">
                        <div class="row">
                            <div class="col-md-6"> </div>
                            <div class="col-md-6" align="right">
                                <button class="btn btn-primary btn-sm" id="cmdRRJournal" onclick="RRJournal_OnClick()"><i class="fa fa-book"></i> Journal</button>
                                <button class="btn btn-primary btn-sm" id="cmdSaveRRSave" onclick="RRSaveSaveButton_OnClick()"><i class="fa fa-lock"></i> Lock</button>
                                <button class="btn btn-primary btn-sm" id="cmdRRSave" onclick="RRSaveButton_OnClick()"><i class="fa fa-save"></i> Save</button>
                                <button class="btn btn-primary btn-sm" id="cmdRREdit" onclick="RREditButton_OnClick()"><i class="fa fa-unlock"></i> Unlock</button>
                                <button class="btn btn-primary btn-sm" id="cmdRRPrint" onclick="RRPrintButton_OnClick()"><i class="fa fa-print"></i> Print</button>
                                <button id="cmdRRClose" onclick="window.location.href = '@Url.Action("ReceivingReceipt", "Software")'" class="btn btn-danger btn-sm"><i class="fa fa-times"></i> Close</button>
                            </div>
                        </div>
                    </div>
                    <div class="box-body">
                        <div class="well">
                            <form class="form-horizontal" role="form">
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            <label class="control-label col-sm-4">Branch:</label>
                                            <div class="col-sm-8">
                                                <div class="comboBox-wide" id="RRbranch"></div>

                                                <input type="hidden" id="RRbranch_data" class="requiredRR" />
                                                <input type="hidden" id="RRbranch_selectedValue" />
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <label class="control-label col-sm-4">RR Number</label>
                                            <div class="col-sm-8">
                                                <input type="text" class="form-control input-30 input-sm requiredRR" id="RRRRNumber_Display" />
                                                <input type="hidden" id="RRRRNumber" />
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <label class="control-label col-sm-4">RR Date</label>
                                            <div class="col-sm-8">
                                                <div class="input-50" id="RRRRDate"></div>
                                                <input type="hidden" id="RRRRDate_data" class="requiredRR" />
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <label class="control-label col-sm-4">Doc Reference</label>
                                            <div class="col-sm-8">
                                                <input type="text" class="form-control input-sm requiredRR" id="RRDocReference" placeholder="Document Reference">
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <label class="control-label col-sm-4">Supplier</label>
                                            <div class="col-sm-8">
                                                <div class="input-group">
                                                    <div class="comboBox-wide" id="RRSupplier"></div>

                                                    <input type="hidden" id="RRSupplier_data" class="requiredRR" />
                                                    <input type="hidden" id="RRSupplier_selectedValue" />
                                                    <div class="input-group-btn">
                                                        <button type="button" class="btn btn-primary btn-sm" id="cmdRRForPOSupplier" onclick="RRForPOSupplier_OnClick()">PO</button>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <label class="control-label col-sm-4">Term</label>
                                            <div class="col-sm-8">
                                                <div class="input-70" id="RRTerm"></div>

                                                <input type="hidden" id="RRTerm_data" class="requiredRR" />
                                                <input type="hidden" id="RRTerm_selectedValue" />
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <label class="control-label col-sm-4">Remarks</label>
                                            <div class="col-sm-8">
                                                <textarea class="form-control textarea-custom requiredRR" id="RRRemarks" placeholder="Remarks"></textarea>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            <label class="control-label col-sm-4">Manual RR Number</label>
                                            <div class="col-sm-8">
                                                <input type="text" class="form-control input-sm requiredRR" id="RRManualRRNumber" placeholder="Manual RR Number">
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <label class="control-label col-sm-4">Received by</label>
                                            <div class="col-sm-8">
                                                <div class="comboBox-wide" id="RRReceivedBy"></div>

                                                <input type="hidden" id="RRReceivedBy_data" class="requiredRR" />
                                                <input type="hidden" id="RRReceivedBy_selectedValue" />
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <label class="control-label col-sm-4">Prepared by</label>
                                            <div class="col-sm-8">
                                                <div class="comboBox-wide" id="RRPreparedBy"></div>

                                                <input type="hidden" id="RRPreparedBy_data" class="requiredRR" />
                                                <input type="hidden" id="RRPreparedBy_selectedValue" />
                                                <input type="hidden" id="userId_data" value="@userId" />
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <label class="control-label col-sm-4">Checked by</label>
                                            <div class="col-sm-8">
                                                <div class="comboBox-wide" id="RRCheckedBy"></div>

                                                <input type="hidden" id="RRCheckedBy_data" class="requiredRR" />
                                                <input type="hidden" id="RRCheckedBy_selectedValue" />
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <label class="control-label col-sm-4">Approved by</label>
                                            <div class="col-sm-8">
                                                <div class="comboBox-wide" id="RRApprovedBy"></div>

                                                <input type="hidden" id="RRApprovedBy_data" class="requiredRR" />
                                                <input type="hidden" id="RRApprovedBy_selectedValue" />
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <label class="control-label col-sm-4">Lock</label>
                                            <div class="col-sm-8">
                                                <input type="checkbox" id="RR_Lock">
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <div class="col-sm-4"></div>
                                            <div class="col-sm-8">
                                                <input type="hidden" id="RR_IsLocked">
                                                <input type="hidden" id="RR_IsLocked_defaultTrue">
                                                <input type="hidden" id="RR_IsLocked_defaultFalse">
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </form>
                        </div>
                        <br />
                        <ul class="nav nav-tabs" role="tablist" id="myTab">
                            <li role="presentation" class="active"><a data-toggle="tab" href="#Item" id="itemTabId">Items</a></li>
                            <li role="presentation"><a data-toggle="tab" href="#InventoryEntry" id="inventoryEntryTabId">Inventory Entries</a></li>
                        </ul>
                        <br />
                        <div class="tab-content">
                            <div id="Item" class="tab-pane fade in active">
                                <!-- Item List -->
                                <div class="row">
                                    <div class="col-lg-12" align="right">
                                        <button class="btn btn-primary btn-sm" id="btnRRLineItem" onclick="btnAddItemRRLine_OnClick()"><i class="fa fa-plus"></i> add</button>
                                    </div>
                                </div>
                                <br />
                                <div class="row" align="left">
                                    <div class="col-lg-12">
                                        <div id="ItemGrid" class="grid" align="left"></div>
                                    </div>
                                </div>
                            </div>
                            <div id="InventoryEntry" class="tab-pane fade in active">
                                <!-- Inventory Entry List -->
                                <br />
                                <div class="row" align="left">
                                    <div class="col-lg-12">
                                        <div id="InventoryEntryGrid" class="grid"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </section>
        </div>

        @Html.Partial("_SoftwareFooter")
    </div>

    <!-- RR for PO Modal -->
    <div class="modal fade" id="POStatus" role="dialog">
        <div class="modal-dialog modal-lg">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title" id="POStatusModalLabel">Purchase Order Status</h4>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-8">
                            <form id="POLinesDetailForm">
                                <dl class="dl-horizontal">
                                    <dt>Supplier</dt>
                                    <dd>
                                        <div class="comboBox-wide" id="POStatus_Supplier"></div>

                                        <input type="hidden" id="POStatus_Supplier_data" class="requiredPOLine">
                                        <input type="hidden" id="POStatus_Supplier_selectedValue" />
                                    </dd>
                                    <dt>PO Number</dt>
                                    <dd>
                                        <div class="comboBox-wide" id="POStatus_PONumber"></div>

                                        <input type="hidden" id="POStatus_PONumber_data" class="requiredPOLine">
                                        <input type="hidden" id="POStatus_PONumber_selectedValue" />
                                    </dd>
                                </dl>
                            </form>
                        </div>
                        <div class="col-md-4"></div>
                    </div>
                    <hr />
                    <div class="POStatusContent">
                        <div class="row" id="seacrhIdinPOStatus">
                            <div class="col-lg-6"></div>
                            <div class="col-lg-6" align="right">
                                <button class="btn btn-primary btn-sm" id="cmdApplyPOStatusButton" onclick="cmdApplyAllPOStatusButton_OnClick()"><i class="fa fa-check"></i> Apply all</button>
                            </div>
                        </div>
                        <br />
                        <div class="row" align="left">
                            <div class="col-lg-12">
                                <div id="POStatusGrid" class="grid statusGrid" align="left"></div>
                                <center>
                                    <h4>
                                        <span id="loadingPOStatusGridList"></span>
                                        <span id="loadingPOItemsGridList"></span>
                                    </h4>
                                </center>
                            </div>
                        </div>
                    </div>
                    <br />
                </div>
                <div class="modal-footer">
                    <button type="button" id="cmdPOStatusCloseButton" class="btn btn-danger btn-sm" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Journal Detail -->
    <div class="modal fade" id="journalDetail" role="dialog">
        <div class="modal-dialog modal-lg">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title" id="journalModalLabel"> Journal</h4>
                </div>
                <div class="modal-body">
                    <center>
                        <h4>
                            <span id="loadingJournalGridList"></span>
                        </h4>
                    </center>
                    <div id="journal_Content">
                        <div class="row" align="left">
                            <div class="col-lg-12">
                                <div id="journalGrid" class="grid" align="left"></div>
                            </div>
                        </div>
                        <hr />
                        <div class="row">
                            <div class="col-md-6"></div>
                            <div class="col-md-6" align="right">
                                <table>
                                    <tr>
                                        <td align="right"> <b>Total Debit:</b> </td>
                                        <td style="padding-left: 35px"></td>
                                        <td> <span id="totalDebitInJournal"></span></td>
                                    </tr>
                                    <tr>
                                        <td align="right"> <b>Total Credit:</b> </td>
                                        <td style="padding-left: 35px"></td>
                                        <td> <span id="totalCreditInJournal"></span></td>
                                    </tr>
                                    <tr>
                                        <td style="padding: 10px"> </td>
                                        <td style="padding: 10px"> </td>
                                        <td style="padding: 10px"> </td>
                                    </tr>
                                    <tr>
                                        <td align="right"> <b>Variance: </b> </td>
                                        <td style="padding-left: 35px"></td>
                                        <td> <span id="variance"></span></td>
                                    </tr>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button id="cmdJournalDetailCloseButton" class="btn btn-danger btn-sm" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal for RRLines -->
    <div class="modal fade" id="RRLinesEdit" role="dialog">
        <div class="modal-dialog">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title" id="RRLinesNameModalLabel">Receiving Receipt Line Item Detail</h4>
                </div>
                <div class="modal-body">
                    <form id="RRLinesDetailForm">
                        <ul class="nav nav-tabs" role="tablist" id="myTab">
                            <li role="presentation" class="active"><a data-toggle="tab" href="#RRItem" id="RRItemTabId">Items</a></li>
                            <li role="presentation"><a data-toggle="tab" href="#RRTax" id="RRTaxTabId">Tax</a></li>
                            @*<li role="presentation"><a data-toggle="tab" href="#RRBUC" id="RRBUCTabId">Basic Unit Conversion</a></li>*@
                        </ul>
                        <br />
                        <div class="tab-content">
                            <div id="RRItem" class="tab-pane fade in active">
                                <input type="hidden" id="RRLine_Id" />
                                <dl class="dl-horizontal">
                                    <dt>Branch</dt>
                                    <dd>
                                        <div class="comboBox-wide" id="RRLine_Branch"></div>

                                        <input type="hidden" id="RRLine_Branch_data" class="requiredRRLine">
                                        <input type="hidden" id="RRLine_Branch_selectedValue" />
                                    </dd>
                                    <dt>Purchase Order No</dt>
                                    <dd>
                                        <div class="input-70" id="RRLine_PONo"></div>

                                        <input type="hidden" id="RRLine_PONo_data" class="requiredRRLine">
                                        <input type="hidden" id="RRLine_PONo_selectedValue" />
                                    </dd>
                                    <dt>Item</dt>
                                    <dd>
                                        <div class="input-30" id="RRLine_ItemCode"></div>
                                        <div class="input-68" id="RRLine_ItemDescription"></div>

                                        <input type="hidden" id="RRLine_ItemId_data" class="requiredRRLine">
                                        <input type="hidden" id="RRLine_ItemCode_selectedValue" />
                                        <input type="hidden" id="RRLine_ItemDescription_selectedValue" />
                                    </dd>
                                    <dt>Particulars</dt>
                                    <dd><textarea class="form-control textarea-custom requiredRRLine" id="RRLine_Particulars" placeholder="Particulars"></textarea></dd>
                                    <dt>Quantity</dt>
                                    <dd><input class="form-control numberField input-50 input-sm requiredRRLine" id="RRLine_Quantity" placeholder="0.00" /></dd>
                                    <dt>Unit</dt>
                                    <dd>
                                        <div class="input-50" id="RRLine_Unit"></div>

                                        <input type="hidden" id="RRLine_Unit_data" class="requiredRRLine">
                                        <input type="hidden" id="RRLine_Unit_selectedValue" />
                                    </dd>
                                    <dt>Cost</dt>
                                    <dd><input type="text" class="form-control input-50 numberField input-sm requiredRRLine" id="RRLine_Cost" placeholder="0.00" /></dd>
                                    <dt>Amount</dt>
                                    <dd><input type="text" class="form-control input-50 numberField input-sm requiredRRLine" id="RRLine_Amount" placeholder="0.00" /></dd>
                                </dl>
                            </div>
                            <div id="RRTax" class="tab-pane fade">
                                <dl class="dl-horizontal">
                                    <dt>VAT</dt>
                                    <dd>
                                        <div class="comboBox-wide" id="RRLine_VAT"></div>

                                        <input type="hidden" id="RRLine_VAT_data" class="requiredRRLine">
                                        <input type="hidden" id="RRLine_VAT_selectedValue" />
                                        <input type="hidden" id="RRLine_TAXInclusive" />
                                    </dd>
                                    <dt>VAT Rate</dt>
                                    <dd><input type="text" class="form-control input-50 numberField input-sm requiredRRLine" id="RRLine_VATRate" placeholder="0.00" /></dd>
                                    <dt>VAT Amount</dt>
                                    <dd><input type="text" class="form-control input-50 numberField input-sm requiredRRLine" id="RRLine_VATAmount" placeholder="0.00" /></dd>
                                    <dt>WTAX</dt>
                                    <dd>
                                        <div class="comboBox-wide" id="RRLine_WTAX"></div>

                                        <input type="hidden" id="RRLine_WTAX_data" class="requiredRRLine">
                                        <input type="hidden" id="RRLine_WTAX_selectedValue" />
                                    </dd>
                                    <dt>WTAX Rate</dt>
                                    <dd><input type="text" class="form-control input-50 numberField input-sm requiredRRLine" id="RRLine_WTAXRate" placeholder="0.00" /></dd>
                                    <dt>WTAX Amount</dt>
                                    <dd><input type="text" class="form-control input-50 numberField input-sm requiredRRLine" id="RRLine_WTAXAmount" placeholder="0.00" /></dd>
                                    <dt></dt>
                                </dl>
                            </div>
                            <div id="RRBUC" class="tab-pane fade">
                                <dl class="dl-horizontal">
                                    <dt>Unit</dt>
                                    <dd>
                                        <div class="input-50" id="RRLine_BUCUnit"></div>

                                        <input type="hidden" id="RRLine_BUCUnit_data" class="requiredRRLine">
                                        <input type="hidden" id="RRLine_BUCUnit_selectedValue" />
                                    </dd>
                                    <dt>Quantity</dt>
                                    <dd><input type="text" class="form-control input-50 numberField input-sm requiredRRLine" id="RRLine_BUCQuantity" placeholder="0.00" /></dd>
                                    <dt>Cost</dt>
                                    <dd><input type="text" class="form-control input-50 numberField input-sm requiredRRLine" id="RRLine_BUCCost" placeholder="0.00" /></dd>
                                </dl>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary btn-sm" id="cmdSaveRRLinesButton" onclick="cmdRRLinesSaveButton_OnClick()"><i class="fa fa-save"></i> Save</button>
                    <button id="cmdRRLinesDetailCloseButton" class="btn btn-danger btn-sm" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- RR PO Items Delete -->
    <div class="modal fade" id="deleteRRLinesConfirm" role="dialog">
        <div class="modal-dialog modal-sm">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Delete Item <i class="fa fa-trash"></i></h4>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete this?
                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger btn-sm" id="cmdConfirmDeleteRRLines" onclick="cmdRRLinesConfirmDeleteButton_OnClick()"><i class="fa fa-trash"></i> Delete</button>
                    <button id="cmdConfirmDeleteCloseButtonRRLines" class="btn btn-primary btn-sm" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <!-- RR Status PO Apply all? -->
    <div class="modal fade" id="applyAllConfirmPOStatus" role="dialog">
        <div class="modal-dialog modal-sm">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Apply PO (All) <i class="fa fa-check"></i></h4>
                </div>
                <div class="modal-body">
                    Are you sure that you want to apply all these Purchase Order Items?
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary btn-sm" id="cmdConfirmApplyAllPOStatusPOItems" onclick="btnConfrimApplyAllPOItems_OnClick()"><i class="fa fa-check"></i> Apply</button>
                    <button id="cmdCloseButtonApplyAllPOStatusPOItems" class="btn btn-danger btn-sm" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <!-- RR Status PO Apply item? -->
    <div class="modal fade" id="applyConfirmPOStatus" role="dialog">
        <div class="modal-dialog modal-sm">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Apply PO <i class="fa fa-check-square-o"></i></h4>
                </div>
                <div class="modal-body">
                    Are you sure that you want to apply this Purchase Order Item?
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary btn-sm" id="cmdConfirmApplyPOStatusPOItems" onclick="btnConfrimApplyPOItems_OnClick()"><i class="fa fa-check-square-o"></i> Apply</button>
                    <button id="cmdCloseButtonApplyPOStatusPOItems" class="btn btn-danger btn-sm" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>

    @Scripts.Render("~/Scripts/Software-js")
    <script type="text/javascript">
        // ================
        // Global Variables
        // ================
        var RRs;
        var branches;
        var users;
        var suppliers;
        var terms;
        var RRDate;
        var cboBranch;
        var cboSupplier;
        var cboTerm;
        var cboReceivedBy;
        var cboPreparedBy;
        var cboCheckedBy;
        var cboApprovedBy;
        var POStatussuppliers;
        var POsPOStatus;
        var cboSuppliersPOStatus;
        var cboPONumberPOStatus;
        var POStatus;
        var POstatusGrid;
        var btnFirstPageGridPOStatus;
        var btnPreviousPageGridPOStatus;
        var btnNextPageGridPOStatus;
        var btnLastPageGridPOStatus;
        var btnCurrentPageGridPOStatus;

        // =======================
        // Get URL Parameter Value
        // =======================
        function getParam(name) {
            name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
            var regexS = "[\\?&]" + name + "=([^&#]*)";
            var regex = new RegExp(regexS);
            var results = regex.exec(window.location.href);
            if (results == null)
                return "";
            else
                return results[1];
        }

        // =================
        // GET RR List By Id
        // =================
        function getRRById() {
            var ReceivingReceiptId = getParam('ReceivingReceiptId');
            if (document.location.search.length == 0) {
                document.getElementById('RRDocReference').value = "NA";
                document.getElementById('RRRemarks').value = "NA";
                document.getElementById('RRManualRRNumber').value = "NA";

                NProgress.done();
            } else {
                NProgress.start();
                $.ajax({
                    url: '/api/receivingReceipt/' + ReceivingReceiptId,
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    data: {},
                    success: function (Results) {
                        if (Results != null) {
                            document.getElementById('RRbranch_data').value = Results.BranchId;
                            document.getElementById('RRbranch_selectedValue').value = Results.Branch;

                            document.getElementById('RRRRNumber').value = Results.RRNumber;
                            document.getElementById('RRRRNumber_Display').value = Results.RRNumber;
                            document.getElementById('RRRRDate_data').value = Results.RRDate;

                            var RRdate_date = Results.RRDate;
                            RRDate.dispose();
                            RRDate = new wijmo.input.InputDate('#RRRRDate', {
                                format: 'MM/dd/yyyy',
                                value: new Date(RRdate_date),
                                mask: '99/99/9999',
                                onValueChanged: function () {
                                    document.getElementById('RRRRDate_data').value = this.value.toLocaleDateString();
                                }
                            });

                            document.getElementById('RRDocReference').value = Results.DocumentReference;
                            document.getElementById('RRSupplier_data').value = Results.SupplierId;
                            document.getElementById('RRSupplier_selectedValue').value = Results.Supplier;
                            document.getElementById('RRTerm_data').value = Results.TermId;
                            document.getElementById('RRTerm_selectedValue').value = Results.Term;
                            document.getElementById('RRRemarks').value = Results.Remarks;
                            document.getElementById('RRManualRRNumber').value = Results.ManualRRNumber;
                            document.getElementById('RRReceivedBy_data').value = Results.ReceivedById;
                            document.getElementById('RRReceivedBy_selectedValue').value = Results.ReceivedBy;
                            document.getElementById('RRPreparedBy_data').value = Results.PreparedById;
                            document.getElementById('RRPreparedBy_selectedValue').value = Results.PreparedBy;
                            document.getElementById('RRCheckedBy_data').value = Results.CheckedById;
                            document.getElementById('RRCheckedBy_selectedValue').value = Results.CheckedBy;
                            document.getElementById('RRApprovedBy_data').value = Results.ApprovedById;
                            document.getElementById('RRApprovedBy_selectedValue').value = Results.ApprovedBy;
                            document.getElementById('RR_Lock').checked = Results.IsLocked;

                            document.getElementById('createdBy').innerHTML = Results.CreatedBy;
                            document.getElementById('createdDate').innerHTML = Results.CreatedDateTime;
                            document.getElementById('updatedBy').innerHTML = Results.UpdatedBy;
                            document.getElementById('updatedDate').innerHTML = Results.UpdatedDateTime;

                            document.getElementById('POStatus_Supplier_data').value = Results.SupplierId;
                            document.getElementById('POStatus_Supplier_selectedValue').value = Results.Supplier;

                            document.getElementById('RR_IsLocked').value = Results.IsLocked;

                            if (document.getElementById('RR_IsLocked').value == 'true') {
                                document.getElementById('RRDocReference').disabled = true;
                                document.getElementById('RRRemarks').disabled = true;
                                document.getElementById('RRManualRRNumber').disabled = true;

                                var RRdate_date = Results.RRDate;
                                RRDate.dispose();
                                RRDate = new wijmo.input.InputDate('#RRRRDate', {
                                    disabled: true,
                                    format: 'MM/dd/yyyy',
                                    value: new Date(RRdate_date),
                                    mask: '99/99/9999',
                                    onValueChanged: function () {
                                        document.getElementById('RRRRDate_data').value = this.value.toLocaleDateString();
                                    }
                                });

                                $("#cmdRRJournal").prop("disabled", false);
                                $("#cmdSaveRRSave").prop("disabled", true);
                                $("#cmdRRSave").prop("disabled", true);
                                $("#cmdRREdit").prop("disabled", false);
                                $("#cmdRRPrint").prop("disabled", false);
                                $("#cmdRRForPOSupplier").prop("disabled", true);
                                $("#btnRRLineItem").prop("disabled", true);

                            } else if (document.getElementById('RR_IsLocked').value == 'false') {
                                document.getElementById('RRDocReference').disabled = false;
                                document.getElementById('RRRemarks').disabled = false;
                                document.getElementById('RRManualRRNumber').disabled = false;

                                var RRdate_date = Results.RRDate;
                                RRDate.dispose();
                                RRDate = new wijmo.input.InputDate('#RRRRDate', {
                                    disabled: false,
                                    format: 'MM/dd/yyyy',
                                    value: new Date(RRdate_date),
                                    mask: '99/99/9999',
                                    onValueChanged: function () {
                                        document.getElementById('RRRRDate_data').value = this.value.toLocaleDateString();
                                    }
                                });

                                $("#cmdRRJournal").prop("disabled", true);
                                $("#cmdSaveRRSave").prop("disabled", false);
                                $("#cmdRRSave").prop("disabled", false);
                                $("#cmdRREdit").prop("disabled", true);
                                $("#cmdRRPrint").prop("disabled", true);
                                $("#cmdRRForPOSupplier").prop("disabled", false);
                                $("#btnRRLineItem").prop("disabled", false);

                            } else {
                                console.log("Invalid Lock");
                            }

                            getBranchesForComboBox();
                            getSupplierForComboBox();
                            getTermForComboBox();
                            getUsersForComboBox();
                        }
                        NProgress.done();
                    }
                }).fail(function (xhr, textStatus, err) {
                    alert(err);
                });
            }
        }

        // ========================
        // GET Branch for Combo Box
        // ========================
        function getBranchesForComboBox() {
            branches = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listBranch',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            branches.push({
                                BranchId: results[i]["Id"],
                                BranchBranch: results[i]["Branch"]
                            });
                        }

                        var ReceivingReceiptId = getParam('ReceivingReceiptId');
                        var branchId = @ViewData["BranchId"];
                        if (document.location.search.length == 0) {
                            $.ajax({
                                url: '/api/listBranchById/' + branchId,
                                cache: false,
                                type: 'GET',
                                contentType: 'application/json; charset=utf-8',
                                data: {},
                                success: function (branchResults) {
                                    //if (results.length > 0) {
                                    //    branches.push({
                                    //        BranchId: results.Id,
                                    //        Branch: results.Branch
                                    //    });
                                    //}

                                    if (branchResults != null) {
                                        document.getElementById('RRbranch_data').value = branchResults.Id;
                                        document.getElementById('RRbranch_selectedValue').value = branchResults.Branch;

                                        createCboBranch(branches);
                                    }
                                }
                            });
                        } else {
                            createCboBranch(branches);
                        }
                    } else {
                        createCboBranch(branches);
                    }
                }
            });
            return branches;
        }

        // ======================
        // Combo Box for Branches
        // ======--==============
        function createCboBranch(branches) {
            var branchCollections = new wijmo.collections.CollectionView(branches);
            var branchList = new Array();
            for (var i = 0; i < branchCollections.items.length; i++) {
                branchList.push(branchCollections.items[i].BranchBranch);
            }

            var disabled;
            if (branches == 0) {
                disabled = true;
            } else {
                if (document.getElementById('RR_IsLocked').value == 'true') {
                    disabled = true;
                } else {
                    disabled = false;
                }
            }

            cboBranch.dispose();
            cboBranch = new wijmo.input.ComboBox('#RRbranch', {
                disabled: true,
                placeholder: "Select Branch",
                itemsSource: branchList,
                isEditable: false,
                selectedValue: document.getElementById('RRbranch_selectedValue').value.toString(),
                onSelectedIndexChanged: function () {
                    $("#RRbranch_data").val(branchCollections.items[this.selectedIndex].BranchId);
                }
            });

            document.getElementById('RRbranch_data').value = branchCollections.items[cboBranch.selectedIndex].BranchId;
        }

        // ==========================
        // GET Supplier for Combo Box
        // ==========================
        function getSupplierForComboBox() {
            suppliers = new wijmo.collections.ObservableArray();

            //if(document.getElementById('RRSupplier_data').value == '') {
            //    $('#cmdRRForPOSupplier').prop("disabled", true);
            //} else {
            //    $('#cmdRRForPOSupplier').prop("disabled", false);
            //}

            $.ajax({
                url: '/api/listArticleByArticleTypeId/3',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            suppliers.push({
                                SupplierId: results[i]["Id"],
                                Supplier: results[i]["Article"]
                            });
                        }
                        createCbosupplier(suppliers);
                    } else {
                        createCbosupplier(suppliers);
                    }
                }
            });
            return suppliers;
        }

        // =======================
        // Combo Box for Suppliers
        // =======================
        function createCbosupplier(suppliers) {
            var supplierCollection = new wijmo.collections.CollectionView(suppliers);
            var supplierList = new Array();
            for (var i = 0; i < supplierCollection.items.length; i++) {
                supplierList.push(supplierCollection.items[i].Supplier);
            }

            var disabled;
            if (suppliers == 0) {
                disabled = true;
            } else {
                if (document.getElementById('RR_IsLocked').value == 'true') {
                    disabled = true;
                } else {
                    disabled = false;
                }
            }

            cboSupplier.dispose();
            cboSupplier = new wijmo.input.ComboBox('#RRSupplier', {
                disabled: disabled,
                placeholder: "Select Supplier",
                itemsSource: supplierList,
                isEditable: false,
                selectedValue: document.getElementById('RRSupplier_selectedValue').value.toString(),
                onSelectedIndexChanged: function () {
                    $("#RRSupplier_data").val(supplierCollection.items[this.selectedIndex].SupplierId);
                    $("#RRSupplier_selectedValue").val(supplierCollection.items[this.selectedIndex].Supplier);
                    $("#POStatus_Supplier_data").val(supplierCollection.items[this.selectedIndex].SupplierId);
                    $("#POStatus_Supplier_selectedValue").val(supplierCollection.items[this.selectedIndex].Supplier);

                    document.getElementById('POStatus_PONumber_data').value = 0;
                    getPOInPOStatusForComboBox();
                    getPOForComboBox();
                }
            });

            document.getElementById('RRSupplier_data').value = supplierCollection.items[cboSupplier.selectedIndex].SupplierId;
            document.getElementById('RRSupplier_selectedValue').value = supplierCollection.items[cboSupplier.selectedIndex].Supplier;
            document.getElementById('POStatus_Supplier_data').value = supplierCollection.items[cboSupplier.selectedIndex].SupplierId;
            document.getElementById('POStatus_Supplier_selectedValue').value = supplierCollection.items[cboSupplier.selectedIndex].Supplier;
        }

        // =======================
        // GET Terms for Combo Box
        // =======================
        function getTermForComboBox() {
            terms = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listTerm',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            terms.push({
                                TermId: results[i]["Id"],
                                Term: results[i]["Term"]
                            });
                        }
                        createCboTerm(terms);
                    } else {
                        createCboTerm(terms);
                    }
                }
            });
            return terms;
        }

        // ===================
        // Combo Box for Terms
        // ===================
        function createCboTerm(terms) {
            var termCollections = new wijmo.collections.CollectionView(terms);
            var termList = new Array();
            for (var i = 0; i < termCollections.items.length; i++) {
                termList.push(termCollections.items[i].Term);
            }

            var disabled;
            if (terms == 0) {
                disabled = true;
            } else {
                if (document.getElementById('RR_IsLocked').value == 'true') {
                    disabled = true;
                } else {
                    disabled = false;
                }
            }

            cboTerm.dispose();
            cboTerm = new wijmo.input.ComboBox('#RRTerm', {
                disabled: disabled,
                placeholder: "Select Term",
                itemsSource: termList,
                isEditable: false,
                selectedValue: document.getElementById('RRTerm_selectedValue').value.toString(),
                onSelectedIndexChanged: function () {
                    $("#RRTerm_data").val(termCollections.items[this.selectedIndex].TermId);
                }
            });

            document.getElementById('RRTerm_data').value = termCollections.items[cboTerm.selectedIndex].TermId;
        }


        // =======================
        // GET Users for Combo Box
        // =======================
        function getUsersForComboBox() {
            users = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listUser',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            users.push({
                                UserId: results[i]["Id"],
                                UserFullName: results[i]["FullName"]
                            });
                        }

                        var ReceivingReceiptId = getParam('ReceivingReceiptId');
                        var branchId = @ViewData["BranchId"];
                        if (document.location.search.length == 0) {
                            var userId = document.getElementById('userId_data').value;
                            $.ajax({
                                url: '/api/listByMstUserId/' + userId,
                                cache: false,
                                type: 'GET',
                                contentType: 'application/json; charset=utf-8',
                                data: {},
                                success: function (mstUserResults) {
                                    if (mstUserResults != null) {
                                        document.getElementById('RRReceivedBy_data').value = mstUserResults.Id;
                                        document.getElementById('RRPreparedBy_data').value = mstUserResults.Id;
                                        document.getElementById('RRCheckedBy_data').value = mstUserResults.Id;
                                        document.getElementById('RRApprovedBy_data').value = mstUserResults.Id;

                                        document.getElementById('RRReceivedBy_selectedValue').value = mstUserResults.FullName;
                                        document.getElementById('RRPreparedBy_selectedValue').value = mstUserResults.FullName;
                                        document.getElementById('RRCheckedBy_selectedValue').value = mstUserResults.FullName;
                                        document.getElementById('RRApprovedBy_selectedValue').value = mstUserResults.FullName;

                                        createCboUserReceivedBy(users);
                                        createCboUserPreparedBy(users);
                                        createCboUserCheckedBy(users);
                                        createCboUserApprovedBy(users);
                                    }
                                }
                            });
                        } else {
                            createCboUserReceivedBy(users);
                            createCboUserPreparedBy(users);
                            createCboUserCheckedBy(users);
                            createCboUserApprovedBy(users);
                        }
                    } else {
                        createCboUserReceivedBy(users);
                        createCboUserPreparedBy(users);
                        createCboUserCheckedBy(users);
                        createCboUserApprovedBy(users);
                    }
                }
            });
            return users;
        }

        // ==================================
        // Combo Box for Users - Received By
        // ==================================
        function createCboUserReceivedBy(users) {
            var usersCollection = new wijmo.collections.CollectionView(users);
            var userList = new Array();
            for (var i = 0; i < usersCollection.items.length; i++) {
                userList.push(usersCollection.items[i].UserFullName);
            }

            var disabled;
            if (users == 0) {
                disabled = true;
            } else {
                if (document.getElementById('RR_IsLocked').value == 'true') {
                    disabled = true;
                } else {
                    disabled = false;
                }
            }

            cboReceivedBy.dispose();
            cboReceivedBy = new wijmo.input.ComboBox('#RRReceivedBy', {
                disabled: disabled,
                placeholder: "Select User",
                itemsSource: userList,
                isEditable: false,
                selectedValue: document.getElementById('RRReceivedBy_selectedValue').value.toString(),
                onSelectedIndexChanged: function () {
                    $("#RRReceivedBy_data").val(usersCollection.items[this.selectedIndex].UserId);
                }
            });

            document.getElementById('RRReceivedBy_data').value = usersCollection.items[cboReceivedBy.selectedIndex].UserId;
        }

        // =================================
        // Combo Box for Users - Prepared By
        // =================================
        function createCboUserPreparedBy(users) {
            var usersCollection = new wijmo.collections.CollectionView(users);
            var userList = new Array();
            for (var i = 0; i < usersCollection.items.length; i++) {
                userList.push(usersCollection.items[i].UserFullName);
            }

            var disabled;
            if (users == 0) {
                disabled = true;
            } else {
                if (document.getElementById('RR_IsLocked').value == 'true') {
                    disabled = true;
                } else {
                    disabled = false;
                }
            }

            cboPreparedBy.dispose();
            cboPreparedBy = new wijmo.input.ComboBox('#RRPreparedBy', {
                disabled: true,
                placeholder: "Select User",
                itemsSource: userList,
                isEditable: false,
                required: false,
                selectedValue: document.getElementById('RRPreparedBy_selectedValue').value.toString(),
                onSelectedIndexChanged: function () {
                    $("#RRPreparedBy_data").val(usersCollection.items[this.selectedIndex].UserId);
                }
            });

            document.getElementById('RRPreparedBy_data').value = usersCollection.items[cboPreparedBy.selectedIndex].UserId;
        }

        // =================================
        // Combo Box for Users - Checked By
        // =================================
        function createCboUserCheckedBy(users) {
            var usersCollection = new wijmo.collections.CollectionView(users);
            var userList = new Array();
            for (var i = 0; i < usersCollection.items.length; i++) {
                userList.push(usersCollection.items[i].UserFullName);
            }

            var disabled;
            if (users == 0) {
                disabled = true;
            } else {
                if (document.getElementById('RR_IsLocked').value == 'true') {
                    disabled = true;
                } else {
                    disabled = false;
                }
            }

            cboCheckedBy.dispose();
            cboCheckedBy = new wijmo.input.ComboBox('#RRCheckedBy', {
                disabled: disabled,
                placeholder: "Select User",
                itemsSource: userList,
                isEditable: false,
                selectedValue: document.getElementById('RRCheckedBy_selectedValue').value.toString(),
                onSelectedIndexChanged: function () {
                    $("#RRCheckedBy_data").val(usersCollection.items[this.selectedIndex].UserId);
                }
            });

            document.getElementById('RRCheckedBy_data').value = usersCollection.items[cboCheckedBy.selectedIndex].UserId;
        }

        // =================================
        // Combo Box for Users - Approved By
        // =================================
        function createCboUserApprovedBy(users) {
            var usersCollection = new wijmo.collections.CollectionView(users);
            var userList = new Array();
            for (var i = 0; i < usersCollection.items.length; i++) {
                userList.push(usersCollection.items[i].UserFullName);
            }

            var disabled;
            if (users == 0) {
                disabled = true;
            } else {
                if (document.getElementById('RR_IsLocked').value == 'true') {
                    disabled = true;
                } else {
                    disabled = false;
                }
            }

            cboApprovedBy.dispose();
            cboApprovedBy = new wijmo.input.ComboBox('#RRApprovedBy', {
                disabled: disabled,
                placeholder: "Select User",
                itemsSource: userList,
                isEditable: false,
                selectedValue: document.getElementById('RRApprovedBy_selectedValue').value.toString(),
                onSelectedIndexChanged: function () {
                    $("#RRApprovedBy_data").val(usersCollection.items[this.selectedIndex].UserId);
                }
            });

            document.getElementById('RRApprovedBy_data').value = usersCollection.items[cboApprovedBy.selectedIndex].UserId;
        }

        // =====================================================
        // Function with leading zeroes to display the RR Number
        // =====================================================
        function zerofill(number, length) {
            var result = number.toString();
            var pad = length - result.length;
            while (pad > 0) {
                result = '0' + result;
                pad--;
            }
            return result;
        }

        // ======
        // ADD RR
        // ======
        function RRSaveButton_OnClick() {
            var RRObject = new Object();
            var ReceivingReceiptId = getParam('ReceivingReceiptId');
            RRObject.BranchId = document.getElementById('RRbranch_data').value;
            RRObject.RRDate = document.getElementById('RRRRDate_data').value;
            RRObject.RRNumber = document.getElementById('RRRRNumber_Display').value;
            RRObject.SupplierId = document.getElementById('RRSupplier_data').value;
            RRObject.TermId = document.getElementById('RRTerm_data').value;
            RRObject.DocumentReference = document.getElementById('RRDocReference').value;
            RRObject.ManualRRNumber = document.getElementById('RRManualRRNumber').value;
            RRObject.Remarks = document.getElementById('RRRemarks').value;
            //RRObject.Amount = 0;
            //RRObject.WTaxAmount = 0;
            //RRObject.PaidAmount = 0;
            //RRObject.AdjustmentAmount = 0;
            //RRObject.BalanceAmount = 0;
            RRObject.ReceivedById = document.getElementById('RRReceivedBy_data').value;
            RRObject.PreparedById = document.getElementById('RRPreparedBy_data').value;
            RRObject.CheckedById = document.getElementById('RRCheckedBy_data').value;
            RRObject.ApprovedById = document.getElementById('RRApprovedBy_data').value;
            var data = JSON.stringify(RRObject);

            if (document.getElementById('RRbranch_data').value == '') {
                document.getElementById("RRbranch").style.border = "1px solid red";
            } else {
                document.getElementById("RRbranch").style.border = "1px solid #C8C8C8   ";
            }

            if (document.getElementById('RRSupplier_data').value == '') {
                document.getElementById("RRSupplier").style.border = "1px solid red";
            } else {
                document.getElementById("RRSupplier").style.border = "1px solid #C8C8C8   ";
            }

            if (document.getElementById('RRTerm_data').value == '') {
                document.getElementById("RRTerm").style.border = "1px solid red";
            } else {
                document.getElementById("RRTerm").style.border = "1px solid #C8C8C8   ";
            }

            if (document.getElementById('RRReceivedBy_data').value == '') {
                document.getElementById("RRReceivedBy").style.border = "1px solid red";
            } else {
                document.getElementById("RRReceivedBy").style.border = "1px solid #C8C8C8   ";
            }

            if (document.getElementById('RRPreparedBy_data').value == '') {
                document.getElementById("RRPreparedBy").style.border = "1px solid red";
            } else {
                document.getElementById("RRPreparedBy").style.border = "1px solid #C8C8C8   ";
            }

            if (document.getElementById('RRCheckedBy_data').value == '') {
                document.getElementById("RRCheckedBy").style.border = "1px solid red";
            } else {
                document.getElementById("RRCheckedBy").style.border = "1px solid #C8C8C8   ";
            }

            if (document.getElementById('RRApprovedBy_data').value == '') {
                document.getElementById("RRApprovedBy").style.border = "1px solid red";
            } else {
                document.getElementById("RRApprovedBy").style.border = "1px solid #C8C8C8   ";
            }

            var isValid = true;
            $('.requiredRR').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                }
                else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            if (isValid == false) {
                toastr.error("Invalid Entry");
            }
            else {
                if (document.location.search.length == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/addReceivingReceipt',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: data,
                        success: function(id){
                            if(id > 0) {
                                $("#cmdRRJournal").prop("disabled", true);
                                $("#cmdSaveRRSave").prop("disabled", true);
                                $("#cmdRRSave").prop("disabled", true);
                                $("#cmdRREdit").prop("disabled", true);
                                $("#cmdRRPrint").prop("disabled", true);
                                $("#cmdRRClose").prop("disabled", true);
                                window.location = '/Software/ReceivingReceiptDetail?ReceivingReceiptId=' + id;
                            } else {
                                window.history.back();
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/updateReceivingReceipt/' + ReceivingReceiptId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: data,
                        statusCode: {
                            200: function () {
                                $("#cmdRRJournal").prop("disabled", true);
                                $("#cmdSaveRRSave").prop("disabled", true);
                                $("#cmdRRSave").prop("disabled", true);
                                $("#cmdRREdit").prop("disabled", true);
                                $("#cmdRRPrint").prop("disabled", true);
                                $("#cmdRRClose").prop("disabled", true);
                                toastr.success("Successfully Updated");
                                window.setTimeout(function () {
                                    location.reload()
                                }, 1000);
                            },
                            404: function () {
                                toastr.error("Can't Save");
                                $("#cmdRRJournal").prop("disabled", false);
                                $("#cmdSaveRRSave").prop("disabled", false);
                                $("#cmdRRSave").prop("disabled", false);
                                $("#cmdRREdit").prop("disabled", false);
                                $("#cmdRRPrint").prop("disabled", false);
                                $("#cmdRRClose").prop("disabled", false);
                            },
                            400: function () {
                                toastr.error("Bad Request");
                                $("#cmdRRJournal").prop("disabled", false);
                                $("#cmdSaveRRSave").prop("disabled", false);
                                $("#cmdRRSave").prop("disabled", false);
                                $("#cmdRREdit").prop("disabled", false);
                                $("#cmdRRPrint").prop("disabled", false);
                                $("#cmdRRClose").prop("disabled", false);
                            }
                        }
                    });
                }
            }
        }

        // ==================
        // Save RR - IsLocked
        // ==================
        function RRSaveSaveButton_OnClick() {
            var RRObject = new Object();
            var ReceivingReceiptId = getParam('ReceivingReceiptId');
            RRObject.BranchId = document.getElementById('RRbranch_data').value;
            RRObject.RRDate = document.getElementById('RRRRDate_data').value;
            RRObject.RRNumber = document.getElementById('RRRRNumber_Display').value;
            RRObject.SupplierId = document.getElementById('RRSupplier_data').value;
            RRObject.TermId = document.getElementById('RRTerm_data').value;
            RRObject.DocumentReference = document.getElementById('RRDocReference').value;
            RRObject.ManualRRNumber = document.getElementById('RRManualRRNumber').value;
            RRObject.Remarks = document.getElementById('RRRemarks').value;
            RRObject.Amount = 0;
            RRObject.WTaxAmount = 0;
            RRObject.PaidAmount = 0;
            RRObject.AdjustmentAmount = 0;
            RRObject.BalanceAmount = 0;
            RRObject.ReceivedById = document.getElementById('RRReceivedBy_data').value;
            RRObject.PreparedById = document.getElementById('RRPreparedBy_data').value;
            RRObject.CheckedById = document.getElementById('RRCheckedBy_data').value;
            RRObject.ApprovedById = document.getElementById('RRApprovedBy_data').value;
            RRObject.IsLocked = true;
            var data = JSON.stringify(RRObject);

            if (document.getElementById('RRbranch_data').value == '') {
                document.getElementById("RRbranch").style.border = "1px solid red";
            } else {
                document.getElementById("RRbranch").style.border = "1px solid #C8C8C8   ";
            }

            if (document.getElementById('RRSupplier_data').value == '') {
                document.getElementById("RRSupplier").style.border = "1px solid red";
            } else {
                document.getElementById("RRSupplier").style.border = "1px solid #C8C8C8   ";
            }

            if (document.getElementById('RRTerm_data').value == '') {
                document.getElementById("RRTerm").style.border = "1px solid red";
            } else {
                document.getElementById("RRTerm").style.border = "1px solid #C8C8C8   ";
            }

            if (document.getElementById('RRReceivedBy_data').value == '') {
                document.getElementById("RRReceivedBy").style.border = "1px solid red";
            } else {
                document.getElementById("RRReceivedBy").style.border = "1px solid #C8C8C8   ";
            }

            if (document.getElementById('RRPreparedBy_data').value == '') {
                document.getElementById("RRPreparedBy").style.border = "1px solid red";
            } else {
                document.getElementById("RRPreparedBy").style.border = "1px solid #C8C8C8   ";
            }

            if (document.getElementById('RRCheckedBy_data').value == '') {
                document.getElementById("RRCheckedBy").style.border = "1px solid red";
            } else {
                document.getElementById("RRCheckedBy").style.border = "1px solid #C8C8C8   ";
            }

            if (document.getElementById('RRApprovedBy_data').value == '') {
                document.getElementById("RRApprovedBy").style.border = "1px solid red";
            } else {
                document.getElementById("RRApprovedBy").style.border = "1px solid #C8C8C8   ";
            }

            var isValid = true;
            $('.requiredRR').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                }
                else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            if (isValid == false) {
                toastr.error("Invalid Entry");
            }
            else {
                if (document.location.search.length == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/addReceivingReceipt',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: data,
                        success: function(id){
                            if(id > 0) {
                                $("#cmdRRJournal").prop("disabled", true);
                                $("#cmdSaveRRSave").prop("disabled", true);
                                $("#cmdRRSave").prop("disabled", true);
                                $("#cmdRREdit").prop("disabled", true);
                                $("#cmdRRPrint").prop("disabled", true);
                                $("#cmdRRClose").prop("disabled", true);
                                window.location = '/Software/ReceivingReceiptDetail?ReceivingReceiptId=' + id;
                            } else {
                                window.history.back();
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/updateReceivingReceipt/' + ReceivingReceiptId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: data,
                        statusCode: {
                            200: function () {
                                $("#cmdRRJournal").prop("disabled", true);
                                $("#cmdSaveRRSave").prop("disabled", true);
                                $("#cmdRRSave").prop("disabled", true);
                                $("#cmdRREdit").prop("disabled", true);
                                $("#cmdRRPrint").prop("disabled", true);
                                $("#cmdRRClose").prop("disabled", true);
                                toastr.success("Successfully Updated");
                                window.setTimeout(function () {
                                    location.reload()
                                }, 1000);
                            },
                            404: function () {
                                toastr.error("Can't Save");
                                $("#cmdRRJournal").prop("disabled", false);
                                $("#cmdSaveRRSave").prop("disabled", false);
                                $("#cmdRRSave").prop("disabled", false);
                                $("#cmdRREdit").prop("disabled", false);
                                $("#cmdRRPrint").prop("disabled", false);
                                $("#cmdRRClose").prop("disabled", false);
                            },
                            400: function () {
                                toastr.error("Bad Request");
                                $("#cmdRRJournal").prop("disabled", false);
                                $("#cmdSaveRRSave").prop("disabled", false);
                                $("#cmdRRSave").prop("disabled", false);
                                $("#cmdRREdit").prop("disabled", false);
                                $("#cmdRRPrint").prop("disabled", false);
                                $("#cmdRRClose").prop("disabled", false);
                            }
                        }
                    });
                }
            }
        }

        // ================
        // Edit RR - Unlock
        // ================
        function RREditButton_OnClick() {
            var RRObject = new Object();
            var ReceivingReceiptId = getParam('ReceivingReceiptId');
            RRObject.IsLocked = false;
            var data = JSON.stringify(RRObject);
            $.ajax({
                type: "PUT",
                url: '/api/updateReceivingReceiptIsLocked/' + ReceivingReceiptId,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: data,
                statusCode: {
                    200: function () {
                        $("#cmdRRJournal").prop("disabled", true);
                        $("#cmdSaveRRSave").prop("disabled", true);
                        $("#cmdRRSave").prop("disabled", true);
                        $("#cmdRREdit").prop("disabled", true);
                        $("#cmdRRPrint").prop("disabled", true);
                        $("#cmdRRClose").prop("disabled", true);
                        toastr.success("Unlocked");
                        window.setTimeout(function () {
                            location.reload()
                        }, 1000);
                    },
                    404: function () {
                        toastr.error("Can't Save");
                        $("#cmdRRJournal").prop("disabled", false);
                        $("#cmdSaveRRSave").prop("disabled", false);
                        $("#cmdRRSave").prop("disabled", false);
                        $("#cmdRREdit").prop("disabled", false);
                        $("#cmdRRPrint").prop("disabled", false);
                        $("#cmdRRClose").prop("disabled", false);
                    },
                    400: function () {
                        toastr.error("Bad Request");
                        $("#cmdRRJournal").prop("disabled", false);
                        $("#cmdSaveRRSave").prop("disabled", false);
                        $("#cmdRRSave").prop("disabled", false);
                        $("#cmdRREdit").prop("disabled", false);
                        $("#cmdRRPrint").prop("disabled", false);
                        $("#cmdRRClose").prop("disabled", false);
                    }
                }
            });
        }

        // ========
        // Print RR
        // ========
        function RRPrintButton_OnClick() {
            var ReceivingReceiptId = getParam('ReceivingReceiptId');
            window.location = "/RepReceivingReceipt/ReceivingReceipt?RRId=" + ReceivingReceiptId;
        }

        // =========
        // PO Status
        // =========
        function RRForPOSupplier_OnClick() {
            $('#POStatus').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById('POStatus_PONumber_data').value = 0;
            getSupplierInPOStatusForComboBox();
            getPOInPOStatusForComboBox();
            document.getElementById("loadingPOStatusGridList").innerHTML = '<i class="fa fa-spinner fa-spin"></i> Loading PO Status...';
            document.getElementById("loadingPOItemsGridList").innerHTML = '<i class="fa fa-spinner fa-spin"></i> Loading Purchase Order Items...';

            $('#POLinesDetailForm').hide();
            $('#loadingPOStatusGridList').show();

            $('#loadingPOItemsGridList').hide();
            $('#footerModalPOStatusNavigationButtons').hide();
            $('#POStatusGrid').hide();
            $('#POItem_Title').hide();
            $('#seacrhIdinPOStatus').hide();

            setTimeout(function () {
                $('#POLinesDetailForm').show();
                $('#loadingPOStatusGridList').hide();

                POStatus = new wijmo.collections.CollectionView(getPurchaseOrderItemForPOSTatus());
                POstatusGrid.itemsSource = POStatus;


            }, 1000);

        }

        // ====================================
        // GET Supplier PO Status for Combo Box
        // ====================================
        function getSupplierInPOStatusForComboBox() {
            POStatussuppliers = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listArticleByArticleTypeId/3',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            POStatussuppliers.push({
                                SupplierId: results[i]["Id"],
                                Supplier: results[i]["Article"]
                            });
                        }
                        createCbosupplierPOStatus(POStatussuppliers);
                    } else {
                        createCbosupplierPOStatus(POStatussuppliers);
                    }
                }
            });
            return suppliers;
        }

        // =================================
        // Combo Box for Suppliers PO Status
        // =================================
        function createCbosupplierPOStatus(POStatussuppliers) {
            var supplierCollection = new wijmo.collections.CollectionView(POStatussuppliers);
            var supplierList = new Array();
            for (var i = 0; i < supplierCollection.items.length; i++) {
                supplierList.push(supplierCollection.items[i].Supplier);
            }

            var disabled;
            if (POStatussuppliers == 0) {
                disabled = true;
            } else {
                if (document.getElementById('RR_IsLocked').value == 'true') {
                    disabled = true;
                } else {
                    disabled = false;
                }
            }

            cboSuppliersPOStatus.dispose();
            cboSuppliersPOStatus = new wijmo.input.ComboBox('#POStatus_Supplier', {
                disabled: true,
                placeholder: "Select Supplier",
                itemsSource: supplierList,
                isEditable: false,
                required: false,
                selectedValue: document.getElementById('POStatus_Supplier_selectedValue').value.toString(),
                onSelectedIndexChanged: function () {
                    $("#POStatus_Supplier_data").val(supplierCollection.items[this.selectedIndex].SupplierId);
                    document.getElementById('POStatus_PONumber_data').value = "";
                    getPOInPOStatusForComboBox();
                }
            });

            document.getElementById('POStatus_Supplier_data').value = supplierCollection.items[cboSuppliersPOStatus.selectedIndex].SupplierId;
        }

        // ==================================
        // GET PO for PO Status for Combo Box
        // ==================================
        function getPOInPOStatusForComboBox() {
            POsPOStatus = new wijmo.collections.ObservableArray();
            var POSupplierId = document.getElementById('POStatus_Supplier_data').value;
            $.ajax({
                url: '/api/listPurchaseOrderBySupplierId/' + POSupplierId,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            POsPOStatus.push({
                                POId: results[i]["Id"],
                                PONumber: results[i]["PONumber"],
                                PODate: results[i]["PODate"]
                            });
                        }
                        createCboPONumberPOStatus(POsPOStatus);
                    } else {
                        createCboPONumberPOStatus(POsPOStatus);
                    }
                }
            });
            return suppliers;
        }

        // =============================
        // Combo Box for PO -  PO Status
        // =============================
        function createCboPONumberPOStatus(POsPOStatus) {
            var POCollection = new wijmo.collections.CollectionView(POsPOStatus);
            var POList = new Array();
            for (var i = 0; i < POCollection.items.length; i++) {
                POList.push(POCollection.items[i].PONumber + " - " + POCollection.items[i].PODate);
            }

            var disabled;
            if (POsPOStatus == 0) {
                disabled = true;
            } else {
                if (document.getElementById('RR_IsLocked').value == 'true') {
                    disabled = true;
                } else {
                    disabled = false;
                }
            }

            cboPONumberPOStatus.dispose();
            cboPONumberPOStatus = new wijmo.input.ComboBox('#POStatus_PONumber', {
                disabled: disabled,
                placeholder: "Select PO Number",
                itemsSource: POList,
                isEditable: false,
                selectedValue: document.getElementById('POStatus_PONumber_selectedValue').value.toString(),
                onSelectedIndexChanged: function () {
                    $("#POStatus_PONumber_data").val(POCollection.items[this.selectedIndex].POId);

                    $('#loadingPOItemsGridList').hide();
                    $('#footerModalPOStatusNavigationButtons').hide();
                    $('#POStatusGrid').hide();
                    $('#POItem_Title').hide();
                    $('#seacrhIdinPOStatus').hide();

                    $('#loadingPOItemsGridList').show();

                    setTimeout(function () {
                        POStatus = new wijmo.collections.CollectionView(getPurchaseOrderItemForPOSTatus());
                        POstatusGrid.itemsSource = POStatus;
                    }, 500);
                }
            });

            document.getElementById('POStatus_PONumber_data').value = POCollection.items[cboPONumberPOStatus.selectedIndex].POId;
        }

        // ========================================
        // Purchase Order Line / Item for PO Status
        // ========================================
        function getPurchaseOrderItemForPOSTatus() {
            $('#loadingPOItemsGridList').hide();
            $('#POStatusGrid').show();
            $('#footerModalPOStatusNavigationButtons').show();
            $('#POItem_Title').show();
            $('#seacrhIdinPOStatus').show();

            var POStatus = new wijmo.collections.ObservableArray;
            var POId = document.getElementById('POStatus_PONumber_data').value;
            $.ajax({
                url: '/api/listPurchaseOrderItemForPOStatusByPOId/' + POId,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (Results) {
                    $('#loadingPOStatusGridList').hide();
                    if (Results.length > 0) {
                        $('#cmdApplyPOStatusButton').prop("disabled", false);
                        for (i = 0; i < Results.length; i++) {
                            POStatus.push({
                                ApplyId: "<button class='btn btn-primary btn-xs' onclick='cmdApplyPOStatusButton_OnClick()'><i class='fa fa-check-square-o'></i> Pick</button>",
                                Id: Results[i]["Id"],
                                ItemId: Results[i]["ItemId"],
                                Item: Results[i]["Item"],
                                ItemCode: Results[i]["ItemCode"],
                                POId: Results[i]["POId"],
                                Quantity: Results[i]["Quantity"],
                                UnitId: Results[i]["UnitId"],
                                Unit: Results[i]["Unit"],
                                Particulars: Results[i]["Particulars"],
                                Received: Results[i]["Received"],
                                Balance: Results[i]["Quantity"] - Results[i]["Received"],
                                QuantityBalance: Results[i]["Quantity"] - Results[i]["Received"],
                                Cost: Results[i]["Cost"],
                                Amount: Results[i]["Amount"]
                            });
                        }
                    } else {
                        $('#cmdApplyPOStatusButton').prop("disabled", true);
                    }
                }
            });
            return POStatus;
        }

        // ===============
        // PO In PO Status
        // ===============
        function getPOBySupplierInPOStatus() {
            POStatus = new wijmo.collections.CollectionView(getPurchaseOrderItemForPOSTatus());

            // Flex Grid for Item
            POstatusGrid = new wijmo.grid.FlexGrid('#POStatusGrid');
            POstatusGrid.initialize({
                columns: [
                            {
                                "header": "Pick",
                                "binding": "ApplyId",
                                "width": 75,
                                "align": "center",
                                "allowResizing": false,
                                "allowSorting": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Code",
                                "binding": "ItemCode",
                                "allowSorting": true,
                                "width": 70
                            },
                            {
                                "header": "Item",
                                "binding": "Item",
                                "allowSorting": true,
                                "width": "2*"
                            },
                            {
                                "header": "Unit",
                                "binding": "Unit",
                                "allowSorting": true,
                                "width": 110
                            },
                            {
                                "header": "PO",
                                "binding": "Quantity",
                                "allowSorting": true,
                                "width": 100
                            },
                            {
                                "header": "Received",
                                "binding": "Received",
                                "allowSorting": true,
                                "width": 110
                            },
                            {
                                "header": "Balance",
                                "binding": "Balance",
                                "allowSorting": true,
                                "width": 110
                            },
                            {
                                "header": "Quantity",
                                "binding": "QuantityBalance",
                                "allowSorting": true,
                                "width": 100
                            },
                ],
                autoGenerateColumns: false,
                itemsSource: POStatus,
                isReadOnly: true,
                frozenColumns: 1,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            POstatusGrid.trackChanges = true;

            // Merge column Headers
            var hr = new wijmo.grid.Row();
            POstatusGrid.allowMerging = wijmo.grid.AllowMerging.AllHeaders;
            POstatusGrid.columnHeaders.rows.push(hr);
            POstatusGrid.columnHeaders.rows[0].allowMerging = true;

            POstatusGrid.columnHeaders.columns[0].allowMerging = true;
            POstatusGrid.columnHeaders.setCellData(0, 0, 'Pick');

            POstatusGrid.columnHeaders.columns[1].allowMerging = true;
            POstatusGrid.columnHeaders.setCellData(0, 1, 'Code');

            POstatusGrid.columnHeaders.columns[2].allowMerging = true;
            POstatusGrid.columnHeaders.setCellData(0, 2, 'Item');

            POstatusGrid.columnHeaders.columns[3].allowMerging = true;
            POstatusGrid.columnHeaders.setCellData(0, 3, 'Unit');

            for (var columnQuantityTopAssigned = 4; columnQuantityTopAssigned <= 6; columnQuantityTopAssigned++) {
                POstatusGrid.columnHeaders.setCellData(0, columnQuantityTopAssigned, 'Quantities');
            }

            POstatusGrid.columnHeaders.columns[7].allowMerging = true;
            POstatusGrid.columnHeaders.setCellData(0, 7, 'Quantity');

            //POstatusGrid.columnHeaders.columns[8].allowMerging = true;
            //POstatusGrid.columnHeaders.setCellData(0, 8, 'Quantity');
        }

        // ==========================
        // Apply ALL PO Items Confirm
        // ==========================
        function cmdApplyAllPOStatusButton_OnClick() {
            $('#applyAllConfirmPOStatus').modal({
                show: true,
                backdrop: 'static'
            });

            $("#cmdConfirmApplyAllPOStatusPOItems").prop("disabled", false);
            $("#cmdCloseButtonApplyAllPOStatusPOItems").prop("disabled", false);
        }
        // Confirm Apply ALL PO
        function btnConfrimApplyAllPOItems_OnClick() {
            $("#cmdConfirmApplyAllPOStatusPOItems").prop("disabled", true);
            $("#cmdCloseButtonApplyAllPOStatusPOItems").prop("disabled", true);
            var ReceivingReceiptId = getParam('ReceivingReceiptId');
            var BranchId = document.getElementById('RRbranch_data').value;
            var POId = document.getElementById('POStatus_PONumber_data').value;
            $.ajax({
                url: '/api/applyAllPOItemToReceivingReceiptItem/' + ReceivingReceiptId + '/' + BranchId + '/' + POId,
                type: "POST",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        $("#cmdConfirmApplyAllPOStatusPOItems").prop("disabled", true);
                        $("#cmdCloseButtonApplyAllPOStatusPOItems").prop("disabled", true);
                        toastr.success("Successfully Applied");

                        $('#applyAllConfirmPOStatus').modal('hide');
                        $('#POStatus').modal('hide');

                        items = new wijmo.collections.CollectionView(getRRItem());

                        // Flex Grid for Item
                        itemGrid.itemsSource = items;
                        itemGrid.trackChanges = true;

                        POStatus = new wijmo.collections.CollectionView(getPurchaseOrderItemForPOSTatus());
                        // Flex Grid for Item
                        POstatusGrid.itemsSource = POStatus;
                        POstatusGrid.trackChanges = true;
                    },
                    404: function () {
                        toastr.error("Request Not Found");
                        $('#applyAllConfirmPOStatus').modal('hide');
                        $('#POStatus').modal('hide');
                        $("#cmdConfirmApplyAllPOStatusPOItems").prop("disabled", false);
                        $("#cmdCloseButtonApplyAllPOStatusPOItems").prop("disabled", false);
                    },
                    400: function () {
                        toastr.error("Bad Request");
                        $('#applyAllConfirmPOStatus').modal('hide');
                        $('#POStatus').modal('hide');
                        $("#cmdConfirmApplyAllPOStatusPOItems").prop("disabled", false);
                        $("#cmdCloseButtonApplyAllPOStatusPOItems").prop("disabled", false);
                    }
                }
            });
        }

        // =====================
        // Apply PO Item Confirm
        // =====================
        function cmdApplyPOStatusButton_OnClick() {
            $('#applyConfirmPOStatus').modal({
                show: true,
                backdrop: 'static'
            });

            $("#cmdConfirmApplyPOStatusPOItems").prop("disabled", false);
            $("#cmdCloseButtonApplyPOStatusPOItems").prop("disabled", false);
        }
        // Confirm Apply PO Item
        function btnConfrimApplyPOItems_OnClick() {
            $("#cmdConfirmApplyPOStatusPOItems").prop("disabled", true);
            $("#cmdCloseButtonApplyPOStatusPOItems").prop("disabled", true);

            POStatus.editItem(POStatus.currentItem);
            var POItem = POStatus.currentEditItem;
            var POStatusId = POItem.Id;

            console.log(POStatusId);

            var ReceivingReceiptId = getParam('ReceivingReceiptId');
            var BranchId = document.getElementById('RRbranch_data').value;
            var POId = document.getElementById('POStatus_PONumber_data').value;
            $.ajax({
                url: '/api/applyPOItemToReceivingReceiptItem/' + ReceivingReceiptId + '/' + BranchId + '/' + POId + '/' + POStatusId,
                type: "POST",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        $("#cmdConfirmApplyPOStatusPOItems").prop("disabled", true);
                        $("#cmdCloseButtonApplyPOStatusPOItems").prop("disabled", true);
                        toastr.success("Successfully Applied");

                        $('#applyConfirmPOStatus').modal('hide');

                        items = new wijmo.collections.CollectionView(getRRItem());

                        // Flex Grid for Item
                        itemGrid.itemsSource = items;
                        itemGrid.trackChanges = true;

                        POStatus = new wijmo.collections.CollectionView(getPurchaseOrderItemForPOSTatus());

                        // Flex Grid for Item
                        POstatusGrid.itemsSource = POStatus;
                        POstatusGrid.trackChanges = true;
                    },
                    404: function () {
                        toastr.error("Request Not Found");
                        $('#applyConfirmPOStatus').modal('hide');
                        $("#cmdConfirmApplyPOStatusPOItems").prop("disabled", false);
                        $("#cmdCloseButtonApplyPOStatusPOItems").prop("disabled", false);
                    },
                    400: function () {
                        toastr.error("Bad Request");
                        $('#applyConfirmPOStatus').modal('hide');
                        $("#cmdConfirmApplyPOStatusPOItems").prop("disabled", false);
                        $("#cmdCloseButtonApplyPOStatusPOItems").prop("disabled", false);
                    }
                }
            });
        }

        // ===============
        // OnLoad Function
        // ===============
        $(document).ready(function () {
            var userId = '@ViewData["MstUserId"]';
            rightsAccessValidation(userId);

            var ReceivingReceiptId = getParam('ReceivingReceiptId');
            if (document.location.search.length == 0) {
                $('#cmdRRJournal').hide();
                $('#cmdSaveRRSave').hide();
                $('#cmdRRSave').show();
                $('#cmdRREdit').hide();

                $("#cmdRRPrint").prop("disabled", true);

                $('#cmdRRForPOSupplier').prop("disabled", true);
                $('#btnRRLineItem').prop("disabled", true)
                //$('#btnAddContactInformation').prop('disabled', true);
            } else {
                $('#cmdRRJournal').show();
                $('#cmdRRSave').hide();
                $('#cmdRREdit').show();
            }

            $('#cmdApplyPOStatusButton').prop("disabled", true);
            document.getElementById('POStatus_PONumber_data').value = 0;

            cboSuppliersPOStatus = new wijmo.input.ComboBox('#POStatus_Supplier');
            cboPONumberPOStatus = new wijmo.input.ComboBox('#POStatus_PONumber');

            getPOBySupplierInPOStatus();
            document.getElementById('RR_Lock').disabled = true;
            document.getElementById('RRRRNumber_Display').disabled = true;

            cboBranch = new wijmo.input.ComboBox('#RRbranch');

            var d = new Date();
            document.getElementById("RRRRDate_data").value = [d.getMonth() + 1, d.getDate(), d.getFullYear()].join('/');
            RRDate = new wijmo.input.InputDate('#RRRRDate', {
                format: 'MM/dd/yyyy',
                value: new Date(),
                mask: '99/99/9999',
                onValueChanged: function () {
                    document.getElementById('RRRRDate_data').value = this.value.toLocaleDateString();
                }
            });

            cboSupplier = new wijmo.input.ComboBox('#RRSupplier');
            cboTerm = new wijmo.input.ComboBox('#RRTerm');
            cboReceivedBy = new wijmo.input.ComboBox('#RRReceivedBy');
            cboPreparedBy = new wijmo.input.ComboBox('#RRPreparedBy');
            cboCheckedBy = new wijmo.input.ComboBox('#RRCheckedBy');
            cboApprovedBy = new wijmo.input.ComboBox('#RRApprovedBy');

            getRRById();

            var ReceivingReceiptId = getParam('ReceivingReceiptId');
            if (document.location.search.length == 0) {
                getBranchesForComboBox();
                getSupplierForComboBox();
                getTermForComboBox();
                getUsersForComboBox();

                if (document.getElementById('RRRRNumber').value == 0) {
                    document.getElementById('RRRRNumber_Display').value = "0000000001";
                }

                document.getElementById('RRRRNumber').value = 0;
                //document.getElementById('journalVoucher_No_Display').value = "000-000000";
                var RRs = new wijmo.collections.ObservableArray;
                $.ajax({
                    url: '/api/receivingReceiptLastRRNumber',
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    data: {},
                    success: function (Results) {
                        if(Results != null) {
                            var RR_Number = parseInt(Results.RRNumber);
                            var RR_Number_PlusOne = 0000000001;
                            var RR_Num_Results = RR_Number + RR_Number_PlusOne;
                            //var JV_Number_Display = JV_Num_Results.toString().replace(/(\d{3})(\d+)/, '$1-$2');

                            document.getElementById('RRRRNumber').value = zerofill(RR_Num_Results, 10);
                            document.getElementById('RRRRNumber_Display').value = zerofill(RR_Num_Results, 10);
                        }
                    }
                });
            }

            $(document).ajaxStop(function () {
                if (document.location.search.length == 0) {
                    RRSaveSaveButton_OnClick();
                    window.RRSaveSaveButton_OnClick = function () {
                        return true;
                    }
                }
            });
        });
    </script>

    <!-- ============ -->
    <!-- Item Scripts -->
    <!-- ============ -->
    <script type="text/javascript">
        // =========================
        // Global Variables for Item
        // =========================
        var items;
        var itemGrid;
        var btnFirstPageGridItem;
        var btnPreviousPageGridItem;
        var btnNextPageGridItem;
        var btnLastPageGridItem;
        var btnCurrentPageGridItem;
        var POs;
        var cboPOs;
        var POItems;
        var cboItemCode;
        var cboItemDescription;
        var units;
        var cboUnit;
        var POItembranches;
        var cboPOItemBranch;
        var taxTypes;
        var cboForVATTaxType;
        var cboForWTAXTaxType;
        var BUCUnits;
        var cboBUCUnit;

        // ===========
        // GET RR Item
        // ===========
        function getRRItem() {
            var items = new wijmo.collections.ObservableArray;
            var ReceivingReceiptId = getParam('ReceivingReceiptId');
            if (document.location.search.length == 0) {
                NProgress.done();
            } else {
                NProgress.start();
                $.ajax({
                    url: '/api/listReceivingReceiptItemByRRId/' + ReceivingReceiptId,
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    data: {},
                    success: function (Results) {
                        if (Results.length > 0) {
                            var RRs = new wijmo.collections.ObservableArray;
                            var ReceivingReceiptId = getParam('ReceivingReceiptId');
                            $.ajax({
                                url: '/api/receivingReceipt/' + ReceivingReceiptId,
                                cache: false,
                                type: 'GET',
                                contentType: 'application/json; charset=utf-8',
                                data: {},
                                success: function (RRResults) {
                                    if (RRResults.length > 0) {
                                        RRs.push({
                                            Id: RRResults.Id,
                                            IsLocked: RRResults.IsLocked
                                        });
                                    }

                                    if (RRResults.IsLocked == true) {
                                        for (i = 0; i < Results.length; i++) {
                                            items.push({
                                                EditId: "<button class='btn btn-primary btn-xs btn-block' onclick='btnItemRRLinesEdit_OnClick()' disabled><i class='fa fa-edit'></i> Edit</button>",
                                                DeleteId: "<button class='btn btn-danger btn-xs btn-block' onclick='btnItemRRLinesDelete_OnClick()' disabled><i class='fa fa-trash'></i> Delete</button>",
                                                Id: Results[i]["Id"],
                                                RRId: Results[i]["RRId"],
                                                RR: Results[i]["RR"],
                                                POId: Results[i]["POId"],
                                                PO: Results[i]["PO"],
                                                ItemId: Results[i]["ItemId"],
                                                Item: Results[i]["Item"],
                                                ItemCode: Results[i]["ItemCode"],
                                                Particulars: Results[i]["Particulars"],
                                                UnitId: Results[i]["UnitId"],
                                                Unit: Results[i]["Unit"],
                                                Quantity: Results[i]["Quantity"],
                                                Cost: Results[i]["Cost"],
                                                Amount: Results[i]["Amount"],
                                                VATId: Results[i]["VATId"],
                                                VAT: Results[i]["VAT"],
                                                VATPercentage: Results[i]["VAT"] + "<hr style='margin-top: 3px; margin-bottom: 3px; border-color: #cccccc' />" + Results[i]["VATPercentage"],
                                                VATRate: Results[i]["VATPercentage"],
                                                VATAmount: Results[i]["VATAmount"],
                                                WTAXId: Results[i]["WTAXId"],
                                                WTAX: Results[i]["WTAX"],
                                                WTAXPercentage: Results[i]["WTAX"] + "<hr style='margin-top: 3px; margin-bottom: 3px; border-color: #cccccc' />" + Results[i]["WTAXPercentage"],
                                                WTAXRate: Results[i]["WTAXPercentage"],
                                                WTAXAmount: Results[i]["WTAXAmount"],
                                                BranchId: Results[i]["BranchId"],
                                                Branch: Results[i]["Branch"],
                                                BaseUnitId: Results[i]["BaseUnitId"],
                                                BaseUnit: Results[i]["BaseUnit"],
                                                BaseQuantity: Results[i]["BaseQuantity"],
                                                BaseCost: Results[i]["BaseCost"]
                                            });
                                        }
                                    } else {
                                        for (i = 0; i < Results.length; i++) {
                                            items.push({
                                                EditId: "<button class='btn btn-primary btn-xs btn-block' onclick='btnItemRRLinesEdit_OnClick()'><i class='fa fa-edit'></i> Edit</button>",
                                                DeleteId: "<button class='btn btn-danger btn-xs btn-block' onclick='btnItemRRLinesDelete_OnClick()'><i class='fa fa-trash'></i> Delete</button>",
                                                Id: Results[i]["Id"],
                                                RRId: Results[i]["RRId"],
                                                RR: Results[i]["RR"],
                                                POId: Results[i]["POId"],
                                                PO: Results[i]["PO"],
                                                ItemId: Results[i]["ItemId"],
                                                Item: Results[i]["Item"],
                                                ItemCode: Results[i]["ItemCode"],
                                                Particulars: Results[i]["Particulars"],
                                                UnitId: Results[i]["UnitId"],
                                                Unit: Results[i]["Unit"],
                                                Quantity: Results[i]["Quantity"],
                                                Cost: Results[i]["Cost"],
                                                Amount: Results[i]["Amount"],
                                                VATId: Results[i]["VATId"],
                                                VAT: Results[i]["VAT"],
                                                VATPercentage: Results[i]["VAT"] + "<hr style='margin-top: 3px; margin-bottom: 3px; border-color: #cccccc' />" + Results[i]["VATPercentage"],
                                                VATRate: Results[i]["VATPercentage"],
                                                VATAmount: Results[i]["VATAmount"],
                                                WTAXId: Results[i]["WTAXId"],
                                                WTAX: Results[i]["WTAX"],
                                                WTAXPercentage: Results[i]["WTAX"] + "<hr style='margin-top: 3px; margin-bottom: 3px; border-color: #cccccc' />" + Results[i]["WTAXPercentage"],
                                                WTAXRate: Results[i]["WTAXPercentage"],
                                                WTAXAmount: Results[i]["WTAXAmount"],
                                                BranchId: Results[i]["BranchId"],
                                                Branch: Results[i]["Branch"],
                                                BaseUnitId: Results[i]["BaseUnitId"],
                                                BaseUnit: Results[i]["BaseUnit"],
                                                BaseQuantity: Results[i]["BaseQuantity"],
                                                BaseCost: Results[i]["BaseCost"]
                                            });
                                        }
                                    }
                                }
                            });
                        }
                        NProgress.done();
                    }
                }).fail(function (xhr, textStatus, err) {
                    alert(err);
                });
            }
            return items;
        }

        // ===========================
        // GET PO for PO for Combo Box
        // ===========================
        function getPOForComboBox() {
            POs = new wijmo.collections.ObservableArray();
            var POSupplierId = document.getElementById('RRSupplier_data').value;
            $.ajax({
                url: '/api/listPurchaseOrderBySupplierId/' + POSupplierId,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            POs.push({
                                POId: results[i]["Id"],
                                PONumber: results[i]["PONumber"],
                                PODate: results[i]["PODate"]
                            });
                        }
                        createCboPO(POs);
                        getPOItemForComboBox();
                        getTaxTypeForComboBox();
                    } else {
                        createCboPO(POs);
                        getPOItemForComboBox();
                        getTaxTypeForComboBox();
                    }
                }
            });
            return POs;
        }

        // ==========================
        // Combo Box for Suppliers PO
        // ==========================
        function createCboPO(POs) {
            var POCollection = new wijmo.collections.CollectionView(POs);
            var POList = new Array();
            for (var i = 0; i < POCollection.items.length; i++) {
                POList.push(POCollection.items[i].PONumber);
            }

            var disabled;
            if (POs == 0) {
                disabled = true;
            } else {
                if (document.getElementById('RR_IsLocked').value == 'true') {
                    disabled = true;
                } else {
                    disabled = false;
                }
            }

            cboPOs.dispose();
            cboPOs = new wijmo.input.ComboBox('#RRLine_PONo', {
                disabled: disabled,
                placeholder: "Select PO",
                itemsSource: POList,
                isEditable: false,
                selectedValue: document.getElementById('RRLine_PONo_selectedValue').value.toString(),
                onSelectedIndexChanged: function () {
                    $("#RRLine_PONo_data").val(POCollection.items[this.selectedIndex].POId);

                    document.getElementById('RRLine_ItemId_data').value = '';
                    document.getElementById('RRLine_ItemCode_selectedValue').value = '';
                    document.getElementById('RRLine_ItemDescription_selectedValue').value = '';
                    document.getElementById('RRLine_Unit_data').value = '';
                    document.getElementById('RRLine_Unit_selectedValue').value = '';

                    document.getElementById('RRLine_VAT_data').value = '';
                    document.getElementById('RRLine_VATRate').value = '';
                    document.getElementById('RRLine_VAT_selectedValue').value = '';
                    document.getElementById('RRLine_WTAX_data').value = '';
                    document.getElementById('RRLine_WTAXRate').value = '';
                    document.getElementById('RRLine_WTAX_selectedValue').value = '';

                    document.getElementById('RRLine_Particulars').value = '';

                    document.getElementById('RRLine_Quantity').value = '';
                    document.getElementById('RRLine_Cost').value = '';
                    document.getElementById('RRLine_Amount').value = '';
                    document.getElementById('RRLine_VATAmount').value = '';
                    document.getElementById('RRLine_WTAXAmount').value = '';
                    document.getElementById('RRLine_BUCUnit_data').value = '';
                    document.getElementById('RRLine_BUCUnit_selectedValue').value = '';
                    document.getElementById('RRLine_BUCQuantity').value = '';
                    document.getElementById('RRLine_BUCCost').value = '';

                    getPOItemForComboBox();
                    getTaxTypeForComboBox();
                    //getBUCUnitForComboBox();
                }
            });

            document.getElementById('RRLine_PONo_data').value = POCollection.items[cboPOs.selectedIndex].POId;
            //getPOItemForComboBox();
        }


        // =================================
        // GET PO Items for PO for Combo Box
        // =================================
        function getPOItemForComboBox() {
            POItems = new wijmo.collections.ObservableArray();
            var RRLinePOId = document.getElementById('RRLine_PONo_data').value;
            if (RRLinePOId == 0) {
                POItems = new wijmo.collections.ObservableArray();
                $.ajax({
                    url: '/api/listArticleByArticleTypeId/1',
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    data: {},
                    success: function (results) {
                        if (results.length > 0) {
                            for (i = 0; i < results.length; i++) {
                                POItems.push({
                                    ItemId: results[i]["Id"],
                                    ItemCode: results[i]["ManualArticleCode"],
                                    ItemDescription: results[i]["Article"],
                                    UnitId: results[i]["UnitId"],
                                    Unit: results[i]["Unit"]
                                });
                            }
                            createCboPOItemCode(POItems);
                            createCboPOIteDescription(POItems);
                            //getUnitForComboBox();
                        } else {
                            createCboPOItemCode(POItems);
                            createCboPOIteDescription(POItems);
                            //getUnitForComboBox();
                        }
                    }
                });
            } else {
                $.ajax({
                    url: '/api/listPurchaseOrderItemByPOId/' + RRLinePOId,
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    data: {},
                    success: function (results) {
                        if (results.length > 0) {
                            for (i = 0; i < results.length; i++) {
                                POItems.push({
                                    Id: results[i]["Id"],
                                    POId: results[i]["POId"],
                                    PO: results[i]["PO"],
                                    ItemId: results[i]["ItemId"],
                                    ItemCode: results[i]["ItemCode"],
                                    ItemDescription: results[i]["Item"],
                                    UnitId: results[i]["UnitId"],
                                    Unit: results[i]["Unit"],
                                    Quantity: results[i]["Quantity"],
                                    Particulars: results[i]["Particulars"],
                                    Cost: results[i]["Cost"],
                                    Amount: results[i]["Amount"]
                                });
                            }
                            createCboPOItemCode(POItems);
                            createCboPOIteDescription(POItems);
                            //getUnitForComboBox();
                        } else {
                            createCboPOItemCode(POItems);
                            createCboPOIteDescription(POItems);
                            //getUnitForComboBox();
                        }
                    }
                });
            }
            return POItems;
        }

        // ===========================
        // Combo Box for PO Item Codes
        // ===========================
        function createCboPOItemCode(POItems) {
            var POItemCollection = new wijmo.collections.CollectionView(POItems);
            var POItemList = new Array();
            for (var i = 0; i < POItemCollection.items.length; i++) {
                POItemList.push(POItemCollection.items[i].ItemCode);
            }

            var disabled;
            if (POItems == 0) {
                disabled = true;
            } else {
                if (document.getElementById('RRLine_PONo_data').value == '') {
                    disabled = true;
                } else {
                    disabled = false;
                }
            }

            cboItemCode.dispose();
            cboItemCode = new wijmo.input.ComboBox('#RRLine_ItemCode', {
                disabled: disabled,
                placeholder: "Select Item Code",
                itemsSource: POItemList,
                isEditable: false,
                selectedValue: document.getElementById('RRLine_ItemCode_selectedValue').value.toString(),
                onSelectedIndexChanged: function () {
                    $("#RRLine_ItemId_data").val(POItemCollection.items[this.selectedIndex].ItemId);
                    $("#RRLine_ItemDescription_selectedValue").val(POItemCollection.items[this.selectedIndex].ItemDescription);
                    //$("#RRLine_Unit_data").val(POItemCollection.items[this.selectedIndex].UnitId);
                    //$("#RRLine_Unit_selectedValue").val(POItemCollection.items[this.selectedIndex].Unit);
                    $("#RRLine_Particulars").val(POItemCollection.items[this.selectedIndex].Particulars);
                    $("#RRLine_Quantity").val(POItemCollection.items[this.selectedIndex].Quantity);
                    //$("#RRLine_Cost").val(POItemCollection.items[this.selectedIndex].Cost);
                    $("#RRLine_Amount").val(POItemCollection.items[this.selectedIndex].Amount);
                    $("#RRLine_BUCQuantity").val(POItemCollection.items[this.selectedIndex].Quantity);

                    createCboPOIteDescription(POItems);
                    //getUnitForComboBox(POItemCollection.items[this.selectedIndex].ItemId);

                    //document.getElementById('RRLine_BUCUnit_data').value = POItemCollection.items[this.selectedIndex].UnitId;
                    //document.getElementById('RRLine_BUCUnit_selectedValue').value = POItemCollection.items[this.selectedIndex].Unit;
                    //getBUCUnitForComboBox();

                    var items = new wijmo.collections.ObservableArray;
                    var articleId = POItemCollection.items[this.selectedIndex].ItemId;
                    $.ajax({
                        url: '/api/article/' + articleId,
                        cache: false,
                        type: 'GET',
                        contentType: 'application/json; charset=utf-8',
                        data: {},
                        success: function (Results) {
                            NProgress.done();
                            if (Results.length > 0) {
                                items.push({
                                    Id: Results.Id,
                                    OutputTaxId: Results.OutputTaxId,
                                    OutputTax: Results.OutputTax,
                                    InputTaxId: Results.InputTaxId,
                                    InputTax: Results.InputTax,
                                    WTaxTypeId: Results.WTaxTypeId,
                                    WTaxType: Results.WTaxType
                                });
                            }

                            document.getElementById('RRLine_VAT_data').value = Results.InputTaxId;
                            document.getElementById('RRLine_VAT_selectedValue').value = Results.InputTax;
                            document.getElementById('RRLine_WTAX_data').value = Results.WTaxTypeId;
                            document.getElementById('RRLine_WTAX_selectedValue').value = Results.WTaxType;

                            var taxTypesVAT = new wijmo.collections.ObservableArray();
                            var taxTypeVATId = Results.InputTaxId;
                            $.ajax({
                                url: '/api/taxType/' + taxTypeVATId,
                                cache: false,
                                type: 'GET',
                                contentType: 'application/json; charset=utf-8',
                                data: {},
                                success: function (results) {
                                    if (results.length > 0) {
                                        taxTypesVAT.push({
                                            TaxTypeId: results.Id,
                                            TaxType: results.TaxType,
                                            TaxRate: results.TaxRate,
                                            IsInclusive: results.IsInclusive
                                        });
                                    }

                                    document.getElementById('RRLine_VATRate').value = results.TaxRate;
                                    document.getElementById('RRLine_TAXInclusive').value = results.IsInclusive;

                                    computeTAX();
                                }
                            });

                            var taxTypesWTAX = new wijmo.collections.ObservableArray();
                            var taxTypeWTAXId = Results.WTaxTypeId;
                            $.ajax({
                                url: '/api/taxType/' + taxTypeWTAXId,
                                cache: false,
                                type: 'GET',
                                contentType: 'application/json; charset=utf-8',
                                data: {},
                                success: function (results) {
                                    if (results.length > 0) {
                                        taxTypesWTAX.push({
                                            TaxTypeId: results.Id,
                                            TaxType: results.TaxType,
                                            TaxRate: results.TaxRate,
                                            IsInclusive: results.IsInclusive
                                        });
                                    }

                                    document.getElementById('RRLine_WTAXRate').value = results.TaxRate;
                                }
                            });

                            getTaxTypeForComboBox();
                        }
                    });
                }
            });

            if (POItems == 0) {
                document.getElementById('RRLine_ItemId_data').value = "";
                document.getElementById('RRLine_ItemDescription_selectedValue').value = "";
                //document.getElementById('RRLine_Unit_data').value = "";
                //document.getElementById('RRLine_Unit_selectedValue').value = "";
                document.getElementById('RRLine_Particulars').value = "";
                //document.getElementById('RRLine_Quantity').value = "";
                //document.getElementById('RRLine_Amount').value = "";
                document.getElementById('RRLine_BUCQuantity').value = "";
            } else {
                document.getElementById('RRLine_ItemId_data').value = POItemCollection.items[cboItemCode.selectedIndex].ItemId;
                document.getElementById('RRLine_ItemDescription_selectedValue').value = POItemCollection.items[cboItemCode.selectedIndex].ItemDescription;
                //document.getElementById('RRLine_Unit_data').value = POItemCollection.items[cboItemCode.selectedIndex].UnitId;
                //document.getElementById('RRLine_Unit_selectedValue').value = POItemCollection.items[cboItemCode.selectedIndex].Unit;
                document.getElementById('RRLine_Particulars').value = POItemCollection.items[cboItemCode.selectedIndex].Particulars;
                //document.getElementById('RRLine_Quantity').value = POItemCollection.items[cboItemCode.selectedIndex].Quantity;
                //document.getElementById('RRLine_Amount').value = POItemCollection.items[cboItemCode.selectedIndex].Amount;
                document.getElementById('RRLine_BUCQuantity').value = POItemCollection.items[cboItemCode.selectedIndex].Quantity;

                //getUnitForComboBox(POItemCollection.items[cboItemCode.selectedIndex].ItemId);

                var items = new wijmo.collections.ObservableArray;
                var articleId = document.getElementById('RRLine_ItemId_data').value;
                $.ajax({
                    url: '/api/article/' + articleId,
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    data: {},
                    success: function (Results) {
                        NProgress.done();
                        if (Results.length > 0) {
                            items.push({
                                Id: Results.Id,
                                OutputTaxId: Results.OutputTaxId,
                                OutputTax: Results.OutputTax,
                                InputTaxId: Results.InputTaxId,
                                InputTax: Results.InputTax,
                                WTaxTypeId: Results.WTaxTypeId,
                                WTaxType: Results.WTaxType
                            });
                        }

                        document.getElementById('RRLine_VAT_data').value = Results.InputTaxId;
                        document.getElementById('RRLine_VAT_selectedValue').value = Results.InputTax;
                        document.getElementById('RRLine_WTAX_data').value = Results.WTaxTypeId;
                        document.getElementById('RRLine_WTAX_selectedValue').value = Results.WTaxType;

                        var taxTypesVAT = new wijmo.collections.ObservableArray();
                        var taxTypeVATId = Results.InputTaxId;
                        $.ajax({
                            url: '/api/taxType/' + taxTypeVATId,
                            cache: false,
                            type: 'GET',
                            contentType: 'application/json; charset=utf-8',
                            data: {},
                            success: function (results) {
                                if (results.length > 0) {
                                    taxTypesVAT.push({
                                        TaxTypeId: results.Id,
                                        TaxType: results.TaxType,
                                        TaxRate: results.TaxRate,
                                        IsInclusive: results.IsInclusive
                                    });
                                }

                                document.getElementById('RRLine_VATRate').value = results.TaxRate;
                                document.getElementById('RRLine_TAXInclusive').value = results.IsInclusive;

                                computeTAX();
                            }
                        });

                        var taxTypesWTAX = new wijmo.collections.ObservableArray();
                        var taxTypeWTAXId = Results.WTaxTypeId;
                        $.ajax({
                            url: '/api/taxType/' + taxTypeWTAXId,
                            cache: false,
                            type: 'GET',
                            contentType: 'application/json; charset=utf-8',
                            data: {},
                            success: function (results) {
                                if (results.length > 0) {
                                    taxTypesWTAX.push({
                                        TaxTypeId: results.Id,
                                        TaxType: results.TaxType,
                                        TaxRate: results.TaxRate,
                                        IsInclusive: results.IsInclusive
                                    });
                                }

                                document.getElementById('RRLine_WTAXRate').value = results.TaxRate;
                            }
                        });

                        getTaxTypeForComboBox();
                    }
                });
            }

        }

        // =================================
        // Combo Box for PO Item Description
        // =================================
        function createCboPOIteDescription(POItems) {
            var POItemCollection = new wijmo.collections.CollectionView(POItems);
            var POItemList = new Array();
            for (var i = 0; i < POItemCollection.items.length; i++) {
                POItemList.push(POItemCollection.items[i].ItemDescription);
            }

            var disabled;
            if (POItems == 0) {
                disabled = true;
            } else {
                if (document.getElementById('RRLine_PONo_data').value == '') {
                    disabled = true;
                } else {
                    disabled = false;
                }
            }

            cboItemDescription.dispose();
            cboItemDescription = new wijmo.input.ComboBox('#RRLine_ItemDescription', {
                disabled: disabled,
                placeholder: "Select Item",
                itemsSource: POItemList,
                isEditable: false,
                selectedValue: document.getElementById('RRLine_ItemDescription_selectedValue').value.toString(),
                onSelectedIndexChanged: function () {
                    $("#RRLine_ItemId_data").val(POItemCollection.items[this.selectedIndex].ItemId);
                    $("#RRLine_ItemCode_selectedValue").val(POItemCollection.items[this.selectedIndex].ItemCode);
                    //$("#RRLine_Unit_data").val(POItemCollection.items[this.selectedIndex].UnitId);
                    //$("#RRLine_Unit_selectedValue").val(POItemCollection.items[this.selectedIndex].Unit);
                    $("#RRLine_Particulars").val(POItemCollection.items[this.selectedIndex].Particulars);
                    $("#RRLine_Quantity").val(POItemCollection.items[this.selectedIndex].Quantity);
                    //$("#RRLine_Cost").val(POItemCollection.items[this.selectedIndex].Cost);
                    $("#RRLine_Amount").val(POItemCollection.items[this.selectedIndex].Amount);
                    $("#RRLine_BUCQuantity").val(POItemCollection.items[this.selectedIndex].Quantity);

                    createCboPOItemCode(POItems);
                    getUnitForComboBox(POItemCollection.items[this.selectedIndex].ItemId);

                    //document.getElementById('RRLine_BUCUnit_data').value = POItemCollection.items[this.selectedIndex].UnitId;
                    //document.getElementById('RRLine_BUCUnit_selectedValue').value = POItemCollection.items[this.selectedIndex].Unit;
                    //getBUCUnitForComboBox();

                    
                    getBUCUnitForComboBox(POItemCollection.items[this.selectedIndex].ItemId);

                    var items = new wijmo.collections.ObservableArray;
                    var articleId = POItemCollection.items[this.selectedIndex].ItemId;
                    $.ajax({
                        url: '/api/article/' + articleId,
                        cache: false,
                        type: 'GET',
                        contentType: 'application/json; charset=utf-8',
                        data: {},
                        success: function (Results) {
                            NProgress.done();
                            if (Results.length > 0) {
                                items.push({
                                    Id: Results.Id,
                                    OutputTaxId: Results.OutputTaxId,
                                    OutputTax: Results.OutputTax,
                                    InputTaxId: Results.InputTaxId,
                                    InputTax: Results.InputTax,
                                    WTaxTypeId: Results.WTaxTypeId,
                                    WTaxType: Results.WTaxType
                                });
                            }

                            document.getElementById('RRLine_VAT_data').value = Results.InputTaxId;
                            document.getElementById('RRLine_VAT_selectedValue').value = Results.InputTax;
                            document.getElementById('RRLine_WTAX_data').value = Results.WTaxTypeId;
                            document.getElementById('RRLine_WTAX_selectedValue').value = Results.WTaxType;

                            var taxTypesVAT = new wijmo.collections.ObservableArray();
                            var taxTypeVATId = Results.InputTaxId;
                            $.ajax({
                                url: '/api/taxType/' + taxTypeVATId,
                                cache: false,
                                type: 'GET',
                                contentType: 'application/json; charset=utf-8',
                                data: {},
                                success: function (results) {
                                    if (results.length > 0) {
                                        taxTypesVAT.push({
                                            TaxTypeId: results.Id,
                                            TaxType: results.TaxType,
                                            TaxRate: results.TaxRate,
                                            IsInclusive: results.IsInclusive
                                        });
                                    }

                                    document.getElementById('RRLine_VATRate').value = results.TaxRate;
                                    document.getElementById('RRLine_TAXInclusive').value = results.IsInclusive;

                                    computeTAX();
                                    // computeBaseUnit();
                                }
                            });

                            var taxTypesWTAX = new wijmo.collections.ObservableArray();
                            var taxTypeWTAXId = Results.WTaxTypeId;
                            $.ajax({
                                url: '/api/taxType/' + taxTypeWTAXId,
                                cache: false,
                                type: 'GET',
                                contentType: 'application/json; charset=utf-8',
                                data: {},
                                success: function (results) {
                                    if (results.length > 0) {
                                        taxTypesWTAX.push({
                                            TaxTypeId: results.Id,
                                            TaxType: results.TaxType,
                                            TaxRate: results.TaxRate,
                                            IsInclusive: results.IsInclusive
                                        });
                                    }

                                    document.getElementById('RRLine_WTAXRate').value = results.TaxRate;
                                }
                            });
                            getTaxTypeForComboBox();
                        }
                    });

                    //var RRLine_cost = document.getElementById('RRLine_Cost').value;
                    //document.getElementById('RRLine_BUCCost').value = RRLine_cost;

                }
            });

            if (POItems == 0) {
                document.getElementById('RRLine_ItemId_data').value = "";
                document.getElementById('RRLine_ItemCode_selectedValue').value = "";
                //document.getElementById('RRLine_Unit_data').value = "";
                //document.getElementById('RRLine_Unit_selectedValue').value = "";
                document.getElementById('RRLine_Particulars').value = "";
                //document.getElementById('RRLine_Quantity').value = "";
                //document.getElementById('RRLine_Amount').value = "";
                document.getElementById('RRLine_BUCQuantity').value = "";

                getUnitForComboBox(0);
            } else {
                document.getElementById('RRLine_ItemId_data').value = POItemCollection.items[cboItemDescription.selectedIndex].ItemId;
                document.getElementById('RRLine_ItemCode_selectedValue').value = POItemCollection.items[cboItemDescription.selectedIndex].ItemCode;
                //document.getElementById('RRLine_Unit_data').value = POItemCollection.items[cboItemDescription.selectedIndex].UnitId;
                //document.getElementById('RRLine_Unit_selectedValue').value = POItemCollection.items[cboItemDescription.selectedIndex].Unit;
                document.getElementById('RRLine_Particulars').value = POItemCollection.items[cboItemDescription.selectedIndex].Particulars;

                if(document.getElementById('RRLine_Id').value == 0) {
                    document.getElementById('RRLine_Quantity').value = POItemCollection.items[cboItemDescription.selectedIndex].Quantity;
                    document.getElementById('RRLine_Amount').value = POItemCollection.items[cboItemDescription.selectedIndex].Amount;
                    document.getElementById('RRLine_Cost').value = POItemCollection.items[cboItemDescription.selectedIndex].Cost;
                }

                document.getElementById('RRLine_BUCQuantity').value = POItemCollection.items[cboItemDescription.selectedIndex].Quantity;

                getUnitForComboBox(POItemCollection.items[cboItemDescription.selectedIndex].ItemId);
            }
            
            getBUCUnitForComboBox(POItemCollection.items[cboItemDescription.selectedIndex].ItemId);
        }

        // =============
        // Get Item Unit
        // =============
        function getUnitForComboBox(itemId) {
            units = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listArticleUnitByArticleId/' + itemId,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            units.push({
                                UnitId: results[i]["UnitId"],
                                Unit: results[i]["Unit"]
                            });
                        }
                        createItemUnit(units);
                    } else {
                        createItemUnit(units);
                    }
                }
            });
        }

        // ============
        // CBO for Unit
        // ============
        function createItemUnit(units) {
            var itemUnitCollection = new wijmo.collections.CollectionView(units);
            var unitList = new Array();
            for (var i = 0; i < itemUnitCollection.items.length; i++) {
                unitList.push(itemUnitCollection.items[i].Unit);
            }

            var disabled;
            if (document.getElementById('RRLine_ItemId_data').value == '') {
                disabled = true;
            } else {
                if (units == 0) {
                    disabled = true;
                } else {
                    disabled = false;
                }
            }

            cboUnit.dispose();
            cboUnit = new wijmo.input.ComboBox('#RRLine_Unit', {
                disabled: disabled,
                placeholder: "Select Unit",
                itemsSource: unitList,
                isEditable: false,
                selectedValue: document.getElementById('RRLine_Unit_selectedValue').value.toString(),
                onSelectedIndexChanged: function () {
                    $("#RRLine_Unit_data").val(itemUnitCollection.items[this.selectedIndex].UnitId);
                }
            });

            if (units == 0) {
                document.getElementById('RRLine_Unit_data').value = "";
            } else {
                document.getElementById('RRLine_Unit_data').value = itemUnitCollection.items[cboUnit.selectedIndex].UnitId;
            }

        }


        // ========================
        // GET Branch for Combo Box
        // ========================
        function getBranchesPOItemForComboBox() {
            POItembranches = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listBranch',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            POItembranches.push({
                                BranchId: results[i]["Id"],
                                BranchBranch: results[i]["Branch"]
                            });
                        }

                        var branchId = @ViewData["BranchId"];
                        var RRLineId = document.getElementById('RRLine_Id').value;
                        if (RRLineId == 0) {
                            $.ajax({
                                url: '/api/listBranchById/' + branchId,
                                cache: false,
                                type: 'GET',
                                contentType: 'application/json; charset=utf-8',
                                data: {},
                                success: function (branchResults) {
                                    //if (results.length > 0) {
                                    //    branches.push({
                                    //        BranchId: results.Id,
                                    //        Branch: results.Branch
                                    //    });
                                    //}

                                    if (branchResults != null) {
                                        document.getElementById('RRLine_Branch_data').value = branchResults.Id;
                                        document.getElementById('RRLine_Branch_selectedValue').value = branchResults.Branch;

                                        createCboBranchForPOItem(POItembranches);
                                    }
                                }
                            });
                        } else {
                            createCboBranchForPOItem(POItembranches);
                        }
                    } else {
                        createCboBranchForPOItem(POItembranches);
                    }
                }
            });
            return POItembranches;
        }

        // ===================================
        // Combo Box for Branches for PO Items
        // ===================================
        function createCboBranchForPOItem(POItembranches) {
            var branchCollections = new wijmo.collections.CollectionView(POItembranches);
            var branchList = new Array();
            for (var i = 0; i < branchCollections.items.length; i++) {
                branchList.push(branchCollections.items[i].BranchBranch);
            }

            var disabled;
            if (branches == 0) {
                disabled = true;
            } else {
                if (document.getElementById('RR_IsLocked').value == 'true') {
                    disabled = true;
                } else {
                    disabled = false;
                }
            }

            cboPOItemBranch.dispose();
            cboPOItemBranch = new wijmo.input.ComboBox('#RRLine_Branch', {
                disabled: disabled,
                placeholder: "Select Branch",
                itemsSource: branchList,
                isEditable: false,
                selectedValue: document.getElementById('RRLine_Branch_selectedValue').value.toString(),
                onSelectedIndexChanged: function () {
                    $("#RRLine_Branch_data").val(branchCollections.items[this.selectedIndex].BranchId);
                }
            });

            document.getElementById('RRLine_Branch_data').value = branchCollections.items[cboPOItemBranch.selectedIndex].BranchId;
        }

        // ===================
        // Get Artile Tax Type
        // ===================
        function getTaxTypeForComboBox() {
            taxTypes = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listTaxType',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            taxTypes.push({
                                TaxTypeId: results[i]["Id"],
                                TaxType: results[i]["TaxType"],
                                TaxRate: results[i]["TaxRate"],
                                IsInclusive: results[i]["IsInclusive"],
                            });
                        }
                        createCboForVATTaxType(taxTypes);
                        createCboForWTAXTaxType(taxTypes);
                    } else {
                        createCboForVATTaxType(taxTypes);
                        createCboForWTAXTaxType(taxTypes);
                    }
                }
            });
        }

        // ===========
        // CBO for VAT
        // ===========
        function createCboForVATTaxType(taxTypes) {
            var taxTypeCollection = new wijmo.collections.CollectionView(taxTypes);
            var taxList = new Array();
            for (var i = 0; i < taxTypeCollection.items.length; i++) {
                taxList.push(taxTypeCollection.items[i].TaxType);
            }

            var disabled;
            if (taxTypes == 0) {
                disabled = true;
            } else {
                if (document.getElementById('RR_IsLocked').value == 'true') {
                    disabled = true;
                } else {
                    disabled = false;
                }
            }

            cboForVATTaxType.dispose();
            cboForVATTaxType = new wijmo.input.ComboBox('#RRLine_VAT', {
                disabled: disabled,
                placeholder: "Select VAT",
                itemsSource: taxList,
                isEditable: false,
                selectedValue: document.getElementById('RRLine_VAT_selectedValue').value.toString(),
                onSelectedIndexChanged: function () {
                    $("#RRLine_VAT_data").val(taxTypeCollection.items[this.selectedIndex].TaxTypeId);
                    $("#RRLine_VATRate").val(taxTypeCollection.items[this.selectedIndex].TaxRate);
                    $("#RRLine_TAXInclusive").val(taxTypeCollection.items[this.selectedIndex].IsInclusive);

                    computeTAX();
                    //computeBaseUnit();
                }
            });

            document.getElementById('RRLine_VAT_data').value = taxTypeCollection.items[cboForVATTaxType.selectedIndex].TaxTypeId;
            document.getElementById('RRLine_VATRate').value = taxTypeCollection.items[cboForVATTaxType.selectedIndex].TaxRate;
            document.getElementById('RRLine_TAXInclusive').value = taxTypeCollection.items[cboForVATTaxType.selectedIndex].IsInclusive;
        }

        // ============
        // CBO for WTAX
        // ============
        function createCboForWTAXTaxType(taxTypes) {
            var taxTypeCollection = new wijmo.collections.CollectionView(taxTypes);
            var taxList = new Array();
            for (var i = 0; i < taxTypeCollection.items.length; i++) {
                taxList.push(taxTypeCollection.items[i].TaxType);
            }

            var disabled;
            if (taxTypes == 0) {
                disabled = true;
            } else {
                if (document.getElementById('RR_IsLocked').value == 'true') {
                    disabled = true;
                } else {
                    disabled = false;
                }
            }

            cboForWTAXTaxType.dispose();
            cboForWTAXTaxType = new wijmo.input.ComboBox('#RRLine_WTAX', {
                disabled: disabled,
                placeholder: "Select WTAX",
                itemsSource: taxList,
                isEditable: false,
                selectedValue: document.getElementById('RRLine_WTAX_selectedValue').value.toString(),
                onSelectedIndexChanged: function () {
                    $("#RRLine_WTAX_data").val(taxTypeCollection.items[this.selectedIndex].TaxTypeId);
                    $("#RRLine_WTAXRate").val(taxTypeCollection.items[this.selectedIndex].TaxRate);

                    computeTAX();
                }
            });

            document.getElementById('RRLine_WTAX_data').value = taxTypeCollection.items[cboForWTAXTaxType.selectedIndex].TaxTypeId;
            document.getElementById('RRLine_WTAXRate').value = taxTypeCollection.items[cboForWTAXTaxType.selectedIndex].TaxRate;
        }

        // ===========
        // Compute Tax
        // ===========
        function computeTAX() {
            var inputedQuantity = document.getElementById('RRLine_Quantity').value;
            var inputedCost = document.getElementById('RRLine_Cost').value;
            var inputedAmount = document.getElementById('RRLine_Amount').value;
            var inputedVATRate = document.getElementById('RRLine_VATRate').value;
            var inputedWTAXRate = document.getElementById('RRLine_WTAXRate').value;

            var replacedQuantity = inputedQuantity.replace(/\,/g, '');
            var replacedCost = inputedCost.replace(/\,/g, '');
            var replacedAmount = inputedAmount.replace(/\,/g, '');
            var replacedVATRate = inputedVATRate.replace(/\,/g, '');
            var replacedWTAXRate = inputedWTAXRate.replace(/\,/g, '');

            if (document.getElementById('RRLine_TAXInclusive').value == 'true') {
                document.getElementById('RRLine_VATAmount').value = Math.round(((replacedAmount / (1 + replacedVATRate / 100)) * (replacedVATRate / 100)) * 100) / 100;
                document.getElementById('RRLine_WTAXAmount').value = Math.round(((replacedAmount / (1 + replacedVATRate / 100)) * (replacedWTAXRate / 100)) * 100) / 100;

            } else {
                document.getElementById('RRLine_VATAmount').value = Math.round((replacedAmount * (replacedVATRate / 100)) * 100) / 100;
                document.getElementById('RRLine_WTAXAmount').value = Math.round((replacedAmount * (replacedWTAXRate / 100)) * 100) / 100;
                document.getElementById('RRLine_Amount').value = Math.round(((replacedCost * replacedQuantity) + (replacedAmount * (replacedVATRate / 100))) * 100) / 100;
            }
        }

        //// =================
        //// Compute Base Unit
        //// =================
        //function computeBaseUnit() {
        //    var articleUnits = new wijmo.collections.ObservableArray();
        //    var articleId = document.getElementById('RRLine_ItemId_data').value;
        //    var unitId = document.getElementById('RRLine_BUCUnit_data').value;

        //    var inputedQuantity = document.getElementById('RRLine_Quantity').value;
        //    var inputedAmount = document.getElementById('RRLine_Amount').value;
        //    var inputedVATAmount = document.getElementById('RRLine_VATAmount').value;

        //    var replacedQuantity = inputedQuantity.replace(/\,/g,'');
        //    var replacedAmount = inputedAmount.replace(/\,/g,'');
        //    var replacedVATAmount = inputedVATAmount.replace(/\,/g,'');

        //    $.ajax({
        //        url: '/api/articleUnit/' + articleId + '/' + unitId,
        //        cache: false,
        //        type: 'GET',
        //        contentType: 'application/json; charset=utf-8',
        //        data: {},
        //        success: function (results) {
        //            if (results.length > 0) {
        //                articleUnits.push({
        //                    Id: results.Id,
        //                    ArticleId: results.ArticleId,
        //                    Article: results.Article,
        //                    UnitId: results.UnitId,
        //                    Unit: results.Unit,
        //                    Multiplier: results.Multiplier,
        //                    IsCountUnit: results.IsCountUnit,
        //                });
        //            }

        //            var multiplier = results.Multiplier;
        //            var AmountAndVATAmount = replacedAmount - replacedVATAmount;

        //            if(document.getElementById('RRLine_TAXInclusive').value == 'true') {
        //                document.getElementById('RRLine_BUCCost').value =  Math.round(((replacedAmount - replacedVATAmount) / (replacedQuantity / multiplier)) * 100 ) / 100;
        //            } else {
        //                document.getElementById('RRLine_BUCCost').value =  Math.round((replacedAmount / (replacedQuantity / multiplier)) * 100 ) / 100;
        //            }
        //        }
        //    });
        //}

        // =======================================
        // Get Item Unit for Basic Unit Conversion
        // =======================================
        function getBUCUnitForComboBox(itemId) {
            BUCUnits = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listUnit',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            BUCUnits.push({
                                UnitId: results[i]["Id"],
                                Unit: results[i]["Unit"]
                            });
                        }
                        createCboBasicUnitConversionUnit(BUCUnits, itemId);
                    } else {
                        createCboBasicUnitConversionUnit(BUCUnits, itemId);
                    }
                }
            });
        }

        // =====================
        // CBO for Customer Unit
        // =====================
        function createCboBasicUnitConversionUnit(BUCUnits, itemId) {
            var BUCUnitCollection = new wijmo.collections.CollectionView(BUCUnits);
            var BUCUnitList = new Array();
            for (var i = 0; i < BUCUnitCollection.items.length; i++) {
                BUCUnitList.push(BUCUnitCollection.items[i].Unit);
            }

            var disabled;
            if (BUCUnits == 0) {
                disabled = true;
            } else {
                if (document.getElementById('RR_IsLocked').value == 'true') {
                    disabled = true;
                } else {
                    disabled = false;
                }
            }

            var Unit = "";
            var UnitId;
            $.ajax({
                url: '/api/article/' + itemId,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    UnitId = results.UnitId;
                    Unit = results.Unit;
                    
                    document.getElementById('RRLine_BUCUnit_data').value = results.UnitId;

                    cboBUCUnit.dispose();
                    cboBUCUnit = new wijmo.input.ComboBox('#RRLine_BUCUnit', {
                        disabled: true,
                        placeholder: "Select Base Unit",
                        itemsSource: BUCUnitList,
                        isEditable: false,
                        selectedValue: Unit.toString(),
                        onSelectedIndexChanged: function () {
                            $("#RRLine_BUCUnit_data").val(BUCUnitCollection.items[this.selectedIndex].UnitId);
                        }
                    });

                    if (BUCUnits == 0) {
                        document.getElementById('RRLine_BUCUnit_data').value =  "";
                    } else {
                        document.getElementById('RRLine_BUCUnit_data').value = BUCUnitCollection.items[cboBUCUnit.selectedIndex].UnitId;
                    }

                }
            });
            
        }

        // =================
        // ADD Item RR Lines
        // =================
        function btnAddItemRRLine_OnClick() {
            $('#RRLinesEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $("#cmdSaveRRLinesButton").prop("disabled", false);
            $("#cmdRRLinesDetailCloseButton").prop("disabled", false);

            document.getElementById('RRLine_Id').value = 0;
            document.getElementById('RRLine_PONo_data').value = '';
            document.getElementById('RRLine_PONo_selectedValue').value = '';
            document.getElementById('RRLine_ItemId_data').value = '';
            document.getElementById('RRLine_ItemCode_selectedValue').value = '';
            document.getElementById('RRLine_ItemDescription_selectedValue').value = '';
            document.getElementById('RRLine_Particulars').value = '';
            document.getElementById('RRLine_Quantity').value = 0;
            document.getElementById('RRLine_Unit_data').value = '';
            document.getElementById('RRLine_Unit_selectedValue').value = '';
            document.getElementById('RRLine_Cost').value = 0;
            document.getElementById('RRLine_Amount').value = 0;
            document.getElementById('RRLine_Branch_data').value = '';
            document.getElementById('RRLine_Branch_selectedValue').value = '';
            document.getElementById('RRLine_VAT_data').value = '';
            document.getElementById('RRLine_VAT_selectedValue').value = '';
            document.getElementById('RRLine_VATRate').value = 0;
            document.getElementById('RRLine_VATAmount').value = 0;
            document.getElementById('RRLine_WTAX_data').value = '';
            document.getElementById('RRLine_WTAX_selectedValue').value = '';
            document.getElementById('RRLine_WTAXRate').value = 0;
            document.getElementById('RRLine_WTAXAmount').value = 0;
            document.getElementById('RRLine_TAXInclusive').value = '';
            document.getElementById('RRLine_BUCUnit_data').value = '';
            document.getElementById('RRLine_BUCUnit_selectedValue').value = '';
            document.getElementById('RRLine_BUCQuantity').value = 0;
            document.getElementById('RRLine_BUCCost').value = 0;

            document.getElementById("RRLine_PONo").style.border = "1px solid #C8C8C8";
            document.getElementById("RRLine_ItemCode").style.border = "1px solid #C8C8C8";
            document.getElementById("RRLine_ItemDescription").style.border = "1px solid #C8C8C8";
            document.getElementById("RRLine_Unit").style.border = "1px solid #C8C8C8";
            document.getElementById("RRLine_Branch").style.border = "1px solid #C8C8C8";
            document.getElementById("RRLine_VAT").style.border = "1px solid #C8C8C8";
            document.getElementById("RRLine_WTAX").style.border = "1px solid #C8C8C8";
            document.getElementById("RRLine_BUCUnit").style.border = "1px solid #C8C8C8";

            getPOForComboBox();
            //getPOItemForComboBox();
            getUnitForComboBox(0);
            getBranchesPOItemForComboBox();
            //getTaxTypeForComboBox();
            //getBUCUnitForComboBox();

            setTimeout(function () {
                computeTAX();
            }, 200);


            $('.requiredRRLine').each(function () {
                $(this).css({
                    "border": "",
                });
            });

        }

        // ==================
        // EDIT Item RR Lines
        // ==================
        function btnItemRRLinesEdit_OnClick() {
            items.editItem(items.currentItem);
            $('#RRLinesEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $("#cmdSaveRRLinesButton").prop("disabled", false);
            $("#cmdRRLinesDetailCloseButton").prop("disabled", false);
            
            var POSupplierId = document.getElementById('POStatus_Supplier_data').value;
            POs = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listPurchaseOrderBySupplierId/' + POSupplierId,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            POs.push({
                                POId: results[i]["Id"],
                                PONumber: results[i]["PONumber"],
                                PODate: results[i]["PODate"]
                            });
                        }
                        createCboPO(POs);
                        getPOItemForComboBox();
                        getTaxTypeForComboBox();
                    } else {
                        createCboPO(POs);
                        getPOItemForComboBox();
                        getTaxTypeForComboBox();
                    }
                }
            });

            var item = items.currentEditItem;
            document.getElementById('RRLine_Id').value = item.Id;
            document.getElementById('RRLine_PONo_data').value = item.POId;
            document.getElementById('RRLine_PONo_selectedValue').value = item.PO;
            document.getElementById('RRLine_ItemId_data').value = item.ItemId;
            document.getElementById('RRLine_ItemCode_selectedValue').value = item.ItemCode;
            document.getElementById('RRLine_ItemDescription_selectedValue').value = item.Item;
            document.getElementById('RRLine_Particulars').value = item.Particulars;
            document.getElementById('RRLine_Quantity').value = item.Quantity;
            document.getElementById('RRLine_Unit_data').value = item.UnitId;
            document.getElementById('RRLine_Unit_selectedValue').value = item.Unit;
            document.getElementById('RRLine_Cost').value = item.Cost;
            document.getElementById('RRLine_Amount').value = item.Amount;
            document.getElementById('RRLine_Branch_data').value = item.BranchId;
            document.getElementById('RRLine_Branch_selectedValue').value = item.Branch;
            document.getElementById('RRLine_VAT_data').value = item.VATId;
            document.getElementById('RRLine_VAT_selectedValue').value = item.VAT;
            document.getElementById('RRLine_VATRate').value = item.VATRate;
            document.getElementById('RRLine_VATAmount').value = item.VATAmount;
            document.getElementById('RRLine_WTAX_data').value = item.WTAXId;
            document.getElementById('RRLine_WTAX_selectedValue').value = item.WTAX;
            document.getElementById('RRLine_WTAXRate').value = item.WTAXRate;
            document.getElementById('RRLine_WTAXAmount').value = item.WTAXAmount;
            document.getElementById('RRLine_BUCUnit_data').value = item.BaseUnitId;
            document.getElementById('RRLine_BUCUnit_selectedValue').value = item.BaseUnit;
            document.getElementById('RRLine_BUCQuantity').value = item.BaseQuantity;
            document.getElementById('RRLine_BUCCost').value = item.BaseCost;

            document.getElementById("RRLine_PONo").style.border = "1px solid #C8C8C8";
            document.getElementById("RRLine_ItemCode").style.border = "1px solid #C8C8C8";
            document.getElementById("RRLine_ItemDescription").style.border = "1px solid #C8C8C8";
            document.getElementById("RRLine_Unit").style.border = "1px solid #C8C8C8";
            document.getElementById("RRLine_Branch").style.border = "1px solid #C8C8C8";
            document.getElementById("RRLine_VAT").style.border = "1px solid #C8C8C8";
            document.getElementById("RRLine_WTAX").style.border = "1px solid #C8C8C8";
            document.getElementById("RRLine_BUCUnit").style.border = "1px solid #C8C8C8";

            $('.requiredRRLine').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            //getPOItemForComboBox();
            getUnitForComboBox(item.ItemId);
            getBranchesPOItemForComboBox();
            //getTaxTypeForComboBox();
            //getBUCUnitForComboBox();

            setTimeout(function () {
                computeTAX();
            }, 200);
        }

        // =============
        // SAVE RR Lines
        // =============
        function cmdRRLinesSaveButton_OnClick() {
            var RRLineObject = new Object();
            var RRLineId = document.getElementById('RRLine_Id').value;
            var ReceivingReceiptId = getParam('ReceivingReceiptId');
            RRLineObject.RRId = ReceivingReceiptId;
            RRLineObject.POId = document.getElementById('RRLine_PONo_data').value;
            RRLineObject.ItemId = document.getElementById('RRLine_ItemId_data').value;
            RRLineObject.Particulars = document.getElementById('RRLine_Particulars').value;
            RRLineObject.UnitId = document.getElementById('RRLine_Unit_data').value;
            RRLineObject.Quantity = document.getElementById('RRLine_Quantity').value;
            RRLineObject.Cost = document.getElementById('RRLine_Cost').value;
            RRLineObject.Amount = document.getElementById('RRLine_Amount').value;
            RRLineObject.VATId = document.getElementById('RRLine_VAT_data').value;
            RRLineObject.VATPercentage = document.getElementById('RRLine_VATRate').value;
            RRLineObject.VATAmount = document.getElementById('RRLine_VATAmount').value;
            RRLineObject.WTAXId = document.getElementById('RRLine_WTAX_data').value;
            RRLineObject.WTAXPercentage = document.getElementById('RRLine_WTAXRate').value;
            RRLineObject.WTAXAmount = document.getElementById('RRLine_WTAXAmount').value;
            RRLineObject.BranchId = document.getElementById('RRLine_Branch_data').value;
            //RRLineObject.BaseUnitId = document.getElementById('RRLine_BUCUnit_data').value;
            //RRLineObject.BaseQuantity = document.getElementById('RRLine_BUCQuantity').value;
            //RRLineObject.BaseCost = document.getElementById('RRLine_BUCCost').value;
            var RRLineData = JSON.stringify(RRLineObject);

            if (document.getElementById('RRLine_PONo_data').value == '') {
                document.getElementById("RRLine_PONo").style.border = "1px solid red";
            } else {
                document.getElementById("RRLine_PONo").style.border = "1px solid #C8C8C8";
            }

            if (document.getElementById('RRLine_ItemId_data').value == '') {
                document.getElementById("RRLine_ItemCode").style.border = "1px solid red";
                document.getElementById("RRLine_ItemDescription").style.border = "1px solid red";
            } else {
                document.getElementById("RRLine_ItemCode").style.border = "1px solid #C8C8C8";
                document.getElementById("RRLine_ItemDescription").style.border = "1px solid #C8C8C8";
            }

            if (document.getElementById('RRLine_Unit_data').value == '') {
                document.getElementById("RRLine_Unit").style.border = "1px solid red";
            } else {
                document.getElementById("RRLine_Unit").style.border = "1px solid #C8C8C8";
            }

            if (document.getElementById('RRLine_Branch_data').value == '') {
                document.getElementById("RRLine_Branch").style.border = "1px solid red";
            } else {
                document.getElementById("RRLine_Branch").style.border = "1px solid #C8C8C8";
            }

            if (document.getElementById('RRLine_VAT_data').value == '') {
                document.getElementById("RRLine_VAT").style.border = "1px solid red";
            } else {
                document.getElementById("RRLine_VAT").style.border = "1px solid #C8C8C8";
            }

            if (document.getElementById('RRLine_WTAX_data').value == '') {
                document.getElementById("RRLine_WTAX").style.border = "1px solid red";
            } else {
                document.getElementById("RRLine_WTAX").style.border = "1px solid #C8C8C8";
            }

            if (document.getElementById('RRLine_BUCUnit_data').value == '') {
                document.getElementById("RRLine_BUCUnit").style.border = "1px solid red";
            } else {
                document.getElementById("RRLine_BUCUnit").style.border = "1px solid #C8C8C8";
            }

            var isValid = true;
            $('.requiredRRLine').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                }
                else {
                    $(this).css({
                        "border": "",
                    });
                }
            });
            if (isValid == false) {
                toastr.error("Invalid Entry");
            }
            else {
                $("#cmdSaveRRLinesButton").prop("disabled", true);
                $("#cmdRRLinesDetailCloseButton").prop("disabled", true);
                if (RRLineId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/addReceivingReceiptItem',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: RRLineData,
                        success: function(id){
                            if(id > 0) {
                                $("#cmdSaveRRLinesButton").prop("disabled", true);
                                $("#cmdRRLinesDetailCloseButton").prop("disabled", true);
                                toastr.success("Successfully Saved");
                                $('#RRLinesEdit').modal('hide');

                                items = new wijmo.collections.CollectionView(getRRItem());

                                // Flex Grid for Item
                                itemGrid.itemsSource = items;
                                itemGrid.trackChanges = true;
                            } else {
                                $("#cmdSaveRRLinesButton").prop("disabled", false);
                                $("#cmdRRLinesDetailCloseButton").prop("disabled", false);
                                toastr.error("Save unsuccessful");
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/updateReceivingReceiptItem/' + RRLineId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: RRLineData,
                        statusCode: {
                            200: function () {
                                $("#cmdSaveRRLinesButton").prop("disabled", true);
                                $("#cmdRRLinesDetailCloseButton").prop("disabled", true);
                                toastr.success("Successfully Updated");

                                $('#RRLinesEdit').modal('hide');

                                items = new wijmo.collections.CollectionView(getRRItem());

                                // Flex Grid for Item
                                itemGrid.itemsSource = items;
                                itemGrid.trackChanges = true;
                            },
                            404: function () {
                                toastr.error("Can't Update");
                                $('#RRLinesEdit').modal('hide');
                                $("#cmdSaveRRLinesButton").prop("disabled", false);
                                $("#cmdRRLinesDetailCloseButton").prop("disabled", false);
                            },
                            400: function () {
                                toastr.error("Bad Request");
                                $('#RRLinesEdit').modal('hide');
                                $("#cmdSaveRRLinesButton").prop("disabled", false);
                                $("#cmdRRLinesDetailCloseButton").prop("disabled", false);
                            }
                        }
                    });
                }
            }
        }

        // ========================
        //  RR Lines Confirm Delete
        // ========================
        function btnItemRRLinesDelete_OnClick() {
            $('#deleteRRLinesConfirm').modal({
                show: true,
                backdrop: 'static'
            });

            $("#cmdConfirmDeleteRRLines").prop("disabled", false);
            $("#cmdConfirmDeleteCloseButtonRRLines").prop("disabled", false);
        }
        // RR lines Confirm Delete Button
        function cmdRRLinesConfirmDeleteButton_OnClick() {
            $("#cmdConfirmDeleteRRLines").prop("disabled", true);
            $("#cmdConfirmDeleteCloseButtonRRLines").prop("disabled", true);

            items.editItem(items.currentItem);
            var itemId = items.currentEditItem.Id;
            var RRId = items.currentEditItem.RRId;
            $.ajax({
                url: '/api/deleteReceivingReceiptItem/' + itemId + '/' + RRId,
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        $("#cmdConfirmDeleteRRLines").prop("disabled", true);
                        $("#cmdConfirmDeleteCloseButtonRRLines").prop("disabled", true);
                        toastr.success("Successfully Deleted");

                        $('#deleteRRLinesConfirm').modal('hide');

                        items = new wijmo.collections.CollectionView(getRRItem());

                        // Flex Grid for Item
                        itemGrid.itemsSource = items;
                        itemGrid.trackChanges = true;
                    },
                    404: function () {
                        toastr.error("Request Not Found");
                        $('#deleteRRLinesConfirm').modal('hide');
                        $("#cmdConfirmDeleteRRLines").prop("disabled", false);
                        $("#cmdConfirmDeleteCloseButtonRRLines").prop("disabled", false);
                    },
                    400: function () {
                        toastr.error("Bad Request");
                        $('#deleteRRLinesConfirm').modal('hide');
                        $("#cmdConfirmDeleteRRLines").prop("disabled", false);
                        $("#cmdConfirmDeleteCloseButtonRRLines").prop("disabled", false);
                    }
                }
            });
        }

        // =====
        //  Item
        // =====
        function itemTab() {
            $('#RRLine_Quantity').keyup(function () {
                var inputQuantity = this.value;
                var inputCost = document.getElementById('RRLine_Cost').value;

                var replacedCost = inputCost.replace(/\,/g, '');
                var replacedQuantity = inputQuantity.replace(/\,/g, '');
                var amount = replacedCost * replacedQuantity;
                var VATRate = document.getElementById('RRLine_VATRate').value;
                var WTAXRate = document.getElementById('RRLine_WTAXRate').value;

                document.getElementById('RRLine_Amount').value = amount.toLocaleString();
                document.getElementById('RRLine_VATAmount').value = Math.round(((amount / (1 + VATRate / 100)) * (VATRate / 100)) * 100) / 100;
                document.getElementById('RRLine_WTAXAmount').value = Math.round(((amount / (1 + VATRate / 100)) * (WTAXRate / 100)) * 100) / 100;
                document.getElementById('RRLine_BUCQuantity').value = this.value;

                //document.getElementById('RRLine_BUCCost').value = (document.getElementById('RRLine_Amount').value - document.getElementById('RRLine_VATAmount').value) / document.getElementById('RRLine_BUCQuantity').value;

                var articleUnits = new wijmo.collections.ObservableArray();
                var articleId = document.getElementById('RRLine_ItemId_data').value;
                var unitId = document.getElementById('RRLine_BUCUnit_data').value;

                var inputedAmount = document.getElementById('RRLine_Amount').value.replace(/\,/g, '');
                var inputedVATAmount = document.getElementById('RRLine_VATAmount').value.replace(/\,/g, '');
                var BUCQuantity = document.getElementById('RRLine_BUCQuantity').value.replace(/\,/g, '');

                document.getElementById('RRLine_BUCCost').value = (inputedAmount - inputedVATAmount) / BUCQuantity;

                var replacedAmount = inputedAmount.replace(/\,/g, '');
                var replacedVATAmount = inputedVATAmount.replace(/\,/g, '');

                //$.ajax({
                //    url: '/api/articleUnit/' + articleId + '/' + unitId,
                //    cache: false,
                //    type: 'GET',
                //    contentType: 'application/json; charset=utf-8',
                //    data: {},
                //    statusCode: {
                //        200: function(results) {
                //            if (results.length > 0) {
                //                articleUnits.push({
                //                    Id: results.Id,
                //                    ArticleId: results.ArticleId,
                //                    Article: results.Article,
                //                    UnitId: results.UnitId,
                //                    Unit: results.Unit,
                //                    Multiplier: results.Multiplier,
                //                    IsCountUnit: results.IsCountUnit,
                //                });
                //            }

                //            var multiplier = results.Multiplier;
                //            if(document.getElementById('RRLine_TAXInclusive').value == 'true') {
                //                document.getElementById('RRLine_BUCCost').value =  Math.round(((replacedAmount - replacedVATAmount) / (replacedQuantity / multiplier)) * 100 ) / 100;
                //            } else {
                //                document.getElementById('RRLine_BUCCost').value =  Math.round((replacedAmount / (replacedQuantity / multiplier)) * 100 ) / 100;
                //            }
                //        },
                //        404: function() {
                //            toastr.error("No Item/Unit");
                //        },
                //        400: function() {
                //            toastr.error("Bad Request");
                //        }
                //    }
                //});

                //var RRLine_cost = document.getElementById('RRLine_Cost').value;
                //document.getElementById('RRLine_BUCCost').value = RRLine_cost;

            });

            $('#RRLine_Cost').keyup(function () {
                var inputQuantity = document.getElementById('RRLine_Quantity').value;
                var inputCost = this.value;

                var replacedCost = inputCost.replace(/\,/g, '');
                var replacedQuantity = inputQuantity.replace(/\,/g, '');
                var amount = replacedCost * replacedQuantity;
                var VATRate = document.getElementById('RRLine_VATRate').value;
                var WTAXRate = document.getElementById('RRLine_WTAXRate').value;

                document.getElementById('RRLine_Amount').value = amount.toLocaleString();
                document.getElementById('RRLine_VATAmount').value = Math.round(((amount / (1 + VATRate / 100)) * (VATRate / 100)) * 100) / 100;
                document.getElementById('RRLine_WTAXAmount').value = Math.round(((amount / (1 + VATRate / 100)) * (WTAXRate / 100)) * 100) / 100;
                
                var articleUnits = new wijmo.collections.ObservableArray();
                var articleId = document.getElementById('RRLine_ItemId_data').value;
                var unitId = document.getElementById('RRLine_BUCUnit_data').value;

                var inputedAmount = document.getElementById('RRLine_Amount').value.replace(/\,/g, '');
                var inputedVATAmount = document.getElementById('RRLine_VATAmount').value.replace(/\,/g, '');
                var BUCQuantity = document.getElementById('RRLine_BUCQuantity').value.replace(/\,/g, '');

                document.getElementById('RRLine_BUCCost').value = (inputedAmount - inputedVATAmount) / BUCQuantity;

                var replacedAmount = inputedAmount.replace(/\,/g, '');
                var replacedVATAmount = inputedVATAmount.replace(/\,/g, '');

                //$.ajax({
                //    url: '/api/articleUnit/' + articleId + '/' + unitId,
                //    cache: false,
                //    type: 'GET',
                //    contentType: 'application/json; charset=utf-8',
                //    data: {},
                //    statusCode: {
                //        200: function(results) {
                //            if (results.length > 0) {
                //                articleUnits.push({
                //                    Id: results.Id,
                //                    ArticleId: results.ArticleId,
                //                    Article: results.Article,
                //                    UnitId: results.UnitId,
                //                    Unit: results.Unit,
                //                    Multiplier: results.Multiplier,
                //                    IsCountUnit: results.IsCountUnit,
                //                });
                //            }

                //            var multiplier = results.Multiplier;
                //            if(document.getElementById('RRLine_TAXInclusive').value == 'true') {
                //                document.getElementById('RRLine_BUCCost').value =  Math.round(((replacedAmount - replacedVATAmount) / (replacedQuantity / multiplier)) * 100 ) / 100;
                //            } else {
                //                document.getElementById('RRLine_BUCCost').value =  Math.round((replacedAmount / (replacedQuantity / multiplier)) * 100 ) / 100;
                //            }
                //        },
                //        404: function() {
                //            toastr.error("No Item/Unit");
                //        },
                //        400: function() {
                //            toastr.error("Bad Request");
                //        }
                //    }
                //});
                //var RRLine_cost = document.getElementById('RRLine_Cost').value;
                //document.getElementById('RRLine_BUCCost').value = RRLine_cost;
            });

            cboPOs = new wijmo.input.ComboBox('#RRLine_PONo');
            cboItemCode = new wijmo.input.ComboBox('#RRLine_ItemCode');
            cboItemDescription = new wijmo.input.ComboBox('#RRLine_ItemDescription');
            cboUnit = new wijmo.input.ComboBox('#RRLine_Unit');
            cboPOItemBranch = new wijmo.input.ComboBox('#RRLine_Branch');
            cboForVATTaxType = new wijmo.input.ComboBox('#RRLine_VAT');
            cboForWTAXTaxType = new wijmo.input.ComboBox('#RRLine_WTAX');
            cboBUCUnit = new wijmo.input.ComboBox('#RRLine_BUCUnit');

            document.getElementById('RRLine_Amount').disabled = true;
            document.getElementById('RRLine_VATRate').disabled = true;
            document.getElementById('RRLine_VATAmount').disabled = true;
            document.getElementById('RRLine_WTAXRate').disabled = true;
            document.getElementById('RRLine_WTAXAmount').disabled = true;
            document.getElementById('RRLine_BUCQuantity').disabled = true;
            document.getElementById('RRLine_BUCCost').disabled = true;

            items = new wijmo.collections.CollectionView(getRRItem());

            // Flex Grid for Item
            itemGrid = new wijmo.grid.FlexGrid('#ItemGrid');
            itemGrid.initialize({
                columns: [
                            {
                                "header": "Edit",
                                "binding": "EditId",
                                "width": 60,
                                "align": "center",
                                "allowResizing": false,
                                "allowSorting": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Delete",
                                "binding": "DeleteId",
                                "width": 70,
                                "align": "center",
                                "allowResizing": false,
                                "allowSorting": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "PO Number",
                                "binding": "PO",
                                "allowSorting": true,
                                "width": 110
                            },
                            {
                                "header": "Code",
                                "binding": "ItemCode",
                                "allowSorting": true,
                                "width": 60
                            },
                            {
                                "header": "Item",
                                "binding": "Item",
                                "allowSorting": true,
                                "width": 140
                            },
                            {
                                "header": "Particulars",
                                "binding": "Particulars",
                                "allowSorting": true,
                                "width": 150
                            },
                            {
                                "header": "Quantity",
                                "binding": "Quantity",
                                "allowSorting": true,
                                "width": 90
                            },
                            {
                                "header": "Unit",
                                "binding": "Unit",
                                "allowSorting": true,
                                "width": 100
                            },
                             {
                                 "header": "Cost",
                                 "binding": "Cost",
                                 "allowSorting": true,
                                 "width": 100
                             },
                             {
                                 "header": "Amount",
                                 "binding": "Amount",
                                 "allowSorting": true,
                                 "width": 100
                             },
                             {
                                 "header": "Branch",
                                 "binding": "Branch",
                                 "allowSorting": true,
                                 "width": 130
                             },
                             {
                                 "header": "VAT Rate",
                                 "binding": "VATPercentage",
                                 "allowSorting": true,
                                 "width": 110,
                                 "align": "right",
                                 "isContentHtml": true
                             },
                             {
                                 "header": "VAT Amount",
                                 "binding": "VATAmount",
                                 "allowSorting": true,
                                 "width": 120
                             },
                             {
                                 "header": "WTAX Rate",
                                 "binding": "WTAXPercentage",
                                 "allowSorting": true,
                                 "width": 110,
                                 "align": "right",
                                 "isContentHtml": true
                             },
                             {
                                 "header": "WTAX Amount",
                                 "binding": "WTAXAmount",
                                 "allowSorting": true,
                                 "width": 120
                             },
                             {
                                 "header": "Unit",
                                 "binding": "BaseUnit",
                                 "allowSorting": true,
                                 "width": 100
                             },
                             {
                                 "header": "Quantity",
                                 "binding": "BaseQuantity",
                                 "allowSorting": true,
                                 "width": 90
                             },
                             {
                                 "header": "Cost",
                                 "binding": "BaseCost",
                                 "allowSorting": true,
                                 "width": 100
                             },
                ],
                autoGenerateColumns: false,
                itemsSource: items,
                isReadOnly: true,
                frozenColumns: 2,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            itemGrid.trackChanges = true;

            var hr = new wijmo.grid.Row();
            itemGrid.allowMerging = wijmo.grid.AllowMerging.AllHeaders;
            itemGrid.columnHeaders.rows.push(hr);
            itemGrid.columnHeaders.rows[0].allowMerging = true;

            itemGrid.columnHeaders.columns[0].allowMerging = true;
            itemGrid.columnHeaders.setCellData(0, 0, 'Edit');

            itemGrid.columnHeaders.columns[1].allowMerging = true;
            itemGrid.columnHeaders.setCellData(0, 1, 'Delete');

            itemGrid.columnHeaders.columns[2].allowMerging = true;
            itemGrid.columnHeaders.setCellData(0, 2, 'PO Number');

            itemGrid.columnHeaders.columns[3].allowMerging = true;
            itemGrid.columnHeaders.setCellData(0, 3, 'Code');

            itemGrid.columnHeaders.columns[4].allowMerging = true;
            itemGrid.columnHeaders.setCellData(0, 4, 'Item');

            itemGrid.columnHeaders.columns[5].allowMerging = true;
            itemGrid.columnHeaders.setCellData(0, 5, 'Particulars');

            itemGrid.columnHeaders.columns[6].allowMerging = true;
            itemGrid.columnHeaders.setCellData(0, 6, 'Quantity');

            itemGrid.columnHeaders.columns[7].allowMerging = true;
            itemGrid.columnHeaders.setCellData(0, 7, 'Unit');

            itemGrid.columnHeaders.columns[8].allowMerging = true;
            itemGrid.columnHeaders.setCellData(0, 8, 'Cost');

            itemGrid.columnHeaders.columns[9].allowMerging = true;
            itemGrid.columnHeaders.setCellData(0, 9, 'Amount');

            itemGrid.columnHeaders.columns[10].allowMerging = true;
            itemGrid.columnHeaders.setCellData(0, 10, 'Branch');

            itemGrid.columnHeaders.setCellData(0, 11, 'VAT');

            itemGrid.columnHeaders.columns[12].allowMerging = true;
            itemGrid.columnHeaders.setCellData(0, 12, 'VAT Amount');

            itemGrid.columnHeaders.setCellData(0, 13, 'WTAX');

            itemGrid.columnHeaders.columns[14].allowMerging = true;
            itemGrid.columnHeaders.setCellData(0, 14, 'WTAX Amount');

            for (var columnBasicUnitConversion = 15; columnBasicUnitConversion <= 17; columnBasicUnitConversion++) {
                itemGrid.columnHeaders.setCellData(0, columnBasicUnitConversion, 'Basic Unit Conversion');
            }

            itemGrid.rows.defaultSize = 55;
        }
    </script>

    <!-- =========================== -->
    <!-- Inventory Entry Scripts -->
    <!-- =========================== -->
    <script type="text/javascript">
        // ====================================
        // Global Variables for Inventory Entry
        // ====================================
        var inventoryEntries;
        var inventoryEntryGrid;

        var btnFirstPageGridInventoryEntry;
        var btnPreviousPageGridInventoryEntry;
        var btnNextPageGridInventoryEntry;
        var btnLastPageGridInventoryEntry;
        var btnCurrentPageGridInventoryEntry;

        // =====================
        // GET Inventory Entries
        // =====================
        function getInventoryEntries() {
            var inventoryEntries = new wijmo.collections.ObservableArray;
            NProgress.start();
            var ReceivingReceiptId = getParam('ReceivingReceiptId');
            if (document.location.search.length > 0) {
                $.ajax({
                    url: '/api/listInventoryByRRId/' + ReceivingReceiptId,
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    data: {},
                    success: function (Results) {
                        NProgress.done();
                        if (Results.length > 0) {
                            for (i = 0; i < Results.length; i++) {
                                inventoryEntries.push({
                                    EditId: "<button class='btn btn-primary btn-xs btn-block' onclick='cmdAccountEditButton_OnClick()'><i class='fa fa-edit'></i> Edit</button>",
                                    DeleteId: "<button class='btn btn-danger btn-xs btn-block' onclick='cmdAccountDeleteButton_OnClick()'><i class='fa fa-trash'></i> Delete</button>",
                                    Id: Results[i]["Id"],
                                    BranchId: Results[i]["BranchId"],
                                    Branch: Results[i]["Branch"],
                                    InventoryDate: Results[i]["InventoryDate"],
                                    ArticleId: Results[i]["ArticleId"],
                                    Article: Results[i]["Article"],
                                    ArticleInventoryId: Results[i]["ArticleInventoryId"],
                                    RRId: Results[i]["RRId"],
                                    SIId: Results[i]["SIId"],
                                    INId: Results[i]["INId"],
                                    OTId: Results[i]["OTId"],
                                    STId: Results[i]["STId"],
                                    QuantityIn: Results[i]["QuantityIn"],
                                    Quantity: Results[i]["Quantity"],
                                    QuantityOut: Results[i]["QuantityOut"],
                                    Amount: Results[i]["Amount"],
                                    Particulars: Results[i]["Particulars"],
                                    Code: Results[i]["Code"],
                                    Unit: Results[i]["Unit"]
                                });
                            }
                        }
                    }
                }).fail(function (xhr, textStatus, err) {
                    alert(err);
                });
            } else {
                NProgress.done();
            }
            return inventoryEntries;
        }

        // ======================================
        // FlexGrid Selection for Inventory Entry
        // ======================================
        function updateDetailsInventoryEntry() {
            var item = inventoryEntries.currentItem;
            document.getElementById('createdBy').innerHTML = item.CreatedBy;
            document.getElementById('createdDate').innerHTML = item.CreatedDateTime;
            document.getElementById('updatedBy').innerHTML = item.UpdatedBy;
            document.getElementById('updatedDate').innerHTML = item.UpdatedDateTime;
        }

        // ================================
        // On Page Load for Inventory Entry
        // ================================
        function inventoryEntryTab() {
            inventoryEntries = new wijmo.collections.CollectionView(getInventoryEntries());

            // Flex Grid for Inventory Entry
            inventoryEntryGrid = new wijmo.grid.FlexGrid('#InventoryEntryGrid');
            inventoryEntryGrid.initialize({
                columns: [
                            {
                                "header": "Date",
                                "binding": "InventoryDate",
                                "allowSorting": true,
                                "width": 80,
                            },
                            {
                                "header": "Branch",
                                "binding": "Branch",
                                "allowSorting": true,
                                "width": 150,
                            },
                            {
                                "header": "Item",
                                "binding": "Article",
                                "align": "left",
                                "allowSorting": true,
                                "width": 165,
                            },
                            {
                                "header": "Particulars",
                                "binding": "Particulars",
                                "align": "left",
                                "allowSorting": true,
                                "width": 170,
                            },
                            {
                                "header": "Inventory Code",
                                "binding": "Code",
                                "allowSorting": true,
                                "width": 160,
                            },
                            {
                                "header": "Quantity",
                                "binding": "Quantity",
                                "allowSorting": true,
                                "width": 110,
                            },
                            {
                                "header": "Unit",
                                "binding": "Unit",
                                "allowSorting": true,
                                "width": 118,
                            },
                            {
                                "header": "Amount",
                                "binding": "Amount",
                                "allowSorting": true,
                                "width": 150,
                            },
                ],
                autoGenerateColumns: false,
                itemsSource: inventoryEntries,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            inventoryEntryGrid.trackChanges = true;
        }
    </script>

    <!-- ================================ -->
    <!-- Tab Current Page on Load Scripts -->
    <!-- ================================ -->
    <script type="text/javascript">
        var journals;
        var journalListGrid;

        var btnFirstPageGridJournal;
        var btnPreviousPageGridJournal;
        var btnNextPageGridJournal;
        var btnLastPageGridJournal;
        var btnCurrentPageGridJournal;

        // ===========
        // Get Journal
        // ===========
        function getJournalListForRR() {
            var journals = new wijmo.collections.ObservableArray;
            var ReceivingReceiptId = getParam('ReceivingReceiptId');
            //$('#loadingModal').modal('show');
            $.ajax({
                url: '/api/listJournalByRRId/' + ReceivingReceiptId,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (Results) {
                    //$('#loadingModal').modal('hide');
                    if (Results.length > 0) {
                        for (i = 0; i < Results.length; i++) {
                            journals.push({
                                //EditId: "<button class='btn btn-primary btn-xs btn-block' onclick='cmdJournalVoucherLineEditButton_OnClick()'><i class='fa fa-edit'></i> Edit</button>",
                                //DeleteId: "<button class='btn btn-danger btn-xs btn-block' onclick='cmdJournalVoucherLineDeleteButton_OnClick()'><i class='fa fa-trash'></i> Delete</button>",
                                Id: Results[i]["Id"],
                                JournalDate: Results[i]["JournalDate"],
                                BranchId: Results[i]["BranchId"],
                                Branch: Results[i]["Branch"],
                                AccountId: Results[i]["AccountId"],
                                AccountCode: Results[i]["AccountCode"],
                                Account: Results[i]["Account"],
                                ArticleId: Results[i]["ArticleId"],
                                Article: Results[i]["Article"],
                                Particulars: Results[i]["Particulars"],
                                DebitAmount: Results[i]["DebitAmount"],
                                CreditAmount: Results[i]["CreditAmount"],
                                ORId: Results[i]["ORId"],
                                CVId: Results[i]["CVId"],
                                JVId: Results[i]["JVId"],
                                RRId: Results[i]["RRId"],
                                SIId: Results[i]["SIId"],
                                INId: Results[i]["INId"],
                                OTId: Results[i]["OTId"],
                                STId: Results[i]["STId"],
                                DocumentReference: Results[i]["DocumentReference"],
                                APRRId: Results[i]["APRRId"],
                                ARSIId: Results[i]["ARSIId"]
                            });

                            var debitAmountTotal = 0;
                            var creditAmountTotal = 0;

                            var a = 0;
                            while (a < Results.length) {
                                debitAmountTotal += Results[a]["DebitAmount"];
                                creditAmountTotal += Results[a]["CreditAmount"];
                                a++;
                            }
                        }

                        document.getElementById('totalDebitInJournal').innerHTML = debitAmountTotal.toLocaleString();
                        document.getElementById('totalCreditInJournal').innerHTML = creditAmountTotal.toLocaleString();
                        var variance = debitAmountTotal - creditAmountTotal;
                        document.getElementById('variance').innerHTML = variance.toLocaleString();

                    }
                }
            }).fail(function (xhr, textStatus, err) {
                alert(err);
            });
            return journals;
        }

        // ============
        // Journal List
        // ============
        function RRJournal_OnClick() {
            journals = new wijmo.collections.CollectionView(getJournalListForRR());
            document.getElementById("loadingJournalGridList").innerHTML = '<i class="fa fa-spinner fa-spin"></i> Loading Journal...';

            $("#loadingJournalGridList").show();
            $("#journal_Content").hide();
            setTimeout(function () {
                $("#loadingJournalGridList").hide();
                $("#journal_Content").show();
                // Flex Grid
                journalListGrid = new wijmo.grid.FlexGrid('#journalGrid');
                journalListGrid.initialize({
                    columns: [
                                {
                                    "header": "Branch",
                                    "binding": "Branch",
                                    "allowSorting": true,
                                    "width": 150
                                },
                                {
                                    "header": "Code",
                                    "binding": "AccountCode",
                                    "allowSorting": true,
                                    "width": 60
                                },
                                {
                                    "header": "Account",
                                    "binding": "Account",
                                    "allowSorting": true,
                                    "width": 200
                                },
                                {
                                    "header": "Article",
                                    "binding": "Article",
                                    "allowSorting": true,
                                    "width": 162
                                },
                                {
                                    "header": "Debit",
                                    "binding": "DebitAmount",
                                    "allowSorting": true,
                                    "width": 130
                                }
                                ,
                                {
                                    "header": "Credit",
                                    "binding": "CreditAmount",
                                    "allowSorting": true,
                                    "width": 130
                                },
                                {
                                    "header": "Date",
                                    "binding": "JournalDate",
                                    "allowSorting": true,
                                    "width": 80,
                                }
                    ],
                    autoGenerateColumns: false,
                    itemsSource: journals,
                    isReadOnly: true,
                    autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                    allowDragging: wijmo.grid.AllowDragging.None,
                    selectionMode: wijmo.grid.SelectionMode.Row
                });

                journalListGrid.trackChanges = true;
            }, 1000);
        }

        $('#cmdRRJournal').click(function () {
            $('#journalDetail').modal({
                show: true,
                backdrop: 'static'
            });

            window.RRJournal_OnClick = function () {
                return true;
            };
        });

        // ====
        // TABS
        // ====
        $('#itemTabId').click(function () {
            $('#Item').show();
            $('#InventoryEntry').hide();
            window.itemTab = function () {
                return true;
            };
        });
        $('#inventoryEntryTabId').click(function () {
            $('#Item').hide();
            $('#InventoryEntry').show();
            inventoryEntryTab();
            window.inventoryEntryTab = function () {
                return true;
            };
        });
        $(document).ready(function () {
            $('#Item').show();
            $('#InventoryEntry').hide();
            itemTab();

            $(document).on('show.bs.modal', '.modal', function (event) {
                var zIndex = 1040 + (10 * $('.modal:visible').length);
                $(this).css('z-index', zIndex);
                setTimeout(function () {
                    $('.modal-backdrop').not('.modal-stack').css('z-index', zIndex - 1).addClass('modal-stack');
                }, 0);
            });

            $(document).on('hidden.bs.modal', '.modal', function () {
                $('.modal:visible').length && $(document.body).addClass('modal-open');
            });
        });

    </script>
</body>
</html>