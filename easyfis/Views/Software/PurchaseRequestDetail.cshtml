@model easyfis.Entities.MstUserForm
@{
    // =====================
    // User Rights Variables
    // =====================
    var canAdd = Model.CanAdd;
    var canEdit = Model.CanEdit;
    var canDelete = Model.CanDelete;
    var canLock = Model.CanLock;
    var canUnlock = Model.CanUnlock;
    var canPrint = Model.CanPrint;
}
<!DOCTYPE html>
<html>
<head>
    <!-- Meta -->
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">

    <!-- Title of the Page -->
    <link rel="shortcut icon" href="~/Images/icon/easyfislogomini.ico">
    <title>Purchase Request Detail</title>

    <!-- CSS StyleSheets-->
    @Styles.Render("~/Content/Software-css")
</head>
<body class="">
    <div id="o-wrapper" class="o-wrapper">
        <main class="o-content">
            @Html.Partial("_SoftwareHeader")
            <section class="content-header">
                <div class="container">
                    <h3>
                        Purchase Request Detail
                    </h3>
                    <p>
                        <i class="fa fa-building-o fa-fw"></i> &nbsp; @ViewData["Company"] <br />
                        <i class="fa fa-home fa-fw"></i> &nbsp; <a href="#" onclick="getUserBranches()" style="color: white;">@ViewData["Branch"]</a>
                    </p>
                </div>
            </section>
            <section class="container">
                <div class="panel panel-default">
                    <div class="panel-heading">
                        <div class="row">
                            <div class="col-md-12" align="right">
                                <!-- <button class="btn btn-primary" id="btnEmailPR" onclick="btnEmailPROnclick()"><i class="fa fa-envelope"></i> Email</button> -->
                                @{
                                    if (canLock)
                                    {
                                        <button class="btn btn-primary" id="btnLockPR" onclick="btnLockPROnclick()"><i class="fa fa-lock"></i> Lock</button>
                                    }
                                    if (canUnlock)
                                    {
                                        <button class="btn btn-primary" id="btnUnlockPR" onclick="btnUnlockPROnclick()"><i class="fa fa-unlock"></i> Unlock</button>
                                    }
                                    if (canPrint)
                                    {
                                        <button class="btn btn-primary" id="btnPrintPR" onclick="btnPrintPROnclick()"><i class="fa fa-print"></i> Print</button>
                                    }
                                }
                                <button class="btn btn-danger" id="btnClosePR" onclick="window.location.href = '/Software/PurchaseRequest'"><i class="fa fa-times"></i> Close</button>
                            </div>
                        </div>
                    </div>
                    <div class="panel-body">
                        <div class="form-horizontal">
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Branch</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboPRBranch"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">PR Number</label>
                                        <div class="col-sm-8">
                                            <input type="text" class="form-control requiredPR" id="PRNumber" disabled />
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">PR Date</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboPRDate"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Manual PR Number</label>
                                        <div class="col-sm-8">
                                            <input type="text" class="form-control requiredPR" id="PRManualPRNumber" placeholder="Manual PR Number" />
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Supplier</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboPRSupplier"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Term</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboPRTerm"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Remarks</label>
                                        <div class="col-sm-8">
                                            <textarea rows="5" class="form-control textarea-custom requiredPR" id="PRRemarks" placeholder="Remarks"></textarea>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Date Needed</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboPRDateNeeded"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Requested by</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboPRRequestedBy"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Prepared by</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboPRPreparedBy"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Checked by</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboPRCheckedBy"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Approved by</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboPRApprovedBy"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Is Close</label>
                                        <div class="col-sm-8">
                                            <input type="checkbox" id="PRClosePR">
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <ul class="nav nav-tabs" role="tablist" id="myTab">
                    <li role="presentation" class="active"><a data-toggle="tab" href="#Item" id="itemTabId">Items</a></li>
                </ul>
                <br />
                <div class="tab-content">
                    <div id="Item" class="tab-pane fade in active">
                        <div class="panel panel-default">
                            <div class="panel-heading">
                                <table style="width: 100%" border="0">
                                    <tr>
                                        <td style="width: 49.5%">
                                            <div class="input-group">
                                                <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                                <input type="text" class="form-control " id="InputFilter" placeholder="Search...">
                                            </div>
                                        </td>
                                        <td style="width: 1%"></td>
                                        <td style="width: 24%">
                                            <div class="input-group">
                                                <span class="input-group-addon"><b><i class="fa fa-table"></i></b></span>
                                                <div class="comboBox-wide" id="cboPurchaseRequestItemsShowNumberOfRows"></div>
                                            </div>
                                        </td>
                                        <td style="width: 1%"></td>
                                        <td style="width: 24.5%" align="right">
                                            @{
                                                if (canAdd)
                                                {
                                                    <button class="btn btn-primary" id="btnAddPRItem" onclick="btnAddPRItemOnclick()"><i class="fa fa-plus"></i> Add</button>
                                                    <button class="btn btn-primary" id="btnItemQuery" onclick="btnItemQueryOnclick()"><i class="fa fa-search-plus"></i> Item Query</button>
                                                }
                                            }
                                        </td>
                                    </tr>
                                </table>
                            </div>
                            <div class="panel-body">
                                <div id="PRItemGrid"></div>
                            </div>
                            <div class="panel-footer">
                                <div class="row">
                                    <div class="btn-group col-md-7" id="naviagtionPageGrid">
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToFirstPageGrid">
                                            <span class="glyphicon glyphicon-fast-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToPreviousPageGrid">
                                            <span class="glyphicon glyphicon-step-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnCurrentPageGrid"></button>
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToNextPageGrid">
                                            <span class="glyphicon glyphicon-step-forward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToLastPageGrid">
                                            <span class="glyphicon glyphicon-fast-forward"></span>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="panel panel-default">
                            <div class="panel-body" style="padding-bottom: 0px;">
                                <div class="row">
                                    <div class="col-md-6">

                                    </div>
                                    <div class="col-md-6">
                                        <dl class="dl-horizontal">
                                            <dt>
                                                <b>Total Amount</b>
                                            </dt>
                                            <dd>
                                                <input type="text" class="form-control numberField" id="totalPRAmount" placeholder="0.00" disabled />
                                            </dd>
                                        </dl>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="panel panel-default">
                    <div class="panel-heading">
                        User stamp
                    </div>
                    <div class="panel-body">
                        <div class="row">
                            <div class="col-md-6">
                                <p>Created by:</p>
                                <div style="padding-left: 10px;">
                                    <i class="fa fa-key fa-fw"></i> <label id="createdBy">NA</label>
                                    <br />
                                    <small><i class="fa fa-calendar fa-fw"></i> &nbsp;<span id="createdDate">mm/dd/yyyy</span></small>
                                </div>
                                <br />
                            </div>
                            <div class="col-md-6">
                                <p>Updated by:</p>
                                <div style="padding-left: 10px;">
                                    <i class="fa fa-key fa-fw"></i> <label id="updatedBy">NA</label>
                                    <br />
                                    <small><i class="fa fa-calendar fa-fw"></i> &nbsp;<span id="updatedDate">mm/dd/yyyy</span></small>
                                </div>
                                <br />
                            </div>
                        </div>
                    </div>
                </div>
            </section>
            @Html.Partial("_SoftwareFooter")
        </main>
    </div>
    <div id="c-mask" class="c-mask"></div>

    <!-- Modal for PRLines -->
    <div class="modal fade" id="PRLinesEdit" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="PRLinesNameModalLabel">Purchase Request Item</h4>
                </div>
                <div class="modal-body">
                    <center>
                        <span id="loadingModalItem"></span>
                    </center>
                    <div id="PRItemContent">
                        <dl class="dl-horizontal">
                            <dt>Item</dt>
                            <dd>
                                <table style="width: 100%" border="0">
                                    <tr>
                                        <td style="width: 30%">
                                            <div class="comboBox-wide" id="cboPRLineItemCode"></div>
                                        </td>
                                        <td style="width: 1%"></td>
                                        <td style="width: 69%">
                                            <div class="comboBox-wide" id="cboPRLineItemDescription"></div>
                                        </td>
                                    </tr>
                                </table>
                            </dd>
                            <dt>Particulars</dt>
                            <dd><textarea rows="5" class="form-control textarea-custom requiredPRLine" id="PRLine_Particulars" placeholder="Particulars"></textarea></dd>
                            <dt>Quantity</dt>
                            <dd><input type="text" class="form-control numberField requiredPRLine" id="PRLine_Quantity" placeholder="0.00" /></dd>
                            <dt>Unit</dt>
                            <dd>
                                <div class="comboBox-wide" id="cboPRLineUnit"></div>
                            </dd>
                            <dt>Cost</dt>
                            <dd><input type="text" class="form-control numberField requiredPRLine" id="PRLine_Cost" placeholder="0.00" /></dd>
                            <dt>Amount</dt>
                            <dd><input type="text" class="form-control numberField requiredPRLine" id="PRLine_Amount" placeholder="0.00" disabled /></dd>
                        </dl>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary " id="cmdSavePRLinesButton" onclick="cmdPRLinesSaveButton_OnClick()"><i class="fa fa-save"></i> Save</button>
                    <button id="cmdPRLinesDetailCloseButton" class="btn btn-danger " data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal for Item Query -->
    <div class="modal fade" id="PRLinesItemQuery" role="dialog">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Item Query</h4>
                </div>
                <div class="modal-body">
                    <center>
                        <span id="loadingItemQuery"></span>
                    </center>
                    <div id="itemQueryPanel">
                        <div class="panel panel-default">
                            <div class="panel-heading">
                                <div class="input-group">
                                    <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                    <input type="text" class="form-control " id="itemQueryFilter" placeholder="Search">
                                </div>
                            </div>
                            <div class="panel-body">
                                <div id="itemQueryGrid"></div>
                            </div>
                            <div class="panel-footer">
                                <div class="row">
                                    <div class="btn-group col-md-7" id="naviagtionPageGridItemQuery">
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToFirstPageGridItemQuery">
                                            <span class="glyphicon glyphicon-fast-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToPreviousPageGridItemQuery">
                                            <span class="glyphicon glyphicon-step-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnCurrentPageGridItemQuery"></button>
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToNextPageGridItemQuery">
                                            <span class="glyphicon glyphicon-step-forward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToLastPageGridItemQuery">
                                            <span class="glyphicon glyphicon-fast-forward"></span>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger " data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- PRLines Delete Modal Confirmation -->
    <div class="modal fade" id="deletePRLinesConfirm" role="dialog">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Delete</h4>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete this purchased item?
                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger " id="cmdConfirmDeletePRLines" onclick="cmdPRLinesConfirmDeleteButton_OnClick()"><i class="fa fa-trash"></i> Delete</button>
                    <button id="cmdConfirmDeleteCloseButton" class="btn btn-primary " data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>

    @Scripts.Render("~/Scripts/Software-js")
    <script type="text/javascript">
        // ================
        // Global Variables
        // ================
        var cboPRBranch = new wijmo.input.ComboBox('#cboPRBranch');
        var cboPRDate = new wijmo.input.InputDate('#cboPRDate');
        var cboPRSupplier = new wijmo.input.ComboBox('#cboPRSupplier');
        var cboPRTerm = new wijmo.input.ComboBox('#cboPRTerm');
        var cboPRDateNeeded = new wijmo.input.InputDate('#cboPRDateNeeded');
        var cboPRRequestedBy = new wijmo.input.InputDate('#cboPRRequestedBy');
        var cboPRPreparedBy = new wijmo.input.InputDate('#cboPRPreparedBy');
        var cboPRCheckedBy = new wijmo.input.InputDate('#cboPRCheckedBy');
        var cboPRApprovedBy = new wijmo.input.InputDate('#cboPRApprovedBy');
        var isLocked = false;
        var purchaseRequestItemCollectionView;
        var purchaseRequestItemFlexGrid;
        var cboPRLineItemCode = new wijmo.input.ComboBox('#cboPRLineItemCode');
        var cboPRLineItemDescription = new wijmo.input.ComboBox('#cboPRLineItemDescription');
        var cboPRLineUnit = new wijmo.input.ComboBox('#cboPRLineUnit');
        var purchaseRequestItemId = 0;
        var itemQueryItemsCollection;
        var itemQueryGrid = new wijmo.grid.FlexGrid('#itemQueryGrid');
        var cboPurchaseRequestItemsShowNumberOfRows = new wijmo.input.ComboBox('#cboPurchaseRequestItemsShowNumberOfRows');
        var btnFirstPageGrid = document.getElementById('btnMoveToFirstPageGrid');
        var btnPreviousPageGrid = document.getElementById('btnMoveToPreviousPageGrid');
        var btnNextPageGrid = document.getElementById('btnMoveToNextPageGrid');
        var btnLastPageGrid = document.getElementById('btnMoveToLastPageGrid');
        var btnCurrentPageGrid = document.getElementById('btnCurrentPageGrid');
        var btnMoveToFirstPageGridItemQuery = document.getElementById('btnMoveToFirstPageGridItemQuery');
        var btnMoveToPreviousPageGridItemQuery = document.getElementById('btnMoveToPreviousPageGridItemQuery');
        var btnMoveToNextPageGridItemQuery = document.getElementById('btnMoveToNextPageGridItemQuery');
        var btnMoveToLastPageGridItemQuery = document.getElementById('btnMoveToLastPageGridItemQuery');
        var btnCurrentPageGridItemQuery = document.getElementById('btnCurrentPageGridItemQuery');
        var isItemQueryClicked = false;

        // =======================
        // Get URL Parameter Value
        // =======================
        function getParam(name) {
            name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");

            var regexS = "[\\?&]" + name + "=([^&#]*)";
            var regex = new RegExp(regexS);
            var results = regex.exec(window.location.href);

            if (results == null)
                return "";
            else {
                return results[1];
            }
        }

        // ========================
        // GET Branch for Combo Box
        // ========================
        function getBranchesForComboBox() {
            NProgress.start();
            var branchesObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/purchaseRequest/dropdown/list/branch',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            branchesObservableArray.push({
                                Id: results[i]["Id"],
                                Branch: results[i]["Branch"]
                            });
                        }
                    }

                    cboPRBranch.dispose();
                    cboPRBranch = new wijmo.input.ComboBox('#cboPRBranch', {
                        disabled: true,
                        isEditable: false,
                        placeholder: "Select Branch",
                        itemsSource: branchesObservableArray,
                        displayMemberPath: "Branch",
                        selectedValuePath: "Id"
                    });

                    getSupplierForComboBox();
                }
            });
        }

        // ==========================
        // GET Supplier for Combo Box
        // ==========================
        function getSupplierForComboBox() {
            var suppliersObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/purchaseRequest/dropdown/list/supplier',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            suppliersObservableArray.push({
                                Id: results[i]["Id"],
                                Supplier: results[i]["Article"],
                                TermId: results[i]["TermId"],
                            });
                        }
                    }

                    cboPRSupplier.dispose();
                    cboPRSupplier = new wijmo.input.ComboBox('#cboPRSupplier', {
                        isEditable: false,
                        placeholder: "Select Supplier",
                        itemsSource: suppliersObservableArray,
                        displayMemberPath: "Supplier",
                        selectedValuePath: "Id",
                        onSelectedIndexChanged: function () {
                            if (cboPRTerm.selectedValue != null) {
                                cboPRTerm.selectedValue = cboPRSupplier.selectedItem["TermId"];
                            }
                        }
                    });

                    getTermForComboBox();
                }
            });
        }

        // =======================
        // GET Terms for Combo Box
        // =======================
        function getTermForComboBox() {
            var termsObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/purchaseRequest/dropdown/list/term',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            termsObservableArray.push({
                                Id: results[i]["Id"],
                                Term: results[i]["Term"]
                            });
                        }
                    }

                    cboPRTerm.dispose();
                    cboPRTerm = new wijmo.input.ComboBox('#cboPRTerm', {
                        isEditable: false,
                        placeholder: "Select Term",
                        itemsSource: termsObservableArray,
                        displayMemberPath: "Term",
                        selectedValuePath: "Id"
                    });

                    getUsersForComboBox();
                }
            });
        }

        // =======================
        // GET Users for Combo Box
        // =======================
        function getUsersForComboBox() {
            var usersObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/purchaseRequest/dropdown/list/users',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            usersObservableArray.push({
                                Id: results[i]["Id"],
                                FullName: results[i]["FullName"]
                            });
                        }
                    }

                    cboPRRequestedBy.dispose();
                    cboPRRequestedBy = new wijmo.input.ComboBox('#cboPRRequestedBy', {
                        isEditable: false,
                        placeholder: "Select User",
                        itemsSource: usersObservableArray,
                        displayMemberPath: "FullName",
                        selectedValuePath: "Id"
                    });

                    cboPRPreparedBy.dispose();
                    cboPRPreparedBy = new wijmo.input.ComboBox('#cboPRPreparedBy', {
                        disabled: true,
                        isEditable: false,
                        placeholder: "Select User",
                        itemsSource: usersObservableArray,
                        displayMemberPath: "FullName",
                        selectedValuePath: "Id"
                    });

                    cboPRCheckedBy.dispose();
                    cboPRCheckedBy = new wijmo.input.ComboBox('#cboPRCheckedBy', {
                        isEditable: false,
                        placeholder: "Select User",
                        itemsSource: usersObservableArray,
                        displayMemberPath: "FullName",
                        selectedValuePath: "Id"
                    });

                    cboPRApprovedBy.dispose();
                    cboPRApprovedBy = new wijmo.input.ComboBox('#cboPRApprovedBy', {
                        isEditable: false,
                        placeholder: "Select User",
                        itemsSource: usersObservableArray,
                        displayMemberPath: "FullName",
                        selectedValuePath: "Id"
                    });

                    getPurchaseRequestDetail();
                }
            });
        }

        // =========================
        // GET Purchase Request Detail
        // =========================
        function getPurchaseRequestDetail() {
            if (document.location.search.length > 0) {
                var id = getParam('id');
                $.ajax({
                    url: '/api/purchaseRequest/detail/' + id,
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    success: function (results) {
                        if (results != null) {
                            cboPRBranch.selectedValue = results.BranchId;
                            document.getElementById('PRNumber').value = results.PRNumber;
                            cboPRDate.dispose();
                            cboPRDate = new wijmo.input.InputDate('#cboPRDate', {
                                format: 'MM-dd-yyyy',
                                value: new Date(results.PRDate)
                            });
                            document.getElementById('PRManualPRNumber').value = results.ManualPRNumber;
                            cboPRSupplier.selectedValue = results.SupplierId;
                            cboPRTerm.selectedValue = results.TermId;
                            document.getElementById('PRRemarks').value = results.Remarks;
                            cboPRDateNeeded.dispose();
                            cboPRDateNeeded = new wijmo.input.InputDate('#cboPRDateNeeded', {
                                format: 'MM-dd-yyyy',
                                value: new Date(results.DateNeeded)
                            });
                            cboPRRequestedBy.selectedValue = results.RequestedById;
                            cboPRPreparedBy.selectedValue = results.PreparedById;
                            cboPRCheckedBy.selectedValue = results.CheckedById;
                            cboPRApprovedBy.selectedValue = results.ApprovedById;
                            document.getElementById('PRClosePR').checked = results.IsClose;

                            // user stamp
                            document.getElementById('createdBy').innerHTML = results.CreatedBy;
                            document.getElementById('createdDate').innerHTML = results.CreatedDateTime;
                            document.getElementById('updatedBy').innerHTML = results.UpdatedBy;
                            document.getElementById('updatedDate').innerHTML = results.UpdatedDateTime;

                            if (results.IsLocked) {
                                // fields
                                document.getElementById('PRNumber').disabled = true;
                                cboPRDate.disabled = true;
                                document.getElementById('PRManualPRNumber').disabled = true;
                                cboPRSupplier.disabled = true;
                                cboPRTerm.disabled = true;
                                document.getElementById('PRRemarks').disabled = true;
                                cboPRDateNeeded.disabled = true;
                                cboPRRequestedBy.disabled = true;
                                cboPRPreparedBy.disabled = true;
                                cboPRCheckedBy.disabled = true;
                                cboPRApprovedBy.disabled = true;
                                document.getElementById('PRClosePR').disabled = true;

                                // buttons
                                $("#btnLockPR").prop("disabled", true);
                                $("#btnAddPRItem").prop("disabled", true);
                                $("#btnItemQuery").prop("disabled", true);

                                isLocked = true;
                            } else {
                                $("#btnEmailPR").prop("disabled", true);
                                $("#btnUnlockPR").prop("disabled", true);
                                $("#btnPrintPR").prop("disabled", true);
                            }

                            createCboShowRows();
                            createPurchaseRequestItemFlexGrid();
                        } else {
                            alert("No Data");
                            window.location = "/Software/PurchaseRequest";
                        }
                    }
                });
            } else {
                alert("No Id Parameter Value");
                window.location = "/Software/PurchaseRequest";
            }
        }

        // ===================
        // Lock Purchase Request
        // ===================
        function btnLockPROnclick() {
            var purchaseRequestObject = new Object();
            purchaseRequestObject.PRDate = cboPRDate.value.toLocaleDateString();
            purchaseRequestObject.SupplierId = cboPRSupplier.selectedValue;
            purchaseRequestObject.TermId = cboPRTerm.selectedValue;
            purchaseRequestObject.ManualPRNumber = document.getElementById('PRManualPRNumber').value;
            purchaseRequestObject.DateNeeded = cboPRDateNeeded.value.toLocaleDateString();
            purchaseRequestObject.Remarks = document.getElementById('PRRemarks').value;
            purchaseRequestObject.IsClose = document.getElementById('PRClosePR').checked;
            purchaseRequestObject.RequestedById = cboPRRequestedBy.selectedValue;
            purchaseRequestObject.CheckedById = cboPRCheckedBy.selectedValue;
            purchaseRequestObject.ApprovedById = cboPRApprovedBy.selectedValue;
            var purchaseRequestData = JSON.stringify(purchaseRequestObject);

            var isValid = true;
            $('.requiredPR').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                }
                else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            if (isValid) {
                document.getElementById('btnLockPR').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Locking";
                $("#btnLockPR").prop("disabled", true);
                $("#btnUnlockPR").prop("disabled", true);
                $("#btnPrintPR").prop("disabled", true);
                $("#btnClosePR").prop("disabled", true);

                var id = getParam('id');

                $.ajax({
                    type: "PUT",
                    url: '/api/purchaseRequest/lock/' + id,
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    data: purchaseRequestData,
                    statusCode: {
                        200: function () {
                            toastr.success("Lock Successful");
                            window.setTimeout(function () {
                                location.reload()
                            }, 1000);
                        },
                        404: function (message) {
                            toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                            document.getElementById('btnLockPR').innerHTML = "<i class='fa fa-lock'></i> Lock";
                            $("#btnLockPR").prop("disabled", false);
                            $("#btnClosePR").prop("disabled", false);
                        },
                        400: function (message) {
                            toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                            document.getElementById('btnLockPR').innerHTML = "<i class='fa fa-lock'></i> Lock";
                            $("#btnLockPR").prop("disabled", false);
                            $("#btnClosePR").prop("disabled", false);
                        },
                        500: function (message) {
                            toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                            document.getElementById('btnLockPR').innerHTML = "<i class='fa fa-lock'></i> Lock";
                            $("#btnLockPR").prop("disabled", false);
                            $("#btnClosePR").prop("disabled", false);
                        }
                    },
                });
            } else {
                toastr.error("Invalid Entry");
            }
        }

        // =====================
        // Unlock Purchase Request
        // =====================
        function btnUnlockPROnclick() {
            document.getElementById("btnUnlockPR").innerHTML = "<i class='fa fa-spinner fa-spin'></i> Unlocking";
            $("#btnLockPR").prop("disabled", true);
            $("#btnUnlockPR").prop("disabled", true);
            $("#btnPrintPR").prop("disabled", true);
            $("#btnClosePR").prop("disabled", true);

            var id = getParam('id');

            $.ajax({
                type: "PUT",
                url: '/api/purchaseRequest/unlock/' + id,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Unlock Successful");
                        window.setTimeout(function () {
                            location.reload()
                        }, 1000);
                    },
                    404: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                        document.getElementById('btnUnlockPR').innerHTML = "<i class='fa fa-unlock'></i> Unlock";
                        $("#btnUnlockPR").prop("disabled", false);
                        $("#btnPrintPR").prop("disabled", false);
                        $("#btnClosePR").prop("disabled", false);
                    },
                    400: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                        document.getElementById('btnUnlockPR').innerHTML = "<i class='fa fa-unlock'></i> Unlock";
                        $("#btnUnlockPR").prop("disabled", false);
                        $("#btnPrintPR").prop("disabled", false);
                        $("#btnClosePR").prop("disabled", false);
                    },
                    500: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                        document.getElementById('btnUnlockPR').innerHTML = "<i class='fa fa-unlock'></i> Unlock";
                        $("#btnUnlockPR").prop("disabled", false);
                        $("#btnPrintPR").prop("disabled", false);
                        $("#btnClosePR").prop("disabled", false);
                    }
                }
            });
        }

        // ====================
        // Print Purchase Request
        // ====================
        function btnPrintPROnclick() {
            var PurchaseRequestId = getParam('id');
            var pirntLink = "/RepPurchaseRequest/PurchaseRequest?PRId=" + PurchaseRequestId;
            window.open(pirntLink, '_blank');
        }

        // ========================
        // Get Purchase Request Items
        // ========================
        function getPurchaseRequestItem() {
            var purchaseRequestItemsObservableArray = new wijmo.collections.ObservableArray;
            if (document.location.search.length > 0) {
                var PRId = getParam('id');
                $.ajax({
                    url: '/api/purchaseRequestItem/list/' + PRId,
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    success: function (results) {
                        var totalAmount = 0;
                        if (results.length > 0) {
                            var btnEditId = "<button class='btn btn-primary btn-xs btn-block' onclick='btnEditPRLines_OnClick()'><i class='fa fa-edit'></i> Edit</button>";
                            var btnDeleteId = "<button class='btn btn-danger btn-xs btn-block' onclick='btnDeletePRLines_OnClick()'><i class='fa fa-trash'></i> Delete</button>";
                            if (isLocked) {
                                btnEditId = "<button class='btn btn-primary btn-xs btn-block' onclick='btnEditPRLines_OnClick()' disabled><i class='fa fa-edit'></i> Edit</button>";
                                btnDeleteId = "<button class='btn btn-danger btn-xs btn-block' onclick='btnDeletePRLines_OnClick()' disabled><i class='fa fa-trash'></i> Delete</button>";
                            }

                            for (i = 0; i < results.length; i++) {
                                purchaseRequestItemsObservableArray.push({
                                    EditId: btnEditId,
                                    DeleteId: btnDeleteId,
                                    Id: results[i]["Id"],
                                    PRId: results[i]["PRId"],
                                    ItemId: results[i]["ItemId"],
                                    ItemCode: results[i]["ItemCode"],
                                    ItemManualOldCode: results[i]["ItemManualOldCode"],
                                    ItemDescription: results[i]["ItemDescription"],
                                    Particulars: results[i]["Particulars"],
                                    Quantity: results[i]["Quantity"],
                                    QuantityDisplay: parseFloat(results[i]["Quantity"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                    UnitId: results[i]["UnitId"],
                                    Unit: results[i]["Unit"],
                                    Cost: results[i]["Cost"],
                                    CostDisplay: parseFloat(results[i]["Cost"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                    Amount: results[i]["Amount"],
                                    AmountDisplay: parseFloat(results[i]["Amount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                    BaseUnit: results[i]["BaseUnit"],
                                    BaseQuantity: results[i]["BaseQuantity"],
                                    BaseQuantityDisplay: parseFloat(results[i]["BaseQuantity"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                    BaseCost: results[i]["BaseCost"],
                                    BaseCostDisplay: parseFloat(results[i]["BaseCost"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")
                                });

                                totalAmount += results[i]["Amount"];
                            }
                        }

                        document.getElementById('totalPRAmount').value = parseFloat(totalAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        NProgress.done();
                    }
                });
            }

            return purchaseRequestItemsObservableArray;
        }

        // ===============
        // Show Rows Table
        // ===============
        function createCboShowRows() {
            var rowsObservableArray = new wijmo.collections.ObservableArray();

            for (var i = 0; i <= 4; i++) {
                var rows = 0;
                var rowsString = "";

                if (i == 0) {
                    rows = 15;
                    rowsString = "Show 15 Rows";
                } else if (i == 1) {
                    rows = 50;
                    rowsString = "Show 50 Rows";
                } else if (i == 2) {
                    rows = 100;
                    rowsString = "Show 100 Rows";
                } else if (i == 3) {
                    rows = 150;
                    rowsString = "Show 150 Rows";
                } else {
                    rows = 200;
                    rowsString = "Show 200 Rows";
                }

                rowsObservableArray.push({
                    rowNumber: rows,
                    rowString: rowsString
                });
            }

            cboPurchaseRequestItemsShowNumberOfRows.dispose();
            cboPurchaseRequestItemsShowNumberOfRows = new wijmo.input.ComboBox('#cboPurchaseRequestItemsShowNumberOfRows', {
                isEditable: false,
                itemsSource: rowsObservableArray,
                displayMemberPath: "rowString",
                selectedValuePath: "rowNumber",
                selectedValue: 50,
                onSelectedIndexChanged: function () {
                    NProgress.start();

                    setTimeout(function () {
                        var numberOfRows = cboPurchaseRequestItemsShowNumberOfRows.selectedValue;
                        purchaseRequestItemCollectionView.pageSize = parseInt(numberOfRows);
                        purchaseRequestItemCollectionView.refresh();
                        purchaseRequestItemFlexGrid.refresh();

                        NProgress.done();
                    }, 300);
                }
            });
        }

        // =========================
        // Update Navigation Buttons
        // =========================
        function updateNavigateButtonsItems() {
            if (purchaseRequestItemCollectionView.pageSize <= 0) {
                document.getElementById('naviagtionPageGrid').style.display = 'none';
                return;
            }
            document.getElementById('naviagtionPageGrid').style.display = 'block';
            if (purchaseRequestItemCollectionView.pageIndex === 0) {
                btnFirstPageGrid.setAttribute('disabled', 'disabled');
                btnPreviousPageGrid.setAttribute('disabled', 'disabled');
                btnNextPageGrid.removeAttribute('disabled');
                btnLastPageGrid.removeAttribute('disabled');
            } else if (purchaseRequestItemCollectionView.pageIndex === (purchaseRequestItemCollectionView.pageCount - 1)) {
                btnFirstPageGrid.removeAttribute('disabled');
                btnPreviousPageGrid.removeAttribute('disabled');
                btnLastPageGrid.setAttribute('disabled', 'disabled');
                btnNextPageGrid.setAttribute('disabled', 'disabled');
            } else {
                btnFirstPageGrid.removeAttribute('disabled');
                btnPreviousPageGrid.removeAttribute('disabled');
                btnNextPageGrid.removeAttribute('disabled');
                btnLastPageGrid.removeAttribute('disabled');
            }
            btnCurrentPageGrid.innerHTML = (purchaseRequestItemCollectionView.pageIndex + 1) + ' / ' + purchaseRequestItemCollectionView.pageCount;
        }

        // =====================================
        // Create Purchase Request Item - FlexGrid
        // =====================================
        function createPurchaseRequestItemFlexGrid() {
            purchaseRequestItemCollectionView = new wijmo.collections.CollectionView(getPurchaseRequestItem());
            purchaseRequestItemCollectionView.canFilter = true;
            purchaseRequestItemCollectionView.pageSize = cboPurchaseRequestItemsShowNumberOfRows.selectedValue;

            var filterText = '';
            $('#InputFilter').keyup(function () {
                filterText = this.value.toLowerCase();
                purchaseRequestItemCollectionView.refresh();
            });

            purchaseRequestItemCollectionView.filter = function (item) {
                return !filterText || (item.ItemCode.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.ItemDescription.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Particulars.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Unit.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.BaseUnit.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.ItemManualOldCode.toLowerCase().indexOf(filterText) > -1);
            }

            purchaseRequestItemCollectionView.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsItems();
            });

            purchaseRequestItemFlexGrid = new wijmo.grid.FlexGrid('#PRItemGrid');
            purchaseRequestItemFlexGrid.initialize({
                columns: [
                    @{
                        if (canEdit)
                        {
                            <text>
                                {
                                    "header": "Edit",
                                    "binding": "EditId",
                                    "width": 70,
                                    "align": "center",
                                    "allowResizing": false,
                                    "allowSorting": false,
                                    "isContentHtml": true
                                },
                            </text>
                        }
                        if (canDelete)
                        {
                            <text>
                                {
                                    "header": "Delete",
                                    "binding": "DeleteId",
                                    "width": 70,
                                    "align": "center",
                                    "allowResizing": false,
                                    "allowSorting": false,
                                    "isContentHtml": true
                                },
                            </text>
                        }
                    }
                    {
                        "header": "Barcode",
                        "binding": "ItemCode",
                        "allowSorting": true,
                        "width": 130,
                    },
                    {
                        "header": "SKU Code",
                        "binding": "ItemManualOldCode",
                        "allowSorting": true,
                        "width": 130,
                    },
                    {
                        "header": "Description",
                        "binding": "ItemDescription",
                        "allowSorting": true,
                        "width": 200
                    },
                    {
                        "header": "Particulars",
                        "binding": "Particulars",
                        "allowSorting": true,
                        "width": 200
                    },
                    {
                        "header": "Quantity",
                        "binding": "QuantityDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": 100
                    },
                    {
                        "header": "Unit",
                        "binding": "Unit",
                        "allowSorting": true,
                        "width": 100
                    },
                    {
                        "header": "Cost",
                        "binding": "CostDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": 100
                    },
                    {
                        "header": "Amount",
                        "binding": "AmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": 100
                    },
                    {
                        "header": "Unit",
                        "binding": "BaseUnit",
                        "allowSorting": true,
                        "width": 100
                    },
                    {
                        "header": "Quantity",
                        "binding": "BaseQuantityDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": 100
                    },
                    {
                        "header": "Cost",
                        "binding": "BaseCostDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": 100
                    }
                ],
                autoGenerateColumns: false,
                itemsSource: purchaseRequestItemCollectionView,
                isReadOnly: true,
                @{
                    if (canEdit)
                    {
                        if (canDelete)
                        {
                            <text>
                                frozenColumns: 2,
                            </text>
                        }
                        else
                        {
                            <text>
                                frozenColumns: 1,
                            </text>
                        }
                    }
                    else
                    {
                        if (canDelete)
                        {
                            <text>
                                frozenColumns: 1,
                            </text>
                        }
                        else
                        {
                            <text>
                                frozenColumns: 0,
                            </text>
                        }
                    }
                }
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            purchaseRequestItemFlexGrid.trackChanges = true;

            var hr = new wijmo.grid.Row();
            purchaseRequestItemFlexGrid.allowMerging = wijmo.grid.AllowMerging.AllHeaders;
            purchaseRequestItemFlexGrid.columnHeaders.rows.push(hr);
            purchaseRequestItemFlexGrid.columnHeaders.rows[0].allowMerging = true;

            @{
                if (canEdit)
                {
                    if (canDelete)
                    {
                        <text>
                            var columnName = "";
                            for (var i = 0; i <= 12; i++) {
                                if (i == 0) {
                                    columnName = "Edit";
                                } else if (i == 1) {
                                    columnName = "Delete";
                                } else if (i == 2) {
                                    columnName = "Barcode";
                                } else if (i == 3) {
                                    columnName = "SKU Code";
                                } else if (i == 4) {
                                    columnName = "Description";
                                } else if (i == 5) {
                                    columnName = "Particulars";
                                } else if (i == 6) {
                                    columnName = "Quantity";
                                } else if (i == 7) {
                                    columnName = "Unit";
                                } else if (i == 8) {
                                    columnName = "Cost";
                                } else if (i == 9) {
                                    columnName = "Amount";
                                } else {
                                    columnName = "Basic Unit Conversion";
                                }

                                purchaseRequestItemFlexGrid.columnHeaders.columns[i].allowMerging = true;
                                purchaseRequestItemFlexGrid.columnHeaders.setCellData(0, i, columnName);
                            }
                        </text>
                    }
                    else
                    {
                         <text>
                            var columnName = "";
                            for (var i = 0; i <= 11; i++) {
                                if (i == 0) {
                                    columnName = "Edit";
                                } else if (i == 1) {
                                    columnName = "Barcode";
                                } else if (i == 2) {
                                    columnName = "SKU Code";
                                } else if (i == 3) {
                                    columnName = "Description";
                                } else if (i == 4) {
                                    columnName = "Particulars";
                                } else if (i == 5) {
                                    columnName = "Quantity";
                                } else if (i == 6) {
                                    columnName = "Unit";
                                } else if (i == 7) {
                                    columnName = "Cost";
                                } else if (i == 8) {
                                    columnName = "Amount";
                                } else {
                                    columnName = "Basic Unit Conversion";
                                }

                                purchaseRequestItemFlexGrid.columnHeaders.columns[i].allowMerging = true;
                                purchaseRequestItemFlexGrid.columnHeaders.setCellData(0, i, columnName);
                            }
                        </text>
                    }
                }
                else
                {
                    if (canDelete)
                    {
                        <text>
                            var columnName = "";
                            for (var i = 0; i <= 11; i++) {
                                if (i == 0) {
                                    columnName = "Delete";
                                } else if (i == 1) {
                                    columnName = "Barcode";
                                } else if (i == 2) {
                                    columnName = "SKU Code";
                                } else if (i == 3) {
                                    columnName = "Description";
                                } else if (i == 4) {
                                    columnName = "Particulars";
                                } else if (i == 5) {
                                    columnName = "Quantity";
                                } else if (i == 6) {
                                    columnName = "Unit";
                                } else if (i == 7) {
                                    columnName = "Cost";
                                } else if (i == 8) {
                                    columnName = "Amount";
                                } else {
                                    columnName = "Basic Unit Conversion";
                                }

                                purchaseRequestItemFlexGrid.columnHeaders.columns[i].allowMerging = true;
                                purchaseRequestItemFlexGrid.columnHeaders.setCellData(0, i, columnName);


                            }
                        </text>
                    }
                    else
                    {
                         <text>
                            var columnName = "";
                            for (var i = 0; i <= 10; i++) {
                                if (i == 0) {
                                    columnName = "Barcode";
                                } else if (i == 1) {
                                    columnName = "SKU Code";
                                } else if (i == 2) {
                                    columnName = "Description";
                                } else if (i == 3) {
                                    columnName = "Particulars";
                                } else if (i == 4) {
                                    columnName = "Quantity";
                                } else if (i == 5) {
                                    columnName = "Unit";
                                } else if (i == 6) {
                                    columnName = "Cost";
                                } else if (i == 7) {
                                    columnName = "Amount";
                                } else {
                                    columnName = "Basic Unit Conversion";
                                }

                                purchaseRequestItemFlexGrid.columnHeaders.columns[i].allowMerging = true;
                                purchaseRequestItemFlexGrid.columnHeaders.setCellData(0, i, columnName);
                            }
                        </text>
                    }
                }
            }

            updateNavigateButtonsItems();

            btnFirstPageGrid.addEventListener('click', function () {
                purchaseRequestItemCollectionView.moveToFirstPage();
                updateNavigateButtonsItems();
            });

            btnPreviousPageGrid.addEventListener('click', function () {
                purchaseRequestItemCollectionView.moveToPreviousPage();
                updateNavigateButtonsItems();
            });

            btnNextPageGrid.addEventListener('click', function () {
                purchaseRequestItemCollectionView.moveToNextPage();
                updateNavigateButtonsItems();
            });

            btnLastPageGrid.addEventListener('click', function () {
                purchaseRequestItemCollectionView.moveToLastPage();
                updateNavigateButtonsItems();
            });
        }

        // ========================
        // Add Purchase Request Items
        // ========================
        function btnAddPRItemOnclick() {
            $('#PRLinesEdit').modal({ show: true, backdrop: 'static' });

            document.getElementById('cmdSavePRLinesButton').innerHTML = "<i class='fa fa-save'></i> Save";
            $("#cmdSavePRLinesButton").prop("disabled", true);
            $("#cmdPRLinesDetailCloseButton").prop("disabled", false);

            $("#loadingModalItem").show();
            document.getElementById("loadingModalItem").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#PRItemContent").hide();

            purchaseRequestItemId = 0;
            getItem(0, 0);
            document.getElementById('PRLine_Particulars').value = "NA";
            document.getElementById('PRLine_Quantity').value = formatDecimalValues(1);
            document.getElementById('PRLine_Cost').value = formatDecimalValues(0);
            document.getElementById('PRLine_Amount').value = formatDecimalValues(0);
        }

        // =============================
        // Get Item Code and Description
        // =============================
        function getItem(itemIdSelectedValue, articleUnitIdSelectedValue) {
            var itemsObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/purchaseRequestItem/dropdown/list/item',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            itemsObservableArray.push({
                                Id: results[i]["Id"],
                                ManualArticleCode: results[i]["ManualArticleCode"],
                                Article: results[i]["Article"]
                            });
                        }
                    }

                    cboPRLineItemCode.dispose();
                    cboPRLineItemCode = new wijmo.input.ComboBox('#cboPRLineItemCode', {
                        isEditable: false,
                        placeholder: "Select Item Code",
                        itemsSource: itemsObservableArray,
                        displayMemberPath: "ManualArticleCode",
                        selectedValuePath: "Id",
                        selectedValue: itemIdSelectedValue,
                        onSelectedIndexChanged: function () {
                            cboPRLineItemDescription.selectedValue = this.selectedValue;
                            getItemUnitForComboBox(this.selectedValue);
                        }
                    });

                    cboPRLineItemDescription.dispose();
                    cboPRLineItemDescription = new wijmo.input.ComboBox('#cboPRLineItemDescription', {
                        isEditable: false,
                        placeholder: "Select Item",
                        itemsSource: itemsObservableArray,
                        displayMemberPath: "Article",
                        selectedValuePath: "Id",
                        selectedValue: itemIdSelectedValue,
                        onSelectedIndexChanged: function () {
                            cboPRLineItemCode.selectedValue = this.selectedValue;
                            getItemUnitForComboBox(this.selectedValue);
                        }
                    });

                    getItemUnitForComboBox(cboPRLineItemDescription.selectedValue, articleUnitIdSelectedValue);
                }
            });
        }

        // =============
        // Get Item Unit
        // =============
        function getItemUnitForComboBox(itemId, articleUnitIdSelectedValue) {
            var unitsObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/purchaseRequestItem/dropdown/list/itemUnit/' + itemId,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            unitsObservableArray.push({
                                Id: results[i]["Id"],
                                UnitId: results[i]["UnitId"],
                                Unit: results[i]["Unit"]
                            });
                        }
                    }

                    cboPRLineUnit.dispose();
                    cboPRLineUnit = new wijmo.input.ComboBox('#cboPRLineUnit', {
                        isEditable: false,
                        placeholder: "Select Unit",
                        itemsSource: unitsObservableArray,
                        displayMemberPath: "Unit",
                        selectedValuePath: "UnitId",
                        selectedValue: articleUnitIdSelectedValue
                    });

                    $("#loadingModalItem").hide();
                    $("#cmdSavePRLinesButton").prop("disabled", false);
                    $("#PRItemContent").show();
                }
            });
        }

        // ========================
        // Edit Purchase Request Item
        // ========================
        function btnEditPRLines_OnClick() {
            $('#PRLinesEdit').modal({ show: true, backdrop: 'static' });

            document.getElementById('cmdSavePRLinesButton').innerHTML = "<i class='fa fa-save'></i> Save";
            $("#cmdSavePRLinesButton").prop("disabled", true);
            $("#cmdPRLinesDetailCloseButton").prop("disabled", false);

            $("#loadingModalItem").show();
            document.getElementById("loadingModalItem").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#PRItemContent").hide();

            purchaseRequestItemCollectionView.editItem(purchaseRequestItemCollectionView.currentItem);
            var purchaseRequestItem = purchaseRequestItemCollectionView.currentEditItem;
            purchaseRequestItemId = purchaseRequestItem.Id;
            getItem(purchaseRequestItem.ItemId, purchaseRequestItem.UnitId);
            document.getElementById('PRLine_Particulars').value = purchaseRequestItem.Particulars;
            document.getElementById('PRLine_Quantity').value = formatDecimalValues(purchaseRequestItem.Quantity);
            document.getElementById('PRLine_Cost').value = formatDecimalValues(purchaseRequestItem.Cost);
            document.getElementById('PRLine_Amount').value = formatDecimalValues(purchaseRequestItem.Amount);
        }

        // ================================
        // Refresh Purchase Request Item Grid
        // ================================
        function refreshPurchaseRequestItemFlexGrid() {
            purchaseRequestItemCollectionView = new wijmo.collections.CollectionView(getPurchaseRequestItem());
            purchaseRequestItemCollectionView.canFilter = true;
            purchaseRequestItemCollectionView.pageSize = cboPurchaseRequestItemsShowNumberOfRows.selectedValue;

            var filterText = '';
            $('#InputFilter').keyup(function () {
                filterText = this.value.toLowerCase();
                purchaseRequestItemCollectionView.refresh();
            });

            purchaseRequestItemCollectionView.filter = function (item) {
                return !filterText || (item.ItemCode.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.ItemDescription.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Particulars.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Unit.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.BaseUnit.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.ItemManualOldCode.toLowerCase().indexOf(filterText) > -1);
            }

            purchaseRequestItemCollectionView.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsItems();
            });

            purchaseRequestItemFlexGrid.itemsSource = purchaseRequestItemCollectionView;
            purchaseRequestItemFlexGrid.trackChanges = true;
        }

        // ==========================
        // Delete Purchase Request Item
        // ==========================
        function btnDeletePRLines_OnClick() {
            $('#deletePRLinesConfirm').modal({ show: true, backdrop: 'static' });

            document.getElementById('cmdConfirmDeletePRLines').innerHTML = "<i class='fa fa-trash'></i> Delete";
            $("#cmdConfirmDeletePRLines").prop("disabled", false);
            $("#cmdConfirmDeleteCloseButton").prop("disabled", false);
        }

        // ==================================
        // Confirm Delete Purchase Request Item
        // ==================================
        function cmdPRLinesConfirmDeleteButton_OnClick() {
            document.getElementById('cmdConfirmDeletePRLines').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Deleting";
            $("#cmdConfirmDeletePRLines").prop("disabled", true);
            $("#cmdConfirmDeleteCloseButton").prop("disabled", true);

            purchaseRequestItemCollectionView.editItem(purchaseRequestItemCollectionView.currentItem);

            var id = purchaseRequestItemCollectionView.currentEditItem.Id;
            var PRId = getParam('id');

            $.ajax({
                url: '/api/purchaseRequestItem/delete/' + id + '/' + PRId,
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Delete Successful");

                        $("#cmdConfirmDeletePRLines").prop("disabled", true);
                        $("#cmdConfirmDeleteCloseButton").prop("disabled", true);

                        $('#deletePRLinesConfirm').modal('hide');
                        refreshPurchaseRequestItemFlexGrid();
                    },
                    404: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                        $('#deletePRLinesConfirm').modal('hide');
                        document.getElementById('cmdConfirmDeletePRLines').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $("#cmdConfirmDeletePRLines").prop("disabled", false);
                        $("#cmdConfirmDeleteCloseButton").prop("disabled", false);
                    },
                    400: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                        $('#deletePRLinesConfirm').modal('hide');
                        document.getElementById('cmdConfirmDeletePRLines').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $("#cmdConfirmDeletePRLines").prop("disabled", false);
                        $("#cmdConfirmDeleteCloseButton").prop("disabled", false);
                    },
                    500: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                        $('#deletePRLinesConfirm').modal('hide');
                        document.getElementById('cmdConfirmDeletePRLines').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $("#cmdConfirmDeletePRLines").prop("disabled", false);
                        $("#cmdConfirmDeleteCloseButton").prop("disabled", false);
                    }
                }
            });
        }

        // ========================
        // Save Purchase Request Item
        // ========================
        function cmdPRLinesSaveButton_OnClick() {
            var PRId = getParam('id');

            var purchaserRequestItemObject = new Object();
            purchaserRequestItemObject.PRId = PRId;
            purchaserRequestItemObject.ItemId = cboPRLineItemDescription.selectedValue;
            purchaserRequestItemObject.Particulars = document.getElementById('PRLine_Particulars').value;
            purchaserRequestItemObject.UnitId = cboPRLineUnit.selectedValue;
            purchaserRequestItemObject.Quantity = document.getElementById('PRLine_Quantity').value;
            purchaserRequestItemObject.Cost = document.getElementById('PRLine_Cost').value;
            purchaserRequestItemObject.Amount = document.getElementById('PRLine_Amount').value;
            var purchaserRequestItemData = JSON.stringify(purchaserRequestItemObject);

            var isValid = true;
            $('.requiredPRLine').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                } else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            if (isValid) {
                document.getElementById('cmdSavePRLinesButton').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Saving";
                $("#cmdSavePRLinesButton").prop("disabled", true);
                $("#cmdPRLinesDetailCloseButton").prop("disabled", true);

                if (purchaseRequestItemId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/purchaseRequestItem/add/' + PRId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: purchaserRequestItemData,
                        statusCode: {
                            200: function () {
                                toastr.success("Save Successful");

                                $('#PRLinesEdit').modal('hide');

                                $("#cmdSavePRLinesButton").prop("disabled", true);
                                $("#cmdPRLinesDetailCloseButton").prop("disabled", true);

                                refreshPurchaseRequestItemFlexGrid();
                            },
                            404: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                                document.getElementById('cmdSavePRLinesButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#cmdSavePRLinesButton").prop("disabled", false);
                                $("#cmdPRLinesDetailCloseButton").prop("disabled", false);
                            },
                            400: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                                document.getElementById('cmdSavePRLinesButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#cmdSavePRLinesButton").prop("disabled", false);
                                $("#cmdPRLinesDetailCloseButton").prop("disabled", false);
                            },
                            500: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                                document.getElementById('cmdSavePRLinesButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#cmdSavePRLinesButton").prop("disabled", false);
                                $("#cmdPRLinesDetailCloseButton").prop("disabled", false);
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/purchaseRequestItem/update/' + purchaseRequestItemId + '/' + PRId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: purchaserRequestItemData,
                        statusCode: {
                            200: function () {
                                toastr.success("Update Successful");

                                $('#PRLinesEdit').modal('hide');

                                $("#cmdSavePRLinesButton").prop("disabled", true);
                                $("#cmdPRLinesDetailCloseButton").prop("disabled", true);

                                refreshPurchaseRequestItemFlexGrid();
                            },
                            404: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                                document.getElementById('cmdSavePRLinesButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#cmdSavePRLinesButton").prop("disabled", false);
                                $("#cmdPRLinesDetailCloseButton").prop("disabled", false);
                            },
                            400: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                                document.getElementById('cmdSavePRLinesButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#cmdSavePRLinesButton").prop("disabled", false);
                                $("#cmdPRLinesDetailCloseButton").prop("disabled", false);
                            },
                            500: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                                document.getElementById('cmdSavePRLinesButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#cmdSavePRLinesButton").prop("disabled", false);
                                $("#cmdPRLinesDetailCloseButton").prop("disabled", false);
                            }
                        }
                    });
                }
            } else {
                toastr.error("Invalid Entry");
            }
        }

        // ==========
        // Key Events
        // ==========
        $('#PRLine_Quantity').keyup(function () {
            computePRItemAmount();
        });

        $('#PRLine_Cost').keyup(function () {
            computePRItemAmount();
        });

        // ==================================
        // Compute Purchase Request Item Amount
        // ==================================
        function computePRItemAmount() {
            var inputQuantity = document.getElementById('PRLine_Quantity').value;
            var inputCost = document.getElementById('PRLine_Cost').value;
            var replacedCost = inputCost.replace(/\,/g, '');
            var replacedQuantity = inputQuantity.replace(/\,/g, '');
            var amount = replacedCost * replacedQuantity;
            document.getElementById('PRLine_Amount').value = formatDecimalValues(amount);
        }

        $(document).on('show.bs.modal', '.modal', function (event) {
            var zIndex = 1040 + (10 * $('.modal:visible').length);
            $(this).css('z-index', zIndex);
            setTimeout(function () {
                $('.modal-backdrop').not('.modal-stack').css('z-index', zIndex - 1).addClass('modal-stack');
            }, 0);
        });

        $(document).on('hidden.bs.modal', '.modal', function () {
            $('.modal:visible').length && $(document.body).addClass('modal-open');
        });

        // ====================
        // Email Purchase Request
        // ====================
        function btnEmailPROnclick() {
            $("#btnEmailPR").prop("disabled", true);
            document.getElementById("btnEmailPR").innerHTML = "<i class='fa fa-spinner fa-spin'></i> Sending E-mail";
            $.ajax({
                type: "PUT",
                url: '/api/purchaseRequest/sendEmail/' + getParam("PurchaseRequestId") + "/" + document.getElementById("PR_Supplier_data").value,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        document.getElementById("btnEmailPR").innerHTML = "<i class='fa fa-envelope'></i> Send E-mail";
                        $("#btnEmailPR").prop("disabled", false);
                        toastr.info("Send Email Successful");
                    },
                    404: function () {
                        document.getElementById("btnEmailPR").innerHTML = "<i class='fa fa-envelope'></i> Send E-mail";
                        $("#btnEmailPR").prop("disabled", false);
                        toastr.error("Email Not Found");
                    },
                    400: function () {
                        document.getElementById("btnEmailPR").innerHTML = "<i class='fa fa-envelope'></i> Send E-mail";
                        $("#btnEmailPR").prop("disabled", false);
                        toastr.error("Bad Request");
                    }
                }
            });
        }

        // ====================
        // Item Query Pop Modal
        // ====================
        function btnItemQueryOnclick() {
            $('#PRLinesItemQuery').modal({
                show: true,
                backdrop: 'static'
            });

            $("#itemQueryPanel").hide();
            $("#loadingItemQuery").show();
            document.getElementById("loadingItemQuery").innerHTML = "<b><i class='fa fa-spinner fa-spin'></i></b>";

            setTimeout(function () {
                createItemQueryFlexGrid();
            }, 500);
        }

        // =============================
        // Get Purchase Request Item Query
        // =============================
        function getArticleItemForItemQuery() {
            var itemsObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/purchaseRequestItem/popUp/list/itemQuery',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    for (i = 0; i < results.length; i++) {
                        itemsObservableArray.push({
                            Id: results[i]["Id"],
                            ManualArticleCode: results[i]["ManualArticleCode"],
                            ManualArticleOldCode: results[i]["ManualArticleOldCode"],
                            Article: results[i]["Article"],
                            Particulars: results[i]["Particulars"],
                            Cost: results[i]["Cost"],
                            CostDisplay: parseFloat(results[i]["Cost"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                            Pick: "<button class='btn btn-primary btn-xs btn-block' onclick='pickToApplyOnClick()'><i class='fa fa-hand-o-right'></i> Pick</button>",
                        });
                    }

                    $("#itemQueryPanel").show();
                    $("#loadingItemQuery").hide();
                }
            });

            return itemsObservableArray;
        }

        // =========================
        // Update Navigation Buttons
        // =========================
        function updateNavigateButtonsItemQuery() {
            if (itemQueryItemsCollection.pageSize <= 0) {
                document.getElementById('naviagtionPageGridItemQuery').style.display = 'none';
                return;
            }
            document.getElementById('naviagtionPageGridItemQuery').style.display = 'block';
            if (itemQueryItemsCollection.pageIndex === 0) {
                btnMoveToFirstPageGridItemQuery.setAttribute('disabled', 'disabled');
                btnMoveToPreviousPageGridItemQuery.setAttribute('disabled', 'disabled');
                btnMoveToNextPageGridItemQuery.removeAttribute('disabled');
                btnMoveToLastPageGridItemQuery.removeAttribute('disabled');
            } else if (itemQueryItemsCollection.pageIndex === (itemQueryItemsCollection.pageCount - 1)) {
                btnMoveToFirstPageGridItemQuery.removeAttribute('disabled');
                btnMoveToPreviousPageGridItemQuery.removeAttribute('disabled');
                btnMoveToNextPageGridItemQuery.setAttribute('disabled', 'disabled');
                btnMoveToLastPageGridItemQuery.setAttribute('disabled', 'disabled');
            } else {
                btnMoveToFirstPageGridItemQuery.removeAttribute('disabled');
                btnMoveToPreviousPageGridItemQuery.removeAttribute('disabled');
                btnMoveToNextPageGridItemQuery.removeAttribute('disabled');
                btnMoveToLastPageGridItemQuery.removeAttribute('disabled');
            }
            btnCurrentPageGridItemQuery.innerHTML = (itemQueryItemsCollection.pageIndex + 1) + ' / ' + itemQueryItemsCollection.pageCount;
        }

        // ==========================
        // Create Item Query Flexgrid
        // ==========================
        function createItemQueryFlexGrid() {
            itemQueryItemsCollection = new wijmo.collections.CollectionView(getArticleItemForItemQuery());
            itemQueryItemsCollection.canFilter = true;
            itemQueryItemsCollection.pageSize = 10;

            var filterText = '';
            $('#itemQueryFilter').keyup(function () {
                filterText = this.value.toLowerCase();
                itemQueryItemsCollection.refresh();
            });

            itemQueryItemsCollection.filter = function (item) {
                return !filterText || (item.ManualArticleCode.toLowerCase().indexOf(filterText) > -1)
                    || (item.Article.toLowerCase().indexOf(filterText) > -1)
                    || (item.ManualArticleOldCode.toLowerCase().indexOf(filterText) > -1);
            }

            itemQueryItemsCollection.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsItemQuery();
            });

            itemQueryGrid.dispose();
            itemQueryGrid = new wijmo.grid.FlexGrid('#itemQueryGrid');
            itemQueryGrid.initialize({
                columns: [
                    {
                        "header": "Barcode",
                        "binding": "ManualArticleCode",
                        "allowSorting": true,
                        "width": "2*"
                    },
                    {
                        "header": "SKU Code",
                        "binding": "ManualArticleOldCode",
                        "allowSorting": true,
                        "width": "2*"
                    },
                    {
                        "header": "Description",
                        "binding": "Article",
                        "allowSorting": true,
                        "width": "4*"
                    },
                    {
                        "header": "Last Purchase Price",
                        "binding": "CostDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": "2.5*"
                    },
                    {
                        "header": "Pick",
                        "binding": "Pick",
                        "width": "1*",
                        "align": "center",
                        "allowResizing": false,
                        "allowSorting": false,
                        "isContentHtml": true
                    },
                ],
                autoGenerateColumns: false,
                itemsSource: itemQueryItemsCollection,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            itemQueryGrid.trackChanges = true;

            if (!isItemQueryClicked) {
                updateNavigateButtonsItemQuery();

                btnMoveToFirstPageGridItemQuery.addEventListener('click', function () {
                    itemQueryItemsCollection.moveToFirstPage();
                    updateNavigateButtonsItemQuery();
                });

                btnMoveToPreviousPageGridItemQuery.addEventListener('click', function () {
                    itemQueryItemsCollection.moveToPreviousPage();
                    updateNavigateButtonsItemQuery();
                });

                btnMoveToNextPageGridItemQuery.addEventListener('click', function () {
                    itemQueryItemsCollection.moveToNextPage();
                    updateNavigateButtonsItemQuery();
                });

                btnMoveToLastPageGridItemQuery.addEventListener('click', function () {
                    itemQueryItemsCollection.moveToLastPage();
                    updateNavigateButtonsItemQuery();
                });

                isItemQueryClicked = true;
            }

        }

        // ======================
        // Item Query - Pick Item
        // ======================
        function pickToApplyOnClick() {
            $('#PRLinesEdit').modal({ show: true, backdrop: 'static' });

            document.getElementById('cmdSavePRLinesButton').innerHTML = "<i class='fa fa-save'></i> Save";
            $("#cmdSavePRLinesButton").prop("disabled", true);
            $("#cmdPRLinesDetailCloseButton").prop("disabled", false);

            $("#loadingModalItem").show();
            document.getElementById("loadingModalItem").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#PRItemContent").hide();

            itemQueryItemsCollection.editItem(itemQueryItemsCollection.currentItem);
            var item = itemQueryItemsCollection.currentEditItem;
            purchaseRequestItemId = 0;
            getItem(item.Id, 0);
            document.getElementById('PRLine_Particulars').value = item.Particulars;
            document.getElementById('PRLine_Quantity').value = formatDecimalValues(1);
            document.getElementById('PRLine_Cost').value = formatDecimalValues(item.Cost);
            document.getElementById('PRLine_Amount').value = formatDecimalValues(item.Cost * 1);
        }

        // ===========
        // OnLoad Page
        // ===========
        $(document).ready(function () {
            getBranchesForComboBox();
        });
    </script>
    <script type="text/javascript">
        var cboUserBranches = new wijmo.input.ComboBox('#cboUserBranches');
        function getUserBranches() {
            $("#loadingUserBranches").show();
            document.getElementById("loadingUserBranches").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#userBranchContent").hide();

            $('#userBranchesModal').modal({ show: true, backdrop: 'static' });

            document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
            $("#updateUserBranch").prop("disabled", false);
            $("#closeUserBranch").prop("disabled", false);

            var userBranchesObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/userBranch/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (userBranchesresults) {
                    if (userBranchesresults.length > 0) {
                        for (i = 0; i < userBranchesresults.length; i++) {
                            userBranchesObservableArray.push({
                                BranchId: userBranchesresults[i]["BranchId"],
                                Branch: userBranchesresults[i]["Branch"]
                            });
                        }
                    }

                    var currentBranch = "@ViewData["BranchId"]";
                    cboUserBranches.dispose();
                    cboUserBranches = new wijmo.input.ComboBox('#cboUserBranches', {
                        isEditable: false,
                        placeholder: "Select Branches",
                        itemsSource: userBranchesObservableArray,
                        displayMemberPath: "Branch",
                        selectedValuePath: "BranchId",
                        selectedValue: currentBranch
                    });

                    setTimeout(function () {
                        $("#loadingUserBranches").hide();
                        $("#userBranchContent").show();
                    }, 500)
                }
            });
        }

        function updateUserBranchOnclick() {
            document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Updating";
            $("#updateUserBranch").prop("disabled", true);
            $("#closeUserBranch").prop("disabled", true);

            var userBranchObject = new Object();
            userBranchObject.BranchId = cboUserBranches.selectedValue;
            var userBranchData = JSON.stringify(userBranchObject);

            $.ajax({
                type: "PUT",
                url: '/api/userBranch/update',
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: userBranchData,
                statusCode: {
                    200: function () {
                        toastr.success("Update Successful");
                        window.setTimeout(function () {
                            location.reload()
                        }, 1000);
                    },
                    404: function () {
                        toastr.error("Not Found");
                        document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
                        $("#updateUserBranch").prop("disabled", false);
                        $("#closeUserBranch").prop("disabled", false);
                    },
                    500: function () {
                        toastr.error("Bad Request");
                        document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
                        $("#updateUserBranch").prop("disabled", false);
                        $("#closeUserBranch").prop("disabled", false);
                    }
                }
            });
        }
    </script>
    <script type="text/javascript">
        var slideLeft = new Menu({
            wrapper: '#o-wrapper',
            type: 'slide-left',
            menuOpenerClass: '.c-button',
            maskId: '#c-mask'
        });

        var slideLeftBtn = document.querySelector('#c-button--slide-left');

        slideLeftBtn.addEventListener('click', function (e) {
            e.preventDefault;
            slideLeft.open();
        });
    </script>
</body>
</html>
