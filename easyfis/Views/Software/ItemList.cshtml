<!DOCTYPE html>
<html>
<head>
    <!-- Meta -->
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">

    <!-- Title of the Page -->
    <link rel="shortcut icon" href="~/Images/icon/easyfislogomini.ico">
    <title>Item List</title>

    <!-- CSS StyleSheets-->
    @Styles.Render("~/Content/Software-css")
</head>
<body>
    <div id="o-wrapper" class="o-wrapper">
        <main class="o-content">
            @Html.Partial("_SoftwareHeader")
            <section class="content-header">
                <div class="container">
                    <h3>
                        Item List
                    </h3>
                    <p>
                        <i class="fa fa-building-o fa-fw"></i> &nbsp; @ViewData["Company"] <br />
                        <i class="fa fa-home fa-fw"></i> &nbsp; <a href="#" onclick="getUserBranches()" style="color: white;">@ViewData["Branch"]</a>
                    </p>
                </div>
            </section>
            <section class="container">
                <div class="panel panel-default">
                    <div class="panel-heading">
                        <table style="width: 100%" border="0">
                            <tr>
                                <td style="width: 49.5%">
                                    <div class="input-group">
                                        <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                        <input type="text" class="form-control " id="InputFilter" placeholder="Search...">
                                    </div>
                                </td>
                                <td style="width: 1%"></td>
                                <td style="width: 24%">
                                    <div class="input-group">
                                        <span class="input-group-addon"><b><i class="fa fa-table"></i></b></span>
                                        <div class="comboBox-wide" id="cboItemListShowNumberOfRows"></div>
                                    </div>
                                </td>
                                <td style="width: 1%"></td>
                                <td style="width: 24.5%" align="right">
                                    <button onclick="btnItemListReportCSVOnclick()" id="btnItemListReportCSV" class="btn btn-success"><i class="fa fa-file-excel-o" aria-hidden="true"></i> CSV</button>
                                    <button onclick="btnItemListReportPrintPDFOnclick()" id="btnItemListReportPrintPDF" class="btn btn-primary"><i class="fa fa-print"></i> Print</button>
                                    <a href="/Software/Inventory" class="btn btn-danger"><i class="fa fa-close"></i> Close</a>
                                </td>
                            </tr>
                        </table>
                    </div>
                    <div class="panel-heading">
                        <table style="width: 100%" border="0">
                            <tr>
                                <td style="width: 49.5%">
                                    <div class="input-group ">
                                        <span class="input-group-addon"><b>Item Group</b></span>
                                        <div class="comboBox-wide" id="cboItemGroup"></div>
                                    </div>
                                </td>
                                <td style="width: 50.5%"></td>
                            </tr>
                        </table>
                    </div>
                    <div class="panel-body">
                        <div id="itemListReportGrid" class="grid"></div>
                    </div>
                    <div class="panel-footer">
                        <div class="row">
                            <div class="btn-group col-md-7" id="naviagtionPageGrid">
                                <button type="button" class="btn btn-default border-custom" id="btnMoveToFirstPageGrid">
                                    <span class="glyphicon glyphicon-fast-backward"></span>
                                </button>
                                <button type="button" class="btn btn-default border-custom" id="btnMoveToPreviousPageGrid">
                                    <span class="glyphicon glyphicon-step-backward"></span>
                                </button>
                                <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnCurrentPageGrid"></button>
                                <button type="button" class="btn btn-default border-custom" id="btnMoveToNextPageGrid">
                                    <span class="glyphicon glyphicon-step-forward"></span>
                                </button>
                                <button type="button" class="btn btn-default border-custom" id="btnMoveToLastPageGrid">
                                    <span class="glyphicon glyphicon-fast-forward"></span>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </section>
            @Html.Partial("_SoftwareFooter")
        </main>
    </div>
    <div id="c-mask" class="c-mask"></div>

    @Scripts.Render("~/Scripts/Software-js")
    <script type="text/javascript">
        // ================
        // Global Variables
        // ================
        var itemListReportCollections;
        var itemListReportGrid;
        var cboItemGroup = new wijmo.input.ComboBox('#cboItemGroup');
        var isCboItemGroupSelected = false;
        var cboItemListShowNumberOfRows = new wijmo.input.ComboBox('#cboItemListShowNumberOfRows');
        var btnFirstPageGrid = document.getElementById('btnMoveToFirstPageGrid');
        var btnPreviousPageGrid = document.getElementById('btnMoveToPreviousPageGrid');
        var btnNextPageGrid = document.getElementById('btnMoveToNextPageGrid');
        var btnLastPageGrid = document.getElementById('btnMoveToLastPageGrid');
        var btnCurrentPageGrid = document.getElementById('btnCurrentPageGrid');
        var currentPageIndex = 0;

        // ===================
        // Get Parameter Value
        // ===================
        function getParam(name) {
            name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");

            var regexS = "[\\?&]" + name + "=([^&#]*)";
            var regex = new RegExp(regexS);

            var results = regex.exec(window.location.href);
            if (results == null) {
                return "";
            } else {
                return results[1];
            }
        }

        // =====================
        // Get Artile Item Group
        // =====================
        function getArticleItemGroupForComboBox() {
            NProgress.start();
            var articleItemGroupsObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listArticleGroupByArticleTypeId/1',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (itemGroupResults) {
                    if (itemGroupResults.length > 0) {
                        for (i = 0; i < itemGroupResults.length; i++) {
                            articleItemGroupsObservableArray.push({
                                Id: itemGroupResults[i]["Id"],
                                ArticleGroup: itemGroupResults[i]["ArticleGroup"]
                            });
                        }
                    }

                    cboItemGroup.dispose();
                    cboItemGroup = new wijmo.input.ComboBox('#cboItemGroup', {
                        isEditable: false,
                        itemsSource: articleItemGroupsObservableArray,
                        displayMemberPath: "ArticleGroup",
                        selectedValuePath: "Id",
                        selectedValue: getParam("ItemGroupId"),
                        onSelectedIndexChanged: function () {
                            NProgress.start();
                            refreshItemListReportFlexGrid();
                        }
                    });

                    createCboShowRows();
                }
            });
        }

        // ===============
        // Show Rows Table
        // ===============
        function createCboShowRows() {
            var rowsObservableArray = new wijmo.collections.ObservableArray();

            for (var i = 0; i <= 4; i++) {
                var rows = 0;
                var rowsString = "";

                if (i == 0) {
                    rows = 15;
                    rowsString = "Show 15 Rows";
                } else if (i == 1) {
                    rows = 50;
                    rowsString = "Show 50 Rows";
                } else if (i == 2) {
                    rows = 100;
                    rowsString = "Show 100 Rows";
                } else if (i == 3) {
                    rows = 150;
                    rowsString = "Show 150 Rows";
                } else {
                    rows = 200;
                    rowsString = "Show 200 Rows";
                }

                rowsObservableArray.push({
                    rowNumber: rows,
                    rowString: rowsString
                });
            }

            cboItemListShowNumberOfRows.dispose();
            cboItemListShowNumberOfRows = new wijmo.input.ComboBox('#cboItemListShowNumberOfRows', {
                isEditable: false,
                itemsSource: rowsObservableArray,
                displayMemberPath: "rowString",
                selectedValuePath: "rowNumber",
                selectedValue: 50,
                onSelectedIndexChanged: function () {
                    NProgress.start();

                    setTimeout(function () {
                        var numberOfRows = cboItemListShowNumberOfRows.selectedValue;
                        itemListReportCollections.pageSize = parseInt(numberOfRows);
                        itemListReportCollections.refresh();
                        itemListReportGrid.refresh();

                        NProgress.done();
                    }, 300);
                }
            });

            if (!isCboItemGroupSelected) {
                createItemListReportFlexGrid();
            } else {
                refreshItemListReportFlexGrid();
            }
        }

        // =========================
        // Update Navigation Buttons
        // =========================
        function updateNavigateButtonsItems() {
            if (itemListReportCollections.pageSize <= 0) {
                document.getElementById('naviagtionPageGrid').style.display = 'none';
                return;
            }
            document.getElementById('naviagtionPageGrid').style.display = 'block';
            if (itemListReportCollections.pageIndex === 0) {
                btnFirstPageGrid.setAttribute('disabled', 'disabled');
                btnPreviousPageGrid.setAttribute('disabled', 'disabled');
                btnNextPageGrid.removeAttribute('disabled');
                btnLastPageGrid.removeAttribute('disabled');
            } else if (itemListReportCollections.pageIndex === (itemListReportCollections.pageCount - 1)) {
                btnFirstPageGrid.removeAttribute('disabled');
                btnPreviousPageGrid.removeAttribute('disabled');
                btnLastPageGrid.setAttribute('disabled', 'disabled');
                btnNextPageGrid.setAttribute('disabled', 'disabled');
            } else {
                btnFirstPageGrid.removeAttribute('disabled');
                btnPreviousPageGrid.removeAttribute('disabled');
                btnNextPageGrid.removeAttribute('disabled');
                btnLastPageGrid.removeAttribute('disabled');
            }
            btnCurrentPageGrid.innerHTML = (itemListReportCollections.pageIndex + 1) + ' / ' + itemListReportCollections.pageCount;
        }
        
        // ========
        // Get Data
        // ========
        function getItemListReport() {
            var itemListReports = new wijmo.collections.ObservableArray;
            if (cboItemGroup.selectedValue != null) {
                var itemGroupId = cboItemGroup.selectedValue;

                $.ajax({
                    url: '/api/itemList/list/' + itemGroupId,
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    success: function (itemListReportResult) {
                        if (itemListReportResult.length > 0) {
                            for (i = 0; i < itemListReportResult.length; i++) {
                                var docLink = "/Software/ItemDetail?id=" + itemListReportResult[i]["Id"];
                                itemListReports.push({
                                    Id: itemListReportResult[i]["Id"],
                                    ArticleCode: itemListReportResult[i]["ArticleCode"],
                                    ArticleCodeForCSV: "Item-" + itemListReportResult[i]["ArticleCode"],
                                    ArticleCodeBtn: "<a href='" + docLink + "' class='btn btn-primary btn-xs btn-block'> " + itemListReportResult[i]["ArticleCode"] + "</a>",
                                    ManualArticleCodeForCSV: "Item-" + itemListReportResult[i]["ManualArticleCode"],
                                    ManualArticleCode: itemListReportResult[i]["ManualArticleCode"],
                                    DocumentReferenceForCSV: itemListReportResult[i]["DocumentReference"],
                                    Article: itemListReportResult[i]["Article"],
                                    Category: itemListReportResult[i]["Category"],
                                    ArticleTypeId: itemListReportResult[i]["ArticleTypeId"],
                                    ArticleType: itemListReportResult[i]["ArticleType"],
                                    ArticleGroupId: itemListReportResult[i]["ArticleGroupId"],
                                    ArticleGroup: itemListReportResult[i]["ArticleGroup"],
                                    AccountId: itemListReportResult[i]["AccountId"],
                                    AccountCode: itemListReportResult[i]["AccountCode"],
                                    Account: itemListReportResult[i]["Account"],
                                    SalesAccountId: itemListReportResult[i]["SalesAccountId"],
                                    SalesAccount: itemListReportResult[i]["SalesAccount"],
                                    CostAccountId: itemListReportResult[i]["CostAccountId"],
                                    CostAccount: itemListReportResult[i]["CostAccount"],
                                    AssetAccountId: itemListReportResult[i]["AssetAccountId"],
                                    AssetAccount: itemListReportResult[i]["AssetAccount"],
                                    ExpenseAccountId: itemListReportResult[i]["ExpenseAccountId"],
                                    ExpenseAccount: itemListReportResult[i]["ExpenseAccount"],
                                    UnitId: itemListReportResult[i]["UnitId"],
                                    Unit: itemListReportResult[i]["Unit"],
                                    InputTaxId: itemListReportResult[i]["InputTaxId"],
                                    InputTax: itemListReportResult[i]["InputTax"],
                                    OutputTaxId: itemListReportResult[i]["OutputTaxId"],
                                    OutputTax: itemListReportResult[i]["OutputTax"],
                                    WTaxTypeId: itemListReportResult[i]["WTaxTypeId"],
                                    WTaxType: itemListReportResult[i]["WTaxType"],
                                    Price: itemListReportResult[i]["Price"].toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                    PriceAmountDisplay: parseFloat(itemListReportResult[i]["Price"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                    Cost: itemListReportResult[i]["Cost"].toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                    CostAmountDisplay: parseFloat(itemListReportResult[i]["Cost"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                    IsInventory: itemListReportResult[i]["IsInventory"],
                                    Particulars: itemListReportResult[i]["Particulars"],
                                    Address: itemListReportResult[i]["Address"],
                                    TermId: itemListReportResult[i]["TermId"],
                                    Term: itemListReportResult[i]["Term"],
                                    ContactNumber: itemListReportResult[i]["ContactNumber"],
                                    ContactPerson: itemListReportResult[i]["ContactPerson"],
                                    TaxNumber: itemListReportResult[i]["TaxNumber"],
                                    CreditLimit: itemListReportResult[i]["CreditLimit"],
                                    DateAcquired: itemListReportResult[i]["DateAcquired"],
                                    UsefulLife: itemListReportResult[i]["UsefulLife"],
                                    SalvageValue: itemListReportResult[i]["SalvageValue"],
                                    ManualArticleOldCode: itemListReportResult[i]["ManualArticleOldCode"],
                                });
                            }
                        }

                        NProgress.done();
                    }
                });
            }

            return itemListReports;
        }

        // =================
        // Refresh Flex Grid
        // =================
        function refreshItemListReportFlexGrid() {
            itemListReportCollections = new wijmo.collections.CollectionView(getItemListReport());
            itemListReportCollections.canFilter = true;
            itemListReportCollections.pageSize = cboItemListShowNumberOfRows.selectedValue;

            var filterText = '';
            $('#InputFilter').keyup(function () {
                filterText = this.value.toLowerCase();
                itemListReportCollections.refresh();
            });

            itemListReportCollections.filter = function (item) {
                return !filterText || (item.ArticleCode.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Article.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.ManualArticleCode.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.ManualArticleOldCode.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Unit.toLowerCase().indexOf(filterText) > -1);
            }

            itemListReportCollections.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsItems();
            });

            itemListReportGrid.itemsSource = itemListReportCollections;
            itemListReportGrid.trackChanges = true;
        }

        // =========
        // Flex Grid
        // =========
        function createItemListReportFlexGrid() {
            itemListReportCollections = new wijmo.collections.CollectionView(getItemListReport());
            itemListReportCollections.canFilter = true;
            itemListReportCollections.pageSize = cboItemListShowNumberOfRows.selectedValue;

            var filterText = '';
            $('#InputFilter').keyup(function () {
                filterText = this.value.toLowerCase();
                itemListReportCollections.refresh();
            });

            itemListReportCollections.filter = function (item) {
                return !filterText || (item.ArticleCode.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Article.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.ManualArticleCode.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.ManualArticleOldCode.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Unit.toLowerCase().indexOf(filterText) > -1);
            }

            itemListReportCollections.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsItems();
            });

            itemListReportGrid = new wijmo.grid.FlexGrid('#itemListReportGrid');
            itemListReportGrid.initialize({
                columns: [
                    {
                        "header": "Code",
                        "binding": "ArticleCodeBtn",
                        "allowSorting": true,
                        "width": "1*",
                        "isContentHtml": true
                    },
                    {
                        "header": "Barcode",
                        "binding": "ManualArticleCode",
                        "allowSorting": false,
                        "width": "1.5*"
                    },
                    {
                        "header": "SKU Code",
                        "binding": "ManualArticleOldCode",
                        "allowSorting": false,
                        "width": "1.5*"
                    },
                    {
                        "header": "Item",
                        "binding": "Article",
                        "allowSorting": true,
                        "width": "1.5*"
                    },
                    {
                        "header": "Unit",
                        "binding": "Unit",
                        "allowSorting": true,
                        "width": "1.5*"
                    },
                    {
                        "header": "Cost",
                        "binding": "CostAmountDisplay",
                        "align": "right",
                        "allowSorting": true,
                        "width": "1*"
                    },
                    {
                        "header": "Price",
                        "binding": "PriceAmountDisplay",
                        "align": "right",
                        "allowSorting": true,
                        "width": "1*"
                    }
                ],
                autoGenerateColumns: false,
                itemsSource: itemListReportCollections,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            itemListReportGrid.trackChanges = true;

            updateNavigateButtonsItems();

            btnFirstPageGrid.addEventListener('click', function () {
                itemListReportCollections.moveToFirstPage();
                currentPageIndex = itemListReportCollections.pageIndex + 1;
                updateNavigateButtonsItems();
            });

            btnPreviousPageGrid.addEventListener('click', function () {
                itemListReportCollections.moveToPreviousPage();
                currentPageIndex = itemListReportCollections.pageIndex + 1;
                updateNavigateButtonsItems();
            });

            btnNextPageGrid.addEventListener('click', function () {
                itemListReportCollections.moveToNextPage();
                currentPageIndex = itemListReportCollections.pageIndex + 1;
                updateNavigateButtonsItems();
            });

            btnLastPageGrid.addEventListener('click', function () {
                itemListReportCollections.moveToLastPage();
                currentPageIndex = itemListReportCollections.pageIndex + 1;
                updateNavigateButtonsItems();
            });
        }

        // ============
        // Download CSV
        // ============
        function btnItemListReportCSVOnclick() {
            var CSV = '';
            var itemListReport = [];
            var fileName = 'ItemListReport.CSV';

            itemListReportCollections.moveToFirstPage();

            for (var p = 1; p <= itemListReportCollections.pageCount; p++) {
                for (i = 0; i < itemListReportCollections.items.length; i++) {
                    itemListReport.push({
                        ArticleCode: itemListReportCollections.items[i].ArticleCodeForCSV,
                        ManualArticleCode: itemListReportCollections.items[i].ManualArticleCodeForCSV,
                        Article: itemListReportCollections.items[i].Article,
                        Unit: itemListReportCollections.items[i].Unit,
                        Cost: itemListReportCollections.items[i].Cost,
                        Price: itemListReportCollections.items[i].Price,
                    });
                }

                itemListReportCollections.moveToNextPage();
                if (p == itemListReportCollections.pageCount) {
                    itemListReportCollections.moveToPage(currentPageIndex - 1);
                }
            }

            var Headers = [];
            Headers.push({
                ArticleCode: "Code",
                ManualArticleCode: "Manual Code",
                Article: "Item",
                Unit: "Unit",
                Cost: "Cost",
                Price: "Price",
            });

            var header = '';
            for (var b in Headers[0]) {
                header += '"' + Headers[0][b] + '",';
            }

            CSV = header + '\r\n';
            for (var i = 0; i < itemListReport.length; i++) {
                var row = '';
                for (var a in itemListReport[i]) {
                    row += '"' + itemListReport[i][a] + '",';
                }

                row.slice(0, row.length - 1);
                CSV += row + '\r\n';
            }

            if (CSV == '') {
                toastr.error("No data.");
            } else {
                var link = document.createElement("a");
                if (link.download !== undefined) {
                    var blob = new Blob([CSV], { type: 'text/csv;charset=utf-8;' });
                    var url = URL.createObjectURL(blob);
                    link.setAttribute("href", url);
                    link.setAttribute("download", fileName);
                    link.style = "visibility:hidden";
                }

                if (navigator.msSaveBlob) {
                    link.addEventListener("click", function (event) {
                        var blob = new Blob([CSV], {
                            "type": "text/csv;charset=utf-8;"
                        });
                        navigator.msSaveBlob(blob, fileName);
                    }, false);
                }

                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);

                toastr.success("Dowload successful.");
            }
        }

        // =====================
        // Preview and Print PDF
        // =====================
        function btnItemListReportPrintPDFOnclick() {
            if (cboItemGroup.selectedValue != null) {
                var itemGroupId = cboItemGroup.selectedValue;
                window.location.href = '/RepItemList/ItemList?itemGroupId=' + itemGroupId;
            } else {
                toastr.error("Lacking Information");
            }
        }

        // ============
        // On Load Page
        // ============
        $(document).ready(function () {
            getArticleItemGroupForComboBox();
        });
    </script>
    <script type="text/javascript">
        var cboUserBranches = new wijmo.input.ComboBox('#cboUserBranches');
        function getUserBranches() {
            $("#loadingUserBranches").show();
            document.getElementById("loadingUserBranches").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#userBranchContent").hide();

            $('#userBranchesModal').modal({ show: true, backdrop: 'static' });

            document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
            $("#updateUserBranch").prop("disabled", false);
            $("#closeUserBranch").prop("disabled", false);

            var userBranchesObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/userBranch/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (userBranchesResults) {
                    if (userBranchesResults.length > 0) {
                        for (i = 0; i < userBranchesResults.length; i++) {
                            userBranchesObservableArray.push({
                                BranchId: userBranchesResults[i]["BranchId"],
                                Branch: userBranchesResults[i]["Branch"]
                            });
                        }
                    }

                    var currentBranch = "@ViewData["BranchId"]";
                    cboUserBranches.dispose();
                    cboUserBranches = new wijmo.input.ComboBox('#cboUserBranches', {
                        isEditable: false,
                        placeholder: "Select Branches",
                        itemsSource: userBranchesObservableArray,
                        displayMemberPath: "Branch",
                        selectedValuePath: "BranchId",
                        selectedValue: currentBranch
                    });

                    setTimeout(function () {
                        $("#loadingUserBranches").hide();
                        $("#userBranchContent").show();
                    }, 500)
                }
            });
        }

        function updateUserBranchOnclick() {
            document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Updating";
            $("#updateUserBranch").prop("disabled", true);
            $("#closeUserBranch").prop("disabled", true);

            var userBranchObject = new Object();
            userBranchObject.BranchId = cboUserBranches.selectedValue;
            var userBranchData = JSON.stringify(userBranchObject);

            $.ajax({
                type: "PUT",
                url: '/api/userBranch/update',
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: userBranchData,
                statusCode: {
                    200: function () {
                        toastr.success("Update Successful");
                        window.setTimeout(function () {
                            location.reload()
                        }, 1000);
                    },
                    404: function () {
                        toastr.error("Not Found");
                        document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
                        $("#updateUserBranch").prop("disabled", false);
                        $("#closeUserBranch").prop("disabled", false);
                    },
                    500: function () {
                        toastr.error("Bad Request");
                        document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
                        $("#updateUserBranch").prop("disabled", false);
                        $("#closeUserBranch").prop("disabled", false);
                    }
                }
            });
        }
    </script>
    <script type="text/javascript">
        var slideLeft = new Menu({
            wrapper: '#o-wrapper',
            type: 'slide-left',
            menuOpenerClass: '.c-button',
            maskId: '#c-mask'
        });

        var slideLeftBtn = document.querySelector('#c-button--slide-left');

        slideLeftBtn.addEventListener('click', function (e) {
            e.preventDefault;
            slideLeft.open();
        });
    </script>
</body>
</html>