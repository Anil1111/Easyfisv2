<!DOCTYPE html>
<html>
<head>
    <!-- Meta -->
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">

    <!-- Title of the Page -->
    <title>Items</title>

    <!-- CSS StyleSheets-->
    @Styles.Render("~/Content/Software-css")
</head>
<body>
    <div id="o-wrapper" class="o-wrapper">
        <!-- Header -->
        @Html.Partial("_SoftwareHeader")

        <!-- Section -->
        <section>
            <div class="sub-nav">
                <div class="container">
                    <h4><i class="fa fa-cart-arrow-down"></i>  Items</h4>
                </div>
                <div class="div_Current_Page">
                    <div class="container">
                        <a href="@Url.Action("Index", "Software")" class="currentPageLinkCustom">Main Menu</a> > Items
                    </div>
                </div>
            </div>
            <div class="container">
                <!-- Items List -->
                <div id="itemList">
                    <div class="row">
                        <div class="col-lg-4">
                            <div class="input-group input-group-sm">
                                <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                <input type="text" class="form-control input-sm" id="InputFilter" placeholder="Search">
                            </div>
                        </div>
                        <div class="col-lg-8" align="right">
                            <button class="btn btn-primary btn-sm" onclick="btnAddItem_OnClick()"><i class="fa fa-plus"></i> Add</button>
                            <button class="btn btn-danger btn-sm" onclick="btnCloseItem_OnClick()"><i class=" fa fa-times"></i> Close</button>
                        </div>
                    </div>
                    <br />
                    <div class="row" align="left">
                        <div class="col-lg-12">
                            <div id="ItemGrid" class="grid" align="left"></div>
                        </div>
                    </div>
                    <br />
                    <div class="row">
                        <div class="btn-group col-md-7" id="naviagtionPageGrid">
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToFirstPageGrid">
                                <span class="glyphicon glyphicon-fast-backward"></span>
                            </button>
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToPreviousPageGrid">
                                <span class="glyphicon glyphicon-step-backward"></span>
                            </button>
                            <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnCurrentPageGrid"></button>
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToNextPageGrid">
                                <span class="glyphicon glyphicon-step-forward"></span>
                            </button>
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToLastPageGrid">
                                <span class="glyphicon glyphicon-fast-forward"></span>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </section>

        <!-- Item Delete -->
        <div class="modal fade" id="deleteItemConfirm" role="dialog">
            <div class="modal-dialog modal-sm">
                <!-- Modal content-->
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                        <h4 class="modal-title">Delete Item <i class="fa fa-trash"></i></h4>
                    </div>
                    <div class="modal-body">
                        Are you sure you want to delete this?
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-danger btn-sm" id="cmdConfirmDeleteItem" onclick="cmdItemConfirmDeleteButton_OnClick()"><i class="fa fa-trash"></i> Delete</button>
                        <button id="cmdConfirmDeleteCloseButton" class="btn btn-primary btn-sm" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Delete Lock -->
        <div class="modal fade" id="deleteRecordLock" role="dialog">
            <div class="modal-dialog modal-sm">
                <!-- Modal content-->
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                        <h4 class="modal-title">Record Locked <i class="fa fa-lock"></i></h4>
                    </div>
                    <div class="modal-body">
                        Sorry, the record is lock! It can't be deleted!
                    </div>
                    <div class="modal-footer">
                        <button id="cmdConfirmDeleteCloseButton" class="btn btn-primary btn-sm" data-dismiss="modal"> Okay</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Footer -->
        @Html.Partial("_SoftwareFooter")
    </div>

    <!-- SideBar Menu -->
    @Html.Partial("_SoftwareSideBarMenu")

    <div id="c-mask" class="c-mask"></div><!-- /c-mask -->
    @Scripts.Render("~/Scripts/Software-js")
    <script type="text/javascript">
        // ================
        // Global Variables
        // ================
        var items;
        var itemGrid;
        var btnFirstPageGrid;
        var btnPreviousPageGrid;
        var btnNextPageGrid;
        var btnLastPageGrid;
        var btnCurrentPageGrid;

        // ==============================
        // Get Data from MstArtcile Table
        // ==============================
        function getArtcileForItems() {
            var items = new wijmo.collections.ObservableArray;
            NProgress.start();
            $.ajax({
                url: '/api/listArticleByArticleTypeId/1',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (itemResults) {
                    if (itemResults.length > 0) {
                        for (i = 0; i < itemResults.length; i++) {

                            var btnDeleteId;
                            if(itemResults[i]["IsLocked"] == true) {
                                btnDeleteId = "<button class='btn btn-danger btn-xs btn-block' onclick='cmdItemDeleteLockButton_OnClick()'><i class='fa fa-trash'></i> Delete</button>";
                            } else {
                                btnDeleteId = "<button class='btn btn-danger btn-xs btn-block' onclick='cmdItemDeleteButton_OnClick()'><i class='fa fa-trash'></i> Delete</button>";
                            }

                            items.push ({
                                EditId: "<button class='btn btn-primary btn-xs btn-block' id='' onclick='cmdItemEditButton_OnClick()'><i class='fa fa-edit'></i> Edit</button>",
                                DeleteId: btnDeleteId,
                                Id: itemResults[i]["Id"],
                                ArticleCode : itemResults[i]["ArticleCode"],
                                ManualArticleCode : itemResults[i]["ManualArticleCode"],
                                Article : itemResults[i]["Article"],
                                Category : itemResults[i]["Category"],
                                ArticleTypeId : itemResults[i]["ArticleTypeId"],
                                ArticleType : itemResults[i]["ArticleType"],
                                ArticleGroupId : itemResults[i]["ArticleGroupId"],
                                ArticleGroup : itemResults[i]["ArticleGroup"],
                                AccountId : itemResults[i]["AccountId"],
                                Account : itemResults[i]["Account"],
                                SalesAccountId : itemResults[i]["SalesAccountId"],
                                CostAccountId : itemResults[i]["CostAccountId"],
                                AssetAccountId : itemResults[i]["AssetAccountId"],
                                ExpenseAccountId : itemResults[i]["ExpenseAccountId"],
                                UnitId : itemResults[i]["UnitId"],
                                Unit : itemResults[i]["Unit"],
                                OutputTaxId : itemResults[i]["OutputTaxId"],
                                InputTaxId : itemResults[i]["InputTaxId"],
                                WTaxTypeId : itemResults[i]["WTaxTypeId"],
                                Price : itemResults[i]["Price"],
                                Cost : itemResults[i]["Cost"],
                                IsInventory : itemResults[i]["IsInventory"],
                                Particulars : itemResults[i]["Particulars"],
                                Address : itemResults[i]["Address"],
                                TermId : itemResults[i]["TermId"],
                                ContactNumber : itemResults[i]["ContactNumber"],
                                ContactPerson : itemResults[i]["ContactPerson"],
                                TaxNumber : itemResults[i]["TaxNumber"],
                                CreditLimit : itemResults[i]["CreditLimit"],
                                DateAcquired : itemResults[i]["DateAcquired"],
                                UsefulLife : itemResults[i]["UsefulLife"],
                                SalvageValue : itemResults[i]["SalvageValue"],
                                ManualArticleOldCode : itemResults[i]["ManualArticleOldCode"],
                                IsLocked: itemResults[i]["IsLocked"],
                                CreatedById: itemResults[i]["CreatedById"],
                                CreatedBy: itemResults[i]["CreatedBy"],
                                CreatedDateTime: itemResults[i]["CreatedDateTime"],
                                UpdatedById: itemResults[i]["UpdatedById"],
                                UpdatedBy: itemResults[i]["UpdatedBy"],
                                UpdatedDateTime: itemResults[i]["UpdatedDateTime"]
                            });
                        }
                    }
                    NProgress.done();
                }
            }).fail(function (xhr, textStatus, err) {
                alert(err);
            });
            return items;
        }

        // =========================
        // Items Delete Lock Button
        // =========================
        function cmdItemDeleteLockButton_OnClick() {
            $('#deleteRecordLock').modal({
                show: true,
                backdrop: 'static'
            });
        }

        // ===============
        // Item Add Button
        // ===============
        function btnAddItem_OnClick() {
            window.location = '/Software/ItemDetail';
        }

        // =================
        // Item Close Button
        // =================
        function btnCloseItem_OnClick() {
            window.location = '/Software';
        }

        // ================
        // Item Edit Button
        // ================
        function cmdItemEditButton_OnClick() {
            items.editItem(items.currentItem);
            var item = items.currentEditItem;
            var itemId = item.Id;
            window.location = '/Software/ItemDetail?ItemId=' + itemId;
        }

        // =====================
        // Refresh Item Flexgrid
        // =====================
        function refreshItemFlexgrid() {
            items = new wijmo.collections.CollectionView(getArtcileForItems());
            items.canFilter = true;
            items.pageSize = 15;

            var filterText = '';
            $('#InputFilter').keyup(function () {
                filterText = this.value.toLowerCase();
                items.refresh();
            });
            items.filter = function (item) {
                return !filterText || (item.Article.toLowerCase().indexOf(filterText) > -1);
            }
            items.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsItems();
            });
            items.currentChanged.addHandler(function (sender, args) {
                updateDetails();
            });

            // Flex Grid
            itemGrid.itemsSource = items;
            itemGrid.trackChanges = true;
        }

        // ==================
        // Item delete Button
        // ==================
        function cmdItemDeleteButton_OnClick() {
            $('#deleteItemConfirm').modal({
                show: true,
                backdrop: 'static'
            });
            
            document.getElementById('cmdConfirmDeleteItem').innerHTML = "<i class='fa fa-trash'></i> Delete";
            $('#cmdConfirmDeleteItem').prop('disabled', false);
            $('#cmdConfirmDeleteCloseButton').prop('disabled', false);
        }
        // Item Confirm Delete Button
        function cmdItemConfirmDeleteButton_OnClick() {
            document.getElementById('cmdConfirmDeleteItem').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Deleting...";
            $('#cmdConfirmDeleteItem').prop('disabled', true);
            $('#cmdConfirmDeleteCloseButton').prop('disabled', true);

            items.editItem(items.currentItem);
            var id = items.currentEditItem.Id;
            $.ajax({
                url: '/api/deleteArticle/' + id,
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        document.getElementById('cmdConfirmDeleteItem').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Deleting...";
                        $('#cmdConfirmDeleteItem').prop('disabled', true);
                        $('#cmdConfirmDeleteCloseButton').prop('disabled', true);
                        toastr.success("Successfully Deleted");
                        $('#deleteItemConfirm').modal('hide');
                        refreshItemFlexgrid();
                    },
                    404: function () {
                        document.getElementById('cmdConfirmDeleteItem').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $('#cmdConfirmDeleteItem').prop('disabled', false);
                        $('#cmdConfirmDeleteCloseButton').prop('disabled', false);
                        toastr.error("Delete request not found");
                        $('#deleteItemConfirm').modal('hide');
                    },
                    400: function () {
                        $('#cmdConfirmDeleteItem').prop('disabled', false);
                        document.getElementById('cmdConfirmDeleteItem').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $('#cmdConfirmDeleteCloseButton').prop('disabled', false);
                        toastr.error("Cannot delete record");
                        $('#deleteItemConfirm').modal('hide');
                    }
                }
            });
        }

        // ===================
        // FlexGrid Selection
        // ===================
        function updateDetails() {
            var item = items.currentItem;
            document.getElementById('createdBy').innerHTML = item.CreatedBy;
            document.getElementById('createdDate').innerHTML = item.CreatedDateTime;
            document.getElementById('updatedBy').innerHTML = item.UpdatedBy;
            document.getElementById('updatedDate').innerHTML = item.UpdatedDateTime;
        }

        // ===============================
        // Navigation Buttons for Supplier
        // ===============================
        function updateNavigateButtonsItems() {
            if (items.pageSize <= 0) {
                document.getElementById('naviagtionPageGrid').style.display = 'none';
                return;
            }
            document.getElementById('naviagtionPageGrid').style.display = 'block';
            if (items.pageIndex === 0) {
                btnFirstPageGrid.setAttribute('disabled', 'disabled');
                btnPreviousPageGrid.setAttribute('disabled', 'disabled');
                btnNextPageGrid.removeAttribute('disabled');
                btnLastPageGrid.removeAttribute('disabled');
            } else if (items.pageIndex === (items.pageCount - 1)) {
                btnFirstPageGrid.removeAttribute('disabled');
                btnPreviousPageGrid.removeAttribute('disabled');
                btnLastPageGrid.setAttribute('disabled', 'disabled');
                btnNextPageGrid.setAttribute('disabled', 'disabled');
            } else {
                btnFirstPageGrid.removeAttribute('disabled');
                btnPreviousPageGrid.removeAttribute('disabled');
                btnNextPageGrid.removeAttribute('disabled');
                btnLastPageGrid.removeAttribute('disabled');
            }
            btnCurrentPageGrid.innerHTML = (items.pageIndex + 1) + ' / ' + items.pageCount;
        }
        // ===========
        // Onload Page
        // ===========
        $(document).ready(function () {
            items = new wijmo.collections.CollectionView(getArtcileForItems());
            items.canFilter = true;
            items.pageSize = 15;

            var filterText = '';
            $('#InputFilter').keyup(function () {
                filterText = this.value.toLowerCase();
                items.refresh();
            });
            items.filter = function (item) {
                return !filterText || (item.Article.toLowerCase().indexOf(filterText) > -1);
            }
            items.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsItems();
            });
            items.currentChanged.addHandler(function (sender, args) {
                updateDetails();
            });

            // Flex Grid
            itemGrid = new wijmo.grid.FlexGrid('#ItemGrid');
            itemGrid.initialize({
                columns: [
                            {
                                "header": "Edit",
                                "binding": "EditId",
                                "width": 60,
                                "align": "center",
                                "allowResizing": false,
                                "allowSorting": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Delete",
                                "binding": "DeleteId",
                                "width": 70,
                                "align": "center",
                                "allowResizing": false,
                                "allowSorting": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Code",
                                "binding": "ArticleCode",
                                "allowSorting": true,
                                "width": "2*",
                            },
                            {
                                "header": "Manual Code",
                                "binding": "ManualArticleCode",
                                "allowSorting": true,
                                "width": "2*"
                            },
                            {
                                "header": "Item",
                                "binding": "Article",
                                "allowSorting": true,
                                "width": "5*"
                            },
                            {
                                "header": "Category",
                                "binding": "Category",
                                "allowSorting": true,
                                "width": "3*"
                            },
                            {
                                "header": "Quantity",
                                "binding": "",
                                "allowSorting": true,
                                "width": "1.5*"
                            },
                            {
                                "header": "Unit",
                                "binding": "Unit",
                                "allowSorting": true,
                                "width": "1.5*"
                            },
                            {
                                "header": "Inventory",
                                "binding": "IsInventory",
                                "allowSorting": true,
                                "width": "1.5*"
                            },
                            {
                                "header": "Lock",
                                "binding": "IsLocked",
                                "allowSorting": true,
                                "width": "1*"
                            }
                ],
                autoGenerateColumns: false,
                itemsSource: items,
                isReadOnly: true,
                frozenColumns: 2,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });
            itemGrid.trackChanges = true;

            //Navigation button
            btnFirstPageGrid = document.getElementById('btnMoveToFirstPageGrid');
            btnPreviousPageGrid = document.getElementById('btnMoveToPreviousPageGrid');
            btnNextPageGrid = document.getElementById('btnMoveToNextPageGrid');
            btnLastPageGrid = document.getElementById('btnMoveToLastPageGrid');
            btnCurrentPageGrid = document.getElementById('btnCurrentPageGrid');

            updateNavigateButtonsItems();

            btnFirstPageGrid.addEventListener('click', function () {
                items.moveToFirstPage();
                updateNavigateButtonsItems();
            });
            btnPreviousPageGrid.addEventListener('click', function () {
                items.moveToPreviousPage();
                updateNavigateButtonsItems();
            });
            btnNextPageGrid.addEventListener('click', function () {
                items.moveToNextPage();
                updateNavigateButtonsItems();
            });
            btnLastPageGrid.addEventListener('click', function () {
                items.moveToLastPage();
                updateNavigateButtonsItems();
            });
        });
    </script>
</body>
</html>