<!DOCTYPE html>
<html>
<head>
    <!-- Meta -->
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">

    <!-- Title of the Page -->
    <link rel="shortcut icon" href="~/Images/icon/easyfislogomini.ico">
    <title>Statement of Account</title>

    <!-- CSS StyleSheets-->
    @Styles.Render("~/Content/Software-css")
</head>
<body>
    <div id="o-wrapper" class="o-wrapper">
        <main class="o-content">
            @Html.Partial("_SoftwareHeader")
            <section class="content-header">
                <div class="container">
                    <h3>
                        Statement of Account
                    </h3>
                    <p>
                        <i class="fa fa-building-o fa-fw"></i> &nbsp; @ViewData["Company"] <br />
                        <i class="fa fa-home fa-fw"></i> &nbsp; <a href="#" onclick="getUserBranches()" style="color: white;">@ViewData["Branch"]</a>
                    </p>
                </div>
            </section>
            <section class="container">
                <div class="panel panel-default">
                    <div class="panel-heading">
                        <table style="width: 100%" border="0">
                            <tr>
                                <td style="width: 49.5%">
                                    <div class="input-group ">
                                        <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                        <input type="text" class="form-control " id="InputFilter" placeholder="Search...">
                                    </div>
                                </td>
                                <td style="width: 1%"></td>
                                <td style="width: 24%">
                                    <div class="input-group">
                                        <span class="input-group-addon"><b><i class="fa fa-table"></i></b></span>
                                        <div class="comboBox-wide" id="cboStatementOfAccountReportShowNumberOfRows"></div>
                                    </div>
                                </td>
                                <td style="width: 1%"></td>
                                <td style="width: 24.5%" align="right">
                                    <button onclick="statementOfAccountReportCSVOnclick()" id="btnCSV" class="btn btn-success "><i class="fa fa-file-excel-o" aria-hidden="true"></i> CSV</button>
                                    <button onclick="statementOfAccountReportPDFOnclick()" id="btnPrintPDF" class="btn btn-primary "><i class="fa fa-print"></i> Print</button>
                                    <a href="/Software/AccountsReceivable" class="btn btn-danger "><i class="fa fa-close"></i> Close</a>
                                </td>
                            </tr>
                        </table>
                    </div>
                    <div class="panel-heading">
                        <table style="width: 100%" border="0">
                            <tr>
                                <td style="width: 24%">
                                    <div class="input-group ">
                                        <span class="input-group-addon"><b>Date as of</b></span>
                                        <div class="comboBox-wide" id="cboStatementOfAccountReportDateAsOf" style="font-size: 12.5px;"></div>
                                    </div>
                                </td>
                                <td style="width: 1%"></td>
                                <td style="width: 24%" align="right">
                                    <div class="input-group ">
                                        <span class="input-group-addon"><b>Company</b></span>
                                        <div class="comboBox-wide" id="cboStatementOfAccountReportComapny" style="font-size: 12.5px;"></div>
                                    </div>
                                </td>
                                <td style="width: 1%"></td>
                                <td style="width: 24%">
                                    <div class="input-group ">
                                        <span class="input-group-addon"><b>Branch</b></span>
                                        <div class="comboBox-wide" id="cboStatementOfAccountReportBranch" style="font-size: 12.5px;"></div>
                                    </div>
                                </td>
                                <td style="width: 1%"></td>
                                <td style="width: 24%">
                                    <div class="input-group ">
                                        <span class="input-group-addon"><b>Customer</b></span>
                                        <div class="comboBox-wide" id="cboARStatementOfAccountCustomer" style="font-size: 12.5px;"></div>
                                    </div>
                                </td>
                            </tr>
                        </table>
                    </div>
                    <div class="panel-body">
                        <div id="statementOfAccountGrid" style="font-size: 12.5px;"></div>
                    </div>
                    <div class="panel-footer">
                        <div class="row">
                            <div class="btn-group col-md-7" id="naviagtionPageGrid">
                                <button type="button" class="btn btn-default border-custom" id="btnMoveToFirstPageGrid">
                                    <span class="glyphicon glyphicon-fast-backward"></span>
                                </button>
                                <button type="button" class="btn btn-default border-custom" id="btnMoveToPreviousPageGrid">
                                    <span class="glyphicon glyphicon-step-backward"></span>
                                </button>
                                <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnCurrentPageGrid"></button>
                                <button type="button" class="btn btn-default border-custom" id="btnMoveToNextPageGrid">
                                    <span class="glyphicon glyphicon-step-forward"></span>
                                </button>
                                <button type="button" class="btn btn-default border-custom" id="btnMoveToLastPageGrid">
                                    <span class="glyphicon glyphicon-fast-forward"></span>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="panel panel-default">
                    <div class="panel-body">
                        <div class="row">
                            <div class="col-md-6"></div>
                            <div class="col-md-6">
                                <dl class="dl-horizontal dl-custom">
                                    <dt>
                                        <b>Total Balance</b>
                                    </dt>
                                    <dd>
                                        <input type="text" class="form-control numberField" id="totalBalance" placeholder="0.00" disabled />
                                    </dd>
                                    <dt>
                                        <b>Total Current Amount</b>
                                    </dt>
                                    <dd>
                                        <input type="text" class="form-control numberField" id="totalCurrentAmount" placeholder="0.00" disabled />
                                    </dd>
                                    <dt>
                                        <b>Total Amount in 30 Days</b>
                                    </dt>
                                    <dd>
                                        <input type="text" class="form-control numberField" id="totalAmount30Days" placeholder="0.00" disabled />
                                    </dd>
                                    <dt>
                                        <b>Total Amount in 60 Days</b>
                                    </dt>
                                    <dd>
                                        <input type="text" class="form-control numberField" id="totalAmount60Days" placeholder="0.00" disabled />
                                    </dd>
                                    <dt>
                                        <b>Total Amount in 90 Days</b>
                                    </dt>
                                    <dd>
                                        <input type="text" class="form-control numberField" id="totalAmount90Days" placeholder="0.00" disabled />
                                    </dd>
                                    <dt>
                                        <b>Total Amount Over 120 Days</b>
                                    </dt>
                                    <dd>
                                        <input type="text" class="form-control numberField" id="totalAmountOver120Days" placeholder="0.00" disabled />
                                    </dd>
                                </dl>
                            </div>
                        </div>
                    </div>
                </div>
            </section>
            @Html.Partial("_SoftwareFooter")
        </main>
    </div>
    <div id="c-mask" class="c-mask"></div>

    @Scripts.Render("~/Scripts/Software-js")
    <script type="text/javascript">
        // ================
        // Global Variables
        // ================
        var cboStatementOfAccountReportDateAsOf = new wijmo.input.InputDate('#cboStatementOfAccountReportDateAsOf');
        var isDateAsOfSelected = true;
        var cboStatementOfAccountReportComapny = new wijmo.input.ComboBox('#cboStatementOfAccountReportComapny');
        var cboStatementOfAccountReportBranch = new wijmo.input.ComboBox('#cboStatementOfAccountReportBranch');
        var cboARStatementOfAccountCustomer = new wijmo.input.ComboBox('#cboARStatementOfAccountCustomer');
        var statementOfAccountCollections;
        var statementOfAccountGrid;
        var accountHasData = false;
        var cboStatementOfAccountReportShowNumberOfRows = new wijmo.input.ComboBox('#cboStatementOfAccountReportShowNumberOfRows');
        var btnFirstPageGrid = document.getElementById('btnMoveToFirstPageGrid');
        var btnPreviousPageGrid = document.getElementById('btnMoveToPreviousPageGrid');
        var btnNextPageGrid = document.getElementById('btnMoveToNextPageGrid');
        var btnLastPageGrid = document.getElementById('btnMoveToLastPageGrid');
        var btnCurrentPageGrid = document.getElementById('btnCurrentPageGrid');
        var currentPageIndex = 0;

        // ====================
        // Get Parameter Values
        // ====================
        function getParam(name) {
            name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");

            var regexS = "[\\?&]" + name + "=([^&#]*)";
            var regex = new RegExp(regexS);

            var results = regex.exec(window.location.href);
            if (results == null) {
                return "";
            } else {
                return results[1];
            }
        }

        // ==============
        // StatementOfAccount Filter Date
        // ==============
        function createCboStatementOfAccountAllDateFilters() {
            NProgress.start();
            cboStatementOfAccountReportDateAsOf.dispose();
            cboStatementOfAccountReportDateAsOf = new wijmo.input.InputDate('#cboStatementOfAccountReportDateAsOf', {
                format: 'MM-dd-yyyy',
                value: new Date(getParam("DateAsOf")),
                onValueChanged: function () {
                    if (isDateAsOfSelected) {
                        NProgress.start();
                        refreshStatementOfAccountFlexGrid();
                    } else {
                        isDateAsOfSelected = false;
                    }
                }
            });

            createCboStatementOfAccountAllCompanyFilter();
        }

        var isCompanySelected = false;

        // ======================
        // StatementOfAccount All Company Filters
        // ======================
        function createCboStatementOfAccountAllCompanyFilter() {
            var companyObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/company/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (companyResults) {
                    if (companyResults.length > 0) {
                        for (i = 0; i < companyResults.length; i++) {
                            companyObservableArray.push({
                                Id: companyResults[i]["Id"],
                                Company: companyResults[i]["Company"],
                                Address: companyResults[i]["Address"],
                                ContactNumber: companyResults[i]["ContactNumber"],
                                TaxNumber: companyResults[i]["TaxNumber"],
                            });
                        }
                    }

                    var disabled = true;
                    if (companyResults.length > 0) {
                        disabled = false;
                    } else {
                        $("#btnCSV").prop("disabled", true);
                        $("#btnPrintPDF").prop("disabled", true);
                    }

                    cboStatementOfAccountReportComapny.dispose();
                    cboStatementOfAccountReportComapny = new wijmo.input.ComboBox('#cboStatementOfAccountReportComapny', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: companyObservableArray,
                        displayMemberPath: "Company",
                        selectedValuePath: "Id",
                        selectedValue: getParam("CompanyId"),
                        onSelectedIndexChanged: function () {
                            NProgress.start();
                            if (accountHasData) {
                                $("#btnCSV").prop("disabled", false);
                                $("#btnPrintPDF").prop("disabled", false);
                            }
                            isCompanySelected = true;
                            createCboStatementOfAccountBranchFilter();
                        }
                    });

                    createCboStatementOfAccountBranchFilter();
                }
            });
        }

        // ================
        // StatementOfAccount Branch Filter
        // ================
        function createCboStatementOfAccountBranchFilter() {
            var branchObservableArray = new wijmo.collections.ObservableArray();
            if (cboStatementOfAccountReportComapny.selectedValue != null) {
                var companyId = cboStatementOfAccountReportComapny.selectedValue;

                $.ajax({
                    url: '/api/branch/byCompanyId/list/locked/' + companyId,
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    success: function (branchResults) {
                        if (branchResults.length > 0) {
                            for (i = 0; i < branchResults.length; i++) {
                                branchObservableArray.push({
                                    Id: branchResults[i]["Id"],
                                    CompanyId: branchResults[i]["CompanyId"],
                                    Branch: branchResults[i]["Branch"],
                                    Address: branchResults[i]["Address"],
                                    ContactNumber: branchResults[i]["ContactNumber"],
                                    TaxNumber: branchResults[i]["TaxNumber"]
                                });
                            }
                        }

                        var disabled = true;
                        if (branchResults.length > 0) {
                            disabled = false;
                        } else {
                            $("#btnCSV").prop("disabled", true);
                            $("#btnPrintPDF").prop("disabled", true);
                        }

                        cboStatementOfAccountReportBranch.dispose();
                        cboStatementOfAccountReportBranch = new wijmo.input.ComboBox('#cboStatementOfAccountReportBranch', {
                            disabled: disabled,
                            isEditable: false,
                            itemsSource: branchObservableArray,
                            displayMemberPath: "Branch",
                            selectedValuePath: "Id",
                            selectedValue: getParam("BranchId"),
                            onSelectedIndexChanged: function () {
                                NProgress.start();
                                refreshStatementOfAccountFlexGrid();
                            }
                        });

                        if (!isCompanySelected) {
                            createCboStatementOfAccountAccountFilter();
                        } else {
                            refreshStatementOfAccountFlexGrid();
                        }
                    }
                });
            } else {
                cboStatementOfAccountReportBranch.dispose();
                cboStatementOfAccountReportBranch = new wijmo.input.ComboBox('#cboStatementOfAccountReportBranch', {
                    disabled: true,
                    isEditable: false,
                    itemsSource: branchObservableArray
                });

                refreshStatementOfAccountFlexGrid();
            }
        }

        // =================================
        // StatementOfAccount Account Filter
        // =================================
        function createCboStatementOfAccountAccountFilter() {
            var customersObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listArticleByArticleTypeId/2',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (customerListResults) {
                    if (customerListResults.length > 0) {
                        for (i = 0; i < customerListResults.length; i++) {
                            customersObservableArray.push({
                                Id: customerListResults[i]["Id"],
                                Customer: customerListResults[i]["Article"]
                            });
                        }
                    }

                    var disabled = true;
                    if (customerListResults.length > 0) {
                        disabled = false;

                    } else {

                    }

                    cboARStatementOfAccountCustomer.dispose();
                    cboARStatementOfAccountCustomer = new wijmo.input.ComboBox('#cboARStatementOfAccountCustomer', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: customersObservableArray,
                        displayMemberPath: "Customer",
                        selectedValuePath: "Id",
                        selectedValue: getParam("CustomerId"),
                        onSelectedIndexChanged: function () {
                            NProgress.start();
                            refreshStatementOfAccountFlexGrid();
                        }
                    });

                    createCboShowRows();
                }
            });
        }

        // ===============
        // Show Rows Table
        // ===============
        function createCboShowRows() {
            var rowsObservableArray = new wijmo.collections.ObservableArray();

            for (var i = 0; i <= 4; i++) {
                var rows = 0;
                var rowsString = "";

                if (i == 0) {
                    rows = 15;
                    rowsString = "Show 15 Rows";
                } else if (i == 1) {
                    rows = 50;
                    rowsString = "Show 50 Rows";
                } else if (i == 2) {
                    rows = 100;
                    rowsString = "Show 100 Rows";
                } else if (i == 3) {
                    rows = 150;
                    rowsString = "Show 150 Rows";
                } else {
                    rows = 200;
                    rowsString = "Show 200 Rows";
                }

                rowsObservableArray.push({
                    rowNumber: rows,
                    rowString: rowsString
                });
            }

            cboStatementOfAccountReportShowNumberOfRows.dispose();
            cboStatementOfAccountReportShowNumberOfRows = new wijmo.input.ComboBox('#cboStatementOfAccountReportShowNumberOfRows', {
                isEditable: false,
                itemsSource: rowsObservableArray,
                displayMemberPath: "rowString",
                selectedValuePath: "rowNumber",
                selectedValue: 50,
                onSelectedIndexChanged: function () {
                    NProgress.start();

                    setTimeout(function () {
                        var numberOfRows = cboStatementOfAccountReportShowNumberOfRows.selectedValue;
                        statementOfAccountCollections.pageSize = parseInt(numberOfRows);
                        statementOfAccountCollections.refresh();
                        statementOfAccountGrid.refresh();

                        NProgress.done();
                    }, 300);
                }
            });

            createAccounstReceivableFlexGrid();
        }

        // ===================
        // Statement Of Account
        // ===================
        function getStatementOfAccount() {
            var statementOfAccountObservableArray = new wijmo.collections.ObservableArray;
            if (cboStatementOfAccountReportComapny.selectedValue != null) {
                if (cboStatementOfAccountReportBranch.selectedValue != null) {
                    if (cboARStatementOfAccountCustomer.selectedValue != null) {

                        var dateAsOf = cboStatementOfAccountReportDateAsOf.value.toLocaleDateString().replace(/\//g, '-');
                        var companyId = cboStatementOfAccountReportComapny.selectedValue;
                        var branchId = cboStatementOfAccountReportBranch.selectedValue;
                        var accountId = cboARStatementOfAccountCustomer.selectedValue;

                        $.ajax({
                            url: '/api/statementOfAccount/list/' + dateAsOf + "/" + companyId + "/" + branchId + "/" + accountId,
                            cache: false,
                            type: 'GET',
                            contentType: 'application/json; charset=utf-8',
                            success: function (statementOfAccountResults) {
                                var totalBalance = 0;
                                var totalCurrentAmount = 0;
                                var totalAge30Amount = 0;
                                var totalAge60Amount = 0;
                                var totalAge90Amount = 0;
                                var totalAge120Amount = 0;

                                if (statementOfAccountResults.length > 0) {
                                    for (i = 0; i < statementOfAccountResults.length; i++) {
                                        var docLink = "/Software/SalesDetail?id=" + statementOfAccountResults[i]["Id"];

                                        totalBalance = totalBalance + statementOfAccountResults[i]["BalanceAmount"];
                                        totalCurrentAmount = totalCurrentAmount + statementOfAccountResults[i]["CurrentAmount"];
                                        totalAge30Amount = totalAge30Amount + statementOfAccountResults[i]["Age30Amount"];
                                        totalAge60Amount = totalAge60Amount + statementOfAccountResults[i]["Age60Amount"];
                                        totalAge90Amount = totalAge90Amount + statementOfAccountResults[i]["Age90Amount"];
                                        totalAge120Amount = totalAge120Amount + statementOfAccountResults[i]["Age120Amount"];

                                        var SIDateResult = new Date(statementOfAccountResults[i]["SIDate"])
                                        var SIDate = ('0' + (SIDateResult.getMonth() + 1)).slice(-2) + '-' + ('0' + SIDateResult.getDate()).slice(-2) + '-' + SIDateResult.getFullYear();

                                        var DueDateResult = new Date(statementOfAccountResults[i]["DueDate"])
                                        var DueDate = ('0' + (DueDateResult.getMonth() + 1)).slice(-2) + '-' + ('0' + DueDateResult.getDate()).slice(-2) + '-' + DueDateResult.getFullYear();

                                        statementOfAccountObservableArray.push({
                                            Id: statementOfAccountResults[i]["Id"],
                                            Branch: statementOfAccountResults[i]["Branch"],
                                            AccountId: statementOfAccountResults[i]["AccountId"],
                                            AccountCode: statementOfAccountResults[i]["AccountCode"],
                                            Account: statementOfAccountResults[i]["Account"],
                                            CustomerId: statementOfAccountResults[i]["CustomerId"],
                                            Customer: statementOfAccountResults[i]["Customer"],
                                            SINumber: "<a href='" + docLink + "' style='font-size: 10px;' class='btn btn-primary btn-xs btn-block'>" + statementOfAccountResults[i]["SINumber"] + "</a>",
                                            SINumberValue: statementOfAccountResults[i]["SINumber"],
                                            SINumberCSVValue: "SI-" + statementOfAccountResults[i]["SINumber"],
                                            SIDate: SIDate,
                                            DocumentReference: statementOfAccountResults[i]["DocumentReference"],
                                            BalanceAmount: statementOfAccountResults[i]["BalanceAmount"],
                                            BalanceAmountDisplay: parseFloat(statementOfAccountResults[i]["BalanceAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                            DueDate: DueDate,
                                            NumberOfDaysFromDueDate: statementOfAccountResults[i]["NumberOfDaysFromDueDate"],
                                            CurrentAmount: statementOfAccountResults[i]["CurrentAmount"],
                                            CurrentAmountDisplay: parseFloat(statementOfAccountResults[i]["CurrentAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                            Age30Amount: statementOfAccountResults[i]["Age30Amount"],
                                            Age30AmountDisplay: parseFloat(statementOfAccountResults[i]["Age30Amount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                            Age60Amount: statementOfAccountResults[i]["Age60Amount"],
                                            Age60AmountDisplay: parseFloat(statementOfAccountResults[i]["Age60Amount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                            Age90Amount: statementOfAccountResults[i]["Age90Amount"],
                                            Age90AmountDisplay: parseFloat(statementOfAccountResults[i]["Age90Amount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                            Age120Amount: statementOfAccountResults[i]["Age120Amount"],
                                            Age120AmountDisplay: parseFloat(statementOfAccountResults[i]["Age120Amount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                        });
                                    }
                                }

                                document.getElementById("totalBalance").value = parseFloat(totalBalance).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                                document.getElementById("totalCurrentAmount").value = parseFloat(totalCurrentAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                                document.getElementById("totalAmount30Days").value = parseFloat(totalAge30Amount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                                document.getElementById("totalAmount60Days").value = parseFloat(totalAge60Amount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                                document.getElementById("totalAmount90Days").value = parseFloat(totalAge90Amount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                                document.getElementById("totalAmountOver120Days").value = parseFloat(totalAge120Amount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");

                                NProgress.done();
                            }
                        });
                    } else {
                        document.getElementById("totalBalance").value = parseFloat(0).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        document.getElementById("totalCurrentAmount").value = parseFloat(0).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        document.getElementById("totalAmount30Days").value = parseFloat(0).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        document.getElementById("totalAmount60Days").value = parseFloat(0).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        document.getElementById("totalAmount90Days").value = parseFloat(0).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        document.getElementById("totalAmountOver120Days").value = parseFloat(0).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");

                        NProgress.done();
                    }
                } else {
                    document.getElementById("totalBalance").value = parseFloat(0).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                    document.getElementById("totalCurrentAmount").value = parseFloat(0).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                    document.getElementById("totalAmount30Days").value = parseFloat(0).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                    document.getElementById("totalAmount60Days").value = parseFloat(0).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                    document.getElementById("totalAmount90Days").value = parseFloat(0).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                    document.getElementById("totalAmountOver120Days").value = parseFloat(0).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");

                    NProgress.done();
                }
            } else {
                document.getElementById("totalBalance").value = parseFloat(0).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                document.getElementById("totalCurrentAmount").value = parseFloat(0).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                document.getElementById("totalAmount30Days").value = parseFloat(0).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                document.getElementById("totalAmount60Days").value = parseFloat(0).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                document.getElementById("totalAmount90Days").value = parseFloat(0).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                document.getElementById("totalAmountOver120Days").value = parseFloat(0).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");

                NProgress.done();
            }

            return statementOfAccountObservableArray;
        }

        // =========================
        // Update Navigation Buttons
        // =========================
        function updateNavigateButtonsItems() {
            if (statementOfAccountCollections.pageSize <= 0) {
                document.getElementById('naviagtionPageGrid').style.display = 'none';
                return;
            }
            document.getElementById('naviagtionPageGrid').style.display = 'block';
            if (statementOfAccountCollections.pageIndex === 0) {
                btnFirstPageGrid.setAttribute('disabled', 'disabled');
                btnPreviousPageGrid.setAttribute('disabled', 'disabled');
                btnNextPageGrid.removeAttribute('disabled');
                btnLastPageGrid.removeAttribute('disabled');
            } else if (statementOfAccountCollections.pageIndex === (statementOfAccountCollections.pageCount - 1)) {
                btnFirstPageGrid.removeAttribute('disabled');
                btnPreviousPageGrid.removeAttribute('disabled');
                btnLastPageGrid.setAttribute('disabled', 'disabled');
                btnNextPageGrid.setAttribute('disabled', 'disabled');
            } else {
                btnFirstPageGrid.removeAttribute('disabled');
                btnPreviousPageGrid.removeAttribute('disabled');
                btnNextPageGrid.removeAttribute('disabled');
                btnLastPageGrid.removeAttribute('disabled');
            }
            btnCurrentPageGrid.innerHTML = (statementOfAccountCollections.pageIndex + 1) + ' / ' + statementOfAccountCollections.pageCount;
        }

        // =============================
        // Statement Of Account Flex Grid
        // =============================
        function createAccounstReceivableFlexGrid() {
            statementOfAccountCollections = new wijmo.collections.CollectionView(getStatementOfAccount());
            statementOfAccountCollections.canFilter = true;
            statementOfAccountCollections.pageSize = cboStatementOfAccountReportShowNumberOfRows.selectedValue;

            var filterText = '';
            $('#InputFilter').keyup(function () {
                filterText = this.value.toLowerCase();
                statementOfAccountCollections.refresh();

                if (statementOfAccountCollections.items.length > 0) {
                    var totalBalance = 0;
                    var totalCurrentAmount = 0;
                    var totalAge30Amount = 0;
                    var totalAge60Amount = 0;
                    var totalAge90Amount = 0;
                    var totalAge120Amount = 0;

                    for (var i = 0; i < statementOfAccountCollections.items.length; i++) {
                        totalBalance = totalBalance + statementOfAccountCollections.items[i]["BalanceAmount"];
                        totalCurrentAmount = totalCurrentAmount + statementOfAccountCollections.items[i]["CurrentAmount"];
                        totalAge30Amount = totalAge30Amount + statementOfAccountCollections.items[i]["Age30Amount"];
                        totalAge60Amount = totalAge60Amount + statementOfAccountCollections.items[i]["Age60Amount"];
                        totalAge90Amount = totalAge90Amount + statementOfAccountCollections.items[i]["Age90Amount"];
                        totalAge120Amount = totalAge120Amount + statementOfAccountCollections.items[i]["Age120Amount"];
                    }

                    document.getElementById("totalBalance").value = parseFloat(totalBalance).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                    document.getElementById("totalCurrentAmount").value = parseFloat(totalCurrentAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                    document.getElementById("totalAmount30Days").value = parseFloat(totalAge30Amount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                    document.getElementById("totalAmount60Days").value = parseFloat(totalAge60Amount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                    document.getElementById("totalAmount90Days").value = parseFloat(totalAge90Amount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                    document.getElementById("totalAmountOver120Days").value = parseFloat(totalAge120Amount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                } else {
                    document.getElementById("totalBalance").value = parseFloat(0).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                    document.getElementById("totalCurrentAmount").value = parseFloat(0).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                    document.getElementById("totalAmount30Days").value = parseFloat(0).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                    document.getElementById("totalAmount60Days").value = parseFloat(0).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                    document.getElementById("totalAmount90Days").value = parseFloat(0).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                    document.getElementById("totalAmountOver120Days").value = parseFloat(0).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                }
            });

            statementOfAccountCollections.filter = function (item) {
                return !filterText || (item.Account.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Customer.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.SINumberValue.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.DocumentReference.toLowerCase().indexOf(filterText) > -1);
            }

            statementOfAccountCollections.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsItems();
            });

            statementOfAccountGrid = new wijmo.grid.FlexGrid('#statementOfAccountGrid');
            statementOfAccountGrid.initialize({
                columns: [
                    {
                        "header": "SI No.",
                        "binding": "SINumber",
                        "allowSorting": true,
                        "width": 80,
                        "isContentHtml": true
                    },
                    {
                        "header": "Account",
                        "binding": "Account",
                        "allowSorting": true,
                        "width": "1.3*",

                    },
                    {
                        "header": "SI Date",
                        "binding": "SIDate",
                        "allowSorting": true,
                        "width": "0.8*"
                    },
                    {
                        "header": "Doc. Ref.",
                        "binding": "DocumentReference",
                        "allowSorting": true,
                        "width": "1*",
                    },
                    {
                        "header": "Due Date",
                        "binding": "DueDate",
                        "allowSorting": true,
                        "width": "0.8*"
                    },
                    {
                        "header": "Balance",
                        "binding": "BalanceAmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": "1*"
                    },
                    {
                        "header": "Current",
                        "binding": "CurrentAmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": "1*"
                    },
                    {
                        "header": "30 Days",
                        "binding": "Age30AmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": "1*"
                    },
                    {
                        "header": "60 Days",
                        "binding": "Age60AmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": "1*"
                    },
                    {
                        "header": "90 Days",
                        "binding": "Age90AmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": "1*"
                    },
                    {
                        "header": "Over 120 Days",
                        "binding": "Age120AmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": "1*"
                    }
                ],
                autoGenerateColumns: false,
                itemsSource: statementOfAccountCollections,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            statementOfAccountGrid.trackChanges = true;

            updateNavigateButtonsItems();

            btnFirstPageGrid.addEventListener('click', function () {
                statementOfAccountCollections.moveToFirstPage();
                currentPageIndex = statementOfAccountCollections.pageIndex + 1;
                updateNavigateButtonsItems();
            });

            btnPreviousPageGrid.addEventListener('click', function () {
                statementOfAccountCollections.moveToPreviousPage();
                currentPageIndex = statementOfAccountCollections.pageIndex + 1;
                updateNavigateButtonsItems();
            });

            btnNextPageGrid.addEventListener('click', function () {
                statementOfAccountCollections.moveToNextPage();
                currentPageIndex = statementOfAccountCollections.pageIndex + 1;
                updateNavigateButtonsItems();
            });

            btnLastPageGrid.addEventListener('click', function () {
                statementOfAccountCollections.moveToLastPage();
                currentPageIndex = statementOfAccountCollections.pageIndex + 1;
                updateNavigateButtonsItems();
            });
        }

        // =====================================
        // Refresh Statement Of Account Flex Grid
        // =====================================
        function refreshStatementOfAccountFlexGrid() {
            statementOfAccountCollections = new wijmo.collections.CollectionView(getStatementOfAccount());
            statementOfAccountCollections.canFilter = true;
            statementOfAccountCollections.pageSize = cboStatementOfAccountReportShowNumberOfRows.selectedValue;

            var filterText = '';
            $('#InputFilter').keyup(function () {
                filterText = this.value.toLowerCase();
                statementOfAccountCollections.refresh();

                if (statementOfAccountCollections.items.length > 0) {
                    var totalBalance = 0;
                    var totalCurrentAmount = 0;
                    var totalAge30Amount = 0;
                    var totalAge60Amount = 0;
                    var totalAge90Amount = 0;
                    var totalAge120Amount = 0;

                    for (var i = 0; i < statementOfAccountCollections.items.length; i++) {
                        totalBalance = totalBalance + statementOfAccountCollections.items[i]["BalanceAmount"];
                        totalCurrentAmount = totalCurrentAmount + statementOfAccountCollections.items[i]["CurrentAmount"];
                        totalAge30Amount = totalAge30Amount + statementOfAccountCollections.items[i]["Age30Amount"];
                        totalAge60Amount = totalAge60Amount + statementOfAccountCollections.items[i]["Age60Amount"];
                        totalAge90Amount = totalAge90Amount + statementOfAccountCollections.items[i]["Age90Amount"];
                        totalAge120Amount = totalAge120Amount + statementOfAccountCollections.items[i]["Age120Amount"];
                    }

                    document.getElementById("totalBalance").value = parseFloat(totalBalance).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                    document.getElementById("totalCurrentAmount").value = parseFloat(totalCurrentAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                    document.getElementById("totalAmount30Days").value = parseFloat(totalAge30Amount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                    document.getElementById("totalAmount60Days").value = parseFloat(totalAge60Amount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                    document.getElementById("totalAmount90Days").value = parseFloat(totalAge90Amount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                    document.getElementById("totalAmountOver120Days").value = parseFloat(totalAge120Amount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                } else {
                    document.getElementById("totalBalance").value = parseFloat(0).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                    document.getElementById("totalCurrentAmount").value = parseFloat(0).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                    document.getElementById("totalAmount30Days").value = parseFloat(0).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                    document.getElementById("totalAmount60Days").value = parseFloat(0).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                    document.getElementById("totalAmount90Days").value = parseFloat(0).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                    document.getElementById("totalAmountOver120Days").value = parseFloat(0).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                }
            });

            statementOfAccountCollections.filter = function (item) {
                return !filterText || (item.Account.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Customer.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.SINumberValue.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.DocumentReference.toLowerCase().indexOf(filterText) > -1);
            }

            statementOfAccountCollections.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsItems();
            });

            statementOfAccountGrid.itemsSource = statementOfAccountCollections;
            statementOfAccountGrid.trackChanges = true;
        }

        // ============
        // Download CSV
        // ============
        function statementOfAccountReportCSVOnclick() {
            var CSV = '';
            var accountReceivables = [];
            var fileName = 'StatementOfAccountReport.CSV';

            statementOfAccountCollections.moveToFirstPage();

            for (var p = 1; p <= statementOfAccountCollections.pageCount; p++) {
                for (i = 0; i < statementOfAccountCollections.items.length; i++) {
                    accountReceivables.push({
                        Branch: statementOfAccountCollections.items[i].Branch,
                        SINumber: statementOfAccountCollections.items[i].SINumberCSVValue,
                        Account: statementOfAccountCollections.items[i].Account,
                        Customer: statementOfAccountCollections.items[i].Customer,
                        SIDate: statementOfAccountCollections.items[i].SIDate,
                        DocumentReference: statementOfAccountCollections.items[i].DocumentReference,
                        DueDate: statementOfAccountCollections.items[i].DueDate,
                        BalanceAmount: statementOfAccountCollections.items[i].BalanceAmount,
                        CurrentAmount: statementOfAccountCollections.items[i].CurrentAmount,
                        Age30Amount: statementOfAccountCollections.items[i].Age30Amount,
                        Age60Amount: statementOfAccountCollections.items[i].Age60Amount,
                        Age90Amount: statementOfAccountCollections.items[i].Age90Amount,
                        Age120Amount: statementOfAccountCollections.items[i].Age120Amount
                    });
                }

                statementOfAccountCollections.moveToNextPage();
                if (p == statementOfAccountCollections.pageCount) {
                    statementOfAccountCollections.moveToPage(currentPageIndex - 1);
                }
            }

            var Headers = [];
            Headers.push({
                Branch: "Branch",
                SINumber: "SI Number",
                Account: "Account",
                Customer: "Customer",
                SIDate: "SI Date",
                DocumentReference: "Doc Reference",
                DueDate: "Due Date",
                BalanceAmount: "Balance",
                CurrentAmount: "Current",
                Age30Amount: "30 Days",
                Age60Amount: "60 Days",
                Age90Amount: "90 Days",
                Age120Amount: "120 Days"
            });

            var header = '';
            for (var b in Headers[0]) {
                header += '"' + Headers[0][b] + '",';
            }

            CSV = header + '\r\n';
            for (var i = 0; i < accountReceivables.length; i++) {
                var row = '';
                for (var a in accountReceivables[i]) {
                    row += '"' + accountReceivables[i][a] + '",';
                }

                row.slice(0, row.length - 1);
                CSV += row + '\r\n';
            }

            if (CSV == '') {
                toastr.error("No data.");
            } else {
                var link = document.createElement("a");
                if (link.download !== undefined) {
                    var blob = new Blob([CSV], { type: 'text/csv;charset=utf-8;' });
                    var url = URL.createObjectURL(blob);
                    link.setAttribute("href", url);
                    link.setAttribute("download", fileName);
                    link.style = "visibility:hidden";
                }

                if (navigator.msSaveBlob) {
                    link.addEventListener("click", function (event) {
                        var blob = new Blob([CSV], {
                            "type": "text/csv;charset=utf-8;"
                        });
                        navigator.msSaveBlob(blob, fileName);
                    }, false);
                }

                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
                toastr.success("Dowload successful.");
            }
        }

        // =========
        // Print PDF
        // =========
        function statementOfAccountReportPDFOnclick() {
            if (cboStatementOfAccountReportComapny.selectedValue != null) {
                if (cboStatementOfAccountReportBranch.selectedValue != null) {
                    if (cboARStatementOfAccountCustomer.selectedValue != null) {
                        var dateAsOf = cboStatementOfAccountReportDateAsOf.value.toLocaleDateString().replace(/\//g, '-');
                        var companyId = cboStatementOfAccountReportComapny.selectedValue;
                        var branchId = cboStatementOfAccountReportBranch.selectedValue;
                        var customerId = cboARStatementOfAccountCustomer.selectedValue;

                        window.location.href = '/RepStatementOfAccount/StatementOfAccount?DateAsOf=' + dateAsOf + '&CompanyId=' + companyId + '&BranchId=' + branchId + '&CustomerId=' + customerId;
                    } else {
                        toastr.error("Lacking Information");
                    }
                } else {
                    toastr.error("Lacking Information");
                }
            } else {
                toastr.error("Lacking Information");
            }
        }

        // ============
        // On load Page
        // ============
        $(document).ready(function () {
            createCboStatementOfAccountAllDateFilters();
        });
    </script>
    <script type="text/javascript">
        var cboUserBranches = new wijmo.input.ComboBox('#cboUserBranches');
        function getUserBranches() {
            $("#loadingUserBranches").show();
            document.getElementById("loadingUserBranches").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#userBranchContent").hide();

            $('#userBranchesModal').modal({ show: true, backdrop: 'static' });

            document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
            $("#updateUserBranch").prop("disabled", false);
            $("#closeUserBranch").prop("disabled", false);

            var userBranchesObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/userBranch/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (userBranchesResults) {
                    if (userBranchesResults.length > 0) {
                        for (i = 0; i < userBranchesResults.length; i++) {
                            userBranchesObservableArray.push({
                                BranchId: userBranchesResults[i]["BranchId"],
                                Branch: userBranchesResults[i]["Branch"]
                            });
                        }
                    }

                    var currentBranch = "@ViewData["BranchId"]";
                    cboUserBranches.dispose();
                    cboUserBranches = new wijmo.input.ComboBox('#cboUserBranches', {
                        isEditable: false,
                        placeholder: "Select Branches",
                        itemsSource: userBranchesObservableArray,
                        displayMemberPath: "Branch",
                        selectedValuePath: "BranchId",
                        selectedValue: currentBranch
                    });

                    setTimeout(function () {
                        $("#loadingUserBranches").hide();
                        $("#userBranchContent").show();
                    }, 500)
                }
            });
        }

        function updateUserBranchOnclick() {
            document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Updating";
            $("#updateUserBranch").prop("disabled", true);
            $("#closeUserBranch").prop("disabled", true);

            var userBranchObject = new Object();
            userBranchObject.BranchId = cboUserBranches.selectedValue;
            var userBranchData = JSON.stringify(userBranchObject);

            $.ajax({
                type: "PUT",
                url: '/api/userBranch/update',
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: userBranchData,
                statusCode: {
                    200: function () {
                        toastr.success("Update Successful");
                        window.setTimeout(function () {
                            location.reload()
                        }, 1000);
                    },
                    404: function () {
                        toastr.error("Not Found");
                        document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
                        $("#updateUserBranch").prop("disabled", false);
                        $("#closeUserBranch").prop("disabled", false);
                    },
                    500: function () {
                        toastr.error("Bad Request");
                        document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
                        $("#updateUserBranch").prop("disabled", false);
                        $("#closeUserBranch").prop("disabled", false);
                    }
                }
            });
        }
    </script>
    <script type="text/javascript">
        var slideLeft = new Menu({
            wrapper: '#o-wrapper',
            type: 'slide-left',
            menuOpenerClass: '.c-button',
            maskId: '#c-mask'
        });

        var slideLeftBtn = document.querySelector('#c-button--slide-left');

        slideLeftBtn.addEventListener('click', function (e) {
            e.preventDefault;
            slideLeft.open();
        });
    </script>
</body>
</html>