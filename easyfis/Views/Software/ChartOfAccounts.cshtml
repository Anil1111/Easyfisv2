@model easyfis.Entities.MstUserForm
@{
    // =====================
    // User Rights Variables
    // =====================
    var canAdd = Model.CanAdd;
    var canEdit = Model.CanEdit;
    var canDelete = Model.CanDelete;
    var canLock = Model.CanLock;
    var canUnlock = Model.CanUnlock;
    var canPrint = Model.CanPrint;
}
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">
    <link rel="shortcut icon" href="~/Images/icon/easyfislogomini.ico">
    <title>Chart of Accounts</title>

    @Styles.Render("~/Content/Software-css")
</head>
<body>
    <div id="o-wrapper" class="o-wrapper">
        <main class="o-content">
            @Html.Partial("_SoftwareHeader")

            <section class="content-header">
                <div class="container">
                    <h3>
                        Chart of Accounts
                    </h3>
                    <p>
                        <i class="fa fa-building-o fa-fw"></i> &nbsp; @ViewData["Company"] <br />
                        <i class="fa fa-home fa-fw"></i> &nbsp; <a href="#" onclick="getUserBranches()" style="color: white;">@ViewData["Branch"]</a>
                    </p>
                </div>
            </section>
            <section class="container">

                <!--
                    =========
                    Tab Pills
                    =========
                -->
                <ul class="nav nav-tabs pill-custom" role="tablist" id="myTab">
                    <li role="presentation" class="active"><a data-toggle="tab" href="#Account" id="tabAccount">Account</a></li>
                    <li role="presentation"><a data-toggle="tab" href="#AccountType" id="createAccountTypeFlexGridId">Account Type</a></li>
                    <li role="presentation"><a data-toggle="tab" href="#AccountCashFlow" id="accountCashFlowTabId">Account Cash Flow</a></li>
                    <li role="presentation"><a data-toggle="tab" href="#AccountCategory" id="accountCategoryTabId">Account Category</a></li>
                </ul>
                <br />
                <div class="tab-content">

                    <!--
                        ====================
                        Tab Content: Account
                        ====================
                    -->
                    <div id="Account" class="tab-pane active">
                        <div class="panel panel-default">
                            <div class="panel-heading">
                                <table style="width: 100%" border="0">
                                    <tr>
                                        <td style="width: 59%">
                                            <div class="input-group ">
                                                <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                                <input type="text" class="form-control" id="inpAccountSearchFilter" placeholder="Search...">
                                            </div>
                                        </td>
                                        <td style="width: 1%"></td>
                                        <td style="width: 40%" align="right">
                                            @{
                                                if (canAdd)
                                                {
                                                    <button class="btn btn-primary" id="btnAccountAdd" onclick="btnAccountAddOnclick()"><i class="fa fa-plus"></i> Add</button>
                                                }
                                            }
                                            <button class="btn btn-danger" onclick="btnAccountCloseOnclick()"><i class=" fa fa-times"></i> Close</button>
                                        </td>
                                    </tr>
                                </table>
                            </div>
                            <div class="panel-body">
                                <div id="accountFlexGrid"></div>
                            </div>
                            <div class="panel-footer">
                                <div class="row">
                                    <div class="btn-group col-md-7" id="accountNavigationPageGrid">
                                        <button type="button" class="btn btn-default" id="btnAccountMoveToFirstPageGrid">
                                            <span class="glyphicon glyphicon-fast-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default" id="btnAccountMoveToPreviousPageGrid">
                                            <span class="glyphicon glyphicon-step-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default" disabled style="width: 100px" id="btnAccountCurrentPageGrid"></button>
                                        <button type="button" class="btn btn-default" id="btnAccountMoveToNextPageGrid">
                                            <span class="glyphicon glyphicon-step-forward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default" id="btnAccountMoveToLastPageGrid">
                                            <span class="glyphicon glyphicon-fast-forward"></span>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!--
                        =========================
                        Tab Content: Account Type
                        =========================
                    -->
                    <div id="AccountType" class="tab-pane">
                        <div class="panel panel-default">
                            <div class="panel-heading">
                                <table style="width: 100%" border="0">
                                    <tr>
                                        <td style="width: 59%">
                                            <div class="input-group ">
                                                <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                                <input type="text" class="form-control" id="inpAccountTypeSearchFilter" placeholder="Search...">
                                            </div>
                                        </td>
                                        <td style="width: 1%"></td>
                                        <td style="width: 40%" align="right">
                                            @{
                                                if (canAdd)
                                                {
                                                    <button class="btn btn-primary" id="btnAccountTypeAdd" onclick="btnAccountTypeAddOnclick()"><i class="fa fa-plus"></i> Add</button>
                                                }
                                            }
                                            <button class="btn btn-danger" onclick="btnAccountTypeCloseOnclick()"><i class=" fa fa-times"></i> Close</button>
                                        </td>
                                    </tr>
                                </table>
                            </div>
                            <div class="panel-body">
                                <div id="accountTypeFlexGrid" class="grid" align="left"></div>
                            </div>
                            <div class="panel-footer">
                                <div class="row">
                                    <div class="btn-group col-md-7" id="accountTypeNavigationFlexGrid">
                                        <button type="button" class="btn btn-default" id="btnAccountTypeMoveToFirstPageGrid">
                                            <span class="glyphicon glyphicon-fast-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default" id="btnAccountTypeMoveToPreviousPageGrid">
                                            <span class="glyphicon glyphicon-step-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default" disabled style="width: 100px" id="btnAccountTypeCurrentPageGrid"></button>
                                        <button type="button" class="btn btn-default" id="btnAccountTypeMoveToNextPageGrid">
                                            <span class="glyphicon glyphicon-step-forward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default" id="btnAccountTypeMoveToLastPageGrid">
                                            <span class="glyphicon glyphicon-fast-forward"></span>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!--
                        ==============================
                        Tab Content: Account Cash Flow
                        ==============================
                    -->
                    <div id="AccountCashFlow" class="tab-pane">
                        <div class="panel panel-default">
                            <div class="panel-heading">
                                <table style="width: 100%" border="0">
                                    <tr>
                                        <td style="width: 59%">
                                            <div class="input-group ">
                                                <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                                <input type="text" class="form-control" id="inpAccountCashFlowSearchFilter" placeholder="Search...">
                                            </div>
                                        </td>
                                        <td style="width: 1%"></td>
                                        <td style="width: 40%" align="right">
                                            @{
                                                if (canAdd)
                                                {
                                                    <button class="btn btn-primary" id="btnAccountCashFlowAdd" onclick="btnAccountCashFlowAddOnclick()"><i class="fa fa-plus"></i> Add</button>
                                                }
                                            }
                                            <button class="btn btn-danger" onclick="btnAccountCashFlowCloseOnclick()"><i class=" fa fa-times"></i> Close</button>
                                        </td>
                                    </tr>
                                </table>
                            </div>
                            <div class="panel-body">
                                <div id="accountCashFlowFlexGrid" class="grid" align="left"></div>
                            </div>
                            <div class="panel-footer">
                                <div class="row">
                                    <div class="btn-group col-md-7" id="accountCashFlowNavigationPageGrid">
                                        <button type="button" class="btn btn-default" id="btnAccountCashFlowMoveToFirstPageGrid">
                                            <span class="glyphicon glyphicon-fast-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default" id="btnAccountCashFlowMoveToPreviousPageGrid">
                                            <span class="glyphicon glyphicon-step-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default" disabled style="width: 100px" id="btnAccountCashFlowCurrentPageGrid"></button>
                                        <button type="button" class="btn btn-default" id="btnAccountCashFlowMoveToNextPageGrid">
                                            <span class="glyphicon glyphicon-step-forward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default" id="btnAccountCashFlowMoveToLastPageGrid">
                                            <span class="glyphicon glyphicon-fast-forward"></span>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!--
                        =============================
                        Tab Content: Account Category
                        =============================
                    -->
                    <div id="AccountCategory" class="tab-pane">
                        <div class="panel panel-default">
                            <div class="panel-heading">
                                <table style="width: 100%" border="0">
                                    <tr>
                                        <td style="width: 59%">
                                            <div class="input-group ">
                                                <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                                <input type="text" class="form-control" id="inpAccountCategorySearchFilter" placeholder="Search...">
                                            </div>
                                        </td>
                                        <td style="width: 1%"></td>
                                        <td style="width: 40%" align="right">
                                            @{
                                                if (canAdd)
                                                {
                                                    <button class="btn btn-primary" id="btnAccountCategoryAdd" onclick="btnAccountCategoryAddOnclick()"><i class="fa fa-plus"></i> Add</button>
                                                }
                                            }
                                            <button class="btn btn-danger" onclick="btnAccountCategoryCloseOnclick()"><i class=" fa fa-times"></i> Close</button>
                                        </td>
                                    </tr>
                                </table>
                            </div>
                            <div class="panel-body">
                                <div id="accountCategoryFlexGrid" class="grid" align="left"></div>
                            </div>
                            <div class="panel-footer">
                                <div class="row">
                                    <div class="btn-group col-md-7" id="accountCategoryNavigationPageGrid">
                                        <button type="button" class="btn btn-default" id="btnAccountCategoryMoveToFirstPageGrid">
                                            <span class="glyphicon glyphicon-fast-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default" id="btnAccountCategoryMoveToPreviousPageGrid">
                                            <span class="glyphicon glyphicon-step-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default" disabled style="width: 100px" id="btnAccountCategoryCurrentPageGrid"></button>
                                        <button type="button" class="btn btn-default" id="btnAccountCategoryMoveToNextPageGrid">
                                            <span class="glyphicon glyphicon-step-forward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default" id="btnAccountCategoryMoveToLastPageGrid">
                                            <span class="glyphicon glyphicon-fast-forward"></span>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!--
                    ==========
                    User Stamp
                    ==========
                -->
                <div class="panel panel-default">
                    <div class="panel-heading">
                        User stamp
                    </div>
                    <div class="panel-body">
                        <div class="row">
                            <div class="col-md-6">
                                <p>Created by:</p>
                                <div style="padding-left: 10px;">
                                    <i class="fa fa-key fa-fw"></i> <label id="createdBy">NA</label>
                                    <br />
                                    <small><i class="fa fa-calendar fa-fw"></i> &nbsp;<span id="createdDate">mm/dd/yyyy</span></small>
                                </div>
                                <br />
                            </div>
                            <div class="col-md-6">
                                <p>Updated by:</p>
                                <div style="padding-left: 10px;">
                                    <i class="fa fa-key fa-fw"></i> <label id="updatedBy">NA</label>
                                    <br />
                                    <small><i class="fa fa-calendar fa-fw"></i> &nbsp;<span id="updatedDate">mm/dd/yyyy</span></small>
                                </div>
                                <br />
                            </div>
                        </div>
                    </div>
                </div>
            </section>

            @Html.Partial("_SoftwareFooter")
        </main>
    </div>
    <div id="c-mask" class="c-mask"></div>

    <!--
        =========================
        Account Form Detail Modal
        =========================
    -->
    <div class="modal fade" id="accountFormDetailModal" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="accountModalTitle">Account</h4>
                </div>
                <div class="modal-body">

                    <!--
                        ============
                        Account Tabs
                        ============
                    -->
                    <ul class="nav nav-tabs pill-custom" role="tablist" id="myTab">
                        <li role="presentation" class="active"><a data-toggle="tab" href="#accountDetailAccount" id="tabAccountDetail">Account</a></li>
                        <li role="presentation"><a data-toggle="tab" href="#accountDetailArticleType" id="tabAccountArticleTypeDetail">Account Article Type</a></li>
                    </ul>
                    <br />
                    <div class="tab-content">

                        <!--
                            ====================
                            Tab Content: Account
                            ====================
                        -->
                        <div id="accountDetailAccount" class="tab-pane active">
                            <center>
                                <span id="accountLoadingFormDetail"></span>
                            </center>
                            <div id="accountFormDetail">
                                <dl class="dl-horizontal">
                                    <dt>Code</dt>
                                    <dd>
                                        <input type="text" class="form-control requiredAccount" id="inpAccountCode" placeholder="Code" />
                                    </dd>
                                    <dt>Account</dt>
                                    <dd>
                                        <input type="text" class="form-control requiredAccount" id="inpAccount" placeholder="Account" />
                                    </dd>
                                    <dt>Account Type</dt>
                                    <dd>
                                        <div id="cboAccountType" class="comboBox-wide"></div>
                                    </dd>
                                    <dt>Account Cash Flow</dt>
                                    <dd>
                                        <div id="cboAccountCashFlow" class="comboBox-wide"></div>
                                    </dd>
                                </dl>
                            </div>
                        </div>

                        <!--
                            =========================
                            Tab Content: Article Type
                            =========================
                        -->
                        <div id="accountDetailArticleType" class="tab-pane in">
                            <center>
                                <span id="accountArticleTypeLoadingFormDetail"></span>
                            </center>
                            <div id="accountArticleTypeFormDetail">
                                @{
                                    if (canAdd)
                                    {
                                        <div class="panel panel-default">
                                            <div class="panel-heading">
                                                <div class="row">
                                                    <div class="col-lg-12" align="right">
                                                        <button class="btn btn-primary" id="btnAccountArticleTypeAdd" onclick="btnAccountArticleTypeAddOnclick()"><i class="fa fa-plus"></i> Add</button>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="panel-body">
                                                <div id="accountArticleTypeFlexGrid" style="max-height: 250px"></div>
                                            </div>
                                        </div>
                                    }
                                    else
                                    {
                                        <div id="accountArticleTypeFlexGrid" style="max-height: 250px"></div>
                                        <br /><br />
                                    }
                                }
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" id="btnAccountSave" onclick="btnAccountSaveOnclick()"><i class="fa fa-save"></i> Save</button>
                    <button class="btn btn-danger" id="btnAccountCloseFormDetailModal" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!--
        ====================
        Account Delete Modal
        ====================
    -->
    <div class="modal fade" id="accountConfirmDeleteModal" role="dialog">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Delete</h4>
                </div>
                <div class="modal-body">
                    Delete Account?
                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger" id="btnAccountConfirmDelete" onclick="btnAccountConfirmDeleteOnclick()"><i class="fa fa-trash"></i> Delete</button>
                    <button class="btn btn-primary" id="btnAccountConfirmCloseConfirmDeleteModal" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <!--
        ======================================
        Account Article Type Form Detail Modal
        ======================================
    -->
    <div class="modal fade" id="accountArticleTypeFormDetailModal" role="dialog">
        <div class="modal-dialog ">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="accountArticleTypeModalTitle">Article Type</h4>
                </div>
                <div class="modal-body">
                    <center>
                        <span id="articleTypeLoadingFormDetail"></span>
                    </center>
                    <div id="articleTypeFormDetail">
                        <dl class="dl-horizontal">
                            <dt>Article Type</dt>
                            <dd>
                                <div id="cboArticleType" class="comboBox-wide"></div>
                            </dd>
                        </dl>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" id="btnAccountArticleTypeSave" onclick="btnAccountArticleTypeSaveOnclick()"><i class="fa fa-save"></i> Save</button>
                    <button class="btn btn-danger" id="btnAccountArticleTypeCloseFormDetailModal" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!--
        =================================
        Account Article Type Delete Modal
        =================================
    -->
    <div class="modal fade" id="accountArticleTypeConfirmDeleteModal" role="dialog">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Delete</h4>
                </div>
                <div class="modal-body">
                    Delete Article Type?
                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger" id="btnAccountArticleTypeConfirmDelete" onclick="btnAccountArticleTypeConfirmDeleteOnclick()"><i class="fa fa-trash"></i> Delete</button>
                    <button class="btn btn-primary" id="btnAccountArticleTypeCloseConfirmDeleteModal" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <!--
        ==============================
        Account Type Form Detail Modal
        ==============================
    -->
    <div class="modal fade" id="accountTypeFormDetailModal" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="accountTypeModalTitle">Account Type</h4>
                </div>
                <div class="modal-body">
                    <center>
                        <span id="accountTypeLoadingFormDetail"></span>
                    </center>
                    <div id="accountTypeFormDetail">
                        <dl class="dl-horizontal">
                            <dt>Code</dt>
                            <dd>
                                <input type="text" class="form-control requiredAccountType" id="inpAccountTypeCode" placeholder="Code" />
                            </dd>
                            <dt>Account Type</dt>
                            <dd>
                                <input type="text" class="form-control requiredAccountType" id="inpAccountType" placeholder="Account Type" />
                            </dd>
                            <dt>Account Category</dt>
                            <dd>
                                <div id="cboAccountCategory" class="comboBox-wide"></div>
                            </dd>
                            <dt>Sub Category</dt>
                            <dd>
                                <input type="text" class="form-control requiredAccountType" id="inpAccountTypeSubCategoryDescription" placeholder="Sub-Category Description" />
                            </dd>
                        </dl>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" id="btnAccountTypeSave" onclick="btnAccountTypeSaveOnclick()"><i class="fa fa-save"></i> Save</button>
                    <button class="btn btn-danger" id="btnAccountTypeCloseFormDetailModal" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!--
        =========================
        Account Type Delete Modal
        =========================
    -->
    <div class="modal fade" id="accountTypeConfirmDeleteModal" role="dialog">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Delete</h4>
                </div>
                <div class="modal-body">
                    Delete Account Type?
                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger" id="btnAccountTypeConfirmDelete" onclick="btnAccountTypeConfirmDeleteOnclick()"><i class="fa fa-trash"></i> Delete</button>
                    <button class="btn btn-primary" id="btnAccountTypeCloseConfirmDeleteModal" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <!--
        ===================================
        Account Cash Flow Form Detail Modal
        ===================================
    -->
    <div class="modal fade" id="accountCashFlowFormDetailModal" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="accountCashFlowModalTitle">Account Cash Flow</h4>
                </div>
                <div class="modal-body">
                    <center>
                        <span id="accountCashFlowLoadingFormDetail"></span>
                    </center>
                    <div id="accountCashFlowFormDetail">
                        <dl class="dl-horizontal">
                            <dt>Code</dt>
                            <dd><input type="text" class="form-control requiredAccountCashFlow" id="inpAccountCashFlowCode" placeholder="Code" /></dd>
                            <dt>Account Cash Flow</dt>
                            <dd><input type="text" class="form-control requiredAccountCashFlow" id="inpAccountCashFlow" placeholder="Cash FLow" /></dd>
                        </dl>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" id="btnAccountCashFlowSave" onclick="btnAccountCashFlowSaveOnclick()"><i class="fa fa-save"></i> Save</button>
                    <button class="btn btn-danger" id="btnAccountCashFlowCloseFormDetailModal" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!--
        ==============================
        Account Cash Flow Delete Modal
        ==============================
    -->
    <div class="modal fade" id="accountCashFlowConfirmDeleteModal" role="dialog">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Delete</h4>
                </div>
                <div class="modal-body">
                    Delete Account Cash Flow?
                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger" id="btnAccountCashFlowConfirmDelete" onclick="btnAccountCashFlowConfirmDeleteOnclick()"><i class="fa fa-trash"></i> Delete</button>
                    <button class="btn btn-primary" id="btnAccountCashFlowCloseConfirmDeleteModal" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <!--
        ==================================
        Account Category Form Detail Modal
        ==================================
    -->
    <div class="modal fade" id="accountCategoryFormDetailModal" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="accountCategoryModalTitle">Account Category</h4>
                </div>
                <div class="modal-body">
                    <center>
                        <span id="accountCategoryLoadingFormDetail"></span>
                    </center>
                    <div id="accountCategoryFormDetail">
                        <dl class="dl-horizontal">
                            <dt>Code</dt>
                            <dd><input type="text" class="form-control requiredAccountCategory" id="inpAccountCategoryCode" placeholder="Code" /></dd>
                            <dt>Account Category</dt>
                            <dd><input type="text" class="form-control requiredAccountCategory" id="inpAccountCategory" placeholder="Category" /></dd>
                        </dl>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" id="btnAccountCategorySave" onclick="btnAccountCategorySaveOnclick()"><i class="fa fa-save"></i> Save</button>
                    <button class="btn btn-danger" id="btnAccountCategoryCloseFormDetailModal" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!--
        =============================
        Account Category Delete Modal
        =============================
    -->
    <div class="modal fade" id="accountCategoryConfirmDeleteModal" role="dialog">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Delete</h4>
                </div>
                <div class="modal-body">
                    Delete Account Category?
                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger" id="btnAccountCategoryConfirmDelete" onclick="btnAccountCategoryConfirmDeleteOnclick()"><i class="fa fa-trash"></i> Delete</button>
                    <button class="btn btn-primary" id="btnAccountCategoryCloseConfirmDeleteModal" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>

    @Scripts.Render("~/Scripts/Software-js")
    <script type="text/javascript">
        // =========================================================
        // Account Collection View, Flex Grid and Navigation Buttons
        // =========================================================
        var accountCollectionView;
        var accountFlexGrid = new wijmo.grid.FlexGrid('#accountFlexGrid');
        var btnAccountMoveToFirstPageGrid = document.getElementById('btnAccountMoveToFirstPageGrid');
        var btnAccountMoveToPreviousPageGrid = document.getElementById('btnAccountMoveToPreviousPageGrid');
        var btnAccountMoveToNextPageGrid = document.getElementById('btnAccountMoveToNextPageGrid');
        var btnAccountMoveToLastPageGrid = document.getElementById('btnAccountMoveToLastPageGrid');
        var btnAccountCurrentPageGrid = document.getElementById('btnAccountCurrentPageGrid');

        // ==========================
        // Account Data and Dropdowns
        // ==========================
        var accountId = 0;
        var cboAccountType = new wijmo.input.ComboBox('#cboAccountType');
        var cboAccountCashFlow = new wijmo.input.ComboBox('#cboAccountCashFlow');

        // =================================================
        // Account Article Type Collecion View and Flex Grid
        // =================================================
        var accountArticleTypesCollectionView;
        var accountArticleTypeGrid = new wijmo.grid.FlexGrid('#accountArticleTypeFlexGrid');

        // =======================================
        // Account Article Type Data and Dropdowns
        // =======================================
        var accountArticleTypeId = 0;
        var cboForArticleType = new wijmo.input.ComboBox('#cboArticleType');

        // =========================
        // Create Combo Account Type
        // =========================
        function createComboAccountType(accountTypeId, accountCashFlowId) {
            var accountTypeCollectionViewObservableArray = new wijmo.collections.ObservableArray();

            $.ajax({
                url: '/api/chartOfAccounts/account/dropdown/list/accountType',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            accountTypeCollectionViewObservableArray.push({
                                Id: results[i]["Id"],
                                AccountType: results[i]["AccountType"],
                            });
                        }
                    }

                    var disabled = true;
                    if (results.length > 0) {
                        disabled = false;
                    }

                    cboAccountType.dispose();
                    cboAccountType = new wijmo.input.ComboBox('#cboAccountType', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: accountTypeCollectionViewObservableArray,
                        displayMemberPath: "AccountType",
                        selectedValuePath: "Id",
                        selectedValue: accountTypeId
                    });

                    createComboAccountCashFlow(accountCashFlowId);
                }
            });
        }

        // ==============================
        // Create Combo Account Cash Flow
        // ==============================
        function createComboAccountCashFlow(accountCashFlowId) {
            var accountCashFlowsObservableArray = new wijmo.collections.ObservableArray();

            $.ajax({
                url: '/api/chartOfAccounts/account/dropdown/list/accountCashFlow',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            accountCashFlowsObservableArray.push({
                                Id: results[i]["Id"],
                                AccountCashFlow: results[i]["AccountCashFlow"]
                            });
                        }
                    }

                    var disabled = true;
                    if (results.length > 0) {
                        disabled = false;
                    }

                    cboAccountCashFlow.dispose();
                    cboAccountCashFlow = new wijmo.input.ComboBox('#cboAccountCashFlow', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: accountCashFlowsObservableArray,
                        displayMemberPath: "AccountCashFlow",
                        selectedValuePath: "Id",
                        selectedValue: accountCashFlowId
                    });

                    setTimeout(function () {
                        $("#accountLoadingFormDetail").hide();
                        $("#accountFormDetail").show();
                        $("#btnAccountSave").prop("disabled", false);
                    }, 500)
                }
            });
        }

        // ================
        // Get Account Data
        // ================
        function getAccountData() {
            var accountObservableArray = new wijmo.collections.ObservableArray;
            NProgress.start();
            $.ajax({
                url: '/api/chartOfAccounts/account/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            accountObservableArray.push({
                                EditId: "<button class='btn btn-primary btn-xs btn-block' onclick='btnAccountEditOnclick()'><i class='fa fa-edit'></i> Edit</button>",
                                DeleteId: "<button class='btn btn-danger btn-xs btn-block' onclick='btnAccountDeleteOnclick()'><i class='fa fa-trash'></i> Delete</button>",
                                Id: results[i]["Id"],
                                AccountCode: results[i]["AccountCode"],
                                Account: results[i]["Account"],
                                AccountTypeId: results[i]["AccountTypeId"],
                                AccountType: results[i]["AccountType"],
                                AccountCashFlowId: results[i]["AccountCashFlowId"],
                                AccountCashFlow: results[i]["AccountCashFlow"],
                                IsLocked: results[i]["IsLocked"],
                                CreatedById: results[i]["CreatedById"],
                                CreatedBy: results[i]["CreatedBy"],
                                CreatedDateTime: results[i]["CreatedDateTime"],
                                UpdatedById: results[i]["UpdatedById"],
                                UpdatedBy: results[i]["UpdatedBy"],
                                UpdatedDateTime: results[i]["UpdatedDateTime"]
                            });

                        }
                    }

                    NProgress.done();
                }
            });

            return accountObservableArray;
        }

        // ========================
        // Create Account Flex Grid
        // ========================
        function createAccountFlexGrid() {
            accountCollectionView = new wijmo.collections.CollectionView(getAccountData());
            accountCollectionView.canFilter = true;
            accountCollectionView.pageSize = 15;

            var filterTextAccount = '';
            $('#inpAccountSearchFilter').keyup(function () {
                filterTextAccount = this.value.toLowerCase();
                accountCollectionView.refresh();
            });

            accountCollectionView.filter = function (item) {
                return !filterTextAccount || (item.AccountCode.toLowerCase().indexOf(filterTextAccount) > -1)
                                          || (item.Account.toLowerCase().indexOf(filterTextAccount) > -1)
                                          || (item.AccountType.toLowerCase().indexOf(filterTextAccount) > -1);
            }

            accountCollectionView.collectionChanged.addHandler(function (sender, args) {
                updateAccountNavigationButtons();
            });

            accountCollectionView.currentChanged.addHandler(function (sender, args) {
                updateAccountFlexGridSelection();
            });

            accountFlexGrid.dispose();
            accountFlexGrid = new wijmo.grid.FlexGrid('#accountFlexGrid');
            accountFlexGrid.initialize({
                columns: [
                            @{
                                if (canEdit)
                                {
                                    <text>
                                        {
                                            "header": "Edit",
                                            "binding": "EditId",
                                            "width": 70,
                                            "align": "center",
                                            "allowResizing": false,
                                            "allowSorting": false,
                                            "isContentHtml": true
                                        },
                                    </text>
                                }
                                if (canDelete)
                                {
                                    <text>
                                        {
                                            "header": "Delete",
                                            "binding": "DeleteId",
                                            "width": 70,
                                            "align": "center",
                                            "allowResizing": false,
                                            "allowSorting": false,
                                            "isContentHtml": true
                                        },
                                    </text>
                                }
                            }
                            {
                                "header": "Code",
                                "binding": "AccountCode",
                                "allowSorting": true,
                                "width": 100
                            },
                            {
                                "header": "Account",
                                "binding": "Account",
                                "allowSorting": true,
                                "width": "3*"
                            },
                            {
                                "header": "Account Type",
                                "binding": "AccountType",
                                "allowSorting": true,
                                "width": "3*"
                            },
                            {
                                "header": "Account Cash Flow",
                                "binding": "AccountCashFlow",
                                "allowSorting": true,
                                "width": "3*"
                            }
                ],
                autoGenerateColumns: false,
                itemsSource: accountCollectionView,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            accountFlexGrid.trackChanges = true;

            updateAccountNavigationButtons();

            btnAccountMoveToFirstPageGrid.addEventListener('click', function () {
                accountCollectionView.moveToFirstPage();
                updateAccountNavigationButtons();
            });

            btnAccountMoveToPreviousPageGrid.addEventListener('click', function () {
                accountCollectionView.moveToPreviousPage();
                updateAccountNavigationButtons();
            });

            btnAccountMoveToNextPageGrid.addEventListener('click', function () {
                accountCollectionView.moveToNextPage();
                updateAccountNavigationButtons();
            });

            btnAccountMoveToLastPageGrid.addEventListener('click', function () {
                accountCollectionView.moveToLastPage();
                updateAccountNavigationButtons();
            });
        }

        // ==================================
        // Update Account Flex Grid Selection
        // ==================================
        function updateAccountFlexGridSelection() {
            var item = accountCollectionView.currentItem;
            document.getElementById('createdBy').innerHTML = item.CreatedBy;
            document.getElementById('createdDate').innerHTML = item.CreatedDateTime;
            document.getElementById('updatedBy').innerHTML = item.UpdatedBy;
            document.getElementById('updatedDate').innerHTML = item.UpdatedDateTime;
        }

        // ===============================
        // Navigation Buttons for Account
        // ===============================
        function updateAccountNavigationButtons() {
            if (accountCollectionView.pageSize <= 0) {
                document.getElementById('accountNavigationPageGrid').style.display = 'none';
                return;
            }
            document.getElementById('accountNavigationPageGrid').style.display = 'block';
            if (accountCollectionView.pageIndex === 0) {
                btnAccountMoveToFirstPageGrid.setAttribute('disabled', 'disabled');
                btnAccountMoveToPreviousPageGrid.setAttribute('disabled', 'disabled');
                btnAccountMoveToNextPageGrid.removeAttribute('disabled');
                btnAccountMoveToLastPageGrid.removeAttribute('disabled');
            } else if (accountCollectionView.pageIndex === (accountCollectionView.pageCount - 1)) {
                btnAccountMoveToFirstPageGrid.removeAttribute('disabled');
                btnAccountMoveToPreviousPageGrid.removeAttribute('disabled');
                btnAccountMoveToLastPageGrid.setAttribute('disabled', 'disabled');
                btnAccountMoveToNextPageGrid.setAttribute('disabled', 'disabled');
            } else {
                btnAccountMoveToFirstPageGrid.removeAttribute('disabled');
                btnAccountMoveToPreviousPageGrid.removeAttribute('disabled');
                btnAccountMoveToNextPageGrid.removeAttribute('disabled');
                btnAccountMoveToLastPageGrid.removeAttribute('disabled');
            }
            btnAccountCurrentPageGrid.innerHTML = (accountCollectionView.pageIndex + 1) + ' / ' + accountCollectionView.pageCount;
        }

        // ========================
        // Account Entry Validation
        // ========================
        function accountEntryValidation() {
            var isValid = true;
            $('.requiredAccount').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                } else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            return isValid;
        }

        // ===========
        // Add Account
        // ===========
        function btnAccountAddOnclick() {
            $('#accountFormDetailModal').modal({
                show: true,
                backdrop: 'static'
            });

            $('.requiredAccount').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            document.getElementById("accountModalTitle").innerHTML = 'Add Account';
            $("#accountLoadingFormDetail").show();
            document.getElementById("accountLoadingFormDetail").innerHTML = 'Loading...';
            $("#accountFormDetail").hide();

            document.getElementById('btnAccountSave').innerHTML = "<i class='fa fa-save'></i> Save";
            $("#btnAccountSave").prop("disabled", true);
            $("#btnAccountCloseFormDetailModal").prop("disabled", false);

            document.getElementById('inpAccountCode').disabled = false;
            document.getElementById('inpAccount').disabled = false;

            accountId = 0;
            document.getElementById('inpAccountCode').value = "NA";
            document.getElementById('inpAccount').value = "NA";
            createComboAccountType(0, 0);

            $("#accountArticleTypeLoadingFormDetail").hide();
            $("#accountArticleTypeFormDetail").hide();
            $("#btnAccountArticleTypeAdd").prop("disabled", true);
        }

        // ============
        // Edit Account
        // ============
        function btnAccountEditOnclick() {
            $('#accountFormDetailModal').modal({
                show: true,
                backdrop: 'static'
            });

            $('.requiredAccount').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            document.getElementById("accountModalTitle").innerHTML = 'Edit Account';
            $("#accountLoadingFormDetail").show();
            document.getElementById("accountLoadingFormDetail").innerHTML = 'Loading...';
            $("#accountFormDetail").hide();

            document.getElementById('btnAccountSave').innerHTML = "<i class='fa fa-save'></i> Save";
            $("#btnAccountSave").prop("disabled", true);
            $("#btnAccountCloseFormDetailModal").prop("disabled", false);

            accountCollectionView.editItem(accountCollectionView.currentItem);
            var account = accountCollectionView.currentEditItem;
            accountId = account.Id;
            document.getElementById('inpAccountCode').value = account.AccountCode;
            document.getElementById('inpAccount').value = account.Account;
            createComboAccountType(account.AccountTypeId, account.AccountCashFlowId);

            document.getElementById('inpAccountCode').disabled = false;
            document.getElementById('inpAccount').disabled = false;
            $('#btnAccountArticleTypeAdd').prop('disabled', false);

            $("#accountArticleTypeLoadingFormDetail").show();
            document.getElementById("accountArticleTypeLoadingFormDetail").innerHTML = 'Loading...';
            $("#accountArticleTypeFormDetail").hide();

            setTimeout(function () {
                createAccountArticleTypeFlexGrid();
            }, 500);
        }

        // ============
        // Save Account
        // ============
        function btnAccountSaveOnclick() {
            var accountObject = new Object();
            accountObject.AccountCode = document.getElementById('inpAccountCode').value;
            accountObject.Account = document.getElementById('inpAccount').value;
            accountObject.AccountTypeId = cboAccountType.selectedValue;
            accountObject.AccountCashFlowId = cboAccountCashFlow.selectedValue;
            var data = JSON.stringify(accountObject);

            if (accountEntryValidation()) {
                document.getElementById('btnAccountSave').innerHTML = "<i class='fa fa-save'></i> Saving...";
                $("#btnAccountSave").prop("disabled", true);
                $("#btnAccountCloseFormDetailModal").prop("disabled", true);

                if (accountId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/chartOfAccounts/account/add',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: data,
                        statusCode: {
                            200: function () {
                                toastr.success("Save Successful");
                                $('#accountFormDetailModal').modal('hide');
                                refreshAccountFlexGrid();
                            },
                            404: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                                $('#accountFormDetailModal').modal('hide');
                                document.getElementById('btnAccountSave').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#btnAccountSave").prop("disabled", false);
                                $("#btnAccountCloseFormDetailModal").prop("disabled", false);
                            },
                            400: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                                $('#accountFormDetailModal').modal('hide');
                                document.getElementById('btnAccountSave').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#btnAccountSave").prop("disabled", false);
                                $("#btnAccountCloseFormDetailModal").prop("disabled", false);
                            },
                            500: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                                $('#accountFormDetailModal').modal('hide');
                                document.getElementById('btnAccountSave').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#btnAccountSave").prop("disabled", false);
                                $("#btnAccountCloseFormDetailModal").prop("disabled", false);
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/chartOfAccounts/account/update/' + accountId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: data,
                        statusCode: {
                            200: function () {
                                toastr.success("Update Successful");
                                $('#accountFormDetailModal').modal('hide');
                                refreshAccountFlexGrid();
                            },
                            404: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                                $('#accountFormDetailModal').modal('hide');
                                document.getElementById('btnAccountSave').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#btnAccountSave").prop("disabled", false);
                                $("#btnAccountCloseFormDetailModal").prop("disabled", false);
                            },
                            400: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                                $('#accountFormDetailModal').modal('hide');
                                document.getElementById('btnAccountSave').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#btnAccountSave").prop("disabled", false);
                                $("#btnAccountCloseFormDetailModal").prop("disabled", false);
                            },
                            500: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                                $('#accountFormDetailModal').modal('hide');
                                document.getElementById('btnAccountSave').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#btnAccountSave").prop("disabled", false);
                                $("#btnAccountCloseFormDetailModal").prop("disabled", false);
                            }
                        }
                    });
                }
            } else {
                toastr.error("Invalid Entry");
            }
        }

        // ======================
        // Delete Account Buttons
        // ======================
        function btnAccountDeleteOnclick() {
            accountCollectionView.editItem(accountCollectionView.currentItem);
            var account = accountCollectionView.currentEditItem;

            $('#accountConfirmDeleteModal').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById('btnAccountConfirmDelete').innerHTML = "<i class='fa fa-trash'></i> Delete";
            $("#btnAccountConfirmDelete").prop("disabled", false);
            $("#btnAccountConfirmCloseConfirmDeleteModal").prop("disabled", false);
        }

        // ======================
        // Confirm Delete Account
        // ======================
        function btnAccountConfirmDeleteOnclick() {
            document.getElementById('btnAccountConfirmDelete').innerHTML = "<i class='fa fa-trash'></i> Deleting...";
            $("#btnAccountConfirmDelete").prop("disabled", true);
            $("#btnAccountConfirmCloseConfirmDeleteModal").prop("disabled", true);

            accountCollectionView.editItem(accountCollectionView.currentItem);
            var id = accountCollectionView.currentEditItem.Id;
            $.ajax({
                url: '/api/chartOfAccounts/account/delete/' + id,
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Delete Successful");
                        $('#accountConfirmDeleteModal').modal('hide');
                        refreshAccountFlexGrid();
                    },
                    404: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                        $('#accountConfirmDeleteModal').modal('hide');
                        document.getElementById('btnAccountConfirmDelete').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $("#btnAccountConfirmDelete").prop("disabled", false);
                        $("#btnAccountConfirmCloseConfirmDeleteModal").prop("disabled", false);
                    },
                    400: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                        $('#accountConfirmDeleteModal').modal('hide');
                        document.getElementById('btnAccountConfirmDelete').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $("#btnAccountConfirmDelete").prop("disabled", false);
                        $("#btnAccountConfirmCloseConfirmDeleteModal").prop("disabled", false);
                    },
                    500: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                        $('#accountConfirmDeleteModal').modal('hide');
                        document.getElementById('btnAccountConfirmDelete').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $("#btnAccountConfirmDelete").prop("disabled", false);
                        $("#btnAccountConfirmCloseConfirmDeleteModal").prop("disabled", false);
                    }
                }
            });
        }

        // =============
        // Close Account
        // =============
        function btnAccountCloseOnclick() {
            window.location = '/Software';
        }

        // =============================
        // Get Account Article Type Data
        // =============================
        function getAccountArticleTypeData() {
            var accountArticleTypesObservableArray = new wijmo.collections.ObservableArray;
            $.ajax({
                url: '/api/chartOfAccounts/accountArticleType/list/' + accountId,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            var btnEditId = "<button class='btn btn-primary btn-xs btn-block' onclick='btnAccountArticleTypeEditOnclick()'><i class='fa fa-edit'></i> Edit</button>";
                            var btnDeleteId = "<button class='btn btn-danger btn-xs btn-block' onclick='btnAccountArticleTypeDeleteOnclick()'><i class='fa fa-trash'></i> Delete</button>";

                            accountArticleTypesObservableArray.push({
                                EditId: btnEditId,
                                DeleteId: btnDeleteId,
                                Id: results[i]["Id"],
                                AccountId: results[i]["AccountId"],
                                Account: results[i]["Account"],
                                ArticleTypeId: results[i]["ArticleTypeId"],
                                ArticleType: results[i]["ArticleType"]
                            });
                        }
                    }

                    $("#accountArticleTypeLoadingFormDetail").hide();
                    $("#accountArticleTypeFormDetail").show();
                }
            });

            return accountArticleTypesObservableArray;
        }

        // =====================================
        // Create Account Article Type Flex Grid
        // =====================================
        function createAccountArticleTypeFlexGrid() {
            accountArticleTypesCollectionView = new wijmo.collections.CollectionView(getAccountArticleTypeData());

            accountArticleTypeGrid.dispose();
            accountArticleTypeGrid = new wijmo.grid.FlexGrid('#accountArticleTypeFlexGrid');
            accountArticleTypeGrid.initialize({
                columns: [
                    @{
                        if (canEdit)
                        {
                            <text>
                                {
                                    "header": "Edit",
                                    "binding": "EditId",
                                    "width": 60,
                                    "align": "center",
                                    "allowResizing": false,
                                    "allowSorting": false,
                                    "isContentHtml": true
                                },
                            </text>
                        }
                        if (canDelete)
                        {
                            <text>
                                {
                                    "header": "Delete",
                                    "binding": "DeleteId",
                                    "width": 70,
                                    "align": "center",
                                    "allowResizing": false,
                                    "allowSorting": false,
                                    "isContentHtml": true
                                },
                            </text>
                        }
                    }
                    {
                        "header": "Article Type",
                        "binding": "ArticleType",
                        "allowSorting": true,
                        "width": "2*"
                    }
                ],
                autoGenerateColumns: false,
                itemsSource: accountArticleTypesCollectionView,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            accountArticleTypeGrid.trackChanges = true;
        }

        // =========================
        // Refresh Account Flex Grid
        // =========================
        function refreshAccountFlexGrid() {
            accountCollectionView = new wijmo.collections.CollectionView(getAccountData());
            accountCollectionView.canFilter = true;
            accountCollectionView.pageSize = 15;

            var filterTextAccount = '';
            $('#inpAccountSearchFilter').keyup(function () {
                filterTextAccount = this.value.toLowerCase();
                accountCollectionView.refresh();
            });

            accountCollectionView.filter = function (item) {
                return !filterTextAccount || (item.AccountCode.toLowerCase().indexOf(filterTextAccount) > -1)
                    || (item.Account.toLowerCase().indexOf(filterTextAccount) > -1)
                    || (item.AccountType.toLowerCase().indexOf(filterTextAccount) > -1);
            }

            accountCollectionView.collectionChanged.addHandler(function (sender, args) {
                updateAccountNavigationButtons();
            });

            accountCollectionView.currentChanged.addHandler(function (sender, args) {
                updateAccountFlexGridSelection();
            });

            accountFlexGrid.itemsSource = accountCollectionView;
            accountFlexGrid.trackChanges = true;
        }

        // =================================
        // Create Combo Account Article Type
        // =================================
        function createCboAccountArticleType(articleTypeId) {
            var articleTypesObservableArray = new wijmo.collections.ObservableArray();

            $.ajax({
                url: '/api/chartOfAccounts/accountArticleType/dropdown/list/articleType',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            articleTypesObservableArray.push({
                                Id: results[i]["Id"],
                                ArticleType: results[i]["ArticleType"]
                            });
                        }
                    }

                    var disabled = true;
                    if (results.length > 0) {
                        disabled = false;
                    }

                    cboForArticleType.dispose();
                    cboForArticleType = new wijmo.input.ComboBox('#cboArticleType', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: articleTypesObservableArray,
                        displayMemberPath: "ArticleType",
                        selectedValuePath: "Id",
                        selectedValue: articleTypeId
                    });

                    setTimeout(function () {
                        $("#articleTypeLoadingFormDetail").hide();
                        $("#articleTypeFormDetail").show();
                        $("#btnAccountArticleTypeSave").prop("disabled", false);
                    }, 500)
                }
            });
        }

        // ========================
        // Add Account Article Type
        // ========================
        function btnAccountArticleTypeAddOnclick() {
            $('#accountArticleTypeFormDetailModal').modal({
                show: true,
                backdrop: 'static'
            });

            $('.requiredAccountArticleType').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            document.getElementById("accountArticleTypeModalTitle").innerHTML = 'Add Account Article Type';
            $("#articleTypeLoadingFormDetail").show();
            document.getElementById("articleTypeLoadingFormDetail").innerHTML = 'Loading...';
            $("#articleTypeFormDetail").hide();

            document.getElementById('btnAccountArticleTypeSave').innerHTML = "<i class='fa fa-save'></i> Save";
            $("#btnAccountArticleTypeSave").prop("disabled", true);
            $("#btnAccountArticleTypeCloseFormDetailModal").prop("disabled", false);

            accountArticleTypeId = 0;
            createCboAccountArticleType(0);
        }

        // =========================
        // Edit Account Article Type
        // =========================
        function btnAccountArticleTypeEditOnclick() {
            $('#accountArticleTypeFormDetailModal').modal({
                show: true,
                backdrop: 'static'
            });

            $('.requiredAccountArticleType').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            document.getElementById("accountArticleTypeModalTitle").innerHTML = 'Edit Account Article Type';
            $("#articleTypeLoadingFormDetail").show();
            document.getElementById("articleTypeLoadingFormDetail").innerHTML = 'Loading...';
            $("#articleTypeFormDetail").hide();

            document.getElementById('btnAccountArticleTypeSave').innerHTML = "<i class='fa fa-save'></i> Save";
            $("#btnAccountArticleTypeSave").prop("disabled", true);
            $("#btnAccountArticleTypeCloseFormDetailModal").prop("disabled", false);

            accountArticleTypesCollectionView.editItem(accountArticleTypesCollectionView.currentItem);
            var accountArticleType = accountArticleTypesCollectionView.currentEditItem;
            accountArticleTypeId = accountArticleType.Id;
            createCboAccountArticleType(accountArticleType.ArticleTypeId);
        }

        // =========================
        // Save Account Article Type
        // =========================
        function btnAccountArticleTypeSaveOnclick() {
            var accountArticleTypeeObject = new Object();
            accountArticleTypeeObject.AccountId = accountId;
            accountArticleTypeeObject.ArticleTypeId = cboForArticleType.selectedValue;
            var accountArticleTypeData = JSON.stringify(accountArticleTypeeObject);

            document.getElementById('btnAccountArticleTypeSave').innerHTML = "<i class='fa fa-save'></i> Saving...";
            $("#btnAccountArticleTypeSave").prop("disabled", true);
            $("#btnAccountArticleTypeCloseFormDetailModal").prop("disabled", true);

            if (accountArticleTypeId == 0) {
                $.ajax({
                    type: "POST",
                    url: '/api/chartOfAccounts/accountArticleType/add',
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    data: accountArticleTypeData,
                    statusCode: {
                        200: function () {
                            toastr.success("Save Successful");
                            $('#accountArticleTypeFormDetailModal').modal('hide');
                            createAccountArticleTypeFlexGrid();
                        },
                        404: function (message) {
                            toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                            $('#accountArticleTypeFormDetailModal').modal('hide');
                            document.getElementById('btnAccountArticleTypeSave').innerHTML = "<i class='fa fa-save'></i> Save";
                            $("#btnAccountArticleTypeSave").prop("disabled", false);
                            $("#btnAccountArticleTypeCloseFormDetailModal").prop("disabled", false);
                        },
                        400: function (message) {
                            toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                            $('#accountArticleTypeFormDetailModal').modal('hide');
                            document.getElementById('btnAccountArticleTypeSave').innerHTML = "<i class='fa fa-save'></i> Save";
                            $("#btnAccountArticleTypeSave").prop("disabled", false);
                            $("#btnAccountArticleTypeCloseFormDetailModal").prop("disabled", false);
                        },
                        500: function (message) {
                            toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                            $('#accountArticleTypeFormDetailModal').modal('hide');
                            document.getElementById('btnAccountArticleTypeSave').innerHTML = "<i class='fa fa-save'></i> Save";
                            $("#btnAccountArticleTypeSave").prop("disabled", false);
                            $("#btnAccountArticleTypeCloseFormDetailModal").prop("disabled", false);
                        }
                    }
                });
            } else {
                $.ajax({
                    type: "PUT",
                    url: '/api/chartOfAccounts/accountArticleType/update/' + accountArticleTypeId,
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    data: accountArticleTypeData,
                    statusCode: {
                        200: function () {
                            toastr.success("Update Successful");
                            $('#accountArticleTypeFormDetailModal').modal('hide');
                            createAccountArticleTypeFlexGrid();
                        },
                        404: function (message) {
                            toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                            $('#accountArticleTypeFormDetailModal').modal('hide');
                            document.getElementById('btnAccountArticleTypeSave').innerHTML = "<i class='fa fa-save'></i> Save";
                            $("#btnAccountArticleTypeSave").prop("disabled", false);
                            $("#btnAccountArticleTypeCloseFormDetailModal").prop("disabled", false);
                        },
                        400: function (message) {
                            toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                            $('#accountArticleTypeFormDetailModal').modal('hide');
                            document.getElementById('btnAccountArticleTypeSave').innerHTML = "<i class='fa fa-save'></i> Save";
                            $("#btnAccountArticleTypeSave").prop("disabled", false);
                            $("#btnAccountArticleTypeCloseFormDetailModal").prop("disabled", false);
                        },
                        500: function (message) {
                            toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                            $('#accountArticleTypeFormDetailModal').modal('hide');
                            document.getElementById('btnAccountArticleTypeSave').innerHTML = "<i class='fa fa-save'></i> Save";
                            $("#btnAccountArticleTypeSave").prop("disabled", false);
                            $("#btnAccountArticleTypeCloseFormDetailModal").prop("disabled", false);
                        }
                    }
                });
            }
        }

        // ===========================
        // Delete Account Article Type
        // ===========================
        function btnAccountArticleTypeDeleteOnclick() {
            $('#accountArticleTypeConfirmDeleteModal').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById('btnAccountArticleTypeConfirmDelete').innerHTML = "<i class='fa fa-trash'></i> Delete";
            $("#btnAccountArticleTypeConfirmDelete").prop("disabled", false);
            $("#btnAccountArticleTypeCloseConfirmDeleteModal").prop("disabled", false);
        }

        // ===================================
        // Confirm Delete Account Article Type
        // ===================================
        function btnAccountArticleTypeConfirmDeleteOnclick() {
            document.getElementById('btnAccountArticleTypeConfirmDelete').innerHTML = "<i class='fa fa-trash'></i> Deleting...";
            $("#btnAccountArticleTypeConfirmDelete").prop("disabled", true);
            $("#btnAccountArticleTypeCloseConfirmDeleteModal").prop("disabled", true);

            accountArticleTypesCollectionView.editItem(accountArticleTypesCollectionView.currentItem);
            var accountArticleTypeId = accountArticleTypesCollectionView.currentEditItem.Id;
            $.ajax({
                url: '/api/chartOfAccounts/accountArticleType/delete/' + accountArticleTypeId,
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Delete Successful");
                        $('#accountArticleTypeConfirmDeleteModal').modal('hide');
                        createAccountArticleTypeFlexGrid();
                    },
                    404: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                        $('#accountArticleTypeConfirmDeleteModal').modal('hide');
                        document.getElementById('btnAccountArticleTypeConfirmDelete').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $("#btnAccountArticleTypeConfirmDelete").prop("disabled", false);
                        $("#btnAccountArticleTypeCloseConfirmDeleteModal").prop("disabled", false);
                    },
                    400: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                        $('#accountArticleTypeConfirmDeleteModal').modal('hide');
                        document.getElementById('btnAccountArticleTypeConfirmDelete').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $("#btnAccountArticleTypeConfirmDelete").prop("disabled", false);
                        $("#btnAccountArticleTypeCloseConfirmDeleteModal").prop("disabled", false);
                    },
                    500: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                        $('#accountArticleTypeConfirmDeleteModal').modal('hide');
                        document.getElementById('btnAccountArticleTypeConfirmDelete').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $("#btnAccountArticleTypeConfirmDelete").prop("disabled", false);
                        $("#btnAccountArticleTypeCloseConfirmDeleteModal").prop("disabled", false);
                    }
                }
            });
        }

        // ============
        // Tab Controls
        // ============
        $('#tabAccount').click(function () {
            $('#Account').show();
            $('#AccountType').hide();
            $('#AccountCashFlow').hide();
            $('#AccountCategory').hide();

            refreshAccountFlexGrid();
        });

        // ================================
        // Account Form Details Tab Control
        // ================================
        $('#tabAccountDetail').click(function () {
            $('#accountDetailAccount').show();
            $('#accountDetailArticleType').hide();

            $("#accountLoadingFormDetail").show();
            document.getElementById("accountLoadingFormDetail").innerHTML = 'Loading...';
            $("#accountFormDetail").hide();

            setTimeout(function () {
                $("#accountLoadingFormDetail").hide();
                $("#accountFormDetail").show();
            }, 500);
        });

        $('#tabAccountArticleTypeDetail').click(function () {
            $('#accountDetailAccount').hide();
            $('#accountDetailArticleType').show();

            if (accountId != 0) {
                $("#accountArticleTypeLoadingFormDetail").show();
                document.getElementById("accountArticleTypeLoadingFormDetail").innerHTML = 'Loading...';
                $("#accountArticleTypeFormDetail").hide();

                setTimeout(function () {
                    createAccountArticleTypeFlexGrid();
                }, 500);
            }
        });
    </script>

    <!-- ==================== -->
    <!-- Account Type Scripts -->
    <!-- ==================== -->
    <script type="text/javascript">
        // ==============================================================
        // Account Tyoe Collection View, Flex Grid and Navigation Buttons
        // ==============================================================
        var accountTypeCollectionView;
        var accountTypeFlexGrid = new wijmo.grid.FlexGrid('#accountTypeFlexGrid');
        var btnAccountTypeMoveToFirstPageGrid = document.getElementById('btnAccountTypeMoveToFirstPageGrid');
        var btnAccountTypeMoveToPreviousPageGrid = document.getElementById('btnAccountTypeMoveToPreviousPageGrid');
        var btnAccountTypeMoveToNextPageGrid = document.getElementById('btnAccountTypeMoveToNextPageGrid');
        var btnAccountTypeMoveToLastPageGrid = document.getElementById('btnAccountTypeMoveToLastPageGrid');
        var btnAccountTypeCurrentPageGrid = document.getElementById('btnAccountTypeCurrentPageGrid');

        // =========================
        // Account Data and Dropdown
        // =========================
        var accountTypeId = 0;
        var cboAccountCategory = new wijmo.input.ComboBox('#cboAccountCategory');

        // =============================
        // Create Combo Account Category
        // =============================
        function createCboAccountCategory(accountCategoryId) {
            var accountCategoriesObservableArray = new wijmo.collections.ObservableArray();

            $.ajax({
                url: '/api/chartOfAccounts/accountType/dropdown/list/accountCategory',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            accountCategoriesObservableArray.push({
                                Id: results[i]["Id"],
                                AccountCategory: results[i]["AccountCategory"]
                            });
                        }
                    }

                    var disabled = true;
                    if (results.length > 0) {
                        disabled = false;
                    }

                    cboAccountCategory.dispose();
                    cboAccountCategory = new wijmo.input.ComboBox('#cboAccountCategory', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: accountCategoriesObservableArray,
                        displayMemberPath: "AccountCategory",
                        selectedValuePath: "Id",
                        selectedValue: accountCategoryId
                    });

                    setTimeout(function () {
                        $("#accountTypeLoadingFormDetail").hide();
                        $("#accountTypeFormDetail").show();
                    }, 500);
                }
            });
        }

        // =====================
        // Get Account Type Data
        // =====================
        function getAccountTypeData() {
            NProgress.start();
            var accountTypeObservableArray = new wijmo.collections.ObservableArray;

            $.ajax({
                url: '/api/chartOfAccounts/accountType/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            accountTypeObservableArray.push({
                                EditId: "<button class='btn btn-primary btn-xs btn-block' onclick='btnAccountTypeEditOnclick()'><i class='fa fa-edit'></i> Edit</button>",
                                DeleteId: "<button class='btn btn-danger btn-xs btn-block' onclick='btnAccountTypeDeleteOnclick()'><i class='fa fa-trash'></i> Delete</button>",
                                Id: results[i]["Id"],
                                AccountTypeCode: results[i]["AccountTypeCode"],
                                AccountType: results[i]["AccountType"],
                                AccountCategoryId: results[i]["AccountCategoryId"],
                                AccountCategory: results[i]["AccountCategory"],
                                SubCategoryDescription: results[i]["SubCategoryDescription"],
                                IsLocked: results[i]["IsLocked"],
                                CreatedById: results[i]["CreatedById"],
                                CreatedBy: results[i]["CreatedBy"],
                                CreatedDateTime: results[i]["CreatedDateTime"],
                                UpdatedById: results[i]["UpdatedById"],
                                UpdatedBy: results[i]["UpdatedBy"],
                                UpdatedDateTime: results[i]["UpdatedDateTime"]
                            });
                        }
                    }

                    NProgress.done();
                }
            });

            return accountTypeObservableArray;
        }

        // =============================
        // Create Account Type Flex Grid
        // =============================
        function createAccountTypeFlexGrid() {
            accountTypeCollectionView = new wijmo.collections.CollectionView(getAccountTypeData());
            accountTypeCollectionView.canFilter = true;
            accountTypeCollectionView.pageSize = 15;

            var filterTextAccountType = '';
            $('#inpAccountTypeSearchFilter').keyup(function () {
                filterTextAccountType = this.value.toLowerCase();
                accountTypeCollectionView.refresh();
            });

            accountTypeCollectionView.filter = function (item) {
                return !filterTextAccountType || (item.AccountTypeCode.toLowerCase().indexOf(filterTextAccountType) > -1)
                                              || (item.AccountType.toLowerCase().indexOf(filterTextAccountType) > -1)
                                              || (item.AccountCategory.toLowerCase().indexOf(filterTextAccountType) > -1)
                                              || (item.SubCategoryDescription.toLowerCase().indexOf(filterTextAccountType) > -1);
            }

            accountTypeCollectionView.collectionChanged.addHandler(function (sender, args) {
                updateAccountTypeNavigationButtons();
            });

            accountTypeCollectionView.currentChanged.addHandler(function (sender, args) {
                updateAccountTypeFlexGridSelection();
            });

            accountTypeFlexGrid.dispose();
            accountTypeFlexGrid = new wijmo.grid.FlexGrid('#accountTypeFlexGrid');
            accountTypeFlexGrid.initialize({
                columns: [
                            @{
                                if (canEdit)
                                {
                                    <text>
                                        {
                                            "header": "Edit",
                                            "binding": "EditId",
                                            "width": 70,
                                            "align": "center",
                                            "allowResizing": false,
                                            "allowSorting": false,
                                            "isContentHtml": true
                                        },
                                    </text>
                                }
                                if (canDelete)
                                {
                                    <text>
                                        {
                                            "header": "Delete",
                                            "binding": "DeleteId",
                                            "width": 70,
                                            "align": "center",
                                            "allowResizing": false,
                                            "allowSorting": false,
                                            "isContentHtml": true
                                        },
                                    </text>
                                }
                            }
                            {
                                "header": "Code",
                                "binding": "AccountTypeCode",
                                "allowSorting": true,
                                "width": 100
                            },
                            {
                                "header": "Account Type",
                                "binding": "AccountType",
                                "allowSorting": true,
                                "width": "3*"
                            },
                            {
                                "header": "Account Category",
                                "binding": "AccountCategory",
                                "allowSorting": true,
                                "width": "3*"
                            },
                            {
                                "header": "Sub Category",
                                "binding": "SubCategoryDescription",
                                "allowSorting": true,
                                "width": "3*"
                            }
                ],
                autoGenerateColumns: false,
                itemsSource: accountTypeCollectionView,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            accountTypeFlexGrid.trackChanges = true;

            updateAccountTypeNavigationButtons();

            btnAccountTypeMoveToFirstPageGrid.addEventListener('click', function () {
                accountTypeCollectionView.moveToFirstPage();
                updateAccountTypeNavigationButtons();
            });

            btnAccountTypeMoveToPreviousPageGrid.addEventListener('click', function () {
                accountTypeCollectionView.moveToPreviousPage();
                updateAccountTypeNavigationButtons();
            });

            btnAccountTypeMoveToNextPageGrid.addEventListener('click', function () {
                accountTypeCollectionView.moveToNextPage();
                updateAccountTypeNavigationButtons();
            });

            btnAccountTypeMoveToLastPageGrid.addEventListener('click', function () {
                accountTypeCollectionView.moveToLastPage();
                updateAccountTypeNavigationButtons();
            });
        }

        // =======================================
        // Update Account Type Flex Grid Selection
        // =======================================
        function updateAccountTypeFlexGridSelection() {
            var item = accountTypeCollectionView.currentItem;
            document.getElementById('createdBy').innerHTML = item.CreatedBy;
            document.getElementById('createdDate').innerHTML = item.CreatedDateTime;
            document.getElementById('updatedBy').innerHTML = item.UpdatedBy;
            document.getElementById('updatedDate').innerHTML = item.UpdatedDateTime;
        }

        // ======================================
        // Update Account Type Navigation Buttons
        // ======================================
        function updateAccountTypeNavigationButtons() {
            if (accountTypeCollectionView.pageSize <= 0) {
                document.getElementById('accountTypeNavigationFlexGrid').style.display = 'none';
                return;
            }
            document.getElementById('accountTypeNavigationFlexGrid').style.display = 'block';
            if (accountTypeCollectionView.pageIndex === 0) {
                btnAccountTypeMoveToFirstPageGrid.setAttribute('disabled', 'disabled');
                btnAccountTypeMoveToPreviousPageGrid.setAttribute('disabled', 'disabled');
                btnAccountTypeMoveToNextPageGrid.removeAttribute('disabled');
                btnAccountTypeMoveToLastPageGrid.removeAttribute('disabled');
            } else if (accountTypeCollectionView.pageIndex === (accountTypeCollectionView.pageCount - 1)) {
                btnAccountTypeMoveToFirstPageGrid.removeAttribute('disabled');
                btnAccountTypeMoveToPreviousPageGrid.removeAttribute('disabled');
                btnAccountTypeMoveToLastPageGrid.setAttribute('disabled', 'disabled');
                btnAccountTypeMoveToNextPageGrid.setAttribute('disabled', 'disabled');
            } else {
                btnAccountTypeMoveToFirstPageGrid.removeAttribute('disabled');
                btnAccountTypeMoveToPreviousPageGrid.removeAttribute('disabled');
                btnAccountTypeMoveToNextPageGrid.removeAttribute('disabled');
                btnAccountTypeMoveToLastPageGrid.removeAttribute('disabled');
            }
            btnAccountTypeCurrentPageGrid.innerHTML = (accountTypeCollectionView.pageIndex + 1) + ' / ' + accountTypeCollectionView.pageCount;
        }

        // ==============================
        // Refresh Account Type Flex Grid
        // ==============================
        function refreshAccountTypeFlexGrid() {
            accountTypeCollectionView = new wijmo.collections.CollectionView(getAccountTypeData());
            accountTypeCollectionView.canFilter = true;
            accountTypeCollectionView.pageSize = 15;

            var filterTextAccountType = '';
            $('#inpAccountTypeSearchFilter').keyup(function () {
                filterTextAccountType = this.value.toLowerCase();
                accountTypeCollectionView.refresh();
            });

            accountTypeCollectionView.filter = function (item) {
                return !filterTextAccountType || (item.AccountTypeCode.toLowerCase().indexOf(filterTextAccountType) > -1)
                    || (item.AccountType.toLowerCase().indexOf(filterTextAccountType) > -1)
                    || (item.AccountCategory.toLowerCase().indexOf(filterTextAccountType) > -1)
                    || (item.SubCategoryDescription.toLowerCase().indexOf(filterTextAccountType) > -1);
            }

            accountTypeCollectionView.collectionChanged.addHandler(function (sender, args) {
                updateAccountTypeNavigationButtons();
            });

            accountTypeCollectionView.currentChanged.addHandler(function (sender, args) {
                updateAccountTypeFlexGridSelection();
            });

            accountTypeFlexGrid.itemsSource = accountTypeCollectionView;
            accountTypeFlexGrid.trackChanges = true;
        }

        // =============================
        // Account Type Entry Validation
        // =============================
        function accountTypeEntryValidation() {
            var isValid = true;
            $('.requiredAccountType').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                } else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            return isValid;
        }

        // ================
        // Add Account Type
        // ================
        function btnAccountTypeAddOnclick() {
            $('#accountTypeFormDetailModal').modal({
                show: true,
                backdrop: 'static'
            });

            $('.requiredAccountType').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            document.getElementById("accountTypeModalTitle").innerHTML = 'Add Account Type';
            $("#accountTypeLoadingFormDetail").show();
            document.getElementById("accountTypeLoadingFormDetail").innerHTML = 'Loading...';
            $("#accountTypeFormDetail").hide();

            document.getElementById('btnAccountTypeSave').innerHTML = "<i class='fa fa-save'></i> Save";
            $("#btnAccountTypeSave").prop("disabled", false);
            $("#btnAccountTypeCloseFormDetailModal").prop("disabled", false);

            accountTypeId = 0;
            document.getElementById('inpAccountTypeCode').value = "NA";
            document.getElementById('inpAccountType').value = "NA";
            document.getElementById('inpAccountTypeSubCategoryDescription').value = "NA";
            createCboAccountCategory(0);

            document.getElementById('inpAccountTypeCode').disabled = false;
            document.getElementById('inpAccountType').disabled = false;
            document.getElementById('inpAccountTypeSubCategoryDescription').disabled = false;
        }

        // =================
        // Edit Account Type
        // =================
        function btnAccountTypeEditOnclick() {
            $('#accountTypeFormDetailModal').modal({
                show: true,
                backdrop: 'static'
            });

            $('.requiredAccountType').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            document.getElementById("accountTypeModalTitle").innerHTML = 'Edit Account Type';
            $("#accountTypeLoadingFormDetail").show();
            document.getElementById("accountTypeLoadingFormDetail").innerHTML = 'Loading...';
            $("#accountTypeFormDetail").hide();

            document.getElementById('btnAccountTypeSave').innerHTML = "<i class='fa fa-save'></i> Save";
            $("#btnAccountTypeSave").prop("disabled", false);
            $("#btnAccountTypeCloseFormDetailModal").prop("disabled", false);

            accountTypeCollectionView.editItem(accountTypeCollectionView.currentItem);
            var accountType = accountTypeCollectionView.currentEditItem;

            accountTypeId = accountType.Id;
            document.getElementById('inpAccountTypeCode').value = accountType.AccountTypeCode;
            document.getElementById('inpAccountType').value = accountType.AccountType;
            createCboAccountCategory(accountType.AccountCategoryId);
            document.getElementById('inpAccountTypeSubCategoryDescription').value = accountType.SubCategoryDescription;

            document.getElementById('inpAccountTypeCode').disabled = false;
            document.getElementById('inpAccountType').disabled = false;
            document.getElementById('inpAccountTypeSubCategoryDescription').disabled = false;
        }

        // =================
        // Save Account Type
        // =================
        function btnAccountTypeSaveOnclick() {
            var accountTypeObject = new Object();
            accountTypeObject.AccountTypeCode = document.getElementById('inpAccountTypeCode').value;
            accountTypeObject.AccountType = document.getElementById('inpAccountType').value;
            accountTypeObject.AccountCategoryId = cboAccountCategory.selectedValue;
            accountTypeObject.SubCategoryDescription = document.getElementById('inpAccountTypeSubCategoryDescription').value;
            var data = JSON.stringify(accountTypeObject);

            if (accountTypeEntryValidation()) {
                document.getElementById('btnAccountTypeSave').innerHTML = "<i class='fa fa-save'></i> Saving...";
                $("#btnAccountTypeSave").prop("disabled", true);
                $("#btnAccountTypeCloseFormDetailModal").prop("disabled", true);

                if (accountTypeId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/chartOfAccounts/accountType/add',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: data,
                        statusCode: {
                            200: function () {
                                toastr.success("Save Successful");
                                $('#accountTypeFormDetailModal').modal('hide');
                                refreshAccountTypeFlexGrid();
                            },
                            404: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                                $('#accountTypeFormDetailModal').modal('hide');
                                document.getElementById('btnAccountTypeSave').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#btnAccountTypeSave").prop("disabled", false);
                                $("#btnAccountTypeCloseFormDetailModal").prop("disabled", false);
                            },
                            400: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                                $('#accountTypeFormDetailModal').modal('hide');
                                document.getElementById('btnAccountTypeSave').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#btnAccountTypeSave").prop("disabled", false);
                                $("#btnAccountTypeCloseFormDetailModal").prop("disabled", false);
                            },
                            500: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                                $('#accountTypeFormDetailModal').modal('hide');
                                document.getElementById('btnAccountTypeSave').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#btnAccountTypeSave").prop("disabled", false);
                                $("#btnAccountTypeCloseFormDetailModal").prop("disabled", false);
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/chartOfAccounts/accountType/update/' + accountTypeId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: data,
                        statusCode: {
                            200: function () {
                                toastr.success("Update Successful");
                                $('#accountTypeFormDetailModal').modal('hide');
                                refreshAccountTypeFlexGrid();
                            },
                            404: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                                $('#accountTypeFormDetailModal').modal('hide');
                                document.getElementById('btnAccountTypeSave').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#btnAccountTypeSave").prop("disabled", false);
                                $("#btnAccountTypeCloseFormDetailModal").prop("disabled", false);
                            },
                            400: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                                $('#accountTypeFormDetailModal').modal('hide');
                                document.getElementById('btnAccountTypeSave').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#btnAccountTypeSave").prop("disabled", false);
                                $("#btnAccountTypeCloseFormDetailModal").prop("disabled", false);
                            },
                            500: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                                $('#accountTypeFormDetailModal').modal('hide');
                                document.getElementById('btnAccountTypeSave').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#btnAccountTypeSave").prop("disabled", false);
                                $("#btnAccountTypeCloseFormDetailModal").prop("disabled", false);
                            }
                        }
                    });
                }
            } else {
                toastr.error("Invalid Entry");
            }
        }

        // =========================
        // Close Account Type Button
        // =========================
        function btnAccountTypeCloseOnclick() {
            window.location = '/Software';
        }

        // ===================
        // Delete Account Type
        // ===================
        function btnAccountTypeDeleteOnclick() {
            accountTypeCollectionView.editItem(accountTypeCollectionView.currentItem);
            var accountType = accountTypeCollectionView.currentEditItem;

            $('#accountTypeConfirmDeleteModal').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById('btnAccountTypeConfirmDelete').innerHTML = "<i class='fa fa-trash'></i> Delete";
            $("#btnAccountTypeConfirmDelete").prop("disabled", false);
            $("#btnAccountTypeCloseConfirmDeleteModal").prop("disabled", false);
        }

        // ===========================
        // Confirm Delete Account Type
        // ===========================
        function btnAccountTypeConfirmDeleteOnclick() {
            document.getElementById('btnAccountTypeConfirmDelete').innerHTML = "<i class='fa fa-trash'></i> Deleting...";
            $("#btnAccountTypeConfirmDelete").prop("disabled", true);
            $("#btnAccountTypeCloseConfirmDeleteModal").prop("disabled", true);

            accountTypeCollectionView.editItem(accountTypeCollectionView.currentItem);
            var id = accountTypeCollectionView.currentEditItem.Id;
            $.ajax({
                url: '/api/chartOfAccounts/accountType/delete/' + id,
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Delete Successful");
                        $('#accountTypeConfirmDeleteModal').modal('hide');
                        refreshAccountTypeFlexGrid();
                    },
                    404: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                        $('#accountTypeConfirmDeleteModal').modal('hide');
                        document.getElementById('btnAccountTypeConfirmDelete').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $("#btnAccountTypeConfirmDelete").prop("disabled", false);
                        $("#btnAccountTypeCloseConfirmDeleteModal").prop("disabled", false);
                    },
                    400: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                        $('#accountTypeConfirmDeleteModal').modal('hide');
                        document.getElementById('btnAccountTypeConfirmDelete').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $("#btnAccountTypeConfirmDelete").prop("disabled", false);
                        $("#btnAccountTypeCloseConfirmDeleteModal").prop("disabled", false);
                    },
                    500: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                        $('#accountTypeConfirmDeleteModal').modal('hide');
                        document.getElementById('btnAccountTypeConfirmDelete').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $("#btnAccountTypeConfirmDelete").prop("disabled", false);
                        $("#btnAccountTypeCloseConfirmDeleteModal").prop("disabled", false);
                    }
                }
            });
        }

        // ============
        // Tab Controls
        // ============
        $('#createAccountTypeFlexGridId').click(function () {
            $('#Account').hide();
            $('#AccountType').show();
            $('#AccountCashFlow').hide();
            $('#AccountCategory').hide();
            createAccountTypeFlexGrid();
            window.createAccountTypeFlexGrid = function () {
                return true;
            }

            refreshAccountTypeFlexGrid();
        });
    </script>

    <!-- ========================= -->
    <!-- Account Cash Flow Scripts -->
    <!-- ========================= -->
    <script type="text/javascript">
        // ================
        // GLOBAL Variables
        // ================
        var accountCashFlows;
        var accountCashFlowFlexGrid = new wijmo.grid.FlexGrid('#accountCashFlowFlexGrid');
        var btnAccountMoveToFirstPageGridCashFlow;
        var btnAccountMoveToPreviousPageGridCashFlow;
        var btnAccountMoveToNextPageGridCashFlow;
        var btnAccountMoveToLastPageGridCashFlow;
        var btnAccountCashFlowCurrentPageGrid;
        var accountCashFlowId = 0;

        // ==========================
        // GET Account Cash Flow List
        // ==========================
        function getAccountDataCashFlow() {
            var accountCashFlowsObservableArray = new wijmo.collections.ObservableArray;
            NProgress.start();
            $.ajax({
                url: '/api/chartOfAccounts/accountCashFlow/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            accountCashFlowsObservableArray.push({
                                EditId: "<button class='btn btn-primary btn-xs btn-block' onclick='cmdAccountCashFlowEditButton_OnClick()'><i class='fa fa-edit'></i> Edit</button>",
                                DeleteId: "<button class='btn btn-danger btn-xs btn-block' onclick='cmdAccountCashFlowDeleteButton_OnClick()'><i class='fa fa-trash'></i> Delete</button>",
                                Id: results[i]["Id"],
                                AccountCashFlowCode: results[i]["AccountCashFlowCode"],
                                AccountCashFlow: results[i]["AccountCashFlow"],
                                IsLocked: results[i]["IsLocked"],
                                CreatedById: results[i]["CreatedById"],
                                CreatedBy: results[i]["CreatedBy"],
                                CreatedDateTime: results[i]["CreatedDateTime"],
                                UpdatedById: results[i]["UpdatedById"],
                                UpdatedBy: results[i]["UpdatedBy"],
                                UpdatedDateTime: results[i]["UpdatedDateTime"]
                            });
                        }
                    }

                    NProgress.done();
                }
            });

            return accountCashFlowsObservableArray;
        }

        // ==================================
        // Account cash flow entry validation
        // ==================================
        function accountCashFlowEntryValidation() {
            var isValid = true;
            $('.requiredAccountCashFlow').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                } else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            return isValid;
        }

        // =========================
        // ADD New Account Cash Flow
        // =========================
        function btnAccountCashFlowAddOnclick() {
            $('#accountCashFlowFormDetailModal').modal({
                show: true,
                backdrop: 'static'
            });

            $('.requiredAccountCashFlow').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            $("#accountCashFlowLoadingFormDetail").show();
            document.getElementById("accountCashFlowLoadingFormDetail").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#accountCashFlowFormDetail").hide();

            document.getElementById('btnAccountCashFlowSave').innerHTML = "<i class='fa fa-save'></i> Save";
            $("#btnAccountCashFlowSave").prop("disabled", false);
            $("#btnAccountCashFlowCloseFormDetailModal").prop("disabled", false);

            accountCashFlowId = 0;
            document.getElementById('inpAccountCashFlowCode').value = "NA";
            document.getElementById('inpAccountCashFlow').value = "NA";

            document.getElementById('inpAccountCashFlowCode').disabled = false;
            document.getElementById('inpAccountCashFlow').disabled = false;

            setTimeout(function () {
                $("#accountCashFlowLoadingFormDetail").hide();
                $("#accountCashFlowFormDetail").show();
            }, 500);
        }

        // =============================
        // EDIT Account Cash FLow Button
        // =============================
        function cmdAccountCashFlowEditButton_OnClick() {
            $('#accountCashFlowFormDetailModal').modal({
                show: true,
                backdrop: 'static'
            });

            $('.requiredAccountCashFlow').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            $("#accountCashFlowLoadingFormDetail").show();
            document.getElementById("accountCashFlowLoadingFormDetail").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#accountCashFlowFormDetail").hide();

            document.getElementById('btnAccountCashFlowSave').innerHTML = "<i class='fa fa-save'></i> Save";
            $("#btnAccountCashFlowSave").prop("disabled", false);
            $("#btnAccountCashFlowCloseFormDetailModal").prop("disabled", false);

            accountCashFlows.editItem(accountCashFlows.currentItem);
            var accountCashFlow = accountCashFlows.currentEditItem;
            accountCashFlowId = accountCashFlow.Id;
            document.getElementById('inpAccountCashFlowCode').value = accountCashFlow.AccountCashFlowCode;
            document.getElementById('inpAccountCashFlow').value = accountCashFlow.AccountCashFlow;

            document.getElementById('inpAccountCashFlowCode').disabled = false;
            document.getElementById('inpAccountCashFlow').disabled = false;

            setTimeout(function () {
                $("#accountCashFlowLoadingFormDetail").hide();
                $("#accountCashFlowFormDetail").show();
            }, 500);
        }

        // =============================
        // Save Account Cash Flow Button
        // =============================
        function btnAccountCashFlowSaveOnclick() {
            var accountCashFlowObject = new Object();
            accountCashFlowObject.AccountCashFlowCode = document.getElementById('inpAccountCashFlowCode').value;
            accountCashFlowObject.AccountCashFlow = document.getElementById('inpAccountCashFlow').value;
            var data = JSON.stringify(accountCashFlowObject);

            if (accountCashFlowEntryValidation()) {
                document.getElementById('btnAccountCashFlowSave').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Saving";
                $("#btnAccountCashFlowSave").prop("disabled", true);
                $("#btnAccountCashFlowCloseFormDetailModal").prop("disabled", true);

                if (accountCashFlowId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/chartOfAccounts/accountCashFlow/add',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: data,
                        statusCode: {
                            200: function () {
                                toastr.success("Save Successful");
                                $('#accountCashFlowFormDetailModal').modal('hide');
                                refreshCashFlowFlexGrid();
                            },
                            404: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                                $('#accountCashFlowFormDetailModal').modal('hide');
                                document.getElementById('btnAccountCashFlowSave').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#btnAccountCashFlowSave").prop("disabled", false);
                                $("#btnAccountCashFlowCloseFormDetailModal").prop("disabled", false);
                            },
                            400: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                                $('#accountCashFlowFormDetailModal').modal('hide');
                                document.getElementById('btnAccountCashFlowSave').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#btnAccountCashFlowSave").prop("disabled", false);
                                $("#btnAccountCashFlowCloseFormDetailModal").prop("disabled", false);
                            },
                            500: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                                $('#accountCashFlowFormDetailModal').modal('hide');
                                document.getElementById('btnAccountCashFlowSave').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#btnAccountCashFlowSave").prop("disabled", false);
                                $("#btnAccountCashFlowCloseFormDetailModal").prop("disabled", false);
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/chartOfAccounts/accountCashFlow/update/' + accountCashFlowId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: data,
                        statusCode: {
                            200: function () {
                                toastr.success("Update Successful");
                                $('#accountCashFlowFormDetailModal').modal('hide');
                                refreshCashFlowFlexGrid();
                            },
                            404: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                                $('#accountCashFlowFormDetailModal').modal('hide');
                                document.getElementById('btnAccountCashFlowSave').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#btnAccountCashFlowSave").prop("disabled", false);
                                $("#btnAccountCashFlowCloseFormDetailModal").prop("disabled", false);
                            },
                            400: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                                $('#accountCashFlowFormDetailModal').modal('hide');
                                document.getElementById('btnAccountCashFlowSave').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#btnAccountCashFlowSave").prop("disabled", false);
                                $("#btnAccountCashFlowCloseFormDetailModal").prop("disabled", false);
                            },
                            500: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                                $('#accountCashFlowFormDetailModal').modal('hide');
                                document.getElementById('btnAccountCashFlowSave').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#btnAccountCashFlowSave").prop("disabled", false);
                                $("#btnAccountCashFlowCloseFormDetailModal").prop("disabled", false);
                            }
                        }
                    });
                }
            } else {
                toastr.error("Invalid Entry");
            }
        }

        // ==============================
        // Close Account Cash Flow Button
        // ==============================
        function btnAccountCashFlowCloseOnclick() {
            window.location = '/Software';
        }

        // ================================
        // DELETE Account Cash Flow Buttons
        // ================================
        function cmdAccountCashFlowDeleteButton_OnClick() {
            accountCashFlows.editItem(accountCashFlows.currentItem);
            var accountCashFlow = accountCashFlows.currentEditItem;

            $('#accountCashFlowConfirmDeleteModal').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById('btnAccountCashFlowConfirmDelete').innerHTML = "<i class='fa fa-trash'></i> Delete";
            $("#btnAccountCashFlowConfirmDelete").prop("disabled", false);
            $("#btnAccountCashFlowCloseConfirmDeleteModal").prop("disabled", false);
        }

        // Account Cash Flow Confirm Delete Button
        function btnAccountCashFlowConfirmDeleteOnclick() {
            document.getElementById('btnAccountCashFlowConfirmDelete').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Deleting";
            $("#btnAccountCashFlowConfirmDelete").prop("disabled", true);
            $("#btnAccountCashFlowCloseConfirmDeleteModal").prop("disabled", true);

            accountCashFlows.editItem(accountCashFlows.currentItem);
            var accountCashFlowId = accountCashFlows.currentEditItem.Id;
            $.ajax({
                url: '/api/chartOfAccounts/accountCashFlow/delete/' + accountCashFlowId,
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Delete Successful");
                        $('#accountCashFlowConfirmDeleteModal').modal('hide');
                        refreshCashFlowFlexGrid();
                    },
                    404: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                        $('#accountCashFlowConfirmDeleteModal').modal('hide');
                        document.getElementById('btnAccountCashFlowConfirmDelete').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $("#btnAccountCashFlowConfirmDelete").prop("disabled", false);
                        $("#btnAccountCashFlowCloseConfirmDeleteModal").prop("disabled", false);
                    },
                    400: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                        $('#accountCashFlowConfirmDeleteModal').modal('hide');
                        document.getElementById('btnAccountCashFlowConfirmDelete').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $("#btnAccountCashFlowConfirmDelete").prop("disabled", false);
                        $("#btnAccountCashFlowCloseConfirmDeleteModal").prop("disabled", false);
                    },
                    500: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                        $('#accountCashFlowConfirmDeleteModal').modal('hide');
                        document.getElementById('btnAccountCashFlowConfirmDelete').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $("#btnAccountCashFlowConfirmDelete").prop("disabled", false);
                        $("#btnAccountCashFlowCloseConfirmDeleteModal").prop("disabled", false);
                    }
                }
            });
        }

        // ===================================
        // FlexGrid Selection for Account Type
        // ===================================
        function updateAccountFlexGridSelectionCashFlow() {
            var item = accountCashFlows.currentItem;
            document.getElementById('createdBy').innerHTML = item.CreatedBy;
            document.getElementById('createdDate').innerHTML = item.CreatedDateTime;
            document.getElementById('updatedBy').innerHTML = item.UpdatedBy;
            document.getElementById('updatedDate').innerHTML = item.UpdatedDateTime;
        }

        // ========================================
        // Navigation Buttons for Account Cash Flow
        // ========================================
        function updateAccountNavigationButtonsCashFlow() {
            if (accountCashFlows.pageSize <= 0) {
                document.getElementById('accountCashFlowNavigationPageGrid').style.display = 'none';
                return;
            }
            document.getElementById('accountCashFlowNavigationPageGrid').style.display = 'block';
            if (accountCashFlows.pageIndex === 0) {
                btnAccountMoveToFirstPageGridCashFlow.setAttribute('disabled', 'disabled');
                btnAccountMoveToPreviousPageGridCashFlow.setAttribute('disabled', 'disabled');
                btnAccountMoveToNextPageGridCashFlow.removeAttribute('disabled');
                btnAccountMoveToLastPageGridCashFlow.removeAttribute('disabled');
            } else if (accountCashFlows.pageIndex === (accountCashFlows.pageCount - 1)) {
                btnAccountMoveToFirstPageGridCashFlow.removeAttribute('disabled');
                btnAccountMoveToPreviousPageGridCashFlow.removeAttribute('disabled');
                btnAccountMoveToLastPageGridCashFlow.setAttribute('disabled', 'disabled');
                btnAccountMoveToNextPageGridCashFlow.setAttribute('disabled', 'disabled');
            } else {
                btnAccountMoveToFirstPageGridCashFlow.removeAttribute('disabled');
                btnAccountMoveToPreviousPageGridCashFlow.removeAttribute('disabled');
                btnAccountMoveToNextPageGridCashFlow.removeAttribute('disabled');
                btnAccountMoveToLastPageGridCashFlow.removeAttribute('disabled');
            }
            btnAccountCashFlowCurrentPageGrid.innerHTML = (accountCashFlows.pageIndex + 1) + ' / ' + accountCashFlows.pageCount;
        }

        function refreshCashFlowFlexGrid() {
            accountCashFlows = new wijmo.collections.CollectionView(getAccountDataCashFlow());
            accountCashFlows.canFilter = true;
            accountCashFlows.pageSize = 15;

            var filterTextAccountCashFlow = '';
            $('#inpAccountCashFlowSearchFilter').keyup(function () {
                filterTextAccountCashFlow = this.value.toLowerCase();
                accountCashFlows.refresh();
            });
            accountCashFlows.filter = function (item) {
                return !filterTextAccountCashFlow || (item.AccountCashFlowCode.toLowerCase().indexOf(filterTextAccountCashFlow) > -1)
                    || (item.AccountCashFlow.toLowerCase().indexOf(filterTextAccountCashFlow) > -1);
            }
            accountCashFlows.collectionChanged.addHandler(function (sender, args) {
                updateAccountNavigationButtonsCashFlow();
            });
            accountCashFlows.currentChanged.addHandler(function (sender, args) {
                updateAccountFlexGridSelectionCashFlow();
            });

            // Flex Grid for Account Cash Flow
            accountCashFlowFlexGrid.itemsSource = accountCashFlows;
            accountCashFlowFlexGrid.trackChanges = true;
        }

        // ===================================
        // On Page Load for Account Cash Flows
        // ===================================
        function accountCashFlowTab() {
            accountCashFlows = new wijmo.collections.CollectionView(getAccountDataCashFlow());
            accountCashFlows.canFilter = true;
            accountCashFlows.pageSize = 15;

            var filterTextAccountCashFlow = '';
            $('#inpAccountCashFlowSearchFilter').keyup(function () {
                filterTextAccountCashFlow = this.value.toLowerCase();
                accountCashFlows.refresh();
            });
            accountCashFlows.filter = function (item) {
                return !filterTextAccountCashFlow || (item.AccountCashFlowCode.toLowerCase().indexOf(filterTextAccountCashFlow) > -1)
                                                  || (item.AccountCashFlow.toLowerCase().indexOf(filterTextAccountCashFlow) > -1);
            }
            accountCashFlows.collectionChanged.addHandler(function (sender, args) {
                updateAccountNavigationButtonsCashFlow();
            });
            accountCashFlows.currentChanged.addHandler(function (sender, args) {
                updateAccountFlexGridSelectionCashFlow();
            });

            // Flex Grid for Account Cash Flow
            accountCashFlowFlexGrid.dispose();
            accountCashFlowFlexGrid = new wijmo.grid.FlexGrid('#accountCashFlowFlexGrid');
            accountCashFlowFlexGrid.initialize({
                columns: [
                            @{
                                if (canEdit)
                                {
                                    <text>
                                        {
                                            "header": "Edit",
                                            "binding": "EditId",
                                            "width": 70,
                                            "align": "center",
                                            "allowResizing": false,
                                            "allowSorting": false,
                                            "isContentHtml": true
                                        },
                                    </text>
                                }
                                if (canDelete)
                                {
                                    <text>
                                        {
                                            "header": "Delete",
                                            "binding": "DeleteId",
                                            "width": 70,
                                            "align": "center",
                                            "allowResizing": false,
                                            "allowSorting": false,
                                            "isContentHtml": true
                                        },
                                    </text>
                                }
                            }
                            {
                                "header": "Code",
                                "binding": "AccountCashFlowCode",
                                "allowSorting": true,
                                "width": 100
                            },
                            {
                                "header": "Account Cash FLow",
                                "binding": "AccountCashFlow",
                                "allowSorting": true,
                                "width": "5*"
                            }
                ],
                autoGenerateColumns: false,
                itemsSource: accountCashFlows,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            accountCashFlowFlexGrid.trackChanges = true;

            // Navigation button for account cash flow
            btnAccountMoveToFirstPageGridCashFlow = document.getElementById('btnAccountCashFlowMoveToFirstPageGrid');
            btnAccountMoveToPreviousPageGridCashFlow = document.getElementById('btnAccountCashFlowMoveToPreviousPageGrid');
            btnAccountMoveToNextPageGridCashFlow = document.getElementById('btnAccountCashFlowMoveToNextPageGrid');
            btnAccountMoveToLastPageGridCashFlow = document.getElementById('btnAccountCashFlowMoveToLastPageGrid');
            btnAccountCashFlowCurrentPageGrid = document.getElementById('btnAccountCashFlowCurrentPageGrid');

            updateAccountNavigationButtonsCashFlow();

            btnAccountMoveToFirstPageGridCashFlow.addEventListener('click', function () {
                accountCashFlows.moveToFirstPage();
                updateAccountNavigationButtonsCashFlow();
            });
            btnAccountMoveToPreviousPageGridCashFlow.addEventListener('click', function () {
                accountCashFlows.moveToPreviousPage();
                updateAccountNavigationButtonsCashFlow();
            });
            btnAccountMoveToNextPageGridCashFlow.addEventListener('click', function () {
                accountCashFlows.moveToNextPage();
                updateAccountNavigationButtonsCashFlow();
            });
            btnAccountMoveToLastPageGridCashFlow.addEventListener('click', function () {
                accountCashFlows.moveToLastPage();
                updateAccountNavigationButtonsCashFlow();
            });

            var canAdd = "@ViewData["CanAdd"]";
            if (canAdd == "False") {
                $("#btnAccountCashFlowAdd").prop("disabled", true);
            }
        }

        $('#accountCashFlowTabId').click(function () {
            $('#Account').hide();
            $('#AccountType').hide();
            $('#AccountCashFlow').show();
            $('#AccountCategory').hide();
            accountCashFlowTab();
            window.accountCashFlowTab = function () {
                return true;
            }
            refreshCashFlowFlexGrid();
        });
    </script>

    <!-- ======================== -->
    <!-- Account Category Scripts -->
    <!-- ======================== -->
    <script type="text/javascript">
        // ================
        // GLOBAL Variables
        // ================
        var accountCategories;
        var accountCategoryFlexGrid = new wijmo.grid.FlexGrid('#accountCategoryFlexGrid');
        var btnAccountMoveToFirstPageGridCategory;
        var btnAccountMoveToPreviousPageGridCategory;
        var btnAccountMoveToNextPageGridCategory;
        var btnAccountMoveToLastPageGridCategory;
        var btnAccountCategoryCurrentPageGrid;
        var accountCategoryId = 0;

        // ==========================
        // GET Account Category List
        // ==========================
        function getAccountDataCategory() {
            var accountCategoriesObservableArray = new wijmo.collections.ObservableArray;
            NProgress.start();
            $.ajax({
                url: '/api/chartOfAccounts/accountCategory/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            accountCategoriesObservableArray.push({
                                EditId: "<button class='btn btn-primary btn-xs btn-block' onclick='cmdAccountCategoryEditButton_OnClick()'><i class='fa fa-edit'></i> Edit</button>",
                                DeleteId: "<button class='btn btn-danger btn-xs btn-block' onclick='cmdAccountCategoryDeleteButton_OnClick()'><i class='fa fa-trash'></i> Delete</button>",
                                Id: results[i]["Id"],
                                AccountCategoryCode: results[i]["AccountCategoryCode"],
                                AccountCategory: results[i]["AccountCategory"],
                                IsLocked: results[i]["IsLocked"],
                                CreatedById: results[i]["CreatedById"],
                                CreatedBy: results[i]["CreatedBy"],
                                CreatedDateTime: results[i]["CreatedDateTime"],
                                UpdatedById: results[i]["UpdatedById"],
                                UpdatedBy: results[i]["UpdatedBy"],
                                UpdatedDateTime: results[i]["UpdatedDateTime"]
                            });
                        }
                    }

                    NProgress.done();
                }
            });

            return accountCategoriesObservableArray;
        }

        // =================================
        // Account Category Entry Validation
        // =================================
        function accountCategoryEntryValidation() {
            var isValid = true;
            $('.requiredAccountCategory').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                } else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            return isValid;
        }

        // ========================
        // ADD New Account Category
        // ========================
        function btnAccountCategoryAddOnclick() {
            $('#accountCategoryFormDetailModal').modal({
                show: true,
                backdrop: 'static'
            });

            $('.requiredAccountCategory').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            $("#accountCategoryLoadingFormDetail").show();
            document.getElementById("accountCategoryLoadingFormDetail").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#accountCategoryFormDetail").hide();

            document.getElementById('btnAccountCategorySave').innerHTML = "<i class='fa fa-save'></i> Save";
            $("#btnAccountCategorySave").prop("disabled", false);
            $("#btnAccountCategoryCloseFormDetailModal").prop("disabled", false);

            accountCategoryId = 0;
            document.getElementById('inpAccountCategoryCode').value = "NA";
            document.getElementById('inpAccountCategory').value = "NA";

            document.getElementById('inpAccountCategoryCode').disabled = false;
            document.getElementById('inpAccountCategory').disabled = false;

            setTimeout(function () {
                $("#accountCategoryLoadingFormDetail").hide();
                $("#accountCategoryFormDetail").show();
            }, 500);
        }

        // ============================
        // EDIT Account Category Button
        // ============================
        function cmdAccountCategoryEditButton_OnClick() {
            $('#accountCategoryFormDetailModal').modal({
                show: true,
                backdrop: 'static'
            });

            $('.requiredAccountCategory').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            $("#accountCategoryLoadingFormDetail").show();
            document.getElementById("accountCategoryLoadingFormDetail").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#accountCategoryFormDetail").hide();

            document.getElementById('btnAccountCategorySave').innerHTML = "<i class='fa fa-save'></i> Save";
            $("#btnAccountCategorySave").prop("disabled", false);
            $("#btnAccountCategoryCloseFormDetailModal").prop("disabled", false);

            accountCategories.editItem(accountCategories.currentItem);
            var accountCategory = accountCategories.currentEditItem;
            accountCategoryId = accountCategory.Id;
            document.getElementById('inpAccountCategoryCode').value = accountCategory.AccountCategoryCode;
            document.getElementById('inpAccountCategory').value = accountCategory.AccountCategory;

            document.getElementById('inpAccountCategoryCode').disabled = false;
            document.getElementById('inpAccountCategory').disabled = false;

            setTimeout(function () {
                $("#accountCategoryLoadingFormDetail").hide();
                $("#accountCategoryFormDetail").show();
            }, 500);
        }

        // ============================
        // Save Account Category Button
        // ============================
        function btnAccountCategorySaveOnclick() {
            var accountCategoryObject = new Object();
            accountCategoryObject.AccountCategoryCode = document.getElementById('inpAccountCategoryCode').value;
            accountCategoryObject.AccountCategory = document.getElementById('inpAccountCategory').value;
            var data = JSON.stringify(accountCategoryObject);

            if (accountCategoryEntryValidation()) {
                document.getElementById('btnAccountCategorySave').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Saving";
                $("#btnAccountCategorySave").prop("disabled", true);
                $("#btnAccountCategoryCloseFormDetailModal").prop("disabled", true);

                if (accountCategoryId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/chartOfAccounts/accountCategory/add',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: data,
                        statusCode: {
                            200: function () {
                                toastr.success("Save Successful");
                                $('#accountCategoryFormDetailModal').modal('hide');
                                refreshAccountCategory();
                            },
                            404: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                                $('#accountCategoryFormDetailModal').modal('hide');
                                document.getElementById('btnAccountCategorySave').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#btnAccountCategorySave").prop("disabled", false);
                                $("#btnAccountCategoryCloseFormDetailModal").prop("disabled", false);
                            },
                            400: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                                $('#accountCategoryFormDetailModal').modal('hide');
                                document.getElementById('btnAccountCategorySave').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#btnAccountCategorySave").prop("disabled", false);
                                $("#btnAccountCategoryCloseFormDetailModal").prop("disabled", false);
                            },
                            500: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                                $('#accountCategoryFormDetailModal').modal('hide');
                                document.getElementById('btnAccountCategorySave').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#btnAccountCategorySave").prop("disabled", false);
                                $("#btnAccountCategoryCloseFormDetailModal").prop("disabled", false);
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/chartOfAccounts/accountCategory/update/' + accountCategoryId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: data,
                        statusCode: {
                            200: function () {
                                toastr.success("Update Successful");
                                $('#accountCategoryFormDetailModal').modal('hide');
                                refreshAccountCategory();
                            },
                            404: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                                $('#accountCategoryFormDetailModal').modal('hide');
                                document.getElementById('btnAccountCategorySave').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#btnAccountCategorySave").prop("disabled", false);
                                $("#btnAccountCategoryCloseFormDetailModal").prop("disabled", false);
                            },
                            400: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                                $('#accountCategoryFormDetailModal').modal('hide');
                                document.getElementById('btnAccountCategorySave').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#btnAccountCategorySave").prop("disabled", false);
                                $("#btnAccountCategoryCloseFormDetailModal").prop("disabled", false);
                            },
                            500: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                                $('#accountCategoryFormDetailModal').modal('hide');
                                document.getElementById('btnAccountCategorySave').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#btnAccountCategorySave").prop("disabled", false);
                                $("#btnAccountCategoryCloseFormDetailModal").prop("disabled", false);
                            }
                        }
                    });
                }
            } else {
                toastr.error("Invalid Entry");
            }
        }

        // =============================
        // Close Account Category Button
        // =============================
        function btnAccountCategoryCloseOnclick() {
            window.location = '/Software';
        }

        // ===============================
        // DELETE Account Category Buttons
        // ===============================
        function cmdAccountCategoryDeleteButton_OnClick() {
            accountCategories.editItem(accountCategories.currentItem);
            var accountCategory = accountCategories.currentEditItem;

            $('#accountCategoryConfirmDeleteModal').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById('btnAccountCategoryConfirmDelete').innerHTML = "<i class='fa fa-trash'></i> Delete";
            $("#btnAccountCategoryConfirmDelete").prop("disabled", false);
            $("#btnAccountCategoryCloseConfirmDeleteModal").prop("disabled", false);
        }

        // Account Category Confirm Delete Button
        function btnAccountCategoryConfirmDeleteOnclick() {
            document.getElementById('btnAccountCategoryConfirmDelete').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Deleting";
            $("#btnAccountCategoryConfirmDelete").prop("disabled", true);
            $("#btnAccountCategoryCloseConfirmDeleteModal").prop("disabled", true);

            accountCategories.editItem(accountCategories.currentItem);
            var id = accountCategories.currentEditItem.Id;
            $.ajax({
                url: '/api/chartOfAccounts/accountCategory/delete/' + id,
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Delete Successful");
                        $('#accountCategoryConfirmDeleteModal').modal('hide');
                        refreshAccountCategory();
                    },
                    404: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                        $('#accountCategoryConfirmDeleteModal').modal('hide');
                        document.getElementById('btnAccountCategoryConfirmDelete').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $("#btnAccountCategoryConfirmDelete").prop("disabled", false);
                        $("#btnAccountCategoryCloseConfirmDeleteModal").prop("disabled", false);
                    },
                    400: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                        $('#accountCategoryConfirmDeleteModal').modal('hide');
                        document.getElementById('btnAccountCategoryConfirmDelete').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $("#btnAccountCategoryConfirmDelete").prop("disabled", false);
                        $("#btnAccountCategoryCloseConfirmDeleteModal").prop("disabled", false);
                    },
                    500: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                        $('#accountCategoryConfirmDeleteModal').modal('hide');
                        document.getElementById('btnAccountCategoryConfirmDelete').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $("#btnAccountCategoryConfirmDelete").prop("disabled", false);
                        $("#btnAccountCategoryCloseConfirmDeleteModal").prop("disabled", false);
                    }
                }
            });
        }

        // =======================================
        // FlexGrid Selection for Account Category
        // =======================================
        function updateAccountFlexGridSelectionCategory() {
            var item = accountCategories.currentItem;
            document.getElementById('createdBy').innerHTML = item.CreatedBy;
            document.getElementById('createdDate').innerHTML = item.CreatedDateTime;
            document.getElementById('updatedBy').innerHTML = item.UpdatedBy;
            document.getElementById('updatedDate').innerHTML = item.UpdatedDateTime;
        }

        // ========================================
        // Navigation Buttons for Account Category
        // ========================================
        function updateAccountNavigationButtonsCategory() {
            if (accountCategories.pageSize <= 0) {
                document.getElementById('accountCategoryNavigationPageGrid').style.display = 'none';
                return;
            }
            document.getElementById('accountCategoryNavigationPageGrid').style.display = 'block';
            if (accountCategories.pageIndex === 0) {
                btnAccountMoveToFirstPageGridCategory.setAttribute('disabled', 'disabled');
                btnAccountMoveToPreviousPageGridCategory.setAttribute('disabled', 'disabled');
                btnAccountMoveToNextPageGridCategory.removeAttribute('disabled');
                btnAccountMoveToLastPageGridCategory.removeAttribute('disabled');
            } else if (accountCategories.pageIndex === (accountCategories.pageCount - 1)) {
                btnAccountMoveToFirstPageGridCategory.removeAttribute('disabled');
                btnAccountMoveToPreviousPageGridCategory.removeAttribute('disabled');
                btnAccountMoveToLastPageGridCategory.setAttribute('disabled', 'disabled');
                btnAccountMoveToNextPageGridCategory.setAttribute('disabled', 'disabled');
            } else {
                btnAccountMoveToFirstPageGridCategoryw.removeAttribute('disabled');
                btnAccountMoveToPreviousPageGridCategory.removeAttribute('disabled');
                btnAccountMoveToNextPageGridCategory.removeAttribute('disabled');
                btnAccountMoveToLastPageGridCategory.removeAttribute('disabled');
            }
            btnAccountCategoryCurrentPageGrid.innerHTML = (accountCategories.pageIndex + 1) + ' / ' + accountCategories.pageCount;
        }

        function refreshAccountCategory() {
            accountCategories = new wijmo.collections.CollectionView(getAccountDataCategory());
            accountCategories.canFilter = true;
            accountCategories.pageSize = 15;

            var filterTextAccountCategory = '';
            $('#inpAccountCategorySearchFilter').keyup(function () {
                filterTextAccountCategory = this.value.toLowerCase();
                accountCategories.refresh();
            });
            accountCategories.filter = function (item) {
                return !filterTextAccountCategory || (item.AccountCategoryCode.toLowerCase().indexOf(filterTextAccountCategory) > -1)
                    || (item.AccountCategory.toLowerCase().indexOf(filterTextAccountCategory) > -1);
            }
            accountCategories.collectionChanged.addHandler(function (sender, args) {
                updateAccountNavigationButtonsCategory();
            });
            accountCategories.currentChanged.addHandler(function (sender, args) {
                updateAccountFlexGridSelectionCategory();
            });

            // Flex Grid for Account Category
            accountCategoryFlexGrid.itemsSource = accountCategories;
            accountCategoryFlexGrid.trackChanges = true;
        }

        // =================================
        // On Page Load for Account Category
        // =================================
        function accountCategoryTab() {
            accountCategories = new wijmo.collections.CollectionView(getAccountDataCategory());
            accountCategories.canFilter = true;
            accountCategories.pageSize = 15;

            var filterTextAccountCategory = '';
            $('#inpAccountCategorySearchFilter').keyup(function () {
                filterTextAccountCategory = this.value.toLowerCase();
                accountCategories.refresh();
            });
            accountCategories.filter = function (item) {
                return !filterTextAccountCategory || (item.AccountCategoryCode.toLowerCase().indexOf(filterTextAccountCategory) > -1)
                                                  || (item.AccountCategory.toLowerCase().indexOf(filterTextAccountCategory) > -1);
            }
            accountCategories.collectionChanged.addHandler(function (sender, args) {
                updateAccountNavigationButtonsCategory();
            });
            accountCategories.currentChanged.addHandler(function (sender, args) {
                updateAccountFlexGridSelectionCategory();
            });

            // Flex Grid for Account Category
            accountCategoryFlexGrid.dispose();
            accountCategoryFlexGrid = new wijmo.grid.FlexGrid('#accountCategoryFlexGrid');
            accountCategoryFlexGrid.initialize({
                columns: [
                            @{
                                if (canEdit)
                                {
                                    <text>
                                        {
                                            "header": "Edit",
                                            "binding": "EditId",
                                            "width": 70,
                                            "align": "center",
                                            "allowResizing": false,
                                            "allowSorting": false,
                                            "isContentHtml": true
                                        },
                                    </text>
                                }
                                if (canDelete)
                                {
                                    <text>
                                        {
                                            "header": "Delete",
                                            "binding": "DeleteId",
                                            "width": 70,
                                            "align": "center",
                                            "allowResizing": false,
                                            "allowSorting": false,
                                            "isContentHtml": true
                                        },
                                    </text>
                                }
                            }
                            {
                                "header": "Code",
                                "binding": "AccountCategoryCode",
                                "allowSorting": true,
                                "width": 100
                            },
                            {
                                "header": "Account Category",
                                "binding": "AccountCategory",
                                "allowSorting": true,
                                "width": "5*"
                            }
                ],
                autoGenerateColumns: false,
                itemsSource: accountCategories,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            accountCategoryFlexGrid.trackChanges = true;

            btnAccountMoveToFirstPageGridCategory = document.getElementById('btnAccountCategoryMoveToFirstPageGrid');
            btnAccountMoveToPreviousPageGridCategory = document.getElementById('btnAccountCategoryMoveToPreviousPageGrid');
            btnAccountMoveToNextPageGridCategory = document.getElementById('btnAccountCategoryMoveToNextPageGrid');
            btnAccountMoveToLastPageGridCategory = document.getElementById('btnAccountCategoryMoveToLastPageGrid');
            btnAccountCategoryCurrentPageGrid = document.getElementById('btnAccountCategoryCurrentPageGrid');

            updateAccountNavigationButtonsCategory();

            btnAccountMoveToFirstPageGridCategory.addEventListener('click', function () {
                accountCashFlows.moveToFirstPage();
                updateAccountNavigationButtonsCashFlow();
            });
            btnAccountMoveToPreviousPageGridCategory.addEventListener('click', function () {
                accountCashFlows.moveToPreviousPage();
                updateAccountNavigationButtonsCashFlow();
            });
            btnAccountMoveToNextPageGridCategory.addEventListener('click', function () {
                accountCashFlows.moveToNextPage();
                updateAccountNavigationButtonsCashFlow();
            });
            btnAccountMoveToLastPageGridCategory.addEventListener('click', function () {
                accountCashFlows.moveToLastPage();
                updateAccountNavigationButtonsCashFlow();
            });

            var canAdd = "@ViewData["CanAdd"]";
            if (canAdd == "False") {
                $("#btnAccountCategoryAdd").prop("disabled", true);
            }
        }

        $('#accountCategoryTabId').click(function () {
            $('#Account').hide();
            $('#AccountType').hide();
            $('#AccountCashFlow').hide();
            $('#AccountCategory').show();
            accountCategoryTab();
            window.accountCategoryTab = function () {
                return true;
            }
            refreshAccountCategory();
        });

        $(document).ready(function () {
            $('#Account').show();
            $('#AccountType').hide();
            $('#AccountCashFlow').hide();
            $('#AccountCategory').hide();
            createAccountFlexGrid();

            $(document).on('show.bs.modal', '.modal', function (event) {
                var zIndex = 1040 + (10 * $('.modal:visible').length);
                $(this).css('z-index', zIndex);
                setTimeout(function () {
                    $('.modal-backdrop').not('.modal-stack').css('z-index', zIndex - 1).addClass('modal-stack');
                }, 0);
            });

            $(document).on('hidden.bs.modal', '.modal', function () {
                $('.modal:visible').length && $(document.body).addClass('modal-open');
            });
        });
    </script>

    <script type="text/javascript">
        var cboUserBranches = new wijmo.input.ComboBox('#cboUserBranches');
        function getUserBranches() {
            $("#loadingUserBranches").show();
            document.getElementById("loadingUserBranches").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#userBranchContent").hide();

            $('#userBranchesModal').modal({ show: true, backdrop: 'static' });

            document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
            $("#updateUserBranch").prop("disabled", false);
            $("#closeUserBranch").prop("disabled", false);

            var userBranchesObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/userBranch/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (userBranchesResults) {
                    if (userBranchesResults.length > 0) {
                        for (i = 0; i < userBranchesResults.length; i++) {
                            userBranchesObservableArray.push({
                                BranchId: userBranchesResults[i]["BranchId"],
                                Branch: userBranchesResults[i]["Branch"]
                            });
                        }
                    }

                    var currentBranch = "@ViewData["BranchId"]";
                    cboUserBranches.dispose();
                    cboUserBranches = new wijmo.input.ComboBox('#cboUserBranches', {
                        isEditable: false,
                        placeholder: "Select Branches",
                        itemsSource: userBranchesObservableArray,
                        displayMemberPath: "Branch",
                        selectedValuePath: "BranchId",
                        selectedValue: currentBranch
                    });

                    setTimeout(function () {
                        $("#loadingUserBranches").hide();
                        $("#userBranchContent").show();
                    }, 500)
                }
            });
        }

        function updateUserBranchOnclick() {
            document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Updating";
            $("#updateUserBranch").prop("disabled", true);
            $("#closeUserBranch").prop("disabled", true);

            var userBranchObject = new Object();
            userBranchObject.BranchId = cboUserBranches.selectedValue;
            var userBranchData = JSON.stringify(userBranchObject);

            $.ajax({
                type: "PUT",
                url: '/api/userBranch/update',
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: userBranchData,
                statusCode: {
                    200: function () {
                        toastr.success("Update Successful");
                        window.setTimeout(function () {
                            location.reload()
                        }, 1000);
                    },
                    404: function () {
                        toastr.error("Not Found");
                        document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
                        $("#updateUserBranch").prop("disabled", false);
                        $("#closeUserBranch").prop("disabled", false);
                    },
                    500: function () {
                        toastr.error("Bad Request");
                        document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
                        $("#updateUserBranch").prop("disabled", false);
                        $("#closeUserBranch").prop("disabled", false);
                    }
                }
            });
        }
    </script>
    <script type="text/javascript">
        var slideLeft = new Menu({
            wrapper: '#o-wrapper',
            type: 'slide-left',
            menuOpenerClass: '.c-button',
            maskId: '#c-mask'
        });

        var slideLeftBtn = document.querySelector('#c-button--slide-left');

        slideLeftBtn.addEventListener('click', function (e) {
            e.preventDefault;
            slideLeft.open();
        });
    </script>
</body>
</html>