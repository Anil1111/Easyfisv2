@model easyfis.Entities.MstUserForm
@{
    // =====================
    // User Rights Variables
    // =====================
    var canAdd = Model.CanAdd;
    var canEdit = Model.CanEdit;
    var canDelete = Model.CanDelete;
    var canLock = Model.CanLock;
    var canUnlock = Model.CanUnlock;
    var canPrint = Model.CanPrint;
}
<!DOCTYPE html>
<html>
<head>
    <!-- Meta -->
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">

    <!-- Title of the Page -->
    <link rel="shortcut icon" href="~/Images/icon/easyfislogomini.ico">
    <title>Chart of Accounts</title>

    <!-- CSS StyleSheets-->
    @Styles.Render("~/Content/Software-css")
</head>
<body>
    <div id="o-wrapper" class="o-wrapper">
        <main class="o-content">
            @Html.Partial("_SoftwareHeader")
            <section class="content-header">
                <div class="container">
                    <h3>
                        Chart of Accounts
                    </h3>
                    <p>
                        <i class="fa fa-building-o fa-fw"></i> &nbsp; @ViewData["Company"] <br />
                        <i class="fa fa-home fa-fw"></i> &nbsp; <a href="#" onclick="getUserBranches()" style="color: white;">@ViewData["Branch"]</a>
                    </p>
                </div>
            </section>
            <section class="container">
                <ul class="nav nav-tabs pill-custom" role="tablist" id="myTab">
                    <li role="presentation" class="active"><a data-toggle="tab" href="#Account" id="accountTabId">Account</a></li>
                    <li role="presentation"><a data-toggle="tab" href="#AccountType" id="accountTypeTabId">Account Type</a></li>
                    <li role="presentation"><a data-toggle="tab" href="#AccountCashFlow" id="accountCashFlowTabId">Account Cash Flow</a></li>
                    <li role="presentation"><a data-toggle="tab" href="#AccountCategory" id="accountCategoryTabId">Account Category</a></li>
                </ul>
                <br />
                <div class="tab-content">
                    <div id="Account" class="tab-pane fade in active">
                        <div class="panel panel-default">
                            <div class="panel-heading">
                                <table style="width: 100%" border="0">
                                    <tr>
                                        <td style="width: 59%">
                                            <div class="input-group ">
                                                <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                                <input type="text" class="form-control" id="InputFilterAccount" placeholder="Search...">
                                            </div>
                                        </td>
                                        <td style="width: 1%"></td>
                                        <td style="width: 40%" align="right">
                                            @{
                                                if (canAdd)
                                                {
                                                    <button class="btn btn-primary" id="btnAddAccount" onclick="btnAddAccountOnclick()"><i class="fa fa-plus"></i> Add</button>
                                                }
                                            }
                                            <button class="btn btn-danger" onclick="btnCloseAccountOnclick()"><i class=" fa fa-times"></i> Close</button>
                                        </td>
                                    </tr>
                                </table>
                            </div>
                            <div class="panel-body">
                                <div id="accountGrid"></div>
                            </div>
                            <div class="panel-footer">
                                <div class="row">
                                    <div class="btn-group col-md-7" id="naviagtionPageGridAccount">
                                        <button type="button" class="btn btn-default" id="btnMoveToFirstPageGridAccount">
                                            <span class="glyphicon glyphicon-fast-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default" id="btnMoveToPreviousPageGridAccount">
                                            <span class="glyphicon glyphicon-step-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default" disabled style="width: 100px" id="btnCurrentPageGridAccount"></button>
                                        <button type="button" class="btn btn-default" id="btnMoveToNextPageGridAccount">
                                            <span class="glyphicon glyphicon-step-forward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default" id="btnMoveToLastPageGridAccount">
                                            <span class="glyphicon glyphicon-fast-forward"></span>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div id="AccountType" class="tab-pane fade">
                        <div class="panel panel-default">
                            <div class="panel-heading">
                                <table style="width: 100%" border="0">
                                    <tr>
                                        <td style="width: 59%">
                                            <div class="input-group ">
                                                <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                                <input type="text" class="form-control" id="InputFilterAccountType" placeholder="Search...">
                                            </div>
                                        </td>
                                        <td style="width: 1%"></td>
                                        <td style="width: 40%" align="right">
                                            @{
                                                if (canAdd)
                                                {
                                                    <button class="btn btn-primary" id="btnAddAccountType" onclick="btnAddAccountTypeOnclick()"><i class="fa fa-plus"></i> Add</button>
                                                }
                                            }
                                            <button class="btn btn-danger" onclick="btnCloseAccountTypeOnclick()"><i class=" fa fa-times"></i> Close</button>
                                        </td>
                                    </tr>
                                </table>
                            </div>
                            <div class="panel-body">
                                <div id="accountTypeGrid" class="grid" align="left"></div>
                            </div>
                            <div class="panel-footer">
                                <div class="row">
                                    <div class="btn-group col-md-7" id="naviagtionPageGridAccountType">
                                        <button type="button" class="btn btn-default" id="btnMoveToFirstPageGridAccountType">
                                            <span class="glyphicon glyphicon-fast-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default" id="btnMoveToPreviousPageGridAccountType">
                                            <span class="glyphicon glyphicon-step-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default" disabled style="width: 100px" id="btnCurrentPageGridAccountType"></button>
                                        <button type="button" class="btn btn-default" id="btnMoveToNextPageGridAccountType">
                                            <span class="glyphicon glyphicon-step-forward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default" id="btnMoveToLastPageGridAccountType">
                                            <span class="glyphicon glyphicon-fast-forward"></span>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div id="AccountCashFlow" class="tab-pane fade">
                        <div class="panel panel-default">
                            <div class="panel-heading">
                                <table style="width: 100%" border="0">
                                    <tr>
                                        <td style="width: 59%">
                                            <div class="input-group ">
                                                <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                                <input type="text" class="form-control" id="InputFilterAccountCashFlow" placeholder="Search...">
                                            </div>
                                        </td>
                                        <td style="width: 1%"></td>
                                        <td style="width: 40%" align="right">
                                            @{
                                                if (canAdd)
                                                {
                                                    <button class="btn btn-primary" id="btnAddAccountCashFlow" onclick="btnAddAccountCashFlowOnclick()"><i class="fa fa-plus"></i> Add</button>
                                                }
                                            }
                                            <button class="btn btn-danger" onclick="btnCloseAccountCashFlowOnclick()"><i class=" fa fa-times"></i> Close</button>
                                        </td>
                                    </tr>
                                </table>
                            </div>
                            <div class="panel-body">
                                <div id="accountCashFlowGrid" class="grid" align="left"></div>
                            </div>
                            <div class="panel-footer">
                                <div class="row">
                                    <div class="btn-group col-md-7" id="naviagtionPageGridAccountCashFlow">
                                        <button type="button" class="btn btn-default" id="btnMoveToFirstPageGridAccountCashFlow">
                                            <span class="glyphicon glyphicon-fast-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default" id="btnMoveToPreviousPageGridAccountCashFlow">
                                            <span class="glyphicon glyphicon-step-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default" disabled style="width: 100px" id="btnCurrentPageGridAccountCashFlow"></button>
                                        <button type="button" class="btn btn-default" id="btnMoveToNextPageGridAccountCashFlow">
                                            <span class="glyphicon glyphicon-step-forward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default" id="btnMoveToLastPageGridAccountCashFlow">
                                            <span class="glyphicon glyphicon-fast-forward"></span>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div id="AccountCategory" class="tab-pane fade">
                        <div class="panel panel-default">
                            <div class="panel-heading">
                                <table style="width: 100%" border="0">
                                    <tr>
                                        <td style="width: 59%">
                                            <div class="input-group ">
                                                <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                                <input type="text" class="form-control " id="InputFilterAccountCategory" placeholder="Search...">
                                            </div>
                                        </td>
                                        <td style="width: 1%"></td>
                                        <td style="width: 40%" align="right">
                                            @{
                                                if (canAdd)
                                                {
                                                    <button class="btn btn-primary" id="btnAddAccountCategory" onclick="btnAddAccountCategoryOnclick()"><i class="fa fa-plus"></i> Add</button>
                                                }
                                            }
                                            <button class="btn btn-danger" onclick="btnCloseAccountCategoryOnclick()"><i class=" fa fa-times"></i> Close</button>
                                        </td>
                                    </tr>
                                </table>
                            </div>
                            <div class="panel-body">
                                <div id="accountCategoryGrid" class="grid" align="left"></div>
                            </div>
                            <div class="panel-footer">
                                <div class="row">
                                    <div class="btn-group col-md-7" id="naviagtionPageGridAccountCategory">
                                        <button type="button" class="btn btn-default" id="btnMoveToFirstPageGridAccountCategory">
                                            <span class="glyphicon glyphicon-fast-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default" id="btnMoveToPreviousPageGridAccountCategory">
                                            <span class="glyphicon glyphicon-step-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default" disabled style="width: 100px" id="btnCurrentPageGridAccountCategory"></button>
                                        <button type="button" class="btn btn-default" id="btnMoveToNextPageGridAccountCategory">
                                            <span class="glyphicon glyphicon-step-forward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default" id="btnMoveToLastPageGridAccountCategory">
                                            <span class="glyphicon glyphicon-fast-forward"></span>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </section>
            @Html.Partial("_SoftwareFooter")
        </main>
    </div>
    <div id="c-mask" class="c-mask"></div>

    <!-- =================== -->
    <!-- Account Edit Detail -->
    <!-- =================== -->
    <div class="modal fade" id="accountEdit" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="accountModalLabel">Account <span id="accountLockAndUnLock"></span> </h4>
                </div>
                <div class="modal-body">
                    <ul class="nav nav-tabs pill-custom" role="tablist" id="myTab">
                        <li role="presentation" class="active"><a data-toggle="tab" href="#accountDetailAccount" id="accountDetailAccountTab">Account</a></li>
                        <li role="presentation"><a data-toggle="tab" href="#accountDetailArticleType" id="accountDetailArticleTypeTab">Article Type</a></li>
                    </ul>
                    <br />
                    <div class="tab-content">
                        <div id="accountDetailAccount" class="tab-pane fade in active">
                            <center>
                                <span id="loadingModalAccount"></span>
                            </center>
                            <div id="AccountDetailForm">
                                <dl class="dl-horizontal">
                                    <dt>Account Code</dt>
                                    <dd><input type="text" class="form-control requiredAccount" maxlength="4" id="account_code" placeholder="Code" /></dd>
                                    <dt>Account</dt>
                                    <dd><input type="text" class="form-control requiredAccount" id="account_account" placeholder="Account" /></dd>
                                    <dt>Account Type</dt>
                                    <dd><div id="cboAccountType" class="comboBox-wide"></div></dd>
                                    <dt>Cash Flow</dt>
                                    <dd><div id="cboAccountCashFlow" class="comboBox-wide"></div></dd>
                                    <dt>Lock</dt>
                                    <dd><input type="checkbox" id="accountEdit_IsLocked" /></dd>
                                </dl>
                            </div>
                        </div>
                        <div id="accountDetailArticleType" class="tab-pane fade in">
                            <center>
                                <label id="loadingAccountArtitleType"></label>
                            </center>
                            <div id="accountArticleTypeDiv">
                                @{
                                    if (canAdd)
                                    {
                                        <div class="panel panel-default">
                                            <div class="panel-heading">
                                                <div class="row">
                                                    <div class="col-lg-12" align="right">
                                                        <button class="btn btn-primary" id="btnAddACcountArticleType" onclick="btnAddAccountArticleType()"><i class="fa fa-plus"></i> Add</button>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="panel-body">
                                                <div id="AccountArticleTypeGrid" style="max-height: 250px"></div>
                                            </div>
                                        </div>
                                    }
                                    else
                                    {
                                        <div id="AccountArticleTypeGrid" style="max-height: 250px"></div>
                                        <br /><br />
                                    }
                                }
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button id="cmdSaveAccountButton" class="btn btn-primary" onclick="cmdAccountSaveButton_OnClick()"><i class="fa fa-save"></i> Save</button>
                    <button id="cmdAccountDetailCloseButton" class="btn btn-danger" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- ==================== -->
    <!-- Account Article Type -->
    <!-- ==================== -->
    <div class="modal fade" id="accountArticleTypeModal" role="dialog">
        <div class="modal-dialog ">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="accountArticleTypeModalLabel">Article Type</h4>
                </div>
                <div class="modal-body">
                    <center>
                        <span id="loadingModalArticleType"></span>
                    </center>
                    <div id="articleTypeDetailForm">
                        <dl class="dl-horizontal">
                            <dt>Article Type</dt>
                            <dd>
                                <div id="cboArticleType" class="comboBox-wide"></div>
                            </dd>
                        </dl>
                    </div>
                </div>
                <div class="modal-footer">
                    <button id="cmdSaveaccountArticleTypeButton" class="btn btn-primary" onclick="cmdAccountArticleTypeSaveButton_OnClick()"><i class="fa fa-save"></i> Save</button>
                    <button id="cmdaccountArticleTypeDetailCloseButton" class="btn btn-danger" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- =========================== -->
    <!-- Account Article Type Delete -->
    <!-- =========================== -->
    <div class="modal fade" id="deleteAccountArticleTypeConfirm" role="dialog">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Delete</h4>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete this article type?
                </div>
                <div class="modal-footer">
                    <button id="cmdConfirmDeleteAccountArticleType" class="btn btn-danger" onclick="cmdAccountArticleTypeConfirmDeleteButton_OnClick()"><i class="fa fa-trash"></i> Delete</button>
                    <button id="cmdConfirmDeleteCloseButtonAccountArticleType" class="btn btn-primary" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <!-- ============== -->
    <!-- Account Delete -->
    <!-- ============== -->
    <div class="modal fade" id="deleteAccountConfirm" role="dialog">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Delete</h4>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete this account?
                </div>
                <div class="modal-footer">
                    <button id="cmdConfirmDeleteAccount" class="btn btn-danger" onclick="cmdAccountConfirmDeleteButton_OnClick()"><i class="fa fa-trash"></i> Delete</button>
                    <button id="cmdConfirmDeleteCloseButtonAccount" class="btn btn-primary" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <!-- ======================== -->
    <!-- Account Type Edit Detail -->
    <!-- ======================== -->
    <div class="modal fade" id="accountTypeEdit" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="accountTypeModalLabel">Account Type <span id="accountTypeLockAndUnLock"></span> </h4>
                </div>
                <div class="modal-body">
                    <center>
                        <span id="loadingModalAccountType"></span>
                    </center>
                    <div id="AccountTypeDetailForm">
                        <dl class="dl-horizontal">
                            <dt>Account Type Code</dt>
                            <dd><input type="text" class="form-control  requiredAccountType" id="accountType_code" placeholder="Code" /></dd>
                            <dt>Account Type</dt>
                            <dd><input type="text" class="form-control  requiredAccountType" id="accountType_accountType" placeholder="Account Type" /></dd>
                            <dt>Category</dt>
                            <dd><div id="cboAccountCategory" class="comboBox-wide"></div></dd>
                            <dt>Category Description</dt>
                            <dd><input type="text" class="form-control  requiredAccountType" id="accountType_SubCategoryDescription" placeholder="Sub-Category Description" /></dd>
                            <dt>Lock </dt>
                            <dd><input type="checkbox" id="accountTypeEdit_IsLocked" /></dd>
                        </dl>
                    </div>
                </div>
                <div class="modal-footer">
                    <button id="cmdSaveAccountTypeButton" class="btn btn-primary" onclick="cmdAccountTypeSaveButton_OnClick()"><i class="fa fa-save"></i> Save</button>
                    <button id="cmdAccountTypeDetailCloseButton" class="btn btn-danger" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- =================== -->
    <!-- Account Type Delete -->
    <!-- =================== -->
    <div class="modal fade" id="deleteAccountTypeConfirm" role="dialog">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Delete</h4>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete this account type?
                </div>
                <div class="modal-footer">
                    <button id="cmdConfirmDeleteAccountType" class="btn btn-danger" onclick="cmdAccountTypeConfirmDeleteButton_OnClick()"><i class="fa fa-trash"></i> Delete</button>
                    <button id="cmdConfirmDeleteCloseButtonAccountType" class="btn btn-primary" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <!-- ============================= -->
    <!-- Account Cash Flow Edit Detail -->
    <!-- ============================= -->
    <div class="modal fade" id="accountCashFlowEdit" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="accountCashFlowModalLabel">Account Cash Flow <span id="accountCashFlowLockAndUnLock"></span></h4>
                </div>
                <div class="modal-body">
                    <center>
                        <span id="loadingModalAccountCashFlow"></span>
                    </center>
                    <div id="AccountCashFlowDetailForm">
                        <dl class="dl-horizontal">
                            <dt>Cash Flow Code</dt>
                            <dd><input type="text" class="form-control  requiredAccountCashFlow" id="accountCashFlow_Code" placeholder="Code" /></dd>
                            <dt>Cash Flow</dt>
                            <dd><input type="text" class="form-control  requiredAccountCashFlow" id="accountCashFlow_CashFlow" placeholder="Cash FLow" /></dd>
                            <dt>Lock </dt>
                            <dd><input type="checkbox" id="accountCashFlowEdit_IsLocked" /></dd>
                        </dl>
                    </div>
                </div>
                <div class="modal-footer">
                    <button id="cmdSaveAccountCashFlowButton" class="btn btn-primary" onclick="cmdAccountCashFlowSaveButton_OnClick()"><i class="fa fa-save"></i> Save</button>
                    <button id="cmdAccountCashFlowDetailCloseButton" class="btn btn-danger" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- ======================== -->
    <!-- Account Cash Flow Delete -->
    <!-- ======================== -->
    <div class="modal fade" id="deleteAccountCashFlowConfirm" role="dialog">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Delete</h4>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete this account cash flow?
                </div>
                <div class="modal-footer">
                    <button id="cmdConfirmDeleteAccountCashFlow" class="btn btn-danger" onclick="cmdAccountCashFlowConfirmDeleteButton_OnClick()"><i class="fa fa-trash"></i> Delete</button>
                    <button id="cmdConfirmDeleteCloseButtonAccountCashFlow" class="btn btn-primary" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <!-- ============================ -->
    <!-- Account Category Edit Detail -->
    <!-- ============================ -->
    <div class="modal fade" id="accountCategoryEdit" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="accountCategoryModalLabel">Account Category <span id="accountCategoryLockAndUnLock"></span></h4>
                </div>
                <div class="modal-body">
                    <center>
                        <span id="loadingModalAccountCategory"></span>
                    </center>
                    <div id="AccountCategoryDetailForm">
                        <input type="hidden" id="accountCategory_Id" />
                        <dl class="dl-horizontal">
                            <dt>Category Code</dt>
                            <dd><input type="text" class="form-control  requiredAccountCategory" id="accountCategory_Code" placeholder="Code" /></dd>
                            <dt>Category</dt>
                            <dd><input type="text" class="form-control  requiredAccountCategory" id="accountCategory_Category" placeholder="Category" /></dd>
                            <dt>Lock </dt>
                            <dd><input type="checkbox" id="accountCategoryEdit_IsLocked" /></dd>
                        </dl>
                    </div>
                </div>
                <div class="modal-footer">
                    <button id="cmdSaveAccountCategoryButton" class="btn btn-primary" onclick="cmdAccountCategorySaveButton_OnClick()"><i class="fa fa-save"></i> Save</button>
                    <button id="cmdAccountCategoryDetailCloseButton" class="btn btn-danger" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- ======================= -->
    <!-- Account Category Delete -->
    <!-- ======================= -->
    <div class="modal fade" id="deleteAccountCategoryConfirm" role="dialog">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Delete</h4>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete this account category?
                </div>
                <div class="modal-footer">
                    <button id="cmdConfirmDeleteAccountCategory" class="btn btn-danger" onclick="cmdAccountCategoryConfirmDeleteButton_OnClick()"><i class="fa fa-trash"></i> Delete</button>
                    <button id="cmdConfirmDeleteCloseButtonAccountCategory" class="btn btn-primary " data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>

    @Scripts.Render("~/Scripts/Software-js")
    <script type="text/javascript">
        // ===========================
        // Global Variables for Account
        // ============================
        var accounts;
        var accountGrid = new wijmo.grid.FlexGrid('#accountGrid');
        var btnFirstPageGridAccount;
        var btnPreviousPageGridAccount;
        var btnNextPageGridAccount;
        var btnLastPageGridAccount;
        var btnCurrentPageGridAccount;
        var cboAccountType = new wijmo.input.ComboBox('#cboAccountType');
        var cboAccountCashFlow = new wijmo.input.ComboBox('#cboAccountCashFlow');
        var accountId = 0;
        var accountArticleTypes;
        var accountArticleTypeGrid = new wijmo.grid.FlexGrid('#AccountArticleTypeGrid');
        var accountArticleTypeId = 0;
        var articleTypes;
        var cboForArticleType = new wijmo.input.ComboBox('#cboArticleType');
        var Islocked = false;

        // ==============================
        // GET Account Type for Combo Box
        // ==============================
        function getAccountTypeForComboBox(accountTypeId, accountCashFlowId, accountIsLocked) {
            var accountTypesObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/chartOfAccounts/account/dropdown/list/accountType',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            accountTypesObservableArray.push({
                                Id: results[i]["Id"],
                                AccountType: results[i]["AccountType"],
                            });
                        }
                    }

                    var disabled = true;
                    if (results.length > 0) {
                        if (!accountIsLocked) {
                            disabled = false;
                        }
                    }

                    cboAccountType.dispose();
                    cboAccountType = new wijmo.input.ComboBox('#cboAccountType', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: accountTypesObservableArray,
                        displayMemberPath: "AccountType",
                        selectedValuePath: "Id",
                        selectedValue: accountTypeId
                    });

                    getAccountCashFlowForComboBox(accountCashFlowId, accountIsLocked);
                }
            });
        }

        // ===================================
        // GET Account Cash Flow for Combo Box
        // ===================================
        function getAccountCashFlowForComboBox(accountCashFlowId, accountIsLocked) {
            var accountCashFlowsObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/chartOfAccounts/account/dropdown/list/accountCashFlow',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            accountCashFlowsObservableArray.push({
                                Id: results[i]["Id"],
                                AccountCashFlow: results[i]["AccountCashFlow"]
                            });
                        }
                    }

                    var disabled = true;
                    if (results.length > 0) {
                        if (!accountIsLocked) {
                            disabled = false;
                        }
                    }

                    cboAccountCashFlow.dispose();
                    cboAccountCashFlow = new wijmo.input.ComboBox('#cboAccountCashFlow', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: accountCashFlowsObservableArray,
                        displayMemberPath: "AccountCashFlow",
                        selectedValuePath: "Id",
                        selectedValue: accountCashFlowId
                    });

                    setTimeout(function () {
                        $("#loadingModalAccount").hide();
                        $("#AccountDetailForm").show();
                        $("#cmdSaveAccountButton").prop("disabled", false);
                    }, 500)
                }
            });
        }

        // ================
        // GET Account List
        // ================
        function getAccount() {
            var accountsObservableArray = new wijmo.collections.ObservableArray;
            NProgress.start();
            $.ajax({
                url: '/api/chartOfAccounts/account/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            accountsObservableArray.push({
                                EditId: "<button class='btn btn-primary btn-xs btn-block' id='btnAccountEditButton' onclick='cmdAccountEditButton_OnClick()'><i class='fa fa-edit'></i> Edit</button>",
                                DeleteId: "<button class='btn btn-danger btn-xs btn-block' onclick='cmdAccountDeleteButton_OnClick()'><i class='fa fa-trash'></i> Delete</button>",
                                Id: results[i]["Id"],
                                AccountCode: results[i]["AccountCode"],
                                Account: results[i]["Account"],
                                AccountTypeId: results[i]["AccountTypeId"],
                                AccountType: results[i]["AccountType"],
                                AccountCashFlowId: results[i]["AccountCashFlowId"],
                                AccountCashFlow: results[i]["AccountCashFlow"],
                                IsLocked: results[i]["IsLocked"],
                                CreatedById: results[i]["CreatedById"],
                                CreatedBy: results[i]["CreatedBy"],
                                CreatedDateTime: results[i]["CreatedDateTime"],
                                UpdatedById: results[i]["UpdatedById"],
                                UpdatedBy: results[i]["UpdatedBy"],
                                UpdatedDateTime: results[i]["UpdatedDateTime"]
                            });

                        }
                    }

                    NProgress.done();
                }
            });

            return accountsObservableArray;
        }

        // ========================
        // Account Entry Validation
        // ========================
        function accountEntryValidation() {
            var isValid = true;
            $('.requiredAccount').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                } else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            return isValid;
        }

        // ======================
        // ADD new Account Button
        // ======================
        function btnAddAccountOnclick() {
            $('#accountEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $('.requiredAccount').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            $("#loadingModalAccount").show();
            document.getElementById("loadingModalAccount").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#AccountDetailForm").hide();

            document.getElementById("accountLockAndUnLock").innerHTML = '<i class="fa fa-unlock"></i>';
            document.getElementById('cmdSaveAccountButton').innerHTML = "<i class='fa fa-save'></i> Save";
            $("#cmdSaveAccountButton").prop("disabled", true);
            $("#cmdAccountDetailCloseButton").prop("disabled", false);

            document.getElementById('account_code').disabled = false;
            document.getElementById('account_account').disabled = false;

            accountId = 0;
            document.getElementById('account_code').value = "NA";
            document.getElementById('account_account').value = "NA";
            getAccountTypeForComboBox(0, 0, false);
            document.getElementById('accountEdit_IsLocked').checked = false;

            $("#loadingAccountArtitleType").hide();
            $("#accountArticleTypeDiv").hide();
            $("#btnAddACcountArticleType").prop("disabled", true);
        }

        // ===================
        // EDIT Account Button
        // ===================
        function cmdAccountEditButton_OnClick() {
            $('#accountEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $('.requiredAccount').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            $("#loadingModalAccount").show();
            document.getElementById("loadingModalAccount").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#AccountDetailForm").hide();

            document.getElementById('cmdSaveAccountButton').innerHTML = "<i class='fa fa-save'></i> Save";
            $("#cmdSaveAccountButton").prop("disabled", true);
            $("#cmdAccountDetailCloseButton").prop("disabled", false);

            accounts.editItem(accounts.currentItem);
            var account = accounts.currentEditItem;
            accountId = account.Id;
            document.getElementById('account_code').value = account.AccountCode;
            document.getElementById('account_account').value = account.Account;
            getAccountTypeForComboBox(account.AccountTypeId, account.AccountCashFlowId, account.IsLocked);
            document.getElementById('accountEdit_IsLocked').checked = account.IsLocked;

            if (account.IsLocked) {
                Islocked = true;
                document.getElementById('account_code').disabled = true;
                document.getElementById('account_account').disabled = true;
                document.getElementById("accountLockAndUnLock").innerHTML = '<i class="fa fa-lock"></i>';
                $('#btnAddACcountArticleType').prop('disabled', true);
            } else {
                Islocked = false;
                document.getElementById('account_code').disabled = false;
                document.getElementById('account_account').disabled = false;
                document.getElementById("accountLockAndUnLock").innerHTML = '<i class="fa fa-unlock"></i>';
                $('#btnAddACcountArticleType').prop('disabled', false);
            }

            $("#loadingAccountArtitleType").show();
            document.getElementById("loadingAccountArtitleType").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#accountArticleTypeDiv").hide();

            setTimeout(function () {
                createAccountArticleTypeGrid();
            }, 500);
        }

        // ===================
        // SAVE Account Button
        // ===================
        function cmdAccountSaveButton_OnClick() {
            var accountObject = new Object();
            accountObject.AccountCode = document.getElementById('account_code').value;
            accountObject.Account = document.getElementById('account_account').value;
            accountObject.AccountTypeId = cboAccountType.selectedValue;
            accountObject.AccountCashFlowId = cboAccountCashFlow.selectedValue;
            accountObject.IsLocked = document.getElementById('accountEdit_IsLocked').checked;
            var data = JSON.stringify(accountObject);

            if (accountEntryValidation()) {
                document.getElementById('cmdSaveAccountButton').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Saving";
                $("#cmdSaveAccountButton").prop("disabled", true);
                $("#cmdAccountDetailCloseButton").prop("disabled", true);
                if (accountId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/chartOfAccounts/account/add',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: data,
                        statusCode: {
                            200: function () {
                                toastr.success("Save Successful");
                                $('#accountEdit').modal('hide');
                                refreshAccountFlexGrid();
                            },
                            404: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                                $('#accountEdit').modal('hide');
                                document.getElementById('cmdSaveAccountButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#cmdSaveAccountButton").prop("disabled", false);
                                $("#cmdAccountDetailCloseButton").prop("disabled", false);
                            },
                            400: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                                $('#accountEdit').modal('hide');
                                document.getElementById('cmdSaveAccountButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#cmdSaveAccountButton").prop("disabled", false);
                                $("#cmdAccountDetailCloseButton").prop("disabled", false);
                            },
                            500: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                                $('#accountEdit').modal('hide');
                                document.getElementById('cmdSaveAccountButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#cmdSaveAccountButton").prop("disabled", false);
                                $("#cmdAccountDetailCloseButton").prop("disabled", false);
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/chartOfAccounts/account/update/' + accountId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: data,
                        statusCode: {
                            200: function () {
                                toastr.success("Update Successful");
                                $('#accountEdit').modal('hide');
                                refreshAccountFlexGrid();
                            },
                            404: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                                $('#accountEdit').modal('hide');
                                document.getElementById('cmdSaveAccountButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#cmdSaveAccountButton").prop("disabled", false);
                                $("#cmdAccountDetailCloseButton").prop("disabled", false);
                            },
                            400: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                                $('#accountEdit').modal('hide');
                                document.getElementById('cmdSaveAccountButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#cmdSaveAccountButton").prop("disabled", false);
                                $("#cmdAccountDetailCloseButton").prop("disabled", false);
                            },
                            500: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                                $('#accountEdit').modal('hide');
                                document.getElementById('cmdSaveAccountButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#cmdSaveAccountButton").prop("disabled", false);
                                $("#cmdAccountDetailCloseButton").prop("disabled", false);
                            }
                        }
                    });
                }
            } else {
                toastr.error("Invalid Entry");
            }
        }

        // ======================
        // DELETE Account Buttons
        // ======================
        function cmdAccountDeleteButton_OnClick() {
            accounts.editItem(accounts.currentItem);
            var account = accounts.currentEditItem;
            if (account.IsLocked) {
                toastr.error("Delete is not allowed when the selected record is locked!");
            } else {
                $('#deleteAccountConfirm').modal({
                    show: true,
                    backdrop: 'static'
                });

                document.getElementById('cmdConfirmDeleteAccount').innerHTML = "<i class='fa fa-trash'></i> Delete";
                $("#cmdConfirmDeleteAccount").prop("disabled", false);
                $("#cmdConfirmDeleteCloseButtonAccount").prop("disabled", false);
            }
        }

        // Account Confirm Delete Button
        function cmdAccountConfirmDeleteButton_OnClick() {
            document.getElementById('cmdConfirmDeleteAccount').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Deleting";
            $("#cmdConfirmDeleteAccount").prop("disabled", true);
            $("#cmdConfirmDeleteCloseButtonAccount").prop("disabled", true);

            accounts.editItem(accounts.currentItem);
            var id = accounts.currentEditItem.Id;
            $.ajax({
                url: '/api/chartOfAccounts/account/delete/' + id,
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Delete Successful");
                        $('#deleteAccountConfirm').modal('hide');
                        refreshAccountFlexGrid();
                    },
                    404: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                        $('#deleteAccountConfirm').modal('hide');
                        document.getElementById('cmdConfirmDeleteAccount').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $("#cmdConfirmDeleteAccount").prop("disabled", false);
                        $("#cmdConfirmDeleteCloseButtonAccount").prop("disabled", false);
                    },
                    400: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                        $('#deleteAccountConfirm').modal('hide');
                        document.getElementById('cmdConfirmDeleteAccount').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $("#cmdConfirmDeleteAccount").prop("disabled", false);
                        $("#cmdConfirmDeleteCloseButtonAccount").prop("disabled", false);
                    },
                    500: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                        $('#deleteAccountConfirm').modal('hide');
                        document.getElementById('cmdConfirmDeleteAccount').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $("#cmdConfirmDeleteAccount").prop("disabled", false);
                        $("#cmdConfirmDeleteCloseButtonAccount").prop("disabled", false);
                    }
                }
            });
        }

        // ====================
        // Close Account Button
        // ====================
        function btnCloseAccountOnclick() {
            window.location = '/Software';
        }

        // ==============================
        // FlexGrid Selection for Account
        // ==============================
        function updateDetailsAccount() {
            var item = accounts.currentItem;
            document.getElementById('createdBy').innerHTML = item.CreatedBy;
            document.getElementById('createdDate').innerHTML = item.CreatedDateTime;
            document.getElementById('updatedBy').innerHTML = item.UpdatedBy;
            document.getElementById('updatedDate').innerHTML = item.UpdatedDateTime;
        }

        // ===============================
        // Navigation Buttons for Account
        // ===============================
        function updateNavigateButtonsAccount() {
            if (accounts.pageSize <= 0) {
                document.getElementById('naviagtionPageGridAccount').style.display = 'none';
                return;
            }
            document.getElementById('naviagtionPageGridAccount').style.display = 'block';
            if (accounts.pageIndex === 0) {
                btnFirstPageGridAccount.setAttribute('disabled', 'disabled');
                btnPreviousPageGridAccount.setAttribute('disabled', 'disabled');
                btnNextPageGridAccount.removeAttribute('disabled');
                btnLastPageGridAccount.removeAttribute('disabled');
            } else if (accounts.pageIndex === (accounts.pageCount - 1)) {
                btnFirstPageGridAccount.removeAttribute('disabled');
                btnPreviousPageGridAccount.removeAttribute('disabled');
                btnLastPageGridAccount.setAttribute('disabled', 'disabled');
                btnNextPageGridAccount.setAttribute('disabled', 'disabled');
            } else {
                btnFirstPageGridAccount.removeAttribute('disabled');
                btnPreviousPageGridAccount.removeAttribute('disabled');
                btnNextPageGridAccount.removeAttribute('disabled');
                btnLastPageGridAccount.removeAttribute('disabled');
            }
            btnCurrentPageGridAccount.innerHTML = (accounts.pageIndex + 1) + ' / ' + accounts.pageCount;
        }

        // =============================
        // GET Account Article Type List
        // =============================
        function getAccountArticleType() {
            var accountArticleTypesObservableArray = new wijmo.collections.ObservableArray;
            $.ajax({
                url: '/api/chartOfAccounts/accountArticleType/list/' + accountId,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            var btnEditId = "<button class='btn btn-primary btn-xs btn-block' onclick='btnEditAccountArticleType_OnClick()'><i class='fa fa-edit'></i> Edit</button>";
                            var btnDeleteId = "<button class='btn btn-danger btn-xs btn-block' onclick='btnDeleteAccountArticleType_OnClick()'><i class='fa fa-trash'></i> Delete</button>";
                            if (document.getElementById('accountEdit_IsLocked').checked) {
                                btnEditId = "<button class='btn btn-primary btn-xs btn-block' onclick='btnEditAccountArticleType_OnClick()' disabled><i class='fa fa-edit'></i> Edit</button>";
                                btnDeleteId = "<button class='btn btn-danger btn-xs btn-block' onclick='btnDeleteAccountArticleType_OnClick()' disabled><i class='fa fa-trash'></i> Delete</button>";
                            }

                            accountArticleTypesObservableArray.push({
                                EditId: btnEditId,
                                DeleteId: btnDeleteId,
                                Id: results[i]["Id"],
                                AccountId: results[i]["AccountId"],
                                Account: results[i]["Account"],
                                ArticleTypeId: results[i]["ArticleTypeId"],
                                ArticleType: results[i]["ArticleType"]
                            });
                        }
                    }

                    $("#loadingAccountArtitleType").hide();
                    $("#accountArticleTypeDiv").show();
                }
            });

            return accountArticleTypesObservableArray;
        }

        // ========================
        // Get Account Article Type
        // ========================
        function getAccountArticleTypeForComboBox(articleTypeId) {
            var articleTypesObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/chartOfAccounts/accountArticleType/dropdown/list/articleType',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            articleTypesObservableArray.push({
                                Id: results[i]["Id"],
                                ArticleType: results[i]["ArticleType"]
                            });
                        }
                    }

                    var disabled = true;
                    if (results.length > 0) {
                        disabled = false;
                    }

                    cboForArticleType.dispose();
                    cboForArticleType = new wijmo.input.ComboBox('#cboArticleType', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: articleTypesObservableArray,
                        displayMemberPath: "ArticleType",
                        selectedValuePath: "Id",
                        selectedValue: articleTypeId
                    });

                    setTimeout(function () {
                        $("#loadingModalArticleType").hide();
                        $("#articleTypeDetailForm").show();
                        $("#cmdSaveaccountArticleTypeButton").prop("disabled", false);
                    }, 500)
                }
            });
        }

        // ========================
        // ADD Account Article Type
        // ========================
        function btnAddAccountArticleType() {
            $('#accountArticleTypeModal').modal({
                show: true,
                backdrop: 'static'
            });

            $('.requiredAccountArticleType').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            $("#loadingModalArticleType").show();
            document.getElementById("loadingModalArticleType").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#articleTypeDetailForm").hide();

            document.getElementById('cmdSaveaccountArticleTypeButton').innerHTML = "<i class='fa fa-save'></i> Save";
            $("#cmdSaveaccountArticleTypeButton").prop("disabled", true);
            $("#cmdaccountArticleTypeDetailCloseButton").prop("disabled", false);

            accountArticleTypeId = 0;
            getAccountArticleTypeForComboBox(0);
        }

        // =========================
        // EDIT Account Article Type
        // =========================
        function btnEditAccountArticleType_OnClick() {
            $('#accountArticleTypeModal').modal({
                show: true,
                backdrop: 'static'
            });

            $('.requiredAccountArticleType').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            $("#loadingModalArticleType").show();
            document.getElementById("loadingModalArticleType").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#articleTypeDetailForm").hide();

            document.getElementById('cmdSaveaccountArticleTypeButton').innerHTML = "<i class='fa fa-save'></i> Save";
            $("#cmdSaveaccountArticleTypeButton").prop("disabled", true);
            $("#cmdaccountArticleTypeDetailCloseButton").prop("disabled", false);

            accountArticleTypes.editItem(accountArticleTypes.currentItem);
            var accountArticleType = accountArticleTypes.currentEditItem;
            accountArticleTypeId = accountArticleType.Id;
            getAccountArticleTypeForComboBox(accountArticleType.ArticleTypeId);
        }

        // ===========================
        // DELETE Account Article Type
        // ===========================
        function btnDeleteAccountArticleType_OnClick() {
            $('#deleteAccountArticleTypeConfirm').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById('cmdConfirmDeleteAccountArticleType').innerHTML = "<i class='fa fa-trash'></i> Delete";
            $("#cmdConfirmDeleteAccountArticleType").prop("disabled", false);
            $("#cmdConfirmDeleteCloseButtonAccountArticleType").prop("disabled", false);
        }

        // Account ArticleType Confirm Delete Button
        function cmdAccountArticleTypeConfirmDeleteButton_OnClick() {
            document.getElementById('cmdConfirmDeleteAccountArticleType').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Deleting";
            $("#cmdConfirmDeleteAccountArticleType").prop("disabled", true);
            $("#cmdConfirmDeleteCloseButtonAccountArticleType").prop("disabled", true);

            accountArticleTypes.editItem(accountArticleTypes.currentItem);
            var accountArticleTypeId = accountArticleTypes.currentEditItem.Id;
            $.ajax({
                url: '/api/chartOfAccounts/accountArticleType/delete/' + accountArticleTypeId,
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Delete Successful");
                        $('#deleteAccountArticleTypeConfirm').modal('hide');
                        createAccountArticleTypeGrid();
                    },
                    404: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                        $('#deleteAccountArticleTypeConfirm').modal('hide');
                        document.getElementById('cmdConfirmDeleteAccountArticleType').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $("#cmdConfirmDeleteAccountArticleType").prop("disabled", false);
                        $("#cmdConfirmDeleteCloseButtonAccountArticleType").prop("disabled", false);
                    },
                    400: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                        $('#deleteAccountArticleTypeConfirm').modal('hide');
                        document.getElementById('cmdConfirmDeleteAccountArticleType').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $("#cmdConfirmDeleteAccountArticleType").prop("disabled", false);
                        $("#cmdConfirmDeleteCloseButtonAccountArticleType").prop("disabled", false);
                    },
                    500: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                        $('#deleteAccountArticleTypeConfirm').modal('hide');
                        document.getElementById('cmdConfirmDeleteAccountArticleType').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $("#cmdConfirmDeleteAccountArticleType").prop("disabled", false);
                        $("#cmdConfirmDeleteCloseButtonAccountArticleType").prop("disabled", false);
                    }
                }
            });
        }

        // =========================
        // SAVE Account Article Type
        // =========================
        function cmdAccountArticleTypeSaveButton_OnClick() {
            var accountArticleTypeeObject = new Object();
            accountArticleTypeeObject.AccountId = accountId;
            accountArticleTypeeObject.ArticleTypeId = cboForArticleType.selectedValue;
            var accountArticleTypeData = JSON.stringify(accountArticleTypeeObject);

            document.getElementById('cmdSaveaccountArticleTypeButton').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Saving";
            $("#cmdSaveaccountArticleTypeButton").prop("disabled", true);
            $("#cmdaccountArticleTypeDetailCloseButton").prop("disabled", true);

            if (accountArticleTypeId == 0) {
                $.ajax({
                    type: "POST",
                    url: '/api/chartOfAccounts/accountArticleType/add',
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    data: accountArticleTypeData,
                    statusCode: {
                        200: function () {
                            toastr.success("Save Successful");
                            $('#accountArticleTypeModal').modal('hide');
                            createAccountArticleTypeGrid();
                        },
                        404: function (message) {
                            toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                            $('#accountArticleTypeModal').modal('hide');
                            document.getElementById('cmdSaveaccountArticleTypeButton').innerHTML = "<i class='fa fa-save'></i> Save";
                            $("#cmdSaveaccountArticleTypeButton").prop("disabled", false);
                            $("#cmdaccountArticleTypeDetailCloseButton").prop("disabled", false);
                        },
                        400: function (message) {
                            toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                            $('#accountArticleTypeModal').modal('hide');
                            document.getElementById('cmdSaveaccountArticleTypeButton').innerHTML = "<i class='fa fa-save'></i> Save";
                            $("#cmdSaveaccountArticleTypeButton").prop("disabled", false);
                            $("#cmdaccountArticleTypeDetailCloseButton").prop("disabled", false);
                        },
                        500: function (message) {
                            toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                            $('#accountArticleTypeModal').modal('hide');
                            document.getElementById('cmdSaveaccountArticleTypeButton').innerHTML = "<i class='fa fa-save'></i> Save";
                            $("#cmdSaveaccountArticleTypeButton").prop("disabled", false);
                            $("#cmdaccountArticleTypeDetailCloseButton").prop("disabled", false);
                        }
                    }
                });
            } else {
                $.ajax({
                    type: "PUT",
                    url: '/api/chartOfAccounts/accountArticleType/update/' + accountArticleTypeId,
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    data: accountArticleTypeData,
                    statusCode: {
                        200: function () {
                            toastr.success("Update Successful");
                            $('#accountArticleTypeModal').modal('hide');
                            createAccountArticleTypeGrid();
                        },
                        404: function (message) {
                            toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                            $('#accountArticleTypeModal').modal('hide');
                            document.getElementById('cmdSaveaccountArticleTypeButton').innerHTML = "<i class='fa fa-save'></i> Save";
                            $("#cmdSaveaccountArticleTypeButton").prop("disabled", false);
                            $("#cmdaccountArticleTypeDetailCloseButton").prop("disabled", false);
                        },
                        400: function (message) {
                            toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                            $('#accountArticleTypeModal').modal('hide');
                            document.getElementById('cmdSaveaccountArticleTypeButton').innerHTML = "<i class='fa fa-save'></i> Save";
                            $("#cmdSaveaccountArticleTypeButton").prop("disabled", false);
                            $("#cmdaccountArticleTypeDetailCloseButton").prop("disabled", false);
                        },
                        500: function (message) {
                            toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                            $('#accountArticleTypeModal').modal('hide');
                            document.getElementById('cmdSaveaccountArticleTypeButton').innerHTML = "<i class='fa fa-save'></i> Save";
                            $("#cmdSaveaccountArticleTypeButton").prop("disabled", false);
                            $("#cmdaccountArticleTypeDetailCloseButton").prop("disabled", false);
                        }
                    }
                });
            }
        }

        function refreshAccountFlexGrid() {
            accounts = new wijmo.collections.CollectionView(getAccount());
            accounts.canFilter = true;
            accounts.pageSize = 15;

            var filterTextAccount = '';
            $('#InputFilterAccount').keyup(function () {
                filterTextAccount = this.value.toLowerCase();
                accounts.refresh();
            });

            accounts.filter = function (item) {
                return !filterTextAccount || (item.AccountCode.toLowerCase().indexOf(filterTextAccount) > -1)
                    || (item.Account.toLowerCase().indexOf(filterTextAccount) > -1)
                    || (item.AccountType.toLowerCase().indexOf(filterTextAccount) > -1);
            }

            accounts.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsAccount();
            });

            accounts.currentChanged.addHandler(function (sender, args) {
                updateDetailsAccount();
            });

            // Flex Grid for account
            accountGrid.itemsSource = accounts;
            accountGrid.trackChanges = true;
        }

        // ========================
        // On Page Load for Account
        // ========================
        function accountTab() {
            accounts = new wijmo.collections.CollectionView(getAccount());
            accounts.canFilter = true;
            accounts.pageSize = 15;

            var filterTextAccount = '';
            $('#InputFilterAccount').keyup(function () {
                filterTextAccount = this.value.toLowerCase();
                accounts.refresh();
            });

            accounts.filter = function (item) {
                return !filterTextAccount || (item.AccountCode.toLowerCase().indexOf(filterTextAccount) > -1)
                                          || (item.Account.toLowerCase().indexOf(filterTextAccount) > -1)
                                          || (item.AccountType.toLowerCase().indexOf(filterTextAccount) > -1);
            }

            accounts.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsAccount();
            });

            accounts.currentChanged.addHandler(function (sender, args) {
                updateDetailsAccount();
            });

            // Flex Grid for account
            accountGrid.dispose();
            accountGrid = new wijmo.grid.FlexGrid('#accountGrid');
            accountGrid.initialize({
                columns: [
                            @{
                                if (canEdit)
                                {
                                    <text>
                                        {
                                            "header": "Edit",
                                            "binding": "EditId",
                                            "width": 70,
                                            "align": "center",
                                            "allowResizing": false,
                                            "allowSorting": false,
                                            "isContentHtml": true
                                        },
                                    </text>
                                }
                                if (canDelete)
                                {
                                    <text>
                                        {
                                            "header": "Delete",
                                            "binding": "DeleteId",
                                            "width": 70,
                                            "align": "center",
                                            "allowResizing": false,
                                            "allowSorting": false,
                                            "isContentHtml": true
                                        },
                                    </text>
                                }
                            }
                            {
                                "header": "Code",
                                "binding": "AccountCode",
                                "allowSorting": true,
                                "width": "1.5*"
                            },
                            {
                                "header": "Account",
                                "binding": "Account",
                                "allowSorting": true,
                                "width": "3*"
                            },
                            {
                                "header": "Account Type",
                                "binding": "AccountType",
                                "allowSorting": true,
                                "width": "3*"
                            },
                            {
                                "header": "L",
                                "binding": "IsLocked",
                                "allowSorting": true,
                                "width": 50
                            }
                ],
                autoGenerateColumns: false,
                itemsSource: accounts,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            accountGrid.trackChanges = true;

            btnFirstPageGridAccount = document.getElementById('btnMoveToFirstPageGridAccount');
            btnPreviousPageGridAccount = document.getElementById('btnMoveToPreviousPageGridAccount');
            btnNextPageGridAccount = document.getElementById('btnMoveToNextPageGridAccount');
            btnLastPageGridAccount = document.getElementById('btnMoveToLastPageGridAccount');
            btnCurrentPageGridAccount = document.getElementById('btnCurrentPageGridAccount');

            updateNavigateButtonsAccount();

            btnFirstPageGridAccount.addEventListener('click', function () {
                accounts.moveToFirstPage();
                updateNavigateButtonsAccount();
            });

            btnPreviousPageGridAccount.addEventListener('click', function () {
                accounts.moveToPreviousPage();
                updateNavigateButtonsAccount();
            });

            btnNextPageGridAccount.addEventListener('click', function () {
                accounts.moveToNextPage();
                updateNavigateButtonsAccount();
            });

            btnLastPageGridAccount.addEventListener('click', function () {
                accounts.moveToLastPage();
                updateNavigateButtonsAccount();
            });

            var canAdd = "@ViewData["CanAdd"]";
            if (canAdd == "False") {
                $("#btnAddAccount").prop("disabled", true);
                $("#btnAddACcountArticleType").prop("disabled", true);
            }
        }

        // ====================
        // Account Article Type
        // ====================
        function createAccountArticleTypeGrid() {
            accountArticleTypes = new wijmo.collections.CollectionView(getAccountArticleType());

            accountArticleTypeGrid.dispose();
            accountArticleTypeGrid = new wijmo.grid.FlexGrid('#AccountArticleTypeGrid');
            accountArticleTypeGrid.initialize({
                columns: [
                    @{
                        if (canEdit)
                        {
                            <text>
                                {
                                    "header": "Edit",
                                    "binding": "EditId",
                                    "width": 60,
                                    "align": "center",
                                    "allowResizing": false,
                                    "allowSorting": false,
                                    "isContentHtml": true
                                },
                            </text>
                        }
                        if (canDelete)
                        {
                            <text>
                                {
                                    "header": "Delete",
                                    "binding": "DeleteId",
                                    "width": 70,
                                    "align": "center",
                                    "allowResizing": false,
                                    "allowSorting": false,
                                    "isContentHtml": true
                                },
                            </text>
                        }
                    }
                    {
                        "header": "Article Type",
                        "binding": "ArticleType",
                        "allowSorting": true,
                        "width": "2*"
                    }
                ],
                autoGenerateColumns: false,
                itemsSource: accountArticleTypes,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            accountArticleTypeGrid.trackChanges = true;
        }

        // Account Lock - IsLocked
        $("#accountEdit_IsLocked").click(function () {
            if ($(this).is(':checked')) {
                Islocked = true;
                document.getElementById('account_code').disabled = true;
                document.getElementById('account_account').disabled = true;
                cboAccountType.disabled = true;
                cboAccountCashFlow.disabled = true;
                document.getElementById("accountLockAndUnLock").innerHTML = '<i class="fa fa-lock"></i>';
                $('#btnAddACcountArticleType').prop('disabled', true);

                if (accountId != 0) {
                    $("#loadingAccountArtitleType").show();
                    document.getElementById("loadingAccountArtitleType").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
                    $("#accountArticleTypeDiv").hide();

                    setTimeout(function () {
                        createAccountArticleTypeGrid();
                    }, 500);
                }
            } else {
                Islocked = false;
                document.getElementById('account_code').disabled = false;
                document.getElementById('account_account').disabled = false;
                cboAccountType.disabled = false;
                cboAccountCashFlow.disabled = false;
                document.getElementById("accountLockAndUnLock").innerHTML = '<i class="fa fa-unlock"></i>';
                $('#btnAddACcountArticleType').prop('disabled', false);

                if (accountId != 0) {
                    $("#loadingAccountArtitleType").show();
                    document.getElementById("loadingAccountArtitleType").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
                    $("#accountArticleTypeDiv").hide();

                    setTimeout(function () {
                        createAccountArticleTypeGrid();
                    }, 500);
                }
            }
        });

        $('#accountTabId').click(function () {
            $('#Account').show();
            $('#AccountType').hide();
            $('#AccountCashFlow').hide();
            $('#AccountCategory').hide();

            refreshAccountFlexGrid();
        });

        $('#accountDetailAccountTab').click(function () {
            $('#accountDetailAccount').show();
            $('#accountDetailArticleType').hide();

            $("#loadingModalAccount").show();
            document.getElementById("loadingModalAccount").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#AccountDetailForm").hide();

            setTimeout(function () {
                $("#loadingModalAccount").hide();
                $("#AccountDetailForm").show();
            }, 500);
        });

        $('#accountDetailArticleTypeTab').click(function () {
            $('#accountDetailAccount').hide();
            $('#accountDetailArticleType').show();

            if (accountId != 0) {
                $("#loadingAccountArtitleType").show();
                document.getElementById("loadingAccountArtitleType").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
                $("#accountArticleTypeDiv").hide();

                setTimeout(function () {
                    createAccountArticleTypeGrid();
                }, 500);
            }
        });
    </script>

    <!-- ==================== -->
    <!-- Account Type Scripts -->
    <!-- ==================== -->
    <script type="text/javascript">
        // =================================
        // Global Variables for Account Type
        // =================================
        var accountTypes;
        var accountTypeGrid = new wijmo.grid.FlexGrid('#accountTypeGrid');
        var cboAccountCategory = new wijmo.input.ComboBox('#cboAccountCategory');
        var btnFirstPageGridAccountType;
        var btnPreviousPageGridAccountType;
        var btnNextPageGridAccountType;
        var btnLastPageGridAccountType;
        var btnCurrentPageGridAccountType;
        var accountTypeId = 0;

        // ====================
        // GET Account Category
        // ====================
        function getAccountCategoryForComboBox(accountCategoryId, accountTypeIsLocked) {
            var accountCategoriesObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/chartOfAccounts/accountType/dropdown/list/accountCategory',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            accountCategoriesObservableArray.push({
                                Id: results[i]["Id"],
                                AccountCategory: results[i]["AccountCategory"]
                            });
                        }
                    }

                    var disabled = true;
                    if (results.length > 0) {
                        if (!accountTypeIsLocked) {
                            disabled = false;
                        }
                    }

                    cboAccountCategory.dispose();
                    cboAccountCategory = new wijmo.input.ComboBox('#cboAccountCategory', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: accountCategoriesObservableArray,
                        displayMemberPath: "AccountCategory",
                        selectedValuePath: "Id",
                        selectedValue: accountCategoryId
                    });

                    setTimeout(function () {
                        $("#loadingModalAccountType").hide();
                        $("#AccountTypeDetailForm").show();
                    }, 500);
                }
            });
        }

        // =====================
        // GET Account Type List
        // =====================
        function getAccountType() {
            NProgress.start();
            var accountTypesObservableArray = new wijmo.collections.ObservableArray;
            $.ajax({
                url: '/api/chartOfAccounts/accountType/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            accountTypesObservableArray.push({
                                EditId: "<button class='btn btn-primary btn-xs btn-block' onclick='cmdAccountTypeEditButton_OnClick()'><i class='fa fa-edit'></i> Edit</button>",
                                DeleteId: "<button class='btn btn-danger btn-xs btn-block' onclick='cmdAccountTypeDeleteButton_OnClick()'><i class='fa fa-trash'></i> Delete</button>",
                                Id: results[i]["Id"],
                                AccountTypeCode: results[i]["AccountTypeCode"],
                                AccountType: results[i]["AccountType"],
                                AccountCategoryId: results[i]["AccountCategoryId"],
                                AccountCategory: results[i]["AccountCategory"],
                                SubCategoryDescription: results[i]["SubCategoryDescription"],
                                IsLocked: results[i]["IsLocked"],
                                CreatedById: results[i]["CreatedById"],
                                CreatedBy: results[i]["CreatedBy"],
                                CreatedDateTime: results[i]["CreatedDateTime"],
                                UpdatedById: results[i]["UpdatedById"],
                                UpdatedBy: results[i]["UpdatedBy"],
                                UpdatedDateTime: results[i]["UpdatedDateTime"]
                            });
                        }
                    }

                    NProgress.done();
                }
            });

            return accountTypesObservableArray;
        }

        // =============================
        // account type entry validation
        // =============================
        function accountTypeEntryValidation() {
            var isValid = true;
            $('.requiredAccountType').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                } else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            return isValid;
        }

        // ====================
        // ADD New Account Type
        // ====================
        function btnAddAccountTypeOnclick() {
            $('#accountTypeEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $('.requiredAccountType').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            $("#loadingModalAccountType").show();
            document.getElementById("loadingModalAccountType").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#AccountTypeDetailForm").hide();

            document.getElementById('cmdSaveAccountTypeButton').innerHTML = "<i class='fa fa-save'></i> Save";
            $("#cmdSaveAccountTypeButton").prop("disabled", false);
            $("#cmdAccountTypeDetailCloseButton").prop("disabled", false);

            accountTypeId = 0;
            document.getElementById('accountType_code').value = "NA";
            document.getElementById('accountType_accountType').value = "NA";
            document.getElementById('accountType_SubCategoryDescription').value = "NA";
            getAccountCategoryForComboBox(0, false);
            document.getElementById('accountTypeEdit_IsLocked').checked = false;

            document.getElementById('accountType_code').disabled = false;
            document.getElementById('accountType_accountType').disabled = false;
            document.getElementById('accountType_SubCategoryDescription').disabled = false;
            document.getElementById('accountTypeLockAndUnLock').innerHTML = "<i class='fa fa-unlock'></i>";
        }

        // ========================
        // EDIT Account Type Button
        // ========================
        function cmdAccountTypeEditButton_OnClick() {
            $('#accountTypeEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $('.requiredAccountType').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            $("#loadingModalAccountType").show();
            document.getElementById("loadingModalAccountType").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#AccountTypeDetailForm").hide();

            document.getElementById('cmdSaveAccountTypeButton').innerHTML = "<i class='fa fa-save'></i> Save";
            $("#cmdSaveAccountTypeButton").prop("disabled", false);
            $("#cmdAccountTypeDetailCloseButton").prop("disabled", false);

            accountTypes.editItem(accountTypes.currentItem);
            var accountType = accountTypes.currentEditItem;

            accountTypeId = accountType.Id;
            document.getElementById('accountType_code').value = accountType.AccountTypeCode;
            document.getElementById('accountType_accountType').value = accountType.AccountType;
            getAccountCategoryForComboBox(accountType.AccountCategoryId, accountType.IsLocked);
            document.getElementById('accountType_SubCategoryDescription').value = accountType.SubCategoryDescription;
            document.getElementById('accountTypeEdit_IsLocked').checked = accountType.IsLocked;

            if (accountType.IsLocked) {
                document.getElementById('accountType_code').disabled = true;
                document.getElementById('accountType_accountType').disabled = true;
                document.getElementById('accountType_SubCategoryDescription').disabled = true;
                document.getElementById('accountTypeLockAndUnLock').innerHTML = "<i class='fa fa-lock'></i>";
            } else {
                document.getElementById('accountType_code').disabled = false;
                document.getElementById('accountType_accountType').disabled = false;
                document.getElementById('accountType_SubCategoryDescription').disabled = false;
                document.getElementById('accountTypeLockAndUnLock').innerHTML = "<i class='fa fa-unlock'></i>";
            }
        }

        // ========================
        // Save Account Type Button
        // ========================
        function cmdAccountTypeSaveButton_OnClick() {
            var accountTypeObject = new Object();
            accountTypeObject.AccountTypeCode = document.getElementById('accountType_code').value;
            accountTypeObject.AccountType = document.getElementById('accountType_accountType').value;
            accountTypeObject.AccountCategoryId = cboAccountCategory.selectedValue;
            accountTypeObject.SubCategoryDescription = document.getElementById('accountType_SubCategoryDescription').value;
            accountTypeObject.IsLocked = document.getElementById('accountTypeEdit_IsLocked').checked;
            var data = JSON.stringify(accountTypeObject);

            if (accountTypeEntryValidation()) {
                document.getElementById('cmdSaveAccountTypeButton').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Saving";
                $("#cmdSaveAccountTypeButton").prop("disabled", true);
                $("#cmdAccountTypeDetailCloseButton").prop("disabled", true);

                if (accountTypeId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/chartOfAccounts/accountType/add',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: data,
                        statusCode: {
                            200: function () {
                                toastr.success("Save Successful");
                                $('#accountTypeEdit').modal('hide');
                                refreshAccountType();
                            },
                            404: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                                $('#accountTypeEdit').modal('hide');
                                document.getElementById('cmdSaveAccountTypeButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#cmdSaveAccountTypeButton").prop("disabled", false);
                                $("#cmdAccountTypeDetailCloseButton").prop("disabled", false);
                            },
                            400: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                                $('#accountTypeEdit').modal('hide');
                                document.getElementById('cmdSaveAccountTypeButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#cmdSaveAccountTypeButton").prop("disabled", false);
                                $("#cmdAccountTypeDetailCloseButton").prop("disabled", false);
                            },
                            500: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                                $('#accountTypeEdit').modal('hide');
                                document.getElementById('cmdSaveAccountTypeButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#cmdSaveAccountTypeButton").prop("disabled", false);
                                $("#cmdAccountTypeDetailCloseButton").prop("disabled", false);
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/chartOfAccounts/accountType/update/' + accountTypeId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: data,
                        statusCode: {
                            200: function () {
                                toastr.success("Update Successful");
                                $('#accountTypeEdit').modal('hide');
                                refreshAccountType();
                            },
                            404: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                                $('#accountTypeEdit').modal('hide');
                                document.getElementById('cmdSaveAccountTypeButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#cmdSaveAccountTypeButton").prop("disabled", false);
                                $("#cmdAccountTypeDetailCloseButton").prop("disabled", false);
                            },
                            400: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                                $('#accountTypeEdit').modal('hide');
                                document.getElementById('cmdSaveAccountTypeButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#cmdSaveAccountTypeButton").prop("disabled", false);
                                $("#cmdAccountTypeDetailCloseButton").prop("disabled", false);
                            },
                            500: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                                $('#accountTypeEdit').modal('hide');
                                document.getElementById('cmdSaveAccountTypeButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#cmdSaveAccountTypeButton").prop("disabled", false);
                                $("#cmdAccountTypeDetailCloseButton").prop("disabled", false);
                            }
                        }
                    });
                }
            } else {
                toastr.error("Invalid Entry");
            }
        }

        // =========================
        // Close Account Type Button
        // =========================
        function btnCloseAccountTypeOnclick() {
            window.location = '/Software';
        }

        // ===========================
        // DELETE Account Type Buttons
        // ===========================
        function cmdAccountTypeDeleteButton_OnClick() {
            accountTypes.editItem(accountTypes.currentItem);
            var accountType = accountTypes.currentEditItem;
            if (accountType.IsLocked) {
                toastr.error("Delete is not allowed when the selected record is locked!");
            } else {
                $('#deleteAccountTypeConfirm').modal({
                    show: true,
                    backdrop: 'static'
                });

                document.getElementById('cmdConfirmDeleteAccountType').innerHTML = "<i class='fa fa-trash'></i> Delete";
                $("#cmdConfirmDeleteAccountType").prop("disabled", false);
                $("#cmdConfirmDeleteCloseButtonAccountType").prop("disabled", false);
            }
        }

        // Account Type Confirm Delete Button
        function cmdAccountTypeConfirmDeleteButton_OnClick() {
            document.getElementById('cmdConfirmDeleteAccountType').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Deleting";
            $("#cmdConfirmDeleteAccountType").prop("disabled", true);
            $("#cmdConfirmDeleteCloseButtonAccountType").prop("disabled", true);

            accountTypes.editItem(accountTypes.currentItem);
            var id = accountTypes.currentEditItem.Id;
            $.ajax({
                url: '/api/chartOfAccounts/accountType/delete/' + id,
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Delete Successful");
                        $('#deleteAccountTypeConfirm').modal('hide');
                        refreshAccountType();
                    },
                    404: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                        $('#deleteAccountTypeConfirm').modal('hide');
                        document.getElementById('cmdConfirmDeleteAccountType').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $("#cmdConfirmDeleteAccountType").prop("disabled", false);
                        $("#cmdConfirmDeleteCloseButtonAccountType").prop("disabled", false);
                    },
                    400: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                        $('#deleteAccountTypeConfirm').modal('hide');
                        document.getElementById('cmdConfirmDeleteAccountType').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $("#cmdConfirmDeleteAccountType").prop("disabled", false);
                        $("#cmdConfirmDeleteCloseButtonAccountType").prop("disabled", false);
                    },
                    500: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                        $('#deleteAccountTypeConfirm').modal('hide');
                        document.getElementById('cmdConfirmDeleteAccountType').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $("#cmdConfirmDeleteAccountType").prop("disabled", false);
                        $("#cmdConfirmDeleteCloseButtonAccountType").prop("disabled", false);
                    }
                }
            });
        }

        // ===================================
        // FlexGrid Selection for Account Type
        // ===================================
        function updateDetailsAccountType() {
            var item = accountTypes.currentItem;
            document.getElementById('createdBy').innerHTML = item.CreatedBy;
            document.getElementById('createdDate').innerHTML = item.CreatedDateTime;
            document.getElementById('updatedBy').innerHTML = item.UpdatedBy;
            document.getElementById('updatedDate').innerHTML = item.UpdatedDateTime;
        }

        // ===================================
        // Navigation Buttons for Account Type
        // ===================================
        function updateNavigateButtonsAccountType() {
            if (accountTypes.pageSize <= 0) {
                document.getElementById('naviagtionPageGridAccountType').style.display = 'none';
                return;
            }
            document.getElementById('naviagtionPageGridAccountType').style.display = 'block';
            if (accountTypes.pageIndex === 0) {
                btnFirstPageGridAccountType.setAttribute('disabled', 'disabled');
                btnPreviousPageGridAccountType.setAttribute('disabled', 'disabled');
                btnNextPageGridAccountType.removeAttribute('disabled');
                btnLastPageGridAccountType.removeAttribute('disabled');
            } else if (accountTypes.pageIndex === (accountTypes.pageCount - 1)) {
                btnFirstPageGridAccountType.removeAttribute('disabled');
                btnPreviousPageGridAccountType.removeAttribute('disabled');
                btnLastPageGridAccountType.setAttribute('disabled', 'disabled');
                btnNextPageGridAccountType.setAttribute('disabled', 'disabled');
            } else {
                btnFirstPageGridAccountType.removeAttribute('disabled');
                btnPreviousPageGridAccountType.removeAttribute('disabled');
                btnNextPageGridAccountType.removeAttribute('disabled');
                btnLastPageGridAccountType.removeAttribute('disabled');
            }
            btnCurrentPageGridAccountType.innerHTML = (accountTypes.pageIndex + 1) + ' / ' + accountTypes.pageCount;
        }

        function refreshAccountType() {
            accountTypes = new wijmo.collections.CollectionView(getAccountType());
            accountTypes.canFilter = true;
            accountTypes.pageSize = 15;

            var filterTextAccountType = '';
            $('#InputFilterAccountType').keyup(function () {
                filterTextAccountType = this.value.toLowerCase();
                accountTypes.refresh();
            });
            accountTypes.filter = function (item) {
                return !filterTextAccountType || (item.AccountTypeCode.toLowerCase().indexOf(filterTextAccountType) > -1)
                    || (item.AccountType.toLowerCase().indexOf(filterTextAccountType) > -1)
                    || (item.AccountCategory.toLowerCase().indexOf(filterTextAccountType) > -1)
                    || (item.SubCategoryDescription.toLowerCase().indexOf(filterTextAccountType) > -1);
            }
            accountTypes.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsAccountType();
            });
            accountTypes.currentChanged.addHandler(function (sender, args) {
                updateDetailsAccountType();
            });

            // Flex Grid for account type
            accountTypeGrid.itemsSource = accountTypes;
            accountTypeGrid.trackChanges = true;
        }

        // =============================
        // On Page Load for Account Type
        // =============================
        function accountTypeTab() {
            accountTypes = new wijmo.collections.CollectionView(getAccountType());
            accountTypes.canFilter = true;
            accountTypes.pageSize = 15;

            var filterTextAccountType = '';
            $('#InputFilterAccountType').keyup(function () {
                filterTextAccountType = this.value.toLowerCase();
                accountTypes.refresh();
            });
            accountTypes.filter = function (item) {
                return !filterTextAccountType || (item.AccountTypeCode.toLowerCase().indexOf(filterTextAccountType) > -1)
                                              || (item.AccountType.toLowerCase().indexOf(filterTextAccountType) > -1)
                                              || (item.AccountCategory.toLowerCase().indexOf(filterTextAccountType) > -1)
                                              || (item.SubCategoryDescription.toLowerCase().indexOf(filterTextAccountType) > -1);
            }
            accountTypes.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsAccountType();
            });
            accountTypes.currentChanged.addHandler(function (sender, args) {
                updateDetailsAccountType();
            });

            // Flex Grid for account type
            accountTypeGrid.dispose();
            accountTypeGrid = new wijmo.grid.FlexGrid('#accountTypeGrid');
            accountTypeGrid.initialize({
                columns: [
                            @{
                                if (canEdit)
                                {
                                    <text>
                                        {
                                            "header": "Edit",
                                            "binding": "EditId",
                                            "width": 70,
                                            "align": "center",
                                            "allowResizing": false,
                                            "allowSorting": false,
                                            "isContentHtml": true
                                        },
                                    </text>
                                }
                                if (canDelete)
                                {
                                    <text>
                                        {
                                            "header": "Delete",
                                            "binding": "DeleteId",
                                            "width": 70,
                                            "align": "center",
                                            "allowResizing": false,
                                            "allowSorting": false,
                                            "isContentHtml": true
                                        },
                                    </text>
                                }
                            }
                            {
                                "header": "Code",
                                "binding": "AccountTypeCode",
                                "allowSorting": true,
                                "width": "1.5*",
                            },
                            {
                                "header": "Account Type",
                                "binding": "AccountType",
                                "allowSorting": true,
                                "width": "3*"
                            },
                            {
                                "header": "Category",
                                "binding": "AccountCategory",
                                "allowSorting": true,
                                "width": "3*"
                            },
                            {
                                "header": "Sub Category",
                                "binding": "SubCategoryDescription",
                                "allowSorting": true,
                                "width": "3*"
                            },
                            {
                                "header": "L",
                                "binding": "IsLocked",
                                "allowSorting": true,
                                "width": 50
                            }
                ],
                autoGenerateColumns: false,
                itemsSource: accountTypes,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            accountTypeGrid.trackChanges = true;

            // Navigation button for account type
            btnFirstPageGridAccountType = document.getElementById('btnMoveToFirstPageGridAccountType');
            btnPreviousPageGridAccountType = document.getElementById('btnMoveToPreviousPageGridAccountType');
            btnNextPageGridAccountType = document.getElementById('btnMoveToNextPageGridAccountType');
            btnLastPageGridAccountType = document.getElementById('btnMoveToLastPageGridAccountType');
            btnCurrentPageGridAccountType = document.getElementById('btnCurrentPageGridAccountType');

            updateNavigateButtonsAccountType();

            btnFirstPageGridAccountType.addEventListener('click', function () {
                accountTypes.moveToFirstPage();
                updateNavigateButtonsAccountType();
            });
            btnPreviousPageGridAccountType.addEventListener('click', function () {
                accountTypes.moveToPreviousPage();
                updateNavigateButtonsAccountType();
            });
            btnNextPageGridAccountType.addEventListener('click', function () {
                accountTypes.moveToNextPage();
                updateNavigateButtonsAccountType();
            });
            btnLastPageGridAccountType.addEventListener('click', function () {
                accountTypes.moveToLastPage();
                updateNavigateButtonsAccountType();
            });

            var canAdd = "@ViewData["CanAdd"]";
            if (canAdd == "False") {
                $("#btnAddAccountType").prop("disabled", true);
            }
        }

        $('#accountTypeTabId').click(function () {
            $('#Account').hide();
            $('#AccountType').show();
            $('#AccountCashFlow').hide();
            $('#AccountCategory').hide();
            accountTypeTab();
            window.accountTypeTab = function () {
                return true;
            }

            refreshAccountType();
        });

        // Account Type Lock - IsLocked
        $("#accountTypeEdit_IsLocked").click(function () {
            if ($(this).is(':checked')) {
                Islocked = true;
                document.getElementById('accountType_code').disabled = true;
                document.getElementById('accountType_accountType').disabled = true;
                document.getElementById('accountType_SubCategoryDescription').disabled = true;
                document.getElementById('accountTypeLockAndUnLock').innerHTML = "<i class='fa fa-lock'></i>";
                cboAccountCategory.disabled = true;
            } else {
                Islocked = false;
                document.getElementById('accountType_code').disabled = false;
                document.getElementById('accountType_accountType').disabled = false;
                document.getElementById('accountType_SubCategoryDescription').disabled = false;
                document.getElementById('accountTypeLockAndUnLock').innerHTML = "<i class='fa fa-unlock'></i>";
                cboAccountCategory.disabled = false;
            }
        });
    </script>

    <!-- ========================= -->
    <!-- Account Cash Flow Scripts -->
    <!-- ========================= -->
    <script type="text/javascript">
        // ================
        // GLOBAL Variables
        // ================
        var accountCashFlows;
        var accountCashFlowGrid = new wijmo.grid.FlexGrid('#accountCashFlowGrid');
        var btnFirstPageGridAccountCashFlow;
        var btnPreviousPageGridAccountCashFlow;
        var btnNextPageGridAccountCashFlow;
        var btnLastPageGridAccountCashFlow;
        var btnCurrentPageGridAccountCashFlow;
        var accountCashFlowId = 0;

        // ==========================
        // GET Account Cash Flow List
        // ==========================
        function getAccountCashFlow() {
            var accountCashFlowsObservableArray = new wijmo.collections.ObservableArray;
            NProgress.start();
            $.ajax({
                url: '/api/chartOfAccounts/accountCashFlow/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            accountCashFlowsObservableArray.push({
                                EditId: "<button class='btn btn-primary btn-xs btn-block' onclick='cmdAccountCashFlowEditButton_OnClick()'><i class='fa fa-edit'></i> Edit</button>",
                                DeleteId: "<button class='btn btn-danger btn-xs btn-block' onclick='cmdAccountCashFlowDeleteButton_OnClick()'><i class='fa fa-trash'></i> Delete</button>",
                                Id: results[i]["Id"],
                                AccountCashFlowCode: results[i]["AccountCashFlowCode"],
                                AccountCashFlow: results[i]["AccountCashFlow"],
                                IsLocked: results[i]["IsLocked"],
                                CreatedById: results[i]["CreatedById"],
                                CreatedBy: results[i]["CreatedBy"],
                                CreatedDateTime: results[i]["CreatedDateTime"],
                                UpdatedById: results[i]["UpdatedById"],
                                UpdatedBy: results[i]["UpdatedBy"],
                                UpdatedDateTime: results[i]["UpdatedDateTime"]
                            });
                        }
                    }

                    NProgress.done();
                }
            });

            return accountCashFlowsObservableArray;
        }

        // ==================================
        // Account cash flow entry validation
        // ==================================
        function accountCashFlowEntryValidation() {
            var isValid = true;
            $('.requiredAccountCashFlow').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                } else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            return isValid;
        }

        // =========================
        // ADD New Account Cash Flow
        // =========================
        function btnAddAccountCashFlowOnclick() {
            $('#accountCashFlowEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $('.requiredAccountCashFlow').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            $("#loadingModalAccountCashFlow").show();
            document.getElementById("loadingModalAccountCashFlow").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#AccountCashFlowDetailForm").hide();

            document.getElementById('cmdSaveAccountCashFlowButton').innerHTML = "<i class='fa fa-save'></i> Save";
            $("#cmdSaveAccountCashFlowButton").prop("disabled", false);
            $("#cmdAccountCashFlowDetailCloseButton").prop("disabled", false);

            accountCashFlowId = 0;
            document.getElementById('accountCashFlow_Code').value = "NA";
            document.getElementById('accountCashFlow_CashFlow').value = "NA";
            document.getElementById('accountCashFlowEdit_IsLocked').checked = false;

            document.getElementById('accountCashFlow_Code').disabled = false;
            document.getElementById('accountCashFlow_CashFlow').disabled = false;
            document.getElementById('accountCashFlowLockAndUnLock').innerHTML = "<i class='fa fa-unlock'></i>";

            setTimeout(function () {
                $("#loadingModalAccountCashFlow").hide();
                $("#AccountCashFlowDetailForm").show();
            }, 500);
        }

        // =============================
        // EDIT Account Cash FLow Button
        // =============================
        function cmdAccountCashFlowEditButton_OnClick() {
            $('#accountCashFlowEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $('.requiredAccountCashFlow').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            $("#loadingModalAccountCashFlow").show();
            document.getElementById("loadingModalAccountCashFlow").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#AccountCashFlowDetailForm").hide();

            document.getElementById('cmdSaveAccountCashFlowButton').innerHTML = "<i class='fa fa-save'></i> Save";
            $("#cmdSaveAccountCashFlowButton").prop("disabled", false);
            $("#cmdAccountCashFlowDetailCloseButton").prop("disabled", false);

            accountCashFlows.editItem(accountCashFlows.currentItem);
            var accountCashFlow = accountCashFlows.currentEditItem;
            accountCashFlowId = accountCashFlow.Id;
            document.getElementById('accountCashFlow_Code').value = accountCashFlow.AccountCashFlowCode;
            document.getElementById('accountCashFlow_CashFlow').value = accountCashFlow.AccountCashFlow;
            document.getElementById('accountCashFlowEdit_IsLocked').checked = accountCashFlow.IsLocked;

            if (accountCashFlow.IsLocked) {
                document.getElementById('accountCashFlow_Code').disabled = true;
                document.getElementById('accountCashFlow_CashFlow').disabled = true;
                document.getElementById('accountCashFlowLockAndUnLock').innerHTML = "<i class='fa fa-lock'></i>";
            } else {
                document.getElementById('accountCashFlow_Code').disabled = false;
                document.getElementById('accountCashFlow_CashFlow').disabled = false;
                document.getElementById('accountCashFlowLockAndUnLock').innerHTML = "<i class='fa fa-unlock'></i>";
            }

            setTimeout(function () {
                $("#loadingModalAccountCashFlow").hide();
                $("#AccountCashFlowDetailForm").show();
            }, 500);
        }

        // =============================
        // Save Account Cash Flow Button
        // =============================
        function cmdAccountCashFlowSaveButton_OnClick() {
            var accountCashFlowObject = new Object();
            accountCashFlowObject.AccountCashFlowCode = document.getElementById('accountCashFlow_Code').value;
            accountCashFlowObject.AccountCashFlow = document.getElementById('accountCashFlow_CashFlow').value;
            accountCashFlowObject.IsLocked = document.getElementById('accountCashFlowEdit_IsLocked').checked;
            var data = JSON.stringify(accountCashFlowObject);

            if (accountCashFlowEntryValidation()) {
                document.getElementById('cmdSaveAccountCashFlowButton').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Saving";
                $("#cmdSaveAccountCashFlowButton").prop("disabled", true);
                $("#cmdAccountCashFlowDetailCloseButton").prop("disabled", true);

                if (accountCashFlowId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/chartOfAccounts/accountCashFlow/add',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: data,
                        statusCode: {
                            200: function () {
                                toastr.success("Save Successful");
                                $('#accountCashFlowEdit').modal('hide');
                                refreshCashFlowFlexGrid();
                            },
                            404: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                                $('#accountCashFlowEdit').modal('hide');
                                document.getElementById('cmdSaveAccountCashFlowButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#cmdSaveAccountCashFlowButton").prop("disabled", false);
                                $("#cmdAccountCashFlowDetailCloseButton").prop("disabled", false);
                            },
                            400: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                                $('#accountCashFlowEdit').modal('hide');
                                document.getElementById('cmdSaveAccountCashFlowButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#cmdSaveAccountCashFlowButton").prop("disabled", false);
                                $("#cmdAccountCashFlowDetailCloseButton").prop("disabled", false);
                            },
                            500: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                                $('#accountCashFlowEdit').modal('hide');
                                document.getElementById('cmdSaveAccountCashFlowButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#cmdSaveAccountCashFlowButton").prop("disabled", false);
                                $("#cmdAccountCashFlowDetailCloseButton").prop("disabled", false);
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/chartOfAccounts/accountCashFlow/update/' + accountCashFlowId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: data,
                        statusCode: {
                            200: function () {
                                toastr.success("Update Successful");
                                $('#accountCashFlowEdit').modal('hide');
                                refreshCashFlowFlexGrid();
                            },
                            404: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                                $('#accountCashFlowEdit').modal('hide');
                                document.getElementById('cmdSaveAccountCashFlowButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#cmdSaveAccountCashFlowButton").prop("disabled", false);
                                $("#cmdAccountCashFlowDetailCloseButton").prop("disabled", false);
                            },
                            400: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                                $('#accountCashFlowEdit').modal('hide');
                                document.getElementById('cmdSaveAccountCashFlowButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#cmdSaveAccountCashFlowButton").prop("disabled", false);
                                $("#cmdAccountCashFlowDetailCloseButton").prop("disabled", false);
                            },
                            500: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                                $('#accountCashFlowEdit').modal('hide');
                                document.getElementById('cmdSaveAccountCashFlowButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#cmdSaveAccountCashFlowButton").prop("disabled", false);
                                $("#cmdAccountCashFlowDetailCloseButton").prop("disabled", false);
                            }
                        }
                    });
                }
            } else {
                toastr.error("Invalid Entry");
            }
        }

        // ==============================
        // Close Account Cash Flow Button
        // ==============================
        function btnCloseAccountCashFlowOnclick() {
            window.location = '/Software';
        }

        // ================================
        // DELETE Account Cash Flow Buttons
        // ================================
        function cmdAccountCashFlowDeleteButton_OnClick() {
            accountCashFlows.editItem(accountCashFlows.currentItem);
            var accountCashFlow = accountCashFlows.currentEditItem;
            if (accountCashFlow.IsLocked) {
                toastr.error("Delete is not allowed when the selected record is locked!");
            } else {
                $('#deleteAccountCashFlowConfirm').modal({
                    show: true,
                    backdrop: 'static'
                });

                document.getElementById('cmdConfirmDeleteAccountCashFlow').innerHTML = "<i class='fa fa-trash'></i> Delete";
                $("#cmdConfirmDeleteAccountCashFlow").prop("disabled", false);
                $("#cmdConfirmDeleteCloseButtonAccountCashFlow").prop("disabled", false);
            }
        }

        // Account Cash Flow Confirm Delete Button
        function cmdAccountCashFlowConfirmDeleteButton_OnClick() {
            document.getElementById('cmdConfirmDeleteAccountCashFlow').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Deleting";
            $("#cmdConfirmDeleteAccountCashFlow").prop("disabled", true);
            $("#cmdConfirmDeleteCloseButtonAccountCashFlow").prop("disabled", true);

            accountCashFlows.editItem(accountCashFlows.currentItem);
            var accountCashFlowId = accountCashFlows.currentEditItem.Id;
            $.ajax({
                url: '/api/chartOfAccounts/accountCashFlow/delete/' + accountCashFlowId,
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Delete Successful");
                        $('#deleteAccountCashFlowConfirm').modal('hide');
                        refreshCashFlowFlexGrid();
                    },
                    404: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                        $('#deleteAccountCashFlowConfirm').modal('hide');
                        document.getElementById('cmdConfirmDeleteAccountCashFlow').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $("#cmdConfirmDeleteAccountCashFlow").prop("disabled", false);
                        $("#cmdConfirmDeleteCloseButtonAccountCashFlow").prop("disabled", false);
                    },
                    400: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                        $('#deleteAccountCashFlowConfirm').modal('hide');
                        document.getElementById('cmdConfirmDeleteAccountCashFlow').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $("#cmdConfirmDeleteAccountCashFlow").prop("disabled", false);
                        $("#cmdConfirmDeleteCloseButtonAccountCashFlow").prop("disabled", false);
                    },
                    500: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                        $('#deleteAccountCashFlowConfirm').modal('hide');
                        document.getElementById('cmdConfirmDeleteAccountCashFlow').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $("#cmdConfirmDeleteAccountCashFlow").prop("disabled", false);
                        $("#cmdConfirmDeleteCloseButtonAccountCashFlow").prop("disabled", false);
                    }
                }
            });
        }

        // ===================================
        // FlexGrid Selection for Account Type
        // ===================================
        function updateDetailsAccountCashFlow() {
            var item = accountCashFlows.currentItem;
            document.getElementById('createdBy').innerHTML = item.CreatedBy;
            document.getElementById('createdDate').innerHTML = item.CreatedDateTime;
            document.getElementById('updatedBy').innerHTML = item.UpdatedBy;
            document.getElementById('updatedDate').innerHTML = item.UpdatedDateTime;
        }

        // ========================================
        // Navigation Buttons for Account Cash Flow
        // ========================================
        function updateNavigateButtonsAccountCashFlow() {
            if (accountCashFlows.pageSize <= 0) {
                document.getElementById('naviagtionPageGridAccountCashFlow').style.display = 'none';
                return;
            }
            document.getElementById('naviagtionPageGridAccountCashFlow').style.display = 'block';
            if (accountCashFlows.pageIndex === 0) {
                btnFirstPageGridAccountCashFlow.setAttribute('disabled', 'disabled');
                btnPreviousPageGridAccountCashFlow.setAttribute('disabled', 'disabled');
                btnNextPageGridAccountCashFlow.removeAttribute('disabled');
                btnLastPageGridAccountCashFlow.removeAttribute('disabled');
            } else if (accountCashFlows.pageIndex === (accountCashFlows.pageCount - 1)) {
                btnFirstPageGridAccountCashFlow.removeAttribute('disabled');
                btnPreviousPageGridAccountCashFlow.removeAttribute('disabled');
                btnLastPageGridAccountCashFlow.setAttribute('disabled', 'disabled');
                btnNextPageGridAccountCashFlow.setAttribute('disabled', 'disabled');
            } else {
                btnFirstPageGridAccountCashFlow.removeAttribute('disabled');
                btnPreviousPageGridAccountCashFlow.removeAttribute('disabled');
                btnNextPageGridAccountCashFlow.removeAttribute('disabled');
                btnLastPageGridAccountCashFlow.removeAttribute('disabled');
            }
            btnCurrentPageGridAccountCashFlow.innerHTML = (accountCashFlows.pageIndex + 1) + ' / ' + accountCashFlows.pageCount;
        }

        function refreshCashFlowFlexGrid() {
            accountCashFlows = new wijmo.collections.CollectionView(getAccountCashFlow());
            accountCashFlows.canFilter = true;
            accountCashFlows.pageSize = 15;

            var filterTextAccountCashFlow = '';
            $('#InputFilterAccountCashFlow').keyup(function () {
                filterTextAccountCashFlow = this.value.toLowerCase();
                accountCashFlows.refresh();
            });
            accountCashFlows.filter = function (item) {
                return !filterTextAccountCashFlow || (item.AccountCashFlowCode.toLowerCase().indexOf(filterTextAccountCashFlow) > -1)
                    || (item.AccountCashFlow.toLowerCase().indexOf(filterTextAccountCashFlow) > -1);
            }
            accountCashFlows.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsAccountCashFlow();
            });
            accountCashFlows.currentChanged.addHandler(function (sender, args) {
                updateDetailsAccountCashFlow();
            });

            // Flex Grid for Account Cash Flow
            accountCashFlowGrid.itemsSource = accountCashFlows;
            accountCashFlowGrid.trackChanges = true;
        }

        // ===================================
        // On Page Load for Account Cash Flows
        // ===================================
        function accountCashFlowTab() {
            accountCashFlows = new wijmo.collections.CollectionView(getAccountCashFlow());
            accountCashFlows.canFilter = true;
            accountCashFlows.pageSize = 15;

            var filterTextAccountCashFlow = '';
            $('#InputFilterAccountCashFlow').keyup(function () {
                filterTextAccountCashFlow = this.value.toLowerCase();
                accountCashFlows.refresh();
            });
            accountCashFlows.filter = function (item) {
                return !filterTextAccountCashFlow || (item.AccountCashFlowCode.toLowerCase().indexOf(filterTextAccountCashFlow) > -1)
                                                  || (item.AccountCashFlow.toLowerCase().indexOf(filterTextAccountCashFlow) > -1);
            }
            accountCashFlows.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsAccountCashFlow();
            });
            accountCashFlows.currentChanged.addHandler(function (sender, args) {
                updateDetailsAccountCashFlow();
            });

            // Flex Grid for Account Cash Flow
            accountCashFlowGrid.dispose();
            accountCashFlowGrid = new wijmo.grid.FlexGrid('#accountCashFlowGrid');
            accountCashFlowGrid.initialize({
                columns: [
                            @{
                                if (canEdit)
                                {
                                    <text>
                                        {
                                            "header": "Edit",
                                            "binding": "EditId",
                                            "width": 70,
                                            "align": "center",
                                            "allowResizing": false,
                                            "allowSorting": false,
                                            "isContentHtml": true
                                        },
                                    </text>
                                }
                                if (canDelete)
                                {
                                    <text>
                                        {
                                            "header": "Delete",
                                            "binding": "DeleteId",
                                            "width": 70,
                                            "align": "center",
                                            "allowResizing": false,
                                            "allowSorting": false,
                                            "isContentHtml": true
                                        },
                                    </text>
                                }
                            }
                            {
                                "header": "Code",
                                "binding": "AccountCashFlowCode",
                                "allowSorting": true,
                                "width": "3*",
                            },
                            {
                                "header": "Account Cash FLow",
                                "binding": "AccountCashFlow",
                                "allowSorting": true,
                                "width": "5*"
                            },
                            {
                                "header": "L",
                                "binding": "IsLocked",
                                "allowSorting": true,
                                "width": 50
                            }
                ],
                autoGenerateColumns: false,
                itemsSource: accountCashFlows,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            accountCashFlowGrid.trackChanges = true;

            // Navigation button for account cash flow
            btnFirstPageGridAccountCashFlow = document.getElementById('btnMoveToFirstPageGridAccountCashFlow');
            btnPreviousPageGridAccountCashFlow = document.getElementById('btnMoveToPreviousPageGridAccountCashFlow');
            btnNextPageGridAccountCashFlow = document.getElementById('btnMoveToNextPageGridAccountCashFlow');
            btnLastPageGridAccountCashFlow = document.getElementById('btnMoveToLastPageGridAccountCashFlow');
            btnCurrentPageGridAccountCashFlow = document.getElementById('btnCurrentPageGridAccountCashFlow');

            updateNavigateButtonsAccountCashFlow();

            btnFirstPageGridAccountCashFlow.addEventListener('click', function () {
                accountCashFlows.moveToFirstPage();
                updateNavigateButtonsAccountCashFlow();
            });
            btnPreviousPageGridAccountCashFlow.addEventListener('click', function () {
                accountCashFlows.moveToPreviousPage();
                updateNavigateButtonsAccountCashFlow();
            });
            btnNextPageGridAccountCashFlow.addEventListener('click', function () {
                accountCashFlows.moveToNextPage();
                updateNavigateButtonsAccountCashFlow();
            });
            btnLastPageGridAccountCashFlow.addEventListener('click', function () {
                accountCashFlows.moveToLastPage();
                updateNavigateButtonsAccountCashFlow();
            });

            var canAdd = "@ViewData["CanAdd"]";
            if (canAdd == "False") {
                $("#btnAddAccountCashFlow").prop("disabled", true);
            }
        }

        $('#accountCashFlowTabId').click(function () {
            $('#Account').hide();
            $('#AccountType').hide();
            $('#AccountCashFlow').show();
            $('#AccountCategory').hide();
            accountCashFlowTab();
            window.accountCashFlowTab = function () {
                return true;
            }
            refreshCashFlowFlexGrid();
        });

        // Account Cash Flow Lock - IsLocked
        $("#accountCashFlowEdit_IsLocked").click(function () {
            if ($(this).is(':checked')) {
                document.getElementById('accountCashFlow_Code').disabled = true;
                document.getElementById('accountCashFlow_CashFlow').disabled = true;
                document.getElementById('accountCashFlowLockAndUnLock').innerHTML = "<i class='fa fa-lock'></i>";
            } else {
                document.getElementById('accountCashFlow_Code').disabled = false;
                document.getElementById('accountCashFlow_CashFlow').disabled = false;
                document.getElementById('accountCashFlowLockAndUnLock').innerHTML = "<i class='fa fa-unlock'></i>";
            }
        });
    </script>

    <!-- ======================== -->
    <!-- Account Category Scripts -->
    <!-- ======================== -->
    <script type="text/javascript">
        // ================
        // GLOBAL Variables
        // ================
        var accountCategories;
        var accountCategoryGrid = new wijmo.grid.FlexGrid('#accountCategoryGrid');
        var btnFirstPageGridAccountCategory;
        var btnPreviousPageGridAccountCategory;
        var btnNextPageGridAccountCategory;
        var btnLastPageGridAccountCategory;
        var btnCurrentPageGridAccountCategory;
        var accountCategoryId = 0;

        // ==========================
        // GET Account Category List
        // ==========================
        function getAccountCategory() {
            var accountCategoriesObservableArray = new wijmo.collections.ObservableArray;
            NProgress.start();
            $.ajax({
                url: '/api/chartOfAccounts/accountCategory/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            accountCategoriesObservableArray.push({
                                EditId: "<button class='btn btn-primary btn-xs btn-block' onclick='cmdAccountCategoryEditButton_OnClick()'><i class='fa fa-edit'></i> Edit</button>",
                                DeleteId: "<button class='btn btn-danger btn-xs btn-block' onclick='cmdAccountCategoryDeleteButton_OnClick()'><i class='fa fa-trash'></i> Delete</button>",
                                Id: results[i]["Id"],
                                AccountCategoryCode: results[i]["AccountCategoryCode"],
                                AccountCategory: results[i]["AccountCategory"],
                                IsLocked: results[i]["IsLocked"],
                                CreatedById: results[i]["CreatedById"],
                                CreatedBy: results[i]["CreatedBy"],
                                CreatedDateTime: results[i]["CreatedDateTime"],
                                UpdatedById: results[i]["UpdatedById"],
                                UpdatedBy: results[i]["UpdatedBy"],
                                UpdatedDateTime: results[i]["UpdatedDateTime"]
                            });
                        }
                    }

                    NProgress.done();
                }
            });

            return accountCategoriesObservableArray;
        }

        // =================================
        // Account Category Entry Validation
        // =================================
        function accountCategoryEntryValidation() {
            var isValid = true;
            $('.requiredAccountCategory').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                } else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            return isValid;
        }

        // ========================
        // ADD New Account Category
        // ========================
        function btnAddAccountCategoryOnclick() {
            $('#accountCategoryEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $('.requiredAccountCategory').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            $("#loadingModalAccountCategory").show();
            document.getElementById("loadingModalAccountCategory").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#AccountCategoryDetailForm").hide();

            document.getElementById('cmdSaveAccountCategoryButton').innerHTML = "<i class='fa fa-save'></i> Save";
            $("#cmdSaveAccountCategoryButton").prop("disabled", false);
            $("#cmdAccountCategoryDetailCloseButton").prop("disabled", false);

            accountCategoryId = 0;
            document.getElementById('accountCategory_Code').value = "NA";
            document.getElementById('accountCategory_Category').value = "NA";
            document.getElementById('accountCategoryEdit_IsLocked').checked = false;

            document.getElementById('accountCategory_Code').disabled = false;
            document.getElementById('accountCategory_Category').disabled = false;
            document.getElementById('accountCategoryLockAndUnLock').innerHTML = "<i class='fa fa-unlock'></i>";

            setTimeout(function () {
                $("#loadingModalAccountCategory").hide();
                $("#AccountCategoryDetailForm").show();
            }, 500);
        }

        // ============================
        // EDIT Account Category Button
        // ============================
        function cmdAccountCategoryEditButton_OnClick() {
            $('#accountCategoryEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $('.requiredAccountCategory').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            $("#loadingModalAccountCategory").show();
            document.getElementById("loadingModalAccountCategory").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#AccountCategoryDetailForm").hide();

            document.getElementById('cmdSaveAccountCategoryButton').innerHTML = "<i class='fa fa-save'></i> Save";
            $("#cmdSaveAccountCategoryButton").prop("disabled", false);
            $("#cmdAccountCategoryDetailCloseButton").prop("disabled", false);

            accountCategories.editItem(accountCategories.currentItem);
            var accountCategory = accountCategories.currentEditItem;
            accountCategoryId = accountCategory.Id;
            document.getElementById('accountCategory_Code').value = accountCategory.AccountCategoryCode;
            document.getElementById('accountCategory_Category').value = accountCategory.AccountCategory;
            document.getElementById('accountCategoryEdit_IsLocked').checked = accountCategory.IsLocked;

            if (accountCategory.IsLocked == true) {
                document.getElementById('accountCategory_Code').disabled = true;
                document.getElementById('accountCategory_Category').disabled = true;
                document.getElementById('accountCategoryLockAndUnLock').innerHTML = "<i class='fa fa-lock'></i>";
            } else {
                document.getElementById('accountCategory_Code').disabled = false;
                document.getElementById('accountCategory_Category').disabled = false;
                document.getElementById('accountCategoryLockAndUnLock').innerHTML = "<i class='fa fa-unlock'></i>";
            }

            setTimeout(function () {
                $("#loadingModalAccountCategory").hide();
                $("#AccountCategoryDetailForm").show();
            }, 500);
        }

        // ============================
        // Save Account Category Button
        // ============================
        function cmdAccountCategorySaveButton_OnClick() {
            var accountCategoryObject = new Object();
            accountCategoryObject.AccountCategoryCode = document.getElementById('accountCategory_Code').value;
            accountCategoryObject.AccountCategory = document.getElementById('accountCategory_Category').value;
            accountCategoryObject.IsLocked = document.getElementById('accountCategoryEdit_IsLocked').checked;
            var data = JSON.stringify(accountCategoryObject);

            if (accountCategoryEntryValidation()) {
                document.getElementById('cmdSaveAccountCategoryButton').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Saving";
                $("#cmdSaveAccountCategoryButton").prop("disabled", true);
                $("#cmdAccountCategoryDetailCloseButton").prop("disabled", true);

                if (accountCategoryId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/chartOfAccounts/accountCategory/add',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: data,
                        statusCode: {
                            200: function () {
                                toastr.success("Save Successful");
                                $('#accountCategoryEdit').modal('hide');
                                refreshAccountCategory();
                            },
                            404: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                                $('#accountCategoryEdit').modal('hide');
                                document.getElementById('cmdSaveAccountCategoryButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#cmdSaveAccountCategoryButton").prop("disabled", false);
                                $("#cmdAccountCategoryDetailCloseButton").prop("disabled", false);
                            },
                            400: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                                $('#accountCategoryEdit').modal('hide');
                                document.getElementById('cmdSaveAccountCategoryButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#cmdSaveAccountCategoryButton").prop("disabled", false);
                                $("#cmdAccountCategoryDetailCloseButton").prop("disabled", false);
                            },
                            500: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                                $('#accountCategoryEdit').modal('hide');
                                document.getElementById('cmdSaveAccountCategoryButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#cmdSaveAccountCategoryButton").prop("disabled", false);
                                $("#cmdAccountCategoryDetailCloseButton").prop("disabled", false);
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/chartOfAccounts/accountCategory/update/' + accountCategoryId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: data,
                        statusCode: {
                            200: function () {
                                toastr.success("Update Successful");
                                $('#accountCategoryEdit').modal('hide');
                                refreshAccountCategory();
                            },
                            404: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                                $('#accountCategoryEdit').modal('hide');
                                document.getElementById('cmdSaveAccountCategoryButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#cmdSaveAccountCategoryButton").prop("disabled", false);
                                $("#cmdAccountCategoryDetailCloseButton").prop("disabled", false);
                            },
                            400: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                                $('#accountCategoryEdit').modal('hide');
                                document.getElementById('cmdSaveAccountCategoryButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#cmdSaveAccountCategoryButton").prop("disabled", false);
                                $("#cmdAccountCategoryDetailCloseButton").prop("disabled", false);
                            },
                            500: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                                $('#accountCategoryEdit').modal('hide');
                                document.getElementById('cmdSaveAccountCategoryButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#cmdSaveAccountCategoryButton").prop("disabled", false);
                                $("#cmdAccountCategoryDetailCloseButton").prop("disabled", false);
                            }
                        }
                    });
                }
            } else {
                toastr.error("Invalid Entry");
            }
        }

        // =============================
        // Close Account Category Button
        // =============================
        function btnCloseAccountCategoryOnclick() {
            window.location = '/Software';
        }

        // ===============================
        // DELETE Account Category Buttons
        // ===============================
        function cmdAccountCategoryDeleteButton_OnClick() {
            accountCategories.editItem(accountCategories.currentItem);
            var accountCategory = accountCategories.currentEditItem;
            if (accountCategory.IsLocked) {
                toastr.error("Delete is not allowed when the selected record is locked!");
            } else {
                $('#deleteAccountCategoryConfirm').modal({
                    show: true,
                    backdrop: 'static'
                });

                document.getElementById('cmdConfirmDeleteAccountCategory').innerHTML = "<i class='fa fa-trash'></i> Delete";
                $("#cmdConfirmDeleteAccountCategory").prop("disabled", false);
                $("#cmdConfirmDeleteCloseButtonAccountCategory").prop("disabled", false);
            }
        }

        // Account Category Confirm Delete Button
        function cmdAccountCategoryConfirmDeleteButton_OnClick() {
            document.getElementById('cmdConfirmDeleteAccountCategory').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Deleting";
            $("#cmdConfirmDeleteAccountCategory").prop("disabled", true);
            $("#cmdConfirmDeleteCloseButtonAccountCategory").prop("disabled", true);

            accountCategories.editItem(accountCategories.currentItem);
            var id = accountCategories.currentEditItem.Id;
            $.ajax({
                url: '/api/chartOfAccounts/accountCategory/delete/' + id,
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Delete Successful");
                        $('#deleteAccountCategoryConfirm').modal('hide');
                        refreshAccountCategory();
                    },
                    404: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                        $('#deleteAccountCategoryConfirm').modal('hide');
                        document.getElementById('cmdConfirmDeleteAccountCategory').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $("#cmdConfirmDeleteAccountCategory").prop("disabled", false);
                        $("#cmdConfirmDeleteCloseButtonAccountCategory").prop("disabled", false);
                    },
                    400: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                        $('#deleteAccountCategoryConfirm').modal('hide');
                        document.getElementById('cmdConfirmDeleteAccountCategory').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $("#cmdConfirmDeleteAccountCategory").prop("disabled", false);
                        $("#cmdConfirmDeleteCloseButtonAccountCategory").prop("disabled", false);
                    },
                    500: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                        $('#deleteAccountCategoryConfirm').modal('hide');
                        document.getElementById('cmdConfirmDeleteAccountCategory').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $("#cmdConfirmDeleteAccountCategory").prop("disabled", false);
                        $("#cmdConfirmDeleteCloseButtonAccountCategory").prop("disabled", false);
                    }
                }
            });
        }

        // =======================================
        // FlexGrid Selection for Account Category
        // =======================================
        function updateDetailsAccountCategory() {
            var item = accountCategories.currentItem;
            document.getElementById('createdBy').innerHTML = item.CreatedBy;
            document.getElementById('createdDate').innerHTML = item.CreatedDateTime;
            document.getElementById('updatedBy').innerHTML = item.UpdatedBy;
            document.getElementById('updatedDate').innerHTML = item.UpdatedDateTime;
        }

        // ========================================
        // Navigation Buttons for Account Category
        // ========================================
        function updateNavigateButtonsAccountCategory() {
            if (accountCategories.pageSize <= 0) {
                document.getElementById('naviagtionPageGridAccountCategory').style.display = 'none';
                return;
            }
            document.getElementById('naviagtionPageGridAccountCategory').style.display = 'block';
            if (accountCategories.pageIndex === 0) {
                btnFirstPageGridAccountCategory.setAttribute('disabled', 'disabled');
                btnPreviousPageGridAccountCategory.setAttribute('disabled', 'disabled');
                btnNextPageGridAccountCategory.removeAttribute('disabled');
                btnLastPageGridAccountCategory.removeAttribute('disabled');
            } else if (accountCategories.pageIndex === (accountCategories.pageCount - 1)) {
                btnFirstPageGridAccountCategory.removeAttribute('disabled');
                btnPreviousPageGridAccountCategory.removeAttribute('disabled');
                btnLastPageGridAccountCategory.setAttribute('disabled', 'disabled');
                btnNextPageGridAccountCategory.setAttribute('disabled', 'disabled');
            } else {
                btnFirstPageGridAccountCategoryw.removeAttribute('disabled');
                btnPreviousPageGridAccountCategory.removeAttribute('disabled');
                btnNextPageGridAccountCategory.removeAttribute('disabled');
                btnLastPageGridAccountCategory.removeAttribute('disabled');
            }
            btnCurrentPageGridAccountCategory.innerHTML = (accountCategories.pageIndex + 1) + ' / ' + accountCategories.pageCount;
        }

        function refreshAccountCategory() {
            accountCategories = new wijmo.collections.CollectionView(getAccountCategory());
            accountCategories.canFilter = true;
            accountCategories.pageSize = 15;

            var filterTextAccountCategory = '';
            $('#InputFilterAccountCategory').keyup(function () {
                filterTextAccountCategory = this.value.toLowerCase();
                accountCategories.refresh();
            });
            accountCategories.filter = function (item) {
                return !filterTextAccountCategory || (item.AccountCategoryCode.toLowerCase().indexOf(filterTextAccountCategory) > -1)
                    || (item.AccountCategory.toLowerCase().indexOf(filterTextAccountCategory) > -1);
            }
            accountCategories.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsAccountCategory();
            });
            accountCategories.currentChanged.addHandler(function (sender, args) {
                updateDetailsAccountCategory();
            });

            // Flex Grid for Account Category
            accountCategoryGrid.itemsSource = accountCategories;
            accountCategoryGrid.trackChanges = true;
        }

        // =================================
        // On Page Load for Account Category
        // =================================
        function accountCategoryTab() {
            accountCategories = new wijmo.collections.CollectionView(getAccountCategory());
            accountCategories.canFilter = true;
            accountCategories.pageSize = 15;

            var filterTextAccountCategory = '';
            $('#InputFilterAccountCategory').keyup(function () {
                filterTextAccountCategory = this.value.toLowerCase();
                accountCategories.refresh();
            });
            accountCategories.filter = function (item) {
                return !filterTextAccountCategory || (item.AccountCategoryCode.toLowerCase().indexOf(filterTextAccountCategory) > -1)
                                                  || (item.AccountCategory.toLowerCase().indexOf(filterTextAccountCategory) > -1);
            }
            accountCategories.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsAccountCategory();
            });
            accountCategories.currentChanged.addHandler(function (sender, args) {
                updateDetailsAccountCategory();
            });

            // Flex Grid for Account Category
            accountCategoryGrid.dispose();
            accountCategoryGrid = new wijmo.grid.FlexGrid('#accountCategoryGrid');
            accountCategoryGrid.initialize({
                columns: [
                            @{
                                if (canEdit)
                                {
                                    <text>
                                        {
                                            "header": "Edit",
                                            "binding": "EditId",
                                            "width": 70,
                                            "align": "center",
                                            "allowResizing": false,
                                            "allowSorting": false,
                                            "isContentHtml": true
                                        },
                                    </text>
                                }
                                if (canDelete)
                                {
                                    <text>
                                        {
                                            "header": "Delete",
                                            "binding": "DeleteId",
                                            "width": 70,
                                            "align": "center",
                                            "allowResizing": false,
                                            "allowSorting": false,
                                            "isContentHtml": true
                                        },
                                    </text>
                                }
                            }
                            {
                                "header": "Code",
                                "binding": "AccountCategoryCode",
                                "allowSorting": true,
                                "width": "3*"
                            },
                            {
                                "header": "Account Category",
                                "binding": "AccountCategory",
                                "allowSorting": true,
                                "width": "5*"
                            },
                            {
                                "header": "L",
                                "binding": "IsLocked",
                                "allowSorting": true,
                                "width": 50
                            }
                ],
                autoGenerateColumns: false,
                itemsSource: accountCategories,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            accountCategoryGrid.trackChanges = true;

            btnFirstPageGridAccountCategory = document.getElementById('btnMoveToFirstPageGridAccountCategory');
            btnPreviousPageGridAccountCategory = document.getElementById('btnMoveToPreviousPageGridAccountCategory');
            btnNextPageGridAccountCategory = document.getElementById('btnMoveToNextPageGridAccountCategory');
            btnLastPageGridAccountCategory = document.getElementById('btnMoveToLastPageGridAccountCategory');
            btnCurrentPageGridAccountCategory = document.getElementById('btnCurrentPageGridAccountCategory');

            updateNavigateButtonsAccountCategory();

            btnFirstPageGridAccountCategory.addEventListener('click', function () {
                accountCashFlows.moveToFirstPage();
                updateNavigateButtonsAccountCashFlow();
            });
            btnPreviousPageGridAccountCategory.addEventListener('click', function () {
                accountCashFlows.moveToPreviousPage();
                updateNavigateButtonsAccountCashFlow();
            });
            btnNextPageGridAccountCategory.addEventListener('click', function () {
                accountCashFlows.moveToNextPage();
                updateNavigateButtonsAccountCashFlow();
            });
            btnLastPageGridAccountCategory.addEventListener('click', function () {
                accountCashFlows.moveToLastPage();
                updateNavigateButtonsAccountCashFlow();
            });

            var canAdd = "@ViewData["CanAdd"]";
            if (canAdd == "False") {
                $("#btnAddAccountCategory").prop("disabled", true);
            }
        }

        $('#accountCategoryTabId').click(function () {
            $('#Account').hide();
            $('#AccountType').hide();
            $('#AccountCashFlow').hide();
            $('#AccountCategory').show();
            accountCategoryTab();
            window.accountCategoryTab = function () {
                return true;
            }
            refreshAccountCategory();
        });

        // Account Category Lock - IsLocked
        $("#accountCategoryEdit_IsLocked").click(function () {
            if ($(this).is(':checked')) {
                document.getElementById('accountCategory_Code').disabled = true;
                document.getElementById('accountCategory_Category').disabled = true;
                document.getElementById('accountCategoryLockAndUnLock').innerHTML = "<i class='fa fa-lock'></i>";
            } else {
                document.getElementById('accountCategory_Code').disabled = false;
                document.getElementById('accountCategory_Category').disabled = false;
                document.getElementById('accountCategoryLockAndUnLock').innerHTML = "<i class='fa fa-unlock'></i>";
            }
        });

        $(document).ready(function () {
            $('#Account').show();
            $('#AccountType').hide();
            $('#AccountCashFlow').hide();
            $('#AccountCategory').hide();
            accountTab();

            $(document).on('show.bs.modal', '.modal', function (event) {
                var zIndex = 1040 + (10 * $('.modal:visible').length);
                $(this).css('z-index', zIndex);
                setTimeout(function () {
                    $('.modal-backdrop').not('.modal-stack').css('z-index', zIndex - 1).addClass('modal-stack');
                }, 0);
            });

            $(document).on('hidden.bs.modal', '.modal', function () {
                $('.modal:visible').length && $(document.body).addClass('modal-open');
            });
        });
    </script>

    <script type="text/javascript">
        var cboUserBranches = new wijmo.input.ComboBox('#cboUserBranches');
        function getUserBranches() {
            $("#loadingUserBranches").show();
            document.getElementById("loadingUserBranches").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#userBranchContent").hide();

            $('#userBranchesModal').modal({ show: true, backdrop: 'static' });

            document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
            $("#updateUserBranch").prop("disabled", false);
            $("#closeUserBranch").prop("disabled", false);

            var userBranchesObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/userBranch/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (userBranchesResults) {
                    if (userBranchesResults.length > 0) {
                        for (i = 0; i < userBranchesResults.length; i++) {
                            userBranchesObservableArray.push({
                                BranchId: userBranchesResults[i]["BranchId"],
                                Branch: userBranchesResults[i]["Branch"]
                            });
                        }
                    }

                    var currentBranch = "@ViewData["BranchId"]";
                    cboUserBranches.dispose();
                    cboUserBranches = new wijmo.input.ComboBox('#cboUserBranches', {
                        isEditable: false,
                        placeholder: "Select Branches",
                        itemsSource: userBranchesObservableArray,
                        displayMemberPath: "Branch",
                        selectedValuePath: "BranchId",
                        selectedValue: currentBranch
                    });

                    setTimeout(function () {
                        $("#loadingUserBranches").hide();
                        $("#userBranchContent").show();
                    }, 500)
                }
            });
        }

        function updateUserBranchOnclick() {
            document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Updating";
            $("#updateUserBranch").prop("disabled", true);
            $("#closeUserBranch").prop("disabled", true);

            var userBranchObject = new Object();
            userBranchObject.BranchId = cboUserBranches.selectedValue;
            var userBranchData = JSON.stringify(userBranchObject);

            $.ajax({
                type: "PUT",
                url: '/api/userBranch/update',
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: userBranchData,
                statusCode: {
                    200: function () {
                        toastr.success("Update Successful");
                        window.setTimeout(function () {
                            location.reload()
                        }, 1000);
                    },
                    404: function () {
                        toastr.error("Not Found");
                        document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
                        $("#updateUserBranch").prop("disabled", false);
                        $("#closeUserBranch").prop("disabled", false);
                    },
                    500: function () {
                        toastr.error("Bad Request");
                        document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
                        $("#updateUserBranch").prop("disabled", false);
                        $("#closeUserBranch").prop("disabled", false);
                    }
                }
            });
        }
    </script>
    <script type="text/javascript">
        var slideLeft = new Menu({
            wrapper: '#o-wrapper',
            type: 'slide-left',
            menuOpenerClass: '.c-button',
            maskId: '#c-mask'
        });

        var slideLeftBtn = document.querySelector('#c-button--slide-left');

        slideLeftBtn.addEventListener('click', function (e) {
            e.preventDefault;
            slideLeft.open();
        });
    </script>
</body>
</html>