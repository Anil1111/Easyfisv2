<!DOCTYPE html>
<html>
<head>
    <!-- Meta -->
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">

    <!-- Title of the Page -->
    <link rel="shortcut icon" href="~/Images/icon/easyfislogomini.ico">
    <title>Chart of Accounts</title>

    <!-- CSS StyleSheets-->
    @Styles.Render("~/Content/Software-css")
</head>
<body class="hold-transition skin-blue fixed sidebar-mini">
    <div class="wrapper">
        @Html.Partial("_SoftwareHeader")
        @Html.Partial("_SoftwareSideBarMenu")

        <div class="content-wrapper">
            <section class="content-header">
                <h1>
                    Chart of Accounts
                    <small><i class="fa fa-building"></i> @ViewData["Company"] / @ViewData["Branch"]</small>
                </h1>
                <ol class="breadcrumb">
                    <li><a href="/Software"> Dashboard</a></li>
                    <li> Chart of Accounts</li>
                </ol>
            </section>

            <section class="content">
                <div class="box box-default">
                    <div class="box-header">
                        <ul class="nav nav-tabs pill-custom" role="tablist" id="myTab">
                            <li role="presentation" class="active"><a data-toggle="tab" href="#Account" id="accountTabId">Account</a></li>
                            <li role="presentation"><a data-toggle="tab" href="#AccountType" id="accountTypeTabId">Account Type</a></li>
                            <li role="presentation"><a data-toggle="tab" href="#AccountCashFlow" id="accountCashFlowTabId">Account Cash Flow</a></li>
                            <li role="presentation"><a data-toggle="tab" href="#AccountCategory" id="accountCategoryTabId">Account Category</a></li>
                        </ul>
                        <br />
                    </div>
                    <div class="box-body">
                        <div class="tab-content">
                            <!-- Account List -->
                            <div id="Account" class="tab-pane fade in active">
                                <div class="row">
                                    <div class="col-lg-12">
                                        <h4>Account</h4>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-lg-4">
                                        <div class="input-group input-group-sm">
                                            <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                            <input type="text" class="form-control input-sm" id="InputFilterAccount" placeholder="Search">
                                        </div>
                                    </div>
                                    <div class="col-lg-8" align="right">
                                        <button class="btn btn-primary btn-sm" onclick="cmdAddNewAccount_OnClick()"><i class="fa fa-plus"></i> Add</button>
                                        <button class="btn btn-danger btn-sm" onclick="cmdCloseAccount_OnClick()"><i class=" fa fa-times"></i> Close</button>
                                    </div>
                                </div>
                                <br />
                                <div class="row" align="left">
                                    <div class="col-lg-12">
                                        <div id="AccountGrid" class="grid" align="left"></div>
                                    </div>
                                </div>
                                <br />
                                <div class="row">
                                    <div class="btn-group col-md-7" id="naviagtionPageGridAccount">
                                        <button type="button" class="btn btn-default" id="btnMoveToFirstPageGridAccount">
                                            <span class="glyphicon glyphicon-fast-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default" id="btnMoveToPreviousPageGridAccount">
                                            <span class="glyphicon glyphicon-step-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default" disabled style="width: 100px" id="btnCurrentPageGridAccount"></button>
                                        <button type="button" class="btn btn-default" id="btnMoveToNextPageGridAccount">
                                            <span class="glyphicon glyphicon-step-forward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default" id="btnMoveToLastPageGridAccount">
                                            <span class="glyphicon glyphicon-fast-forward"></span>
                                        </button>
                                    </div>
                                </div>
                            </div>
                            <div id="AccountType" class="tab-pane fade">
                                <div class="row">
                                    <div class="col-lg-12">
                                        <h4>Account Type</h4>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-lg-4">
                                        <div class="input-group input-group-sm">
                                            <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                            <input type="text" class="form-control input-sm" id="InputFilterAccountType" placeholder="Search">
                                        </div>
                                    </div>
                                    <div class="col-lg-8" align="right">
                                        <button class="btn btn-primary btn-sm" onclick="cmdAddNewAccountType_OnClick()"><i class="fa fa-plus"></i> Add</button>
                                        <button class="btn btn-danger btn-sm" onclick="cmdCloseAccountType_OnClick()"><i class=" fa fa-times"></i> Close</button>
                                    </div>
                                </div>
                                <br />
                                <div class="row" align="left">
                                    <div class="col-lg-12">
                                        <div id="AccountTypeGrid" class="grid" align="left"></div>
                                    </div>
                                </div>
                                <br />
                                <div class="row">
                                    <div class="btn-group col-md-7" id="naviagtionPageGridAccountType">
                                        <button type="button" class="btn btn-default" id="btnMoveToFirstPageGridAccountType">
                                            <span class="glyphicon glyphicon-fast-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default" id="btnMoveToPreviousPageGridAccountType">
                                            <span class="glyphicon glyphicon-step-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default" disabled style="width: 100px" id="btnCurrentPageGridAccountType"></button>
                                        <button type="button" class="btn btn-default" id="btnMoveToNextPageGridAccountType">
                                            <span class="glyphicon glyphicon-step-forward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default" id="btnMoveToLastPageGridAccountType">
                                            <span class="glyphicon glyphicon-fast-forward"></span>
                                        </button>
                                    </div>
                                </div>
                            </div>
                            <div id="AccountCashFlow" class="tab-pane fade">
                                <div class="row">
                                    <div class="col-lg-12">
                                        <h4>Account Cash Flow</h4>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-lg-4">
                                        <div class="input-group input-group-sm">
                                            <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                            <input type="text" class="form-control input-sm" id="InputFilterAccountCashFlow" placeholder="Search">
                                        </div>
                                    </div>
                                    <div class="col-lg-8" align="right">
                                        <button class="btn btn-primary btn-sm" onclick="cmdAddNewAccountCashFlow_OnClick()"><i class="fa fa-plus"></i> Add</button>
                                        <button class="btn btn-danger btn-sm" onclick="cmdCloseAccountCashFlow_OnClick()"><i class=" fa fa-times"></i> Close</button>
                                    </div>
                                </div>
                                <br />
                                <div class="row" align="left">
                                    <div class="col-lg-12">
                                        <div id="AccountCashFlowGrid" class="grid" align="left"></div>
                                    </div>
                                </div>
                                <br />
                                <div class="row">
                                    <div class="btn-group col-md-7" id="naviagtionPageGridAccountCashFlow">
                                        <button type="button" class="btn btn-default" id="btnMoveToFirstPageGridAccountCashFlow">
                                            <span class="glyphicon glyphicon-fast-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default" id="btnMoveToPreviousPageGridAccountCashFlow">
                                            <span class="glyphicon glyphicon-step-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default" disabled style="width: 100px" id="btnCurrentPageGridAccountCashFlow"></button>
                                        <button type="button" class="btn btn-default" id="btnMoveToNextPageGridAccountCashFlow">
                                            <span class="glyphicon glyphicon-step-forward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default" id="btnMoveToLastPageGridAccountCashFlow">
                                            <span class="glyphicon glyphicon-fast-forward"></span>
                                        </button>
                                    </div>
                                </div>
                            </div>
                            <div id="AccountCategory" class="tab-pane fade">
                                <div class="row">
                                    <div class="col-lg-12">
                                        <h4>Account Category</h4>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-lg-4">
                                        <div class="input-group input-group-sm">
                                            <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                            <input type="text" class="form-control input-sm" id="InputFilterAccountCategory" placeholder="Search">
                                        </div>
                                    </div>
                                    <div class="col-lg-8" align="right">
                                        <button class="btn btn-primary btn-sm" onclick="cmdAddNewAccountCategory_OnClick()"><i class="fa fa-plus"></i> Add</button>
                                        <button class="btn btn-danger btn-sm" onclick="cmdCloseAccountCategory_OnClick()"><i class=" fa fa-times"></i> Close</button>
                                    </div>
                                </div>
                                <br />
                                <div class="row" align="left">
                                    <div class="col-lg-12">
                                        <div id="AccountCategoryGrid" class="grid" align="left"></div>
                                    </div>
                                </div>
                                <br />
                                <div class="row">
                                    <div class="btn-group col-md-7" id="naviagtionPageGridAccountCategory">
                                        <button type="button" class="btn btn-default" id="btnMoveToFirstPageGridAccountCategory">
                                            <span class="glyphicon glyphicon-fast-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default" id="btnMoveToPreviousPageGridAccountCategory">
                                            <span class="glyphicon glyphicon-step-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default" disabled style="width: 100px" id="btnCurrentPageGridAccountCategory"></button>
                                        <button type="button" class="btn btn-default" id="btnMoveToNextPageGridAccountCategory">
                                            <span class="glyphicon glyphicon-step-forward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default" id="btnMoveToLastPageGridAccountCategory">
                                            <span class="glyphicon glyphicon-fast-forward"></span>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </section>
        </div>

        @Html.Partial("_SoftwareFooter")
    </div>

    <!-- =================== -->
    <!-- Account Edit Detail -->
    <!-- =================== -->
    <div class="modal fade" id="accountEdit" role="dialog">
        <div class="modal-dialog">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title" id="accountModalLabel">Account Detail <span id="accountLockAndUnLock"></span> </h4>
                </div>
                <div class="modal-body">
                    <form id="AccountDetailForm">
                        <input type="hidden" id="account_id" />
                        <dl class="dl-horizontal">
                            <dt>Account Code</dt>
                            <dd><input type="text" class="form-control input-sm requiredAccount" id="account_code" placeholder="Code" /></dd>
                            <dt>Account</dt>
                            <dd><input type="text" class="form-control input-sm requiredAccount" id="account_account" placeholder="Account" /></dd>
                            <dt>Account Type</dt>
                            <dd>
                                <div id="account_type_id" class="comboBox-wide"></div>
                            </dd>
                            <dt>Cash Flow</dt>
                            <dd>
                                <div id="account_cash_flow_id" class="comboBox-wide"></div>
                            </dd>
                            <dt>Lock (Edit)</dt>
                            <dd>
                                <input type="checkbox" id="accountEdit_IsLocked" />
                            </dd>
                        </dl>
                    </form>
                    <hr id="hrAccountArticleType" />
                    <center><label id="loadingAccountArtitleType"></label></center>
                    <div id="accountArticleTypeDiv">
                        <div class="row">
                            <div class="col-lg-6">
                                <label>Account Article Type</label>
                            </div>
                            <div class="col-lg-6" align="right">
                                <button class="btn btn-primary btn-sm" id="btnAddACcountArticleType" onclick="btnAddAccountArticleType()"><i class="fa fa-plus"></i> Add</button>
                            </div>
                        </div>
                        <br />
                        <div class="row" align="left">
                            <div class="col-lg-12">
                                <div id="AccountArticleTypeGrid" class="grid" align="left"></div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary btn-sm" id="cmdSaveAccountButton" onclick="cmdAccountSaveButton_OnClick()"><i class="fa fa-save"></i> Save</button>
                    <button id="cmdAccountDetailCloseButton" class="btn btn-danger btn-sm" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- ==================== -->
    <!-- Account Article Type -->
    <!-- ==================== -->
    <div class="modal fade" id="accountArticleTypeModal" role="dialog">
        <div class="modal-dialog btn-sm">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title" id="accountArticleTypeModalLabel">Account Article Type Detail</h4>
                </div>
                <div class="modal-body">
                    <input type="hidden" id="accountArticleType_id" />
                    <form id="AccountTypeDetailForm">
                        <dl class="dl-horizontal">
                            <dt>Article Type</dt>
                            <dd>
                                <div id="accountArticleType_articleType" class="comboBox-wide"></div>
                            </dd>
                        </dl>
                    </form>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary btn-sm" id="cmdSaveaccountArticleTypeButton" onclick="cmdAccountArticleTypeSaveButton_OnClick()"><i class="fa fa-save"></i> Save</button>
                    <button id="cmdaccountArticleTypeDetailCloseButton" class="btn btn-danger btn-sm" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- =========================== -->
    <!-- Account Article Type Delete -->
    <!-- =========================== -->
    <div class="modal fade" id="deleteAccountArticleTypeConfirm" role="dialog">
        <div class="modal-dialog modal-sm">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Delete Article Type<i class="fa fa-trash"></i></h4>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete this?
                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger btn-sm" id="cmdConfirmDeleteAccountArticleType" onclick="cmdAccountArticleTypeConfirmDeleteButton_OnClick()"><i class="fa fa-trash"></i> Delete</button>
                    <button id="cmdConfirmDeleteCloseButtonAccountArticleType" class="btn btn-primary btn-sm" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <!-- ============== -->
    <!-- Account Delete -->
    <!-- ============== -->
    <div class="modal fade" id="deleteAccountConfirm" role="dialog">
        <div class="modal-dialog modal-sm">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Delete Account <i class="fa fa-trash"></i></h4>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete this?
                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger btn-sm" id="cmdConfirmDeleteAccount" onclick="cmdAccountConfirmDeleteButton_OnClick()"><i class="fa fa-trash"></i> Delete</button>
                    <button id="cmdConfirmDeleteCloseButtonAccount" class="btn btn-primary btn-sm" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>


    <!-- ======================== -->
    <!-- Account Type Edit Detail -->
    <!-- ======================== -->
    <div class="modal fade" id="accountTypeEdit" role="dialog">
        <div class="modal-dialog">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title" id="accountTypeModalLabel">Account Type Detail <span id="accountTypeLockAndUnLock"></span> </h4>
                </div>
                <div class="modal-body">
                    <input type="hidden" id="accountType_id" />
                    <form id="AccountTypeDetailForm">
                        <dl class="dl-horizontal">
                            <dt>Account Type Code</dt>
                            <dd><input type="text" class="form-control input-sm requiredAccountType" id="accountType_code" placeholder="Code" /></dd>
                            <dt>Account Type</dt>
                            <dd><input type="text" class="form-control input-sm requiredAccountType" id="accountType_accountType" placeholder="Account Type" /></dd>
                            <dt>Category</dt>
                            <dd>
                                <div id="accountType_CategoryId" class="comboBox-wide"></div>
                            </dd>
                            <dt>Category Description</dt>
                            <dd><input type="text" class="form-control input-sm requiredAccountType" id="accountType_SubCategoryDescription" placeholder="Sub-Category Description" /></dd>
                            <dt>Lock (Edit)</dt>
                            <dd><input type="checkbox" id="accountTypeEdit_IsLocked" /></dd>
                        </dl>
                    </form>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary btn-sm" id="cmdSaveAccountTypeButton" onclick="cmdAccountTypeSaveButton_OnClick()"><i class="fa fa-save"></i> Save</button>
                    <button id="cmdAccountTypeDetailCloseButton" class="btn btn-danger btn-sm" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- =================== -->
    <!-- Account Type Delete -->
    <!-- =================== -->
    <div class="modal fade" id="deleteAccountTypeConfirm" role="dialog">
        <div class="modal-dialog modal-sm">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Delete Account Type <i class="fa fa-trash"></i></h4>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete this?
                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger btn-sm" id="cmdConfirmDeleteAccountType" onclick="cmdAccountTypeConfirmDeleteButton_OnClick()"><i class="fa fa-trash"></i> Delete</button>
                    <button id="cmdConfirmDeleteCloseButtonAccountType" class="btn btn-primary btn-sm" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <!-- ============================= -->
    <!-- Account Cash Flow Edit Detail -->
    <!-- ============================= -->
    <div class="modal fade" id="accountCashFlowEdit" role="dialog">
        <div class="modal-dialog">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title" id="accountCashFlowModalLabel">Account Cash Flow Detail <span id="accountCashFlowLockAndUnLock"></span></h4>
                </div>
                <div class="modal-body">
                    <form id="AccountCashFlowDetailForm">
                        <input type="hidden" id="accountCashFlow_Id" />
                        <dl class="dl-horizontal">
                            <dt>Cash Flow Code</dt>
                            <dd><input type="text" class="form-control input-sm requiredAccountCashFlow" id="accountCashFlow_Code" placeholder="Code" /></dd>
                            <dt>Cash Flow</dt>
                            <dd><input type="text" class="form-control input-sm requiredAccountCashFlow" id="accountCashFlow_CashFlow" placeholder="Cash FLow" /></dd>
                            <dt>Lock (Edit)</dt>
                            <dd><input type="checkbox" id="accountCashFlowEdit_IsLocked" /></dd>
                        </dl>
                    </form>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary btn-sm" id="cmdSaveAccountCashFlowButton" onclick="cmdAccountCashFlowSaveButton_OnClick()"><i class="fa fa-save"></i> Save</button>
                    <button id="cmdAccountCashFlowDetailCloseButton" class="btn btn-danger btn-sm" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- ======================== -->
    <!-- Account Cash Flow Delete -->
    <!-- ======================== -->
    <div class="modal fade" id="deleteAccountCashFlowConfirm" role="dialog">
        <div class="modal-dialog modal-sm">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Delete Account Cash Flow <i class="fa fa-trash"></i></h4>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete this?
                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger btn-sm" id="cmdConfirmDeleteAccountCashFlow" onclick="cmdAccountCashFlowConfirmDeleteButton_OnClick()"><i class="fa fa-trash"></i> Delete</button>
                    <button id="cmdConfirmDeleteCloseButtonAccountCashFlow" class="btn btn-primary btn-sm" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <!-- ============================ -->
    <!-- Account Category Edit Detail -->
    <!-- ============================ -->
    <div class="modal fade" id="accountCategoryEdit" role="dialog">
        <div class="modal-dialog">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title" id="accountCategoryModalLabel">Account Category Detail <span id="accountCategoryLockAndUnLock"></span></h4>
                </div>
                <div class="modal-body">
                    <form id="AccountCategoryDetailForm">
                        <input type="hidden" id="accountCategory_Id" />
                        <dl class="dl-horizontal">
                            <dt>Category Code</dt>
                            <dd><input type="text" class="form-control input-sm requiredAccountCategory" id="accountCategory_Code" placeholder="Code" /></dd>
                            <dt>Category</dt>
                            <dd><input type="text" class="form-control input-sm requiredAccountCategory" id="accountCategory_Category" placeholder="Category" /></dd>
                            <dt>Lock (Edit)</dt>
                            <dd><input type="checkbox" id="accountCategoryEdit_IsLocked" /></dd>
                        </dl>
                    </form>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary btn-sm" id="cmdSaveAccountCategoryButton" onclick="cmdAccountCategorySaveButton_OnClick()"><i class="fa fa-save"></i> Save</button>
                    <button id="cmdAccountCategoryDetailCloseButton" class="btn btn-danger btn-sm" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- ======================= -->
    <!-- Account Category Delete -->
    <!-- ======================= -->
    <div class="modal fade" id="deleteAccountCategoryConfirm" role="dialog">
        <div class="modal-dialog modal-sm">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Delete Account Category <i class="fa fa-trash"></i></h4>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete this?
                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger btn-sm" id="cmdConfirmDeleteAccountCategory" onclick="cmdAccountCategoryConfirmDeleteButton_OnClick()"><i class="fa fa-trash"></i> Delete</button>
                    <button id="cmdConfirmDeleteCloseButtonAccountCategory" class="btn btn-primary btn-sm" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Delete Lock -->
    <div class="modal fade" id="deleteRecordLock" role="dialog">
        <div class="modal-dialog modal-sm">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Record Locked <i class="fa fa-lock"></i></h4>
                </div>
                <div class="modal-body">
                    Sorry, the record is lock! It can't be deleted!
                </div>
                <div class="modal-footer">
                    <button id="cmdConfirmDeleteCloseButton" class="btn btn-primary btn-sm" data-dismiss="modal"> Okay</button>
                </div>
            </div>
        </div>
    </div>

    @Scripts.Render("~/Scripts/Software-js")
    <!-- =============== -->
    <!-- Account Scripts -->
    <!-- =============== -->
    <script type="text/javascript">
        // ===========================
        // Global Variables for Account
        // ============================
        var accounts;
        var accountGrid;
        var cboAccountType;
        var cboAccountCashFlow;
        var btnFirstPageGridAccount;
        var btnPreviousPageGridAccount;
        var btnNextPageGridAccount;
        var btnLastPageGridAccount;
        var btnCurrentPageGridAccount;
        var accountArticleTypes;
        var btnFirstPageGridAccountArticleType;
        var btnPreviousPageGridAccountArticleType;
        var btnNextPageGridAccountArticleType;
        var btnLastPageGridAccountArticleType;
        var btnCurrentPageGridAccountArticleType;
        var articleTypes;
        var cboForArticleType;
        var accountTypeSelectedValue = "";
        var accountCashFlowSelectedValue = "";
        var articleTypeSelectedValue = "";
        var Islocked;

        // =================
        // IsLocked Disabled
        // =================
        function isLockedDisabledDropdown(items) {
            var disabled;
            if (items == 0) {
                disabled = true;
            } else {
                if (Islocked == true) {
                    disabled = true;
                } else {
                    disabled = false;
                }
            }
            return disabled;
        }

        // ==============================
        // GET Account Type for Combo Box
        // ==============================
        function getAccountTypeForComboBox() {
            var accountTypes = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listAccountType',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (accountTypeResults) {
                    if (accountTypeResults.length > 0) {
                        for (i = 0; i < accountTypeResults.length; i++) {
                            accountTypes.push({
                                AccountTypeId: accountTypeResults[i]["Id"],
                                AccountTypeCode: accountTypeResults[i]["AccountTypeCode"],
                                AccountType: accountTypeResults[i]["AccountType"],
                                AccountCategoryId: accountTypeResults[i]["AccountCategoryId"]
                            });
                        }
                        createCboAccountType(accountTypes);
                    } else {
                        createCboAccountType(accountTypes);
                    }
                }
            }).fail(function (xhr, textStatus, err) {
                alert(err);
            });
            return accountTypes
        }

        // ==========================
        // Combo Box for Account Type
        // ==========================
        function createCboAccountType(accountTypes) {
            cboAccountType.dispose();
            cboAccountType = new wijmo.input.ComboBox('#account_type_id', {
                disabled: isLockedDisabledDropdown(accountTypes),
                placeholder: "Account Type",
                itemsSource: accountTypes,
                displayMemberPath: "AccountType",
                isEditable: false,
                selectedValuePath: "AccountType",
                selectedValue: accountTypeSelectedValue.toString(),
            });
        }

        // ===================================
        // GET Account Cash Flow for Combo Box
        // ===================================
        function getAccountCashFlowForComboBox() {
            var accountCashFlows = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listAccountCashFlow',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (accountCashFlowResults) {
                    if (accountCashFlowResults.length > 0) {
                        for (i = 0; i < accountCashFlowResults.length; i++) {
                            accountCashFlows.push({
                                AccountCashFlowId: accountCashFlowResults[i]["Id"],
                                AccountCashFlowCode: accountCashFlowResults[i]["AccountCashFlowCode"],
                                AccountCashFlow: accountCashFlowResults[i]["AccountCashFlow"]
                            });
                        }
                        createCboAccountCashFlow(accountCashFlows);
                    } else {
                        createCboAccountCashFlow(accountCashFlows);
                    }
                }
            });
            return accountCashFlows;
        }

        // ===============================
        // Combo Box for Account Cash FLow
        // ===============================
        function createCboAccountCashFlow(accountCashFlows) {
            cboAccountCashFlow.dispose();
            cboAccountCashFlow = new wijmo.input.ComboBox('#account_cash_flow_id', {
                disabled: isLockedDisabledDropdown(accountCashFlows),
                placeholder: "Account Cash Flow",
                itemsSource: accountCashFlows,
                displayMemberPath: "AccountCashFlow",
                isEditable: false,
                selectedValuePath: "AccountCashFlow",
                selectedValue: accountCashFlowSelectedValue.toString(),
            });
        }

        // ================
        // GET Account List
        // ================
        function getAccount() {
            var accounts = new wijmo.collections.ObservableArray;
            NProgress.start();
            $.ajax({
                url: '/api/account/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (accountResults) {
                    if (accountResults.length > 0) {
                        for (i = 0; i < accountResults.length; i++) {

                            var btnDeleteId;
                            if (accountResults[i]["IsLocked"] == true) {
                                btnDeleteId = "<button class='btn btn-danger btn-xs btn-block' onclick='cmdAccountDeleteLockButton_OnClick()'><i class='fa fa-trash'></i> Delete</button>";
                            } else {
                                btnDeleteId = "<button class='btn btn-danger btn-xs btn-block' onclick='cmdAccountDeleteButton_OnClick()'><i class='fa fa-trash'></i> Delete</button>";
                            }

                            accounts.push({
                                EditId: "<button class='btn btn-primary btn-xs btn-block' id='btnAccountEditButton' onclick='cmdAccountEditButton_OnClick()'><i class='fa fa-edit'></i> Edit</button>",
                                DeleteId: btnDeleteId,
                                Id: accountResults[i]["Id"],
                                AccountCode: accountResults[i]["AccountCode"],
                                Account: accountResults[i]["Account"],
                                AccountTypeId: accountResults[i]["AccountTypeId"],
                                AccountType: accountResults[i]["AccountType"],
                                AccountCashFlowId: accountResults[i]["AccountCashFlowId"],
                                AccountCashFlow: accountResults[i]["AccountCashFlow"],
                                IsLocked: accountResults[i]["IsLocked"],
                                CreatedById: accountResults[i]["CreatedById"],
                                CreatedBy: accountResults[i]["CreatedBy"],
                                CreatedDateTime: accountResults[i]["CreatedDateTime"],
                                UpdatedById: accountResults[i]["UpdatedById"],
                                UpdatedBy: accountResults[i]["UpdatedBy"],
                                UpdatedDateTime: accountResults[i]["UpdatedDateTime"]
                            });

                        }
                    }
                    NProgress.done();
                }
            });
            return accounts;
        }

        // ==========================
        // Account Delete Lock Button
        // ==========================
        function cmdAccountDeleteLockButton_OnClick() {
            $('#deleteRecordLock').modal({
                show: true,
                backdrop: 'static'
            });
        }

        // =====================================
        // refresh account article type flexgrid
        // =====================================
        function refreshAccountArticleTypeFlexgrid() {
            accountArticleTypes = new wijmo.collections.CollectionView(getAccountArticleType());

            // Flex Grid for account article Type
            accountArticleTypeGrid.itemsSource = accountArticleTypes;
            accountArticleTypeGrid.trackChanges = true;
        }

        // ========================
        // Account Entry Validation
        // ========================
        function accountEntryValidation() {
            var isValid = true;
            $('.requiredAccount').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                }
                else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            return isValid;
        }

        // ======================
        // ADD new Account Button
        // ======================
        function cmdAddNewAccount_OnClick() {
            $('#accountEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $('.requiredAccount').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            Islocked = false;
            document.getElementById('accountEdit_IsLocked').checked = false;
            document.getElementById("accountLockAndUnLock").innerHTML = '<i class="fa fa-unlock"></i>';

            document.getElementById('cmdSaveAccountButton').innerHTML = "<i class='fa fa-save'></i> Save";
            $("#cmdSaveAccountButton").prop("disabled", false);
            $("#cmdAccountDetailCloseButton").prop("disabled", false);

            document.getElementById('account_code').disabled = false;
            document.getElementById('account_account').disabled = false;

            $('#cmdEditUnLockAccountButton').prop('disabled', true);

            document.getElementById('account_id').value = 0;
            document.getElementById('account_code').value = "NA";
            document.getElementById('account_account').value = "NA";

            getAccountTypeForComboBox();
            getAccountCashFlowForComboBox();

            $('#AccountArticleTypeGrid').hide();
            $('#accountArticleTypeDiv').hide();
            $('#hrAccountArticleType').hide();
        }

        // ===================
        // EDIT Account Button
        // ===================
        function cmdAccountEditButton_OnClick() {
            accounts.editItem(accounts.currentItem);
            $('#accountEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $('.requiredAccount').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            document.getElementById('accountEdit_IsLocked').disabled = false;

            document.getElementById('cmdSaveAccountButton').innerHTML = "<i class='fa fa-save'></i> Save";
            $("#cmdSaveAccountButton").prop("disabled", false);
            $("#cmdAccountDetailCloseButton").prop("disabled", false);

            var account = accounts.currentEditItem;
            document.getElementById('account_id').value = account.Id;
            document.getElementById('account_code').value = account.AccountCode;
            document.getElementById('account_account').value = account.Account;
            accountTypeSelectedValue = account.AccountType;
            accountCashFlowSelectedValue = account.AccountCashFlow;
            document.getElementById('accountEdit_IsLocked').checked = account.IsLocked;

            if (account.IsLocked == true) {
                Islocked = true;
                document.getElementById('account_code').disabled = true;
                document.getElementById('account_account').disabled = true;
                document.getElementById("accountLockAndUnLock").innerHTML = '<i class="fa fa-lock"></i>';
                $('#btnAddACcountArticleType').prop('disabled', true);
                getAccountTypeForComboBox();
                getAccountCashFlowForComboBox();
            } else {
                Islocked = false;
                document.getElementById('account_code').disabled = false;
                document.getElementById('account_account').disabled = false;
                document.getElementById("accountLockAndUnLock").innerHTML = '<i class="fa fa-unlock"></i>';
                $('#btnAddACcountArticleType').prop('disabled', false);
                getAccountTypeForComboBox();
                getAccountCashFlowForComboBox();
            }

            document.getElementById("loadingAccountArtitleType").innerHTML = '<i class="fa fa-spinner fa-spin"></i> Loading';
            $('#loadingAccountArtitleType').show();
            $('#AccountArticleTypeGrid').hide();
            $('#accountArticleTypeDiv').hide();
            $('#hrAccountArticleType').show();
            setTimeout(function () {
                $('#loadingAccountArtitleType').hide();
                $('#AccountArticleTypeGrid').show();
                $('#accountArticleTypeDiv').show();
                $('#hrAccountArticleType').show();
                refreshAccountArticleTypeFlexgrid();
            }, 1000);
        }

        // ========================
        // Refresh Account Flexgrid
        // ========================
        function refreshAccoungFlexgrid() {
            accounts = new wijmo.collections.CollectionView(getAccount());
            accounts.canFilter = true;
            accounts.pageSize = 15;

            var filterTextAccount = '';
            $('#InputFilterAccount').keyup(function () {
                filterTextAccount = this.value.toLowerCase();
                accounts.refresh();
            });
            accounts.filter = function (item) {
                return !filterTextAccount || (item.Account.toLowerCase().indexOf(filterTextAccount) > -1);
            }
            accounts.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsAccount();
            });
            accounts.currentChanged.addHandler(function (sender, args) {
                updateDetailsAccount();
            });

            accountGrid.itemsSource = accounts;
            accountGrid.trackChanges = true;
        }

        // ===================
        // SAVE Account Button
        // ===================
        function cmdAccountSaveButton_OnClick() {
            var accountObject = new Object();
            var accountId = document.getElementById('account_id').value;
            accountObject.AccountCode = document.getElementById('account_code').value;
            accountObject.Account = document.getElementById('account_account').value;
            accountObject.AccountTypeId = cboAccountType.selectedItem["AccountTypeId"];
            accountObject.AccountCashFlowId = cboAccountCashFlow.selectedItem["AccountCashFlowId"];
            accountObject.IsLocked = document.getElementById('accountEdit_IsLocked').checked;
            var data = JSON.stringify(accountObject);

            if (cboAccountType.selectedItem["AccountTypeId"].toString() == '') {
                document.getElementById("account_type_id").style.border = "1px solid red";
            } else {
                document.getElementById("account_type_id").style.border = "1px solid #C8C8C8";
            }

            if (cboAccountCashFlow.selectedItem["AccountCashFlowId"].toString() == '') {
                document.getElementById("account_cash_flow_id").style.border = "1px solid red";
            } else {
                document.getElementById("account_cash_flow_id").style.border = "1px solid #C8C8C8";
            }

            if (accountEntryValidation() == false) {
                toastr.error("Invalid Entry");
            } else {
                document.getElementById('cmdSaveAccountButton').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Saving";
                $("#cmdSaveAccountButton").prop("disabled", true);
                $("#cmdAccountDetailCloseButton").prop("disabled", true);

                if (accountId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/addAccount',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: data,
                        success: function(id) {
                            if (id > 0) {
                                document.getElementById('cmdSaveAccountButton').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Saving";
                                $("#cmdSaveAccountButton").prop("disabled", true);
                                $("#cmdAccountDetailCloseButton").prop("disabled", true);
                                toastr.success("Successfully saved");
                                $('#accountEdit').modal('hide');
                                refreshAccoungFlexgrid();
                            } else {
                                document.getElementById('cmdSaveAccountButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#cmdSaveAccountButton").prop("disabled", false);
                                $("#cmdAccountDetailCloseButton").prop("disabled", false);
                                toastr.error("Save unsuccessful");
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/updateAccount/' + accountId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: data,
                        statusCode: {
                            200: function () {
                                document.getElementById('cmdSaveAccountButton').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Updating";
                                $("#cmdSaveAccountButton").prop("disabled", true);
                                $("#cmdAccountDetailCloseButton").prop("disabled", true);
                                toastr.success("Successfully updated");
                                $('#accountEdit').modal('hide');
                                refreshAccoungFlexgrid();
                            },
                            404: function () {
                                document.getElementById('cmdSaveAccountButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#cmdSaveAccountButton").prop("disabled", false);
                                $("#cmdAccountDetailCloseButton").prop("disabled", false);
                                toastr.error("Update request not found");
                            },
                            400: function () {
                                document.getElementById('cmdSaveAccountButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#cmdSaveAccountButton").prop("disabled", false);
                                $("#cmdAccountDetailCloseButton").prop("disabled", false);
                                toastr.error("Cannot update new record");
                            }
                        }
                    });
                }
            }
        }

        // ======================
        // DELETE Account Buttons
        // ======================
        function cmdAccountDeleteButton_OnClick() {
            $('#deleteAccountConfirm').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById('cmdConfirmDeleteAccount').innerHTML = "<i class='fa fa-trash'></i> Delete";
            $("#cmdConfirmDeleteAccount").prop("disabled", false);
            $("#cmdConfirmDeleteCloseButtonAccount").prop("disabled", false);
        }
        // Account Confirm Delete Button
        function cmdAccountConfirmDeleteButton_OnClick() {
            document.getElementById('cmdConfirmDeleteAccount').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Deleting";
            $("#cmdConfirmDeleteAccount").prop("disabled", true);
            $("#cmdConfirmDeleteCloseButtonAccount").prop("disabled", true);

            accounts.editItem(accounts.currentItem);
            var id = accounts.currentEditItem.Id;
            $.ajax({
                url: '/api/deleteAccount/' + id,
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        document.getElementById('cmdConfirmDeleteAccount').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Deleting";
                        $("#cmdConfirmDeleteAccount").prop("disabled", true);
                        $("#cmdConfirmDeleteCloseButtonAccount").prop("disabled", true);
                        toastr.success("Successfully deleted");
                        $('#deleteAccountConfirm').modal('hide');
                        refreshAccoungFlexgrid();
                    },
                    404: function () {
                        document.getElementById('cmdConfirmDeleteAccount').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $("#cmdConfirmDeleteAccount").prop("disabled", false);
                        $("#cmdConfirmDeleteCloseButtonAccount").prop("disabled", false);
                        $('#deleteAccountConfirm').modal('hide');
                        toastr.error("Delete request not found");
                    },
                    400: function () {
                        document.getElementById('cmdConfirmDeleteAccount').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $("#cmdConfirmDeleteAccount").prop("disabled", false);
                        $("#cmdConfirmDeleteCloseButtonAccount").prop("disabled", false);
                        $('#deleteAccountConfirm').modal('hide');
                        toastr.error("Cannot delete record");
                    }
                }
            });
        }

        // ====================
        // Close Account Button
        // ====================
        function cmdCloseAccount_OnClick() {
            window.location = '/Software';
        }

        // ==============================
        // FlexGrid Selection for Account
        // ==============================
        function updateDetailsAccount() {
            var item = accounts.currentItem;
            document.getElementById('createdBy').innerHTML = item.CreatedBy;
            document.getElementById('createdDate').innerHTML = item.CreatedDateTime;
            document.getElementById('updatedBy').innerHTML = item.UpdatedBy;
            document.getElementById('updatedDate').innerHTML = item.UpdatedDateTime;
        }

        // ===============================
        // Navigation Buttons for Account
        // ===============================
        function updateNavigateButtonsAccount() {
            if (accounts.pageSize <= 0) {
                document.getElementById('naviagtionPageGridAccount').style.display = 'none';
                return;
            }
            document.getElementById('naviagtionPageGridAccount').style.display = 'block';
            if (accounts.pageIndex === 0) {
                btnFirstPageGridAccount.setAttribute('disabled', 'disabled');
                btnPreviousPageGridAccount.setAttribute('disabled', 'disabled');
                btnNextPageGridAccount.removeAttribute('disabled');
                btnLastPageGridAccount.removeAttribute('disabled');
            } else if (accounts.pageIndex === (accounts.pageCount - 1)) {
                btnFirstPageGridAccount.removeAttribute('disabled');
                btnPreviousPageGridAccount.removeAttribute('disabled');
                btnLastPageGridAccount.setAttribute('disabled', 'disabled');
                btnNextPageGridAccount.setAttribute('disabled', 'disabled');
            } else {
                btnFirstPageGridAccount.removeAttribute('disabled');
                btnPreviousPageGridAccount.removeAttribute('disabled');
                btnNextPageGridAccount.removeAttribute('disabled');
                btnLastPageGridAccount.removeAttribute('disabled');
            }
            btnCurrentPageGridAccount.innerHTML = (accounts.pageIndex + 1) + ' / ' + accounts.pageCount;
        }

        // =============================
        // GET Account Article Type List
        // =============================
        function getAccountArticleType() {
            var accountArticleTypes = new wijmo.collections.ObservableArray;
            var accountId = document.getElementById('account_id').value;
            $.ajax({
                url: '/api/listAccountArticleTypeByAccountId/' + accountId,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (accountArticleTypeResults) {
                    if (accountArticleTypeResults.length > 0) {
                        for (i = 0; i < accountArticleTypeResults.length; i++) {

                            var btnEditId;
                            var btnDeleteId;
                            if (document.getElementById('accountEdit_IsLocked').checked == true) {
                                btnEditId = "<button class='btn btn-primary btn-xs btn-block' onclick='btnEditAccountArticleType_OnClick()' disabled><i class='fa fa-edit'></i> Edit</button>";
                                btnDeleteId = "<button class='btn btn-danger btn-xs btn-block' onclick='btnDeleteAccountArticleType_OnClick()' disabled><i class='fa fa-trash'></i> Delete</button>";
                            } else {
                                btnEditId = "<button class='btn btn-primary btn-xs btn-block' onclick='btnEditAccountArticleType_OnClick()'><i class='fa fa-edit'></i> Edit</button>";
                                btnDeleteId = "<button class='btn btn-danger btn-xs btn-block' onclick='btnDeleteAccountArticleType_OnClick()'><i class='fa fa-trash'></i> Delete</button>";
                            }

                            accountArticleTypes.push({
                                EditId: btnEditId,
                                DeleteId: btnDeleteId,
                                Id: accountArticleTypeResults[i]["Id"],
                                AccountId: accountArticleTypeResults[i]["AccountId"],
                                Account: accountArticleTypeResults[i]["Account"],
                                ArticleTypeId: accountArticleTypeResults[i]["ArticleTypeId"],
                                ArticleType: accountArticleTypeResults[i]["ArticleType"]
                            });
                        }
                    }
                }
            });
            return accountArticleTypes;
        }

        // ===================================
        // GET Account Article Type List Empty
        // ===================================
        function getAccountArticleTypeEmpty() {
            var accountArticleTypes = new wijmo.collections.ObservableArray;
            $.ajax({
                url: '/api/listAccountArticleTypeByAccountId/0',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (accountArticleTypeResults) {
                    if (accountArticleTypeResults.length > 0) {
                        for (i = 0; i < accountArticleTypeResults.length; i++) {
                            accountArticleTypes.push({
                                EditId: "<button class='btn btn-primary btn-xs btn-block' onclick='btnEditAccountArticleType_OnClick()'><i class='fa fa-edit'></i> Edit</button>",
                                DeleteId: "<button class='btn btn-danger btn-xs btn-block' onclick='btnDeleteAccountArticleType_OnClick()'><i class='fa fa-trash'></i> Delete</button>",
                                Id: accountArticleTypeResults[i]["Id"],
                                AccountId: accountArticleTypeResults[i]["AccountId"],
                                Account: accountArticleTypeResults[i]["Account"],
                                ArticleTypeId: accountArticleTypeResults[i]["ArticleTypeId"],
                                ArticleType: accountArticleTypeResults[i]["ArticleType"]
                            });
                        }
                    }
                }
            });
            return accountArticleTypes;
        }

        // ========================
        // Get Account Article Type
        // ========================
        function getAccountArticleTypeForComboBox() {
            articleTypes = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listArticleType',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (articleTypeResults) {
                    if (articleTypeResults.length > 0) {
                        for (i = 0; i < articleTypeResults.length; i++) {
                            articleTypes.push({
                                ArticleTypeId: articleTypeResults[i]["Id"],
                                ArticleType: articleTypeResults[i]["ArticleType"],
                                IsLocked: articleTypeResults[i]["IsLocked"],
                                CreatedById: articleTypeResults[i]["CreatedById"],
                                CreatedBy: articleTypeResults[i]["CreatedBy"],
                                CreatedDateTime: articleTypeResults[i]["CreatedDateTime"],
                                UpdatedById: articleTypeResults[i]["UpdatedById"],
                                UpdatedBy: articleTypeResults[i]["UpdatedBy"],
                                UpdatedDateTime: articleTypeResults[i]["UpdatedDateTime"]
                            });
                        }
                        createCboFoAccountArticleType(articleTypes);
                    } else {
                        createCboFoAccountArticleType(articleTypes);
                    }
                }
            });
        }

        // ============================
        // CBO for Account Article Type
        // ============================
        function createCboFoAccountArticleType(articleTypes) {
            cboForArticleType.dispose();
            cboForArticleType = new wijmo.input.ComboBox('#accountArticleType_articleType', {
                placeholder: "Select Article Type",
                itemsSource: articleTypes,
                displayMemberPath: "ArticleType",
                isEditable: false,
                selectedValuePath: "ArticleType",
                selectedValue: articleTypeSelectedValue.toString(),
            });
        }

        // ========================
        // ADD Account Article Type
        // ========================
        function btnAddAccountArticleType() {
            $('#accountArticleTypeModal').modal({
                show: true,
                backdrop: 'static'
            });

            $('.requiredAccountArticleType').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            document.getElementById('cmdSaveaccountArticleTypeButton').innerHTML = "<i class='fa fa-save'></i> Save";
            $("#cmdSaveaccountArticleTypeButton").prop("disabled", false);
            $("#cmdaccountArticleTypeDetailCloseButton").prop("disabled", false);

            document.getElementById('accountArticleType_id').value = 0;
            articleTypeSelectedValue = "";

            getAccountArticleTypeForComboBox();
        }

        // =========================
        // EDIT Account Article Type
        // =========================
        function btnEditAccountArticleType_OnClick() {
            $('#accountArticleTypeModal').modal({
                show: true,
                backdrop: 'static'
            });

            $('.requiredAccountArticleType').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            document.getElementById('cmdSaveaccountArticleTypeButton').innerHTML = "<i class='fa fa-save'></i> Save";
            $("#cmdSaveaccountArticleTypeButton").prop("disabled", false);
            $("#cmdaccountArticleTypeDetailCloseButton").prop("disabled", false);

            accountArticleTypes.editItem(accountArticleTypes.currentItem);
            var accountArticleType = accountArticleTypes.currentEditItem;
            document.getElementById('accountArticleType_id').value = accountArticleType.Id;
            articleTypeSelectedValue = accountArticleType.ArticleType;

            getAccountArticleTypeForComboBox();
        }

        // ===========================
        // DELETE Account Article Type
        // ===========================
        function btnDeleteAccountArticleType_OnClick() {
            $('#deleteAccountArticleTypeConfirm').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById('cmdConfirmDeleteAccountArticleType').innerHTML = "<i class='fa fa-trash'></i> Delete";
            $("#cmdConfirmDeleteAccountArticleType").prop("disabled", false);
            $("#cmdConfirmDeleteCloseButtonAccountArticleType").prop("disabled", false);
        }
        // Account ArticleType Confirm Delete Button
        function cmdAccountArticleTypeConfirmDeleteButton_OnClick() {
            document.getElementById('cmdConfirmDeleteAccountArticleType').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Deleting";
            $("#cmdConfirmDeleteAccountArticleType").prop("disabled", true);
            $("#cmdConfirmDeleteCloseButtonAccountArticleType").prop("disabled", true);

            accountArticleTypes.editItem(accountArticleTypes.currentItem);
            var accountArticleTypeId = accountArticleTypes.currentEditItem.Id;
            $.ajax({
                url: '/api/deleteAccountArticleType/' + accountArticleTypeId,
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        document.getElementById('cmdConfirmDeleteAccountArticleType').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Deleting";
                        $("#cmdConfirmDeleteAccountArticleType").prop("disabled", true);
                        $("#cmdConfirmDeleteCloseButtonAccountArticleType").prop("disabled", true);
                        toastr.success("Successfully deleted");
                        $('#deleteAccountArticleTypeConfirm').modal('hide');
                        refreshAccountArticleTypeFlexgrid();
                    },
                    404: function () {
                        document.getElementById('cmdConfirmDeleteAccountArticleType').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $("#cmdConfirmDeleteAccountArticleType").prop("disabled", false);
                        $("#cmdConfirmDeleteCloseButtonAccountArticleType").prop("disabled", false);
                        $('#deleteAccountArticleTypeConfirm').modal('hide');
                        toastr.error("Delete request not found");
                    },
                    400: function () {
                        document.getElementById('cmdConfirmDeleteAccountArticleType').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $("#cmdConfirmDeleteAccountArticleType").prop("disabled", false);
                        $("#cmdConfirmDeleteCloseButtonAccountArticleType").prop("disabled", false);
                        $('#deleteAccountArticleTypeConfirm').modal('hide');
                        toastr.error("Cannot delete record");
                    }
                }
            });
        }

        // =====================================
        // Account Article Type Entry Validation
        // =====================================
        function accountArticleTypeEntryValidation() {
            var isValid = true;
            $('.requiredAccountArticleType').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                }
                else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            return isValid;
        }

        // =========================
        // SAVE Account Article Type
        // =========================
        function cmdAccountArticleTypeSaveButton_OnClick() {
            var accountArticleTypeeObject = new Object();
            var accountArticleType_id = document.getElementById('accountArticleType_id').value;
            accountArticleTypeeObject.AccountId = document.getElementById('account_id').value;
            accountArticleTypeeObject.ArticleTypeId = cboForArticleType.selectedItem["ArticleTypeId"];
            var accountArticleTypeData = JSON.stringify(accountArticleTypeeObject);

            if (cboForArticleType.selectedItem["ArticleTypeId"].toString() == '') {
                document.getElementById("accountArticleType_articleType").style.border = "1px solid red";
            } else {
                document.getElementById("accountArticleType_articleType").style.border = "1px solid #C8C8C8";
            }

            if (accountArticleTypeEntryValidation() == false) {
                toastr.error("Invalid Entry");
            } else {
                document.getElementById('cmdSaveaccountArticleTypeButton').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Saving";
                $("#cmdSaveaccountArticleTypeButton").prop("disabled", true);
                $("#cmdaccountArticleTypeDetailCloseButton").prop("disabled", true);
                if (accountArticleType_id == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/addAccountArticleType',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: accountArticleTypeData,
                        success: function (id) {
                            if (id > 0) {
                                document.getElementById('cmdSaveaccountArticleTypeButton').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Saving";
                                $("#cmdSaveaccountArticleTypeButton").prop("disabled", true);
                                $("#cmdaccountArticleTypeDetailCloseButton").prop("disabled", true);
                                toastr.success("Successfully saved");
                                $('#accountArticleTypeModal').modal('hide');
                                refreshAccountArticleTypeFlexgrid();
                            } else {
                                document.getElementById('cmdSaveaccountArticleTypeButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#cmdSaveaccountArticleTypeButton").prop("disabled", false);
                                $("#cmdaccountArticleTypeDetailCloseButton").prop("disabled", false);
                                toastr.error("Save unsuccessful");
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/updateAccountArticleType/' + accountArticleType_id,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: accountArticleTypeData,
                        statusCode: {
                            200: function () {
                                document.getElementById('cmdSaveaccountArticleTypeButton').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Updating";
                                $("#cmdSaveaccountArticleTypeButton").prop("disabled", true);
                                $("#cmdaccountArticleTypeDetailCloseButton").prop("disabled", true);
                                toastr.success("Successfully updated");
                                $('#accountArticleTypeModal').modal('hide');
                                refreshAccountArticleTypeFlexgrid();
                            },
                            404: function () {
                                document.getElementById('cmdSaveaccountArticleTypeButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#cmdSaveaccountArticleTypeButton").prop("disabled", false);
                                $("#cmdaccountArticleTypeDetailCloseButton").prop("disabled", false);
                                $('#accountArticleTypeModal').modal('hide');
                                toastr.error("Update request not found");
                            },
                            400: function () {
                                document.getElementById('cmdSaveaccountArticleTypeButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#cmdSaveaccountArticleTypeButton").prop("disabled", false);
                                $("#cmdaccountArticleTypeDetailCloseButton").prop("disabled", false);
                                $('#accountArticleTypeModal').modal('hide');
                                toastr.error("Cannot update record");
                            }
                        }
                    });
                }
            }
        }

        // =====================================
        // On Page Load for Account Article Type
        // =====================================
        function accountArticleTypeGrid() {
            cboForArticleType = new wijmo.input.ComboBox('#accountArticleType_articleType');
            accountArticleTypes = new wijmo.collections.CollectionView(getAccountArticleTypeEmpty());

            // Flex Grid for account article Type
            accountArticleTypeGrid = new wijmo.grid.FlexGrid('#AccountArticleTypeGrid');
            accountArticleTypeGrid.initialize({
                columns: [
                            {
                                "header": "Edit",
                                "binding": "EditId",
                                "width": 60,
                                "align": "center",
                                "allowResizing": false,
                                "allowSorting": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Delete",
                                "binding": "DeleteId",
                                "width": 70,
                                "align": "center",
                                "allowResizing": false,
                                "allowSorting": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Article Type",
                                "binding": "ArticleType",
                                "allowSorting": true,
                                "width": "2*"
                            }
                ],
                autoGenerateColumns: false,
                itemsSource: accountArticleTypes,
                isReadOnly: true,
                frozenColumns: 2,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            accountArticleTypeGrid.trackChanges = true;
        }

        // ========================
        // On Page Load for Account
        // ========================
        function accountTab() {
            accounts = new wijmo.collections.CollectionView(getAccount());
            accounts.canFilter = true;
            accounts.pageSize = 15;

            var filterTextAccount = '';
            $('#InputFilterAccount').keyup(function () {
                filterTextAccount = this.value.toLowerCase();
                accounts.refresh();
            });
            accounts.filter = function (item) {
                return !filterTextAccount || (item.Account.toLowerCase().indexOf(filterTextAccount) > -1);
            }
            accounts.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsAccount();
            });
            accounts.currentChanged.addHandler(function (sender, args) {
                updateDetailsAccount();
            });

            cboAccountType = new wijmo.input.ComboBox('#account_type_id');
            cboAccountCashFlow = new wijmo.input.ComboBox('#account_cash_flow_id');

            // Flex Grid for account
            accountGrid = new wijmo.grid.FlexGrid('#AccountGrid');
            accountGrid.initialize({
                columns: [
                            {
                                "header": "Edit",
                                "binding": "EditId",
                                "width": 60,
                                "align": "center",
                                "allowResizing": false,
                                "allowSorting": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Delete",
                                "binding": "DeleteId",
                                "width": 70,
                                "align": "center",
                                "allowResizing": false,
                                "allowSorting": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Code",
                                "binding": "AccountCode",
                                "allowSorting": true,
                                "width": "1*",
                            },
                            {
                                "header": "Account",
                                "binding": "Account",
                                "allowSorting": true,
                                "width": "3*"
                            },
                            {
                                "header": "Account Type",
                                "binding": "AccountType",
                                "allowSorting": true,
                                "width": "3*"
                            },
                            {
                                "header": "Lock",
                                "binding": "IsLocked",
                                "allowSorting": true,
                                "width": "0.5*"
                            }
                ],
                autoGenerateColumns: false,
                itemsSource: accounts,
                isReadOnly: true,
                frozenColumns: 2,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });
            accountGrid.trackChanges = true;

            //Navigation button for account
            btnFirstPageGridAccount = document.getElementById('btnMoveToFirstPageGridAccount');
            btnPreviousPageGridAccount = document.getElementById('btnMoveToPreviousPageGridAccount');
            btnNextPageGridAccount = document.getElementById('btnMoveToNextPageGridAccount');
            btnLastPageGridAccount = document.getElementById('btnMoveToLastPageGridAccount');
            btnCurrentPageGridAccount = document.getElementById('btnCurrentPageGridAccount');

            updateNavigateButtonsAccount();

            btnFirstPageGridAccount.addEventListener('click', function () {
                accounts.moveToFirstPage();
                updateNavigateButtonsAccount();
            });
            btnPreviousPageGridAccount.addEventListener('click', function () {
                accounts.moveToPreviousPage();
                updateNavigateButtonsAccount();
            });
            btnNextPageGridAccount.addEventListener('click', function () {
                accounts.moveToNextPage();
                updateNavigateButtonsAccount();
            });
            btnLastPageGridAccount.addEventListener('click', function () {
                accounts.moveToLastPage();
                updateNavigateButtonsAccount();
            });

            accountArticleTypeGrid();
        }
    </script>

    <!-- ==================== -->
    <!-- Account Type Scripts -->
    <!-- ==================== -->
    <script type="text/javascript">
        // =================================
        // Global Variables for Account Type
        // =================================
        var accountTypes;
        var accountTypeGrid;
        var cboAccountCategory;
        var btnFirstPageGridAccountType;
        var btnPreviousPageGridAccountType;
        var btnNextPageGridAccountType;
        var btnLastPageGridAccountType;
        var btnCurrentPageGridAccountType;
        var accountCategorySelectedValue = "";
        var Islocked;

        // =================
        // IsLocked Disabled
        // =================
        function isLockedDisabledDropdown(items) {
            var disabled;
            if (items == 0) {
                disabled = true;
            } else {
                if (Islocked == true) {
                    disabled = true;
                } else {
                    disabled = false;
                }
            }
            return disabled;
        }

        // ====================
        // GET Account Category
        // ====================
        function getAccountCategoryForComboBox() {
            var accountCategories = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listAccountCategory',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            accountCategories.push({
                                AccountCategoryId: results[i]["Id"],
                                AccountCategoryCode: results[i]["AccountCategoryCode"],
                                AccountCategory: results[i]["AccountCategory"]
                            });
                        }
                        createCboAccountCategory(accountCategories);
                    } else {
                        createCboAccountCategory(accountCategories);
                    }
                }
            }).fail(function (xhr, textStatus, err) {
                alert(err);
            });
            return accountCategories;
        }

        // ==============================
        // Combo Box for Account Category
        // ==============================
        function createCboAccountCategory(accountCategories) {
            cboAccountCategory.dispose();
            cboAccountCategory = new wijmo.input.ComboBox('#accountType_CategoryId', {
                disabled: isLockedDisabledDropdown(accountCategories),
                placeholder: "Account Category",
                itemsSource: accountCategories,
                displayMemberPath: "AccountCategory",
                isEditable: false,
                selectedValuePath: "AccountCategory",
                selectedValue: accountCategorySelectedValue.toString()
            });
        }

        // =====================
        // GET Account Type List
        // =====================
        function getAccountType() {
            var accountTypes = new wijmo.collections.ObservableArray;
            NProgress.start();
            $.ajax({
                url: '/api/listAccountType',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (accountTypeResults) {
                    if (accountTypeResults.length > 0) {
                        for (i = 0; i < accountTypeResults.length; i++) {

                            var btnDeleteId;
                            if (accountTypeResults[i]["IsLocked"] == true) {
                                btnDeleteId = "<button class='btn btn-danger btn-xs btn-block' onclick='cmdAccountTypeDeleteLockButton_OnClick()'><i class='fa fa-trash'></i> Delete</button>";
                            } else {
                                btnDeleteId = "<button class='btn btn-danger btn-xs btn-block' onclick='cmdAccountTypeDeleteButton_OnClick()'><i class='fa fa-trash'></i> Delete</button>";
                            }

                            accountTypes.push({
                                EditId: "<button class='btn btn-primary btn-xs btn-block' onclick='cmdAccountTypeEditButton_OnClick()'><i class='fa fa-edit'></i> Edit</button>",
                                DeleteId: btnDeleteId,
                                Id: accountTypeResults[i]["Id"],
                                AccountTypeCode: accountTypeResults[i]["AccountTypeCode"],
                                AccountType: accountTypeResults[i]["AccountType"],
                                AccountCategoryId: accountTypeResults[i]["AccountCategoryId"],
                                AccountCategory: accountTypeResults[i]["AccountCategory"],
                                SubCategoryDescription: accountTypeResults[i]["SubCategoryDescription"],
                                IsLocked: accountTypeResults[i]["IsLocked"],
                                CreatedById: accountTypeResults[i]["CreatedById"],
                                CreatedBy: accountTypeResults[i]["CreatedBy"],
                                CreatedDateTime: accountTypeResults[i]["CreatedDateTime"],
                                UpdatedById: accountTypeResults[i]["UpdatedById"],
                                UpdatedBy: accountTypeResults[i]["UpdatedBy"],
                                UpdatedDateTime: accountTypeResults[i]["UpdatedDateTime"]
                            });
                        }
                    }
                    NProgress.done();
                }
            });
            return accountTypes;
        }

        // ===============================
        // Account Type Delete Lock Button
        // ===============================
        function cmdAccountTypeDeleteLockButton_OnClick() {
            $('#deleteRecordLock').modal({
                show: true,
                backdrop: 'static'
            });
        }

        // =============================
        // account type entry validation
        // =============================
        function accountTypeEntryValidation() {
            var isValid = true;
            $('.requiredAccountType').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                }
                else {
                    $(this).css({
                        "border": "",
                    });
                }
            });
            return isValid;
        }

        // =============================
        // Refresh account type flexgrid
        // =============================
        function refreshAccountTypeFlexgrid() {
            accountTypes = new wijmo.collections.CollectionView(getAccountType());
            accountTypes.canFilter = true;
            accountTypes.pageSize = 15;

            var filterTextAccountType = '';
            $('#InputFilterAccountType').keyup(function () {
                filterTextAccountType = this.value.toLowerCase();
                accountTypes.refresh();
            });
            accountTypes.filter = function (item) {
                return !filterTextAccountType || (item.AccountType.toLowerCase().indexOf(filterTextAccountType) > -1);
            }
            accountTypes.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsAccountType();
            });
            accountTypes.currentChanged.addHandler(function (sender, args) {
                updateDetailsAccountType();
            });

            accountTypeGrid.itemsSource = accountTypes;
            accountTypeGrid.trackChanges = true;
        }

        // ====================
        // ADD New Account Type
        // ====================
        function cmdAddNewAccountType_OnClick() {
            $('#accountTypeEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $('.requiredAccountType').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            document.getElementById('cmdSaveAccountTypeButton').innerHTML = "<i class='fa fa-save'></i> Save";
            $("#cmdSaveAccountTypeButton").prop("disabled", false);
            $("#cmdAccountTypeDetailCloseButton").prop("disabled", false);

            Islocked = false;

            document.getElementById('accountType_id').value = 0;
            document.getElementById('accountType_code').value = "NA";
            document.getElementById('accountType_accountType').value = "NA";
            document.getElementById('accountType_SubCategoryDescription').value = "NA";
            document.getElementById('accountTypeEdit_IsLocked').checked = false;

            if (document.getElementById('accountTypeEdit_IsLocked').checked == true) {
                document.getElementById('accountType_code').disabled = true;
                document.getElementById('accountType_accountType').disabled = true;
                document.getElementById('accountType_SubCategoryDescription').disabled = true;
                document.getElementById('accountTypeLockAndUnLock').innerHTML = "<i class='fa fa-lock'></i>";

            } else {
                document.getElementById('accountType_code').disabled = false;
                document.getElementById('accountType_accountType').disabled = false;
                document.getElementById('accountType_SubCategoryDescription').disabled = false;
                document.getElementById('accountTypeLockAndUnLock').innerHTML = "<i class='fa fa-unlock'></i>";
            }

            getAccountCategoryForComboBox();
        }

        // ========================
        // EDIT Account Type Button
        // ========================
        function cmdAccountTypeEditButton_OnClick() {
            accountTypes.editItem(accountTypes.currentItem);
            $('#accountTypeEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $('.requiredAccountType').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            document.getElementById('cmdSaveAccountTypeButton').innerHTML = "<i class='fa fa-save'></i> Save";
            $("#cmdSaveAccountTypeButton").prop("disabled", false);
            $("#cmdAccountTypeDetailCloseButton").prop("disabled", false);

            var accountType = accountTypes.currentEditItem;
            document.getElementById('accountType_id').value = accountType.Id ? accountType.Id : '';
            document.getElementById('accountType_code').value = accountType.AccountTypeCode ? accountType.AccountTypeCode : '';
            document.getElementById('accountType_accountType').value = accountType.AccountType ? accountType.AccountType : '';
            document.getElementById('accountType_SubCategoryDescription').value = accountType.SubCategoryDescription ? accountType.SubCategoryDescription : '';
            accountCategorySelectedValue = accountType.AccountCategory ? accountType.AccountCategory : '';
            document.getElementById('accountTypeEdit_IsLocked').checked = accountType.IsLocked;

            getAccountCategoryForComboBox();

            if (accountType.IsLocked == true) {
                Islocked = true;
                document.getElementById('accountType_code').disabled = true;
                document.getElementById('accountType_accountType').disabled = true;
                document.getElementById('accountType_SubCategoryDescription').disabled = true;
                document.getElementById('accountTypeLockAndUnLock').innerHTML = "<i class='fa fa-lock'></i>";
            } else {
                Islocked = false;
                document.getElementById('accountType_code').disabled = false;
                document.getElementById('accountType_accountType').disabled = false;
                document.getElementById('accountType_SubCategoryDescription').disabled = false;
                document.getElementById('accountTypeLockAndUnLock').innerHTML = "<i class='fa fa-unlock'></i>";
            }

            getAccountCategoryForComboBox();
        }

        // ========================
        // Save Account Type Button
        // ========================
        function cmdAccountTypeSaveButton_OnClick() {
            var accountTypeObject = new Object();
            var accountTypeId = document.getElementById('accountType_id').value;

            accountTypeObject.AccountTypeCode = document.getElementById('accountType_code').value;
            accountTypeObject.AccountType = document.getElementById('accountType_accountType').value;
            accountTypeObject.AccountCategoryId = cboAccountCategory.selectedItem["AccountCategoryId"];
            accountTypeObject.SubCategoryDescription = document.getElementById('accountType_SubCategoryDescription').value;
            accountTypeObject.IsLocked = document.getElementById('accountTypeEdit_IsLocked').checked;
            var data = JSON.stringify(accountTypeObject);

            if (cboAccountCategory.selectedItem["AccountCategoryId"].toString() == '') {
                document.getElementById("accountType_CategoryId").style.border = "1px solid red";
            } else {
                document.getElementById("accountType_CategoryId").style.border = "1px solid #C8C8C8";
            }

            if (accountTypeEntryValidation() == false) {
                toastr.error("Invalid Entry");
            } else {
                document.getElementById('cmdSaveAccountTypeButton').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Saving";
                $("#cmdSaveAccountTypeButton").prop("disabled", true);
                $("#cmdAccountTypeDetailCloseButton").prop("disabled", true);

                if (accountTypeId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/addAccountType',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: data,
                        success: function (id) {
                            if (id > 0) {
                                document.getElementById('cmdSaveAccountTypeButton').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Saving";
                                $("#cmdSaveAccountTypeButton").prop("disabled", true);
                                $("#cmdAccountTypeDetailCloseButton").prop("disabled", true);
                                $('#accountTypeEdit').modal('hide');
                                toastr.success("Successfully saved");
                                refreshAccountTypeFlexgrid();
                            } else {
                                document.getElementById('cmdSaveAccountTypeButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#cmdSaveAccountTypeButton").prop("disabled", false);
                                $("#cmdAccountTypeDetailCloseButton").prop("disabled", false);
                                toastr.error("Save unsuccessful");
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/updateAccountType/' + accountTypeId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: data,
                        statusCode: {
                            200: function () {
                                document.getElementById('cmdSaveAccountTypeButton').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Updating";
                                $("#cmdSaveAccountTypeButton").prop("disabled", true);
                                $("#cmdAccountTypeDetailCloseButton").prop("disabled", true);
                                $('#accountTypeEdit').modal('hide');
                                toastr.success("Successfully updated");
                                refreshAccountTypeFlexgrid();
                            },
                            404: function () {
                                document.getElementById('cmdSaveAccountTypeButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#cmdSaveAccountTypeButton").prop("disabled", false);
                                $("#cmdAccountTypeDetailCloseButton").prop("disabled", false);
                                $('#accountTypeEdit').modal('hide');
                                toastr.error("Update request not found");
                            },
                            400: function () {
                                document.getElementById('cmdSaveAccountTypeButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#cmdSaveAccountTypeButton").prop("disabled", false);
                                $("#cmdAccountTypeDetailCloseButton").prop("disabled", false);
                                $('#accountTypeEdit').modal('hide');
                                toastr.error("Cannot update record");
                            }
                        }
                    });
                }
            }
        }

        // =========================
        // Close Account Type Button
        // =========================
        function cmdCloseAccountType_OnClick() {
            window.location = '/Software';
        }

        // ===========================
        // DELETE Account Type Buttons
        // ===========================
        function cmdAccountTypeDeleteButton_OnClick() {
            $('#deleteAccountTypeConfirm').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById('cmdConfirmDeleteAccountType').innerHTML = "<i class='fa fa-trash'></i> Delete";
            $("#cmdConfirmDeleteAccountType").prop("disabled", false);
            $("#cmdConfirmDeleteCloseButtonAccountType").prop("disabled", false);
        }
        // Account Type Confirm Delete Button
        function cmdAccountTypeConfirmDeleteButton_OnClick() {
            document.getElementById('cmdConfirmDeleteAccountType').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Deleting";
            $("#cmdConfirmDeleteAccountType").prop("disabled", true);
            $("#cmdConfirmDeleteCloseButtonAccountType").prop("disabled", true);

            accountTypes.editItem(accountTypes.currentItem);
            var id = accountTypes.currentEditItem.Id;
            $.ajax({
                url: '/api/deleteAccountType/' + id,
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        document.getElementById('cmdConfirmDeleteAccountType').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Deleting";
                        $("#cmdConfirmDeleteAccountType").prop("disabled", true);
                        $("#cmdConfirmDeleteCloseButtonAccountType").prop("disabled", true);
                        $('#deleteAccountTypeConfirm').modal('hide');
                        toastr.success("Successfully deleted");
                        refreshAccountTypeFlexgrid();
                    },
                    404: function () {
                        document.getElementById('cmdConfirmDeleteAccountType').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $("#cmdConfirmDeleteAccountType").prop("disabled", false);
                        $("#cmdConfirmDeleteCloseButtonAccountType").prop("disabled", false);
                        $('#deleteAccountTypeConfirm').modal('hide');
                        toastr.error("Delete request not found");
                    },
                    400: function () {
                        document.getElementById('cmdConfirmDeleteAccountType').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $("#cmdConfirmDeleteAccountType").prop("disabled", false);
                        $("#cmdConfirmDeleteCloseButtonAccountType").prop("disabled", false);
                        $('#deleteAccountTypeConfirm').modal('hide');
                        toastr.error("Cannot delete record");
                    }
                }
            });
        }

        // ===================================
        // FlexGrid Selection for Account Type
        // ===================================
        function updateDetailsAccountType() {
            var item = accountTypes.currentItem;
            document.getElementById('createdBy').innerHTML = item.CreatedBy;
            document.getElementById('createdDate').innerHTML = item.CreatedDateTime;
            document.getElementById('updatedBy').innerHTML = item.UpdatedBy;
            document.getElementById('updatedDate').innerHTML = item.UpdatedDateTime;
        }

        // ===================================
        // Navigation Buttons for Account Type
        // ===================================
        function updateNavigateButtonsAccountType() {
            if (accountTypes.pageSize <= 0) {
                document.getElementById('naviagtionPageGridAccountType').style.display = 'none';
                return;
            }
            document.getElementById('naviagtionPageGridAccountType').style.display = 'block';
            if (accountTypes.pageIndex === 0) {
                btnFirstPageGridAccountType.setAttribute('disabled', 'disabled');
                btnPreviousPageGridAccountType.setAttribute('disabled', 'disabled');
                btnNextPageGridAccountType.removeAttribute('disabled');
                btnLastPageGridAccountType.removeAttribute('disabled');
            } else if (accountTypes.pageIndex === (accountTypes.pageCount - 1)) {
                btnFirstPageGridAccountType.removeAttribute('disabled');
                btnPreviousPageGridAccountType.removeAttribute('disabled');
                btnLastPageGridAccountType.setAttribute('disabled', 'disabled');
                btnNextPageGridAccountType.setAttribute('disabled', 'disabled');
            } else {
                btnFirstPageGridAccountType.removeAttribute('disabled');
                btnPreviousPageGridAccountType.removeAttribute('disabled');
                btnNextPageGridAccountType.removeAttribute('disabled');
                btnLastPageGridAccountType.removeAttribute('disabled');
            }
            btnCurrentPageGridAccountType.innerHTML = (accountTypes.pageIndex + 1) + ' / ' + accountTypes.pageCount;
        }

        // =============================
        // On Page Load for Account Type
        // =============================
        function accountTypeTab() {
            cboAccountCategory = new wijmo.input.ComboBox('#accountType_CategoryId');

            accountTypes = new wijmo.collections.CollectionView(getAccountType());
            accountTypes.canFilter = true;
            accountTypes.pageSize = 15;

            var filterTextAccountType = '';
            $('#InputFilterAccountType').keyup(function () {
                filterTextAccountType = this.value.toLowerCase();
                accountTypes.refresh();
            });
            accountTypes.filter = function (item) {
                return !filterTextAccountType || (item.AccountType.toLowerCase().indexOf(filterTextAccountType) > -1);
            }
            accountTypes.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsAccountType();
            });
            accountTypes.currentChanged.addHandler(function (sender, args) {
                updateDetailsAccountType();
            });

            // Flex Grid for account type
            accountTypeGrid = new wijmo.grid.FlexGrid('#AccountTypeGrid');
            accountTypeGrid.initialize({
                columns: [
                            {
                                "header": "Edit",
                                "binding": "EditId",
                                "width": 60,
                                "align": "center",
                                "allowResizing": false,
                                "allowSorting": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Delete",
                                "binding": "DeleteId",
                                "width": 70,
                                "align": "center",
                                "allowResizing": false,
                                "allowSorting": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Code",
                                "binding": "AccountTypeCode",
                                "allowSorting": true,
                                "width": "1*",
                            },
                            {
                                "header": "Account Type",
                                "binding": "AccountType",
                                "allowSorting": true,
                                "width": "3*"
                            },
                            {
                                "header": "Category",
                                "binding": "AccountCategory",
                                "allowSorting": true,
                                "width": "2*"
                            },
                            {
                                "header": "Sub Category",
                                "binding": "SubCategoryDescription",
                                "allowSorting": true,
                                "width": "3*"
                            },
                            {
                                "header": "Lock",
                                "binding": "IsLocked",
                                "allowSorting": true,
                                "width": "0.5*"
                            }
                ],
                autoGenerateColumns: false,
                itemsSource: accountTypes,
                isReadOnly: true,
                frozenColumns: 2,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            accountTypeGrid.trackChanges = true;

            // Navigation button for account type
            btnFirstPageGridAccountType = document.getElementById('btnMoveToFirstPageGridAccountType');
            btnPreviousPageGridAccountType = document.getElementById('btnMoveToPreviousPageGridAccountType');
            btnNextPageGridAccountType = document.getElementById('btnMoveToNextPageGridAccountType');
            btnLastPageGridAccountType = document.getElementById('btnMoveToLastPageGridAccountType');
            btnCurrentPageGridAccountType = document.getElementById('btnCurrentPageGridAccountType');

            updateNavigateButtonsAccountType();

            btnFirstPageGridAccountType.addEventListener('click', function () {
                accountTypes.moveToFirstPage();
                updateNavigateButtonsAccountType();
            });
            btnPreviousPageGridAccountType.addEventListener('click', function () {
                accountTypes.moveToPreviousPage();
                updateNavigateButtonsAccountType();
            });
            btnNextPageGridAccountType.addEventListener('click', function () {
                accountTypes.moveToNextPage();
                updateNavigateButtonsAccountType();
            });
            btnLastPageGridAccountType.addEventListener('click', function () {
                accountTypes.moveToLastPage();
                updateNavigateButtonsAccountType();
            });
        }
    </script>

    <!-- ========================= -->
    <!-- Account Cash Flow Scripts -->
    <!-- ========================= -->
    <script type="text/javascript">
        // ================
        // GLOBAL Variables
        // ================
        var accountCashFlows;
        var accountCashFlowGrid;
        var btnFirstPageGridAccountCashFlow;
        var btnPreviousPageGridAccountCashFlow;
        var btnNextPageGridAccountCashFlow;
        var btnLastPageGridAccountCashFlow;
        var btnCurrentPageGridAccountCashFlow;

        // ==========================
        // GET Account Cash Flow List
        // ==========================
        function getAccountCashFlow() {
            var accountCashFlows = new wijmo.collections.ObservableArray;
            NProgress.start();
            $.ajax({
                url: '/api/listAccountCashFlow',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (accountCashFlowResults) {
                    if (accountCashFlowResults.length > 0) {
                        for (i = 0; i < accountCashFlowResults.length; i++) {

                            var btnDeleteId;
                            if (accountCashFlowResults[i]["IsLocked"] == true) {
                                btnDeleteId = "<button class='btn btn-danger btn-xs btn-block' onclick='cmdAccountCashFlowDeleteLockButton_OnClick()'><i class='fa fa-trash'></i> Delete</button>";
                            } else {
                                btnDeleteId = "<button class='btn btn-danger btn-xs btn-block' onclick='cmdAccountCashFlowDeleteButton_OnClick()'><i class='fa fa-trash'></i> Delete</button>";
                            }

                            accountCashFlows.push({
                                EditId: "<button class='btn btn-primary btn-xs btn-block' onclick='cmdAccountCashFlowEditButton_OnClick()'><i class='fa fa-edit'></i> Edit</button>",
                                DeleteId: btnDeleteId,
                                Id: accountCashFlowResults[i]["Id"],
                                AccountCashFlowCode: accountCashFlowResults[i]["AccountCashFlowCode"],
                                AccountCashFlow: accountCashFlowResults[i]["AccountCashFlow"],
                                IsLocked: accountCashFlowResults[i]["IsLocked"],
                                CreatedById: accountCashFlowResults[i]["CreatedById"],
                                CreatedBy: accountCashFlowResults[i]["CreatedBy"],
                                CreatedDateTime: accountCashFlowResults[i]["CreatedDateTime"],
                                UpdatedById: accountCashFlowResults[i]["UpdatedById"],
                                UpdatedBy: accountCashFlowResults[i]["UpdatedBy"],
                                UpdatedDateTime: accountCashFlowResults[i]["UpdatedDateTime"]
                            });

                        }
                    }
                    NProgress.done();
                }
            }).fail(function (xhr, textStatus, err) {
                alert(err);
            });
            return accountCashFlows;
        }

        // =====================================
        // Account Cash Flows Delete Lock Button
        // =====================================
        function cmdAccountCashFlowDeleteLockButton_OnClick() {
            $('#deleteRecordLock').modal({
                show: true,
                backdrop: 'static'
            });
        }

        // ==================================
        // Account cash flow entry validation
        // ==================================
        function accountCashFlowEntryValidation() {
            var isValid = true;
            $('.requiredAccountCashFlow').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                }
                else {
                    $(this).css({
                        "border": "",
                    });
                }
            });
            return isValid;
        }

        // ==================================
        // Refresh account cash flow flexgrid
        // ==================================
        function refreshAccountCashFlowFlexgrid() {
            accountCashFlows = new wijmo.collections.CollectionView(getAccountCashFlow());
            accountCashFlows.canFilter = true;
            accountCashFlows.pageSize = 15;

            var filterTextAccountCashFlow = '';
            $('#InputFilterAccountCashFlow').keyup(function () {
                filterTextAccountCashFlow = this.value.toLowerCase();
                accountCashFlows.refresh();
            });
            accountCashFlows.filter = function (item) {
                return !filterTextAccountCashFlow || (item.AccountCashFlow.toLowerCase().indexOf(filterTextAccountCashFlow) > -1);
            }
            accountCashFlows.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsAccountCashFlow();
            });
            accountCashFlows.currentChanged.addHandler(function (sender, args) {
                updateDetailsAccountCashFlow();
            });

            accountCashFlowGrid.itemsSource = accountCashFlows;
            accountCashFlowGrid.trackChanges = true;
        }

        // =========================
        // ADD New Account Cash Flow
        // =========================
        function cmdAddNewAccountCashFlow_OnClick() {
            $('#accountCashFlowEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $('.requiredAccountCashFlow').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            document.getElementById('cmdSaveAccountCashFlowButton').innerHTML = "<i class='fa fa-save'></i> Save";
            $("#cmdSaveAccountCashFlowButton").prop("disabled", false);
            $("#cmdAccountCashFlowDetailCloseButton").prop("disabled", false);

            document.getElementById('accountCashFlow_Id').value = 0;
            document.getElementById('accountCashFlow_Code').value = "NA";
            document.getElementById('accountCashFlow_CashFlow').value = "NA";
            document.getElementById('accountCashFlowEdit_IsLocked').checked = false;

            if (document.getElementById('accountCashFlowEdit_IsLocked').checked == true) {
                document.getElementById('accountCashFlow_Code').disabled = true;
                document.getElementById('accountCashFlow_CashFlow').disabled = true;
                document.getElementById('accountCashFlowLockAndUnLock').innerHTML = "<i class='fa fa-lock'></i>";
            } else {
                document.getElementById('accountCashFlow_Code').disabled = false;
                document.getElementById('accountCashFlow_CashFlow').disabled = false;
                document.getElementById('accountCashFlowLockAndUnLock').innerHTML = "<i class='fa fa-unlock'></i>";
            }
        }

        // =============================
        // Save Account Cash Flow Button
        // =============================
        function cmdAccountCashFlowSaveButton_OnClick() {
            var accountCashFlowObject = new Object();
            var accountCashFlowId = document.getElementById('accountCashFlow_Id').value;

            accountCashFlowObject.AccountCashFlowCode = document.getElementById('accountCashFlow_Code').value;
            accountCashFlowObject.AccountCashFlow = document.getElementById('accountCashFlow_CashFlow').value;
            accountCashFlowObject.IsLocked = document.getElementById('accountCashFlowEdit_IsLocked').checked;
            var data = JSON.stringify(accountCashFlowObject);

            if (accountCashFlowEntryValidation() == false) {
                toastr.error("Invalid Entry");
            } else {
                document.getElementById('cmdSaveAccountCashFlowButton').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Saving";
                $("#cmdSaveAccountCashFlowButton").prop("disabled", true);
                $("#cmdAccountCashFlowDetailCloseButton").prop("disabled", true);

                if (accountCashFlowId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/addAccountCashFlow',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: data,
                        success: function (id) {
                            if (id > 0) {
                                document.getElementById('cmdSaveAccountCashFlowButton').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Saving";
                                $("#cmdSaveAccountCashFlowButton").prop("disabled", true);
                                $("#cmdAccountCashFlowDetailCloseButton").prop("disabled", true);
                                toastr.success("Successfully saved");
                                $('#accountCashFlowEdit').modal('hide');
                                refreshAccountCashFlowFlexgrid();
                            } else {
                                document.getElementById('cmdSaveAccountCashFlowButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#cmdSaveAccountCashFlowButton").prop("disabled", false);
                                $("#cmdAccountCashFlowDetailCloseButton").prop("disabled", false);

                                toastr.error("Save unsuccessful");
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/updateAccountCashFlow/' + accountCashFlowId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: data,
                        statusCode: {
                            200: function () {
                                document.getElementById('cmdSaveAccountCashFlowButton').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Updating";
                                $("#cmdSaveAccountCashFlowButton").prop("disabled", true);
                                $("#cmdAccountCashFlowDetailCloseButton").prop("disabled", true);
                                toastr.success("Successfully updated");
                                $('#accountCashFlowEdit').modal('hide');
                                refreshAccountCashFlowFlexgrid();
                            },
                            404: function () {
                                document.getElementById('cmdSaveAccountCashFlowButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#cmdSaveAccountCashFlowButton").prop("disabled", false);
                                $("#cmdAccountCashFlowDetailCloseButton").prop("disabled", false);
                                $('#accountCashFlowEdit').modal('hide');
                                toastr.error("Update request not found");
                            },
                            400: function () {
                                document.getElementById('cmdSaveAccountCashFlowButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#cmdSaveAccountCashFlowButton").prop("disabled", false);
                                $("#cmdAccountCashFlowDetailCloseButton").prop("disabled", false);
                                $('#accountCashFlowEdit').modal('hide');
                                toastr.error("Cannot update record");
                            }
                        }
                    });
                }
            }
        }

        // =============================
        // EDIT Account Cash FLow Button
        // =============================
        function cmdAccountCashFlowEditButton_OnClick() {
            accountCashFlows.editItem(accountCashFlows.currentItem);
            $('#accountCashFlowEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $('.requiredAccountCashFlow').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            document.getElementById('cmdSaveAccountCashFlowButton').innerHTML = "<i class='fa fa-save'></i> Save";
            $("#cmdSaveAccountCashFlowButton").prop("disabled", false);
            $("#cmdAccountCashFlowDetailCloseButton").prop("disabled", false);

            var accountCashFlow = accountCashFlows.currentEditItem;
            document.getElementById('accountCashFlow_Id').value = accountCashFlow.Id;
            document.getElementById('accountCashFlow_Code').value = accountCashFlow.AccountCashFlowCode;
            document.getElementById('accountCashFlow_CashFlow').value = accountCashFlow.AccountCashFlow;
            document.getElementById('accountCashFlowEdit_IsLocked').checked = accountCashFlow.IsLocked;

            if (accountCashFlow.IsLocked == true) {
                document.getElementById('accountCashFlow_Code').disabled = true;
                document.getElementById('accountCashFlow_CashFlow').disabled = true;
                document.getElementById('accountCashFlowLockAndUnLock').innerHTML = "<i class='fa fa-lock'></i>";
            } else {
                document.getElementById('accountCashFlow_Code').disabled = false;
                document.getElementById('accountCashFlow_CashFlow').disabled = false;
                document.getElementById('accountCashFlowLockAndUnLock').innerHTML = "<i class='fa fa-unlock'></i>";
            }
        }

        // ==============================
        // Close Account Cash Flow Button
        // ==============================
        function cmdCloseAccountCashFlow_OnClick() {
            window.location = '/Software';
        }

        // ================================
        // DELETE Account Cash Flow Buttons
        // ================================
        function cmdAccountCashFlowDeleteButton_OnClick() {
            $('#deleteAccountCashFlowConfirm').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById('cmdConfirmDeleteAccountCashFlow').innerHTML = "<i class='fa fa-trash'></i> Delete";
            $("#cmdConfirmDeleteAccountCashFlow").prop("disabled", false);
            $("#cmdConfirmDeleteCloseButtonAccountCashFlow").prop("disabled", false);
        }
        // Account Cash Flow Confirm Delete Button
        function cmdAccountCashFlowConfirmDeleteButton_OnClick() {
            document.getElementById('cmdConfirmDeleteAccountCashFlow').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Deleting";
            $("#cmdConfirmDeleteAccountCashFlow").prop("disabled", true);
            $("#cmdConfirmDeleteCloseButtonAccountCashFlow").prop("disabled", true);

            accountCashFlows.editItem(accountCashFlows.currentItem);
            var accountCashFlowId = accountCashFlows.currentEditItem.Id;
            $.ajax({
                url: '/api/deleteAccountCashFlow/' + accountCashFlowId,
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        document.getElementById('cmdConfirmDeleteAccountCashFlow').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Deleting";
                        $("#cmdConfirmDeleteAccountCashFlow").prop("disabled", true);
                        $("#cmdConfirmDeleteCloseButtonAccountCashFlow").prop("disabled", true);
                        toastr.success("Successfully Deleted");
                        $('#deleteAccountCashFlowConfirm').modal('hide');
                        refreshAccountCashFlowFlexgrid();
                    },
                    404: function () {
                        document.getElementById('cmdConfirmDeleteAccountCashFlow').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $("#cmdConfirmDeleteAccountCashFlow").prop("disabled", false);
                        $("#cmdConfirmDeleteCloseButtonAccountCashFlow").prop("disabled", false);
                        $('#deleteAccountCashFlowConfirm').modal('hide');
                        toastr.error("Delete request not found");
                    },
                    400: function () {
                        document.getElementById('cmdConfirmDeleteAccountCashFlow').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $("#cmdConfirmDeleteAccountCashFlow").prop("disabled", false);
                        $("#cmdConfirmDeleteCloseButtonAccountCashFlow").prop("disabled", false);
                        $('#deleteAccountCashFlowConfirm').modal('hide');
                        toastr.error("Cannot delete record");
                    }
                }
            });
        }

        // ===================================
        // FlexGrid Selection for Account Type
        // ===================================
        function updateDetailsAccountCashFlow() {
            var item = accountCashFlows.currentItem;
            document.getElementById('createdBy').innerHTML = item.CreatedBy;
            document.getElementById('createdDate').innerHTML = item.CreatedDateTime;
            document.getElementById('updatedBy').innerHTML = item.UpdatedBy;
            document.getElementById('updatedDate').innerHTML = item.UpdatedDateTime;
        }

        // ========================================
        // Navigation Buttons for Account Cash Flow
        // ========================================
        function updateNavigateButtonsAccountCashFlow() {
            if (accountCashFlows.pageSize <= 0) {
                document.getElementById('naviagtionPageGridAccountCashFlow').style.display = 'none';
                return;
            }
            document.getElementById('naviagtionPageGridAccountCashFlow').style.display = 'block';
            if (accountCashFlows.pageIndex === 0) {
                btnFirstPageGridAccountCashFlow.setAttribute('disabled', 'disabled');
                btnPreviousPageGridAccountCashFlow.setAttribute('disabled', 'disabled');
                btnNextPageGridAccountCashFlow.removeAttribute('disabled');
                btnLastPageGridAccountCashFlow.removeAttribute('disabled');
            } else if (accountCashFlows.pageIndex === (accountCashFlows.pageCount - 1)) {
                btnFirstPageGridAccountCashFlow.removeAttribute('disabled');
                btnPreviousPageGridAccountCashFlow.removeAttribute('disabled');
                btnLastPageGridAccountCashFlow.setAttribute('disabled', 'disabled');
                btnNextPageGridAccountCashFlow.setAttribute('disabled', 'disabled');
            } else {
                btnFirstPageGridAccountCashFlow.removeAttribute('disabled');
                btnPreviousPageGridAccountCashFlow.removeAttribute('disabled');
                btnNextPageGridAccountCashFlow.removeAttribute('disabled');
                btnLastPageGridAccountCashFlow.removeAttribute('disabled');
            }
            btnCurrentPageGridAccountCashFlow.innerHTML = (accountCashFlows.pageIndex + 1) + ' / ' + accountCashFlows.pageCount;
        }

        // ===================================
        // On Page Load for Account Cash Flows
        // ===================================
        function accountCashFlowTab() {
            accountCashFlows = new wijmo.collections.CollectionView(getAccountCashFlow());
            accountCashFlows.canFilter = true;
            accountCashFlows.pageSize = 15;

            var filterTextAccountCashFlow = '';
            $('#InputFilterAccountCashFlow').keyup(function () {
                filterTextAccountCashFlow = this.value.toLowerCase();
                accountCashFlows.refresh();
            });
            accountCashFlows.filter = function (item) {
                return !filterTextAccountCashFlow || (item.AccountCashFlow.toLowerCase().indexOf(filterTextAccountCashFlow) > -1);
            }
            accountCashFlows.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsAccountCashFlow();
            });
            accountCashFlows.currentChanged.addHandler(function (sender, args) {
                updateDetailsAccountCashFlow();
            });

            // Flex Grid for Account Cash Flow
            accountCashFlowGrid = new wijmo.grid.FlexGrid('#AccountCashFlowGrid');
            accountCashFlowGrid.initialize({
                columns: [
                            {
                                "header": "Edit",
                                "binding": "EditId",
                                "width": 60,
                                "align": "center",
                                "allowResizing": false,
                                "allowSorting": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Delete",
                                "binding": "DeleteId",
                                "width": 70,
                                "align": "center",
                                "allowResizing": false,
                                "allowSorting": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Code",
                                "binding": "AccountCashFlowCode",
                                "allowSorting": true,
                                "width": "1*",
                            },
                            {
                                "header": "Account Cash FLow",
                                "binding": "AccountCashFlow",
                                "allowSorting": true,
                                "width": "2*"
                            },
                            {
                                "header": "Lock",
                                "binding": "IsLocked",
                                "allowSorting": true,
                                "width": "0.2*",
                            }
                ],
                autoGenerateColumns: false,
                itemsSource: accountCashFlows,
                isReadOnly: true,
                frozenColumns: 2,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            accountCashFlowGrid.trackChanges = true;

            // Navigation button for account cash flow
            btnFirstPageGridAccountCashFlow = document.getElementById('btnMoveToFirstPageGridAccountCashFlow');
            btnPreviousPageGridAccountCashFlow = document.getElementById('btnMoveToPreviousPageGridAccountCashFlow');
            btnNextPageGridAccountCashFlow = document.getElementById('btnMoveToNextPageGridAccountCashFlow');
            btnLastPageGridAccountCashFlow = document.getElementById('btnMoveToLastPageGridAccountCashFlow');
            btnCurrentPageGridAccountCashFlow = document.getElementById('btnCurrentPageGridAccountCashFlow');

            updateNavigateButtonsAccountCashFlow();

            btnFirstPageGridAccountCashFlow.addEventListener('click', function () {
                accountCashFlows.moveToFirstPage();
                updateNavigateButtonsAccountCashFlow();
            });
            btnPreviousPageGridAccountCashFlow.addEventListener('click', function () {
                accountCashFlows.moveToPreviousPage();
                updateNavigateButtonsAccountCashFlow();
            });
            btnNextPageGridAccountCashFlow.addEventListener('click', function () {
                accountCashFlows.moveToNextPage();
                updateNavigateButtonsAccountCashFlow();
            });
            btnLastPageGridAccountCashFlow.addEventListener('click', function () {
                accountCashFlows.moveToLastPage();
                updateNavigateButtonsAccountCashFlow();
            });
        }
    </script>

    <!-- ======================== -->
    <!-- Account Category Scripts -->
    <!-- ======================== -->
    <script type="text/javascript">
        // ================
        // GLOBAL Variables
        // ================
        var accountCategories;
        var accountCategoryGrid;
        var btnFirstPageGridAccountCategory;
        var btnPreviousPageGridAccountCategory;
        var btnNextPageGridAccountCategory;
        var btnLastPageGridAccountCategory;
        var btnCurrentPageGridAccountCategory;

        // ==========================
        // GET Account Category List
        // ==========================
        function getAccountCategory() {
            var accountCategories = new wijmo.collections.ObservableArray;
            NProgress.start();
            $.ajax({
                url: '/api/listAccountCategory',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (accountCategoryResults) {
                    if (accountCategoryResults.length > 0) {
                        for (i = 0; i < accountCategoryResults.length; i++) {

                            var btnDeleteId;
                            if (accountCategoryResults[i]["IsLocked"] == true) {
                                btnDeleteId = "<button class='btn btn-danger btn-xs btn-block' onclick='cmdAccountCategoryDeleteLockButton_OnClick()'><i class='fa fa-trash'></i> Delete</button>";
                            } else {
                                btnDeleteId = "<button class='btn btn-danger btn-xs btn-block' onclick='cmdAccountCategoryDeleteButton_OnClick()'><i class='fa fa-trash'></i> Delete</button>";
                            }

                            accountCategories.push({
                                EditId: "<button class='btn btn-primary btn-xs btn-block' onclick='cmdAccountCategoryEditButton_OnClick()'><i class='fa fa-edit'></i> Edit</button>",
                                DeleteId: btnDeleteId,
                                Id: accountCategoryResults[i]["Id"],
                                AccountCategoryCode: accountCategoryResults[i]["AccountCategoryCode"],
                                AccountCategory: accountCategoryResults[i]["AccountCategory"],
                                IsLocked: accountCategoryResults[i]["IsLocked"],
                                CreatedById: accountCategoryResults[i]["CreatedById"],
                                CreatedBy: accountCategoryResults[i]["CreatedBy"],
                                CreatedDateTime: accountCategoryResults[i]["CreatedDateTime"],
                                UpdatedById: accountCategoryResults[i]["UpdatedById"],
                                UpdatedBy: accountCategoryResults[i]["UpdatedBy"],
                                UpdatedDateTime: accountCategoryResults[i]["UpdatedDateTime"]
                            });
                        }
                    }
                    NProgress.done();
                }
            }).fail(function (xhr, textStatus, err) {
                alert(err);
            });
            return accountCategories;
        }

        // ===================================
        // Account Category Delete Lock Button
        // ===================================
        function cmdAccountCategoryDeleteLockButton_OnClick() {
            $('#deleteRecordLock').modal({
                show: true,
                backdrop: 'static'
            });
        }

        // =================================
        // Refresh account category flexgrid
        // =================================
        function refreshAccountCategoryFlexgrid() {
            accountCategories = new wijmo.collections.CollectionView(getAccountCategory());
            accountCategories.canFilter = true;
            accountCategories.pageSize = 15;

            var filterTextAccountCategory = '';
            $('#InputFilterAccountCategory').keyup(function () {
                filterTextAccountCategory = this.value.toLowerCase();
                accountCategories.refresh();
            });
            accountCategories.filter = function (item) {
                return !filterTextAccountCategory || (item.AccountCategory.toLowerCase().indexOf(filterTextAccountCategory) > -1);
            }
            accountCategories.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsAccountCategory();
            });
            accountCategories.currentChanged.addHandler(function (sender, args) {
                updateDetailsAccountCategory();
            });

            accountCategoryGrid.itemsSource = accountCategories;
            accountCategoryGrid.trackChanges = true;
        }

        // =================================
        // Account Category Entry Validation
        // =================================
        function accountCategoryEntryValidation() {
            var isValid = true;
            $('.requiredAccountCategory').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                }
                else {
                    $(this).css({
                        "border": "",
                    });
                }
            });
            return isValid;
        }

        // ========================
        // ADD New Account Category
        // ========================
        function cmdAddNewAccountCategory_OnClick() {
            $('#accountCategoryEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $('.requiredAccountCategory').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            document.getElementById('cmdSaveAccountCategoryButton').innerHTML = "<i class='fa fa-save'></i> Save";
            $("#cmdSaveAccountCategoryButton").prop("disabled", false);
            $("#cmdAccountCategoryDetailCloseButton").prop("disabled", false);

            document.getElementById('accountCategory_Id').value = 0;
            document.getElementById('accountCategory_Code').value = "NA";
            document.getElementById('accountCategory_Category').value = "NA";
            document.getElementById('accountCategoryEdit_IsLocked').checked = false;

            if (document.getElementById('accountCategoryEdit_IsLocked').checked == true) {
                document.getElementById('accountCategory_Code').disabled = true;
                document.getElementById('accountCategory_Category').disabled = true;
                document.getElementById('accountCategoryLockAndUnLock').innerHTML = "<i class='fa fa-lock'></i>";

            } else {
                document.getElementById('accountCategory_Code').disabled = false;
                document.getElementById('accountCategory_Category').disabled = false;
                document.getElementById('accountCategoryLockAndUnLock').innerHTML = "<i class='fa fa-unlock'></i>";
            }
        }

        // ============================
        // EDIT Account Category Button
        // ============================
        function cmdAccountCategoryEditButton_OnClick() {
            $('#accountCategoryEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $('.requiredAccountCategory').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            document.getElementById('cmdSaveAccountCategoryButton').innerHTML = "<i class='fa fa-save'></i> Save";
            $("#cmdSaveAccountCategoryButton").prop("disabled", false);
            $("#cmdAccountCategoryDetailCloseButton").prop("disabled", false);

            accountCategories.editItem(accountCategories.currentItem);
            var accountCategory = accountCategories.currentEditItem;
            document.getElementById('accountCategory_Id').value = accountCategory.Id ? accountCategory.Id : '';
            document.getElementById('accountCategory_Code').value = accountCategory.AccountCategoryCode ? accountCategory.AccountCategoryCode : '';
            document.getElementById('accountCategory_Category').value = accountCategory.AccountCategory ? accountCategory.AccountCategory : '';
            document.getElementById('accountCategoryEdit_IsLocked').checked = accountCategory.IsLocked;

            if (accountCategory.IsLocked == true) {
                document.getElementById('accountCategory_Code').disabled = true;
                document.getElementById('accountCategory_Category').disabled = true;
                document.getElementById('accountCategoryLockAndUnLock').innerHTML = "<i class='fa fa-lock'></i>";

            } else {
                document.getElementById('accountCategory_Code').disabled = false;
                document.getElementById('accountCategory_Category').disabled = false;
                document.getElementById('accountCategoryLockAndUnLock').innerHTML = "<i class='fa fa-unlock'></i>";
            }
        }

        // ============================
        // Save Account Category Button
        // ============================
        function cmdAccountCategorySaveButton_OnClick() {
            var accountCategoryObject = new Object();
            var accountCategoryId = document.getElementById('accountCategory_Id').value;
            accountCategoryObject.AccountCategoryCode = document.getElementById('accountCategory_Code').value;
            accountCategoryObject.AccountCategory = document.getElementById('accountCategory_Category').value;
            accountCategoryObject.IsLocked = document.getElementById('accountCategoryEdit_IsLocked').checked;
            var data = JSON.stringify(accountCategoryObject);

            if (accountCategoryEntryValidation() == false) {
                toastr.error("Invalid Entry");
            }
            else {
                document.getElementById('cmdSaveAccountCategoryButton').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Saving";
                $("#cmdSaveAccountCategoryButton").prop("disabled", true);
                $("#cmdAccountCategoryDetailCloseButton").prop("disabled", true);

                if (accountCategoryId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/addAccountCategory',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: data,
                        success: function (id) {
                            if (id > 0) {
                                document.getElementById('cmdSaveAccountCategoryButton').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Saving";
                                $("#cmdSaveAccountCategoryButton").prop("disabled", true);
                                $("#cmdAccountCategoryDetailCloseButton").prop("disabled", true);
                                toastr.success("Successfully saved");
                                $('#accountCategoryEdit').modal('hide');
                                refreshAccountCategoryFlexgrid();
                            } else {
                                document.getElementById('cmdSaveAccountCategoryButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#cmdSaveAccountCategoryButton").prop("disabled", false);
                                $("#cmdAccountCategoryDetailCloseButton").prop("disabled", false);
                                toastr.error("Save unsuccessful");
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/updateAccountCategory/' + accountCategoryId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: data,
                        statusCode: {
                            200: function () {
                                document.getElementById('cmdSaveAccountCategoryButton').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Updating";
                                $("#cmdSaveAccountCategoryButton").prop("disabled", true);
                                $("#cmdAccountCategoryDetailCloseButton").prop("disabled", true);
                                toastr.success("Successfully updated");
                                $('#accountCategoryEdit').modal('hide');
                                refreshAccountCategoryFlexgrid();
                            },
                            404: function () {
                                document.getElementById('cmdSaveAccountCategoryButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#cmdSaveAccountCategoryButton").prop("disabled", false);
                                $("#cmdAccountCategoryDetailCloseButton").prop("disabled", false);
                                $('#accountCategoryEdit').modal('hide');
                                toastr.error("Update request not found");
                            },
                            400: function () {
                                document.getElementById('cmdSaveAccountCategoryButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#cmdSaveAccountCategoryButton").prop("disabled", false);
                                $("#cmdAccountCategoryDetailCloseButton").prop("disabled", false);
                                $('#accountCategoryEdit').modal('hide');
                                toastr.error("Cannot update record");
                            }
                        }
                    });
                }
            }
        }

        // =============================
        // Close Account Category Button
        // =============================
        function cmdCloseAccountCategory_OnClick() {
            window.location = '/Software';
        }

        // ===============================
        // DELETE Account Category Buttons
        // ===============================
        function cmdAccountCategoryDeleteButton_OnClick() {
            $('#deleteAccountCategoryConfirm').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById('cmdConfirmDeleteAccountCategory').innerHTML = "<i class='fa fa-trash'></i> Delete";
            $("#cmdConfirmDeleteAccountCategory").prop("disabled", false);
            $("#cmdConfirmDeleteCloseButtonAccountCategory").prop("disabled", false);
        }
        // Account Category Confirm Delete Button
        function cmdAccountCategoryConfirmDeleteButton_OnClick() {
            document.getElementById('cmdConfirmDeleteAccountCategory').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Deleting";
            $("#cmdConfirmDeleteAccountCategory").prop("disabled", true);
            $("#cmdConfirmDeleteCloseButtonAccountCategory").prop("disabled", true);

            accountCategories.editItem(accountCategories.currentItem);
            var id = accountCategories.currentEditItem.Id;
            $.ajax({
                url: '/api/deleteAccountCategory/' + id,
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        document.getElementById('cmdConfirmDeleteAccountCategory').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Deleting";
                        $("#cmdConfirmDeleteAccountCategory").prop("disabled", true);
                        $("#cmdConfirmDeleteCloseButtonAccountCategory").prop("disabled", true);
                        $('#deleteAccountCategoryConfirm').modal('hide');
                        toastr.success("Successfully deleted");
                        refreshAccountCategoryFlexgrid();
                    },
                    404: function () {
                        document.getElementById('cmdConfirmDeleteAccountCategory').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $('#deleteAccountCategoryConfirm').modal('hide');
                        $("#cmdConfirmDeleteAccountCategory").prop("disabled", false);
                        $("#cmdConfirmDeleteCloseButtonAccountCategory").prop("disabled", false);
                        toastr.error("Delete request not found");
                    },
                    400: function () {
                        document.getElementById('cmdConfirmDeleteAccountCategory').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $("#cmdConfirmDeleteAccountCategory").prop("disabled", false);
                        $("#cmdConfirmDeleteCloseButtonAccountCategory").prop("disabled", false);
                        $('#deleteAccountCategoryConfirm').modal('hide');
                        toastr.error("Cannot delete record");
                    }
                }
            });
        }

        // =======================================
        // FlexGrid Selection for Account Category
        // =======================================
        function updateDetailsAccountCategory() {
            var item = accountCategories.currentItem;
            document.getElementById('createdBy').innerHTML = item.CreatedBy;
            document.getElementById('createdDate').innerHTML = item.CreatedDateTime;
            document.getElementById('updatedBy').innerHTML = item.UpdatedBy;
            document.getElementById('updatedDate').innerHTML = item.UpdatedDateTime;
        }

        // ========================================
        // Navigation Buttons for Account Category
        // ========================================
        function updateNavigateButtonsAccountCategory() {
            if (accountCategories.pageSize <= 0) {
                document.getElementById('naviagtionPageGridAccountCategory').style.display = 'none';
                return;
            }
            document.getElementById('naviagtionPageGridAccountCategory').style.display = 'block';
            if (accountCategories.pageIndex === 0) {
                btnFirstPageGridAccountCategory.setAttribute('disabled', 'disabled');
                btnPreviousPageGridAccountCategory.setAttribute('disabled', 'disabled');
                btnNextPageGridAccountCategory.removeAttribute('disabled');
                btnLastPageGridAccountCategory.removeAttribute('disabled');
            } else if (accountCategories.pageIndex === (accountCategories.pageCount - 1)) {
                btnFirstPageGridAccountCategory.removeAttribute('disabled');
                btnPreviousPageGridAccountCategory.removeAttribute('disabled');
                btnLastPageGridAccountCategory.setAttribute('disabled', 'disabled');
                btnNextPageGridAccountCategory.setAttribute('disabled', 'disabled');
            } else {
                btnFirstPageGridAccountCategoryw.removeAttribute('disabled');
                btnPreviousPageGridAccountCategory.removeAttribute('disabled');
                btnNextPageGridAccountCategory.removeAttribute('disabled');
                btnLastPageGridAccountCategory.removeAttribute('disabled');
            }
            btnCurrentPageGridAccountCategory.innerHTML = (accountCategories.pageIndex + 1) + ' / ' + accountCategories.pageCount;
        }

        // =================================
        // On Page Load for Account Category
        // =================================
        function accountCategoryTab() {
            accountCategories = new wijmo.collections.CollectionView(getAccountCategory());
            accountCategories.canFilter = true;
            accountCategories.pageSize = 15;

            var filterTextAccountCategory = '';
            $('#InputFilterAccountCategory').keyup(function () {
                filterTextAccountCategory = this.value.toLowerCase();
                accountCategories.refresh();
            });
            accountCategories.filter = function (item) {
                return !filterTextAccountCategory || (item.AccountCategory.toLowerCase().indexOf(filterTextAccountCategory) > -1);
            }
            accountCategories.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsAccountCategory();
            });
            accountCategories.currentChanged.addHandler(function (sender, args) {
                updateDetailsAccountCategory();
            });

            // Flex Grid for Account Category
            accountCategoryGrid = new wijmo.grid.FlexGrid('#AccountCategoryGrid');
            accountCategoryGrid.initialize({
                columns: [
                            {
                                "header": "Edit",
                                "binding": "EditId",
                                "width": 60,
                                "align": "center",
                                "allowResizing": false,
                                "allowSorting": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Delete",
                                "binding": "DeleteId",
                                "width": 70,
                                "align": "center",
                                "allowResizing": false,
                                "allowSorting": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Code",
                                "binding": "AccountCategoryCode",
                                "allowSorting": true,
                                "width": "1*",
                            },
                            {
                                "header": "Account Category",
                                "binding": "AccountCategory",
                                "allowSorting": true,
                                "width": "2*"
                            },
                            {
                                "header": "Lock",
                                "binding": "IsLocked",
                                "allowSorting": true,
                                "width": "0.2*"
                            }
                ],
                autoGenerateColumns: false,
                itemsSource: accountCategories,
                isReadOnly: true,
                frozenColumns: 2,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            accountCategoryGrid.trackChanges = true;

            // Navigation button for account category
            btnFirstPageGridAccountCategory = document.getElementById('btnMoveToFirstPageGridAccountCategory');
            btnPreviousPageGridAccountCategory = document.getElementById('btnMoveToPreviousPageGridAccountCategory');
            btnNextPageGridAccountCategory = document.getElementById('btnMoveToNextPageGridAccountCategory');
            btnLastPageGridAccountCategory = document.getElementById('btnMoveToLastPageGridAccountCategory');
            btnCurrentPageGridAccountCategory = document.getElementById('btnCurrentPageGridAccountCategory');

            updateNavigateButtonsAccountCategory();

            btnFirstPageGridAccountCategory.addEventListener('click', function () {
                accountCashFlows.moveToFirstPage();
                updateNavigateButtonsAccountCashFlow();
            });
            btnPreviousPageGridAccountCategory.addEventListener('click', function () {
                accountCashFlows.moveToPreviousPage();
                updateNavigateButtonsAccountCashFlow();
            });
            btnNextPageGridAccountCategory.addEventListener('click', function () {
                accountCashFlows.moveToNextPage();
                updateNavigateButtonsAccountCashFlow();
            });
            btnLastPageGridAccountCategory.addEventListener('click', function () {
                accountCashFlows.moveToLastPage();
                updateNavigateButtonsAccountCashFlow();
            });
        }
    </script>

    <!-- ================================ -->
    <!-- Tab Current Page on Load Scripts -->
    <!-- ================================ -->
    <script type="text/javascript">
        // ====
        // TABS
        // ====
        $('#accountTabId').click(function () {
            $('#Account').show();
            $('#AccountType').hide();
            $('#AccountCashFlow').hide();
            $('#AccountCategory').hide();
            window.accountTab = function () {
                return true;
            };

            accounts = new wijmo.collections.CollectionView(getAccount());
            accounts.canFilter = true;
            accounts.pageSize = 15;

            var filterTextAccount = '';
            $('#InputFilterAccount').keyup(function () {
                filterTextAccount = this.value.toLowerCase();
                accounts.refresh();
            });
            accounts.filter = function (item) {
                return !filterTextAccount || (item.Account.toLowerCase().indexOf(filterTextAccount) > -1);
            }
            accounts.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsAccount();
            });
            accounts.currentChanged.addHandler(function (sender, args) {
                updateDetailsAccount();
            });

            // Flex Grid for account
            accountGrid.itemsSource = accounts;
            accountGrid.trackChanges = true;
        });

        $('#accountTypeTabId').click(function () {
            $('#Account').hide();
            $('#AccountType').show();
            $('#AccountCashFlow').hide();
            $('#AccountCategory').hide();
            accountTypeTab();
            window.accountTypeTab = function () {
                return true;
            };

            accountTypes = new wijmo.collections.CollectionView(getAccountType());
            accountTypes.canFilter = true;
            accountTypes.pageSize = 15;

            var filterTextAccountType = '';
            $('#InputFilterAccountType').keyup(function () {
                filterTextAccountType = this.value.toLowerCase();
                accountTypes.refresh();
            });
            accountTypes.filter = function (item) {
                return !filterTextAccountType || (item.AccountType.toLowerCase().indexOf(filterTextAccountType) > -1);
            }
            accountTypes.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsAccountType();
            });
            accountTypes.currentChanged.addHandler(function (sender, args) {
                updateDetailsAccountType();
            });

            // Flex Grid for account type
            accountTypeGrid.itemsSource = accountTypes;
            accountTypeGrid.trackChanges = true;
        });

        $('#accountCashFlowTabId').click(function () {
            $('#Account').hide();
            $('#AccountType').hide();
            $('#AccountCashFlow').show();
            $('#AccountCategory').hide();
            accountCashFlowTab();
            window.accountCashFlowTab = function () {
                return true;
            };

            accountCashFlows = new wijmo.collections.CollectionView(getAccountCashFlow());
            accountCashFlows.canFilter = true;
            accountCashFlows.pageSize = 15;

            var filterTextAccountCashFlow = '';
            $('#InputFilterAccountCashFlow').keyup(function () {
                filterTextAccountCashFlow = this.value.toLowerCase();
                accountCashFlows.refresh();
            });
            accountCashFlows.filter = function (item) {
                return !filterTextAccountCashFlow || (item.AccountCashFlow.toLowerCase().indexOf(filterTextAccountCashFlow) > -1);
            }
            accountCashFlows.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsAccountCashFlow();
            });
            accountCashFlows.currentChanged.addHandler(function (sender, args) {
                updateDetailsAccountCashFlow();
            });

            // Flex Grid for Account Cash Flow
            accountCashFlowGrid.itemsSource = accountCashFlows;
            accountCashFlowGrid.trackChanges = true;
        });

        $('#accountCategoryTabId').click(function () {
            $('#Account').hide();
            $('#AccountType').hide();
            $('#AccountCashFlow').hide();
            $('#AccountCategory').show();
            accountCategoryTab();
            window.accountCategoryTab = function () {
                return true;
            };

            accountCategories = new wijmo.collections.CollectionView(getAccountCategory());
            accountCategories.canFilter = true;
            accountCategories.pageSize = 15;

            var filterTextAccountCategory = '';
            $('#InputFilterAccountCategory').keyup(function () {
                filterTextAccountCategory = this.value.toLowerCase();
                accountCategories.refresh();
            });
            accountCategories.filter = function (item) {
                return !filterTextAccountCategory || (item.AccountCategory.toLowerCase().indexOf(filterTextAccountCategory) > -1);
            }
            accountCategories.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsAccountCategory();
            });
            accountCategories.currentChanged.addHandler(function (sender, args) {
                updateDetailsAccountCategory();
            });

            // Flex Grid for Account Category
            accountCategoryGrid.itemsSource = accountCategories;
            accountCategoryGrid.trackChanges = true;
        });

        $(document).ready(function () {
            var userId = '@ViewData["UserId"]';
            rightsAccessValidation(userId);

            $('#Account').show();
            $('#AccountType').hide();
            $('#AccountCashFlow').hide();
            $('#AccountCategory').hide();
            accountTab();

            $(document).on('show.bs.modal', '.modal', function (event) {
                var zIndex = 1040 + (10 * $('.modal:visible').length);
                $(this).css('z-index', zIndex);
                setTimeout(function () {
                    $('.modal-backdrop').not('.modal-stack').css('z-index', zIndex - 1).addClass('modal-stack');
                }, 0);
            });

            $(document).on('hidden.bs.modal', '.modal', function () {
                $('.modal:visible').length && $(document.body).addClass('modal-open');
            });

            // Account Category Lock - IsLocked
            $("#accountCategoryEdit_IsLocked").click(function () {
                if ($(this).is(':checked')) {
                    document.getElementById('accountCategory_Code').disabled = true;
                    document.getElementById('accountCategory_Category').disabled = true;
                    document.getElementById('accountCategoryLockAndUnLock').innerHTML = "<i class='fa fa-lock'></i>";
                } else {
                    document.getElementById('accountCategory_Code').disabled = false;
                    document.getElementById('accountCategory_Category').disabled = false;
                    document.getElementById('accountCategoryLockAndUnLock').innerHTML = "<i class='fa fa-unlock'></i>";
                }
            });

            // Account Cash Flow Lock - IsLocked
            $("#accountCashFlowEdit_IsLocked").click(function () {
                if ($(this).is(':checked')) {
                    document.getElementById('accountCashFlow_Code').disabled = true;
                    document.getElementById('accountCashFlow_CashFlow').disabled = true;
                    document.getElementById('accountCashFlowLockAndUnLock').innerHTML = "<i class='fa fa-lock'></i>";
                } else {
                    document.getElementById('accountCashFlow_Code').disabled = false;
                    document.getElementById('accountCashFlow_CashFlow').disabled = false;
                    document.getElementById('accountCashFlowLockAndUnLock').innerHTML = "<i class='fa fa-unlock'></i>";
                }
            });

            // Account Type Lock - IsLocked
            $("#accountTypeEdit_IsLocked").click(function () {
                if ($(this).is(':checked')) {
                    Islocked = true;
                    document.getElementById('accountType_code').disabled = true;
                    document.getElementById('accountType_accountType').disabled = true;
                    document.getElementById('accountType_SubCategoryDescription').disabled = true;
                    document.getElementById('accountTypeLockAndUnLock').innerHTML = "<i class='fa fa-lock'></i>";
                    accountCategorySelectedValue = cboAccountCategory.selectedItem["AccountCategory"].toString();
                    getAccountCategoryForComboBox();
                } else {
                    Islocked = false;
                    document.getElementById('accountType_code').disabled = false;
                    document.getElementById('accountType_accountType').disabled = false;
                    document.getElementById('accountType_SubCategoryDescription').disabled = false;
                    document.getElementById('accountTypeLockAndUnLock').innerHTML = "<i class='fa fa-unlock'></i>";
                    accountCategorySelectedValue = cboAccountCategory.selectedItem["AccountCategory"].toString();
                    getAccountCategoryForComboBox();
                }
            });

            // Account Lock - IsLocked
            $("#accountEdit_IsLocked").click(function () {
                if ($(this).is(':checked')) {
                    Islocked = true;
                    if (document.getElementById('account_id').value == 0) {
                        document.getElementById('account_code').disabled = true;
                        document.getElementById('account_account').disabled = true;
                        document.getElementById("accountLockAndUnLock").innerHTML = '<i class="fa fa-lock"></i>';
                        $('#btnAddACcountArticleType').prop('disabled', true);
                        accountTypeSelectedValue = cboAccountType.selectedItem["AccountType"].toString();
                        accountCashFlowSelectedValue = cboAccountCashFlow.selectedItem["AccountCashFlow"].toString();
                        getAccountTypeForComboBox();
                        getAccountCashFlowForComboBox();
                    } else {
                        document.getElementById('account_code').disabled = true;
                        document.getElementById('account_account').disabled = true;
                        $('#btnAddACcountArticleType').prop('disabled', true);
                        accountTypeSelectedValue = cboAccountType.selectedItem["AccountType"].toString();
                        accountCashFlowSelectedValue = cboAccountCashFlow.selectedItem["AccountCashFlow"].toString();
                        document.getElementById("accountLockAndUnLock").innerHTML = '<i class="fa fa-lock"></i>';
                        document.getElementById("loadingAccountArtitleType").innerHTML = '<i class="fa fa-spinner fa-spin"></i> Loading';
                        $('#loadingAccountArtitleType').show();
                        $('#AccountArticleTypeGrid').hide();
                        $('#accountArticleTypeDiv').hide();
                        $('#hrAccountArticleType').show();
                        setTimeout(function () {
                            $('#loadingAccountArtitleType').hide();
                            $('#AccountArticleTypeGrid').show();
                            $('#accountArticleTypeDiv').show();
                            $('#hrAccountArticleType').show();
                            refreshAccountArticleTypeFlexgrid();
                        }, 500);
                        getAccountTypeForComboBox();
                        getAccountCashFlowForComboBox();
                    }
                } else {
                    Islocked = false;
                    if (document.getElementById('account_id').value == 0) {
                        document.getElementById('account_code').disabled = false;
                        document.getElementById('account_account').disabled = false;
                        document.getElementById("accountLockAndUnLock").innerHTML = '<i class="fa fa-unlock"></i>';
                        $('#btnAddACcountArticleType').prop('disabled', false);
                        getAccountTypeForComboBox();
                        getAccountCashFlowForComboBox();
                    } else {
                        document.getElementById('account_code').disabled = false;
                        document.getElementById('account_account').disabled = false;
                        $('#btnAddACcountArticleType').prop('disabled', false);
                        document.getElementById("accountLockAndUnLock").innerHTML = '<i class="fa fa-unlock"></i>';
                        document.getElementById("loadingAccountArtitleType").innerHTML = '<i class="fa fa-spinner fa-spin"></i> Loading';
                        $('#loadingAccountArtitleType').show();
                        $('#AccountArticleTypeGrid').hide();
                        $('#accountArticleTypeDiv').hide();
                        $('#hrAccountArticleType').show();
                        setTimeout(function () {
                            $('#loadingAccountArtitleType').hide();
                            $('#AccountArticleTypeGrid').show();
                            $('#accountArticleTypeDiv').show();
                            $('#hrAccountArticleType').show();
                            refreshAccountArticleTypeFlexgrid();
                        }, 500);
                        getAccountTypeForComboBox();
                        getAccountCashFlowForComboBox();
                    }
                }
            });
        });
    </script>
</body>
</html>