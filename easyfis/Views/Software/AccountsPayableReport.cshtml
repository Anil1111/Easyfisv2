<!DOCTYPE html>
<html>
<head>
    <!-- Meta -->
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">

    <!-- Title of the Page -->
    <link rel="shortcut icon" href="~/Images/icon/easyfislogomini.ico">
    <title>Accounts Payable Report</title>

    <!-- CSS StyleSheets-->
    @Styles.Render("~/Content/Software-css")
</head>
<body class="hold-transition skin-blue fixed sidebar-mini">
    <div class="wrapper">
        @Html.Partial("_SoftwareHeader")
        @Html.Partial("_SoftwareSideBarMenu")

        <div class="content-wrapper">
            <section class="content-header">
                <h1>
                    Accounts Payable Report
                    <small><i class="fa fa-building"></i> @ViewData["Company"] / @ViewData["Branch"]</small>
                </h1>
                <ol class="breadcrumb">
                    <li><a href="/Software"> Dashboard</a></li>
                    <li> <a href="/Software/AccountsPayable"> Accounts Payable </a></li>
                    <li> Accounts Payable Report </li>
                </ol>
            </section>

            <section class="content">
                <div class="box box-default">
                    <div class="box-header">
                        <div class="row">
                            <div class="col-md-6">
                                <h4>
                                    <span id="companyname"></span>
                                    <small>
                                        <i class="fa fa-calendar fa-fw"></i> <span id="dateAsOf"></span>
                                    </small>
                                </h4>
                            </div>
                            <div class="col-md-6" align="right">
                                <button onclick="accountsPayableReportCSVOnclick()" class="btn btn-primary btn-sm"><i class="fa fa-file-excel-o" aria-hidden="true"></i> CSV</button>
                                <button onclick="accountsPayableReportPDFOnclick()" class="btn btn-primary btn-sm"><i class="fa fa-print"></i> Print</button>
                                <a href="/Software/AccountsPayable" class="btn btn-danger btn-sm"><i class="fa fa-close"></i> Close</a>
                            </div>
                        </div>
                    </div>
                    <div class="box-body">
                        <div id="accountsPayableGrid" class="grid"></div>
                        <br /><br /><br />
                        <div align="right">
                            <div class="row">
                                 <div class="col-md-8"></div>
                                <div class="col-md-4">
                                    <table class="table table-responsive table-bordered">
                                        <tr>
                                            <td align="right">
                                                <b>Total Balance: </b>
                                            </td>
                                            <td style="padding-left: 10px" align="right">
                                                <span id="totalBalance">NA</span>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td align="right">
                                                <b>Total Current Amount: </b>
                                            </td>
                                            <td style="padding-left: 10px" align="right">
                                                <span id="totalCurrentAmount">NA</span>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td align="right">
                                                <b>Total Amount in 30 Days: </b>
                                            </td>
                                            <td style="padding-left: 10px" align="right">
                                                <span id="totalAmount30Days">NA</span>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td align="right">
                                                <b>Total Amount in 60 Days: </b>
                                            </td>
                                            <td style="padding-left: 10px" align="right">
                                                <span id="totalAmount60Days">NA</span>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td align="right">
                                                <b>Total Amount in 90 Days: </b>
                                            </td>
                                            <td style="padding-left: 10px" align="right">
                                                <span id="totalAmount90Days">NA</span>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td align="right">
                                                <b>Total Amount Over 120 Days: </b>
                                            </td>
                                            <td style="padding-left: 10px" align="right">
                                                <span id="totalAmountOver120Days">NA</span>
                                            </td>
                                        </tr>
                                    </table>
                                    <hr />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </section>
        </div>

        @Html.Partial("_SoftwareFooter")
    </div>

    @Scripts.Render("~/Scripts/Software-js")
    <script type="text/javascript">
        var accountsPayableGrid;

        function getParam(name) {
            name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
            var regexS = "[\\?&]" + name + "=([^&#]*)";
            var regex = new RegExp(regexS);
            var results = regex.exec(window.location.href);
            if (results == null)
                return "";
            else
                return results[1];
        }

        function getAccountsPayable() {
            NProgress.start();
            var accountsPayables = new wijmo.collections.ObservableArray;
            document.getElementById("dateAsOf").innerHTML = "Date as of " + getParam("DateAsOf");
            $.ajax({
                url: '/api/accountsPayable/list/' + getParam("DateAsOf") + "/" + getParam("CompanyId"),
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (accountsPayableResults) {
                    if (accountsPayableResults.length > 0) {
                        var totalBalance = 0;
                        var totalCurrentAmount = 0;
                        var totalAge30Amount = 0;
                        var totalAge60Amount = 0;
                        var totalAge90Amount = 0;
                        var totalAge120Amount = 0;

                        for (i = 0; i < accountsPayableResults.length; i++) {
                            var docLink = "/Software/ReceivingReceiptDetail?ReceivingReceiptId=" + accountsPayableResults[i]["Id"];

                            totalBalance = totalBalance + accountsPayableResults[i]["BalanceAmount"];
                            totalCurrentAmount = totalCurrentAmount + accountsPayableResults[i]["CurrentAmount"];
                            totalAge30Amount = totalAge30Amount + accountsPayableResults[i]["Age30Amount"];
                            totalAge60Amount = totalAge60Amount + accountsPayableResults[i]["Age60Amount"];
                            totalAge90Amount = totalAge90Amount + accountsPayableResults[i]["Age90Amount"];
                            totalAge120Amount = totalAge120Amount + accountsPayableResults[i]["Age120Amount"];

                            accountsPayables.push({
                                Id: accountsPayableResults[i]["Id"],
                                AccountId: accountsPayableResults[i]["AccountId"],
                                AccountCode: accountsPayableResults[i]["AccountCode"],
                                Account: accountsPayableResults[i]["AccountCode"] + "-" + accountsPayableResults[i]["Account"],
                                SupplierId: accountsPayableResults[i]["SupplierId"],
                                Supplier: accountsPayableResults[i]["Supplier"],
                                RRNumber: "<a href='" + docLink + "' class='btn btn-default btn-xs btn-block' style='text-align: left'>" + accountsPayableResults[i]["RRNumber"] + "</a>",
                                RRNumberValue: accountsPayableResults[i]["RRNumber"],
                                RRDate: accountsPayableResults[i]["RRDate"],
                                DocumentReference: accountsPayableResults[i]["DocumentReference"],
                                BalanceAmount: accountsPayableResults[i]["BalanceAmount"],
                                DueDate: accountsPayableResults[i]["DueDate"],
                                NumberOfDaysFromDueDate: accountsPayableResults[i]["NumberOfDaysFromDueDate"],
                                CurrentAmount: accountsPayableResults[i]["CurrentAmount"],
                                Age30Amount: accountsPayableResults[i]["Age30Amount"],
                                Age60Amount: accountsPayableResults[i]["Age60Amount"],
                                Age90Amount: accountsPayableResults[i]["Age90Amount"],
                                Age120Amount: accountsPayableResults[i]["Age120Amount"],
                            });
                        }

                        document.getElementById("totalBalance").innerHTML = (Math.round(totalBalance * 100) / 100).toLocaleString();
                        document.getElementById("totalCurrentAmount").innerHTML = (Math.round(totalCurrentAmount * 100) / 100).toLocaleString();
                        document.getElementById("totalAmount30Days").innerHTML = (Math.round(totalAge30Amount * 100) / 100).toLocaleString();
                        document.getElementById("totalAmount60Days").innerHTML = (Math.round(totalAge60Amount * 100) / 100).toLocaleString();
                        document.getElementById("totalAmount90Days").innerHTML = (Math.round(totalAge90Amount * 100) / 100).toLocaleString();
                        document.getElementById("totalAmountOver120Days").innerHTML = (Math.round(totalAge120Amount * 100) / 100).toLocaleString();
                    }

                    NProgress.done();
                }
            });

            return accountsPayables;
        }

        var accountsPayableCollections;

        function accountsPayableReportCSVOnclick() {
            

            var CSV = '';
            var accountPayables = [];
            var fileName = 'AccountsPayableReport.CSV';

            for (i = 0; i < accountsPayableCollections.items.length; i++) {
                accountPayables.push({
                    RRNumber: accountsPayableCollections.items[i].RRNumberValue,
                    AccountCode: accountsPayableCollections.items[i].AccountCode,
                    Account: accountsPayableCollections.items[i].Account,
                    Supplier: accountsPayableCollections.items[i].Supplier,
                    RRDate: accountsPayableCollections.items[i].RRDate,
                    DocumentReference: accountsPayableCollections.items[i].DocumentReference,
                    DueDate: accountsPayableCollections.items[i].DueDate,
                    BalanceAmount: accountsPayableCollections.items[i].BalanceAmount,
                    CurrentAmount: accountsPayableCollections.items[i].CurrentAmount,
                    Age30Amount: accountsPayableCollections.items[i].Age30Amount,
                    Age60Amount: accountsPayableCollections.items[i].Age60Amount,
                    Age90Amount: accountsPayableCollections.items[i].Age90Amount,
                    Age120Amount: accountsPayableCollections.items[i].Age120Amount
                });
            }

            //for (var i = 0; i < symbols.length; i++) {
            //    CSV += '"' + symbols[i].AccountCode + '"\r\n';
            //}

            // Rows
            for (var i = 0; i < accountPayables.length; i++) {
                var row = '';
                for (var a in accountPayables[i]) {
                    row += '"' + accountPayables[i][a] + '",';
                }
                row.slice(0, row.length - 1);
                CSV += row + '\r\n';
            }

            if (CSV == '') {
                toastr.error("No data.");
            } else {
                var link = document.createElement("a");

                if (link.download !== undefined) {
                    var blob = new Blob([CSV], { type: 'text/csv;charset=utf-8;' });
                    var url = URL.createObjectURL(blob);
                    link.setAttribute("href", url);
                    link.setAttribute("download", fileName);
                    link.style = "visibility:hidden";
                }

                if (navigator.msSaveBlob) {
                    link.addEventListener("click", function (event) {
                        var blob = new Blob([CSV], {
                            "type": "text/csv;charset=utf-8;"
                        });
                        navigator.msSaveBlob(blob, fileName);
                    }, false);
                }

                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);

                toastr.success("Dowload successful.");
            }
        }


        function accountsPayableReportPDFOnclick() {
            window.location.href = '/RepAccountsPayable/AccountsPayable?DateAsOf=' + getParam("DateAsOf") + '&CompanyId=' + getParam("CompanyId");
        }

        $(document).ready(function () {
            $.ajax({
                url: '/api/company/' + getParam("CompanyId"),
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (companyResults) {
                    document.getElementById("companyname").innerHTML = companyResults.Company;
                }
            });

            accountsPayableCollections = new wijmo.collections.CollectionView(getAccountsPayable());

            // Flex Grid
            accountsPayableGrid = new wijmo.grid.FlexGrid('#accountsPayableGrid');
            accountsPayableGrid.initialize({
                columns: [
                            {
                                "header": "RR Number",
                                "binding": "RRNumber",
                                "allowSorting": true,
                                "width": 120,
                                "allowResizing": false,
                                "allowSorting": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Account",
                                "binding": "Account",
                                "allowSorting": true,
                                "width": 220
                            },
                            {
                                "header": "Supplier",
                                "binding": "Supplier",
                                "allowSorting": true,
                                "width": 250,

                            },
                            {
                                "header": "RR Date",
                                "binding": "RRDate",
                                "allowSorting": true,
                                "width": 90
                            },
                            {
                                "header": "Document Ref.",
                                "binding": "DocumentReference",
                                "allowSorting": true,
                                "width": 204,
                            },
                            {
                                "header": "Due Date",
                                "binding": "DueDate",
                                "allowSorting": true,
                                "width": 110
                            },
                            {
                                "header": "Balance",
                                "binding": "BalanceAmount",
                                "allowSorting": true,
                                "width": 135
                            },
                            {
                                "header": "Current",
                                "binding": "CurrentAmount",
                                "allowSorting": true,
                                "width": 135
                            },
                            {
                                "header": "30 Days",
                                "binding": "Age30Amount",
                                "allowSorting": true,
                                "width": 120
                            },
                            {
                                "header": "60 Days",
                                "binding": "Age60Amount",
                                "allowSorting": true,
                                "width": 120
                            },
                            {
                                "header": "90 Days",
                                "binding": "Age90Amount",
                                "allowSorting": true,
                                "width": 120
                            },
                            {
                                "header": "Over 120 Days",
                                "binding": "Age120Amount",
                                "allowSorting": true,
                                "width": 120
                            },
                ],
                autoGenerateColumns: false,
                itemsSource: accountsPayableCollections,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            accountsPayableGrid.trackChanges = true;
        });
    </script>
</body>
</html>