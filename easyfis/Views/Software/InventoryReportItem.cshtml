<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">
    <link rel="shortcut icon" href="~/Images/icon/easyfislogomini.ico">
    <title>Inventory</title>

    @Styles.Render("~/Content/Software-css")
</head>
<body>
    <div id="o-wrapper" class="o-wrapper">
        <main class="o-content">
            @Html.Partial("_SoftwareHeader")

            <section class="content-header">
                <div class="container">
                    <h3>
                        Inventory Per Item
                    </h3>
                    <p>
                        <i class="fa fa-building-o fa-fw"></i> &nbsp; @ViewData["Company"] <br />
                        <i class="fa fa-home fa-fw"></i> &nbsp; <a href="#" onclick="getUserBranches()" style="color: white;">@ViewData["Branch"]</a>
                    </p>
                </div>
            </section>
            <section class="container">
                <div class="panel panel-default">

                    <!--
                        ===============
                        Search / Filter
                        ===============
                    -->
                    <div class="panel-heading">
                        <table style="width: 100%" border="0">
                            <tr>
                                <td style="width: 49.5%">
                                    <div class="input-group">
                                        <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                        <input type="text" class="form-control" id="inpInventoryReportSearchFilter" placeholder="Search...">
                                    </div>
                                </td>
                                <td style="width: 1%"></td>
                                <td style="width: 24%">
                                    <div class="input-group">
                                        <span class="input-group-addon"><b><i class="fa fa-table"></i></b></span>
                                        <div class="comboBox-wide" id="cboInventoryReportDisplayNumberOfRows"></div>
                                    </div>
                                </td>
                                <td style="width: 1%"></td>
                                <td style="width: 24.5%" align="right">
                                    <button onclick="btnInventoryReportCSVOnclick()" id="btnInventoryReportCSV" class="btn btn-success"><i class="fa fa-file-excel-o" aria-hidden="true"></i> CSV</button>
                                    <button onclick="btnInventoryReportPDFOnclick()" id="btnInventoryReportPDF" class="btn btn-primary"><i class="fa fa-print"></i> Print</button>
                                    <a href="/Software/Inventory" class="btn btn-danger"><i class="fa fa-close"></i> Close</a>
                                </td>
                            </tr>
                        </table>
                    </div>

                    <!--
                        ======================================
                        Date Range, Company and Branch Filters
                        ======================================
                    -->
                    <div class="panel-heading">
                        <table style="width: 100%" border="0">
                            <tr>
                                <td style="width: 24%">
                                    <div class="input-group ">
                                        <span class="input-group-addon"><b>Barcode</b></span>
                                        <div class="comboBox-wide" id="cboInventoryReportItemCodeFilter"></div>
                                    </div>
                                </td>
                                <td style="width: 1%"></td>
                                <td style="width: 49%" align="right">
                                    <div class="input-group ">
                                        <span class="input-group-addon"><b>Item Description</b></span>
                                        <div class="comboBox-wide" id="cboInventoryReportItemDescriptionFilter"></div>
                                    </div>
                                </td>
                                <td style="width: 1%"></td>
                                <td style="width: 24%">
                                    <div class="input-group ">
                                        <span class="input-group-addon"><b>Company</b></span>
                                        <div class="comboBox-wide" id="cboInventoryReportCompanyFilter"></div>
                                    </div>
                                </td>
                            </tr>
                        </table>
                    </div>

                    <!--
                        =========================================
                        Stock Count Number for Variances (Filter)
                        =========================================
                        <div class="panel-heading">
                            <table style="width: 100%" border="0">
                                <tr>
                                    <td style="width: 24%">
                                        <div class="input-group ">
                                            <span class="input-group-addon"><b>SC Number</b></span>
                                            <div class="comboBox-wide" id="cboInventoryReportSCFilter"></div>
                                        </div>
                                    </td>
                                    <td style="width: 76%"></td>
                                </tr>
                            </table>
                        </div>
                    -->

                    <!--
                        =========
                        Flex Grid
                        =========
                    -->
                    <div class="panel-body">
                        <div id="inventoryReportFlexGrid" class="grid" style="font-size: 10px;"></div>
                    </div>

                    <!--
                        ==================
                        Navigation Buttons
                        ==================
                    -->
                    <div class="panel-footer">
                        <div class="row">
                            <div class="btn-group col-md-7" id="btnInventoryReportNavigationPageGrid">
                                <button type="button" class="btn btn-default border-custom" id="btnInventoryReportMoveToFirstPageGrid">
                                    <span class="glyphicon glyphicon-fast-backward"></span>
                                </button>
                                <button type="button" class="btn btn-default border-custom" id="btnInventoryReportMoveToPreviousPageGrid">
                                    <span class="glyphicon glyphicon-step-backward"></span>
                                </button>
                                <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnInventoryReportCurrentPageGrid"></button>
                                <button type="button" class="btn btn-default border-custom" id="btnInventoryReportMoveToNextPageGrid">
                                    <span class="glyphicon glyphicon-step-forward"></span>
                                </button>
                                <button type="button" class="btn btn-default border-custom" id="btnInventoryReportMoveToLastPageGrid">
                                    <span class="glyphicon glyphicon-fast-forward"></span>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                <!--
                    ======
                    Totals
                    ======
                -->
                <div class="panel panel-default">
                    <div class="panel-body">
                        <div class="row">
                            <div class="col-md-6"></div>
                            <div class="col-md-6">
                                <dl class="dl-horizontal dl-custom">
                                    <dt>
                                        <b>Total Amount</b>
                                    </dt>
                                    <dd>
                                        <input type="text" class="form-control numberField" id="totalAmount" placeholder="0.00" disabled />
                                    </dd>
                                </dl>
                            </div>
                        </div>
                    </div>
                </div>
            </section>

            @Html.Partial("_SoftwareFooter")
        </main>
    </div>
    <div id="c-mask" class="c-mask"></div>

    @Scripts.Render("~/Scripts/Software-js")
    <script type="text/javascript">
        // =====================================
        // Item Code Filters
        // =====================================
        var cboInventoryReportItemCodeFilter = new wijmo.input.ComboBox('#cboInventoryReportItemCodeFilter');
        var cboInventoryReportItemDescriptionFilter = new wijmo.input.ComboBox('#cboInventoryReportItemDescriptionFilter');
        // =====================================
        // Company, Branch and SC Number Filters
        // =====================================
        var cboInventoryReportCompanyFilter = new wijmo.input.ComboBox('#cboInventoryReportCompanyFilter');
        var isCboInventoryReportCompanySelected = false;
        //var cboInventoryReportSCFilter = new wijmo.input.ComboBox('#cboInventoryReportSCFilter');

        // =============================
        // Collection View and Flex Grid
        // =============================
        var inventoryReportCollectionView;
        var inventoryReportFlexGrid;
        var cboInventoryReportDisplayNumberOfRows = new wijmo.input.ComboBox('#cboInventoryReportDisplayNumberOfRows');

        // ==================
        // Navigation Buttons
        // ==================
        var btnInventoryReportMoveToFirstPageGrid = document.getElementById('btnInventoryReportMoveToFirstPageGrid');
        var btnInventoryReportMoveToPreviousPageGrid = document.getElementById('btnInventoryReportMoveToPreviousPageGrid');
        var btnInventoryReportMoveToNextPageGrid = document.getElementById('btnInventoryReportMoveToNextPageGrid');
        var btnInventoryReportMoveToLastPageGrid = document.getElementById('btnInventoryReportMoveToLastPageGrid');
        var btnInventoryReportCurrentPageGrid = document.getElementById('btnInventoryReportCurrentPageGrid');
        var inventoryReportCurrentPageIndex = 0;

        // =======================
        // Get URL Parameter Value
        // =======================
        function getURLParameterValue(name) {
            name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");

            var regexS = "[\\?&]" + name + "=([^&#]*)";
            var regex = new RegExp(regexS);

            var results = regex.exec(window.location.href);
            if (results == null) {
                return "";
            } else {
                return results[1];
            }
        }

        // ==========================
        // Create Combo Item Code Filter
        // ==========================
        function createCboItemFilter() {
            NProgress.start();

            var itemObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/inventoryReportItem/dropdown/item',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (itemResults) {
                    if (itemResults.length > 0) {
                        for (i = 0; i < itemResults.length; i++) {
                            itemObservableArray.push({
                                Id: itemResults[i]["Id"],
                                ManualArticleCode: itemResults[i]["ManualArticleCode"],
                                Article: itemResults[i]["Article"]
                            });
                        }
                    }

                    cboInventoryReportItemCodeFilter.dispose();
                    cboInventoryReportItemCodeFilter = new wijmo.input.ComboBox('#cboInventoryReportItemCodeFilter', {
                        isEditable: false,
                        itemsSource: itemObservableArray,
                        displayMemberPath: "ManualArticleCode",
                        selectedValuePath: "Id",
                        selectedValue: getURLParameterValue("ItemId"),
                        onSelectedIndexChanged: function () {
                            NProgress.start();
                            cboInventoryReportItemDescriptionFilter.selectedValue = this.selectedValue;
                            refreshInventoryReportFlexGrid();
                        }
                    });

                    cboInventoryReportItemDescriptionFilter.dispose();
                    cboInventoryReportItemDescriptionFilter = new wijmo.input.ComboBox('#cboInventoryReportItemDescriptionFilter', {
                        isEditable: false,
                        itemsSource: itemObservableArray,
                        displayMemberPath: "Article",
                        selectedValuePath: "Id",
                        selectedValue: getURLParameterValue("ItemId"),
                        onSelectedIndexChanged: function () {
                            NProgress.start();
                            cboInventoryReportItemCodeFilter.selectedValue = this.selectedValue;
                            refreshInventoryReportFlexGrid();
                            //createCboCompanyFilter();
                        }
                    });

                    createCboCompanyFilter();
                }
            });
        }

        // ===========================
        // Create Combo Company Filter
        // ===========================
        function createCboCompanyFilter() {
            var companyObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/inventoryReportItem/dropdown/company',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (companyResults) {
                    if (companyResults.length > 0) {
                        for (i = 0; i < companyResults.length; i++) {
                            companyObservableArray.push({
                                Id: companyResults[i]["Id"],
                                Company: companyResults[i]["Company"]
                            });
                        }
                    }

                    var disabled = true;
                    if (companyResults.length > 0) {
                        disabled = false;
                    } else {
                        $("#btnInventoryReportCSV").prop("disabled", true);
                        $("#btnInventoryReportPDF").prop("disabled", true);
                    }

                    cboInventoryReportCompanyFilter.dispose();
                    cboInventoryReportCompanyFilter = new wijmo.input.ComboBox('#cboInventoryReportCompanyFilter', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: companyObservableArray,
                        displayMemberPath: "Company",
                        selectedValuePath: "Id",
                        selectedValue: getURLParameterValue("CompanyId"),
                        onSelectedIndexChanged: function () {
                            NProgress.start();
                            $("#btnInventoryReportCSV").prop("disabled", false);
                            $("#btnInventoryReportPDF").prop("disabled", false);
                            isCboInventoryReportCompanySelected = true;
                            //createCboStockCountListFilter();
                            refreshInventoryReportFlexGrid();
                        }
                    });

                    //createCboStockCountListFilter();
                    createCboDisplayNumberOfRows();
                }
            });
        }


        // ====================================
        // Create Combo Stock Count List Filter
        // ====================================
        //function createCboStockCountListFilter() {
        //    var stockCountObservableArray = new wijmo.collections.ObservableArray();
        //    var branchId = cboInventoryReportBranchFilter.selectedValue;

        //    $.ajax({
        //        url: '/api/inventoryReport/dropdown/list/stockCount/' + branchId,
        //        cache: false,
        //        type: 'GET',
        //        contentType: 'application/json; charset=utf-8',
        //        success: function (results) {
        //            var disabled = true;
        //            if (results.length > 0) {
        //                for (i = 0; i < results.length; i++) {
        //                    stockCountObservableArray.push({
        //                        Id: results[i]["Id"],
        //                        SCNumber: results[i]["SCNumber"],
        //                        StockCountItem: results[i]["StockCountItem"]
        //                    });
        //                }

        //                disabled = false;
        //            }

        //            cboInventoryReportSCFilter.dispose();
        //            cboInventoryReportSCFilter = new wijmo.input.ComboBox('#cboInventoryReportSCFilter', {
        //                disabled: disabled,
        //                isEditable: false,
        //                required: false,
        //                itemsSource: stockCountObservableArray,
        //                displayMemberPath: "SCNumber",
        //                selectedValue: "",
        //                onSelectedIndexChanged: function () {
        //                    NProgress.start();
        //                    if (this.selectedValue != null) {
        //                        inventoryReportCollectionView.moveToFirstPage();

        //                        for (var p = 1; p <= inventoryReportCollectionView.pageCount; p++) {
        //                            for (i = 0; i < inventoryReportCollectionView.items.length; i++) {
        //                                inventoryReportCollectionView.items[i].Count = 0;
        //                                inventoryReportCollectionView.items[i].CountDisplay = parseFloat(0).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        //                                inventoryReportCollectionView.items[i].Variance = parseFloat(0);
        //                                inventoryReportCollectionView.items[i].VarianceDisplay = parseFloat(0).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");

        //                                var inventoryArticleId = inventoryReportCollectionView.items[i].ArticleId;
        //                                var inventoryEndQuantity = inventoryReportCollectionView.items[i].EndQuantity;

        //                                for (var c = 0; c < this.selectedItem["StockCountItem"].length; c++) {
        //                                    var countItemId = this.selectedItem["StockCountItem"][c].ItemId;
        //                                    var countQuantity = this.selectedItem["StockCountItem"][c].Quantity;
        //                                    if (countItemId === inventoryArticleId) {
        //                                        inventoryReportCollectionView.items[i].Count = countQuantity;
        //                                        inventoryReportCollectionView.items[i].CountDisplay = parseFloat(countQuantity).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        //                                        inventoryReportCollectionView.items[i].Variance = parseFloat(inventoryEndQuantity - countQuantity);
        //                                        inventoryReportCollectionView.items[i].VarianceDisplay = parseFloat(inventoryEndQuantity - countQuantity).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        //                                    }
        //                                }
        //                            }

        //                            inventoryReportCollectionView.moveToNextPage();
        //                            if (p == inventoryReportCollectionView.pageCount) {
        //                                inventoryReportCollectionView.moveToPage(inventoryReportCurrentPageIndex - 1);
        //                            }
        //                        }

        //                        inventoryReportCollectionView.refresh();
        //                        inventoryReportFlexGrid.refresh();
        //                    } else {
        //                        inventoryReportCollectionView.moveToFirstPage();

        //                        for (var p = 1; p <= inventoryReportCollectionView.pageCount; p++) {
        //                            for (i = 0; i < inventoryReportCollectionView.items.length; i++) {
        //                                inventoryReportCollectionView.items[i].Count = 0;
        //                                inventoryReportCollectionView.items[i].CountDisplay = parseFloat(0).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        //                                inventoryReportCollectionView.items[i].Variance = parseFloat(0);
        //                                inventoryReportCollectionView.items[i].VarianceDisplay = parseFloat(0).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        //                            }

        //                            inventoryReportCollectionView.moveToNextPage();
        //                            if (p == inventoryReportCollectionView.pageCount) {
        //                                inventoryReportCollectionView.moveToPage(inventoryReportCurrentPageIndex - 1);
        //                            }
        //                        }

        //                        inventoryReportCollectionView.refresh();
        //                        inventoryReportFlexGrid.refresh();
        //                    }

        //                    NProgress.done();
        //                }
        //            });
        //        }
        //    });
        //}

        // ===================================
        // Create Combo Display Number of Rows
        // ===================================
        function createCboDisplayNumberOfRows() {
            var rowsObservableArray = new wijmo.collections.ObservableArray();

            for (var i = 0; i <= 4; i++) {
                var rows = 0;
                var rowsString = "";

                if (i == 0) {
                    rows = 15;
                    rowsString = "Show 15 Rows";
                } else if (i == 1) {
                    rows = 50;
                    rowsString = "Show 50 Rows";
                } else if (i == 2) {
                    rows = 100;
                    rowsString = "Show 100 Rows";
                } else if (i == 3) {
                    rows = 150;
                    rowsString = "Show 150 Rows";
                } else {
                    rows = 200;
                    rowsString = "Show 200 Rows";
                }

                rowsObservableArray.push({
                    rowNumber: rows,
                    rowString: rowsString
                });
            }

            cboInventoryReportDisplayNumberOfRows.dispose();
            cboInventoryReportDisplayNumberOfRows = new wijmo.input.ComboBox('#cboInventoryReportDisplayNumberOfRows', {
                isEditable: false,
                itemsSource: rowsObservableArray,
                displayMemberPath: "rowString",
                selectedValuePath: "rowNumber",
                selectedValue: 50,
                onSelectedIndexChanged: function () {
                    NProgress.start();

                    setTimeout(function () {
                        var numberOfRows = cboInventoryReportDisplayNumberOfRows.selectedValue;
                        inventoryReportCollectionView.pageSize = parseInt(numberOfRows);
                        inventoryReportCollectionView.refresh();
                        inventoryReportFlexGrid.refresh();

                        NProgress.done();
                    }, 300);
                }
            });

            if (!isCboInventoryReportCompanySelected) {
                createInventoryReportFlexGrid();
            } else {
                refreshInventoryReportFlexGrid();
                createCboStockCountListFilter();
            }
        }

        // =========================
        // Get Inventory Report Data
        // =========================
        function getInventoryReportData() {
            var inventoryReports = new wijmo.collections.ObservableArray;
            if (cboInventoryReportCompanyFilter.selectedValue != null) {
                var itemId = cboInventoryReportItemDescriptionFilter.selectedValue;
                var companyId = cboInventoryReportCompanyFilter.selectedValue;

                $.ajax({
                    url: '/api/inventoryReportItem/list/' + itemId + '/' + companyId,
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    success: function (inventoryReportResult) {
                        var totalAllAmount = 0;
                        var totalVarianceAmount = 0;

                        if (inventoryReportResult != null) {
                            if (inventoryReportResult.length > 0) {
                                for (i = 0; i < inventoryReportResult.length; i++) {
                                    var itemId = inventoryReportResult[i]["ArticleId"];

                                    var totalAmount = inventoryReportResult[i]["Cost"] * inventoryReportResult[i]["EndQuantity"];
                                    var quantityVariance = inventoryReportResult[i]["EndQuantity"] - 0;
                                    var varianceAmount = inventoryReportResult[i]["Cost"] * quantityVariance;

                                    var articleLink = "";

                                    inventoryReports.push({
                                        Branch: inventoryReportResult[i]["Branch"],
                                        ArticleId: inventoryReportResult[i]["ArticleId"],
                                        BtnDetail: "<a href='" + articleLink + "' class='btn btn-primary btn-xs btn-block' style='font-size: 7px;'>SC</a>",
                                        ManualArticleCode: inventoryReportResult[i]["ManualArticleCode"],
                                        ManualArticleOldCode: inventoryReportResult[i]["ManualArticleOldCode"],
                                        Article: inventoryReportResult[i]["Article"],
                                        ArticleForCSV: inventoryReportResult[i]["Article"],
                                        InventoryCode: inventoryReportResult[i]["InventoryCode"],
                                        Cost: inventoryReportResult[i]["Cost"],
                                        CostDisplay: parseFloat(inventoryReportResult[i]["Cost"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                        UnitId: inventoryReportResult[i]["UnitId"],
                                        Unit: inventoryReportResult[i]["Unit"],
                                        BegQuantity: inventoryReportResult[i]["BegQuantity"],
                                        BegQuantityDisplay: parseFloat(inventoryReportResult[i]["BegQuantity"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                        InQuantity: inventoryReportResult[i]["InQuantity"],
                                        InQuantityDisplay: parseFloat(inventoryReportResult[i]["InQuantity"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                        OutQuantity: inventoryReportResult[i]["OutQuantity"],
                                        OutQuantityDisplay: parseFloat(inventoryReportResult[i]["OutQuantity"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                        EndQuantity: inventoryReportResult[i]["EndQuantity"],
                                        EndQuantityDisplay: parseFloat(inventoryReportResult[i]["EndQuantity"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                        Amount: inventoryReportResult[i]["Amount"],
                                        AmountDisplay: parseFloat(inventoryReportResult[i]["Amount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                        TotalAmount: totalAmount,
                                        TotalAmountDisplay: parseFloat(totalAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                        QuantityVariance: quantityVariance,
                                        QuantityVarianceDisplay: parseFloat(quantityVariance).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                        VarianceAmount: varianceAmount,
                                        VarianceAmountDisplay: parseFloat(varianceAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                        Count: 0,
                                        CountDisplay: parseFloat(0).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                        Variance: 0,
                                        VarianceDisplay: parseFloat(0).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                        Category: inventoryReportResult[i]["Category"],
                                        Price: inventoryReportResult[i]["Price"],
                                        PriceDisplay: parseFloat(inventoryReportResult[i]["Price"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")
                                    });

                                    totalAllAmount += totalAmount;
                                    totalVarianceAmount += varianceAmount;
                                }
                            }
                        }

                        document.getElementById("totalAmount").value = parseFloat(totalAllAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        NProgress.done();
                    }
                });
            } else {
                document.getElementById("totalAmount").value = parseFloat(0).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                NProgress.done();
            }

            return inventoryReports;
        }

        // =================================
        // Create Inventory Report Flex Grid
        // =================================
        function createInventoryReportFlexGrid() {
            inventoryReportCollectionView = new wijmo.collections.CollectionView(getInventoryReportData());
            inventoryReportCollectionView.canFilter = true;
            inventoryReportCollectionView.pageSize = cboInventoryReportDisplayNumberOfRows.selectedValue;

            var filterText = '';
            $('#inpInventoryReportSearchFilter').keyup(function () {
                filterText = this.value.toLowerCase();
                inventoryReportCollectionView.refresh();
            });

            inventoryReportCollectionView.filter = function (item) {
                return !filterText || (item.Branch.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.InventoryCode.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Unit.toLowerCase().indexOf(filterText) > -1);
            }

            inventoryReportCollectionView.collectionChanged.addHandler(function (sender, args) {
                updateInventoryReportNavigationButtons();
            });

            inventoryReportFlexGrid = new wijmo.grid.FlexGrid('#inventoryReportFlexGrid');
            inventoryReportFlexGrid.initialize({
                columns: [
                    {
                        "header": "SC",
                        "binding": "BtnDetail",
                        "allowSorting": true,
                        "width": "0.7*",
                        "isContentHtml": true
                    },
                    {
                        "header": "Branch",
                        "binding": "Branch",
                        "allowSorting": true,
                        "width": "1.5*"
                    },
                    {
                        "header": "Code",
                        "binding": "InventoryCode",
                        "allowSorting": true,
                        "width": "1.7*"
                    },
                    {
                        "header": "Unit",
                        "binding": "Unit",
                        "allowSorting": true,
                        "width": "0.6*"
                    },
                    {
                        "header": "Price",
                        "binding": "PriceDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": "*"
                    },
                    {
                        "header": "Cost",
                        "binding": "CostDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": "*"
                    },
                    {
                        "header": "Beg",
                        "binding": "BegQuantityDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": "*"
                    },
                    {
                        "header": "In",
                        "binding": "InQuantityDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": "*"
                    },
                    {
                        "header": "Out",
                        "binding": "OutQuantityDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": "*"
                    },
                    {
                        "header": "End",
                        "binding": "EndQuantityDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": "*"
                    },
                    {
                        "header": "Count",
                        "binding": "CountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": "*"
                    },
                    {
                        "header": "Variance",
                        "binding": "VarianceDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": "*"
                    },
                    {
                        "header": "Amount",
                        "binding": "TotalAmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": "*"
                    }
                ],
                autoGenerateColumns: false,
                itemsSource: inventoryReportCollectionView,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            inventoryReportFlexGrid.trackChanges = true;

            var hr = new wijmo.grid.Row();
            inventoryReportFlexGrid.allowMerging = wijmo.grid.AllowMerging.AllHeaders;
            inventoryReportFlexGrid.columnHeaders.rows.push(hr);
            inventoryReportFlexGrid.columnHeaders.rows[0].allowMerging = true;

            inventoryReportFlexGrid.columnHeaders.columns[0].allowMerging = true;
            inventoryReportFlexGrid.columnHeaders.setCellData(0, 0, 'SC');

            inventoryReportFlexGrid.columnHeaders.columns[1].allowMerging = true;
            inventoryReportFlexGrid.columnHeaders.setCellData(0, 1, 'Branch');

            inventoryReportFlexGrid.columnHeaders.columns[2].allowMerging = true;
            inventoryReportFlexGrid.columnHeaders.setCellData(0, 2, 'Code');

            inventoryReportFlexGrid.columnHeaders.columns[3].allowMerging = true;
            inventoryReportFlexGrid.columnHeaders.setCellData(0, 3, 'Unit');

            inventoryReportFlexGrid.columnHeaders.columns[4].allowMerging = true;
            inventoryReportFlexGrid.columnHeaders.setCellData(0, 4, 'Price');

            inventoryReportFlexGrid.columnHeaders.columns[5].allowMerging = true;
            inventoryReportFlexGrid.columnHeaders.setCellData(0, 5, 'Cost');

            for (var columnBasicUnitConversion = 6; columnBasicUnitConversion <= 10; columnBasicUnitConversion++) {
                inventoryReportFlexGrid.columnHeaders.setCellData(0, columnBasicUnitConversion, 'Quantity');
            }

            inventoryReportFlexGrid.columnHeaders.columns[11].allowMerging = true;
            inventoryReportFlexGrid.columnHeaders.setCellData(0, 11, 'Variance');

            inventoryReportFlexGrid.columnHeaders.columns[12].allowMerging = true;
            inventoryReportFlexGrid.columnHeaders.setCellData(0, 12, 'Amount');

            updateInventoryReportNavigationButtons();

            btnInventoryReportMoveToFirstPageGrid.addEventListener('click', function () {
                inventoryReportCollectionView.moveToFirstPage();
                inventoryReportCurrentPageIndex = inventoryReportCollectionView.pageIndex + 1;
                updateInventoryReportNavigationButtons();
            });

            btnInventoryReportMoveToPreviousPageGrid.addEventListener('click', function () {
                inventoryReportCollectionView.moveToPreviousPage();
                inventoryReportCurrentPageIndex = inventoryReportCollectionView.pageIndex + 1;
                updateInventoryReportNavigationButtons();
            });

            btnInventoryReportMoveToNextPageGrid.addEventListener('click', function () {
                inventoryReportCollectionView.moveToNextPage();
                inventoryReportCurrentPageIndex = inventoryReportCollectionView.pageIndex + 1;
                updateInventoryReportNavigationButtons();
            });

            btnInventoryReportMoveToLastPageGrid.addEventListener('click', function () {
                inventoryReportCollectionView.moveToLastPage();
                inventoryReportCurrentPageIndex = inventoryReportCollectionView.pageIndex + 1;
                updateInventoryReportNavigationButtons();
            });
        }

        // ==========================================
        // Update Inventory Report Navigation Buttons
        // ==========================================
        function updateInventoryReportNavigationButtons() {
            if (inventoryReportCollectionView.pageSize <= 0) {
                document.getElementById('btnInventoryReportNavigationPageGrid').style.display = 'none';
                return;
            }
            document.getElementById('btnInventoryReportNavigationPageGrid').style.display = 'block';
            if (inventoryReportCollectionView.pageIndex === 0) {
                btnInventoryReportMoveToFirstPageGrid.setAttribute('disabled', 'disabled');
                btnInventoryReportMoveToPreviousPageGrid.setAttribute('disabled', 'disabled');
                btnInventoryReportMoveToNextPageGrid.removeAttribute('disabled');
                btnInventoryReportMoveToLastPageGrid.removeAttribute('disabled');
            } else if (inventoryReportCollectionView.pageIndex === (inventoryReportCollectionView.pageCount - 1)) {
                btnInventoryReportMoveToFirstPageGrid.removeAttribute('disabled');
                btnInventoryReportMoveToPreviousPageGrid.removeAttribute('disabled');
                btnInventoryReportMoveToLastPageGrid.setAttribute('disabled', 'disabled');
                btnInventoryReportMoveToNextPageGrid.setAttribute('disabled', 'disabled');
            } else {
                btnInventoryReportMoveToFirstPageGrid.removeAttribute('disabled');
                btnInventoryReportMoveToPreviousPageGrid.removeAttribute('disabled');
                btnInventoryReportMoveToNextPageGrid.removeAttribute('disabled');
                btnInventoryReportMoveToLastPageGrid.removeAttribute('disabled');
            }
            btnInventoryReportCurrentPageGrid.innerHTML = (inventoryReportCollectionView.pageIndex + 1) + ' / ' + inventoryReportCollectionView.pageCount;
        }

        // =================
        // Refresh Flex Grid
        // =================
        function refreshInventoryReportFlexGrid() {
            inventoryReportCollectionView = new wijmo.collections.CollectionView(getInventoryReportData());
            inventoryReportCollectionView.canFilter = true;
            inventoryReportCollectionView.pageSize = cboInventoryReportDisplayNumberOfRows.selectedValue;

            var filterText = '';
            $('#inpInventoryReportSearchFilter').keyup(function () {
                filterText = this.value.toLowerCase();
                inventoryReportCollectionView.refresh();
            });

            inventoryReportCollectionView.filter = function (item) {
                return !filterText || (item.Branch.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.InventoryCode.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Unit.toLowerCase().indexOf(filterText) > -1);
            }

            inventoryReportCollectionView.collectionChanged.addHandler(function (sender, args) {
                updateInventoryReportNavigationButtons();
            });

            inventoryReportFlexGrid.itemsSource = inventoryReportCollectionView;
            inventoryReportFlexGrid.trackChanges = true;
        }

        // ============
        // Download CSV
        // ============
        function btnInventoryReportCSVOnclick() {
            var CSV = '';
            var inventoryReport = [];
            var fileName = 'InventoryReport.CSV';

            inventoryReportCollectionView.moveToFirstPage();

            for (var p = 1; p <= inventoryReportCollectionView.pageCount; p++) {
                for (i = 0; i < inventoryReportCollectionView.items.length; i++) {
                    inventoryReport.push({
                        Branch: inventoryReportCollectionView.items[i].Branch.replace(/["']/g, ""),
                        InventoryCode: inventoryReportCollectionView.items[i].InventoryCode.replace(/["']/g, ""),
                        ManualArticleCode: inventoryReportCollectionView.items[i].ManualArticleCode.replace(/["']/g, ""),
                        ManualArticleOldCode: inventoryReportCollectionView.items[i].ManualArticleOldCode.replace(/["']/g, ""),
                        Article: inventoryReportCollectionView.items[i].ArticleForCSV.replace(/["']/g, ""),
                        Category: inventoryReportCollectionView.items[i].Category.replace(/["']/g, ""),
                        Unit: inventoryReportCollectionView.items[i].Unit.replace(/["']/g, ""),
                        Price: inventoryReportCollectionView.items[i].Price,
                        Cost: inventoryReportCollectionView.items[i].Cost,
                        BegQuantity: inventoryReportCollectionView.items[i].BegQuantity,
                        InQuantity: inventoryReportCollectionView.items[i].InQuantity,
                        OutQuantity: inventoryReportCollectionView.items[i].OutQuantity,
                        EndQuantity: inventoryReportCollectionView.items[i].EndQuantity,
                        CountQuantity: inventoryReportCollectionView.items[i].Count,
                        Variance: inventoryReportCollectionView.items[i].Variance,
                        TotalAmount: inventoryReportCollectionView.items[i].TotalAmount
                    });
                }

                inventoryReportCollectionView.moveToNextPage();
                if (p == inventoryReportCollectionView.pageCount) {
                    inventoryReportCollectionView.moveToPage(inventoryReportCurrentPageIndex - 1);
                }
            }

            var Headers = [];
            Headers.push({
                Branch: "Branch",
                InventoryCode: "Inventory Code",
                ManualArticleCode: "Barcode",
                ManualArticleOldCode: "SKU Code",
                Article: "Item",
                Category: "Category",
                Unit: "Unit",
                Price: "Price",
                Cost: "Cost",
                BegQuantity: "Beg Quantity",
                InQuantity: "In Quantity",
                OutQuantity: "Out Quantity",
                EndQuantity: "End Quantity",
                CountQuantity: "Count Quantity",
                Variance: "Variance",
                TotalAmount: "Total Amount"
            });

            var header = '';
            for (var b in Headers[0]) {
                header += '"' + Headers[0][b] + '",';
            }

            CSV = header + '\r\n';
            for (var i = 0; i < inventoryReport.length; i++) {
                var row = '';
                for (var a in inventoryReport[i]) {
                    row += '"' + inventoryReport[i][a] + '",';
                }

                row.slice(0, row.length - 1);
                CSV += row + '\r\n';
            }

            if (CSV == '') {
                toastr.error("No data.");
            } else {
                var link = document.createElement("a");
                if (link.download !== undefined) {
                    var blob = new Blob([CSV], { type: 'text/csv;charset=utf-8;' });
                    var url = URL.createObjectURL(blob);
                    link.setAttribute("href", url);
                    link.setAttribute("download", fileName);
                    link.style = "visibility:hidden";
                }

                if (navigator.msSaveBlob) {
                    link.addEventListener("click", function (event) {
                        var blob = new Blob([CSV], {
                            "type": "text/csv;charset=utf-8;"
                        });
                        navigator.msSaveBlob(blob, fileName);
                    }, false);
                }

                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);

                toastr.success("Dowload successful.");
            }
        }

        // =====================
        // Preview and Print PDF
        // =====================
        function btnInventoryReportPDFOnclick() {
            if (cboInventoryReportCompanyFilter.selectedValue != null) {
                if (cboInventoryReportBranchFilter.selectedValue != null) {
                    var startDate = cboInventoryReportStartDateFilter.value.toLocaleDateString().replace(/\//g, '-');
                    var endDate = cboInventoryReportEndDateFilter.value.toLocaleDateString().replace(/\//g, '-');
                    var companyId = cboInventoryReportCompanyFilter.selectedValue;
                    var branchId = cboInventoryReportBranchFilter.selectedValue;

                    window.location.href = '/RepInventoryReport/InventoryReport?StartDate=' + startDate + '&EndDate=' + endDate + '&CompanyId=' + companyId + '&BranchId=' + branchId;
                } else {
                    toastr.error("Lacking Information");
                }
            } else {
                toastr.error("Lacking Information");
            }
        }

        // ============
        // On Load Page
        // ============
        $(document).ready(function () {
            createCboItemFilter();
        });
    </script>
    <script type="text/javascript">
        // =================
        // User Branch Combo
        // =================
        var cboUserBranches = new wijmo.input.ComboBox('#cboUserBranches');

        // =========================
        // Get Current User Branches
        // =========================
        function getUserBranches() {
            $("#loadingUserBranches").show();
            document.getElementById("loadingUserBranches").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#userBranchContent").hide();

            $('#userBranchesModal').modal({ show: true, backdrop: 'static' });

            document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
            $("#updateUserBranch").prop("disabled", false);
            $("#closeUserBranch").prop("disabled", false);

            var userBranchesObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/userBranch/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (userBranchesResults) {
                    if (userBranchesResults.length > 0) {
                        for (i = 0; i < userBranchesResults.length; i++) {
                            userBranchesObservableArray.push({
                                BranchId: userBranchesResults[i]["BranchId"],
                                Branch: userBranchesResults[i]["Branch"]
                            });
                        }
                    }

                    var currentBranch = "@ViewData["BranchId"]";
                    cboUserBranches.dispose();
                    cboUserBranches = new wijmo.input.ComboBox('#cboUserBranches', {
                        isEditable: false,
                        placeholder: "Select Branches",
                        itemsSource: userBranchesObservableArray,
                        displayMemberPath: "Branch",
                        selectedValuePath: "BranchId",
                        selectedValue: currentBranch
                    });

                    setTimeout(function () {
                        $("#loadingUserBranches").hide();
                        $("#userBranchContent").show();
                    }, 500)
                }
            });
        }

        // ==========================
        // Update Current User Branch
        // ==========================
        function updateUserBranchOnclick() {
            document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Updating";
            $("#updateUserBranch").prop("disabled", true);
            $("#closeUserBranch").prop("disabled", true);

            var userBranchObject = new Object();
            userBranchObject.BranchId = cboUserBranches.selectedValue;
            var userBranchData = JSON.stringify(userBranchObject);

            $.ajax({
                type: "PUT",
                url: '/api/userBranch/update',
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: userBranchData,
                statusCode: {
                    200: function () {
                        toastr.success("Update Successful");
                        window.setTimeout(function () {
                            location.reload()
                        }, 1000);
                    },
                    404: function () {
                        toastr.error("Not Found");
                        document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
                        $("#updateUserBranch").prop("disabled", false);
                        $("#closeUserBranch").prop("disabled", false);
                    },
                    500: function () {
                        toastr.error("Bad Request");
                        document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
                        $("#updateUserBranch").prop("disabled", false);
                        $("#closeUserBranch").prop("disabled", false);
                    }
                }
            });
        }
    </script>
    <script type="text/javascript">
        // ======================
        // Side Bar Menu Settings
        // ======================
        var slideLeft = new Menu({
            wrapper: '#o-wrapper',
            type: 'slide-left',
            menuOpenerClass: '.c-button',
            maskId: '#c-mask'
        });

        var slideLeftBtn = document.querySelector('#c-button--slide-left');

        slideLeftBtn.addEventListener('click', function (e) {
            e.preventDefault;
            slideLeft.open();
        });
    </script>
</body>
</html>