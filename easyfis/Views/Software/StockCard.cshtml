<!DOCTYPE html>
<html>
<head>
    <!-- Meta -->
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">

    <!-- Title of the Page -->
    <link rel="shortcut icon" href="~/Images/icon/easyfislogomini.ico">
    <title>Stock Card</title>

    <!-- CSS StyleSheets-->
    @Styles.Render("~/Content/Software-css")
</head>
<body class="">

    <div id="o-wrapper" class="o-wrapper">
        <main class="o-content">
            @Html.Partial("_SoftwareHeader")
            <section class="content-header">
                <div class="container">
                    <h3>
                        Stock Card 
                    </h3>
                    <p>
                        <i class="fa fa-building-o fa-fw"></i> &nbsp; @ViewData["Company"] <br />
                        <i class="fa fa-home fa-fw"></i> &nbsp; <a href="#" onclick="getUserBranches()" style="color: white;">@ViewData["Branch"]</a>
                    </p>
                </div>
            </section>
            <section class="container">
                <div class="panel panel-default">
                    <div class="panel-heading">
                        <table style="width: 100%" border="0">
                            <tr>
                                <td style="width: 59%">
                                    <div class="input-group ">
                                        <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                        <input type="text" class="form-control " id="InputFilter" placeholder="Search">
                                    </div>
                                </td>
                                <td style="width: 1%"></td>
                                <td style="width: 40%" align="right">
                                    <button onclick="InventoryStockCardCSV_OnClick()" class="btn btn-primary "><i class="fa fa-file-excel-o" aria-hidden="true"></i> CSV</button>
                                    <button onclick="InventoryStockCardPDF_OnClick()" class="btn btn-primary "><i class="fa fa-print"></i> Print</button>
                                    <a href="/Software/InventoryReport" class="btn btn-danger "><i class="fa fa-close"></i> Close</a>
                                </td>
                            </tr>
                        </table>
                    </div>
                    <div class="panel-heading">
                        <table style="width: 100%" border="0">
                            <tr>
                                <td style="width: 59%">
                                    <div class="input-group ">
                                        <span class="input-group-addon">Date:</span>
                                        <input type="text" class="form-control " id="inventoryDate" placeholder="date" disabled>
                                    </div>
                                </td>
                                <td style="width: 1%"></td>
                                <td style="width: 20%" align="right"></td>
                                <td style="width: 20%"></td>
                            </tr>
                        </table>
                    </div>
                    <div class="panel-body">
                        <div class="row">
                            <div class="col-md-6">
                                <table class="table table-responsive table-bordered">
                                    <tr>
                                        <td align="right">
                                            <b>Branch: </b>
                                        </td>
                                        <td style="padding-left: 10px">
                                            <span id="branchTitle">NA</span>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td align="right">
                                            <b>Item: </b>
                                        </td>
                                        <td style="padding-left: 10px">
                                            <span id="itemTitle">NA</span>
                                        </td>
                                    </tr>
                                </table>
                            </div>
                            <div class="col-md-6">
                            </div>
                        </div>
                        <div id="stockCardGrid" class="grid"></div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6"></div>
                    <div class="col-md-6">
                        <table class="table table-responsive table-bordered">
                            <tr>
                                <td align="right">
                                    <b>Total Quantity: </b>
                                </td>
                                <td style="padding-left: 10px" align="right">
                                    <span id="totalEnd">NA</span>
                                </td>
                            </tr>
                            <tr>
                                <td align="right">
                                    <b>Total Amount: </b>
                                </td>
                                <td style="padding-left: 10px" align="right">
                                    <span id="totalAmount">NA</span>
                                </td>
                            </tr>
                        </table>
                        <hr />
                    </div>
                </div>
            </section>
            @Html.Partial("_SoftwareFooter")
        </main>
    </div>
    <div id="c-mask" class="c-mask"></div><!-- /c-mask -->
    @Scripts.Render("~/Scripts/Software-js")
    <script type="text/javascript">
        var stockCardGrid;

        function getParam(name) {
            name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
            var regexS = "[\\?&]" + name + "=([^&#]*)";
            var regex = new RegExp(regexS);
            var results = regex.exec(window.location.href);
            if (results == null)
                return "";
            else
                return results[1];
        }

        function getStockCard() {
            NProgress.start();
            var stockCards = new wijmo.collections.ObservableArray;
            document.getElementById("inventoryDate").value = "Date from " + getParam("StartDate") + " to " + getParam("EndDate");
            $.ajax({
                url: '/api/stockCard/list/' + getParam("StartDate") + "/" + getParam("EndDate") + "/" + getParam("BranchId") + "/" + getParam("ItemId"),
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (Results) {
                    if (Results.length > 0) {
                        var totalBeg = 0;
                        var totalIn = 0;
                        var totalOut = 0;
                        var totalEnd = 0;
                        var totalAmount = 0;

                        for (i = 0; i < Results.length; i++) {
                            document.getElementById("branchTitle").innerHTML = Results[i]["Branch"];
                            document.getElementById("itemTitle").innerHTML = Results[i]["Article"];

                            var docRef;
                            var docRefLink;

                            if (Results[i]["RRId"] != null) {
                                docRef = "RR-" + Results[i]["BranchCode"] + "-" + Results[i]["RRNumber"];
                                docRefLink = "/Software/ReceivingReceiptDetail?ReceivingReceiptId=" + Results[i]["RRId"];
                            } else if (Results[i]["SIId"] != null) {
                                docRef = "SI-" + Results[i]["BranchCode"] + "-" + Results[i]["SINumber"];
                                docRefLink = "/Software/SalesDetail?SalesId=" + Results[i]["SIId"];
                            } else if (Results[i]["INId"] != null) {
                                docRef = "IN-" + Results[i]["BranchCode"] + "-" + Results[i]["INNumber"];
                                docRefLink = "/Software/StockInDetail?StockInId=" + Results[i]["INId"];
                            } else if (Results[i]["OTId"] != null) {
                                docRef = "OT-" + Results[i]["BranchCode"] + "-" + Results[i]["OTNumber"];
                                docRefLink = "/Software/StockOutDetail?StockOutId=" + Results[i]["OTId"];
                            } else if (Results[i]["STId"] != null) {
                                docRef = "ST-" + Results[i]["BranchCode"] + "-" + Results[i]["STNumber"];
                                docRefLink = "/Software/StockTransferDetail?StockTransferId=" + Results[i]["STId"];
                            } else {
                                docRef = "";
                                docRefLink = "#";
                            }

                            stockCards.push({
                                Id: Results[i]["Id"],
                                BranchId: Results[i]["BranchId"],
                                Branch: Results[i]["Branch"],
                                BranchCode: Results[i]["BranchCode"],
                                DocumentReference: "<a href='" + docRefLink + "' class='btn btn-default btn-xs btn-block'>" + docRef + " </a>",
                                DocumentReferenceValue: docRef,
                                InventoryDate: Results[i]["InventoryDate"],
                                ArticleId: Results[i]["ArticleId"],
                                Article: Results[i]["Article"],
                                ArticleInventoryId: Results[i]["ArticleInventoryId"],
                                ArticleInventoryCode: Results[i]["ArticleInventoryCode"],
                                RRId: Results[i]["RRId"],
                                RRNumber: Results[i]["RRNumber"],
                                SIId: Results[i]["SIId"],
                                SINumber: Results[i]["SINumber"],
                                INId: Results[i]["INId"],
                                INNumber: Results[i]["INNumber"],
                                OTId: Results[i]["OTId"],
                                OTNumber: Results[i]["OTNumber"],
                                STId: Results[i]["STId"],
                                STNumber: Results[i]["STNumber"],
                                QuantityIn: Results[i]["QuantityIn"],
                                Quantity: Results[i]["Quantity"],
                                QuantityOut: Results[i]["QuantityOut"],
                                Amount: Results[i]["Amount"],
                                Particulars: Results[i]["Particulars"],
                                Cost: Results[i]["Cost"],
                                Unit: Results[i]["Unit"],
                                Beg: "0.00",
                            });


                            totalBeg = totalBeg + 0;
                            totalIn = totalBeg + Results[i]["QuantityIn"];
                            totalOut = totalOut + Results[i]["QuantityOut"];
                            totalEnd = totalEnd + Results[i]["Quantity"];
                            totalAmount = totalAmount + Results[i]["Amount"];

                            document.getElementById("totalEnd").innerHTML = (Math.round(totalEnd * 100) / 100).toLocaleString();
                            document.getElementById("totalAmount").innerHTML = (Math.round(totalAmount * 100) / 100).toLocaleString();
                        }
                    }
                    NProgress.done();
                }
            }).fail(function (xhr, textStatus, err) {
                alert(err);
            });

            return stockCards;
        }

        function InventoryStockCardPDF_OnClick() {
            window.location.href = '/RepStockCard/StockCard?StartDate=' + getParam("StartDate") + '&EndDate=' + getParam("EndDate") + '&BranchId=' + getParam("BranchId") + '&ItemId=' + getParam("ItemId");
        }
        var stockCards;

        function InventoryStockCardCSV_OnClick() {

            var CSV = '';
            var stockCard = [];
            var fileName = 'StockCard.CSV';

            for (i = 0; i < stockCards.items.length; i++) {
                stockCard.push({
                    InventoryDate: stockCards.items[i].InventoryDate,
                    DocumentReferenceValue: stockCards.items[i].DocumentReferenceValue,
                    Beg: stockCards.items[i].Beg,
                    QuantityIn: stockCards.items[i].QuantityIn,
                    QuantityOut: stockCards.items[i].QuantityOut,
                    Quantity: stockCards.items[i].Quantity,
                    Unit: stockCards.items[i].Unit,
                    Cost: stockCards.items[i].Cost,
                    Amount: stockCards.items[i].Amount,

                });
            }

            //for (var i = 0; i < symbols.length; i++) {
            //    CSV += '"' + symbols[i].AccountCode + '"\r\n';
            //}

            var Headers = [];
            Headers.push({
                InventoryDate: "Date",
                DocumentReferenceValue: "Document",
                Beg: "Beg",
                QuantityIn: "In",
                QuantityOut: "Out",
                Quantity: "End",
                Unit: "Unit",
                Cost: "Cost",
                Amount: "Amount",

            });

            var header = '';
            // Rows
            for (var b in Headers[0]) {
                header += '"' + Headers[0][b] + '",';
            }



            CSV = header + '\r\n';
            for (var i = 0; i < stockCard.length; i++) {
                var row = '';
                for (var a in stockCard[i]) {
                    row += '"' + stockCard[i][a] + '",';
                }

                row.slice(0, row.length - 1);
                CSV += row + '\r\n';
            }


            if (CSV == '') {
                toastr.error("No data.");
            } else {
                var link = document.createElement("a");

                if (link.download !== undefined) {
                    var blob = new Blob([CSV], { type: 'text/csv;charset=utf-8;' });
                    var url = URL.createObjectURL(blob);
                    link.setAttribute("href", url);
                    link.setAttribute("download", fileName);
                    link.style = "visibility:hidden";
                }

                if (navigator.msSaveBlob) {
                    link.addEventListener("click", function (event) {
                        var blob = new Blob([CSV], {
                            "type": "text/csv;charset=utf-8;"
                        });
                        navigator.msSaveBlob(blob, fileName);
                    }, false);
                }

                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);

                toastr.success("Dowload successful.");
            }
        }

        $(document).ready(function () {
            stockCards = new wijmo.collections.CollectionView(getStockCard());
            stockCards.canFilter = true;

            var filterText = '';
            $('#InputFilter').keyup(function () {
                filterText = this.value.toLowerCase();
                stockCards.refresh();
            });
            stockCards.filter = function (item) {
                return !filterText || (item.DocumentReferenceValue.toLowerCase().indexOf(filterText) > -1)

            }
            // Flex Grid
            stockCardGrid = new wijmo.grid.FlexGrid('#stockCardGrid');
            stockCardGrid.initialize({
                columns: [
                    {
                        "header": "Date",
                        "binding": "InventoryDate",
                        "allowSorting": true,
                        "width": 100
                    },
                    {
                        "header": "Document",
                        "binding": "DocumentReference",
                        "width": 200,
                        "allowResizing": false,
                        "allowSorting": false,
                        "isContentHtml": true
                    },
                    {
                        "header": "Beg",
                        "binding": "Beg",
                        "allowSorting": true,
                        "width": 150
                    },
                    {
                        "header": "In",
                        "binding": "QuantityIn",
                        "allowSorting": true,
                        "width": 150
                    },
                    {
                        "header": "Out",
                        "binding": "QuantityOut",
                        "allowSorting": true,
                        "width": 150
                    },
                    {
                        "header": "End",
                        "binding": "Quantity",
                        "allowSorting": true,
                        "width": 150
                    },
                    {
                        "header": "Unit",
                        "binding": "Unit",
                        "allowSorting": true,
                        "width": 120
                    },
                    {
                        "header": "Cost",
                        "binding": "Cost",
                        "allowSorting": true,
                        "width": 150
                    },
                    {
                        "header": "Amount",
                        "binding": "Amount",
                        "allowSorting": true,
                        "width": 150
                    }
                ],
                autoGenerateColumns: false,
                itemsSource: stockCards,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            stockCardGrid.trackChanges = true;

            var hr = new wijmo.grid.Row();
            stockCardGrid.allowMerging = wijmo.grid.AllowMerging.AllHeaders;
            stockCardGrid.columnHeaders.rows.push(hr);
            stockCardGrid.columnHeaders.rows[0].allowMerging = true;

            stockCardGrid.columnHeaders.columns[0].allowMerging = true;
            stockCardGrid.columnHeaders.setCellData(0, 0, 'Date');

            stockCardGrid.columnHeaders.columns[1].allowMerging = true;
            stockCardGrid.columnHeaders.setCellData(0, 1, 'Document');

            for (var columnBasicUnitConversion = 2; columnBasicUnitConversion <= 5; columnBasicUnitConversion++) {
                stockCardGrid.columnHeaders.setCellData(0, columnBasicUnitConversion, 'Quantity');
            }


            stockCardGrid.columnHeaders.columns[6].allowMerging = true;
            stockCardGrid.columnHeaders.setCellData(0, 6, 'Unit');

            stockCardGrid.columnHeaders.columns[7].allowMerging = true;
            stockCardGrid.columnHeaders.setCellData(0, 7, 'Cost');

            stockCardGrid.columnHeaders.columns[8].allowMerging = true;
            stockCardGrid.columnHeaders.setCellData(0, 8, 'Amount');

        });
    </script>
    <script type="text/javascript">
        var cboUserBranches = new wijmo.input.ComboBox('#cboUserBranches');
        function getUserBranches() {
            $("#loadingUserBranches").show();
            document.getElementById("loadingUserBranches").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#userBranchContent").hide();

            $('#userBranchesModal').modal({ show: true, backdrop: 'static' });

            document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
            $("#updateUserBranch").prop("disabled", false);
            $("#closeUserBranch").prop("disabled", false);

            var userBranchesObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/userBranch/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (userBranchesResults) {
                    if (userBranchesResults.length > 0) {
                        for (i = 0; i < userBranchesResults.length; i++) {
                            userBranchesObservableArray.push({
                                BranchId: userBranchesResults[i]["BranchId"],
                                Branch: userBranchesResults[i]["Branch"]
                            });
                        }
                    }

                    var currentBranch = "@ViewData["BranchId"]";
                    cboUserBranches.dispose();
                    cboUserBranches = new wijmo.input.ComboBox('#cboUserBranches', {
                        isEditable: false,
                        placeholder: "Select Branches",
                        itemsSource: userBranchesObservableArray,
                        displayMemberPath: "Branch",
                        selectedValuePath: "BranchId",
                        selectedValue: currentBranch
                    });

                    setTimeout(function () {
                        $("#loadingUserBranches").hide();
                        $("#userBranchContent").show();
                    }, 500)
                }
            });
        }

        function updateUserBranchOnclick() {
            document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Updating";
            $("#updateUserBranch").prop("disabled", true);
            $("#closeUserBranch").prop("disabled", true);

            var userBranchObject = new Object();
            userBranchObject.BranchId = cboUserBranches.selectedValue;
            var userBranchData = JSON.stringify(userBranchObject);

            $.ajax({
                type: "PUT",
                url: '/api/userBranch/update',
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: userBranchData,
                statusCode: {
                    200: function () {
                        toastr.success("Update Successful");
                        window.setTimeout(function () {
                            location.reload()
                        }, 1000);
                    },
                    404: function () {
                        toastr.error("Not Found");
                        document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
                        $("#updateUserBranch").prop("disabled", false);
                        $("#closeUserBranch").prop("disabled", false);
                    },
                    500: function () {
                        toastr.error("Bad Request");
                        document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
                        $("#updateUserBranch").prop("disabled", false);
                        $("#closeUserBranch").prop("disabled", false);
                    }
                }
            });
        }
    </script>
    <script type="text/javascript">
        var slideLeft = new Menu({
            wrapper: '#o-wrapper',
            type: 'slide-left',
            menuOpenerClass: '.c-button',
            maskId: '#c-mask'
        });

        var slideLeftBtn = document.querySelector('#c-button--slide-left');

        slideLeftBtn.addEventListener('click', function (e) {
            e.preventDefault;
            slideLeft.open();
        });
    </script>
</body>
</html>