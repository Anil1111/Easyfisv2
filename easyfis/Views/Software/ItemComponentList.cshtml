<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">
    <link rel="shortcut icon" href="~/Images/icon/easyfislogomini.ico">
    <title>Item Component List</title>

    @Styles.Render("~/Content/Software-css")
</head>
<body>
    <div id="o-wrapper" class="o-wrapper">
        <main class="o-content">
            @Html.Partial("_SoftwareHeader")

            <section class="content-header">
                <div class="container">
                    <h3>
                        Item Component List
                    </h3>
                    <p>
                        <i class="fa fa-building-o fa-fw"></i> &nbsp; @ViewData["Company"] <br />
                        <i class="fa fa-home fa-fw"></i> &nbsp; <a href="#" onclick="getUserBranches()" style="color: white;">@ViewData["Branch"]</a>
                    </p>
                </div>
            </section>
            <section class="container">
                <div class="panel panel-default">

                    <!--
                        ===============
                        Search / Filter
                        ===============
                    -->
                    <div class="panel-heading">
                        <table style="width: 100%" border="0">
                            <tr>
                                <td style="width: 49.5%">
                                    <div class="input-group">
                                        <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                        <input type="text" class="form-control" id="inpItemComponentListSearchFilter" placeholder="Search...">
                                    </div>
                                </td>
                                <td style="width: 1%"></td>
                                <td style="width: 24%">
                                    <div class="input-group">
                                        <span class="input-group-addon"><b><i class="fa fa-table"></i></b></span>
                                        <div class="comboBox-wide" id="cboItemComponentListDisplayNumberOfRows"></div>
                                    </div>
                                </td>
                                <td style="width: 1%"></td>
                                <td style="width: 24.5%" align="right">
                                    <button onclick="btnItemComponentListCSVOnclick()" id="btnItemComponentListCSV" class="btn btn-success"><i class="fa fa-file-excel-o" aria-hidden="true"></i> CSV</button>
                                    <button onclick="btnItemComponentListPDFOnclick()" id="btnItemComponentListPDF" class="btn btn-primary"><i class="fa fa-print"></i> Print</button>
                                    <a href="/Software/Inventory" class="btn btn-danger"><i class="fa fa-close"></i> Close</a>
                                </td>
                            </tr>
                        </table>
                    </div>

                    <!--
                        =================
                        Item Group Filter
                        =================
                    -->
                    <div class="panel-heading">
                        <table style="width: 100%" border="0">
                            <tr>
                                <td style="width: 49.5%">
                                    <div class="input-group ">
                                        <span class="input-group-addon"><b>Item Group</b></span>
                                        <div class="comboBox-wide" id="cboItemGroupFilter"></div>
                                    </div>
                                </td>
                                <td style="width: 50.5%"></td>
                            </tr>
                        </table>
                    </div>

                    <!--
                        =========
                        Flex Grid
                        =========
                    -->
                    <div class="panel-body">
                        <div id="itemComponentListFlexGrid" class="grid"></div>
                    </div>

                    <!--
                        ==================
                        Navigation Buttons
                        ==================
                    -->
                    <div class="panel-footer">
                        <div class="row">
                            <div class="btn-group col-md-7" id="itemCompoentnListNavigationPageGrid">
                                <button type="button" class="btn btn-default border-custom" id="btnItemComponentListMoveToFirstPageGrid">
                                    <span class="glyphicon glyphicon-fast-backward"></span>
                                </button>
                                <button type="button" class="btn btn-default border-custom" id="btnItemComponentListMoveToPreviousPageGrid">
                                    <span class="glyphicon glyphicon-step-backward"></span>
                                </button>
                                <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnItemComponentListCurrentPageGrid"></button>
                                <button type="button" class="btn btn-default border-custom" id="btnItemComponentListMoveToNextPageGrid">
                                    <span class="glyphicon glyphicon-step-forward"></span>
                                </button>
                                <button type="button" class="btn btn-default border-custom" id="btnItemComponentListMoveToLastPageGrid">
                                    <span class="glyphicon glyphicon-fast-forward"></span>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                <!--
                    ======
                    Totals
                    ======
                -->
                <div class="panel panel-default">
                    <div class="panel-body">
                        <div class="row">
                            <div class="col-md-6"></div>
                            <div class="col-md-6">
                                <dl class="dl-horizontal dl-custom">
                                    <dt>
                                        <b>Total Amount</b>
                                    </dt>
                                    <dd>
                                        <input type="text" class="form-control numberField" id="totalAmount" placeholder="0.00" disabled />
                                    </dd>
                                </dl>
                            </div>
                        </div>
                    </div>
                </div>
            </section>

            @Html.Partial("_SoftwareFooter")
        </main>
    </div>
    <div id="c-mask" class="c-mask"></div>

    @Scripts.Render("~/Scripts/Software-js")
    <script type="text/javascript">
        // =============================
        // Collection View and Flex Grid
        // =============================
        var itemComponentListCollectionView;
        var itemComponentListFlexGrid;
        var cboItemComponentListDisplayNumberOfRows = new wijmo.input.ComboBox('#cboItemComponentListDisplayNumberOfRows');

        // =================
        // Item Group Filter
        // =================
        var cboItemGroupFilter = new wijmo.input.ComboBox('#cboItemGroupFilter');
        var isCboItemGroupSelected = false;

        // ==================
        // Navigation Buttons
        // ==================
        var btnItemComponentListMoveToFirstPageGrid = document.getElementById('btnItemComponentListMoveToFirstPageGrid');
        var btnItemComponentListMoveToPreviousPageGrid = document.getElementById('btnItemComponentListMoveToPreviousPageGrid');
        var btnItemComponentListMoveToNextPageGrid = document.getElementById('btnItemComponentListMoveToNextPageGrid');
        var btnItemComponentListMoveToLastPageGrid = document.getElementById('btnItemComponentListMoveToLastPageGrid');
        var btnItemComponentListCurrentPageGrid = document.getElementById('btnItemComponentListCurrentPageGrid');
        var itemComponentListCurrentPageIndex = 0;

        // =======================
        // Get URL Parameter Value
        // =======================
        function getURLParameterValue(name) {
            name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");

            var regexS = "[\\?&]" + name + "=([^&#]*)";
            var regex = new RegExp(regexS);

            var results = regex.exec(window.location.href);
            if (results == null) {
                return "";
            } else {
                return results[1];
            }
        }

        // ==============================
        // Create Combo Item Group Filter
        // ==============================
        function createCboItemGroupFilter() {
            NProgress.start();

            var iItemGroupObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/itemComponentList/dropdown/list/itemGroup',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            iItemGroupObservableArray.push({
                                Id: results[i]["Id"],
                                ArticleGroup: results[i]["ArticleGroup"]
                            });
                        }
                    }

                    cboItemGroupFilter.dispose();
                    cboItemGroupFilter = new wijmo.input.ComboBox('#cboItemGroupFilter', {
                        isEditable: false,
                        itemsSource: iItemGroupObservableArray,
                        displayMemberPath: "ArticleGroup",
                        selectedValuePath: "Id",
                        selectedValue: getURLParameterValue("ItemGroupId"),
                        onSelectedIndexChanged: function () {
                            NProgress.start();
                            refreshItemComponentListFlexGrid();
                        }
                    });

                    createCboDisplayNumberOfRows();
                }
            });
        }

        // ===================================
        // Create Combo Display Number of Rows
        // ===================================
        function createCboDisplayNumberOfRows() {
            var rowsObservableArray = new wijmo.collections.ObservableArray();

            for (var i = 0; i <= 4; i++) {
                var rows = 0;
                var rowsString = "";

                if (i == 0) {
                    rows = 15;
                    rowsString = "Show 15 Rows";
                } else if (i == 1) {
                    rows = 50;
                    rowsString = "Show 50 Rows";
                } else if (i == 2) {
                    rows = 100;
                    rowsString = "Show 100 Rows";
                } else if (i == 3) {
                    rows = 150;
                    rowsString = "Show 150 Rows";
                } else {
                    rows = 200;
                    rowsString = "Show 200 Rows";
                }

                rowsObservableArray.push({
                    rowNumber: rows,
                    rowString: rowsString
                });
            }

            cboItemComponentListDisplayNumberOfRows.dispose();
            cboItemComponentListDisplayNumberOfRows = new wijmo.input.ComboBox('#cboItemComponentListDisplayNumberOfRows', {
                isEditable: false,
                itemsSource: rowsObservableArray,
                displayMemberPath: "rowString",
                selectedValuePath: "rowNumber",
                selectedValue: 50,
                onSelectedIndexChanged: function () {
                    NProgress.start();

                    setTimeout(function () {
                        var numberOfRows = cboItemComponentListDisplayNumberOfRows.selectedValue;
                        itemComponentListCollectionView.pageSize = parseInt(numberOfRows);
                        itemComponentListCollectionView.refresh();
                        itemComponentListFlexGrid.refresh();

                        NProgress.done();
                    }, 300);
                }
            });

            if (!isCboItemGroupSelected) {
                createItemComponentListFlexGrid();
            } else {
                refreshItemComponentListFlexGrid();
            }
        }

        // ============================
        // Get Item Component List Data
        // ============================
        function getItemComponentListData() {
            var itemComponentListObservableArray = new wijmo.collections.ObservableArray;
            if (cboItemGroupFilter.selectedValue != null) {
                var itemGroupId = cboItemGroupFilter.selectedValue;

                $.ajax({
                    url: '/api/itemComponentList/list/' + itemGroupId,
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    success: function (results) {
                        var totalAmount = 0;
                        if (results.length > 0) {
                            for (i = 0; i < results.length; i++) {

                                var docLink = "/Software/ItemDetail?id=" + results[i]["ArticleId"];
                                itemComponentListObservableArray.push({
                                    Id: results[i]["Id"],
                                    ArticleId: results[i]["ArticleId"],
                                    Article: results[i]["Article"],
                                    ArticleCodeForCSV: "Component-" + results[i]["ArticleCode"],
                                    ArticleBtn: "<a href='" + docLink + "' class='btn btn-primary btn-xs btn-block' style='text-align: left;'> " + results[i]["Article"] + "</a>",
                                    ManualArticleCodeForCSV: "Component-" + results[i]["ManualArticleCode"],
                                    ManualArticleCode: results[i]["ManualArticleCode"],
                                    ComponentArticleId: results[i]["ComponentArticleId"],
                                    ComponentArticle: results[i]["ComponentArticle"],
                                    ComponentManualArticleOldCode: results[i]["ComponentManualArticleOldCode"],
                                    Quantity: results[i]["Quantity"],
                                    QuantityDisplay: parseFloat(results[i]["Quantity"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                    Unit: results[i]["Unit"],
                                    Price: results[i]["Price"],
                                    PriceDisplay: parseFloat(results[i]["Price"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                    Cost: results[i]["Cost"],
                                    CostDisplay: parseFloat(results[i]["Cost"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                    AmountDisplay: parseFloat(results[i]["Quantity"] * results[i]["Cost"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")
                                });

                                totalAmount += results[i]["Quantity"] * results[i]["Cost"];
                            }
                        }

                        document.getElementById("totalAmount").value = parseFloat(totalAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        NProgress.done();
                    }
                });
            } else {
                document.getElementById("totalAmount").value = parseFloat(0).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                NProgress.done();
            }

            return itemComponentListObservableArray;
        }

        // ====================================
        // Create Item Component List Flex Grid
        // ====================================
        function createItemComponentListFlexGrid() {
            itemComponentListCollectionView = new wijmo.collections.CollectionView(getItemComponentListData());
            itemComponentListCollectionView.canFilter = true;
            itemComponentListCollectionView.pageSize = cboItemComponentListDisplayNumberOfRows.selectedValue;

            var filterText = '';
            $('#inpItemComponentListSearchFilter').keyup(function () {
                filterText = this.value.toLowerCase();
                itemComponentListCollectionView.refresh();
            });

            itemComponentListCollectionView.filter = function (item) {
                return !filterText || (item.Article.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.ManualArticleCode.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.ComponentManualArticleOldCode.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.ComponentArticle.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Unit.toLowerCase().indexOf(filterText) > -1);
            }

            itemComponentListCollectionView.collectionChanged.addHandler(function (sender, args) {
                updateItemComponentListNavigationButtons();
            });

            itemComponentListFlexGrid = new wijmo.grid.FlexGrid('#itemComponentListFlexGrid');
            itemComponentListFlexGrid.initialize({
                columns: [
                    {
                        "header": "Item",
                        "binding": "ArticleBtn",
                        "allowSorting": true,
                        "width": "2*",
                        "isContentHtml": true
                    },
                    {
                        "header": "Barcode",
                        "binding": "ManualArticleCode",
                        "allowSorting": true,
                        "width": "1.5*"
                    },
                    {
                        "header": "SKU Code",
                        "binding": "ComponentManualArticleOldCode",
                        "allowSorting": true,
                        "width": "1.5*"
                    },
                    {
                        "header": "Component",
                        "binding": "ComponentArticle",
                        "allowSorting": true,
                        "width": "2*"
                    },
                    {
                        "header": "Quantity",
                        "binding": "QuantityDisplay",
                        "align": "right",
                        "allowSorting": true,
                        "width": "1*"
                    },
                    {
                        "header": "Unit",
                        "binding": "Unit",
                        "allowSorting": true,
                        "width": "0.7*"
                    },
                    {
                        "header": "Cost",
                        "binding": "CostDisplay",
                        "align": "right",
                        "allowSorting": true,
                        "width": "1*"
                    },
                    {
                        "header": "Amount",
                        "binding": "AmountDisplay",
                        "align": "right",
                        "allowSorting": true,
                        "width": "1*"
                    }
                ],
                autoGenerateColumns: false,
                itemsSource: itemComponentListCollectionView,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            itemComponentListFlexGrid.trackChanges = true;

            updateItemComponentListNavigationButtons();

            btnItemComponentListMoveToFirstPageGrid.addEventListener('click', function () {
                itemComponentListCollectionView.moveToFirstPage();
                itemComponentListCurrentPageIndex = itemComponentListCollectionView.pageIndex + 1;
                updateItemComponentListNavigationButtons();
            });

            btnItemComponentListMoveToPreviousPageGrid.addEventListener('click', function () {
                itemComponentListCollectionView.moveToPreviousPage();
                itemComponentListCurrentPageIndex = itemComponentListCollectionView.pageIndex + 1;
                updateItemComponentListNavigationButtons();
            });

            btnItemComponentListMoveToNextPageGrid.addEventListener('click', function () {
                itemComponentListCollectionView.moveToNextPage();
                itemComponentListCurrentPageIndex = itemComponentListCollectionView.pageIndex + 1;
                updateItemComponentListNavigationButtons();
            });

            btnItemComponentListMoveToLastPageGrid.addEventListener('click', function () {
                itemComponentListCollectionView.moveToLastPage();
                itemComponentListCurrentPageIndex = itemComponentListCollectionView.pageIndex + 1;
                updateItemComponentListNavigationButtons();
            });
        }

        // =============================================
        // Update Item Component List Navigation Buttons
        // =============================================
        function updateItemComponentListNavigationButtons() {
            if (itemComponentListCollectionView.pageSize <= 0) {
                document.getElementById('itemCompoentnListNavigationPageGrid').style.display = 'none';
                return;
            }
            document.getElementById('itemCompoentnListNavigationPageGrid').style.display = 'block';
            if (itemComponentListCollectionView.pageIndex === 0) {
                btnItemComponentListMoveToFirstPageGrid.setAttribute('disabled', 'disabled');
                btnItemComponentListMoveToPreviousPageGrid.setAttribute('disabled', 'disabled');
                btnItemComponentListMoveToNextPageGrid.removeAttribute('disabled');
                btnItemComponentListMoveToLastPageGrid.removeAttribute('disabled');
            } else if (itemComponentListCollectionView.pageIndex === (itemComponentListCollectionView.pageCount - 1)) {
                btnItemComponentListMoveToFirstPageGrid.removeAttribute('disabled');
                btnItemComponentListMoveToPreviousPageGrid.removeAttribute('disabled');
                btnItemComponentListMoveToLastPageGrid.setAttribute('disabled', 'disabled');
                btnItemComponentListMoveToNextPageGrid.setAttribute('disabled', 'disabled');
            } else {
                btnItemComponentListMoveToFirstPageGrid.removeAttribute('disabled');
                btnItemComponentListMoveToPreviousPageGrid.removeAttribute('disabled');
                btnItemComponentListMoveToNextPageGrid.removeAttribute('disabled');
                btnItemComponentListMoveToLastPageGrid.removeAttribute('disabled');
            }
            btnItemComponentListCurrentPageGrid.innerHTML = (itemComponentListCollectionView.pageIndex + 1) + ' / ' + itemComponentListCollectionView.pageCount;
        }

        // =================
        // Refresh Flex Grid
        // =================
        function refreshItemComponentListFlexGrid() {
            itemComponentListCollectionView = new wijmo.collections.CollectionView(getItemComponentListData());
            itemComponentListCollectionView.canFilter = true;
            itemComponentListCollectionView.pageSize = cboItemComponentListDisplayNumberOfRows.selectedValue;

            var filterText = '';
            $('#inpItemComponentListSearchFilter').keyup(function () {
                filterText = this.value.toLowerCase();
                itemComponentListCollectionView.refresh();
            });

            itemComponentListCollectionView.filter = function (item) {
                return !filterText || (item.Article.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.ManualArticleCode.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.ComponentManualArticleOldCode.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.ComponentArticle.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Unit.toLowerCase().indexOf(filterText) > -1);
            }

            itemComponentListCollectionView.collectionChanged.addHandler(function (sender, args) {
                updateItemComponentListNavigationButtons();
            });

            itemComponentListFlexGrid.itemsSource = itemComponentListCollectionView;
            itemComponentListFlexGrid.trackChanges = true;
        }

        // ============
        // Download CSV
        // ============
        function btnItemComponentListCSVOnclick() {
            var CSV = '';
            var itemComponentList = [];
            var fileName = 'ItemComponentList.CSV';

            itemComponentListCollectionView.moveToFirstPage();

            for (var p = 1; p <= itemComponentListCollectionView.pageCount; p++) {
                for (i = 0; i < itemComponentListCollectionView.items.length; i++) {
                    itemComponentList.push({
                        Article: itemComponentListCollectionView.items[i].Article,
                        Barcode: itemComponentListCollectionView.items[i].ManualArticleCodeForCSV,
                        SKUCode: itemComponentListCollectionView.items[i].Quantity,
                        ComponentArticle: itemComponentListCollectionView.items[i].ComponentArticle,
                        Quantity: itemComponentListCollectionView.items[i].Quantity,
                        Unit: itemComponentListCollectionView.items[i].Unit,
                        Cost: itemComponentListCollectionView.items[i].Cost,
                        Price: itemComponentListCollectionView.items[i].Price,
                    });
                }

                itemComponentListCollectionView.moveToNextPage();
                if (p == itemComponentListCollectionView.pageCount) {
                    itemComponentListCollectionView.moveToPage(itemComponentListCurrentPageIndex - 1);
                }
            }

            var Headers = [];
            Headers.push({
                Article: "Item",
                Barcode: "Barcode",
                SKUCode: "SKU Code",
                ComponentArticle: "Component",
                Quantity: "Quantity",
                Unit: "Unit",
                Cost: "Cost",
                Price: "Price",
            });

            var header = '';
            for (var b in Headers[0]) {
                header += '"' + Headers[0][b] + '",';
            }

            CSV = header + '\r\n';
            for (var i = 0; i < itemComponentList.length; i++) {
                var row = '';
                for (var a in itemComponentList[i]) {
                    row += '"' + itemComponentList[i][a] + '",';
                }

                row.slice(0, row.length - 1);
                CSV += row + '\r\n';
            }

            if (CSV == '') {
                toastr.error("No data.");
            } else {
                var link = document.createElement("a");
                if (link.download !== undefined) {
                    var blob = new Blob([CSV], { type: 'text/csv;charset=utf-8;' });
                    var url = URL.createObjectURL(blob);
                    link.setAttribute("href", url);
                    link.setAttribute("download", fileName);
                    link.style = "visibility:hidden";
                }

                if (navigator.msSaveBlob) {
                    link.addEventListener("click", function (event) {
                        var blob = new Blob([CSV], {
                            "type": "text/csv;charset=utf-8;"
                        });
                        navigator.msSaveBlob(blob, fileName);
                    }, false);
                }

                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);

                toastr.success("Dowload successful.");
            }
        }

        // =====================
        // Preview and Print PDF
        // =====================
        function btnItemComponentListPDFOnclick() {
            if (cboItemGroupFilter.selectedValue != null) {
                var itemGroupId = cboItemGroupFilter.selectedValue;
                window.location.href = '/RepItemComponentList/ItemComponentList?itemGroupId=' + itemGroupId;
            } else {
                toastr.error("Lacking Information");
            }
        }

        // ============
        // On Load Page
        // ============
        $(document).ready(function () {
            createCboItemGroupFilter();
        });
    </script>
    <script type="text/javascript">
        // =================
        // User Branch Combo
        // =================
        var cboUserBranches = new wijmo.input.ComboBox('#cboUserBranches');

        // =========================
        // Get Current User Branches
        // =========================
        function getUserBranches() {
            $("#loadingUserBranches").show();
            document.getElementById("loadingUserBranches").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#userBranchContent").hide();

            $('#userBranchesModal').modal({ show: true, backdrop: 'static' });

            document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
            $("#updateUserBranch").prop("disabled", false);
            $("#closeUserBranch").prop("disabled", false);

            var userBranchesObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/userBranch/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (userBranchesResults) {
                    if (userBranchesResults.length > 0) {
                        for (i = 0; i < userBranchesResults.length; i++) {
                            userBranchesObservableArray.push({
                                BranchId: userBranchesResults[i]["BranchId"],
                                Branch: userBranchesResults[i]["Branch"]
                            });
                        }
                    }

                    var currentBranch = "@ViewData["BranchId"]";
                    cboUserBranches.dispose();
                    cboUserBranches = new wijmo.input.ComboBox('#cboUserBranches', {
                        isEditable: false,
                        placeholder: "Select Branches",
                        itemsSource: userBranchesObservableArray,
                        displayMemberPath: "Branch",
                        selectedValuePath: "BranchId",
                        selectedValue: currentBranch
                    });

                    setTimeout(function () {
                        $("#loadingUserBranches").hide();
                        $("#userBranchContent").show();
                    }, 500)
                }
            });
        }

        // ==========================
        // Update Current User Branch
        // ==========================
        function updateUserBranchOnclick() {
            document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Updating";
            $("#updateUserBranch").prop("disabled", true);
            $("#closeUserBranch").prop("disabled", true);

            var userBranchObject = new Object();
            userBranchObject.BranchId = cboUserBranches.selectedValue;
            var userBranchData = JSON.stringify(userBranchObject);

            $.ajax({
                type: "PUT",
                url: '/api/userBranch/update',
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: userBranchData,
                statusCode: {
                    200: function () {
                        toastr.success("Update Successful");
                        window.setTimeout(function () {
                            location.reload()
                        }, 1000);
                    },
                    404: function () {
                        toastr.error("Not Found");
                        document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
                        $("#updateUserBranch").prop("disabled", false);
                        $("#closeUserBranch").prop("disabled", false);
                    },
                    500: function () {
                        toastr.error("Bad Request");
                        document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
                        $("#updateUserBranch").prop("disabled", false);
                        $("#closeUserBranch").prop("disabled", false);
                    }
                }
            });
        }
    </script>
    <script type="text/javascript">
        // ======================
        // Side Bar Menu Settings
        // ======================
        var slideLeft = new Menu({
            wrapper: '#o-wrapper',
            type: 'slide-left',
            menuOpenerClass: '.c-button',
            maskId: '#c-mask'
        });

        var slideLeftBtn = document.querySelector('#c-button--slide-left');

        slideLeftBtn.addEventListener('click', function (e) {
            e.preventDefault;
            slideLeft.open();
        });
    </script>
</body>
</html>