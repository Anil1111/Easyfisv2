<!DOCTYPE html>
<html>
<head>
    <!-- Meta -->
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">

    <!-- Title of the Page -->
    <link rel="shortcut icon" href="~/Images/icon/easyfislogomini.ico">
    <title>Bank Reconciliation</title>

    <!-- CSS StyleSheets-->
    @Styles.Render("~/Content/Software-css")
</head>
<body class="hold-transition skin-blue fixed sidebar-mini">
    <div class="wrapper">
        @Html.Partial("_SoftwareHeader")
        @Html.Partial("_SoftwareSideBarMenu")

        <div class="content-wrapper">
            <section class="content-header">
                <h1>
                    Bank Reconciliation
                    <small><i class="fa fa-building"></i> @ViewData["Company"] / @ViewData["Branch"]</small>
                </h1>
                <ol class="breadcrumb">
                    <li><a href="/Software"> Dashboard</a></li>
                    <li> Bank Reconciliation </li>
                </ol>
            </section>

            <section class="content">
                <div class="box box-default">
                    <div class="box-header">
                        <div class="row">
                            <div class="col-md-12" align="right">
                                <button class="btn btn-primary btn-sm" id="" onclick="btnBankReconciliationPrint_OnClick()"><i class="fa fa-print"></i> Print</button>
                                <button class="btn btn-danger btn-sm" id="" onclick="btnBankReconciliationClose_OnClick()"><i class=" fa fa-times"></i> Close</button>
                            </div>
                        </div>
                    </div>
                    <div class="box-body">
                        <div class="well">
                            <form class="form-horizontal" role="form">
                                <div class="row">
                                    <div class="col-md-5">
                                        <div class="form-group">
                                            <label class="control-label col-sm-4">Bank</label>
                                            <div class="col-sm-8">
                                                <div class="comboBox-wide" id="bankReconciliationBank"></div>
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <label class="control-label col-sm-4">Date Start</label>
                                            <div class="col-sm-8">
                                                <div class="input-50" id="bankReconciliationStartDate"></div>
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <label class="control-label col-sm-4">Date End</label>
                                            <div class="col-sm-8">
                                                <div class="input-50" id="bankReconciliationEndDate"></div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-7">
                                        <div class="form-group">
                                            <label class="control-label col-sm-6">Ending Balance as per Bank</label>
                                            <div class="col-sm-6">
                                                <input type="text" class="form-control input-sm numberField input-50" id="bankReconciliationEndingBalanceAsPerBank" placeholder="0.00" />
                                                <input type="hidden" id="bankReconciliationEndingBalanceAsPerBankValue"/>
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <label class="control-label col-sm-6">Total Deposit in Transit</label>
                                            <div class="col-sm-6">
                                                <input type="text" class="form-control input-sm numberField input-50" id="bankReconciliationTotalDepositInTransit" />
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <label class="control-label col-sm-6">Total Outstanding Withdrawals</label>
                                            <div class="col-sm-6">
                                                <input type="text" class="form-control input-sm numberField input-50" id="bankReconciliationTotalOutstandingWithdrawals" />
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <label class="control-label col-sm-6">Total Adjustments</label>
                                            <div class="col-sm-6">
                                                <input type="text" class="form-control input-sm numberField input-50" id="bankReconciliationTotalAdjustments" />
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <label class="control-label col-sm-6">Adjusted Ending Balance as per Bank</label>
                                            <div class="col-sm-6">
                                                <input type="text" class="form-control input-sm numberField input-50" id="bankReconciliationAdjustedEndingBalanceAsPerBank" />
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-6"></div>
                                </div>
                            </form>
                        </div>
                        <br />
                        <ul class="nav nav-tabs pill-custom" role="tablist" id="myTab">
                            <li role="presentation" class="active"><a data-toggle="tab" href="#deposits" id="depositsCollection">Deposits (Collection)</a></li>
                            <li role="presentation"><a data-toggle="tab" href="#withdrwals" id="withdrwalsDisbursment">Withdrawals (Disbursement)</a></li>
                            <li role="presentation"><a data-toggle="tab" href="#adjustments" id="adjustmentsJournalVoucher">Adjustments (Journal Voucher)</a></li>
                        </ul>
                        <div class="tab-content">
                            <!-- Deposits -->
                            <div id="deposits" class="tab-pane fade in active">
                                <br />
                                <div class="row" align="left">
                                    <div class="col-lg-12">
                                        <div id="collectionLineGrid" class="grid"></div>
                                        <br />
                                        <br />
                                        <div class="row">
                                            <div class="col-lg-8"></div>
                                            <div class="col-lg-4">
                                                <table class="table table-responsive table-bordered">
                                                    <tr>
                                                        <td align="right">
                                                            <b>Total: </b>
                                                        </td>
                                                        <td style="padding-left: 10px" align="right">
                                                            <span id="totalInTransit">0.00</span>
                                                        </td>
                                                    </tr>
                                                </table>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Withdrwals -->
                            <div id="withdrwals" class="tab-pane fade in">
                                <br />
                                <div class="row" align="left">
                                    <div class="col-lg-12">
                                        <div id="disbursementGrid" class="grid"></div>
                                        <br />
                                        <br />
                                        <div class="row">
                                            <div class="col-lg-8"></div>
                                            <div class="col-lg-4">
                                                <table class="table table-responsive table-bordered">
                                                    <tr>
                                                        <td align="right">
                                                            <b>Total: </b>
                                                        </td>
                                                        <td style="padding-left: 10px" align="right">
                                                            <span id="totalOutstanding">0.00</span>
                                                        </td>
                                                    </tr>
                                                </table>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Adjustments -->
                            <div id="adjustments" class="tab-pane fade in">
                                <br />
                                <div class="row" align="left">
                                    <div class="col-lg-12">
                                        <div id="adjustmentGrid" class="grid"></div>
                                        <br />
                                        <br />
                                        <div class="row">
                                            <div class="col-lg-8"></div>
                                            <div class="col-lg-4">
                                                <table class="table table-responsive table-bordered">
                                                    <tr>
                                                        <td align="right">
                                                            <b>Total: </b>
                                                        </td>
                                                        <td style="padding-left: 10px" align="right">
                                                            <span id="totalAdjustments">0.00</span>
                                                        </td>
                                                    </tr>
                                                </table>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </section>
        </div>

        @Html.Partial("_SoftwareFooter")
    </div>

    @Scripts.Render("~/Scripts/Software-js")
    <script type="text/javascript">
        // ================
        // Global Variables
        // ================
        var banks;
        var cboBank;
        var bankReconciliationStartDate;
        var bankReconciliationEndDate;
        var bankReconciliationStartDateDefaultValue;
        var bankReconciliationEndtDateDefaultValue;
        var collectionLines;
        var collectionLineGrid;
        var disbursements;
        var disbursementGrid;
        var journalVoucherLines;
        var journalVoucherLineGrid;

        var deposit = 0;
        var withdrawal = 0;
        var adjustment = 0;

        // ========
        // Get Bank
        // ========
        function getBank() {
            banks = new wijmo.collections.ObservableArray;
            $.ajax({
                url: '/api/listArticleByArticleTypeId/5',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (Results) {
                    if (Results.length > 0) {
                        for (i = 0; i < Results.length; i++) {
                            banks.push({
                                Id: Results[i]["Id"],
                                ArticleCode: Results[i]["ArticleCode"],
                                ManualArticleCode: Results[i]["ManualArticleCode"],
                                Article: Results[i]["Article"],
                                Category: Results[i]["Category"],
                                ArticleTypeId: Results[i]["ArticleTypeId"],
                                ArticleType: Results[i]["ArticleType"],
                                ArticleGroupId: Results[i]["ArticleGroupId"],
                                ArticleGroup: Results[i]["ArticleGroup"],
                                AccountId: Results[i]["AccountId"],
                                Account: Results[i]["Account"],
                                SalesAccountId: Results[i]["SalesAccountId"],
                                CostAccountId: Results[i]["CostAccountId"],
                                AssetAccountId: Results[i]["AssetAccountId"],
                                ExpenseAccountId: Results[i]["ExpenseAccountId"],
                                UnitId: Results[i]["UnitId"],
                                OutputTaxId: Results[i]["OutputTaxId"],
                                InputTaxId: Results[i]["InputTaxId"],
                                WTaxTypeId: Results[i]["WTaxTypeId"],
                                Price: Results[i]["Price"],
                                Cost: Results[i]["Cost"],
                                IsInventory: Results[i]["IsInventory"],
                                Particulars: Results[i]["Particulars"],
                                Address: Results[i]["Address"],
                                TermId: Results[i]["TermId"],
                                ContactNumber: Results[i]["ContactNumber"],
                                ContactPerson: Results[i]["ContactPerson"],
                                TaxNumber: Results[i]["TaxNumber"],
                                CreditLimit: Results[i]["CreditLimit"],
                                DateAcquired: Results[i]["DateAcquired"],
                                UsefulLife: Results[i]["UsefulLife"],
                                SalvageValue: Results[i]["SalvageValue"],
                                ManualArticleOldCode: Results[i]["ManualArticleOldCode"],
                                IsLocked: Results[i]["IsLocked"],
                                CreatedById: Results[i]["CreatedById"],
                                CreatedBy: Results[i]["CreatedBy"],
                                CreatedDateTime: Results[i]["CreatedDateTime"],
                                UpdatedById: Results[i]["UpdatedById"],
                                UpdatedBy: Results[i]["UpdatedBy"],
                                UpdatedDateTime: Results[i]["UpdatedDateTime"]
                            });
                        }
                        createCBOForBank(banks);
                        collectionLineTab();
                    } else {
                        createCBOForBank(banks);
                        collectionLineTab();
                    }
                }
            }).fail(function (xhr, textStatus, err) {
                alert(err);
            });
        }

        // =========================
        // Create combo box for bank
        // =========================
        function createCBOForBank(banks) {
            cboBank.dispose();
            cboBank = new wijmo.input.ComboBox('#bankReconciliationBank', {
                placeholder: "bank",
                itemsSource: banks,
                displayMemberPath: "Article",
                isEditable: false,
                selectedValuePath: "Article",
                onSelectedIndexChanged: function () {
                    refreshCollectionLineGrid();

                    disbursementTab();
                    window.disbursementTab = function () {
                        return true;
                    };
                    refreshDisbursementGrid();

                    journalVoucherTab();
                    window.journalVoucherTab = function () {
                        return true;
                    };
                    refreshJournalVoucherGrid();
                }
            });
        }

        // get Sale Summary Report Start Date
        function getbankReconciliationStartDate() {
            bankReconciliationStartDate.dispose();
            bankReconciliationStartDate = new wijmo.input.InputDate('#bankReconciliationStartDate', {
                format: 'MM/dd/yyyy',
                value: new Date(bankReconciliationStartDateDefaultValue),
                mask: '99/99/9999',
                max: new Date(bankReconciliationEndDate.value),
                onValueChanged: function () {
                    bankReconciliationStartDateDefaultValue = this.value;
                    setTimeout(function () {
                        getbankReconciliationEndDate();
                        refreshCollectionLineGrid();

                        disbursementTab();
                        window.disbursementTab = function () {
                            return true;
                        };
                        refreshDisbursementGrid();

                        journalVoucherTab();
                        window.journalVoucherTab = function () {
                            return true;
                        };
                        refreshJournalVoucherGrid();
                    }, 50);
                }
            });
        }

        // get Sale Summary Report End Date
        function getbankReconciliationEndDate() {
            bankReconciliationEndDate.dispose();
            bankReconciliationEndDate = new wijmo.input.InputDate('#bankReconciliationEndDate', {
                format: 'MM/dd/yyyy',
                value: new Date(bankReconciliationEndtDateDefaultValue),
                mask: '99/99/9999',
                min: new Date(bankReconciliationStartDate.value),
                onValueChanged: function () {
                    bankReconciliationEndtDateDefaultValue = this.value;
                    setTimeout(function () {
                        getbankReconciliationStartDate();
                        refreshCollectionLineGrid();

                        disbursementTab();
                        window.disbursementTab = function () {
                            return true;
                        };
                        refreshDisbursementGrid();

                        journalVoucherTab();
                        window.journalVoucherTab = function () {
                            return true;
                        };
                        refreshJournalVoucherGrid();
                    }, 50);
                }
            });
        }

        // ============================
        // Refresh Collection Line List
        // ============================
        function refreshCollectionLineGrid() {
            collectionLines = new wijmo.collections.CollectionView(getCollectionLines());

            collectionLineGrid.itemsSource = collectionLines;
            collectionLineGrid.trackChanges = true;
        }

        var InTransitAmount = new Array();
        // ========================
        // GET Collection Line List
        // ========================
        function getCollectionLines() {
            var collectionLines = new wijmo.collections.ObservableArray;
            NProgress.start();
            var dateStartValue = [bankReconciliationStartDate.value.getMonth() + 1, bankReconciliationStartDate.value.getDate(), bankReconciliationStartDate.value.getFullYear()].join('-');
            var dateEndValue = [bankReconciliationEndDate.value.getMonth() + 1, bankReconciliationEndDate.value.getDate(), bankReconciliationEndDate.value.getFullYear()].join('-');

            $.ajax({
                url: '/api/listCollectionLineByDepositoryBankIdByORDate/' + cboBank.selectedItem["Id"].toString() + "/" + dateStartValue + "/" + dateEndValue,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (collectionLineResults) {
                    NProgress.done();
                    if (collectionLineResults.length > 0) {
                        var totalInTransitValue = 0;
                        for (i = 0; i < collectionLineResults.length; i++) {

                            if (collectionLineResults[i]["IsClear"] == true) {
                                InTransitAmount[i] = 0;
                            } else {
                                InTransitAmount[i] = collectionLineResults[i]["Amount"];
                            }

                            var isCleard = false;

                            if (typeof InTransitAmount[i] !== 'undefined' && InTransitAmount[i] !== 0) {
                                btnColor = "warning";
                                icon = "<i class='fa fa-hand-o-left'></i>";

                                totalInTransitValue += InTransitAmount[i];

                                isCleard = true;
                            } else {
                                btnColor = "primary";
                                icon = "<i class='fa fa-hand-o-right'></i>";
                            }

                            deposit = totalInTransitValue;
                            document.getElementById("totalInTransit").innerHTML = totalInTransitValue.toLocaleString();
                            document.getElementById("bankReconciliationTotalDepositInTransit").value = totalInTransitValue.toLocaleString();

                            collectionLines.push({
                                Id: collectionLineResults[i]["Id"],
                                ORId: collectionLineResults[i]["ORId"],
                                OR: collectionLineResults[i]["OR"],
                                ORDate: collectionLineResults[i]["ORDate"],
                                Customer: collectionLineResults[i]["Customer"],
                                BranchId: collectionLineResults[i]["BranchId"],
                                Branch: collectionLineResults[i]["Branch"],
                                AccountId: collectionLineResults[i]["AccountId"],
                                Account: collectionLineResults[i]["Account"],
                                ArticleId: collectionLineResults[i]["ArticleId"],
                                Article: collectionLineResults[i]["Article"],
                                SIId: collectionLineResults[i]["SIId"],
                                SI: collectionLineResults[i]["SI"],
                                Particulars: collectionLineResults[i]["Particulars"],
                                Amount: collectionLineResults[i]["Amount"],
                                PayTypeId: collectionLineResults[i]["PayTypeId"],
                                PayType: collectionLineResults[i]["PayType"],
                                CheckNumber: collectionLineResults[i]["CheckNumber"],
                                CheckDate: collectionLineResults[i]["CheckDate"],
                                CheckBank: collectionLineResults[i]["CheckBank"],
                                DepositoryBankId: collectionLineResults[i]["DepositoryBankId"],
                                DepositoryBank: collectionLineResults[i]["DepositoryBank"],
                                IsClear: collectionLineResults[i]["IsClear"],
                                InTransit: InTransitAmount[i],
                                IsClearHtml: "<button class='btn btn-" + btnColor + " btn-xs' onclick='pickAmountIntransit_OnClick(" + isCleard + ")'>" + icon + "</button>"
                            });
                        }

                        computeEndingBalancePerBank();
                    } else {
                        document.getElementById("totalInTransit").innerHTML = "0.00";
                        document.getElementById("bankReconciliationTotalDepositInTransit").value = "0.00";
                        document.getElementById("bankReconciliationAdjustedEndingBalanceAsPerBank").value = "0.00";
                        deposit = 0;

                        computeEndingBalancePerBank();
                    }
                }
            }).fail(function (xhr, textStatus, err) {
                alert(err);
            });

            return collectionLines;
        }

        function pickAmountIntransit_OnClick(isCleard) {
            collectionLines.editItem(collectionLines.currentItem);
            var collectionLineItem = collectionLines.currentEditItem;
            
            if (collectionLineItem.InTransit > 0) {
                collectionLineItem.InTransit = 0;
                collectionLineItem.IsClearHtml = "<button class='btn btn-primary btn-xs' onclick='pickAmountIntransit_OnClick(" + isCleard + ")'><i class='fa fa-hand-o-right'></i></button>";

                collectionLines.onCollectionChanged(function () {
                    collectionLines.refresh();
                });
            } else {
                collectionLineItem.InTransit = collectionLineItem.Amount;

                if (collectionLineItem.Amount == 0) {
                    collectionLineItem.IsClearHtml = "<button class='btn btn-primary btn-xs' onclick='pickAmountIntransit_OnClick(" + isCleard + ")'><i class='fa fa-hand-o-right'></i></button>";
                } else {
                    collectionLineItem.IsClearHtml = "<button class='btn btn-warning btn-xs' onclick='pickAmountIntransit_OnClick(" + isCleard + ")'><i class='fa fa-hand-o-left'></i></button>";
                }

                
                collectionLines.onCollectionChanged(function () {
                    collectionLines.refresh();
                });
            }


            var totalInTransitValue = 0;
            for (i = 0; i < collectionLines.items.length; i++) {
                totalInTransitValue += collectionLines.items[i]["InTransit"];
            }

            deposit = totalInTransitValue;
            document.getElementById("totalInTransit").innerHTML = totalInTransitValue.toLocaleString();
            document.getElementById("bankReconciliationTotalDepositInTransit").value = totalInTransitValue.toLocaleString();

            computeEndingBalancePerBank();

            if (collectionLineItem.Amount > 0) {
                $.ajax({
                    url: '/api/bankReconciliation/updateCollectionLines/' + collectionLineItem.Id + '/' + isCleard,
                    type: "PUT",
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    statusCode: {
                        200: function () {
                            if (collectionLineItem.InTransit == 0) {
                                toastr.success("Cleared");
                            }
                        },
                        404: function () {
                            toastr.error("Not Found");
                        },
                        400: function () {
                            toastr.error("Bad Request");
                        }
                    }
                });
            }
        }

        // ================
        // Input Is Cleared
        // ================
        function inputIsCleared_OnClick() {
            var collectionLine = collectionLines.currentItem;

            if (document.getElementById("isCleared").checked == true) {
                console.log(collectionLine.IsClear);
            } else {
                console.log(collectionLine.IsClear);
            }
        }

        // ================================
        // Bank Reconciliation Close Button
        // ================================
        function btnBankReconciliationClose_OnClick() {
            window.location = '/Software';
        }

        // ===================
        // FlexGrid Selection
        // ===================
        function updateDetails() {
            var collectionLine = collectionLines.currentItem;
        }

        // ===================
        // collection line tab
        // ===================
        function collectionLineTab() {
            collectionLines = new wijmo.collections.CollectionView(getCollectionLines());

            collectionLines.currentChanged.addHandler(function (sender, args) {
                updateDetails();
            });

            // Flex Grid for Purchase Collection Line
            collectionLineGrid = new wijmo.grid.FlexGrid('#collectionLineGrid');
            collectionLineGrid.initialize({
                columns: [
                            {
                                "header": "OR Number",
                                "binding": "OR",
                                "allowSorting": true,
                                "isReadOnly": true,
                                "width": 100
                            },
                            {
                                "header": "OR Date",
                                "binding": "ORDate",
                                "allowSorting": true,
                                "isReadOnly": true,
                                "width": 100
                            },
                            {
                                "header": "Customer",
                                "binding": "Customer",
                                "allowSorting": true,
                                "isReadOnly": true,
                                "width": "3*"
                            },
                            {
                                "header": "Pay Type",
                                "binding": "PayType",
                                "allowSorting": true,
                                "isReadOnly": true,
                                "width": "2*"
                            },
                            {
                                "header": "Check No.",
                                "binding": "CheckNumber",
                                "allowSorting": true,
                                "isReadOnly": true,
                                "width": "1.5*"
                            },
                            {
                                "header": "Check Date",
                                "binding": "CheckDate",
                                "allowSorting": true,
                                "isReadOnly": true,
                                "width": 100
                            },
                            {
                                "header": "Amount",
                                "binding": "Amount",
                                "allowSorting": true,
                                "isReadOnly": true,
                                "width": "2*"
                            },
                            {
                                "header": "C",
                                "binding": "IsClearHtml",
                                "allowSorting": true,
                                "isReadOnly": true,
                                "isContentHtml": true,
                                "align": "center",
                                "width": 50
                            },
                           {
                               "header": "In Transit",
                               "binding": "InTransit",
                               "allowSorting": true,
                               "isReadOnly": true,
                               "width": "2*"
                           },
                ],
                autoGenerateColumns: false,
                itemsSource: collectionLines,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });
            collectionLineGrid.trackChanges = true;
        }

        // =========================
        // Refresh Disbursement Grid
        // =========================
        function refreshDisbursementGrid() {
            disbursements = new wijmo.collections.CollectionView(getDisbursement());

            disbursementGrid.itemsSource = disbursements;
            disbursementGrid.trackChanges = true;
        }

        var outstandingAmount = new Array();
        // ================
        // GET Disbursement
        // ================
        function getDisbursement() {
            var disbursements = new wijmo.collections.ObservableArray;
            NProgress.start();
            var dateStartValue = [bankReconciliationStartDate.value.getMonth() + 1, bankReconciliationStartDate.value.getDate(), bankReconciliationStartDate.value.getFullYear()].join('-');
            var dateEndValue = [bankReconciliationEndDate.value.getMonth() + 1, bankReconciliationEndDate.value.getDate(), bankReconciliationEndDate.value.getFullYear()].join('-');

            $.ajax({
                url: '/api/listDisbursementByBankIdByCVDate/' + cboBank.selectedItem["Id"] + '/' + dateStartValue + '/' + dateEndValue,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (disbursementResults) {
                    if (disbursementResults.length > 0) {
                        var totalOutStandingAmount = 0;
                        for (i = 0; i < disbursementResults.length; i++) {

                            if (disbursementResults[i]["IsClear"] == true) {
                                outstandingAmount[i] = 0;
                            } else {
                                outstandingAmount[i] = disbursementResults[i]["Amount"];
                            }

                            var isCleard = false;

                            if (typeof outstandingAmount[i] !== 'undefined' && outstandingAmount[i] !== 0) {
                                btnColor = "warning";
                                icon = "<i class='fa fa-hand-o-left'></i>";

                                totalOutStandingAmount += outstandingAmount[i];
                                
                                isCleard = true;
                            } else {
                                btnColor = "primary";
                                icon = "<i class='fa fa-hand-o-right'></i>";
                            }

                            withdrawal = totalOutStandingAmount;
                            document.getElementById("totalOutstanding").innerHTML = totalOutStandingAmount.toLocaleString();
                            document.getElementById("bankReconciliationTotalOutstandingWithdrawals").value = totalOutStandingAmount.toLocaleString();

                            disbursements.push({
                                Id: disbursementResults[i]["Id"],
                                BranchId: disbursementResults[i]["BranchId"],
                                Branch: disbursementResults[i]["Branch"],
                                CVNumber: disbursementResults[i]["CVNumber"],
                                CVDate: disbursementResults[i]["CVDate"],
                                SupplierId: disbursementResults[i]["SupplierId"],
                                Supplier: disbursementResults[i]["Supplier"],
                                Payee: disbursementResults[i]["Payee"],
                                PayTypeId: disbursementResults[i]["PayTypeId"],
                                PayType: disbursementResults[i]["PayType"],
                                BankId: disbursementResults[i]["BankId"],
                                Bank: disbursementResults[i]["Bank"],
                                ManualCVNumber: disbursementResults[i]["ManualCVNumber"],
                                Particulars: disbursementResults[i]["Particulars"],
                                CheckNumber: disbursementResults[i]["CheckNumber"],
                                CheckDate: disbursementResults[i]["CheckDate"],
                                Amount: disbursementResults[i]["Amount"],
                                IsCrossCheck: disbursementResults[i]["IsCrossCheck"],
                                IsClear: disbursementResults[i]["IsClear"],
                                PreparedById: disbursementResults[i]["PreparedById"],
                                PreparedBy: disbursementResults[i]["PreparedBy"],
                                CheckedById: disbursementResults[i]["CheckedById"],
                                CheckedBy: disbursementResults[i]["CheckedBy"],
                                ApprovedById: disbursementResults[i]["ApprovedById"],
                                ApprovedBy: disbursementResults[i]["ApprovedBy"],
                                IsLocked: disbursementResults[i]["IsLocked"],
                                CreatedById: disbursementResults[i]["CreatedById"],
                                CreatedBy: disbursementResults[i]["CreatedBy"],
                                CreatedDateTime: disbursementResults[i]["CreatedDateTime"],
                                UpdatedById: disbursementResults[i]["UpdatedById"],
                                UpdatedBy: disbursementResults[i]["UpdatedBy"],
                                UpdatedDateTime: disbursementResults[i]["UpdatedDateTime"],
                                IsClearHtml: "<button class='btn btn-" + btnColor + " btn-xs' onclick='pickOutstandingAmount_OnClick(" + isCleard + ")'>" + icon + "</button>",
                                OutstandingAmount: outstandingAmount[i]
                            });
                        }

                        computeEndingBalancePerBank();
                    } else {
                        document.getElementById("totalOutstanding").innerHTML = "0.00";
                        document.getElementById("bankReconciliationTotalOutstandingWithdrawals").value = "0.00";
                        document.getElementById("bankReconciliationAdjustedEndingBalanceAsPerBank").value = "0.00";
                        withdrawal = 0;

                        computeEndingBalancePerBank();
                    }
                    NProgress.done();
                }
            }).fail(function (xhr, textStatus, err) {
                alert(err);
            });

            return disbursements;
        }

        function pickOutstandingAmount_OnClick(isCleard) {
            disbursements.editItem(disbursements.currentItem);
            var disbursementItem = disbursements.currentEditItem;

            if (disbursementItem.OutstandingAmount > 0) {
                disbursementItem.OutstandingAmount = 0;
                disbursementItem.IsClearHtml = "<button class='btn btn-primary btn-xs' onclick='pickOutstandingAmount_OnClick(" + isCleard + ")'><i class='fa fa-hand-o-right'></i></button>";

                disbursements.onCollectionChanged(function () {
                    disbursements.refresh();
                });
            } else {
                disbursementItem.OutstandingAmount = disbursementItem.Amount;

                if (disbursementItem.Amount == 0) {
                    disbursementItem.IsClearHtml = "<button class='btn btn-primary btn-xs' onclick='pickOutstandingAmount_OnClick(" + isCleard + ")'><i class='fa fa-hand-o-right'></i></button>";
                } else {
                    disbursementItem.IsClearHtml = "<button class='btn btn-warning btn-xs' onclick='pickOutstandingAmount_OnClick(" + isCleard + ")'><i class='fa fa-hand-o-left'></i></button>";
                }
                
                disbursements.onCollectionChanged(function () {
                    disbursements.refresh();
                });
            }

            var totalOutStandingAmount = 0;
            for (i = 0; i < disbursements.items.length; i++) {
                totalOutStandingAmount += disbursements.items[i]["OutstandingAmount"];
            }

            withdrawal = totalOutStandingAmount;
            document.getElementById("totalOutstanding").innerHTML = totalOutStandingAmount.toLocaleString();
            document.getElementById("bankReconciliationTotalOutstandingWithdrawals").value = totalOutStandingAmount.toLocaleString();

            computeEndingBalancePerBank();

            if (disbursementItem.Amount > 0) {
                $.ajax({
                    url: '/api/bankReconciliation/updateDisbursement/' + disbursementItem.Id + '/' + isCleard,
                    type: "PUT",
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    statusCode: {
                        200: function () {
                            if (disbursementItem.OutstandingAmount == 0) {
                                toastr.success("Cleared");
                            }
                        },
                        404: function () {
                            toastr.error("Not Found");
                        },
                        400: function () {
                            toastr.error("Bad Request");
                        }
                    }
                });
            }
        }

        // ================
        // disbursement tab
        // ================
        function disbursementTab() {
            disbursements = new wijmo.collections.CollectionView(getDisbursement());

            // Flex Grid
            disbursementGrid = new wijmo.grid.FlexGrid('#disbursementGrid');
            disbursementGrid.initialize({
                columns: [
                            {
                                "header": "CV Number",
                                "binding": "CVNumber",
                                "allowSorting": true,
                                "isReadOnly": true,
                                "width": 100
                            },
                            {
                                "header": "CV Date",
                                "binding": "CVDate",
                                "allowSorting": true,
                                "isReadOnly": true,
                                "width": 100
                            },
                            {
                                "header": "Payee",
                                "binding": "Payee",
                                "allowSorting": true,
                                "isReadOnly": true,
                                "width": "3*"
                            },
                            {
                                "header": "Pay Type",
                                "binding": "PayType",
                                "allowSorting": true,
                                "isReadOnly": true,
                                "width": "2*"
                            },
                            {
                                "header": "Check No.",
                                "binding": "CheckNumber",
                                "allowSorting": true,
                                "isReadOnly": true,
                                "width": "1.5*"
                            },
                            {
                                "header": "Check Date",
                                "binding": "CheckDate",
                                "allowSorting": true,
                                "isReadOnly": true,
                                "width": 100
                            },
                            {
                                "header": "Amount",
                                "binding": "Amount",
                                "allowSorting": true,
                                "isReadOnly": true,
                                "width": "2*"
                            },
                            {
                                "header": "C",
                                "binding": "IsClearHtml",
                                "allowSorting": true,
                                "isReadOnly": true,
                                "isContentHtml": true,
                                "align": "center",
                                "width": 50
                            },
                           {
                               "header": "Outstanding",
                               "binding": "OutstandingAmount",
                               "allowSorting": true,
                               "isReadOnly": true,
                               "width": "2*"
                           },
                ],
                autoGenerateColumns: false,
                itemsSource: disbursements,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });
            disbursementGrid.trackChanges = true;
        }

        var adjustmentAmount = new Array();
        // ========================
        // get Journal Voucher Line
        // ========================
        function getJournalVoucherLine() {
            var journalVoucherLines = new wijmo.collections.ObservableArray;
            NProgress.start();
            var dateStartValue = [bankReconciliationStartDate.value.getMonth() + 1, bankReconciliationStartDate.value.getDate(), bankReconciliationStartDate.value.getFullYear()].join('-');
            var dateEndValue = [bankReconciliationEndDate.value.getMonth() + 1, bankReconciliationEndDate.value.getDate(), bankReconciliationEndDate.value.getFullYear()].join('-');

            $.ajax({
                url: '/api/listJournalVoucherLineByJVDate/' + cboBank.selectedItem["Id"].toString() + '/' + dateStartValue + '/' + dateEndValue,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (Results) {
                    if (Results.length > 0) {
                        var totalAdjustmentsAmount = 0;
                        for (i = 0; i < Results.length; i++) {

                            var balance = Results[i]["DebitAmount"] - Results[i]["CreditAmount"]

                            if (Results[i]["IsClear"] == true) {
                                adjustmentAmount[i] = 0;
                            } else {
                                adjustmentAmount[i] = balance;
                            }

                            var isCleard = false;

                            if (typeof adjustmentAmount[i] !== 'undefined' && adjustmentAmount[i] !== 0) {
                                btnColor = "warning";
                                icon = "<i class='fa fa-hand-o-left'></i>";

                                totalAdjustmentsAmount += adjustmentAmount[i];

                                isCleard = true;
                            } else {
                                btnColor = "primary";
                                icon = "<i class='fa fa-hand-o-right'></i>";
                            }

                            adjustment = totalAdjustmentsAmount;
                            document.getElementById("totalAdjustments").innerHTML = totalAdjustmentsAmount.toLocaleString();
                            document.getElementById("bankReconciliationTotalAdjustments").value = totalAdjustmentsAmount.toLocaleString();

                            journalVoucherLines.push({
                                Id: Results[i]["Id"],
                                JVId: Results[i]["JVId"],
                                JVNumber: Results[i]["JVNumber"],
                                JVDate: Results[i]["JVDate"],
                                JVParticulars: Results[i]["JVParticulars"],
                                BranchId: Results[i]["BranchId"],
                                Branch: Results[i]["Branch"],
                                AccountId: Results[i]["AccountId"],
                                Account: Results[i]["Account"],
                                ArticleId: Results[i]["ArticleId"],
                                Article: Results[i]["Article"],
                                Particulars: Results[i]["Particulars"],
                                DebitAmount: Results[i]["DebitAmount"],
                                CreditAmount: Results[i]["CreditAmount"],
                                Balance: balance,
                                APRRId: Results[i]["APRRId"],
                                APRR: Results[i]["APRR"],
                                APRRBranch: Results[i]["APRRBranch"],
                                ARSIId: Results[i]["ARSIId"],
                                ARSI: Results[i]["ARSI"],
                                ARSIBranch: Results[i]["ARSIBranch"],
                                IsClear: Results[i]["IsClear"],
                                IsClearHtml: "<button class='btn btn-" + btnColor + " btn-xs' onclick='pickAdjustmentsAmount_OnClick(" + isCleard + ")'>" + icon + "</button>",
                                Adjustments: adjustmentAmount[i]
                            });
                        }

                        computeEndingBalancePerBank();
                    } else {
                        document.getElementById("totalAdjustments").innerHTML = "0.00";
                        document.getElementById("bankReconciliationTotalAdjustments").value = "0.00";
                        document.getElementById("bankReconciliationAdjustedEndingBalanceAsPerBank").value = "0.00";
                        adjustment = 0;

                        computeEndingBalancePerBank();
                    }
                    NProgress.done();
                }
            }).fail(function (xhr, textStatus, err) {
                alert(err);
            });

            return journalVoucherLines;
        }

        function pickAdjustmentsAmount_OnClick(isCleard) {
            journalVoucherLines.editItem(journalVoucherLines.currentItem);
            var journalVoucherLineItem = journalVoucherLines.currentEditItem;

            if (journalVoucherLineItem.Adjustments > 0) {
                journalVoucherLineItem.Adjustments = 0;
                journalVoucherLineItem.IsClearHtml = "<button class='btn btn-primary btn-xs' onclick='pickAdjustmentsAmount_OnClick(" + isCleard + ")'><i class='fa fa-hand-o-right'></i></button>";

                journalVoucherLines.onCollectionChanged(function () {
                    journalVoucherLines.refresh();
                });
            } else {
                journalVoucherLineItem.Adjustments = journalVoucherLineItem.DebitAmount - journalVoucherLineItem.CreditAmount;

                if (journalVoucherLineItem.DebitAmount - journalVoucherLineItem.CreditAmount == 0) {
                    journalVoucherLineItem.IsClearHtml = "<button class='btn btn-primary btn-xs' onclick='pickAdjustmentsAmount_OnClick(" + isCleard + ")'><i class='fa fa-hand-o-right'></i></button>";
                } else {
                    journalVoucherLineItem.IsClearHtml = "<button class='btn btn-warning btn-xs' onclick='pickAdjustmentsAmount_OnClick(" + isCleard + ")'><i class='fa fa-hand-o-left'></i></button>";
                }

                journalVoucherLines.onCollectionChanged(function () {
                    journalVoucherLines.refresh();
                });
            }

            var totalAdjustmentsAmount = 0;
            for (i = 0; i < journalVoucherLines.items.length; i++) {
                totalAdjustmentsAmount += journalVoucherLines.items[i]["Adjustments"];
            }

            adjustment = totalAdjustmentsAmount;
            document.getElementById("totalAdjustments").innerHTML = totalAdjustmentsAmount.toLocaleString();
            document.getElementById("bankReconciliationTotalAdjustments").value = totalAdjustmentsAmount.toLocaleString();

            computeEndingBalancePerBank();

            if (journalVoucherLineItem.DebitAmount - journalVoucherLineItem.CreditAmount !== 0) {
                $.ajax({
                    url: '/api/bankReconciliation/updateJournalVoucherLines/' + journalVoucherLineItem.Id + '/' + isCleard,
                    type: "PUT",
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    statusCode: {
                        200: function () {
                            if (journalVoucherLineItem.Adjustments == 0) {
                                toastr.success("Cleared");
                            }
                        },
                        404: function () {
                            toastr.error("Not Found");
                        },
                        400: function () {
                            toastr.error("Bad Request");
                        }
                    }
                });
            }
        }

        // ============================
        // Refresh Journal Voucher Grid
        // ============================
        function refreshJournalVoucherGrid() {
            journalVoucherLines = new wijmo.collections.CollectionView(getJournalVoucherLine());

            journalVoucherLineGrid.itemsSource = journalVoucherLines;
            journalVoucherLineGrid.trackChanges = true;
        }

        // ===================
        // Journal Voucher Tab
        // ===================
        function journalVoucherTab() {
            journalVoucherLines = new wijmo.collections.CollectionView(getJournalVoucherLine());

            // Flex Grid
            journalVoucherLineGrid = new wijmo.grid.FlexGrid('#adjustmentGrid');
            journalVoucherLineGrid.initialize({
                columns: [
                             {
                                 "header": "JV Number",
                                 "binding": "JVNumber",
                                 "allowSorting": true,
                                 "isReadOnly": true,
                                 "width": 130
                             },
                            {
                                "header": "JV Date",
                                "binding": "JVDate",
                                "allowSorting": true,
                                "isReadOnly": true,
                                "width": 100
                            },
                            {
                                "header": "Particulars",
                                "binding": "JVParticulars",
                                "allowSorting": true,
                                "isReadOnly": true,
                                "width": "3*"
                            },
                            {
                                "header": "Debit",
                                "binding": "DebitAmount",
                                "allowSorting": true,
                                "isReadOnly": true,
                                "width": "2*"
                            },
                            {
                                "header": "Credit",
                                "binding": "CreditAmount",
                                "allowSorting": true,
                                "isReadOnly": true,
                                "width": "2*"
                            },
                            {
                                "header": "Balance",
                                "binding": "Balance",
                                "allowSorting": true,
                                "isReadOnly": true,
                                "width": "2*"
                            },
                            {
                                "header": "C",
                                "binding": "IsClearHtml",
                                "allowSorting": true,
                                "isReadOnly": true,
                                "isContentHtml": true,
                                "align": "center",
                                "width": 50
                            },
                           {
                               "header": "Adjustments",
                               "binding": "Adjustments",
                               "allowSorting": true,
                               "isReadOnly": true,
                               "width": "2*"
                           },
                ],
                autoGenerateColumns: false,
                itemsSource: journalVoucherLines,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            journalVoucherLineGrid.trackChanges = true;
        }

        function computeEndingBalancePerBank() {
            var endingbalance = document.getElementById("bankReconciliationEndingBalanceAsPerBankValue").value.toLocaleString();
            var adjustedEndingBalance = ((endingbalance - deposit) + withdrawal) - adjustment;

            document.getElementById("bankReconciliationAdjustedEndingBalanceAsPerBank").value = adjustedEndingBalance.toLocaleString();
        }

        $('#bankReconciliationEndingBalanceAsPerBank').keyup(function () {
            if (this.value == "") {
                document.getElementById("bankReconciliationEndingBalanceAsPerBankValue").value = 0;
                computeEndingBalancePerBank();
            } else {
                document.getElementById("bankReconciliationEndingBalanceAsPerBankValue").value = this.value;
                computeEndingBalancePerBank();
            }
        });

        // ============
        // On load page
        // ============
        $(document).ready(function () {
            document.getElementById("bankReconciliationTotalDepositInTransit").value = "0.00";
            document.getElementById("bankReconciliationTotalAdjustments").value = "0.00";
            document.getElementById("bankReconciliationTotalOutstandingWithdrawals").value = "0.00";
            document.getElementById("bankReconciliationEndingBalanceAsPerBank").value = 0;
            document.getElementById("bankReconciliationEndingBalanceAsPerBankValue").value = 0;

            document.getElementById("bankReconciliationTotalDepositInTransit").disabled = true;
            document.getElementById("bankReconciliationTotalOutstandingWithdrawals").disabled = true;
            document.getElementById("bankReconciliationTotalAdjustments").disabled = true;
            document.getElementById("bankReconciliationAdjustedEndingBalanceAsPerBank").disabled = true;

            getBank();
            cboBank = new wijmo.input.ComboBox('#bankReconciliationBank');

            bankReconciliationStartDate = new wijmo.input.InputDate('#bankReconciliationStartDate');
            bankReconciliationEndDate = new wijmo.input.InputDate('#bankReconciliationEndDate');

            bankReconciliationStartDateDefaultValue = new Date().toLocaleDateString();
            bankReconciliationEndtDateDefaultValue = new Date().toLocaleDateString();

            getbankReconciliationStartDate();
            getbankReconciliationEndDate();

            $('#depositsCollection').click(function () {
                $('#deposits').show();
                $('#withdrwals').hide();
                $('#adjustments').hide();
                refreshCollectionLineGrid();
                window.collectionLineTab = function () {
                    return true;
                };
            });

            $('#withdrwalsDisbursment').click(function () {
                $('#deposits').hide();
                $('#withdrwals').show();
                $('#adjustments').hide();
                disbursementTab();
                refreshDisbursementGrid();
                window.disbursementTab = function () {
                    return true;
                };
            });

            $('#adjustmentsJournalVoucher').click(function () {
                $('#deposits').hide();
                $('#withdrwals').hide();
                $('#adjustments').show();
                journalVoucherTab();
                refreshJournalVoucherGrid();
                window.journalVoucherTab = function () {
                    return true;
                };
            });

            $('#deposits').show();
            $('#withdrwals').hide();
            $('#adjustments').hide();

        });
    </script>
</body>
</html>