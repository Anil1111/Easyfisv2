<!DOCTYPE html>
<html>
<head>
    <!-- Meta -->
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">

    <!-- Title of the Page -->
    <link rel="shortcut icon" href="~/Images/icon/easyfislogomini.ico">
    <title>Bank Reconciliation</title>

    <!-- CSS StyleSheets-->
    @Styles.Render("~/Content/Software-css")
</head>
<body>
    <div id="o-wrapper" class="o-wrapper">
        <main class="o-content">
            @Html.Partial("_SoftwareHeader")
            <section class="content-header">
                <div class="container">
                    <h3>
                        Bank Reconciliation 
                    </h3>
                    <p>
                        <i class="fa fa-building-o fa-fw"></i> &nbsp; @ViewData["Company"] <br />
                        <i class="fa fa-home fa-fw"></i> &nbsp; <a href="#" onclick="getUserBranches()" style="color: white;">@ViewData["Branch"]</a>
                    </p>
                </div>
            </section>
            <section class="container">
                <div class="panel panel-default">
                    <div class="panel-heading">
                        <div class="row">
                            <div class="col-md-12" align="right">
                                @*<button class="btn btn-primary " id="" onclick="btnBankReconciliationPrint_OnClick()"><i class="fa fa-print"></i> Print</button>*@
                                <button class="btn btn-danger " id="" onclick="btnBankReconciliationClose_OnClick()"><i class=" fa fa-times"></i> Close</button>
                            </div>
                        </div>
                    </div>
                    <div class="panel-body">
                        <form class="form-horizontal" role="form">
                            <div class="row">
                                <div class="col-md-5">
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Bank</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="bankReconciliationBank"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Date Start</label>
                                        <div class="col-sm-8">
                                            <div class="" id="bankReconciliationStartDate"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Date End</label>
                                        <div class="col-sm-8">
                                            <div class="" id="bankReconciliationEndDate"></div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-7">
                                    <div class="form-group">
                                        <label class="control-label col-sm-6">Ending Balance as per Bank</label>
                                        <div class="col-sm-6">
                                            <input type="text" class="form-control  numberField " id="bankReconciliationEndingBalanceAsPerBank" placeholder="0.00" />
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-6">Total Deposit in Transit</label>
                                        <div class="col-sm-6">
                                            <input type="text" class="form-control  numberField " id="bankReconciliationTotalDepositInTransit" disabled />
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-6">Total Outstanding Withdrawals</label>
                                        <div class="col-sm-6">
                                            <input type="text" class="form-control  numberField " id="bankReconciliationTotalOutstandingWithdrawals"disabled />
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-6">Total Adjustments</label>
                                        <div class="col-sm-6">
                                            <input type="text" class="form-control  numberField " id="bankReconciliationTotalAdjustments" disabled />
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-6">Adjusted Ending Balance as per Bank</label>
                                        <div class="col-sm-6">
                                            <input type="text" class="form-control  numberField " id="bankReconciliationAdjustedEndingBalanceAsPerBank" disabled />
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6"></div>
                            </div>
                        </form>
                    </div>
                </div>
                <ul class="nav nav-tabs pill-custom" role="tablist" id="myTab">
                    <li role="presentation" class="active"><a data-toggle="tab" href="#deposits" id="depositsCollection">Deposits (Collection)</a></li>
                    <li role="presentation"><a data-toggle="tab" href="#withdrwals" id="withdrwalsDisbursment">Withdrawals (Disbursement)</a></li>
                    <li role="presentation"><a data-toggle="tab" href="#adjustments" id="adjustmentsJournalVoucher">Adjustments (Journal Voucher)</a></li>
                </ul>
                <br />
                <div class="tab-content">
                    <div id="deposits" class="tab-pane fade in active" style="margin-bottom: 15px;">
                        <div id="collectionLineGrid"></div>
                        <br /><br />
                        <div class="row">
                            <div class="col-md-6">

                            </div>
                            <div class="col-md-6">
                                <dl class="dl-horizontal">
                                    <dt>
                                        <b>Total</b>
                                    </dt>
                                    <dd>
                                        <input type="text" class="form-control numberField" id="totalInTransit" placeholder="0.00" disabled />
                                    </dd>
                                </dl>
                            </div>
                        </div>
                    </div>
                    <div id="withdrwals" class="tab-pane fade in"  style="margin-bottom: 15px;">
                        <div id="disbursementGrid"></div>
                        <br /><br />
                        <div class="row">
                            <div class="col-md-6">

                            </div>
                            <div class="col-md-6">
                                <dl class="dl-horizontal">
                                    <dt>
                                        <b>Total</b>
                                    </dt>
                                    <dd>
                                        <input type="text" class="form-control numberField" id="totalOutstanding" placeholder="0.00" disabled />
                                    </dd>
                                </dl>
                            </div>
                        </div>
                    </div>
                    <div id="adjustments" class="tab-pane fade in">
                        <div id="adjustmentGrid"></div>
                        <br /><br />
                        <div class="row">
                            <div class="col-md-6">

                            </div>
                            <div class="col-md-6">
                                <dl class="dl-horizontal">
                                    <dt>
                                        <b>Total</b>
                                    </dt>
                                    <dd>
                                        <input type="text" class="form-control numberField" id="totalAdjustments" placeholder="0.00" disabled />
                                    </dd>
                                </dl>
                            </div>
                        </div>
                    </div>
                </div>
            </section>
            @Html.Partial("_SoftwareFooter")
        </main>
    </div>
    <div id="c-mask" class="c-mask"></div>

    @Scripts.Render("~/Scripts/Software-js")
    <script type="text/javascript">
        // ================
        // Global Variables
        // ================
        var cboBank = new wijmo.input.ComboBox('#bankReconciliationBank');
        var bankReconciliationStartDate = new wijmo.input.InputDate('#bankReconciliationStartDate');
        var bankReconciliationEndDate = new wijmo.input.InputDate('#bankReconciliationEndDate');
        var collectionLines;
        var collectionLineGrid = new wijmo.grid.FlexGrid('#collectionLineGrid');
        var disbursements;
        var disbursementGrid = new wijmo.grid.FlexGrid('#disbursementGrid');
        var journalVoucherLines;
        var journalVoucherLineGrid = new wijmo.grid.FlexGrid('#adjustmentGrid');
        var isStartDateSelected = false;
        var isEndDateSelected = false;

        // ========
        // Get Bank
        // ========
        function getBank() {
            var banksObservableArray = new wijmo.collections.ObservableArray;
            $.ajax({
                url: '/api/listArticleByArticleTypeId/5',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (Results) {
                    if (Results.length > 0) {
                        for (i = 0; i < Results.length; i++) {
                            banksObservableArray.push({
                                Id: Results[i]["Id"],
                                ArticleCode: Results[i]["ArticleCode"],
                                ManualArticleCode: Results[i]["ManualArticleCode"],
                                Article: Results[i]["Article"],
                                Category: Results[i]["Category"],
                                ArticleTypeId: Results[i]["ArticleTypeId"],
                                ArticleType: Results[i]["ArticleType"],
                                ArticleGroupId: Results[i]["ArticleGroupId"],
                                ArticleGroup: Results[i]["ArticleGroup"],
                                AccountId: Results[i]["AccountId"],
                                Account: Results[i]["Account"],
                                SalesAccountId: Results[i]["SalesAccountId"],
                                CostAccountId: Results[i]["CostAccountId"],
                                AssetAccountId: Results[i]["AssetAccountId"],
                                ExpenseAccountId: Results[i]["ExpenseAccountId"],
                                UnitId: Results[i]["UnitId"],
                                OutputTaxId: Results[i]["OutputTaxId"],
                                InputTaxId: Results[i]["InputTaxId"],
                                WTaxTypeId: Results[i]["WTaxTypeId"],
                                Price: Results[i]["Price"],
                                Cost: Results[i]["Cost"],
                                IsInventory: Results[i]["IsInventory"],
                                Particulars: Results[i]["Particulars"],
                                Address: Results[i]["Address"],
                                TermId: Results[i]["TermId"],
                                ContactNumber: Results[i]["ContactNumber"],
                                ContactPerson: Results[i]["ContactPerson"],
                                TaxNumber: Results[i]["TaxNumber"],
                                CreditLimit: Results[i]["CreditLimit"],
                                DateAcquired: Results[i]["DateAcquired"],
                                UsefulLife: Results[i]["UsefulLife"],
                                SalvageValue: Results[i]["SalvageValue"],
                                ManualArticleOldCode: Results[i]["ManualArticleOldCode"],
                                IsLocked: Results[i]["IsLocked"],
                                CreatedById: Results[i]["CreatedById"],
                                CreatedBy: Results[i]["CreatedBy"],
                                CreatedDateTime: Results[i]["CreatedDateTime"],
                                UpdatedById: Results[i]["UpdatedById"],
                                UpdatedBy: Results[i]["UpdatedBy"],
                                UpdatedDateTime: Results[i]["UpdatedDateTime"]
                            });
                        }
                    }

                    cboBank.dispose();
                    cboBank = new wijmo.input.ComboBox('#bankReconciliationBank', {
                        isEditable: false,
                        itemsSource: banksObservableArray,
                        displayMemberPath: "Article",
                        selectedValuePath: "Id",
                        onSelectedIndexChanged: function () {
                            createCollectionLineFlexGrid();
                        }
                    });

                    bankReconciliationDate();
                }
            });
        }

        // ==========
        // Date Range
        // ==========
        function bankReconciliationDate() {
            bankReconciliationStartDate.dispose();
            bankReconciliationStartDate = new wijmo.input.InputDate('#bankReconciliationStartDate', {
                format: 'MM-dd-yyyy',
                value: new Date(),
                onValueChanged: function () {
                    if (isStartDateSelected) {
                        createCollectionLineFlexGrid();
                    } else {
                        isStartDateSelected = true;
                    }
                }
            });

            bankReconciliationEndDate.dispose();
            bankReconciliationEndDate = new wijmo.input.InputDate('#bankReconciliationEndDate', {
                format: 'MM-dd-yyyy',
                value: new Date(),
                onValueChanged: function () {
                    if (isEndDateSelected) {
                        createCollectionLineFlexGrid();
                    } else {
                        isEndDateSelected = true;
                    }
                }
            });

            createCollectionLineFlexGrid();
        }

        // ========================
        // GET Collection Line List
        // ========================
        function getCollectionLines() {
            NProgress.start();
            var startDate = bankReconciliationStartDate.value.toLocaleDateString().replace(/\//g, '-');
            var endDate = bankReconciliationEndDate.value.toLocaleDateString().replace(/\//g, '-');

            var collectionLinesObservableArray = new wijmo.collections.ObservableArray;
            $.ajax({
                url: '/api/listCollectionLineByDepositoryBankIdByORDate/' + cboBank.selectedValue + "/" + startDate + "/" + endDate,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (collectionLineResults) {
                    var totalInTransitAmount = 0;
                    if (collectionLineResults.length > 0) {
                        for (i = 0; i < collectionLineResults.length; i++) {
                            var inTransitAmount = collectionLineResults[i]["Amount"];
                            if (collectionLineResults[i]["IsClear"]) {
                                inTransitAmount = 0;
                            }

                            totalInTransitAmount += inTransitAmount;

                            var ORDateResult = new Date(collectionLineResults[i]["ORDate"])
                            var ORDate = ('0' + (ORDateResult.getMonth() + 1)).slice(-2) + '-' + ('0' + ORDateResult.getDate()).slice(-2) + '-' + ORDateResult.getFullYear();

                            var CheckDateResult = new Date(collectionLineResults[i]["CheckDate"])
                            var CheckDate = ('0' + (CheckDateResult.getMonth() + 1)).slice(-2) + '-' + ('0' + CheckDateResult.getDate()).slice(-2) + '-' + CheckDateResult.getFullYear();

                            collectionLinesObservableArray.push({
                                Id: collectionLineResults[i]["Id"],
                                ORId: collectionLineResults[i]["ORId"],
                                OR: collectionLineResults[i]["OR"],
                                ORDate: ORDate,
                                Customer: collectionLineResults[i]["Customer"],
                                BranchId: collectionLineResults[i]["BranchId"],
                                Branch: collectionLineResults[i]["Branch"],
                                AccountId: collectionLineResults[i]["AccountId"],
                                Account: collectionLineResults[i]["Account"],
                                ArticleId: collectionLineResults[i]["ArticleId"],
                                Article: collectionLineResults[i]["Article"],
                                SIId: collectionLineResults[i]["SIId"],
                                SI: collectionLineResults[i]["SI"],
                                Particulars: collectionLineResults[i]["Particulars"],
                                Amount: collectionLineResults[i]["Amount"],
                                AmountDisplay: parseFloat(collectionLineResults[i]["Amount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                PayTypeId: collectionLineResults[i]["PayTypeId"],
                                PayType: collectionLineResults[i]["PayType"],
                                CheckNumber: collectionLineResults[i]["CheckNumber"],
                                CheckDate: CheckDate,
                                CheckBank: collectionLineResults[i]["CheckBank"],
                                DepositoryBankId: collectionLineResults[i]["DepositoryBankId"],
                                DepositoryBank: collectionLineResults[i]["DepositoryBank"],
                                IsClear: collectionLineResults[i]["IsClear"],
                                InTransit: inTransitAmount,
                                InTransitDisplay: parseFloat(inTransitAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                IsClearHtml: collectionLineResults[i]["IsClear"] == true ? "<button class='btn btn-success btn-xs' onclick='unclearAmountIntransit()'><i class='fa fa-check'></i></button>" : "<button class='btn btn-default btn-xs' onclick='clearAmountIntransit()'><i class='fa fa-eraser'></i></button>"
                            });
                        }
                    } 

                    document.getElementById("totalInTransit").value = parseFloat(totalInTransitAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                    document.getElementById("bankReconciliationTotalDepositInTransit").value = parseFloat(totalInTransitAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                    NProgress.done();

                    createDisbursementFlexGrid();
                }
            });

            return collectionLinesObservableArray;
        }

        // =========================
        // collection line flex Grid
        // =========================
        function createCollectionLineFlexGrid() {
            collectionLines = new wijmo.collections.CollectionView(getCollectionLines());

            collectionLineGrid.dispose();
            collectionLineGrid = new wijmo.grid.FlexGrid('#collectionLineGrid');
            collectionLineGrid.initialize({
                    columns: [
                        {
                            "header": "OR Number",
                            "binding": "OR",
                            "allowSorting": true,
                            "isReadOnly": true,
                            "width": 100
                        },
                        {
                            "header": "OR Date",
                            "binding": "ORDate",
                            "allowSorting": true,
                            "isReadOnly": true,
                            "width": 100
                        },
                        {
                            "header": "Customer",
                            "binding": "Customer",
                            "allowSorting": true,
                            "isReadOnly": true,
                            "width": "3*"
                        },
                        {
                            "header": "Pay Type",
                            "binding": "PayType",
                            "allowSorting": true,
                            "isReadOnly": true,
                            "width": "2*"
                        },
                        {
                            "header": "Check No.",
                            "binding": "CheckNumber",
                            "allowSorting": true,
                            "isReadOnly": true,
                            "width": "1.5*"
                        },
                        {
                            "header": "Check Date",
                            "binding": "CheckDate",
                            "allowSorting": true,
                            "isReadOnly": true,
                            "width": 100
                        },
                        {
                            "header": "Amount",
                            "binding": "AmountDisplay",
                            "allowSorting": true,
                            "align": "right",
                            "isReadOnly": true,
                            "width": "2*"
                        },
                        {
                            "header": "C",
                            "binding": "IsClearHtml",
                            "allowSorting": true,
                            "isReadOnly": true,
                            "isContentHtml": true,
                            "align": "center",
                            "width": 50
                        },
                        {
                            "header": "In Transit",
                            "binding": "InTransitDisplay",
                            "allowSorting": true,
                            "align": "right",
                            "isReadOnly": true,
                            "width": "2*"
                        },
                    ],
                autoGenerateColumns: false,
                itemsSource: collectionLines,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            collectionLineGrid.trackChanges = true;
        }

        // ========================
        // Clear Amount - Intransit
        // ========================
        function clearAmountIntransit() {
            collectionLines.editItem(collectionLines.currentItem);
            var collectionLineItem = collectionLines.currentEditItem;
            $.ajax({
                url: '/api/bankReconciliation/updateCollectionLines/' + collectionLineItem.Id + '/' + true,
                type: "PUT",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Clear Successful");
                        collectionLineItem.InTransit = 0;
                        collectionLineItem.InTransitDisplay = formatDecimalValues(0);
                        collectionLineItem.IsClearHtml = "<button class='btn btn-success btn-xs' onclick='unclearAmountIntransit()'><i class='fa fa-check'></i></button>";
                        collectionLines.refresh();
                        collectionLineGrid.refresh();

                        var totalInTransitValue = 0;
                        for (i = 0; i < collectionLines.items.length; i++) {
                            totalInTransitValue += collectionLines.items[i]["InTransit"];
                        }

                        document.getElementById("totalInTransit").value = parseFloat(totalInTransitValue).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        document.getElementById("bankReconciliationTotalDepositInTransit").value = parseFloat(totalInTransitValue).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");

                        computeEndingBalancePerBank();
                    },
                    404: function () {
                        toastr.error("Not Found");
                    },
                    400: function () {
                        toastr.error("Bad Request");
                    }
                }
            });
        }

        // ==========================
        // Unclear Amount - Intransit
        // ==========================
        function unclearAmountIntransit() {
            collectionLines.editItem(collectionLines.currentItem);
            var collectionLineItem = collectionLines.currentEditItem;
            $.ajax({
                url: '/api/bankReconciliation/updateCollectionLines/' + collectionLineItem.Id + '/' + false,
                type: "PUT",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Unclear Successful");
                        collectionLineItem.InTransit = collectionLineItem.Amount;
                        collectionLineItem.InTransitDisplay = parseFloat(collectionLineItem.Amount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        collectionLineItem.IsClearHtml = "<button class='btn btn-default btn-xs' onclick='clearAmountIntransit()'><i class='fa fa-eraser'></i></button>";
                        collectionLines.refresh();
                        collectionLineGrid.refresh();

                        var totalInTransitValue = 0;
                        for (i = 0; i < collectionLines.items.length; i++) {
                            totalInTransitValue += collectionLines.items[i]["InTransit"];
                        }

                        document.getElementById("totalInTransit").value = parseFloat(totalInTransitValue).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        document.getElementById("bankReconciliationTotalDepositInTransit").value = parseFloat(totalInTransitValue).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");

                        computeEndingBalancePerBank();
                    },
                    404: function () {
                        toastr.error("Not Found");
                    },
                    400: function () {
                        toastr.error("Bad Request");
                    }
                }
            });
        }

        // ================
        // GET Disbursement
        // ================
        function getDisbursement() {
            NProgress.start();
            var startDate = bankReconciliationStartDate.value.toLocaleDateString().replace(/\//g, '-');
            var endDate = bankReconciliationEndDate.value.toLocaleDateString().replace(/\//g, '-');

            var disbursementsObservableArray = new wijmo.collections.ObservableArray;
            $.ajax({
                url: '/api/listDisbursementByBankIdByCVDate/' + cboBank.selectedValue + '/' + startDate + '/' + endDate,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (disbursementResults) {
                    var totalOutStanding = 0;
                    if (disbursementResults.length > 0) {
                        var totalOutStandingAmount = 0;
                        for (i = 0; i < disbursementResults.length; i++) {
                            var outstandingAmount = disbursementResults[i]["Amount"];
                            if (disbursementResults[i]["IsClear"]) {
                                outstandingAmount = 0;
                            }

                            totalOutStanding += outstandingAmount;

                            var CVDateResult = new Date(disbursementResults[i]["CVDate"])
                            var CVDate = ('0' + (CVDateResult.getMonth() + 1)).slice(-2) + '-' + ('0' + CVDateResult.getDate()).slice(-2) + '-' + CVDateResult.getFullYear();

                            var CheckDateResult = new Date(disbursementResults[i]["CheckDate"])
                            var CheckDate = ('0' + (CheckDateResult.getMonth() + 1)).slice(-2) + '-' + ('0' + CheckDateResult.getDate()).slice(-2) + '-' + CheckDateResult.getFullYear();

                            disbursementsObservableArray.push({
                                Id: disbursementResults[i]["Id"],
                                BranchId: disbursementResults[i]["BranchId"],
                                Branch: disbursementResults[i]["Branch"],
                                CVNumber: disbursementResults[i]["CVNumber"],
                                CVDate: CVDate,
                                SupplierId: disbursementResults[i]["SupplierId"],
                                Supplier: disbursementResults[i]["Supplier"],
                                Payee: disbursementResults[i]["Payee"],
                                PayTypeId: disbursementResults[i]["PayTypeId"],
                                PayType: disbursementResults[i]["PayType"],
                                BankId: disbursementResults[i]["BankId"],
                                Bank: disbursementResults[i]["Bank"],
                                ManualCVNumber: disbursementResults[i]["ManualCVNumber"],
                                Particulars: disbursementResults[i]["Particulars"],
                                CheckNumber: disbursementResults[i]["CheckNumber"],
                                CheckDate: CheckDate,
                                Amount: disbursementResults[i]["Amount"],
                                AmountDisplay: parseFloat(disbursementResults[i]["Amount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                IsCrossCheck: disbursementResults[i]["IsCrossCheck"],
                                IsClear: disbursementResults[i]["IsClear"],
                                PreparedById: disbursementResults[i]["PreparedById"],
                                PreparedBy: disbursementResults[i]["PreparedBy"],
                                CheckedById: disbursementResults[i]["CheckedById"],
                                CheckedBy: disbursementResults[i]["CheckedBy"],
                                ApprovedById: disbursementResults[i]["ApprovedById"],
                                ApprovedBy: disbursementResults[i]["ApprovedBy"],
                                IsLocked: disbursementResults[i]["IsLocked"],
                                CreatedById: disbursementResults[i]["CreatedById"],
                                CreatedBy: disbursementResults[i]["CreatedBy"],
                                CreatedDateTime: disbursementResults[i]["CreatedDateTime"],
                                UpdatedById: disbursementResults[i]["UpdatedById"],
                                UpdatedBy: disbursementResults[i]["UpdatedBy"],
                                UpdatedDateTime: disbursementResults[i]["UpdatedDateTime"],
                                IsClearHtml: disbursementResults[i]["IsClear"] == true ? "<button class='btn btn-success btn-xs' onclick='unclearAmountOutstanding()'><i class='fa fa-check'></i></button>" : "<button class='btn btn-default btn-xs' onclick='clearAmountOutstanding()'><i class='fa fa-eraser'></i></button>",
                                OutstandingAmount: outstandingAmount,
                                OutstandingAmountDisplay: parseFloat(outstandingAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")
                            });
                        }
                    }

                    document.getElementById("totalOutstanding").value = parseFloat(totalOutStanding).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                    document.getElementById("bankReconciliationTotalOutstandingWithdrawals").value = parseFloat(totalOutStanding).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                    NProgress.done();

                    createJournalVoucherFlexGrid();
                }
            });

            return disbursementsObservableArray;
        }

        // ======================
        // Disbursement flex grid
        // ======================
        function createDisbursementFlexGrid() {
            disbursements = new wijmo.collections.CollectionView(getDisbursement());
            disbursementGrid.dispose();
            disbursementGrid = new wijmo.grid.FlexGrid('#disbursementGrid');
            disbursementGrid.initialize({
                    columns: [
                        {
                            "header": "CV Number",
                            "binding": "CVNumber",
                            "allowSorting": true,
                            "isReadOnly": true,
                            "width": 100
                        },
                        {
                            "header": "CV Date",
                            "binding": "CVDate",
                            "allowSorting": true,
                            "isReadOnly": true,
                            "width": 100
                        },
                        {
                            "header": "Payee",
                            "binding": "Payee",
                            "allowSorting": true,
                            "isReadOnly": true,
                            "width": "3*"
                        },
                        {
                            "header": "Pay Type",
                            "binding": "PayType",
                            "allowSorting": true,
                            "isReadOnly": true,
                            "width": "2*"
                        },
                        {
                            "header": "Check No.",
                            "binding": "CheckNumber",
                            "allowSorting": true,
                            "isReadOnly": true,
                            "width": "1.5*"
                        },
                        {
                            "header": "Check Date",
                            "binding": "CheckDate",
                            "allowSorting": true,
                            "isReadOnly": true,
                            "width": 100
                        },
                        {
                            "header": "Amount",
                            "binding": "AmountDisplay",
                            "allowSorting": true,
                            "align": "right",
                            "isReadOnly": true,
                            "width": "2*"
                        },
                        {
                            "header": "C",
                            "binding": "IsClearHtml",
                            "allowSorting": true,
                            "isReadOnly": true,
                            "isContentHtml": true,
                            "align": "center",
                            "width": 50
                        },
                        {
                            "header": "Outstanding",
                            "binding": "OutstandingAmountDisplay",
                            "allowSorting": true,
                            "align": "right",
                            "isReadOnly": true,
                            "width": "2*"
                        },
                    ],
                autoGenerateColumns: false,
                itemsSource: disbursements,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            disbursementGrid.trackChanges = true;
        }

        // ========================
        // Clear Outstanding Amount 
        // ========================
        function clearAmountOutstanding() {
            disbursements.editItem(disbursements.currentItem);
            var disbursementItem = disbursements.currentEditItem;
            $.ajax({
                url: '/api/bankReconciliation/updateDisbursement/' + disbursementItem.Id + '/' + true,
                type: "PUT",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Clear Successful");
                        disbursementItem.OutstandingAmount = 0;
                        disbursementItem.OutstandingAmountDisplay = formatDecimalValues(0);
                        disbursementItem.IsClearHtml = "<button class='btn btn-success btn-xs' onclick='unclearAmountOutstanding()'><i class='fa fa-check'></i></button>";
                        disbursements.refresh();
                        disbursementGrid.refresh();

                        var totalOutStandingAmount = 0;
                        for (i = 0; i < disbursements.items.length; i++) {
                            totalOutStandingAmount += disbursements.items[i]["OutstandingAmount"];
                        }

                        document.getElementById("totalOutstanding").value = parseFloat(totalOutStandingAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        document.getElementById("bankReconciliationTotalOutstandingWithdrawals").value = parseFloat(totalOutStandingAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");

                        computeEndingBalancePerBank();
                    },
                    404: function () {
                        toastr.error("Not Found");
                    },
                    400: function () {
                        toastr.error("Bad Request");
                    }
                }
            });
        }

        // ==========================
        // Unclear Outstanding Amount 
        // ==========================
        function unclearAmountOutstanding() {
            disbursements.editItem(disbursements.currentItem);
            var disbursementItem = disbursements.currentEditItem;
            disbursements.editItem(disbursements.currentItem);
            var disbursementItem = disbursements.currentEditItem;
            $.ajax({
                url: '/api/bankReconciliation/updateDisbursement/' + disbursementItem.Id + '/' + false,
                type: "PUT",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Unclear Successful");
                        disbursementItem.OutstandingAmount = disbursementItem.Amount;
                        disbursementItem.OutstandingAmountDisplay = parseFloat(disbursementItem.Amount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        disbursementItem.IsClearHtml = "<button class='btn btn-default btn-xs' onclick='clearAmountOutstanding()'><i class='fa fa-eraser'></i></button>";
                        disbursements.refresh();
                        disbursementGrid.refresh();

                        var totalOutStandingAmount = 0;
                        for (i = 0; i < disbursements.items.length; i++) {
                            totalOutStandingAmount += disbursements.items[i]["OutstandingAmount"];
                        }

                        document.getElementById("totalOutstanding").value = parseFloat(totalOutStandingAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        document.getElementById("bankReconciliationTotalOutstandingWithdrawals").value = parseFloat(totalOutStandingAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");

                        computeEndingBalancePerBank();
                    },
                    404: function () {
                        toastr.error("Not Found");
                    },
                    400: function () {
                        toastr.error("Bad Request");
                    }
                }
            });
        }

        // ========================
        // Get Journal Voucher Line
        // ========================
        function getJournalVoucherLine() {
            NProgress.start();
            var startDate = bankReconciliationStartDate.value.toLocaleDateString().replace(/\//g, '-');
            var endDate = bankReconciliationEndDate.value.toLocaleDateString().replace(/\//g, '-');

            var journalVoucherLinesObservableArray = new wijmo.collections.ObservableArray;
            $.ajax({
                url: '/api/listJournalVoucherLineByJVDate/' + cboBank.selectedValue + '/' + startDate + '/' + endDate,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (Results) {
                    var totalAdjustmentsAmount = 0;
                    if (Results.length > 0) {
                        for (i = 0; i < Results.length; i++) {
                            var balance = Results[i]["DebitAmount"] - Results[i]["CreditAmount"]
                            var adjusmentAmount = balance;
                            if (Results[i]["IsClear"] == true) {
                                adjusmentAmount = 0;
                            }

                            totalAdjustmentsAmount += adjusmentAmount;

                            var JVDateResult = new Date(Results[i]["JVDate"])
                            var JVDate = ('0' + (JVDateResult.getMonth() + 1)).slice(-2) + '-' + ('0' + JVDateResult.getDate()).slice(-2) + '-' + JVDateResult.getFullYear();

                            journalVoucherLinesObservableArray.push({
                                Id: Results[i]["Id"],
                                JVId: Results[i]["JVId"],
                                JVNumber: Results[i]["JVNumber"],
                                JVDate: JVDate,
                                JVParticulars: Results[i]["JVParticulars"],
                                BranchId: Results[i]["BranchId"],
                                Branch: Results[i]["Branch"],
                                AccountId: Results[i]["AccountId"],
                                Account: Results[i]["Account"],
                                ArticleId: Results[i]["ArticleId"],
                                Article: Results[i]["Article"],
                                Particulars: Results[i]["Particulars"],
                                DebitAmount: Results[i]["DebitAmount"],
                                DebitAmountDisplay: parseFloat(Results[i]["DebitAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                CreditAmount: Results[i]["CreditAmount"],
                                CreditAmountDisplay: parseFloat(Results[i]["CreditAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                Balance: balance,
                                BalanceDisplay: parseFloat(balance).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                APRRId: Results[i]["APRRId"],
                                APRR: Results[i]["APRR"],
                                APRRBranch: Results[i]["APRRBranch"],
                                ARSIId: Results[i]["ARSIId"],
                                ARSI: Results[i]["ARSI"],
                                ARSIBranch: Results[i]["ARSIBranch"],
                                IsClear: Results[i]["IsClear"],
                                IsClearHtml: Results[i]["IsClear"] == true ? "<button class='btn btn-success btn-xs' onclick='unclearAmountBalance()'><i class='fa fa-check'></i></button>" : "<button class='btn btn-default btn-xs' onclick='clearAmountBalance()'><i class='fa fa-eraser'></i></button>",
                                Adjustments: adjusmentAmount,
                                AdjustmentsDisplay: parseFloat(adjusmentAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                            });
                        }
                    }

                    document.getElementById("totalAdjustments").value = parseFloat(totalAdjustmentsAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                    document.getElementById("bankReconciliationTotalAdjustments").value = parseFloat(totalAdjustmentsAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                    computeEndingBalancePerBank();
                    NProgress.done();
                }
            });

            return journalVoucherLinesObservableArray;
        }

        // =========================
        // Journal Voucher Flex Grid
        // =========================
        function createJournalVoucherFlexGrid() {
            journalVoucherLines = new wijmo.collections.CollectionView(getJournalVoucherLine());
            journalVoucherLineGrid.dispose();
            journalVoucherLineGrid = new wijmo.grid.FlexGrid('#adjustmentGrid');
            journalVoucherLineGrid.initialize({
                columns: [
                    {
                        "header": "JV Number",
                        "binding": "JVNumber",
                        "allowSorting": true,
                        "isReadOnly": true,
                        "width": 130
                    },
                    {
                        "header": "JV Date",
                        "binding": "JVDate",
                        "allowSorting": true,
                        "isReadOnly": true,
                        "width": 100
                    },
                    {
                        "header": "Particulars",
                        "binding": "JVParticulars",
                        "allowSorting": true,
                        "isReadOnly": true,
                        "width": "3*"
                    },
                    {
                        "header": "Debit",
                        "binding": "DebitAmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "isReadOnly": true,
                        "width": "2*"
                    },
                    {
                        "header": "Credit",
                        "binding": "CreditAmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "isReadOnly": true,
                        "width": "2*"
                    },
                    {
                        "header": "Balance",
                        "binding": "BalanceDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "isReadOnly": true,
                        "width": "2*"
                    },
                    {
                        "header": "C",
                        "binding": "IsClearHtml",
                        "allowSorting": true,
                        "isReadOnly": true,
                        "isContentHtml": true,
                        "align": "center",
                        "width": 50
                    },
                    {
                        "header": "Adjustments",
                        "binding": "AdjustmentsDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "isReadOnly": true,
                        "width": "2*"
                    },
                ],
                autoGenerateColumns: false,
                itemsSource: journalVoucherLines,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            journalVoucherLineGrid.trackChanges = true;
        }

        // ====================
        // Clear Balance Amount
        // ====================
        function clearAmountBalance() {
            journalVoucherLines.editItem(journalVoucherLines.currentItem);
            var journalVoucherLineItem = journalVoucherLines.currentEditItem;
            $.ajax({
                url: '/api/bankReconciliation/updateJournalVoucherLines/' + journalVoucherLineItem.Id + '/' + true,
                type: "PUT",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Clear Successful");
                        journalVoucherLineItem.Adjustments = 0;
                        journalVoucherLineItem.AdjustmentsDisplay = formatDecimalValues(0);
                        journalVoucherLineItem.IsClearHtml = "<button class='btn btn-success btn-xs' onclick='unclearAmountBalance()'><i class='fa fa-check'></i></button>";
                        journalVoucherLines.refresh();
                        journalVoucherLineGrid.refresh();

                        var totalAdjustmentAmount = 0;
                        for (i = 0; i < journalVoucherLines.items.length; i++) {
                            totalAdjustmentAmount += journalVoucherLines.items[i]["Adjustments"];
                        }

                        document.getElementById("totalAdjustments").value = parseFloat(totalAdjustmentAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        document.getElementById("bankReconciliationTotalAdjustments").value = parseFloat(totalAdjustmentAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        computeEndingBalancePerBank();
                    },
                    404: function () {
                        toastr.error("Not Found");
                    },
                    400: function () {
                        toastr.error("Bad Request");
                    }
                }
            });
        }

        // ======================
        // Unclear Balance Amount
        // ======================
        function unclearAmountBalance() {
            journalVoucherLines.editItem(journalVoucherLines.currentItem);
            var journalVoucherLineItem = journalVoucherLines.currentEditItem;
            $.ajax({
                url: '/api/bankReconciliation/updateJournalVoucherLines/' + journalVoucherLineItem.Id + '/' + false,
                type: "PUT",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Unclear Successful");
                        journalVoucherLineItem.Adjustments = journalVoucherLineItem.Balance;
                        journalVoucherLineItem.AdjustmentsDisplay = parseFloat(journalVoucherLineItem.Balance).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        journalVoucherLineItem.IsClearHtml = "<button class='btn btn-default btn-xs' onclick='clearAmountBalance()'><i class='fa fa-eraser'></i></button>";
                        journalVoucherLines.refresh();
                        journalVoucherLineGrid.refresh();

                        var totalAdjustmentAmount = 0;
                        for (i = 0; i < journalVoucherLines.items.length; i++) {
                            totalAdjustmentAmount += journalVoucherLines.items[i]["Adjustments"];
                        }

                        document.getElementById("totalAdjustments").value = parseFloat(totalAdjustmentAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        document.getElementById("bankReconciliationTotalAdjustments").value = parseFloat(totalAdjustmentAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        computeEndingBalancePerBank();
                    },
                    404: function () {
                        toastr.error("Not Found");
                    },
                    400: function () {
                        toastr.error("Bad Request");
                    }
                }
            });
        }

        // ===============================
        // Compute Ending Balance Per Bank
        // ===============================
        function computeEndingBalancePerBank() {
            // default values for computation
            var endingbalance = document.getElementById('bankReconciliationEndingBalanceAsPerBank').value;
            var deposit = document.getElementById('bankReconciliationTotalDepositInTransit').value;
            var withdrawal = document.getElementById('bankReconciliationTotalOutstandingWithdrawals').value;
            var adjustment = document.getElementById('bankReconciliationTotalAdjustments').value;

            // parse and remove comma strings
            var replaceEndingBalance = parseFloat(endingbalance.replace(/\,/g, ''));
            var replaceDeposit = parseFloat(deposit.replace(/\,/g, ''));
            var replaceWithdrawal = parseFloat(withdrawal.replace(/\,/g, ''));
            var replaceAdjustment = parseFloat(adjustment.replace(/\,/g, ''));

            var adjustedEndingBalance = parseFloat(((replaceEndingBalance - replaceDeposit) + replaceWithdrawal) - replaceAdjustment).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");

            document.getElementById("bankReconciliationAdjustedEndingBalanceAsPerBank").value = adjustedEndingBalance;
        }

        $('#bankReconciliationEndingBalanceAsPerBank').keyup(function () {
            computeEndingBalancePerBank();
        });

        // ================================
        // Bank Reconciliation Close Button
        // ================================
        function btnBankReconciliationClose_OnClick() {
            window.location = '/Software';
        }

        // ====
        // Tabs
        // ====
        $('#depositsCollection').click(function () {
            $('#deposits').show();
            $('#withdrwals').hide();
            $('#adjustments').hide();
            createCollectionLineFlexGrid();
        });

        $('#withdrwalsDisbursment').click(function () {
            $('#deposits').hide();
            $('#withdrwals').show();
            $('#adjustments').hide();
            createDisbursementFlexGrid();
        });

        $('#adjustmentsJournalVoucher').click(function () {
            $('#deposits').hide();
            $('#withdrwals').hide();
            $('#adjustments').show();
            createJournalVoucherFlexGrid();
        });

        // ============
        // On load page
        // ============
        $(document).ready(function () {
            document.getElementById('bankReconciliationEndingBalanceAsPerBank').value = formatDecimalValues(0);
            getBank();
            $('#deposits').show();
            $('#withdrwals').hide();
            $('#adjustments').hide();
        });
    </script>
    <script type="text/javascript">
        var cboUserBranches = new wijmo.input.ComboBox('#cboUserBranches');
        function getUserBranches() {
            $("#loadingUserBranches").show();
            document.getElementById("loadingUserBranches").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#userBranchContent").hide();

            $('#userBranchesModal').modal({ show: true, backdrop: 'static' });

            document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
            $("#updateUserBranch").prop("disabled", false);
            $("#closeUserBranch").prop("disabled", false);

            var userBranchesObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/userBranch/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (userBranchesResults) {
                    if (userBranchesResults.length > 0) {
                        for (i = 0; i < userBranchesResults.length; i++) {
                            userBranchesObservableArray.push({
                                BranchId: userBranchesResults[i]["BranchId"],
                                Branch: userBranchesResults[i]["Branch"]
                            });
                        }
                    }

                    var currentBranch = "@ViewData["BranchId"]";
                    cboUserBranches.dispose();
                    cboUserBranches = new wijmo.input.ComboBox('#cboUserBranches', {
                        isEditable: false,
                        placeholder: "Select Branches",
                        itemsSource: userBranchesObservableArray,
                        displayMemberPath: "Branch",
                        selectedValuePath: "BranchId",
                        selectedValue: currentBranch
                    });

                    setTimeout(function () {
                        $("#loadingUserBranches").hide();
                        $("#userBranchContent").show();
                    }, 500)
                }
            });
        }

        function updateUserBranchOnclick() {
            document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Updating";
            $("#updateUserBranch").prop("disabled", true);
            $("#closeUserBranch").prop("disabled", true);

            var userBranchObject = new Object();
            userBranchObject.BranchId = cboUserBranches.selectedValue;
            var userBranchData = JSON.stringify(userBranchObject);

            $.ajax({
                type: "PUT",
                url: '/api/userBranch/update',
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: userBranchData,
                statusCode: {
                    200: function () {
                        toastr.success("Update Successful");
                        window.setTimeout(function () {
                            location.reload()
                        }, 1000);
                    },
                    404: function () {
                        toastr.error("Not Found");
                        document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
                        $("#updateUserBranch").prop("disabled", false);
                        $("#closeUserBranch").prop("disabled", false);
                    },
                    500: function () {
                        toastr.error("Bad Request");
                        document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
                        $("#updateUserBranch").prop("disabled", false);
                        $("#closeUserBranch").prop("disabled", false);
                    }
                }
            });
        }
    </script>
    <script type="text/javascript">
        var slideLeft = new Menu({
            wrapper: '#o-wrapper',
            type: 'slide-left',
            menuOpenerClass: '.c-button',
            maskId: '#c-mask'
        });

        var slideLeftBtn = document.querySelector('#c-button--slide-left');

        slideLeftBtn.addEventListener('click', function (e) {
            e.preventDefault;
            slideLeft.open();
        });
    </script>
</body>
</html>