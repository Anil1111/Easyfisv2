@model easyfis.Entities.MstUserForm
@{
    // =====================
    // User Rights Variables
    // =====================
    var canAdd = Model.CanAdd;
    var canEdit = Model.CanEdit;
    var canDelete = Model.CanDelete;
    var canLock = Model.CanLock;
    var canUnlock = Model.CanUnlock;
    var canPrint = Model.CanPrint;
}
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">
    <link rel="shortcut icon" href="~/Images/icon/easyfislogomini.ico">
    <title>Bank Reconciliation</title>

    @Styles.Render("~/Content/Software-css")
</head>
<body>
    <div id="o-wrapper" class="o-wrapper">
        <main class="o-content">
            @Html.Partial("_SoftwareHeader")

            <section class="content-header">
                <div class="container">
                    <h3>
                        Bank Reconciliation
                    </h3>
                    <p>
                        <i class="fa fa-building-o fa-fw"></i> &nbsp; @ViewData["Company"] <br />
                        <i class="fa fa-home fa-fw"></i> &nbsp; <a href="#" onclick="getUserBranches()" style="color: white;">@ViewData["Branch"]</a>
                    </p>
                </div>
            </section>
            <section class="container">
                <div class="panel panel-default">

                    <!--
                        ============
                        Download CSV
                        ============
                    -->
                    <div class="panel-heading">
                        <div class="row">
                            <div class="col-md-12" align="right">
                                <button class="btn btn-success" id="" onclick="btnBankReconciliationDownloadCSVOnclick()"><i class="fa fa-file-excel-o"></i> CSV</button>
                                <button class="btn btn-danger" id="" onclick="btnBankReconciliationCloseOnclick()"><i class=" fa fa-times"></i> Close</button>
                            </div>
                        </div>
                    </div>

                    <!--
                        =================
                        Filters (Headers)
                        =================
                    -->
                    <div class="panel-body">
                        <form class="form-horizontal" role="form">
                            <div class="row">
                                <div class="col-md-5">
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Bank</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboBankReconciliationBankFilterReconciliationBankFilter"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Date Start</label>
                                        <div class="col-sm-8">
                                            <div class="" id="cboBankReconciliationBankFilterReconciliationStartDateFilter"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Date End</label>
                                        <div class="col-sm-8">
                                            <div class="" id="cboBankReconciliationBankFilterReconciliationEndDateFilter"></div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-7">
                                    <div class="form-group">
                                        <label class="control-label col-sm-6">Ending Balance as per Bank</label>
                                        <div class="col-sm-6">
                                            <input type="text" class="form-control  numberField " id="inpBankReconciliationEndingBalanceAsPerBank" placeholder="0.00" />
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-6">Total Deposit in Transit</label>
                                        <div class="col-sm-6">
                                            <input type="text" class="form-control  numberField " id="inpBankReconciliationTotalDepositInTransit" disabled />
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-6">Total Outstanding Withdrawals</label>
                                        <div class="col-sm-6">
                                            <input type="text" class="form-control  numberField " id="inpBankReconciliationTotalOutstandingWithdrawals" disabled />
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-6">Total Adjustments</label>
                                        <div class="col-sm-6">
                                            <input type="text" class="form-control  numberField " id="inpBankReconciliationTotalAdjustments" disabled />
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-6">Adjusted Ending Balance as per Bank</label>
                                        <div class="col-sm-6">
                                            <input type="text" class="form-control  numberField " id="inpBankReconciliationAdjustedEndingBalanceAsPerBank" disabled />
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6"></div>
                            </div>
                        </form>
                    </div>
                </div>

                <!--
                    ========================
                    Tabs (Bank Transactions)
                    ========================
                -->
                <ul class="nav nav-tabs pill-custom" role="tablist" id="myTab">
                    <li role="presentation" class="active"><a data-toggle="tab" href="#tabCollectionDeposits" id="collectionDeposits">Deposits (Collection)</a></li>
                    <li role="presentation"><a data-toggle="tab" href="#tabDisbursementWithdrawals" id="disbursementWithdrawals">Withdrawals (Disbursement)</a></li>
                    <li role="presentation"><a data-toggle="tab" href="#tabJournalVoucherAdjustments" id="journalVoucherAdjustments">Adjustments (Journal Voucher)</a></li>
                </ul>
                <br />
                <div class="tab-content">

                    <!--
                        ================================
                        Tab Content: Collection Deposits
                        ================================
                    -->
                    <div id="tabCollectionDeposits" class="tab-pane active">
                        <div class="panel panel-default">
                            <div class="panel-heading">
                                <table style="width: 100%" border="0">
                                    <tr>
                                        <td style="width: 49.5%">
                                            <div class="input-group">
                                                <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                                <input type="text" class="form-control" id="inpCollectionDepositsSearchFilter" placeholder="Search...">
                                            </div>
                                        </td>
                                        <td style="width: 1%"></td>
                                        <td style="width: 24%">
                                            <div class="input-group">
                                                <span class="input-group-addon"><b><i class="fa fa-table"></i></b></span>
                                                <div class="comboBox-wide" id="cboCollectionDepositsDisplayNumberOfRows"></div>
                                            </div>
                                        </td>
                                        <td style="width: 1%"></td>
                                        <td style="width: 24.5%" align="right"></td>
                                    </tr>
                                </table>
                            </div>
                            <div class="panel-body">
                                <div id="collectionDepositsFlexGrid"></div>
                            </div>
                            <div class="panel-footer">
                                <div class="row">
                                    <div class="btn-group col-md-7" id="collectionDepositsNavigationPageGrid">
                                        <button type="button" class="btn btn-default border-custom" id="btnCollectionDepositsMoveToFirstPageGrid">
                                            <span class="glyphicon glyphicon-fast-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" id="btnCollectionDepositsMoveToPreviousPageGrid">
                                            <span class="glyphicon glyphicon-step-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnCollectionDepositsCurrentPageGrid"></button>
                                        <button type="button" class="btn btn-default border-custom" id="btnCollectionDepositsMoveToNextPageGrid">
                                            <span class="glyphicon glyphicon-step-forward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" id="btnCollectionDepositsMoveToLastPageGrid">
                                            <span class="glyphicon glyphicon-fast-forward"></span>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="panel panel-default">
                            <div class="panel-body" style="padding-bottom: 0px;">
                                <div class="row">
                                    <div class="col-md-6"></div>
                                    <div class="col-md-6">
                                        <dl class="dl-horizontal">
                                            <dt>
                                                <b>Total</b>
                                            </dt>
                                            <dd>
                                                <input type="text" class="form-control numberField" id="inpCollectionDepositsTotalInTransit" placeholder="0.00" disabled />
                                            </dd>
                                        </dl>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!--
                        ======================================
                        Tab Content: Disubursement Withdrawals
                        ======================================
                    -->
                    <div id="tabDisbursementWithdrawals" class="tab-pane">
                        <div class="panel panel-default">
                            <div class="panel-heading">
                                <table style="width: 100%" border="0">
                                    <tr>
                                        <td style="width: 49.5%">
                                            <div class="input-group">
                                                <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                                <input type="text" class="form-control" id="inpDisbursementWithdrawalsSearchFilter" placeholder="Search...">
                                            </div>
                                        </td>
                                        <td style="width: 1%"></td>
                                        <td style="width: 24%">
                                            <div class="input-group">
                                                <span class="input-group-addon"><b><i class="fa fa-table"></i></b></span>
                                                <div class="comboBox-wide" id="cboDisbursementWithdrawalsDisplayNumberOfRows"></div>
                                            </div>
                                        </td>
                                        <td style="width: 1%"></td>
                                        <td style="width: 24.5%" align="right"></td>
                                    </tr>
                                </table>
                            </div>
                            <div class="panel-body">
                                <div id="disbursementWithdrawalsFlexGrid"></div>
                            </div>
                            <div class="panel-footer">
                                <div class="row">
                                    <div class="btn-group col-md-7" id="disbursementWithdrawalsNavigationPageGrid">
                                        <button type="button" class="btn btn-default border-custom" id="btnDisbursementWithdrawalsMoveToFirstPageGrid">
                                            <span class="glyphicon glyphicon-fast-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" id="btnDisbursementWithdrawalsMoveToPreviousPageGrid">
                                            <span class="glyphicon glyphicon-step-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnDisbursementWithdrawalsCurrentPageGrid"></button>
                                        <button type="button" class="btn btn-default border-custom" id="btnDisbursementWithdrawalsMoveToNextPageGrid">
                                            <span class="glyphicon glyphicon-step-forward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" id="btnDisbursementWithdrawalsMoveToLastPageGrid">
                                            <span class="glyphicon glyphicon-fast-forward"></span>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="panel panel-default">
                            <div class="panel-body" style="padding-bottom: 0px;">
                                <div class="row">
                                    <div class="col-md-6"></div>
                                    <div class="col-md-6">
                                        <dl class="dl-horizontal">
                                            <dt>
                                                <b>Total</b>
                                            </dt>
                                            <dd>
                                                <input type="text" class="form-control numberField" id="inpDisbursementWithdrawalsTotalOutstanding" placeholder="0.00" disabled />
                                            </dd>
                                        </dl>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!--
                        ========================================
                        Tab Content: Journal Voucher Adjustments
                        ========================================
                    -->
                    <div id="tabJournalVoucherAdjustments" class="tab-pane">
                        <div class="panel panel-default">
                            <div class="panel-heading">
                                <table style="width: 100%" border="0">
                                    <tr>
                                        <td style="width: 49.5%">
                                            <div class="input-group">
                                                <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                                <input type="text" class="form-control" id="inpJournalVoucherAdjustmentsSearchFilter" placeholder="Search...">
                                            </div>
                                        </td>
                                        <td style="width: 1%"></td>
                                        <td style="width: 24%">
                                            <div class="input-group">
                                                <span class="input-group-addon"><b><i class="fa fa-table"></i></b></span>
                                                <div class="comboBox-wide" id="cboJournalVoucherAdjustmentsDisplayNumberOfRows"></div>
                                            </div>
                                        </td>
                                        <td style="width: 1%"></td>
                                        <td style="width: 24.5%" align="right"></td>
                                    </tr>
                                </table>
                            </div>
                            <div class="panel-body">
                                <div id="journalVoucherAdjustmentsFlexGrid"></div>
                            </div>
                            <div class="panel-footer">
                                <div class="row">
                                    <div class="btn-group col-md-7" id="journalVoucherAdjustmentsNavigationPageGrid">
                                        <button type="button" class="btn btn-default border-custom" id="btnJournalVoucherAdjustmentsMoveToFirstPageGrid">
                                            <span class="glyphicon glyphicon-fast-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" id="btnJournalVoucherAdjustmentsMoveToPreviousPageGrid">
                                            <span class="glyphicon glyphicon-step-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnJournalVoucherAdjustmentsCurrentPageGrid"></button>
                                        <button type="button" class="btn btn-default border-custom" id="btnJournalVoucherAdjustmentMoveToNextPageGrid">
                                            <span class="glyphicon glyphicon-step-forward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" id="btnJournalVoucherAdjustmentMoveToLastPageGrid">
                                            <span class="glyphicon glyphicon-fast-forward"></span>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="panel panel-default">
                            <div class="panel-body" style="padding-bottom: 0px;">
                                <div class="row">
                                    <div class="col-md-6"></div>
                                    <div class="col-md-6">
                                        <dl class="dl-horizontal">
                                            <dt>
                                                <b>Total</b>
                                            </dt>
                                            <dd>
                                                <input type="text" class="form-control numberField" id="inpJournalVoucherAdjustmentTotalAdjustments" placeholder="0.00" disabled />
                                            </dd>
                                        </dl>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </section>

            @Html.Partial("_SoftwareFooter")
        </main>
    </div>
    <div id="c-mask" class="c-mask"></div>

    @Scripts.Render("~/Scripts/Software-js")
    <script type="text/javascript">
        // ===============================================
        // Bank Reconciliation Header Dropdowns and Filter
        // ===============================================
        var cboBankReconciliationBankFilter = new wijmo.input.ComboBox('#cboBankReconciliationBankFilterReconciliationBankFilter');
        var cboBankReconciliationBankFilterReconciliationStartDateFilter = new wijmo.input.InputDate('#cboBankReconciliationBankFilterReconciliationStartDateFilter');
        var cboBankReconciliationBankFilterReconciliationEndDateFilter = new wijmo.input.InputDate('#cboBankReconciliationBankFilterReconciliationEndDateFilter');
        var isCboBankReconciliationBankFilterReconciliationStartDateFilterSelected = false;
        var isCboBankReconciliationBankFilterReconciliationEndDateFilterSelected = false;

        // =========================================================================
        // Collection (Deposits) - Collection View, Flex Grid and Navigation Buttons
        // =========================================================================
        var collectionDepositsCollectionView;
        var collectionDepositsFlexGrid = new wijmo.grid.FlexGrid('#collectionDepositsFlexGrid');
        var cboCollectionDepositsDisplayNumberOfRows = new wijmo.input.ComboBox('#cboCollectionDepositsDisplayNumberOfRows');
        var btnCollectionDepositsMoveToFirstPageGrid = document.getElementById('btnCollectionDepositsMoveToFirstPageGrid');
        var btnCollectionDepositsMoveToPreviousPageGrid = document.getElementById('btnCollectionDepositsMoveToPreviousPageGrid');
        var btnCollectionDepositsMoveToNextPageGrid = document.getElementById('btnCollectionDepositsMoveToNextPageGrid');
        var btnCollectionDepositsMoveToLastPageGrid = document.getElementById('btnCollectionDepositsMoveToLastPageGrid');
        var btnCollectionDepositsCurrentPageGrid = document.getElementById('btnCollectionDepositsCurrentPageGrid');

        // ==============================================================================
        // Disbursement (Withdrawals) - Collection View, Flex Grid and Navigation Buttons
        // ==============================================================================
        var disbursementWithdrawalsCollectionView;
        var disbursementWithdrawalsFlexGrid = new wijmo.grid.FlexGrid('#disbursementWithdrawalsFlexGrid');
        var cboDisbursementWithdrawalsDisplayNumberOfRows = new wijmo.input.ComboBox('#cboDisbursementWithdrawalsDisplayNumberOfRows');
        var btnDisbursementWithdrawalsMoveToFirstPageGrid = document.getElementById('btnDisbursementWithdrawalsMoveToFirstPageGrid');
        var btnDisbursementWithdrawalsMoveToPreviousPageGrid = document.getElementById('btnDisbursementWithdrawalsMoveToPreviousPageGrid');
        var btnDisbursementWithdrawalsMoveToNextPageGrid = document.getElementById('btnDisbursementWithdrawalsMoveToNextPageGrid');
        var btnDisbursementWithdrawalsMoveToLastPageGrid = document.getElementById('btnDisbursementWithdrawalsMoveToLastPageGrid');
        var btnDisbursementWithdrawalsCurrentPageGrid = document.getElementById('btnDisbursementWithdrawalsCurrentPageGrid');

        // =================================================================================
        // Journal Voucher (Adjustments) - Collection View, Flex Grid and Navigation Buttons
        // =================================================================================
        var journalVoucherAdjustmentsCollectionView;
        var journalVoucherLineGrid = new wijmo.grid.FlexGrid('#journalVoucherAdjustmentsFlexGrid');
        var cboJournalVoucherAdjustmentsDisplayNumberOfRows = new wijmo.input.ComboBox('#cboJournalVoucherAdjustmentsDisplayNumberOfRows');
        var btnJournalVoucherAdjustmentsMoveToFirstPageGrid = document.getElementById('btnJournalVoucherAdjustmentsMoveToFirstPageGrid');
        var btnJournalVoucherAdjustmentsMoveToPreviousPageGrid = document.getElementById('btnJournalVoucherAdjustmentsMoveToPreviousPageGrid');
        var btnJournalVoucherAdjustmentMoveToNextPageGrid = document.getElementById('btnJournalVoucherAdjustmentMoveToNextPageGrid');
        var btnJournalVoucherAdjustmentMoveToLastPageGrid = document.getElementById('btnJournalVoucherAdjustmentMoveToLastPageGrid');
        var btnJournalVoucherAdjustmentsCurrentPageGrid = document.getElementById('btnJournalVoucherAdjustmentsCurrentPageGrid');

        // ============
        // Tab Controls
        // ============
        var isCollectionDepositsTabClicked = false;
        var isDisbursementWithdrawalsTabClicked = false;
        var isJournalVoucherAdjustmentsTabClicked = false;

        // ==================
        // Current Page Index
        // ==================
        var collectionDepositsCurrentPageIndex = 0;
        var disbursementWithdrawalsCurrentPageIndex = 0;
        var journalVoucherAdjustmentsCurrentPageGrid = 0;

        // ========================
        // Create Combo Bank Filter
        // ========================
        function createCboBankFilter() {
            var banksObservableArray = new wijmo.collections.ObservableArray;

            $.ajax({
                url: '/api/bankReconciliation/dropdown/list/bank',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            banksObservableArray.push({
                                Id: results[i]["Id"],
                                Article: results[i]["Article"]
                            });
                        }
                    }

                    cboBankReconciliationBankFilter.dispose();
                    cboBankReconciliationBankFilter = new wijmo.input.ComboBox('#cboBankReconciliationBankFilterReconciliationBankFilter', {
                        isEditable: false,
                        itemsSource: banksObservableArray,
                        displayMemberPath: "Article",
                        selectedValuePath: "Id",
                        onSelectedIndexChanged: function () {
                            createCollectionLineFlexGrid();
                        }
                    });

                    createCboDateRangedFilter();
                }
            });
        }

        // ==============================
        // Create Combo Date Range Filter
        // ==============================
        function createCboDateRangedFilter() {
            cboBankReconciliationBankFilterReconciliationStartDateFilter.dispose();
            cboBankReconciliationBankFilterReconciliationStartDateFilter = new wijmo.input.InputDate('#cboBankReconciliationBankFilterReconciliationStartDateFilter', {
                format: 'MM-dd-yyyy',
                value: new Date(),
                onValueChanged: function () {
                    if (isCboBankReconciliationBankFilterReconciliationStartDateFilterSelected) {
                        createCollectionLineFlexGrid();
                    } else {
                        isCboBankReconciliationBankFilterReconciliationStartDateFilterSelected = true;
                    }
                }
            });

            cboBankReconciliationBankFilterReconciliationEndDateFilter.dispose();
            cboBankReconciliationBankFilterReconciliationEndDateFilter = new wijmo.input.InputDate('#cboBankReconciliationBankFilterReconciliationEndDateFilter', {
                format: 'MM-dd-yyyy',
                value: new Date(),
                onValueChanged: function () {
                    if (isCboBankReconciliationBankFilterReconciliationEndDateFilterSelected) {
                        createCollectionLineFlexGrid();
                    } else {
                        isCboBankReconciliationBankFilterReconciliationEndDateFilterSelected = true;
                    }
                }
            });

            createCboDisplayNumberOfTableRows();
        }

        // =========================================
        // Create Combo Display Number of Table Rows
        // =========================================
        function createCboDisplayNumberOfTableRows() {
            var rowsObservableArray = new wijmo.collections.ObservableArray();

            for (var i = 0; i <= 4; i++) {
                var rows = 0;
                var rowsString = "";

                if (i == 0) {
                    rows = 15;
                    rowsString = "Show 15 Rows";
                } else if (i == 1) {
                    rows = 50;
                    rowsString = "Show 50 Rows";
                } else if (i == 2) {
                    rows = 100;
                    rowsString = "Show 100 Rows";
                } else if (i == 3) {
                    rows = 150;
                    rowsString = "Show 150 Rows";
                } else {
                    rows = 200;
                    rowsString = "Show 200 Rows";
                }

                rowsObservableArray.push({
                    rowNumber: rows,
                    rowString: rowsString
                });
            }

            cboCollectionDepositsDisplayNumberOfRows.dispose();
            cboCollectionDepositsDisplayNumberOfRows = new wijmo.input.ComboBox('#cboCollectionDepositsDisplayNumberOfRows', {
                isEditable: false,
                itemsSource: rowsObservableArray,
                displayMemberPath: "rowString",
                selectedValuePath: "rowNumber",
                selectedValue: 50,
                onSelectedIndexChanged: function () {
                    NProgress.start();

                    setTimeout(function () {
                        var numberOfRows = cboCollectionDepositsDisplayNumberOfRows.selectedValue;
                        collectionDepositsCollectionView.pageSize = parseInt(numberOfRows);
                        collectionDepositsCollectionView.refresh();
                        collectionDepositsFlexGrid.refresh();

                        NProgress.done();
                    }, 300);
                }
            });

            cboDisbursementWithdrawalsDisplayNumberOfRows.dispose();
            cboDisbursementWithdrawalsDisplayNumberOfRows = new wijmo.input.ComboBox('#cboDisbursementWithdrawalsDisplayNumberOfRows', {
                isEditable: false,
                itemsSource: rowsObservableArray,
                displayMemberPath: "rowString",
                selectedValuePath: "rowNumber",
                selectedValue: 50,
                onSelectedIndexChanged: function () {
                    NProgress.start();

                    setTimeout(function () {
                        var numberOfRows = cboDisbursementWithdrawalsDisplayNumberOfRows.selectedValue;
                        disbursementWithdrawalsCollectionView.pageSize = parseInt(numberOfRows);
                        disbursementWithdrawalsCollectionView.refresh();
                        disbursementWithdrawalsFlexGrid.refresh();

                        NProgress.done();
                    }, 300);
                }
            });

            cboJournalVoucherAdjustmentsDisplayNumberOfRows.dispose();
            cboJournalVoucherAdjustmentsDisplayNumberOfRows = new wijmo.input.ComboBox('#cboJournalVoucherAdjustmentsDisplayNumberOfRows', {
                isEditable: false,
                itemsSource: rowsObservableArray,
                displayMemberPath: "rowString",
                selectedValuePath: "rowNumber",
                selectedValue: 50,
                onSelectedIndexChanged: function () {
                    NProgress.start();

                    setTimeout(function () {
                        var numberOfRows = cboJournalVoucherAdjustmentsDisplayNumberOfRows.selectedValue;
                        journalVoucherAdjustmentsCollectionView.pageSize = parseInt(numberOfRows);
                        journalVoucherAdjustmentsCollectionView.refresh();
                        journalVoucherLineGrid.refresh();

                        NProgress.done();
                    }, 300);
                }
            });

            createCollectionLineFlexGrid();
        }

        // ============================
        // Get Collection Deposits Data
        // ============================
        function getCollectionDepositsData() {
            NProgress.start();
            var collectionDepositsObservableArray = new wijmo.collections.ObservableArray;

            var startDate = cboBankReconciliationBankFilterReconciliationStartDateFilter.value.toLocaleDateString().replace(/\//g, '-');
            var endDate = cboBankReconciliationBankFilterReconciliationEndDateFilter.value.toLocaleDateString().replace(/\//g, '-');

            if (cboBankReconciliationBankFilter.selectedValue != null) {
                var depositoryBankId = cboBankReconciliationBankFilter.selectedValue;

                $.ajax({
                    url: '/api/bankReconciliation/collectionLine/list/' + depositoryBankId + "/" + startDate + "/" + endDate,
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    success: function (results) {
                        var inpCollectionDepositsTotalInTransitAmount = 0;
                        if (results.length > 0) {
                            for (i = 0; i < results.length; i++) {
                                var inTransitAmount = results[i]["Amount"];

                                if (results[i]["IsClear"]) {
                                    inTransitAmount = 0;
                                }

                                inpCollectionDepositsTotalInTransitAmount += inTransitAmount;

                                var ORDateResult = new Date(results[i]["ORDate"])
                                var ORDate = ('0' + (ORDateResult.getMonth() + 1)).slice(-2) + '-' + ('0' + ORDateResult.getDate()).slice(-2) + '-' + ORDateResult.getFullYear();

                                var CheckDateResult = new Date(results[i]["CheckDate"])
                                var CheckDate = ('0' + (CheckDateResult.getMonth() + 1)).slice(-2) + '-' + ('0' + CheckDateResult.getDate()).slice(-2) + '-' + CheckDateResult.getFullYear();

                                collectionDepositsObservableArray.push({
                                    Id: results[i]["Id"],
                                    ORNumber: results[i]["ORNumber"],
                                    ORDate: ORDate,
                                    Customer: results[i]["Customer"],
                                    PayType: results[i]["PayType"],
                                    CheckNumber: results[i]["CheckNumber"],
                                    CheckDate: CheckDate,
                                    Amount: results[i]["Amount"],
                                    AmountDisplay: parseFloat(results[i]["Amount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                    IsClear: results[i]["IsClear"],
                                    InTransit: inTransitAmount,
                                    InTransitDisplay: parseFloat(inTransitAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                    IsClearHtml: results[i]["IsClear"] == true ? "<button class='btn btn-default btn-xs btn-block' onclick='clearCollectionDepositsIntransit()'><i class='fa fa-eraser'></i> Unclear</button>" : "<button class='btn btn-primary btn-xs btn-block' onclick='clearCollectionDepositsIntransit()'><i class='fa fa-eraser'></i> Clear</button>"
                                });
                            }
                        }

                        document.getElementById("inpCollectionDepositsTotalInTransit").value = parseFloat(inpCollectionDepositsTotalInTransitAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        document.getElementById("inpBankReconciliationTotalDepositInTransit").value = parseFloat(inpCollectionDepositsTotalInTransitAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        NProgress.done();

                        createDisbursementWithdrawalsFlexGrid();
                    }
                });
            }

            return collectionDepositsObservableArray;
        }

        // ====================================
        // Create Collection Deposits Flex Grid
        // ====================================
        function createCollectionLineFlexGrid() {
            collectionDepositsCollectionView = new wijmo.collections.CollectionView(getCollectionDepositsData());
            collectionDepositsCollectionView.canFilter = true;
            collectionDepositsCollectionView.pageSize = cboCollectionDepositsDisplayNumberOfRows.selectedValue;

            var filterText = '';
            $('#inpCollectionDepositsSearchFilter').keyup(function () {
                filterText = this.value.toLowerCase();
                collectionDepositsCollectionView.refresh();
            });

            collectionDepositsCollectionView.filter = function (item) {
                return !filterText || (item.ORNumber.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Customer.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.PayType.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.CheckNumber.toLowerCase().indexOf(filterText) > -1);
            }

            collectionDepositsCollectionView.collectionChanged.addHandler(function (sender, args) {
                updateCollectionDepositsNavigationButtons();
            });

            collectionDepositsFlexGrid.dispose();
            collectionDepositsFlexGrid = new wijmo.grid.FlexGrid('#collectionDepositsFlexGrid');
            collectionDepositsFlexGrid.initialize({
                    columns: [
                        {
                            "header": "OR Number",
                            "binding": "ORNumber",
                            "allowSorting": true,
                            "isReadOnly": true,
                            "width": 100
                        },
                        {
                            "header": "OR Date",
                            "binding": "ORDate",
                            "allowSorting": true,
                            "isReadOnly": true,
                            "width": 100
                        },
                        {
                            "header": "Customer",
                            "binding": "Customer",
                            "allowSorting": true,
                            "isReadOnly": true,
                            "width": "3*"
                        },
                        {
                            "header": "Pay Type",
                            "binding": "PayType",
                            "allowSorting": true,
                            "isReadOnly": true,
                            "width": "2*"
                        },
                        {
                            "header": "Check No.",
                            "binding": "CheckNumber",
                            "allowSorting": true,
                            "isReadOnly": true,
                            "width": "1.5*"
                        },
                        {
                            "header": "Check Date",
                            "binding": "CheckDate",
                            "allowSorting": true,
                            "isReadOnly": true,
                            "width": 100
                        },
                        {
                            "header": "Amount",
                            "binding": "AmountDisplay",
                            "allowSorting": true,
                            "align": "right",
                            "isReadOnly": true,
                            "width": "2*"
                        },
                        @{
                            if (canEdit)
                            {
                                <text>
                                    {
                                        "header": "Clear",
                                        "binding": "IsClearHtml",
                                        "allowSorting": true,
                                        "isReadOnly": true,
                                        "isContentHtml": true,
                                        "align": "center",
                                        "width": 80
                                    },
                                </text>
                            }
                        }
                        {
                            "header": "In Transit",
                            "binding": "InTransitDisplay",
                            "allowSorting": true,
                            "align": "right",
                            "isReadOnly": true,
                            "width": "2*"
                        },
                        {
                            "header": "C",
                            "binding": "IsClear",
                            "allowSorting": true,
                            "isReadOnly": true,
                            "width": 45
                        },
                    ],
                autoGenerateColumns: false,
                itemsSource: collectionDepositsCollectionView,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            collectionDepositsFlexGrid.trackChanges = true;

            if (!isCollectionDepositsTabClicked) {
                updateCollectionDepositsNavigationButtons();

                btnCollectionDepositsMoveToFirstPageGrid.addEventListener('click', function () {
                    collectionDepositsCollectionView.moveToFirstPage();
                    collectionDepositsCurrentPageIndex = collectionDepositsCollectionView.pageIndex + 1;
                    updateCollectionDepositsNavigationButtons();
                });

                btnCollectionDepositsMoveToPreviousPageGrid.addEventListener('click', function () {
                    collectionDepositsCollectionView.moveToPreviousPage();
                    collectionDepositsCurrentPageIndex = collectionDepositsCollectionView.pageIndex + 1;
                    updateCollectionDepositsNavigationButtons();
                });

                btnCollectionDepositsMoveToNextPageGrid.addEventListener('click', function () {
                    collectionDepositsCollectionView.moveToNextPage();
                    collectionDepositsCurrentPageIndex = collectionDepositsCollectionView.pageIndex + 1;
                    updateCollectionDepositsNavigationButtons();
                });

                btnCollectionDepositsMoveToLastPageGrid.addEventListener('click', function () {
                    collectionDepositsCollectionView.moveToLastPage();
                    collectionDepositsCurrentPageIndex = collectionDepositsCollectionView.pageIndex + 1;
                    updateCollectionDepositsNavigationButtons();
                });

                isCollectionDepositsTabClicked = true
            }
        }

        // =============================================
        // Update Collection Deposits Navigation Buttons
        // =============================================
        function updateCollectionDepositsNavigationButtons() {
            if (collectionDepositsCollectionView.pageSize <= 0) {
                document.getElementById('collectionDepositsNavigationPageGrid').style.display = 'none';
                return;
            }
            document.getElementById('collectionDepositsNavigationPageGrid').style.display = 'block';
            if (collectionDepositsCollectionView.pageIndex === 0) {
                btnCollectionDepositsMoveToFirstPageGrid.setAttribute('disabled', 'disabled');
                btnCollectionDepositsMoveToPreviousPageGrid.setAttribute('disabled', 'disabled');
                btnCollectionDepositsMoveToNextPageGrid.removeAttribute('disabled');
                btnCollectionDepositsMoveToLastPageGrid.removeAttribute('disabled');
            } else if (collectionDepositsCollectionView.pageIndex === (collectionDepositsCollectionView.pageCount - 1)) {
                btnCollectionDepositsMoveToFirstPageGrid.removeAttribute('disabled');
                btnCollectionDepositsMoveToPreviousPageGrid.removeAttribute('disabled');
                btnCollectionDepositsMoveToLastPageGrid.setAttribute('disabled', 'disabled');
                btnCollectionDepositsMoveToNextPageGrid.setAttribute('disabled', 'disabled');
            } else {
                btnCollectionDepositsMoveToFirstPageGrid.removeAttribute('disabled');
                btnCollectionDepositsMoveToPreviousPageGrid.removeAttribute('disabled');
                btnCollectionDepositsMoveToNextPageGrid.removeAttribute('disabled');
                btnCollectionDepositsMoveToLastPageGrid.removeAttribute('disabled');
            }
            btnCollectionDepositsCurrentPageGrid.innerHTML = (collectionDepositsCollectionView.pageIndex + 1) + ' / ' + collectionDepositsCollectionView.pageCount;
        }

        // ======================================
        // Clear Collection Deposits (In transit)
        // ======================================
        function clearCollectionDepositsIntransit() {
            collectionDepositsCollectionView.editItem(collectionDepositsCollectionView.currentItem);
            var collectionLineItem = collectionDepositsCollectionView.currentEditItem;
            $.ajax({
                url: '/api/bankReconciliation/collectionLine/update/isClearField/' + collectionLineItem.Id,
                type: "PUT",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function (isClear) {
                        if (isClear) {
                            toastr.success("Clear Successful");

                            collectionLineItem.InTransit = 0;
                            collectionLineItem.InTransitDisplay = formatDecimalValues(0);
                            collectionLineItem.IsClearHtml = "<button class='btn btn-default btn-xs btn-block' onclick='clearCollectionDepositsIntransit()'><i class='fa fa-eraser'></i> Unclear</button>";
                            collectionLineItem.IsClear = true;
                        } else {
                            toastr.success("Unclear Successful");

                            collectionLineItem.InTransit = collectionLineItem.Amount;
                            collectionLineItem.InTransitDisplay = parseFloat(collectionLineItem.Amount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                            collectionLineItem.IsClearHtml = "<button class='btn btn-primary btn-xs btn-block' onclick='clearCollectionDepositsIntransit()'><i class='fa fa-eraser'></i> Clear</button>";
                            collectionLineItem.IsClear = false;
                        }

                        collectionDepositsCollectionView.refresh();
                        collectionDepositsFlexGrid.refresh();

                        var inpCollectionDepositsTotalInTransitValue = 0;

                        collectionDepositsCollectionView.moveToFirstPage();
                        for (var p = 1; p <= collectionDepositsCollectionView.pageCount; p++) {
                            for (i = 0; i < collectionDepositsCollectionView.items.length; i++) {
                                inpCollectionDepositsTotalInTransitValue += parseFloat(collectionDepositsCollectionView.items[i]["InTransit"]);
                            }

                            collectionDepositsCollectionView.moveToNextPage();
                            if (p == collectionDepositsCollectionView.pageCount) {
                                collectionDepositsCollectionView.moveToPage(collectionDepositsCurrentPageIndex - 1);
                            }
                        }

                        document.getElementById("inpCollectionDepositsTotalInTransit").value = parseFloat(inpCollectionDepositsTotalInTransitValue).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        document.getElementById("inpBankReconciliationTotalDepositInTransit").value = parseFloat(inpCollectionDepositsTotalInTransitValue).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");

                        computeEndingBalancePerBank();
                    },
                    404: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                    },
                    400: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                    },
                    500: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                    }
                }
            });
        }

        // =================================
        // Get Disbursement Withdrawals Data
        // =================================
        function getDisbursementWithdrawalsData() {
            NProgress.start();
            var disbursementWithdrawalsObservableArray = new wijmo.collections.ObservableArray;

            var startDate = cboBankReconciliationBankFilterReconciliationStartDateFilter.value.toLocaleDateString().replace(/\//g, '-');
            var endDate = cboBankReconciliationBankFilterReconciliationEndDateFilter.value.toLocaleDateString().replace(/\//g, '-');

            if (cboBankReconciliationBankFilter.selectedValue != null) {
                var bankId = cboBankReconciliationBankFilter.selectedValue;

                $.ajax({
                    url: '/api/bankReconciliation/disbursement/list/' + bankId + '/' + startDate + '/' + endDate,
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    success: function (results) {
                        var totalOutStanding = 0;
                        if (results.length > 0) {
                            var totalOutStandingAmount = 0;
                            for (i = 0; i < results.length; i++) {
                                var outstandingAmount = results[i]["Amount"];
                                if (results[i]["IsClear"]) {
                                    outstandingAmount = 0;
                                }

                                totalOutStanding += outstandingAmount;

                                var CVDateResult = new Date(results[i]["CVDate"])
                                var CVDate = ('0' + (CVDateResult.getMonth() + 1)).slice(-2) + '-' + ('0' + CVDateResult.getDate()).slice(-2) + '-' + CVDateResult.getFullYear();

                                var CheckDateResult = new Date(results[i]["CheckDate"])
                                var CheckDate = ('0' + (CheckDateResult.getMonth() + 1)).slice(-2) + '-' + ('0' + CheckDateResult.getDate()).slice(-2) + '-' + CheckDateResult.getFullYear();

                                disbursementWithdrawalsObservableArray.push({
                                    Id: results[i]["Id"],
                                    CVNumber: results[i]["CVNumber"],
                                    CVDate: CVDate,
                                    Payee: results[i]["Payee"],
                                    PayType: results[i]["PayType"],
                                    CheckNumber: results[i]["CheckNumber"],
                                    CheckDate: CheckDate,
                                    Amount: results[i]["Amount"],
                                    AmountDisplay: parseFloat(results[i]["Amount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                    IsClear: results[i]["IsClear"],
                                    IsClearHtml: results[i]["IsClear"] == true ? "<button class='btn btn-default btn-xs btn-block' onclick='clearDisbursementWithdrawalsOutstanding()'><i class='fa fa-eraser'></i> Unclear</button>" : "<button class='btn btn-primary btn-xs btn-block' onclick='clearDisbursementWithdrawalsOutstanding()'><i class='fa fa-eraser'></i> Clear</button>",
                                    OutstandingAmount: outstandingAmount,
                                    OutstandingAmountDisplay: parseFloat(outstandingAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")
                                });
                            }
                        }

                        document.getElementById("inpDisbursementWithdrawalsTotalOutstanding").value = parseFloat(totalOutStanding).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        document.getElementById("inpBankReconciliationTotalOutstandingWithdrawals").value = parseFloat(totalOutStanding).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        NProgress.done();

                        createJournalVoucherAdjustmentsFlexGrid();
                    }
                });
            }

            return disbursementWithdrawalsObservableArray;
        }

        // =========================================
        // Create Disbursement Withdrawals Flex Grid
        // =========================================
        function createDisbursementWithdrawalsFlexGrid() {
            disbursementWithdrawalsCollectionView = new wijmo.collections.CollectionView(getDisbursementWithdrawalsData());
            disbursementWithdrawalsCollectionView.canFilter = true;
            disbursementWithdrawalsCollectionView.pageSize = cboDisbursementWithdrawalsDisplayNumberOfRows.selectedValue;

            var filterText = '';
            $('#inpDisbursementWithdrawalsSearchFilter').keyup(function () {
                filterText = this.value.toLowerCase();
                disbursementWithdrawalsCollectionView.refresh();
            });

            disbursementWithdrawalsCollectionView.filter = function (item) {
                return !filterText || (item.CVNumber.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Payee.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.PayType.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.CheckNumber.toLowerCase().indexOf(filterText) > -1);
            }

            disbursementWithdrawalsCollectionView.collectionChanged.addHandler(function (sender, args) {
                updateDisbursementWithdrawalsNavigateButtons();
            });

            disbursementWithdrawalsFlexGrid.dispose();
            disbursementWithdrawalsFlexGrid = new wijmo.grid.FlexGrid('#disbursementWithdrawalsFlexGrid');
            disbursementWithdrawalsFlexGrid.initialize({
                    columns: [
                        {
                            "header": "CV Number",
                            "binding": "CVNumber",
                            "allowSorting": true,
                            "isReadOnly": true,
                            "width": 100
                        },
                        {
                            "header": "CV Date",
                            "binding": "CVDate",
                            "allowSorting": true,
                            "isReadOnly": true,
                            "width": 100
                        },
                        {
                            "header": "Payee",
                            "binding": "Payee",
                            "allowSorting": true,
                            "isReadOnly": true,
                            "width": "3*"
                        },
                        {
                            "header": "Pay Type",
                            "binding": "PayType",
                            "allowSorting": true,
                            "isReadOnly": true,
                            "width": "2*"
                        },
                        {
                            "header": "Check No.",
                            "binding": "CheckNumber",
                            "allowSorting": true,
                            "isReadOnly": true,
                            "width": "1.5*"
                        },
                        {
                            "header": "Check Date",
                            "binding": "CheckDate",
                            "allowSorting": true,
                            "isReadOnly": true,
                            "width": 100
                        },
                        {
                            "header": "Amount",
                            "binding": "AmountDisplay",
                            "allowSorting": true,
                            "align": "right",
                            "isReadOnly": true,
                            "width": "2*"
                        },
                        @{
                            if (canEdit)
                            {
                                <text>
                                    {
                                        "header": "Clear",
                                        "binding": "IsClearHtml",
                                        "allowSorting": true,
                                        "isReadOnly": true,
                                        "isContentHtml": true,
                                        "align": "center",
                                        "width": 80
                                    },
                                </text>
                            }
                        }
                        {
                            "header": "Outstanding",
                            "binding": "OutstandingAmountDisplay",
                            "allowSorting": true,
                            "align": "right",
                            "isReadOnly": true,
                            "width": "2*"
                        },
                        {
                            "header": "C",
                            "binding": "IsClear",
                            "allowSorting": true,
                            "isReadOnly": true,
                            "width": 45
                        },
                    ],
                autoGenerateColumns: false,
                itemsSource: disbursementWithdrawalsCollectionView,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            disbursementWithdrawalsFlexGrid.trackChanges = true;

            if (!isDisbursementWithdrawalsTabClicked) {
                updateDisbursementWithdrawalsNavigateButtons();

                btnDisbursementWithdrawalsMoveToFirstPageGrid.addEventListener('click', function () {
                    disbursementWithdrawalsCollectionView.moveToFirstPage();
                    disbursementWithdrawalsCurrentPageIndex = disbursementWithdrawalsCollectionView.pageIndex + 1;
                    updateDisbursementWithdrawalsNavigateButtons();
                });

                btnDisbursementWithdrawalsMoveToPreviousPageGrid.addEventListener('click', function () {
                    disbursementWithdrawalsCollectionView.moveToPreviousPage();
                    disbursementWithdrawalsCurrentPageIndex = disbursementWithdrawalsCollectionView.pageIndex + 1;
                    updateDisbursementWithdrawalsNavigateButtons();
                });

                btnDisbursementWithdrawalsMoveToNextPageGrid.addEventListener('click', function () {
                    disbursementWithdrawalsCollectionView.moveToNextPage();
                    disbursementWithdrawalsCurrentPageIndex = disbursementWithdrawalsCollectionView.pageIndex + 1;
                    updateDisbursementWithdrawalsNavigateButtons();
                });

                btnDisbursementWithdrawalsMoveToLastPageGrid.addEventListener('click', function () {
                    disbursementWithdrawalsCollectionView.moveToLastPage();
                    disbursementWithdrawalsCurrentPageIndex = disbursementWithdrawalsCollectionView.pageIndex + 1;
                    updateDisbursementWithdrawalsNavigateButtons();
                });

                isDisbursementWithdrawalsTabClicked = true
            }
        }

        // ==================================================
        // Update Disbursement Withdrawals Navigation Buttons
        // ==================================================
        function updateDisbursementWithdrawalsNavigateButtons() {
            if (disbursementWithdrawalsCollectionView.pageSize <= 0) {
                document.getElementById('disbursementWithdrawalsNavigationPageGrid').style.display = 'none';
                return;
            }
            document.getElementById('disbursementWithdrawalsNavigationPageGrid').style.display = 'block';
            if (disbursementWithdrawalsCollectionView.pageIndex === 0) {
                btnDisbursementWithdrawalsMoveToFirstPageGrid.setAttribute('disabled', 'disabled');
                btnDisbursementWithdrawalsMoveToPreviousPageGrid.setAttribute('disabled', 'disabled');
                btnDisbursementWithdrawalsMoveToNextPageGrid.removeAttribute('disabled');
                btnDisbursementWithdrawalsMoveToLastPageGrid.removeAttribute('disabled');
            } else if (disbursementWithdrawalsCollectionView.pageIndex === (disbursementWithdrawalsCollectionView.pageCount - 1)) {
                btnDisbursementWithdrawalsMoveToFirstPageGrid.removeAttribute('disabled');
                btnDisbursementWithdrawalsMoveToPreviousPageGrid.removeAttribute('disabled');
                btnDisbursementWithdrawalsMoveToLastPageGrid.setAttribute('disabled', 'disabled');
                btnDisbursementWithdrawalsMoveToNextPageGrid.setAttribute('disabled', 'disabled');
            } else {
                btnDisbursementWithdrawalsMoveToFirstPageGrid.removeAttribute('disabled');
                btnDisbursementWithdrawalsMoveToPreviousPageGrid.removeAttribute('disabled');
                btnDisbursementWithdrawalsMoveToNextPageGrid.removeAttribute('disabled');
                btnDisbursementWithdrawalsMoveToLastPageGrid.removeAttribute('disabled');
            }
            btnDisbursementWithdrawalsCurrentPageGrid.innerHTML = (disbursementWithdrawalsCollectionView.pageIndex + 1) + ' / ' + disbursementWithdrawalsCollectionView.pageCount;
        }

        // ============================================
        // Clear Disbursement Withdrawals (Outstanding)
        // ============================================
        function clearDisbursementWithdrawalsOutstanding() {
            disbursementWithdrawalsCollectionView.editItem(disbursementWithdrawalsCollectionView.currentItem);
            var disbursementItem = disbursementWithdrawalsCollectionView.currentEditItem;
            $.ajax({
                url: '/api/bankReconciliation/disbursement/update/isClearField/' + disbursementItem.Id,
                type: "PUT",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function (isClear) {
                        if (isClear) {
                            toastr.success("Clear Successful");

                            disbursementItem.OutstandingAmount = 0;
                            disbursementItem.OutstandingAmountDisplay = formatDecimalValues(0);
                            disbursementItem.IsClearHtml = "<button class='btn btn-default btn-xs btn-block' onclick='clearDisbursementWithdrawalsOutstanding()'><i class='fa fa-eraser'></i> Unclear</button>";
                            disbursementItem.IsClear = true;
                        } else {
                            toastr.success("Unclear Successful");

                            disbursementItem.OutstandingAmount = disbursementItem.Amount;
                            disbursementItem.OutstandingAmountDisplay = parseFloat(disbursementItem.Amount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                            disbursementItem.IsClearHtml = "<button class='btn btn-primary btn-xs btn-block' onclick='clearDisbursementWithdrawalsOutstanding()'><i class='fa fa-eraser'></i> Clear</button>";
                            disbursementItem.IsClear = false;
                        }

                        disbursementWithdrawalsCollectionView.refresh();
                        disbursementWithdrawalsFlexGrid.refresh();

                        var totalOutStandingAmount = 0;

                        disbursementWithdrawalsCollectionView.moveToFirstPage();
                        for (var p = 1; p <= disbursementWithdrawalsCollectionView.pageCount; p++) {
                            for (i = 0; i < disbursementWithdrawalsCollectionView.items.length; i++) {
                                totalOutStandingAmount += parseFloat(disbursementWithdrawalsCollectionView.items[i]["OutstandingAmount"]);
                            }

                            disbursementWithdrawalsCollectionView.moveToNextPage();
                            if (p == disbursementWithdrawalsCollectionView.pageCount) {
                                disbursementWithdrawalsCollectionView.moveToPage(disbursementWithdrawalsCurrentPageIndex - 1);
                            }
                        }

                        document.getElementById("inpDisbursementWithdrawalsTotalOutstanding").value = parseFloat(totalOutStandingAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        document.getElementById("inpBankReconciliationTotalOutstandingWithdrawals").value = parseFloat(totalOutStandingAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");

                        computeEndingBalancePerBank();
                    },
                    404: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                    },
                    400: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                    },
                    500: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                    }
                }
            });
        }

        // ====================================
        // Get Journal Voucher Adjustments Data
        // ====================================
        function getJournalVoucherAdjustmentsData() {
            NProgress.start();
            var journalVoucherAdjustmentsCollectionViewObservableArray = new wijmo.collections.ObservableArray;

            var startDate = cboBankReconciliationBankFilterReconciliationStartDateFilter.value.toLocaleDateString().replace(/\//g, '-');
            var endDate = cboBankReconciliationBankFilterReconciliationEndDateFilter.value.toLocaleDateString().replace(/\//g, '-');

            if (cboBankReconciliationBankFilter.selectedValue != null) {
                var articleId = cboBankReconciliationBankFilter.selectedValue;

                $.ajax({
                    url: '/api/bankReconciliation/journalVoucherLine/list/' + articleId + '/' + startDate + '/' + endDate,
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    success: function (results) {
                        var inpJournalVoucherAdjustmentTotalAdjustmentsAmount = 0;
                        if (results.length > 0) {
                            for (i = 0; i < results.length; i++) {
                                var balance = results[i]["DebitAmount"] - results[i]["CreditAmount"]
                                var adjusmentAmount = balance;
                                if (results[i]["IsClear"] == true) {
                                    adjusmentAmount = 0;
                                }

                                inpJournalVoucherAdjustmentTotalAdjustmentsAmount += adjusmentAmount;

                                var JVDateResult = new Date(results[i]["JVDate"])
                                var JVDate = ('0' + (JVDateResult.getMonth() + 1)).slice(-2) + '-' + ('0' + JVDateResult.getDate()).slice(-2) + '-' + JVDateResult.getFullYear();

                                journalVoucherAdjustmentsCollectionViewObservableArray.push({
                                    Id: results[i]["Id"],
                                    JVNumber: results[i]["JVNumber"],
                                    JVDate: JVDate,
                                    Particulars: results[i]["Particulars"],
                                    DebitAmount: results[i]["DebitAmount"],
                                    DebitAmountDisplay: parseFloat(results[i]["DebitAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                    CreditAmount: results[i]["CreditAmount"],
                                    CreditAmountDisplay: parseFloat(results[i]["CreditAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                    BalanceAmount: results[i]["BalanceAmount"],
                                    BalanceAmountDisplay: parseFloat(results[i]["BalanceAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                    IsClear: results[i]["IsClear"],
                                    IsClearHtml: results[i]["IsClear"] == true ? "<button class='btn btn-default btn-xs btn-block' onclick='clearJournalVoucherBalance()'><i class='fa fa-eraser'></i> Unclear</button>" : "<button class='btn btn-primary btn-xs btn-block' onclick='clearJournalVoucherBalance()'><i class='fa fa-eraser'></i> Clear</button>",
                                    Adjustments: adjusmentAmount,
                                    AdjustmentsDisplay: parseFloat(adjusmentAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                });
                            }
                        }

                        document.getElementById("inpJournalVoucherAdjustmentTotalAdjustments").value = parseFloat(inpJournalVoucherAdjustmentTotalAdjustmentsAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        document.getElementById("inpBankReconciliationTotalAdjustments").value = parseFloat(inpJournalVoucherAdjustmentTotalAdjustmentsAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        computeEndingBalancePerBank();
                        NProgress.done();
                    }
                });

            }

            return journalVoucherAdjustmentsCollectionViewObservableArray;
        }

        // ============================================
        // Create Journal Voucher Adjustments Flex Grid
        // ============================================
        function createJournalVoucherAdjustmentsFlexGrid() {
            journalVoucherAdjustmentsCollectionView = new wijmo.collections.CollectionView(getJournalVoucherAdjustmentsData());
            journalVoucherAdjustmentsCollectionView.canFilter = true;
            journalVoucherAdjustmentsCollectionView.pageSize = cboJournalVoucherAdjustmentsDisplayNumberOfRows.selectedValue;

            var filterText = '';
            $('#inpJournalVoucherAdjustmentsSearchFilter').keyup(function () {
                filterText = this.value.toLowerCase();
                journalVoucherAdjustmentsCollectionView.refresh();
            });

            journalVoucherAdjustmentsCollectionView.filter = function (item) {
                return !filterText || (item.JVNumber.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Particulars.toLowerCase().indexOf(filterText) > -1);
            }

            journalVoucherAdjustmentsCollectionView.collectionChanged.addHandler(function (sender, args) {
                updateJournalVoucherAdjustmentsNavigationButtons();
            });

            journalVoucherLineGrid.dispose();
            journalVoucherLineGrid = new wijmo.grid.FlexGrid('#journalVoucherAdjustmentsFlexGrid');
            journalVoucherLineGrid.initialize({
                columns: [
                    {
                        "header": "JV Number",
                        "binding": "JVNumber",
                        "allowSorting": true,
                        "isReadOnly": true,
                        "width": 130
                    },
                    {
                        "header": "JV Date",
                        "binding": "JVDate",
                        "allowSorting": true,
                        "isReadOnly": true,
                        "width": 100
                    },
                    {
                        "header": "Particulars",
                        "binding": "Particulars",
                        "allowSorting": true,
                        "isReadOnly": true,
                        "width": "3*"
                    },
                    {
                        "header": "Debit",
                        "binding": "DebitAmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "isReadOnly": true,
                        "width": "2*"
                    },
                    {
                        "header": "Credit",
                        "binding": "CreditAmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "isReadOnly": true,
                        "width": "2*"
                    },
                    {
                        "header": "Balance",
                        "binding": "BalanceAmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "isReadOnly": true,
                        "width": "2*"
                    },
                    @{
                        if (canEdit)
                        {
                            <text>
                                {
                                    "header": "Clear",
                                    "binding": "IsClearHtml",
                                    "allowSorting": true,
                                    "isReadOnly": true,
                                    "isContentHtml": true,
                                    "align": "center",
                                    "width": 80
                                },
                            </text>
                        }
                    }
                    {
                        "header": "Adjustments",
                        "binding": "AdjustmentsDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "isReadOnly": true,
                        "width": "2*"
                    },
                    {
                        "header": "C",
                        "binding": "IsClear",
                        "allowSorting": true,
                        "isReadOnly": true,
                        "width": 45
                    },
                ],
                autoGenerateColumns: false,
                itemsSource: journalVoucherAdjustmentsCollectionView,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            journalVoucherLineGrid.trackChanges = true;

            if (!isJournalVoucherAdjustmentsTabClicked) {
                updateJournalVoucherAdjustmentsNavigationButtons();

                btnJournalVoucherAdjustmentsMoveToFirstPageGrid.addEventListener('click', function () {
                    journalVoucherAdjustmentsCollectionView.moveToFirstPage();
                    journalVoucherAdjustmentsCurrentPageGrid = btnJournalVoucherAdjustmentsMoveToFirstPageGrid.pageIndex + 1;
                    updateJournalVoucherAdjustmentsNavigationButtons();
                });

                btnJournalVoucherAdjustmentsMoveToPreviousPageGrid.addEventListener('click', function () {
                    journalVoucherAdjustmentsCollectionView.moveToPreviousPage();
                    journalVoucherAdjustmentsCurrentPageGrid = btnJournalVoucherAdjustmentsMoveToFirstPageGrid.pageIndex + 1;
                    updateJournalVoucherAdjustmentsNavigationButtons();
                });

                btnJournalVoucherAdjustmentMoveToNextPageGrid.addEventListener('click', function () {
                    journalVoucherAdjustmentsCollectionView.moveToNextPage();
                    journalVoucherAdjustmentsCurrentPageGrid = btnJournalVoucherAdjustmentsMoveToFirstPageGrid.pageIndex + 1;
                    updateJournalVoucherAdjustmentsNavigationButtons();
                });

                btnJournalVoucherAdjustmentMoveToLastPageGrid.addEventListener('click', function () {
                    journalVoucherAdjustmentsCollectionView.moveToLastPage();
                    journalVoucherAdjustmentsCurrentPageGrid = btnJournalVoucherAdjustmentsMoveToFirstPageGrid.pageIndex + 1;
                    updateJournalVoucherAdjustmentsNavigationButtons();
                });

                isJournalVoucherAdjustmentsTabClicked = true
            }
        }

        // =====================================================
        // Update Journal Voucher Adjustments Navigation Buttons
        // =====================================================
        function updateJournalVoucherAdjustmentsNavigationButtons() {
            if (journalVoucherAdjustmentsCollectionView.pageSize <= 0) {
                document.getElementById('journalVoucherAdjustmentsNavigationPageGrid').style.display = 'none';
                return;
            }
            document.getElementById('journalVoucherAdjustmentsNavigationPageGrid').style.display = 'block';
            if (journalVoucherAdjustmentsCollectionView.pageIndex === 0) {
                btnJournalVoucherAdjustmentsMoveToFirstPageGrid.setAttribute('disabled', 'disabled');
                btnJournalVoucherAdjustmentsMoveToPreviousPageGrid.setAttribute('disabled', 'disabled');
                btnJournalVoucherAdjustmentMoveToNextPageGrid.removeAttribute('disabled');
                btnJournalVoucherAdjustmentMoveToLastPageGrid.removeAttribute('disabled');
            } else if (journalVoucherAdjustmentsCollectionView.pageIndex === (journalVoucherAdjustmentsCollectionView.pageCount - 1)) {
                btnJournalVoucherAdjustmentsMoveToFirstPageGrid.removeAttribute('disabled');
                btnJournalVoucherAdjustmentsMoveToPreviousPageGrid.removeAttribute('disabled');
                btnJournalVoucherAdjustmentMoveToLastPageGrid.setAttribute('disabled', 'disabled');
                btnJournalVoucherAdjustmentMoveToNextPageGrid.setAttribute('disabled', 'disabled');
            } else {
                btnJournalVoucherAdjustmentsMoveToFirstPageGrid.removeAttribute('disabled');
                btnJournalVoucherAdjustmentsMoveToPreviousPageGrid.removeAttribute('disabled');
                btnJournalVoucherAdjustmentMoveToNextPageGrid.removeAttribute('disabled');
                btnJournalVoucherAdjustmentMoveToLastPageGrid.removeAttribute('disabled');
            }
            btnJournalVoucherAdjustmentsCurrentPageGrid.innerHTML = (journalVoucherAdjustmentsCollectionView.pageIndex + 1) + ' / ' + journalVoucherAdjustmentsCollectionView.pageCount;
        }

        // ================================
        // Clear Journal Voucher (Adjutment)
        // ================================
        function clearJournalVoucherBalance() {
            journalVoucherAdjustmentsCollectionView.editItem(journalVoucherAdjustmentsCollectionView.currentItem);
            var journalVoucherLineItem = journalVoucherAdjustmentsCollectionView.currentEditItem;
            $.ajax({
                url: '/api/bankReconciliation/journalVoucherLine/update/isClearField/' + journalVoucherLineItem.Id,
                type: "PUT",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function (isClear) {
                        if (isClear) {
                            toastr.success("Clear Successful");

                            journalVoucherLineItem.Adjustments = 0;
                            journalVoucherLineItem.AdjustmentsDisplay = formatDecimalValues(0);
                            journalVoucherLineItem.IsClearHtml = "<button class='btn btn-default btn-xs btn-block' onclick='clearJournalVoucherBalance()'><i class='fa fa-eraser'></i> Unclear</button>";
                            journalVoucherLineItem.IsClear = true;
                        } else {
                            toastr.success("Unclear Successful");

                            journalVoucherLineItem.Adjustments = journalVoucherLineItem.BalanceAmount;
                            journalVoucherLineItem.AdjustmentsDisplay = parseFloat(journalVoucherLineItem.BalanceAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                            journalVoucherLineItem.IsClearHtml = "<button class='btn btn-primary btn-xs btn-block' onclick='clearJournalVoucherBalance()'><i class='fa fa-eraser'></i> Clear</button>";
                            journalVoucherLineItem.IsClear = false;
                        }

                        journalVoucherAdjustmentsCollectionView.refresh();
                        journalVoucherLineGrid.refresh();

                        var totalAdjustmentAmount = 0;

                        journalVoucherAdjustmentsCollectionView.moveToFirstPage();
                        for (var p = 1; p <= journalVoucherAdjustmentsCollectionView.pageCount; p++) {
                            for (i = 0; i < journalVoucherAdjustmentsCollectionView.items.length; i++) {
                                totalAdjustmentAmount += parseFloat(journalVoucherAdjustmentsCollectionView.items[i]["Adjustments"]);
                            }

                            journalVoucherAdjustmentsCollectionView.moveToNextPage();
                            if (p == journalVoucherAdjustmentsCollectionView.pageCount) {
                                journalVoucherAdjustmentsCollectionView.moveToPage(journalVoucherAdjustmentsCurrentPageGrid - 1);
                            }
                        }

                        document.getElementById("inpJournalVoucherAdjustmentTotalAdjustments").value = parseFloat(totalAdjustmentAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        document.getElementById("inpBankReconciliationTotalAdjustments").value = parseFloat(totalAdjustmentAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");

                        computeEndingBalancePerBank();
                    },
                    404: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                    },
                    400: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                    },
                    500: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                    }
                }
            });
        }

        // ===============================
        // Compute Ending Balance Per Bank
        // ===============================
        function computeEndingBalancePerBank() {
            var endingbalance = document.getElementById('inpBankReconciliationEndingBalanceAsPerBank').value;
            var deposit = document.getElementById('inpBankReconciliationTotalDepositInTransit').value;
            var withdrawal = document.getElementById('inpBankReconciliationTotalOutstandingWithdrawals').value;
            var adjustment = document.getElementById('inpBankReconciliationTotalAdjustments').value;

            var replaceEndingBalance = parseFloat(endingbalance.replace(/\,/g, ''));
            var replaceDeposit = parseFloat(deposit.replace(/\,/g, ''));
            var replaceWithdrawal = parseFloat(withdrawal.replace(/\,/g, ''));
            var replaceAdjustment = parseFloat(adjustment.replace(/\,/g, ''));

            var adjustedEndingBalance = parseFloat(((replaceEndingBalance - replaceDeposit) + replaceWithdrawal) - replaceAdjustment).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");

            document.getElementById("inpBankReconciliationAdjustedEndingBalanceAsPerBank").value = adjustedEndingBalance;
        }

        $('#inpBankReconciliationEndingBalanceAsPerBank').keyup(function () {
            computeEndingBalancePerBank();
        });

        // ================================
        // Bank Reconciliation Close Button
        // ================================
        function btnBankReconciliationCloseOnclick() {
            window.location = '/Software';
        }

        // =================
        // Tabs and Controls
        // =================
        $('#collectionDeposits').click(function () {
            $('#tabCollectionDeposits').show();
            $('#tabDisbursementWithdrawals').hide();
            $('#tabJournalVoucherAdjustments').hide();
            createCollectionLineFlexGrid();
        });

        $('#disbursementWithdrawals').click(function () {
            $('#tabCollectionDeposits').hide();
            $('#tabDisbursementWithdrawals').show();
            $('#tabJournalVoucherAdjustments').hide();
            createDisbursementWithdrawalsFlexGrid();
        });

        $('#journalVoucherAdjustments').click(function () {
            $('#tabCollectionDeposits').hide();
            $('#tabDisbursementWithdrawals').hide();
            $('#tabJournalVoucherAdjustments').show();
            createJournalVoucherAdjustmentsFlexGrid();
        });

        // =================
        // Download CSV File
        // =================
        function btnBankReconciliationDownloadCSVOnclick() {
            var CSV = '';

            var bankReconciliationHeaderValues = [];
            bankReconciliationHeaderValues.push({
                Bank: "Bank",
                DateStart: "Date Start",
                DateEnd: "Date End",
                EndingBalanceAsPerBank: "Ending Balance As Per Bank",
                TotalDepositInTransit: "Total Deposit In Transit",
                TotalOutstandingWithdrawals: "Total Outstanding Withdrawals",
                TotalAdjustments: "Total Adjustments",
                AdjustedEndingBalanceAsPerBank: "Adjusted Ending Balance As Per Bank",
            });

            var bankReconciliationHeader = '';
            for (var bh in bankReconciliationHeaderValues[0]) {
                bankReconciliationHeader += '"' + bankReconciliationHeaderValues[0][bh] + '",';
            }

            var EndingBalanceAsPerBankData = document.getElementById("inpBankReconciliationEndingBalanceAsPerBank").value;
            var TotalDepositInTransitData = document.getElementById("inpBankReconciliationTotalDepositInTransit").value;
            var TotalOutstandingWithdrawalsData = document.getElementById("inpBankReconciliationTotalOutstandingWithdrawals").value;
            var TotalAdjustmentsData = document.getElementById("inpBankReconciliationTotalAdjustments").value;
            var AdjustedEndingBalanceAsPerBankData = document.getElementById("inpBankReconciliationAdjustedEndingBalanceAsPerBank").value;

            var bankReconciliationData = [];
            bankReconciliationData.push({
                Bank: cboBankReconciliationBankFilter.selectedItem["Article"],
                DateStart: cboBankReconciliationBankFilterReconciliationStartDateFilter.value.toLocaleDateString().replace(/\//g, '-'),
                DateEnd: cboBankReconciliationBankFilterReconciliationEndDateFilter.value.toLocaleDateString().replace(/\//g, '-'),
                EndingBalanceAsPerBank: EndingBalanceAsPerBankData,
                TotalDepositInTransit: TotalDepositInTransitData,
                TotalOutstandingWithdrawals: TotalOutstandingWithdrawalsData,
                TotalAdjustments: TotalAdjustmentsData,
                AdjustedEndingBalanceAsPerBank: AdjustedEndingBalanceAsPerBankData,
            });

            CSV = bankReconciliationHeader + '\r\n';
            for (var i = 0; i < bankReconciliationData.length; i++) {
                var row = '';
                for (var data in bankReconciliationData[i]) {
                    row += '"' + bankReconciliationData[i][data] + '",';
                }

                row.slice(0, row.length - 1);
                CSV += row + '\r\n';
            }

            CSV += '\r\r';

            var collectionLineHeaderValues = [];
            collectionLineHeaderValues.push({
                ORNumber: "OR Number",
                ORDate: "OR Date",
                Customer: "Customer",
                PayType: "Pay Type",
                CheckNumber: "Check Number",
                CheckDate: "Check Date",
                Amount: "Amount",
                IsClear: "Is Clear",
                InTransit: "In Transit"
            });

            var collectionLineHeader = '';
            for (var ch in collectionLineHeaderValues[0]) {
                collectionLineHeader += '"' + collectionLineHeaderValues[0][ch] + '",';
            }

            var collectionDepositsCollectionViewDepositReport = [];

            collectionDepositsCollectionView.moveToFirstPage();
            for (var p = 1; p <= collectionDepositsCollectionView.pageCount; p++) {
                for (i = 0; i < collectionDepositsCollectionView.items.length; i++) {;
                    var isClearValue = "Not Cleared";
                    if (collectionDepositsCollectionView.items[i].IsClear) {
                        var isClearValue = "Cleared";
                    }

                    collectionDepositsCollectionViewDepositReport.push({
                        ORNumber: "OR-" + collectionDepositsCollectionView.items[i].ORNumber,
                        ORDate: collectionDepositsCollectionView.items[i].ORDate,
                        Customer: collectionDepositsCollectionView.items[i].Customer,
                        PayType: collectionDepositsCollectionView.items[i].PayType,
                        CheckNumber: collectionDepositsCollectionView.items[i].CheckNumber,
                        CheckDate: collectionDepositsCollectionView.items[i].CheckDate,
                        Amount: collectionDepositsCollectionView.items[i].Amount,
                        IsClear: isClearValue,
                        InTransit: collectionDepositsCollectionView.items[i].InTransit
                    });
                }

                collectionDepositsCollectionView.moveToNextPage();
                if (p == collectionDepositsCollectionView.pageCount) {
                    collectionDepositsCollectionView.moveToPage(collectionDepositsCurrentPageIndex - 1);
                }
            }

            CSV += collectionLineHeader + '\r\n';
            for (var i = 0; i < collectionDepositsCollectionViewDepositReport.length; i++) {
                var row = '';
                for (var data in collectionDepositsCollectionViewDepositReport[i]) {
                    row += '"' + collectionDepositsCollectionViewDepositReport[i][data] + '",';
                }

                row.slice(0, row.length - 1);
                CSV += row + '\r\n';
            }

            CSV += '\r\r';

            var disbursementHeaderValues = [];
            disbursementHeaderValues.push({
                CVNumber: "CV Number",
                CVDate: "CV Date",
                Payee: "Payee",
                PayType: "Pay Type",
                CheckNumber: "Check Number",
                CheckDate: "Check Date",
                Amount: "Amount",
                IsClear: "Is Clear",
                OutstandingAmount: "Outstanding"
            });

            var disbursementHeader = '';
            for (var dh in disbursementHeaderValues[0]) {
                disbursementHeader += '"' + disbursementHeaderValues[0][dh] + '",';
            }

            var disbursemenWithdrawalsReport = [];

            disbursementWithdrawalsCollectionView.moveToFirstPage();
            for (var p = 1; p <= disbursementWithdrawalsCollectionView.pageCount; p++) {
                for (i = 0; i < disbursementWithdrawalsCollectionView.items.length; i++) {
                    var isClearValue = "Not Cleared";
                    if (disbursementWithdrawalsCollectionView.items[i].IsClear) {
                        var isClearValue = "Cleared";
                    }

                    disbursemenWithdrawalsReport.push({
                        CVNumber: "CV-" + disbursementWithdrawalsCollectionView.items[i].CVNumber,
                        CVDate: disbursementWithdrawalsCollectionView.items[i].CVDate,
                        Payee: disbursementWithdrawalsCollectionView.items[i].Payee,
                        PayType: disbursementWithdrawalsCollectionView.items[i].PayType,
                        CheckNumber: disbursementWithdrawalsCollectionView.items[i].CheckNumber,
                        CheckDate: disbursementWithdrawalsCollectionView.items[i].CheckDate,
                        Amount: disbursementWithdrawalsCollectionView.items[i].Amount,
                        IsClear: isClearValue,
                        OutstandingAmount: disbursementWithdrawalsCollectionView.items[i].OutstandingAmount
                    });
                }

                disbursementWithdrawalsCollectionView.moveToNextPage();
                if (p == disbursementWithdrawalsCollectionView.pageCount) {
                    disbursementWithdrawalsCollectionView.moveToPage(disbursementWithdrawalsCurrentPageIndex - 1);
                }
            }

            CSV += disbursementHeader + '\r\n';
            for (var i = 0; i < disbursemenWithdrawalsReport.length; i++) {
                var row = '';
                for (var data in disbursemenWithdrawalsReport[i]) {
                    row += '"' + disbursemenWithdrawalsReport[i][data] + '",';
                }

                row.slice(0, row.length - 1);
                CSV += row + '\r\n';
            }

            CSV += '\r\r';

            var journalVoucherLineHeaderValues = [];
            journalVoucherLineHeaderValues.push({
                JVNumber: "JV Number",
                JVDate: "JV Date",
                Particulars: "Particulars",
                DebitAmount: "Debit Amount",
                CreditAmount: "Credit Amount",
                BalanceAmount: "Balance Amount",
                IsClear: "Is Clear",
                Adjustments: "Adjustments"
            });

            var journalVoucherLineHeader = '';
            for (var jh in journalVoucherLineHeaderValues[0]) {
                journalVoucherLineHeader += '"' + journalVoucherLineHeaderValues[0][jh] + '",';
            }

            var journalVoucherLineAdjustmentsReport = [];

            journalVoucherAdjustmentsCollectionView.moveToFirstPage();
            for (var p = 1; p <= journalVoucherAdjustmentsCollectionView.pageCount; p++) {
                for (i = 0; i < journalVoucherAdjustmentsCollectionView.items.length; i++) {
                    var isClearValue = "Not Cleared";
                    if (journalVoucherAdjustmentsCollectionView.items[i].IsClear) {
                        var isClearValue = "Cleared";
                    }

                    journalVoucherLineAdjustmentsReport.push({
                        JVNumber: "JV-" + journalVoucherAdjustmentsCollectionView.items[i].JVNumber,
                        JVDate: journalVoucherAdjustmentsCollectionView.items[i].JVDate,
                        Particulars: journalVoucherAdjustmentsCollectionView.items[i].Particulars,
                        DebitAmount: journalVoucherAdjustmentsCollectionView.items[i].DebitAmount,
                        CreditAmount: journalVoucherAdjustmentsCollectionView.items[i].CreditAmount,
                        BalanceAmount: journalVoucherAdjustmentsCollectionView.items[i].BalanceAmount,
                        IsClear: isClearValue,
                        Adjustments: journalVoucherAdjustmentsCollectionView.items[i].Adjustments
                    });
                }

                journalVoucherAdjustmentsCollectionView.moveToNextPage();
                if (p == journalVoucherAdjustmentsCollectionView.pageCount) {
                    journalVoucherAdjustmentsCollectionView.moveToPage(journalVoucherAdjustmentsCurrentPageGrid - 1);
                }
            }

            CSV += journalVoucherLineHeader + '\r\n';
            for (var i = 0; i < journalVoucherLineAdjustmentsReport.length; i++) {
                var row = '';
                for (var data in journalVoucherLineAdjustmentsReport[i]) {
                    row += '"' + journalVoucherLineAdjustmentsReport[i][data] + '",';
                }

                row.slice(0, row.length - 1);
                CSV += row + '\r\n';
            }

            var fileName = cboBankReconciliationBankFilter.selectedItem["Article"] + '_BankReconciliation.CSV';
            if (CSV == '') {
                toastr.error("No data.");
            } else {
                var link = document.createElement("a");
                if (link.download !== undefined) {
                    var blob = new Blob([CSV], { type: 'text/csv;charset=utf-8;' });
                    var url = URL.createObjectURL(blob);
                    link.setAttribute("href", url);
                    link.setAttribute("download", fileName);
                    link.style = "visibility:hidden";
                }

                if (navigator.msSaveBlob) {
                    link.addEventListener("click", function (event) {
                        var blob = new Blob([CSV], {
                            "type": "text/csv;charset=utf-8;"
                        });
                        navigator.msSaveBlob(blob, fileName);
                    }, false);
                }

                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);

                toastr.success("Dowload successful.");
            }
        }

        // =============================
        // Document Ready - On load Page
        // =============================
        $(document).ready(function () {
            document.getElementById('inpBankReconciliationEndingBalanceAsPerBank').value = formatDecimalValues(0);
            createCboBankFilter();
            $('#tabCollectionDeposits').show();
            $('#tabDisbursementWithdrawals').hide();
            $('#tabJournalVoucherAdjustments').hide();
        });
    </script>
    <script type="text/javascript">
        // =================
        // User Branch Combo
        // =================
        var cboUserBranches = new wijmo.input.ComboBox('#cboUserBranches');

        // =========================
        // Get Current User Branches
        // =========================
        function getUserBranches() {
            $("#loadingUserBranches").show();
            document.getElementById("loadingUserBranches").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#userBranchContent").hide();

            $('#userBranchesModal').modal({ show: true, backdrop: 'static' });

            document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
            $("#updateUserBranch").prop("disabled", false);
            $("#closeUserBranch").prop("disabled", false);

            var userBranchesObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/userBranch/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (userBranchesResults) {
                    if (userBranchesResults.length > 0) {
                        for (i = 0; i < userBranchesResults.length; i++) {
                            userBranchesObservableArray.push({
                                BranchId: userBranchesResults[i]["BranchId"],
                                Branch: userBranchesResults[i]["Branch"]
                            });
                        }
                    }

                    var currentBranch = "@ViewData["BranchId"]";
                    cboUserBranches.dispose();
                    cboUserBranches = new wijmo.input.ComboBox('#cboUserBranches', {
                        isEditable: false,
                        placeholder: "Select Branches",
                        itemsSource: userBranchesObservableArray,
                        displayMemberPath: "Branch",
                        selectedValuePath: "BranchId",
                        selectedValue: currentBranch
                    });

                    setTimeout(function () {
                        $("#loadingUserBranches").hide();
                        $("#userBranchContent").show();
                    }, 500)
                }
            });
        }

        // ==========================
        // Update Current User Branch
        // ==========================
        function updateUserBranchOnclick() {
            document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Updating";
            $("#updateUserBranch").prop("disabled", true);
            $("#closeUserBranch").prop("disabled", true);

            var userBranchObject = new Object();
            userBranchObject.BranchId = cboUserBranches.selectedValue;
            var userBranchData = JSON.stringify(userBranchObject);

            $.ajax({
                type: "PUT",
                url: '/api/userBranch/update',
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: userBranchData,
                statusCode: {
                    200: function () {
                        toastr.success("Update Successful");
                        window.setTimeout(function () {
                            location.reload()
                        }, 1000);
                    },
                    404: function () {
                        toastr.error("Not Found");
                        document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
                        $("#updateUserBranch").prop("disabled", false);
                        $("#closeUserBranch").prop("disabled", false);
                    },
                    500: function () {
                        toastr.error("Bad Request");
                        document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
                        $("#updateUserBranch").prop("disabled", false);
                        $("#closeUserBranch").prop("disabled", false);
                    }
                }
            });
        }
    </script>
    <script type="text/javascript">
        // ======================
        // Side Bar Menu Settings
        // ======================
        var slideLeft = new Menu({
            wrapper: '#o-wrapper',
            type: 'slide-left',
            menuOpenerClass: '.c-button',
            maskId: '#c-mask'
        });

        var slideLeftBtn = document.querySelector('#c-button--slide-left');

        slideLeftBtn.addEventListener('click', function (e) {
            e.preventDefault;
            slideLeft.open();
        });
    </script>
</body>
</html>