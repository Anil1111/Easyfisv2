@model easyfis.Entities.MstUserForm
@{
    // =====================
    // User Rights Variables
    // =====================
    var canAdd = Model.CanAdd;
    var canEdit = Model.CanEdit;
    var canDelete = Model.CanDelete;
    var canLock = Model.CanLock;
    var canUnlock = Model.CanUnlock;
    var canPrint = Model.CanPrint;
}
<!DOCTYPE html>
<html>
<head>
    <!-- Meta -->
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">

    <!-- Title of the Page -->
    <link rel="shortcut icon" href="~/Images/icon/easyfislogomini.ico">
    <title>Bank Reconciliation</title>

    <!-- CSS StyleSheets-->
    @Styles.Render("~/Content/Software-css")
</head>
<body>
    <div id="o-wrapper" class="o-wrapper">
        <main class="o-content">
            @Html.Partial("_SoftwareHeader")
            <section class="content-header">
                <div class="container">
                    <h3>
                        Bank Reconciliation 
                    </h3>
                    <p>
                        <i class="fa fa-building-o fa-fw"></i> &nbsp; @ViewData["Company"] <br />
                        <i class="fa fa-home fa-fw"></i> &nbsp; <a href="#" onclick="getUserBranches()" style="color: white;">@ViewData["Branch"]</a>
                    </p>
                </div>
            </section>
            <section class="container">
                <div class="panel panel-default">
                    <div class="panel-heading">
                        <div class="row">
                            <div class="col-md-12" align="right">
                                @*<button class="btn btn-primary " id="" onclick="btnBankReconciliationPrint_OnClick()"><i class="fa fa-print"></i> Print</button>*@
                                <button class="btn btn-danger " id="" onclick="btnBankReconciliationClose_OnClick()"><i class=" fa fa-times"></i> Close</button>
                            </div>
                        </div>
                    </div>
                    <div class="panel-body">
                        <form class="form-horizontal" role="form">
                            <div class="row">
                                <div class="col-md-5">
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Bank</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="bankReconciliationBank"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Date Start</label>
                                        <div class="col-sm-8">
                                            <div class="" id="bankReconciliationStartDate"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Date End</label>
                                        <div class="col-sm-8">
                                            <div class="" id="bankReconciliationEndDate"></div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-7">
                                    <div class="form-group">
                                        <label class="control-label col-sm-6">Ending Balance as per Bank</label>
                                        <div class="col-sm-6">
                                            <input type="text" class="form-control  numberField " id="bankReconciliationEndingBalanceAsPerBank" placeholder="0.00" />
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-6">Total Deposit in Transit</label>
                                        <div class="col-sm-6">
                                            <input type="text" class="form-control  numberField " id="bankReconciliationTotalDepositInTransit" disabled />
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-6">Total Outstanding Withdrawals</label>
                                        <div class="col-sm-6">
                                            <input type="text" class="form-control  numberField " id="bankReconciliationTotalOutstandingWithdrawals"disabled />
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-6">Total Adjustments</label>
                                        <div class="col-sm-6">
                                            <input type="text" class="form-control  numberField " id="bankReconciliationTotalAdjustments" disabled />
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-6">Adjusted Ending Balance as per Bank</label>
                                        <div class="col-sm-6">
                                            <input type="text" class="form-control  numberField " id="bankReconciliationAdjustedEndingBalanceAsPerBank" disabled />
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6"></div>
                            </div>
                        </form>
                    </div>
                </div>
                <ul class="nav nav-tabs pill-custom" role="tablist" id="myTab">
                    <li role="presentation" class="active"><a data-toggle="tab" href="#deposits" id="depositsCollection">Deposits (Collection)</a></li>
                    <li role="presentation"><a data-toggle="tab" href="#withdrwals" id="withdrwalsDisbursment">Withdrawals (Disbursement)</a></li>
                    <li role="presentation"><a data-toggle="tab" href="#adjustments" id="adjustmentsJournalVoucher">Adjustments (Journal Voucher)</a></li>
                </ul>
                <br />
                <div class="tab-content">
                    <div id="deposits" class="tab-pane fade in active" style="margin-bottom: 15px;">
                        <div id="collectionLineGrid"></div>
                        <br /><br />
                        <div class="row">
                            <div class="col-md-6">

                            </div>
                            <div class="col-md-6">
                                <dl class="dl-horizontal">
                                    <dt>
                                        <b>Total</b>
                                    </dt>
                                    <dd>
                                        <input type="text" class="form-control numberField" id="totalInTransit" placeholder="0.00" disabled />
                                    </dd>
                                </dl>
                            </div>
                        </div>
                    </div>
                    <div id="withdrwals" class="tab-pane fade in"  style="margin-bottom: 15px;">
                        <div id="disbursementGrid"></div>
                        <br /><br />
                        <div class="row">
                            <div class="col-md-6">

                            </div>
                            <div class="col-md-6">
                                <dl class="dl-horizontal">
                                    <dt>
                                        <b>Total</b>
                                    </dt>
                                    <dd>
                                        <input type="text" class="form-control numberField" id="totalOutstanding" placeholder="0.00" disabled />
                                    </dd>
                                </dl>
                            </div>
                        </div>
                    </div>
                    <div id="adjustments" class="tab-pane fade in">
                        <div id="adjustmentGrid"></div>
                        <br /><br />
                        <div class="row">
                            <div class="col-md-6">

                            </div>
                            <div class="col-md-6">
                                <dl class="dl-horizontal">
                                    <dt>
                                        <b>Total</b>
                                    </dt>
                                    <dd>
                                        <input type="text" class="form-control numberField" id="totalAdjustments" placeholder="0.00" disabled />
                                    </dd>
                                </dl>
                            </div>
                        </div>
                    </div>
                </div>
            </section>
            @Html.Partial("_SoftwareFooter")
        </main>
    </div>
    <div id="c-mask" class="c-mask"></div>

    @Scripts.Render("~/Scripts/Software-js")
    <script type="text/javascript">
        // ================
        // Global Variables
        // ================
        var cboBank = new wijmo.input.ComboBox('#bankReconciliationBank');
        var bankReconciliationStartDate = new wijmo.input.InputDate('#bankReconciliationStartDate');
        var bankReconciliationEndDate = new wijmo.input.InputDate('#bankReconciliationEndDate');
        var collectionLines;
        var collectionLineGrid = new wijmo.grid.FlexGrid('#collectionLineGrid');
        var disbursements;
        var disbursementGrid = new wijmo.grid.FlexGrid('#disbursementGrid');
        var journalVoucherLines;
        var journalVoucherLineGrid = new wijmo.grid.FlexGrid('#adjustmentGrid');
        var isStartDateSelected = false;
        var isEndDateSelected = false;

        // ========
        // Get Bank
        // ========
        function getBank() {
            var banksObservableArray = new wijmo.collections.ObservableArray;
            $.ajax({
                url: '/api/bankReconciliation/dropdown/list/bank',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            banksObservableArray.push({
                                Id: results[i]["Id"],
                                Article: results[i]["Article"]
                            });
                        }
                    }

                    cboBank.dispose();
                    cboBank = new wijmo.input.ComboBox('#bankReconciliationBank', {
                        isEditable: false,
                        itemsSource: banksObservableArray,
                        displayMemberPath: "Article",
                        selectedValuePath: "Id",
                        onSelectedIndexChanged: function () {
                            createCollectionLineFlexGrid();
                        }
                    });

                    bankReconciliationDate();
                }
            });
        }

        // ==========
        // Date Range
        // ==========
        function bankReconciliationDate() {
            bankReconciliationStartDate.dispose();
            bankReconciliationStartDate = new wijmo.input.InputDate('#bankReconciliationStartDate', {
                format: 'MM-dd-yyyy',
                value: new Date(),
                onValueChanged: function () {
                    if (isStartDateSelected) {
                        createCollectionLineFlexGrid();
                    } else {
                        isStartDateSelected = true;
                    }
                }
            });

            bankReconciliationEndDate.dispose();
            bankReconciliationEndDate = new wijmo.input.InputDate('#bankReconciliationEndDate', {
                format: 'MM-dd-yyyy',
                value: new Date(),
                onValueChanged: function () {
                    if (isEndDateSelected) {
                        createCollectionLineFlexGrid();
                    } else {
                        isEndDateSelected = true;
                    }
                }
            });

            createCollectionLineFlexGrid();
        }

        // ========================
        // GET Collection Line List
        // ========================
        function getCollectionLines() {
            NProgress.start();
            var collectionLinesObservableArray = new wijmo.collections.ObservableArray;

            var startDate = bankReconciliationStartDate.value.toLocaleDateString().replace(/\//g, '-');
            var endDate = bankReconciliationEndDate.value.toLocaleDateString().replace(/\//g, '-');

            if (cboBank.selectedValue != null) {
                var depositoryBankId = cboBank.selectedValue;

                $.ajax({
                    url: '/api/bankReconciliation/collectionLine/list/' + depositoryBankId + "/" + startDate + "/" + endDate,
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    success: function (results) {
                        var totalInTransitAmount = 0;
                        if (results.length > 0) {
                            for (i = 0; i < results.length; i++) {
                                var inTransitAmount = results[i]["Amount"];

                                if (results[i]["IsClear"]) {
                                    inTransitAmount = 0;
                                }

                                totalInTransitAmount += inTransitAmount;

                                var ORDateResult = new Date(results[i]["ORDate"])
                                var ORDate = ('0' + (ORDateResult.getMonth() + 1)).slice(-2) + '-' + ('0' + ORDateResult.getDate()).slice(-2) + '-' + ORDateResult.getFullYear();

                                var CheckDateResult = new Date(results[i]["CheckDate"])
                                var CheckDate = ('0' + (CheckDateResult.getMonth() + 1)).slice(-2) + '-' + ('0' + CheckDateResult.getDate()).slice(-2) + '-' + CheckDateResult.getFullYear();

                                collectionLinesObservableArray.push({
                                    Id: results[i]["Id"],
                                    ORNumber: results[i]["ORNumber"],
                                    ORDate: ORDate,
                                    Customer: results[i]["Customer"],
                                    PayType: results[i]["PayType"],
                                    CheckNumber: results[i]["CheckNumber"],
                                    CheckDate: CheckDate,
                                    Amount: results[i]["Amount"],
                                    AmountDisplay: parseFloat(results[i]["Amount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                    IsClear: results[i]["IsClear"],
                                    InTransit: inTransitAmount,
                                    InTransitDisplay: parseFloat(inTransitAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                    IsClearHtml: results[i]["IsClear"] == true ? "<button class='btn btn-default btn-xs btn-block' onclick='clearAmountIntransit()'><i class='fa fa-eraser'></i> Unclear</button>" : "<button class='btn btn-primary btn-xs btn-block' onclick='clearAmountIntransit()'><i class='fa fa-eraser'></i> Clear</button>"
                                });
                            }
                        }

                        document.getElementById("totalInTransit").value = parseFloat(totalInTransitAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        document.getElementById("bankReconciliationTotalDepositInTransit").value = parseFloat(totalInTransitAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        NProgress.done();

                        createDisbursementFlexGrid();
                    }
                });
            }

            return collectionLinesObservableArray;
        }

        // =========================
        // collection line flex Grid
        // =========================
        function createCollectionLineFlexGrid() {
            collectionLines = new wijmo.collections.CollectionView(getCollectionLines());

            collectionLineGrid.dispose();
            collectionLineGrid = new wijmo.grid.FlexGrid('#collectionLineGrid');
            collectionLineGrid.initialize({
                    columns: [
                        {
                            "header": "OR Number",
                            "binding": "ORNumber",
                            "allowSorting": true,
                            "isReadOnly": true,
                            "width": 100
                        },
                        {
                            "header": "OR Date",
                            "binding": "ORDate",
                            "allowSorting": true,
                            "isReadOnly": true,
                            "width": 100
                        },
                        {
                            "header": "Customer",
                            "binding": "Customer",
                            "allowSorting": true,
                            "isReadOnly": true,
                            "width": "3*"
                        },
                        {
                            "header": "Pay Type",
                            "binding": "PayType",
                            "allowSorting": true,
                            "isReadOnly": true,
                            "width": "2*"
                        },
                        {
                            "header": "Check No.",
                            "binding": "CheckNumber",
                            "allowSorting": true,
                            "isReadOnly": true,
                            "width": "1.5*"
                        },
                        {
                            "header": "Check Date",
                            "binding": "CheckDate",
                            "allowSorting": true,
                            "isReadOnly": true,
                            "width": 100
                        },
                        {
                            "header": "Amount",
                            "binding": "AmountDisplay",
                            "allowSorting": true,
                            "align": "right",
                            "isReadOnly": true,
                            "width": "2*"
                        },
                        {
                            "header": "Clear",
                            "binding": "IsClearHtml",
                            "allowSorting": true,
                            "isReadOnly": true,
                            "isContentHtml": true,
                            "align": "center",
                            "width": 80
                        },
                        {
                            "header": "In Transit",
                            "binding": "InTransitDisplay",
                            "allowSorting": true,
                            "align": "right",
                            "isReadOnly": true,
                            "width": "2*"
                        },
                        {
                            "header": "C",
                            "binding": "IsClear",
                            "allowSorting": true,
                            "isReadOnly": true,
                            "width": 45
                        },
                    ],
                autoGenerateColumns: false,
                itemsSource: collectionLines,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            collectionLineGrid.trackChanges = true;
        }

        // ========================
        // Clear Amount - Intransit
        // ========================
        function clearAmountIntransit() {
            collectionLines.editItem(collectionLines.currentItem);
            var collectionLineItem = collectionLines.currentEditItem;
            $.ajax({
                url: '/api/bankReconciliation/collectionLine/update/isClearField/' + collectionLineItem.Id,
                type: "PUT",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function (isClear) {
                        if (isClear) {
                            toastr.success("Clear Successful");

                            collectionLineItem.InTransit = 0;
                            collectionLineItem.InTransitDisplay = formatDecimalValues(0);
                            collectionLineItem.IsClearHtml = "<button class='btn btn-default btn-xs btn-block' onclick='clearAmountIntransit()'><i class='fa fa-eraser'></i> Unclear</button>";
                            collectionLineItem.IsClear = true;
                        } else {
                            toastr.success("Unclear Successful");

                            collectionLineItem.InTransit = collectionLineItem.Amount;
                            collectionLineItem.InTransitDisplay = parseFloat(collectionLineItem.Amount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                            collectionLineItem.IsClearHtml = "<button class='btn btn-primary btn-xs btn-block' onclick='clearAmountIntransit()'><i class='fa fa-eraser'></i> Clear</button>";
                            collectionLineItem.IsClear = false;
                        }

                        collectionLines.refresh();
                        collectionLineGrid.refresh();

                        var totalInTransitValue = 0;
                        for (i = 0; i < collectionLines.items.length; i++) {
                            totalInTransitValue += collectionLines.items[i]["InTransit"];
                        }

                        document.getElementById("totalInTransit").value = parseFloat(totalInTransitValue).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        document.getElementById("bankReconciliationTotalDepositInTransit").value = parseFloat(totalInTransitValue).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");

                        computeEndingBalancePerBank();
                    },
                    404: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                    },
                    400: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                    },
                    500: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                    }
                }
            });
        }

        // ================
        // GET Disbursement
        // ================
        function getDisbursement() {
            NProgress.start();
            var disbursementsObservableArray = new wijmo.collections.ObservableArray;

            var startDate = bankReconciliationStartDate.value.toLocaleDateString().replace(/\//g, '-');
            var endDate = bankReconciliationEndDate.value.toLocaleDateString().replace(/\//g, '-');

            if (cboBank.selectedValue != null) {
                var bankId = cboBank.selectedValue;

                $.ajax({
                    url: '/api/bankReconciliation/disbursement/list/' + bankId + '/' + startDate + '/' + endDate,
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    success: function (results) {
                        var totalOutStanding = 0;
                        if (results.length > 0) {
                            var totalOutStandingAmount = 0;
                            for (i = 0; i < results.length; i++) {
                                var outstandingAmount = results[i]["Amount"];
                                if (results[i]["IsClear"]) {
                                    outstandingAmount = 0;
                                }

                                totalOutStanding += outstandingAmount;

                                var CVDateResult = new Date(results[i]["CVDate"])
                                var CVDate = ('0' + (CVDateResult.getMonth() + 1)).slice(-2) + '-' + ('0' + CVDateResult.getDate()).slice(-2) + '-' + CVDateResult.getFullYear();

                                var CheckDateResult = new Date(results[i]["CheckDate"])
                                var CheckDate = ('0' + (CheckDateResult.getMonth() + 1)).slice(-2) + '-' + ('0' + CheckDateResult.getDate()).slice(-2) + '-' + CheckDateResult.getFullYear();

                                disbursementsObservableArray.push({
                                    Id: results[i]["Id"],
                                    CVNumber: results[i]["CVNumber"],
                                    CVDate: CVDate,
                                    Payee: results[i]["Payee"],
                                    PayType: results[i]["PayType"],
                                    CheckNumber: results[i]["CheckNumber"],
                                    CheckDate: CheckDate,
                                    Amount: results[i]["Amount"],
                                    AmountDisplay: parseFloat(results[i]["Amount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                    IsClear: results[i]["IsClear"],
                                    IsClearHtml: results[i]["IsClear"] == true ? "<button class='btn btn-default btn-xs btn-block' onclick='clearAmountOutstanding()'><i class='fa fa-eraser'></i> Unclear</button>" : "<button class='btn btn-primary btn-xs btn-block' onclick='clearAmountOutstanding()'><i class='fa fa-eraser'></i> Clear</button>",
                                    OutstandingAmount: outstandingAmount,
                                    OutstandingAmountDisplay: parseFloat(outstandingAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")
                                });
                            }
                        }

                        document.getElementById("totalOutstanding").value = parseFloat(totalOutStanding).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        document.getElementById("bankReconciliationTotalOutstandingWithdrawals").value = parseFloat(totalOutStanding).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        NProgress.done();

                        createJournalVoucherFlexGrid();
                    }
                });
            }

            return disbursementsObservableArray;
        }

        // ======================
        // Disbursement flex grid
        // ======================
        function createDisbursementFlexGrid() {
            disbursements = new wijmo.collections.CollectionView(getDisbursement());
            disbursementGrid.dispose();
            disbursementGrid = new wijmo.grid.FlexGrid('#disbursementGrid');
            disbursementGrid.initialize({
                    columns: [
                        {
                            "header": "CV Number",
                            "binding": "CVNumber",
                            "allowSorting": true,
                            "isReadOnly": true,
                            "width": 100
                        },
                        {
                            "header": "CV Date",
                            "binding": "CVDate",
                            "allowSorting": true,
                            "isReadOnly": true,
                            "width": 100
                        },
                        {
                            "header": "Payee",
                            "binding": "Payee",
                            "allowSorting": true,
                            "isReadOnly": true,
                            "width": "3*"
                        },
                        {
                            "header": "Pay Type",
                            "binding": "PayType",
                            "allowSorting": true,
                            "isReadOnly": true,
                            "width": "2*"
                        },
                        {
                            "header": "Check No.",
                            "binding": "CheckNumber",
                            "allowSorting": true,
                            "isReadOnly": true,
                            "width": "1.5*"
                        },
                        {
                            "header": "Check Date",
                            "binding": "CheckDate",
                            "allowSorting": true,
                            "isReadOnly": true,
                            "width": 100
                        },
                        {
                            "header": "Amount",
                            "binding": "AmountDisplay",
                            "allowSorting": true,
                            "align": "right",
                            "isReadOnly": true,
                            "width": "2*"
                        },
                        {
                            "header": "Clear",
                            "binding": "IsClearHtml",
                            "allowSorting": true,
                            "isReadOnly": true,
                            "isContentHtml": true,
                            "align": "center",
                            "width": 80
                        },
                        {
                            "header": "Outstanding",
                            "binding": "OutstandingAmountDisplay",
                            "allowSorting": true,
                            "align": "right",
                            "isReadOnly": true,
                            "width": "2*"
                        },
                        {
                            "header": "C",
                            "binding": "IsClear",
                            "allowSorting": true,
                            "isReadOnly": true,
                            "width": 45
                        },
                    ],
                autoGenerateColumns: false,
                itemsSource: disbursements,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            disbursementGrid.trackChanges = true;
        }

        // ========================
        // Clear Outstanding Amount 
        // ========================
        function clearAmountOutstanding() {
            disbursements.editItem(disbursements.currentItem);
            var disbursementItem = disbursements.currentEditItem;
            $.ajax({
                url: '/api/bankReconciliation/disbursement/update/isClearField/' + disbursementItem.Id,
                type: "PUT",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function (isClear) {
                        if (isClear) {
                            toastr.success("Clear Successful");

                            disbursementItem.OutstandingAmount = 0;
                            disbursementItem.OutstandingAmountDisplay = formatDecimalValues(0);
                            disbursementItem.IsClearHtml = "<button class='btn btn-default btn-xs btn-block' onclick='clearAmountOutstanding()'><i class='fa fa-eraser'></i> Unclear</button>";
                            disbursementItem.IsClear = true;
                        } else {
                            toastr.success("Unclear Successful");

                            disbursementItem.OutstandingAmount = disbursementItem.Amount;
                            disbursementItem.OutstandingAmountDisplay = parseFloat(disbursementItem.Amount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                            disbursementItem.IsClearHtml = "<button class='btn btn-primary btn-xs btn-block' onclick='clearAmountOutstanding()'><i class='fa fa-eraser'></i> Clear</button>";
                            disbursementItem.IsClear = false;
                        }

                        disbursements.refresh();
                        disbursementGrid.refresh();

                        var totalOutStandingAmount = 0;
                        for (i = 0; i < disbursements.items.length; i++) {
                            totalOutStandingAmount += disbursements.items[i]["OutstandingAmount"];
                        }

                        document.getElementById("totalOutstanding").value = parseFloat(totalOutStandingAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        document.getElementById("bankReconciliationTotalOutstandingWithdrawals").value = parseFloat(totalOutStandingAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");

                        computeEndingBalancePerBank();
                    },
                    404: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                    },
                    400: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                    },
                    500: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                    }
                }
            });
        }

        // ========================
        // Get Journal Voucher Line
        // ========================
        function getJournalVoucherLine() {
            NProgress.start();
            var journalVoucherLinesObservableArray = new wijmo.collections.ObservableArray;

            var startDate = bankReconciliationStartDate.value.toLocaleDateString().replace(/\//g, '-');
            var endDate = bankReconciliationEndDate.value.toLocaleDateString().replace(/\//g, '-');

            if (cboBank.selectedValue != null) {
                var articleId = cboBank.selectedValue;

                $.ajax({
                    url: '/api/bankReconciliation/journalVoucherLine/list/' + articleId + '/' + startDate + '/' + endDate,
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    success: function (results) {
                        var totalAdjustmentsAmount = 0;
                        if (results.length > 0) {
                            for (i = 0; i < results.length; i++) {
                                var balance = results[i]["DebitAmount"] - results[i]["CreditAmount"]
                                var adjusmentAmount = balance;
                                if (results[i]["IsClear"] == true) {
                                    adjusmentAmount = 0;
                                }

                                totalAdjustmentsAmount += adjusmentAmount;

                                var JVDateResult = new Date(results[i]["JVDate"])
                                var JVDate = ('0' + (JVDateResult.getMonth() + 1)).slice(-2) + '-' + ('0' + JVDateResult.getDate()).slice(-2) + '-' + JVDateResult.getFullYear();

                                journalVoucherLinesObservableArray.push({
                                    Id: results[i]["Id"],
                                    JVNumber: results[i]["JVNumber"],
                                    JVDate: JVDate,
                                    Particulars: results[i]["Particulars"],
                                    DebitAmount: results[i]["DebitAmount"],
                                    DebitAmountDisplay: parseFloat(results[i]["DebitAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                    CreditAmount: results[i]["CreditAmount"],
                                    CreditAmountDisplay: parseFloat(results[i]["CreditAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                    BalanceAmount: results[i]["BalanceAmount"],
                                    BalanceAmountDisplay: parseFloat(results[i]["BalanceAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                    IsClear: results[i]["IsClear"],
                                    IsClearHtml: results[i]["IsClear"] == true ? "<button class='btn btn-default btn-xs btn-block' onclick='clearAmountBalance()'><i class='fa fa-eraser'></i> Unclear</button>" : "<button class='btn btn-primary btn-xs btn-block' onclick='clearAmountBalance()'><i class='fa fa-eraser'></i> Clear</button>",
                                    Adjustments: adjusmentAmount,
                                    AdjustmentsDisplay: parseFloat(adjusmentAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                });
                            }
                        }

                        document.getElementById("totalAdjustments").value = parseFloat(totalAdjustmentsAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        document.getElementById("bankReconciliationTotalAdjustments").value = parseFloat(totalAdjustmentsAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        computeEndingBalancePerBank();
                        NProgress.done();
                    }
                });

            }

            return journalVoucherLinesObservableArray;
        }

        // =========================
        // Journal Voucher Flex Grid
        // =========================
        function createJournalVoucherFlexGrid() {
            journalVoucherLines = new wijmo.collections.CollectionView(getJournalVoucherLine());
            journalVoucherLineGrid.dispose();
            journalVoucherLineGrid = new wijmo.grid.FlexGrid('#adjustmentGrid');
            journalVoucherLineGrid.initialize({
                columns: [
                    {
                        "header": "JV Number",
                        "binding": "JVNumber",
                        "allowSorting": true,
                        "isReadOnly": true,
                        "width": 130
                    },
                    {
                        "header": "JV Date",
                        "binding": "JVDate",
                        "allowSorting": true,
                        "isReadOnly": true,
                        "width": 100
                    },
                    {
                        "header": "Particulars",
                        "binding": "Particulars",
                        "allowSorting": true,
                        "isReadOnly": true,
                        "width": "3*"
                    },
                    {
                        "header": "Debit",
                        "binding": "DebitAmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "isReadOnly": true,
                        "width": "2*"
                    },
                    {
                        "header": "Credit",
                        "binding": "CreditAmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "isReadOnly": true,
                        "width": "2*"
                    },
                    {
                        "header": "Balance",
                        "binding": "BalanceAmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "isReadOnly": true,
                        "width": "2*"
                    },
                    {
                        "header": "Clear",
                        "binding": "IsClearHtml",
                        "allowSorting": true,
                        "isReadOnly": true,
                        "isContentHtml": true,
                        "align": "center",
                        "width": 80
                    },
                    {
                        "header": "Adjustments",
                        "binding": "AdjustmentsDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "isReadOnly": true,
                        "width": "2*"
                    },
                    {
                        "header": "C",
                        "binding": "IsClear",
                        "allowSorting": true,
                        "isReadOnly": true,
                        "width": 45
                    },
                ],
                autoGenerateColumns: false,
                itemsSource: journalVoucherLines,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            journalVoucherLineGrid.trackChanges = true;
        }

        // ====================
        // Clear Balance Amount
        // ====================
        function clearAmountBalance() {
            journalVoucherLines.editItem(journalVoucherLines.currentItem);
            var journalVoucherLineItem = journalVoucherLines.currentEditItem;
            $.ajax({
                url: '/api/bankReconciliation/journalVoucherLine/update/isClearField/' + journalVoucherLineItem.Id,
                type: "PUT",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function (isClear) {
                        if (isClear) {
                            toastr.success("Clear Successful");

                            journalVoucherLineItem.Adjustments = 0;
                            journalVoucherLineItem.AdjustmentsDisplay = formatDecimalValues(0);
                            journalVoucherLineItem.IsClearHtml = "<button class='btn btn-default btn-xs btn-block' onclick='clearAmountBalance()'><i class='fa fa-eraser'></i> Unclear</button>";
                            journalVoucherLineItem.IsClear = true;
                        } else {
                            toastr.success("Unclear Successful");

                            journalVoucherLineItem.Adjustments = journalVoucherLineItem.BalanceAmount;
                            journalVoucherLineItem.AdjustmentsDisplay = parseFloat(journalVoucherLineItem.BalanceAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                            journalVoucherLineItem.IsClearHtml = "<button class='btn btn-primary btn-xs btn-block' onclick='clearAmountBalance()'><i class='fa fa-eraser'></i> Clear</button>";
                            journalVoucherLineItem.IsClear = false;
                        }

                        journalVoucherLines.refresh();
                        journalVoucherLineGrid.refresh();

                        var totalAdjustmentAmount = 0;
                        for (i = 0; i < journalVoucherLines.items.length; i++) {
                            totalAdjustmentAmount += journalVoucherLines.items[i]["Adjustments"];
                        }

                        document.getElementById("totalAdjustments").value = parseFloat(totalAdjustmentAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        document.getElementById("bankReconciliationTotalAdjustments").value = parseFloat(totalAdjustmentAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");

                        computeEndingBalancePerBank();
                    },
                    404: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                    },
                    400: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                    },
                    500: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                    }
                }
            });
        }
        
        // ===============================
        // Compute Ending Balance Per Bank
        // ===============================
        function computeEndingBalancePerBank() {
            // default values for computation
            var endingbalance = document.getElementById('bankReconciliationEndingBalanceAsPerBank').value;
            var deposit = document.getElementById('bankReconciliationTotalDepositInTransit').value;
            var withdrawal = document.getElementById('bankReconciliationTotalOutstandingWithdrawals').value;
            var adjustment = document.getElementById('bankReconciliationTotalAdjustments').value;

            // parse and remove comma strings
            var replaceEndingBalance = parseFloat(endingbalance.replace(/\,/g, ''));
            var replaceDeposit = parseFloat(deposit.replace(/\,/g, ''));
            var replaceWithdrawal = parseFloat(withdrawal.replace(/\,/g, ''));
            var replaceAdjustment = parseFloat(adjustment.replace(/\,/g, ''));

            var adjustedEndingBalance = parseFloat(((replaceEndingBalance - replaceDeposit) + replaceWithdrawal) - replaceAdjustment).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");

            document.getElementById("bankReconciliationAdjustedEndingBalanceAsPerBank").value = adjustedEndingBalance;
        }

        $('#bankReconciliationEndingBalanceAsPerBank').keyup(function () {
            computeEndingBalancePerBank();
        });

        // ================================
        // Bank Reconciliation Close Button
        // ================================
        function btnBankReconciliationClose_OnClick() {
            window.location = '/Software';
        }

        // ====
        // Tabs
        // ====
        $('#depositsCollection').click(function () {
            $('#deposits').show();
            $('#withdrwals').hide();
            $('#adjustments').hide();
            createCollectionLineFlexGrid();
        });

        $('#withdrwalsDisbursment').click(function () {
            $('#deposits').hide();
            $('#withdrwals').show();
            $('#adjustments').hide();
            createDisbursementFlexGrid();
        });

        $('#adjustmentsJournalVoucher').click(function () {
            $('#deposits').hide();
            $('#withdrwals').hide();
            $('#adjustments').show();
            createJournalVoucherFlexGrid();
        });

        // ============
        // On load page
        // ============
        $(document).ready(function () {
            document.getElementById('bankReconciliationEndingBalanceAsPerBank').value = formatDecimalValues(0);
            getBank();
            $('#deposits').show();
            $('#withdrwals').hide();
            $('#adjustments').hide();
        });
    </script>
    <script type="text/javascript">
        var cboUserBranches = new wijmo.input.ComboBox('#cboUserBranches');
        function getUserBranches() {
            $("#loadingUserBranches").show();
            document.getElementById("loadingUserBranches").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#userBranchContent").hide();

            $('#userBranchesModal').modal({ show: true, backdrop: 'static' });

            document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
            $("#updateUserBranch").prop("disabled", false);
            $("#closeUserBranch").prop("disabled", false);

            var userBranchesObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/userBranch/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (userBranchesresults) {
                    if (userBranchesresults.length > 0) {
                        for (i = 0; i < userBranchesresults.length; i++) {
                            userBranchesObservableArray.push({
                                BranchId: userBranchesresults[i]["BranchId"],
                                Branch: userBranchesresults[i]["Branch"]
                            });
                        }
                    }

                    var currentBranch = "@ViewData["BranchId"]";
                    cboUserBranches.dispose();
                    cboUserBranches = new wijmo.input.ComboBox('#cboUserBranches', {
                        isEditable: false,
                        placeholder: "Select Branches",
                        itemsSource: userBranchesObservableArray,
                        displayMemberPath: "Branch",
                        selectedValuePath: "BranchId",
                        selectedValue: currentBranch
                    });

                    setTimeout(function () {
                        $("#loadingUserBranches").hide();
                        $("#userBranchContent").show();
                    }, 500)
                }
            });
        }

        function updateUserBranchOnclick() {
            document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Updating";
            $("#updateUserBranch").prop("disabled", true);
            $("#closeUserBranch").prop("disabled", true);

            var userBranchObject = new Object();
            userBranchObject.BranchId = cboUserBranches.selectedValue;
            var userBranchData = JSON.stringify(userBranchObject);

            $.ajax({
                type: "PUT",
                url: '/api/userBranch/update',
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: userBranchData,
                statusCode: {
                    200: function () {
                        toastr.success("Update Successful");
                        window.setTimeout(function () {
                            location.reload()
                        }, 1000);
                    },
                    404: function () {
                        toastr.error("Not Found");
                        document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
                        $("#updateUserBranch").prop("disabled", false);
                        $("#closeUserBranch").prop("disabled", false);
                    },
                    500: function () {
                        toastr.error("Bad Request");
                        document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
                        $("#updateUserBranch").prop("disabled", false);
                        $("#closeUserBranch").prop("disabled", false);
                    }
                }
            });
        }
    </script>
    <script type="text/javascript">
        var slideLeft = new Menu({
            wrapper: '#o-wrapper',
            type: 'slide-left',
            menuOpenerClass: '.c-button',
            maskId: '#c-mask'
        });

        var slideLeftBtn = document.querySelector('#c-button--slide-left');

        slideLeftBtn.addEventListener('click', function (e) {
            e.preventDefault;
            slideLeft.open();
        });
    </script>
</body>
</html>