@{
    var branchId = Request.QueryString["BranchId"];
}
<!DOCTYPE html>
<html>
<head>
    <!-- Meta -->
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">
    <meta name="description" content="Some slide and push menu demos using CSS3 transitions.">

    <!-- Title of the Page -->
    <title>Disburement</title>

    <!-- CSS StyleSheets-->
    @Styles.Render("~/Content/Software-css")
</head>
<body>
    <div id="wrapper" class="wrapper">
        <!-- Header -->
        @Html.Partial("_SoftwareHeader")

        <!-- Section -->
        <section>
            <div class="sub-nav">
                <div class="container">
                    <h4><i class="fa fa-credit-card fa-2x"></i> Disbursement</h4>
                </div>
                <div class="div_Current_Page">
                    <div class="container">
                        <span id="currentPage"></span>
                    </div>
                </div>
            </div>
            <div class="container">
                <!-- Disbursement List -->
                <div id="">
                    <label>ST date </label>
                    <div class="row">
                        <div class="col-lg-4">
                            <div id="filterDate"></div>
                            <input type="hidden" id="filterDate_data" />
                        </div>
                        <div class="col-lg-8"></div>
                    </div>
                    <br />
                    <div class="row">
                        <div class="col-lg-4">
                            <div class="input-group input-group-sm">
                                <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                <input type="text" class="form-control input-sm" id="InputFilter" placeholder="Search">
                            </div>
                        </div>
                        <div class="col-lg-8" align="right">
                            <a href="@Url.Action("DisbursementDetail", "Software", new { DisbursementId = 0, BranchId = branchId })" class="btn btn-primary btn-sm"><i class="fa fa-plus"></i> Add</a>
                            <a href="@Url.Action("Index", "Software", new { BranchId = branchId })" class="btn btn-danger btn-sm" id=""><i class="fa fa-times"></i> Close</a>
                        </div>
                    </div>
                    <br />
                    <div class="row" align="left">
                        <div class="col-lg-12">
                            <div id="DisbursementGrid" class="grid" align="left"></div>
                        </div>
                    </div>
                    <br />
                    <div class="row">
                        <div class="btn-group col-md-7" id="naviagtionPageGrid">
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToFirstPageGrid">
                                <span class="glyphicon glyphicon-fast-backward"></span>
                            </button>
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToPreviousPageGrid">
                                <span class="glyphicon glyphicon-step-backward"></span>
                            </button>
                            <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnCurrentPageGrid"></button>
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToNextPageGrid">
                                <span class="glyphicon glyphicon-step-forward"></span>
                            </button>
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToLastPageGrid">
                                <span class="glyphicon glyphicon-fast-forward"></span>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </section>

        <!-- Disbursement Delete -->
        <div class="modal fade" id="deleteDisbursementConfirm" role="dialog">
            <div class="modal-dialog modal-sm">
                <!-- Modal content-->
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                        <h4 class="modal-title">Delete Disbursement <i class="fa fa-trash"></i></h4>
                    </div>
                    <div class="modal-body">
                        Are you sure you want to delete this?
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-danger btn-sm" id="cmdConfirmDeleteDisbursement" onclick="cmdDisbursementConfirmDeleteButton_OnClick()"><i class="fa fa-trash"></i> Delete</button>
                        <button id="cmdConfirmDeleteCloseButton" class="btn btn-primary btn-sm" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Delete Lock -->
        <div class="modal fade" id="deleteRecordLock" role="dialog">
            <div class="modal-dialog modal-sm">
                <!-- Modal content-->
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                        <h4 class="modal-title">Record Locked <i class="fa fa-lock"></i></h4>
                    </div>
                    <div class="modal-body">
                        Sorry, the record is lock! It can't be deleted!
                    </div>
                    <div class="modal-footer">
                        <button id="cmdConfirmDeleteCloseButton" class="btn btn-primary btn-sm" data-dismiss="modal"> Okay</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Loading Modal -->
        <div class="modal fade" id="loadingModal" tabindex="-1" role="dialog" aria-labelledby="Loading..." aria-hidden="true" data-backdrop="static" data-keyboard="false">
            <div class=" modal-dialog modal-sm">
                <!-- Modal content-->
                <div class="modal-content">
                    <div class="modal-body">
                        <h4>Loading ...</h4>
                    </div>
                    <div class="modal-footer">
                        <img class="img-thumbnail img-responsive center-block img-custom" src='~/images/loading/progress_bar.gif'>
                    </div>
                </div>
            </div>
        </div>

        <!-- Footer -->
        @Html.Partial("_SoftwareFooter")
    </div>

    <!-- SideBar Menu -->
    @Html.Partial("_SoftwareSideBarMenu")

    <div id="c-mask" class="c-mask"></div><!-- /c-mask -->
    @Scripts.Render("~/Scripts/Software-js")
    <script type="text/javascript">
        // ================
        // Global Variables
        // ================
        var disbursements;
        var disbursementGrid;

        var btnFirstPageGrid;
        var btnPreviousPageGrid;
        var btnNextPageGrid;
        var btnLastPageGrid;
        var btnCurrentPageGrid;

        // =======================================
        // GET Disbursement List Filter by CV Date
        // =======================================
        function getDisbursementFilterByCVDate(CVDateFilter) {
            var disbursements = new wijmo.collections.ObservableArray;
            $('#loadingModal').modal('show');
            $.ajax({
                url: '/api/listDisbursementFilterByCVDate/' + CVDateFilter,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (Results) {
                    $('#loadingModal').modal('hide');
                    if (Results.length > 0) {
                        for (i = 0; i < Results.length; i++) {
                            if(Results[i]["IsLocked"] == true) {
                                disbursements.push({
                                    EditId: "<button class='btn btn-primary btn-xs btn-block' id='disbursementEditButton' onclick='cmdDisbursementEditButton_OnClick()'><i class='fa fa-edit'></i> Edit</button>",
                                    DeleteId: "<button class='btn btn-danger btn-xs btn-block' id='disbursementDeleteButton' onclick='cmdDisbursementDeleteLockButton_OnClick()'><i class='fa fa-trash'></i> Delete</button>",
                                    Id: Results[i]["Id"],
                                    BranchId: Results[i]["BranchId"],
                                    Branch: Results[i]["Branch"],
                                    CVNumber: Results[i]["CVNumber"],
                                    CVDate: Results[i]["CVDate"],
                                    SupplierId: Results[i]["SupplierId"],
                                    Supplier: Results[i]["Supplier"],
                                    Payee: Results[i]["Payee"],
                                    PayTypeId: Results[i]["PayTypeId"],
                                    PayType: Results[i]["PayType"],
                                    BankId: Results[i]["BankId"],
                                    Bank: Results[i]["Bank"],
                                    ManualCVNumber: Results[i]["ManualCVNumber"],
                                    Particulars: Results[i]["Particulars"],
                                    CheckNumber: Results[i]["CheckNumber"],
                                    CheckDate: Results[i]["CheckDate"],
                                    Amount: Results[i]["Amount"],
                                    IsCrossCheck: Results[i]["IsCrossCheck"],
                                    IsClear: Results[i]["IsClear"],
                                    PreparedById: Results[i]["PreparedById"],
                                    PreparedBy: Results[i]["PreparedBy"],
                                    CheckedById: Results[i]["CheckedById"],
                                    CheckedBy: Results[i]["CheckedBy"],
                                    ApprovedById: Results[i]["ApprovedById"],
                                    ApprovedBy: Results[i]["ApprovedBy"],
                                    IsLocked: Results[i]["IsLocked"],
                                    CreatedById: Results[i]["CreatedById"],
                                    CreatedBy: Results[i]["CreatedBy"],
                                    CreatedDateTime: Results[i]["CreatedDateTime"],
                                    UpdatedById: Results[i]["UpdatedById"],
                                    UpdatedBy: Results[i]["UpdatedBy"],
                                    UpdatedDateTime: Results[i]["UpdatedDateTime"]
                                });
                            } else {
                                disbursements.push({
                                    EditId: "<button class='btn btn-primary btn-xs btn-block' id='disbursementEditButton' onclick='cmdDisbursementEditButton_OnClick()'><i class='fa fa-edit'></i> Edit</button>",
                                    DeleteId: "<button class='btn btn-danger btn-xs btn-block' id='disbursementDeleteButton' onclick='cmdDisbursementDeleteButton_OnClick()'><i class='fa fa-trash'></i> Delete</button>",
                                    Id: Results[i]["Id"],
                                    BranchId: Results[i]["BranchId"],
                                    Branch: Results[i]["Branch"],
                                    CVNumber: Results[i]["CVNumber"],
                                    CVDate: Results[i]["CVDate"],
                                    SupplierId: Results[i]["SupplierId"],
                                    Supplier: Results[i]["Supplier"],
                                    Payee: Results[i]["Payee"],
                                    PayTypeId: Results[i]["PayTypeId"],
                                    PayType: Results[i]["PayType"],
                                    BankId: Results[i]["BankId"],
                                    Bank: Results[i]["Bank"],
                                    ManualCVNumber: Results[i]["ManualCVNumber"],
                                    Particulars: Results[i]["Particulars"],
                                    CheckNumber: Results[i]["CheckNumber"],
                                    CheckDate: Results[i]["CheckDate"],
                                    Amount: Results[i]["Amount"],
                                    IsCrossCheck: Results[i]["IsCrossCheck"],
                                    IsClear: Results[i]["IsClear"],
                                    PreparedById: Results[i]["PreparedById"],
                                    PreparedBy: Results[i]["PreparedBy"],
                                    CheckedById: Results[i]["CheckedById"],
                                    CheckedBy: Results[i]["CheckedBy"],
                                    ApprovedById: Results[i]["ApprovedById"],
                                    ApprovedBy: Results[i]["ApprovedBy"],
                                    IsLocked: Results[i]["IsLocked"],
                                    CreatedById: Results[i]["CreatedById"],
                                    CreatedBy: Results[i]["CreatedBy"],
                                    CreatedDateTime: Results[i]["CreatedDateTime"],
                                    UpdatedById: Results[i]["UpdatedById"],
                                    UpdatedBy: Results[i]["UpdatedBy"],
                                    UpdatedDateTime: Results[i]["UpdatedDateTime"]
                                });
                            }
                        } 
                    }
                }
            }).fail(function (xhr, textStatus, err) {
                alert(err);
            });
            return disbursements;
        }

        // ===============================
        // Disbursement Delete Lock Button
        // ===============================
        function cmdDisbursementDeleteLockButton_OnClick() {
            $('#deleteRecordLock').modal({
                show: true,
                backdrop: 'static'
            });
        }

        // =========================
        // Disbursements Edit Button
        // =========================
        function cmdDisbursementEditButton_OnClick() {
            disbursements.editItem(disbursements.currentItem);
            var disbursement = disbursements.currentEditItem;
            var id = disbursement.Id;
            window.location = '/Software/DisbursementDetail?DisbursementId=' + id + '&BranchId=' + @branchId;
        }

        // ===========================
        // Disbursements delete Button
        // ===========================
        function cmdDisbursementDeleteButton_OnClick() {
            $('#deleteDisbursementConfirm').modal({
                show: true,
                backdrop: 'static'
            });

            $("#cmdConfirmDeleteDisbursement").prop("disabled", false);
            $("#cmdConfirmDeleteCloseButton").prop("disabled", false);
        }
        // Disbursements Confirm Delete Button
        function cmdDisbursementConfirmDeleteButton_OnClick() {
            $("#cmdConfirmDeleteDisbursement").prop("disabled", true);
            $("#cmdConfirmDeleteCloseButton").prop("disabled", true);

            disbursements.editItem(disbursements.currentItem);
            var id = disbursements.currentEditItem.Id;
            $.ajax({
                url: '/api/deleteDisbursement/' + id,
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        $("#cmdConfirmDeleteDisbursement").prop("disabled", true);
                        $("#cmdConfirmDeleteCloseButton").prop("disabled", true);
                        toastr.success("Successfully Deleted");
                       
                        $('#deleteDisbursementConfirm').modal('hide');

                        var CVDateFilter = document.getElementById('filterDate_data').value;
                        disbursements = new wijmo.collections.CollectionView(getDisbursementFilterByCVDate(CVDateFilter));
                        disbursements.canFilter = true;
                        disbursements.pageSize = 15;

                        var filterText = '';
                        $('#InputFilter').keyup(function () {
                            filterText = this.value.toLowerCase();
                            disbursements.refresh();
                        });
                        disbursements.filter = function (item) {
                            return !filterText || (item.CVNumber.toLowerCase().indexOf(filterText) > -1);
                        }
                        disbursements.collectionChanged.addHandler(function (sender, args) {
                            updateNavigateButtonsDisbursement();
                        });
                        disbursements.currentChanged.addHandler(function (sender, args) {
                            updateDetails();
                        });

                        // Flex Grid
                        disbursementGrid.itemsSource = disbursements;
                        disbursementGrid.trackChanges = true;
                    },
                    404: function () {
                        toastr.error("Request Not Found");
                        $('#deleteDisbursementConfirm').modal('hide');
                        $("#cmdConfirmDeleteDisbursement").prop("disabled", false);
                        $("#cmdConfirmDeleteCloseButton").prop("disabled", false);
                    },
                    400: function () {
                        toastr.error("Can't be deleted");
                        $('#deleteDisbursementConfirm').modal('hide');
                        $("#cmdConfirmDeleteDisbursement").prop("disabled", false);
                        $("#cmdConfirmDeleteCloseButton").prop("disabled", false);
                    }
                }
            });
        }

        // ===================
        // FlexGrid Selection
        // ===================
        function updateDetails() {
            var item = disbursements.currentItem;
            document.getElementById('createdBy').innerHTML = item.CreatedBy;
            document.getElementById('createdDate').innerHTML = item.CreatedDateTime;
            document.getElementById('updatedBy').innerHTML = item.UpdatedBy;
            document.getElementById('updatedDate').innerHTML = item.UpdatedDateTime;
        }

        // ====================================
        // Navigation Buttons for disbursements
        // ====================================
        function updateNavigateButtonsDisbursement() {
            if (disbursements.pageSize <= 0) {
                document.getElementById('naviagtionPageGrid').style.display = 'none';
                return;
            }
            document.getElementById('naviagtionPageGrid').style.display = 'block';
            if (disbursements.pageIndex === 0) {
                btnFirstPageGrid.setAttribute('disabled', 'disabled');
                btnPreviousPageGrid.setAttribute('disabled', 'disabled');
                btnNextPageGrid.removeAttribute('disabled');
                btnLastPageGrid.removeAttribute('disabled');
            } else if (disbursements.pageIndex === (disbursements.pageCount - 1)) {
                btnFirstPageGrid.removeAttribute('disabled');
                btnPreviousPageGrid.removeAttribute('disabled');
                btnLastPageGrid.setAttribute('disabled', 'disabled');
                btnNextPageGrid.setAttribute('disabled', 'disabled');
            } else {
                btnFirstPageGrid.removeAttribute('disabled');
                btnPreviousPageGrid.removeAttribute('disabled');
                btnNextPageGrid.removeAttribute('disabled');
                btnLastPageGrid.removeAttribute('disabled');
            }
            btnCurrentPageGrid.innerHTML = (disbursements.pageIndex + 1) + ' / ' + disbursements.pageCount;
        }

        // ===========
        // OnLoad Page
        // ===========
        $(document).ready(function () {
            $.ajax({
                url: '/api/listBranchById/' + @branchId,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        branches.push({
                            BranchId: results.Id,
                            BranchBranch: results.Branch
                        });
                    }
                    //document.getElementById('currentBranchName').innerHTML = '<a href="@Url.Action("Index", "Software", new { BranchId = branchId })" class="branchNameStyle">' + results.Branch + "</a>: /";
                }
            });

            document.getElementById('currentPage').innerHTML = '<a href="@Url.Action("Index", "Software", new { BranchId = branchId })" class="currentPageLinkCustom">Main Menu</a> ' + ' > Disbursement';

            toastr.options = {
                "closeButton": true,
                "debug": true,
                "newestOnTop": true,
                "progressBar": true,
                "positionClass": "toast-top-right",
                "preventDuplicates": true,
                "onclick": null,
                "showDuration": "300",
                "hideDuration": "1000",
                "timeOut": "5000",
                "extendedTimeOut": "1000",
                "showEasing": "swing",
                "hideEasing": "linear",
                "showMethod": "fadeIn",
                "hideMethod": "fadeOut"
            }

            var CVDateFilter_Date = new Date();
            document.getElementById("filterDate_data").value = [ CVDateFilter_Date.getMonth()+1, CVDateFilter_Date.getDate(), CVDateFilter_Date.getFullYear()].join('-');

            var cboFilterDate;
            cboFilterDate = new wijmo.input.InputDate('#filterDate', {
                format: 'MM/dd/yyyy',
                value: new Date(),
                mask: '99/99/9999',
                onValueChanged: function () {
                    document.getElementById('filterDate_data').value = [ this.value.getMonth()+1, this.value.getDate(), this.value.getFullYear() ].join('-');
                    var CVDateFilterValue = document.getElementById('filterDate_data').value;
                    
                    $('body').removeClass('modal-open');
                    $(".modal-backdrop").remove();

                    disbursements = new wijmo.collections.CollectionView(getDisbursementFilterByCVDate(CVDateFilterValue));
                    disbursements.canFilter = true;
                    disbursements.pageSize = 15;

                    var filterText = '';
                    $('#InputFilter').keyup(function () {
                        filterText = this.value.toLowerCase();
                        disbursements.refresh();
                    });
                    disbursements.filter = function (item) {
                        return !filterText || (item.CVNumber.toLowerCase().indexOf(filterText) > -1);
                    }
                    disbursements.collectionChanged.addHandler(function (sender, args) {
                        updateNavigateButtonsDisbursement();
                    });
                    disbursements.currentChanged.addHandler(function (sender, args) {
                        updateDetails();
                    });

                    disbursementGrid.itemsSource = disbursements;
                    disbursementGrid.trackChanges = true;

                    updateNavigateButtonsDisbursement();
                }
            });

            var CVDateFilter = document.getElementById('filterDate_data').value;
            disbursements = new wijmo.collections.CollectionView(getDisbursementFilterByCVDate(CVDateFilter));
            disbursements.canFilter = true;
            disbursements.pageSize = 15;

            var filterText = '';
            $('#InputFilter').keyup(function () {
                filterText = this.value.toLowerCase();
                disbursements.refresh();
            });
            disbursements.filter = function (item) {
                return !filterText || (item.CVNumber.toLowerCase().indexOf(filterText) > -1);
            }
            disbursements.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsDisbursement();
            });
            disbursements.currentChanged.addHandler(function (sender, args) {
                updateDetails();
            });

            // Flex Grid
            disbursementGrid = new wijmo.grid.FlexGrid('#DisbursementGrid');
            disbursementGrid.initialize({
                columns: [
                            {
                                "header": "Edit",
                                "binding": "EditId",
                                "width": 60,
                                "align": "center",
                                "allowResizing": false,
                                "allowSorting": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Delete",
                                "binding": "DeleteId",
                                "width": 70,
                                "align": "center",
                                "allowResizing": false,
                                "allowSorting": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "CV Number",
                                "binding": "CVNumber",
                                "allowSorting": true,
                                "width": "1.5*",
                            },
                            {
                                "header": "Check Date",
                                "binding": "CVDate",
                                "allowSorting": true,
                                "width": "1*"
                            },
                            {
                                "header": "Supplier",
                                "binding": "Supplier",
                                "allowSorting": true,
                                "width": "3*"
                            },
                            {
                                "header": "Check No.",
                                "binding": "CheckNumber",
                                "allowSorting": true,
                                "width": "1*"
                            },
                            {
                                "header": "Amount",
                                "binding": "Amount",
                                "allowSorting": true,
                                "width": "1*"
                            },
                            {
                                "header": "Lock",
                                "binding": "IsLocked",
                                "allowSorting": true,
                                "width": "0.5*"
                            }
                ],
                autoGenerateColumns: false,
                itemsSource: disbursements,
                isReadOnly: true,
                //frozenColumns: 2,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            disbursementGrid.trackChanges = true;

            //Navigation button
            btnFirstPageGrid = document.getElementById('btnMoveToFirstPageGrid');
            btnPreviousPageGrid = document.getElementById('btnMoveToPreviousPageGrid');
            btnNextPageGrid = document.getElementById('btnMoveToNextPageGrid');
            btnLastPageGrid = document.getElementById('btnMoveToLastPageGrid');
            btnCurrentPageGrid = document.getElementById('btnCurrentPageGrid');

            updateNavigateButtonsDisbursement();

            btnFirstPageGrid.addEventListener('click', function () {
                disbursements.moveToFirstPage();
                updateNavigateButtonsDisbursement();
            });
            btnPreviousPageGrid.addEventListener('click', function () {
                disbursements.moveToPreviousPage();
                updateNavigateButtonsDisbursement();
            });
            btnNextPageGrid.addEventListener('click', function () {
                disbursements.moveToNextPage();
                updateNavigateButtonsDisbursement();
            });
            btnLastPageGrid.addEventListener('click', function () {
                disbursements.moveToLastPage();
                updateNavigateButtonsDisbursement();
            });
        });

</script>
</body>
</html>