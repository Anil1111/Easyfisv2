@{
    var branchId = Request.QueryString["BranchId"];
    var itemId = Request.QueryString["ItemId"];
}
<!DOCTYPE html>
<html>
<head>
    <!-- Meta -->
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">
    <meta name="description" content="Some slide and push menu demos using CSS3 transitions.">

    <!-- Title of the Page -->
    <title>Item Detail</title>

    <!-- CSS StyleSheets-->
    @Styles.Render("~/Font-Awesome/css")
    @Styles.Render("~/Content/Software-css")
    @Styles.Render("~/WijmoCSS/Wijmo-css")
</head>
<body>
    <div id="wrapper" class="wrapper">
        <!-- Header -->
        @Html.Partial("_SoftwareHeader")

        <!-- Section -->
        <section>
            <br /><br /><br />
            <div class="container">
                <div class="row">
                    <div class="col-lg-12">
                        <h4><i class="fa fa-cart-arrow-down fa-2x"></i> Item Detail</h4>
                        <br />
                        <div class="div_Current_Page">
                            <span id="currentPage"></span>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6">
                        <h4 id="itemDetailLabel"></h4>
                    </div>
                    <div class="col-md-6" align="right">
                        <button class="btn btn-primary btn-sm" id="item_saveSaveItem" onclick="itemSaveItemButton_OnClick()"><i class="fa fa-save"></i> Save and Lock</button>
                        <button class="btn btn-primary btn-sm" id="item_saveItem" onclick="itemSaveButton_OnClick()"><i class="fa fa-save"></i> Save</button>
                        <button class="btn btn-primary btn-sm" id="item_editItem" onclick="itemEditButton_OnClick()"><i class="fa fa-edit"></i> Edit</button>
                        <button class="btn btn-primary btn-sm" id="item_printItem" onclick="window.location.href ='@Url.Action("ItemPDF", "Software", new { ItemId = itemId })'"><i class="fa fa-print"></i> Print</button>
                        <button onclick="window.location.href = '@Url.Action("Items", "Software", new { BranchId = branchId })'" class="btn btn-danger btn-sm" id="item_closeItem"><i class="fa fa-times"></i> Close</button>
                    </div>
                </div>
                <div class="well">
                    <form class="form-horizontal" role="form">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="control-label col-sm-4">Code:</label>
                                    <div class="col-sm-8">
                                        <input type="text" class="form-control input-sm requiredItem" id="articleItem_code" />
                                        <input type="hidden" id="articleItem_code_data" />
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label class="control-label col-sm-4">Manual Code:</label>
                                    <div class="col-sm-8">
                                        <input type="text" class="form-control input-sm requiredItem" id="articleItem_manualCode" />
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label class="control-label col-sm-4">Item:</label>
                                    <div class="col-sm-8">
                                        <input type="text" class="form-control input-sm requiredItem" id="articleItem_item" />
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label class="control-label col-sm-4">Item Group:</label>
                                    <div class="col-sm-8">
                                        <div type="text" class="comboBox-wide" id="articleItem_itemGroup"></div>
                                        <input type="hidden" id="articleItem_itemGroup_data" class="requiredItem" />
                                        <input type="hidden" id="articleItem_itemGroup_SelectedValue" />
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label class="control-label col-sm-4">Category:</label>
                                    <div class="col-sm-8">
                                        <input type="text" class="form-control input-sm requiredItem" id="articleItem_category">
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label class="control-label col-sm-4">Unit:</label>
                                    <div class="col-sm-8">
                                        <div type="text" class="comboBox-wide" id="articleItem_unit"></div>
                                        <input type="hidden" id="articleItem_unit_data" class="requiredItem" />
                                        <input type="hidden" id="articleItem_unit_SelectedValue" />
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label class="control-label col-sm-4">Price:</label>
                                    <div class="col-sm-8">
                                        <input type="text" class="form-control input-sm requiredItem" id="articleItem_price">
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label class="control-label col-sm-4">Particulars:</label>
                                    <div class="col-sm-8">
                                        <textarea class="form-control textarea-custom requiredItem" id="articleItem_particulars"></textarea>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="control-label col-sm-4">Input Tax:</label>
                                    <div class="col-sm-8">
                                        <div type="text" class="comboBox-wide" id="articleItem_inputTax"></div>
                                        <input type="hidden" id="articleItem_inputTax_data" class="requiredItem" />
                                        <input type="hidden" id="articleItem_inputTax_SelectedValue" />
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label class="control-label col-sm-4">Output Tax:</label>
                                    <div class="col-sm-8">
                                        <div type="text" class="comboBox-wide" id="articleItem_outputTax"></div>
                                        <input type="hidden" id="articleItem_outputTax_data" class="requiredItem" />
                                        <input type="hidden" id="articleItem_outputTax_SelectedValue" />
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label class="control-label col-sm-4">Withholding Tax:</label>
                                    <div class="col-sm-8">
                                        <div type="text" class="comboBox-wide" id="articleItem_withholdingTax"></div>
                                        <input type="hidden" id="articleItem_withholdingTax_data" class="requiredItem" />
                                        <input type="hidden" id="articleItem_withholdingTax_SelectedValue" />
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label class="control-label col-sm-4">Inventory:</label>
                                    <div class="col-sm-8">
                                        <input type="checkbox" id="articleItem_Inventory">
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label class="control-label col-sm-4">Old Manual Code:</label>
                                    <div class="col-sm-8">
                                        <input type="text" class="form-control input-sm requiredItem" id="articleItem_oldManualCode">
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label class="control-label col-sm-4">Manual Cost:</label>
                                    <div class="col-sm-8">
                                        <input type="text" class="form-control input-sm requiredItem" id="articleItem_manualCost">
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label class="control-label col-sm-4">Lock:</label>
                                    <div class="col-sm-8">
                                        <input type="checkbox" class="checkbox_custom" id="isLocked_Status" />
                                    </div>
                                </div>
                                <div class="form-group">
                                    <div class="col-sm-4"></div>
                                    <div class="col-sm-8">
                                        <input type="hidden" id="Item_IsLocked">
                                        <input type="hidden" id="Item_IsLocked_defaultTrue">
                                        <input type="hidden" id="Item_IsLocked_defaultFalse">
                                    </div>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>

                <!-- Item Lines -->
                <ul class="nav nav-tabs " role="tablist" id="myTab">
                    <li role="presentation" class="active"><a data-toggle="tab" href="#UnitConversion" id="unitConversionTabId">Unit Conversion</a></li>
                    <li role="presentation"><a data-toggle="tab" href="#Component" id="componentTabId">Component</a></li>
                    <li role="presentation"><a data-toggle="tab" href="#Price" id="priceTabId">Price</a></li>
                    <li role="presentation"><a data-toggle="tab" href="#Inventory" id="inventoryTabId">Inventory</a></li>
                    <li role="presentation"><a data-toggle="tab" href="#GLAccount" id="glAccountTabId">GL Account</a></li>
                    <li role="presentation"><a data-toggle="tab" href="#FixedAsset" id="fixedAssetTabId">Fixed Asset</a></li>
                </ul>
                <br />
                <div class="tab-content">
                    <!-- UnitConversion List -->
                    <div id="UnitConversion" class="tab-pane fade in active">
                        <div class="row">
                            <div class="col-lg-12">
                                <h4>Unit Conversion</h4>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-lg-4">
                                <div class="input-group input-group-sm">
                                    <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                    <input type="text" class="form-control input-sm" id="InputFilterUnitConversion" placeholder="Search">
                                </div>
                            </div>
                            <div class="col-lg-8" align="right">
                                <button class="btn btn-primary btn-sm" onclick="cmdAddNewAccount_OnClick()"><i class="fa fa-plus"></i> Add</button>
                            </div>
                        </div>
                        <br />
                        <div class="row" align="left">
                            <div class="col-lg-12">
                                <div id="UnitConversionGrid" class="grid" align="left"></div>
                            </div>
                        </div>
                        <br />
                        <div class="row">
                            <div class="btn-group col-md-7" id="navigationPageGridUnitConversion">
                                <button type="button" class="btn btn-default" id="btnMoveToFirstPageGridUnitConversion">
                                    <span class="glyphicon glyphicon-fast-backward"></span>
                                </button>
                                <button type="button" class="btn btn-default" id="btnMoveToPreviousPageGridUnitConversion">
                                    <span class="glyphicon glyphicon-step-backward"></span>
                                </button>
                                <button type="button" class="btn btn-default" disabled style="width: 100px" id="btnCurrentPageGridUnitConversion"></button>
                                <button type="button" class="btn btn-default" id="btnMoveToNextPageGridUnitConversion">
                                    <span class="glyphicon glyphicon-step-forward"></span>
                                </button>
                                <button type="button" class="btn btn-default" id="btnMoveToLastPageGridUnitConversion">
                                    <span class="glyphicon glyphicon-fast-forward"></span>
                                </button>
                            </div>
                        </div>
                    </div>

                    <!-- Component List -->
                    <div id="Component" class="tab-pane fade">
                        <div class="row">
                            <div class="col-lg-12">
                                <h4>Component</h4>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-lg-4">
                                <div class="input-group input-group-sm">
                                    <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                    <input type="text" class="form-control input-sm" id="InputFilterComponent" placeholder="Search">
                                </div>
                            </div>
                            <div class="col-lg-8" align="right">
                                <button class="btn btn-primary btn-sm" onclick="cmdAddNewAccount_OnClick()"><i class="fa fa-plus"></i> Add</button>
                            </div>
                        </div>
                        <br />
                        <div class="row" align="left">
                            <div class="col-lg-12">
                                <div id="ComponentGrid" class="grid" align="left"></div>
                            </div>
                        </div>
                        <br />
                        <div class="row">
                            <div class="btn-group col-md-7" id="navigationPageGridComponent">
                                <button type="button" class="btn btn-default" id="btnMoveToFirstPageGridComponent">
                                    <span class="glyphicon glyphicon-fast-backward"></span>
                                </button>
                                <button type="button" class="btn btn-default" id="btnMoveToPreviousPageGridComponent">
                                    <span class="glyphicon glyphicon-step-backward"></span>
                                </button>
                                <button type="button" class="btn btn-default" disabled style="width: 100px" id="btnCurrentPageGridComponent"></button>
                                <button type="button" class="btn btn-default" id="btnMoveToNextPageGridComponent">
                                    <span class="glyphicon glyphicon-step-forward"></span>
                                </button>
                                <button type="button" class="btn btn-default" id="btnMoveToLastPageGridComponent">
                                    <span class="glyphicon glyphicon-fast-forward"></span>
                                </button>
                            </div>
                        </div>
                    </div>

                    <!-- Price List -->
                    <div id="Price" class="tab-pane fade">
                        <div class="row">
                            <div class="col-lg-12">
                                <h4>Price</h4>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-lg-4">
                                <div class="input-group input-group-sm">
                                    <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                    <input type="text" class="form-control input-sm" id="InputFilterPrice" placeholder="Search">
                                </div>
                            </div>
                            <div class="col-lg-8" align="right">
                                <button class="btn btn-primary btn-sm" onclick="cmdAddNewAccount_OnClick()"><i class="fa fa-plus"></i> Add</button>
                            </div>
                        </div>
                        <br />
                        <div class="row" align="left">
                            <div class="col-lg-12">
                                <div id="PriceGrid" class="grid" align="left"></div>
                            </div>
                        </div>
                        <br />
                        <div class="row">
                            <div class="btn-group col-md-7" id="navigationPageGridPrice">
                                <button type="button" class="btn btn-default" id="btnMoveToFirstPageGridPrice">
                                    <span class="glyphicon glyphicon-fast-backward"></span>
                                </button>
                                <button type="button" class="btn btn-default" id="btnMoveToPreviousPageGridPrice">
                                    <span class="glyphicon glyphicon-step-backward"></span>
                                </button>
                                <button type="button" class="btn btn-default" disabled style="width: 100px" id="btnCurrentPageGridPrice"></button>
                                <button type="button" class="btn btn-default" id="btnMoveToNextPageGridPrice">
                                    <span class="glyphicon glyphicon-step-forward"></span>
                                </button>
                                <button type="button" class="btn btn-default" id="btnMoveToLastPageGridPrice">
                                    <span class="glyphicon glyphicon-fast-forward"></span>
                                </button>
                            </div>
                        </div>
                    </div>

                    <!-- Inventory List -->
                    <div id="Inventory" class="tab-pane fade">
                        <div class="row">
                            <div class="col-lg-12">
                                <h4>Inventory</h4>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-lg-4">
                                <div class="input-group input-group-sm">
                                    <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                    <input type="text" class="form-control input-sm" id="InputFilterInventory" placeholder="Search">
                                </div>
                            </div>
                            <div class="col-lg-8" align="right">
                                <button class="btn btn-primary btn-sm" onclick="cmdAddNewAccount_OnClick()"><i class="fa fa-plus"></i> Add</button>
                            </div>
                        </div>
                        <br />
                        <div class="row" align="left">
                            <div class="col-lg-12">
                                <div id="InventoryGrid" class="grid" align="left"></div>
                            </div>
                        </div>
                        <br />
                        <div class="row">
                            <div class="btn-group col-md-7" id="navigationPageGridInventory">
                                <button type="button" class="btn btn-default" id="btnMoveToFirstPageGridInventory">
                                    <span class="glyphicon glyphicon-fast-backward"></span>
                                </button>
                                <button type="button" class="btn btn-default" id="btnMoveToPreviousPageGridInventory">
                                    <span class="glyphicon glyphicon-step-backward"></span>
                                </button>
                                <button type="button" class="btn btn-default" disabled style="width: 100px" id="btnCurrentPageGridInventory"></button>
                                <button type="button" class="btn btn-default" id="btnMoveToNextPageGridInventory">
                                    <span class="glyphicon glyphicon-step-forward"></span>
                                </button>
                                <button type="button" class="btn btn-default" id="btnMoveToLastPageGridInventory">
                                    <span class="glyphicon glyphicon-fast-forward"></span>
                                </button>
                            </div>
                        </div>
                    </div>

                    <!-- GL Account  -->
                    <div id="GLAccount" class="tab-pane fade">
                        <div class="row">
                            <div class="col-lg-12">
                                <h4>GL Account</h4>
                            </div>
                        </div>
                        <div class="well">
                            <form class="form-horizontal" role="form">
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            <label class="control-label col-sm-4">Account:</label>
                                            <div class="col-sm-8">
                                                <div class="comboBox-wide" id="Item_Account"></div>

                                                <input type="hidden" id="Item_Account_data" class="requiredItem" />
                                                <input type="hidden" id="Item_Account_selectedValue" />
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <label class="control-label col-sm-4">Sales Account:</label>
                                            <div class="col-sm-8">
                                                <div class="comboBox-wide" id="Item_SalesAccount"></div>

                                                <input type="hidden" id="Item_SalesAccount_data" class="requiredItem" />
                                                <input type="hidden" id="Item_SalesAccount_selectedValue" />
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <label class="control-label col-sm-4">Cost Account:</label>
                                            <div class="col-sm-8">
                                                <div class="comboBox-wide" id="Item_CostAccount"></div>

                                                <input type="hidden" id="Item_CostAccount_data" class="requiredItem" />
                                                <input type="hidden" id="Item_CostAccount_selectedValue" />
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <label class="control-label col-sm-4">Accum Dep Account:</label>
                                            <div class="col-sm-8">
                                                <div class="comboBox-wide" id="Item_AccumDepAccount"></div>

                                                <input type="hidden" id="Item_AccumDepAccount_data" class="requiredItem" />
                                                <input type="hidden" id="Item_AccumDepAccount_selectedValue" />
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <label class="control-label col-sm-4">Expense Account:</label>
                                            <div class="col-sm-8">
                                                <div class="comboBox-wide" id="Item_ExpenseAccount"></div>

                                                <input type="hidden" id="Item_ExpenseAccount_data" class="requiredItem" />
                                                <input type="hidden" id="Item_ExpenseAccount_selectedValue" />
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-6"></div>
                                </div>
                            </form>
                        </div>
                    </div>

                    <!-- Fixed Asset  -->
                    <div id="FixedAsset" class="tab-pane fade">
                        <div class="row">
                            <div class="col-lg-12">
                                <h4>Fixed Asset</h4>
                            </div>
                        </div>
                        <div class="well">
                            <form class="form-horizontal" role="form">
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            <label class="control-label col-sm-4">Date Acquired:</label>
                                            <div class="col-sm-8">
                                                <div class="comboBox-wide" id="Item_DateAcquired"></div>
                                                <input type="hidden" id="Item_DateAcquired_data" />
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <label class="control-label col-sm-4">Useful Life (Years):</label>
                                            <div class="col-sm-8">
                                                <input type="text" class="form-control input-sm requiredItem" id="Item_UsefulLife" />
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <label class="control-label col-sm-4">Salvage Value:</label>
                                            <div class="col-sm-8">
                                                <input type="text" class="form-control input-sm requiredItem" id="Item_SalvageValue" />
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-6"></div>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </section>

        <!-- Loading Modal -->
        <div class="modal fade" id="loadingModal" tabindex="-1" role="dialog" aria-labelledby="Loading..." aria-hidden="true" data-backdrop="static" data-keyboard="false">
            <div class=" modal-dialog modal-sm">
                <!-- Modal content-->
                <div class="modal-content">
                    <div class="modal-body">
                        <h4>Loading ...</h4>
                    </div>
                    <div class="modal-footer">
                        <img class="img-thumbnail img-responsive center-block img-custom" src='~/images/loading/progress_bar.gif'>
                    </div>
                </div>
            </div>
        </div>

        <!-- Footer -->
        @Html.Partial("_SoftwareFooter")
    </div>

    <!-- SideBar Menu -->
    @Html.Partial("_SoftwareSideBarMenu")

    <div id="c-mask" class="c-mask"></div><!-- /c-mask -->
    @Scripts.Render("~/Scripts/Software-js")
    @Scripts.Render("~/WijmoScripts/Wijmo-js")
    <script type="text/javascript">
        // ================
        // Global Variables
        // ================
        var items;
        var dateAcquired;
        var articleItemGroups;
        var articleItemUnits;
        var taxTypes;
        var accounts;
        var cboAccount;
        var cboSaleAccount;
        var cboCostAccount;
        var cboAccumDepAccount;
        var cboExpenseAccount;
        var cboArticleGroupForItem;
        var cboArticleUnitForItem;
        var cboArticleInputTaxTypeForItem;
        var cboArticleOutputTaxTypeForItem;
        var cboArticleWithholdingTaxTypeForItem;

        // ==============================
        // Get Article for item by its ID
        // ==============================
        function getArticleItemById() {
            $('#loadingModal').modal('show');
            var items = new wijmo.collections.ObservableArray;
            var articleId = @itemId;
            $.ajax({
                url: '/api/article/' +  articleId,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (Results) {
                    $('#loadingModal').modal('hide');
                    if (Results.length > 0) {
                        items.push ({
                            Id: Results.Id,
                            ArticleCode : Results.ArticleCode,
                            ManualArticleCode : Result.ManualArticleCode,
                            Article : Results.Article,
                            Category : Results.Category,
                            ArticleTypeId : Results.ArticleTypeId,
                            ArticleType : Results.ArticleType,
                            ArticleGroupId : Results.ArticleGroupId,
                            ArticleGroup : Results.ArticleGroup,
                            AccountId : Results.AccountId,
                            Account : Results.Account,
                            SalesAccountId : Results.SalesAccountId,
                            SalesAccount : Results.SalesAccount,
                            CostAccountId : Results.CostAccountId,
                            CostAccount : Results.CostAccount,
                            AssetAccountId : Results.AssetAccountId,
                            AssetAccount : Results.AssetAccount,
                            ExpenseAccountId : Results.ExpenseAccountId,
                            ExpenseAccount : Results.ExpenseAccount,
                            UnitId : Results.UnitId,
                            Unit : Results.Unit,
                            OutputTaxId : Results.OutputTaxId,
                            OutputTax : Results.OutputTax,
                            InputTaxId : Results.InputTaxId,
                            InputTax : Results.InputTax,
                            WTaxTypeId : Results.WTaxTypeId,
                            WTaxType : Results.WTaxType,
                            Price : Results.Price,
                            Cost : Results.Cost,
                            IsInventory : Results.IsInventory,
                            Particulars : Results.Particulars,
                            Address : Results.Address,
                            TermId : Results.TermId,
                            Term : Results.Term,
                            ContactNumber : Results.ContactNumber,
                            ContactPerson : Results.ContactPerson,
                            TaxNumber : Results.TaxNumber,
                            CreditLimit : Results.CreditLimit,
                            DateAcquired : Results.DateAcquired,
                            UsefulLife : Results.UsefulLife,
                            SalvageValue : Results.SalvageValue,
                            ManualArticleOldCode : Results.ManualArticleOldCode,
                            IsLocked: Results.IsLocked,
                            CreatedById: Results.CreatedById,
                            CreatedBy: Results.CreatedBy,
                            CreatedDateTime: Results.CreatedDateTime,
                            UpdatedById: Results.UpdatedById,
                            UpdatedBy: Results.UpdatedBy,
                            UpdatedDateTime: Results.UpdatedDateTime
                        });
                    }

                    document.getElementById('Item_DateAcquired_data').value = Results.DateAcquired;
                    var dateAcquired_Result = Results.DateAcquired;
                    dateAcquired.dispose();
                    dateAcquired = new wijmo.input.InputDate('#Item_DateAcquired', {
                        format: 'MM/dd/yyyy',
                        value: new Date(dateAcquired_Result),
                        mask: '99/99/9999',
                        onValueChanged: function () {
                            document.getElementById('Item_DateAcquired_data').value = this.value.toLocaleDateString();
                        }
                    });
                    document.getElementById('Item_UsefulLife').value = Results.UsefulLife;
                    document.getElementById('Item_SalvageValue').value = Results.SalvageValue;
                    document.getElementById('Item_Account_data').value = Results.AccountId;
                    document.getElementById('Item_Account_selectedValue').value = Results.Account;
                    document.getElementById('Item_SalesAccount_data').value = Results.SalesAccountId;
                    document.getElementById('Item_SalesAccount_selectedValue').value = Results.SalesAccount;
                    document.getElementById('Item_CostAccount_data').value = Results.CostAccountId;
                    document.getElementById('Item_CostAccount_selectedValue').value = Results.CostAccount;
                    document.getElementById('Item_AccumDepAccount_data').value = Results.AssetAccountId;
                    document.getElementById('Item_AccumDepAccount_selectedValue').value = Results.AssetAccount;
                    document.getElementById('Item_ExpenseAccount_data').value = Results.ExpenseAccountId;
                    document.getElementById('Item_ExpenseAccount_selectedValue').value = Results.ExpenseAccount;
                    document.getElementById('articleItem_code').value = Results.ArticleCode;
                    document.getElementById('articleItem_code_data').value = Results.ArticleCode;
                    document.getElementById('articleItem_manualCode').value = Results.ManualArticleCode;
                    document.getElementById('articleItem_item').value = Results.Article;
                    document.getElementById('articleItem_category').value = Results.Category;
                    document.getElementById('articleItem_itemGroup_data').value = Results.ArticleGroupId;
                    document.getElementById('articleItem_itemGroup_SelectedValue').value = Results.ArticleGroup;
                    document.getElementById('articleItem_unit_data').value = Results.UnitId;
                    document.getElementById('articleItem_unit_SelectedValue').value = Results.Unit;
                    document.getElementById('articleItem_price').value = Results.Price;
                    document.getElementById('articleItem_particulars').value = Results.Particulars;
                    if(Results.IsInventory == 0) {
                        document.getElementById('articleItem_Inventory').checked = false;
                    } else {
                        document.getElementById('articleItem_Inventory').checked = true;
                    }
                    document.getElementById('articleItem_inputTax_data').value = Results.InputTaxId;
                    document.getElementById('articleItem_inputTax_SelectedValue').value = Results.InputTax;
                    document.getElementById('articleItem_outputTax_data').value = Results.OutputTaxId;
                    document.getElementById('articleItem_outputTax_SelectedValue').value = Results.OutputTax;
                    document.getElementById('articleItem_withholdingTax_data').value = Results.WTaxTypeId;
                    document.getElementById('articleItem_withholdingTax_SelectedValue').value = Results.WTaxType;
                    document.getElementById('articleItem_oldManualCode').value = Results.ManualArticleOldCode;
                    document.getElementById('articleItem_manualCost').value = Results.Cost;
                    document.getElementById('createdBy').innerHTML = Results.CreatedBy;
                    document.getElementById('createdDate').innerHTML = Results.CreatedDateTime;
                    document.getElementById('updatedBy').innerHTML = Results.UpdatedBy;
                    document.getElementById('updatedDate').innerHTML = Results.UpdatedDateTime;
                    document.getElementById('Item_IsLocked').value = Results.IsLocked;

                    if(document.getElementById('Item_IsLocked').value == 'true') {
                        document.getElementById('articleItem_manualCode').disabled = true;
                        document.getElementById('articleItem_item').disabled = true;
                        document.getElementById('articleItem_category').disabled = true;
                        document.getElementById('articleItem_price').disabled = true;
                        document.getElementById('articleItem_particulars').disabled = true;
                        document.getElementById('articleItem_Inventory').disabled = true;
                        document.getElementById('articleItem_oldManualCode').disabled = true;
                        document.getElementById('articleItem_manualCost').disabled = true;
                        document.getElementById('Item_UsefulLife').disabled = true;
                        document.getElementById('Item_SalvageValue').disabled = true;
                        document.getElementById('isLocked_Status').checked = true;
                        $("#item_saveSaveItem").prop("disabled", true);
                        $("#item_saveItem").prop("disabled", true);
                        $("#item_editItem").prop("disabled", false);
                        $("#item_printItem").prop("disabled", false);

                    } else if(document.getElementById('Item_IsLocked').value == 'false') {
                        document.getElementById('articleItem_manualCode').disabled = false;
                        document.getElementById('articleItem_item').disabled = false;
                        document.getElementById('articleItem_category').disabled = false;
                        document.getElementById('articleItem_price').disabled = false;
                        document.getElementById('articleItem_particulars').disabled = false;
                        document.getElementById('articleItem_Inventory').disabled = false;
                        document.getElementById('articleItem_oldManualCode').disabled = false;
                        document.getElementById('articleItem_manualCost').disabled = false;
                        document.getElementById('Item_UsefulLife').disabled = false;
                        document.getElementById('Item_SalvageValue').disabled = false;
                        document.getElementById('isLocked_Status').checked = false;
                        $("#item_saveSaveItem").prop("disabled", false);
                        $("#item_saveItem").prop("disabled", false);
                        $("#item_editItem").prop("disabled", true);
                        $("#item_printItem").prop("disabled", true);
                    }

                    // comboboxes
                    getArticleItemGroupForComboBox();
                    getArticleItemUnitForComboBox();
                    getArticleTaxTypeForComboBox();
                    getAccount();
                }
            }).fail(function (xhr, textStatus, err) {
                alert(err);
            });
            return items;
        }

        // ==============================
        // Get Last Id for Item by its ID
        // ==============================
        function getLastInsertedIdItemByArticleTypeId() {
            var items = new wijmo.collections.ObservableArray;
            $.ajax({
                url: '/api/articleLastIdByArticleTypeId/1',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (Results) {
                    if (Results.length > 0) {
                        items.push ({
                            Id: Results.Id,
                            Article : Results.Article
                        });
                    }
                    window.location = '/Software/ItemDetail?ItemId=' + Results.Id + '&BranchId=' + @branchId;
                    window.setTimeout(function () { location.reload() }, 1000);
                }
            });
        }

        // =====================
        // Get Artile Item Group
        // =====================
        function getArticleItemGroupForComboBox() {
            articleItemGroups = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listArticleGroupByArticleTypeId/1',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            articleItemGroups.push({
                                ArticleGroupId: results[i]["Id"],
                                ArticleGroupArticleGroup: results[i]["ArticleGroup"],
                                ArticleGroupAccountId: results[i]["AccountId"],
                                ArticleGroupAccount: results[i]["Account"],
                                ArticleGroupSalesAccountId: results[i]["SalesAccountId"],
                                ArticleGroupSalesAccount: results[i]["SalesAccount"],
                                ArticleGroupCostAccountId: results[i]["CostAccountId"],
                                ArticleGroupCostAccount: results[i]["CostAccount"],
                                ArticleGroupAssetAccountId: results[i]["AssetAccountId"],
                                ArticleGroupAssetAccount: results[i]["AssetAccount"],
                                ArticleGroupExpenseAccountId: results[i]["ExpenseAccountId"],
                                ArticleGroupExpenseAccount: results[i]["ExpenseAccount"]
                            });
                        }
                        createCboForArticleItemGroup(articleItemGroups);
                    }
                }
            });
        }

        // ======================
        // CBO for Customer Group
        // ======================
        function createCboForArticleItemGroup(articleItemGroups) {
            var articleItemGroupCollection = new wijmo.collections.CollectionView(articleItemGroups);
            var articleGroupList = new Array();
            for (var i = 0; i < articleItemGroupCollection.items.length; i++) {
                articleGroupList.push(articleItemGroupCollection.items[i].ArticleGroupArticleGroup);
            }

            if(document.getElementById('Item_IsLocked').value == 'true') {
                cboArticleGroupForItem.dispose();
                cboArticleGroupForItem = new wijmo.input.ComboBox('#articleItem_itemGroup', {
                    disabled: true,
                    placeholder: "Select Item Group",
                    itemsSource: articleGroupList,
                    isEditable: false,
                    required: false,
                    selectedValue: document.getElementById('articleItem_itemGroup_SelectedValue').value.toString(),
                    onSelectedIndexChanged: function () {
                        $("#articleItem_itemGroup_data").val(articleItemGroupCollection.items[this.selectedIndex].ArticleGroupId);
                        $("#Item_Account_data").val(articleItemGroupCollection.items[this.selectedIndex].ArticleGroupAccountId);
                        $("#Item_Account_selectedValue").val(articleItemGroupCollection.items[this.selectedIndex].ArticleGroupAccount);
                        $("#Item_SalesAccount_data").val(articleItemGroupCollection.items[this.selectedIndex].ArticleGroupSalesAccountId);
                        $("#Item_SalesAccount_selectedValue").val(articleItemGroupCollection.items[this.selectedIndex].ArticleGroupSalesAccount);
                        $("#Item_CostAccount_data").val(articleItemGroupCollection.items[this.selectedIndex].ArticleGroupCostAccountId);
                        $("#Item_CostAccount_selectedValue").val(articleItemGroupCollection.items[this.selectedIndex].ArticleGroupCostAccount);
                        $("#Item_AccumDepAccount_data").val(articleItemGroupCollection.items[this.selectedIndex].ArticleGroupAssetAccountId);
                        $("#Item_AccumDepAccount_selectedValue").val(articleItemGroupCollection.items[this.selectedIndex].ArticleGroupAssetAccount);
                        $("#Item_ExpenseAccount_data").val(articleItemGroupCollection.items[this.selectedIndex].ArticleGroupExpenseAccountId);
                        $("#Item_ExpenseAccount_selectedValue").val(articleItemGroupCollection.items[this.selectedIndex].ArticleGroupExpenseAccount);
                        
                        getAccount();
                    }
                });
            } else if(document.getElementById('Item_IsLocked').value == 'false') {
                cboArticleGroupForItem.dispose();
                cboArticleGroupForItem = new wijmo.input.ComboBox('#articleItem_itemGroup', {
                    disabled: false,
                    placeholder: "Select Item Group",
                    itemsSource: articleGroupList,
                    isEditable: false,
                    required: false,
                    selectedValue: document.getElementById('articleItem_itemGroup_SelectedValue').value.toString(),
                    onSelectedIndexChanged: function () {
                        $("#articleItem_itemGroup_data").val(articleItemGroupCollection.items[this.selectedIndex].ArticleGroupId);
                        $("#Item_Account_data").val(articleItemGroupCollection.items[this.selectedIndex].ArticleGroupAccountId);
                        $("#Item_Account_selectedValue").val(articleItemGroupCollection.items[this.selectedIndex].ArticleGroupAccount);
                        $("#Item_SalesAccount_data").val(articleItemGroupCollection.items[this.selectedIndex].ArticleGroupSalesAccountId);
                        $("#Item_SalesAccount_selectedValue").val(articleItemGroupCollection.items[this.selectedIndex].ArticleGroupSalesAccount);
                        $("#Item_CostAccount_data").val(articleItemGroupCollection.items[this.selectedIndex].ArticleGroupCostAccountId);
                        $("#Item_CostAccount_selectedValue").val(articleItemGroupCollection.items[this.selectedIndex].ArticleGroupCostAccount);
                        $("#Item_AccumDepAccount_data").val(articleItemGroupCollection.items[this.selectedIndex].ArticleGroupAssetAccountId);
                        $("#Item_AccumDepAccount_selectedValue").val(articleItemGroupCollection.items[this.selectedIndex].ArticleGroupAssetAccount);
                        $("#Item_ExpenseAccount_data").val(articleItemGroupCollection.items[this.selectedIndex].ArticleGroupExpenseAccountId);
                        $("#Item_ExpenseAccount_selectedValue").val(articleItemGroupCollection.items[this.selectedIndex].ArticleGroupExpenseAccount);
                        
                        getAccount();
                    }
                });
            } else {
                cboArticleGroupForItem.dispose();
                cboArticleGroupForItem = new wijmo.input.ComboBox('#articleItem_itemGroup', {
                    placeholder: "Select Item Group",
                    itemsSource: articleGroupList,
                    isEditable: false,
                    required: false,
                    selectedValue: document.getElementById('articleItem_itemGroup_SelectedValue').value.toString(),
                    onSelectedIndexChanged: function () {
                        $("#articleItem_itemGroup_data").val(articleItemGroupCollection.items[this.selectedIndex].ArticleGroupId);
                        $("#Item_Account_data").val(articleItemGroupCollection.items[this.selectedIndex].ArticleGroupAccountId);
                        $("#Item_Account_selectedValue").val(articleItemGroupCollection.items[this.selectedIndex].ArticleGroupAccount);
                        $("#Item_SalesAccount_data").val(articleItemGroupCollection.items[this.selectedIndex].ArticleGroupSalesAccountId);
                        $("#Item_SalesAccount_selectedValue").val(articleItemGroupCollection.items[this.selectedIndex].ArticleGroupSalesAccount);
                        $("#Item_CostAccount_data").val(articleItemGroupCollection.items[this.selectedIndex].ArticleGroupCostAccountId);
                        $("#Item_CostAccount_selectedValue").val(articleItemGroupCollection.items[this.selectedIndex].ArticleGroupCostAccount);
                        $("#Item_AccumDepAccount_data").val(articleItemGroupCollection.items[this.selectedIndex].ArticleGroupAssetAccountId);
                        $("#Item_AccumDepAccount_selectedValue").val(articleItemGroupCollection.items[this.selectedIndex].ArticleGroupAssetAccount);
                        $("#Item_ExpenseAccount_data").val(articleItemGroupCollection.items[this.selectedIndex].ArticleGroupExpenseAccountId);
                        $("#Item_ExpenseAccount_selectedValue").val(articleItemGroupCollection.items[this.selectedIndex].ArticleGroupExpenseAccount);

                        getAccount();
                    }
                });
            }
        }

        // ====================
        // Get Artile Item Unit
        // ====================
        function getArticleItemUnitForComboBox() {
            articleItemUnits = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listUnit',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            articleItemUnits.push({
                                ArticleUnitId: results[i]["Id"],
                                ArticleUnitArticleUnit: results[i]["Unit"]
                            });
                        }
                        createCboForArticleItemUnit(articleItemUnits);
                    }
                }
            });
        }

        // =====================
        // CBO for Customer Unit
        // =====================
        function createCboForArticleItemUnit(articleItemUnits) {
            var articleItemUnitCollection = new wijmo.collections.CollectionView(articleItemUnits);
            var articleUnitList = new Array();
            for (var i = 0; i < articleItemUnitCollection.items.length; i++) {
                articleUnitList.push(articleItemUnitCollection.items[i].ArticleUnitArticleUnit);
            }

            if(document.getElementById('Item_IsLocked').value == 'true') {
                cboArticleUnitForItem.dispose();
                cboArticleUnitForItem = new wijmo.input.ComboBox('#articleItem_unit', {
                    disabled: true,
                    placeholder: "Select Unit",
                    itemsSource: articleUnitList,
                    isEditable: false,
                    required: false,
                    selectedValue: document.getElementById('articleItem_unit_SelectedValue').value.toString(),
                    onSelectedIndexChanged: function () {
                        $("#articleItem_unit_data").val(articleItemUnitCollection.items[this.selectedIndex].ArticleUnitId);
                    }
                });
            } else if(document.getElementById('Item_IsLocked').value == 'false') {
                cboArticleUnitForItem.dispose();
                cboArticleUnitForItem = new wijmo.input.ComboBox('#articleItem_unit', {
                    disabled: false,
                    placeholder: "Select Unit",
                    itemsSource: articleUnitList,
                    isEditable: false,
                    required: false,
                    selectedValue: document.getElementById('articleItem_unit_SelectedValue').value.toString(),
                    onSelectedIndexChanged: function () {
                        $("#articleItem_unit_data").val(articleItemUnitCollection.items[this.selectedIndex].ArticleUnitId);
                    }
                });
            } else {
                cboArticleUnitForItem.dispose();
                cboArticleUnitForItem = new wijmo.input.ComboBox('#articleItem_unit', {
                    placeholder: "Select Unit",
                    itemsSource: articleUnitList,
                    isEditable: false,
                    required: false,
                    selectedValue: document.getElementById('articleItem_unit_SelectedValue').value.toString(),
                    onSelectedIndexChanged: function () {
                        $("#articleItem_unit_data").val(articleItemUnitCollection.items[this.selectedIndex].ArticleUnitId);
                    }
                });
            }
        }

        // ===================
        // Get Artile Tax Type
        // ===================
        function getArticleTaxTypeForComboBox() {
            taxTypes = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listTaxType',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            taxTypes.push({
                                ArticleTaxTypeId: results[i]["Id"],
                                ArticleTaxTypeTaxType: results[i]["TaxType"]
                            });
                        }
                        createCboForArticleInputTaxType(taxTypes);
                        createCboForArticleOutputTaxType(taxTypes);
                        createCboForArticleWithholdingTaxType(taxTypes);
                    }
                }
            });
        }

        // ======================
        // CBO for input tax type
        // ======================
        function createCboForArticleInputTaxType(taxTypes) {
            var articleInputTaxTypeCollection = new wijmo.collections.CollectionView(taxTypes);
            var articleGroupList = new Array();
            for (var i = 0; i < articleInputTaxTypeCollection.items.length; i++) {
                articleGroupList.push(articleInputTaxTypeCollection.items[i].ArticleTaxTypeTaxType);
            }

            if(document.getElementById('Item_IsLocked').value == 'true') {
                cboArticleInputTaxTypeForItem.dispose();
                cboArticleInputTaxTypeForItem = new wijmo.input.ComboBox('#articleItem_inputTax', {
                    disabled: true,
                    placeholder: "Select Input Tax Type",
                    itemsSource: articleGroupList,
                    isEditable: false,
                    required: false,
                    selectedValue: document.getElementById('articleItem_inputTax_SelectedValue').value.toString(),
                    onSelectedIndexChanged: function () {
                        $("#articleItem_inputTax_data").val(articleInputTaxTypeCollection.items[this.selectedIndex].ArticleTaxTypeId);
                    }
                });
            } else if(document.getElementById('Item_IsLocked').value == 'false') {
                cboArticleInputTaxTypeForItem.dispose();
                cboArticleInputTaxTypeForItem = new wijmo.input.ComboBox('#articleItem_inputTax', {
                    disabled: false,
                    placeholder: "Select Input Tax Type",
                    itemsSource: articleGroupList,
                    isEditable: false,
                    required: false,
                    selectedValue: document.getElementById('articleItem_inputTax_SelectedValue').value.toString(),
                    onSelectedIndexChanged: function () {
                        $("#articleItem_inputTax_data").val(articleInputTaxTypeCollection.items[this.selectedIndex].ArticleTaxTypeId);
                    }
                });
            } else {
                cboArticleInputTaxTypeForItem.dispose();
                cboArticleInputTaxTypeForItem = new wijmo.input.ComboBox('#articleItem_inputTax', {
                    placeholder: "Select Input Tax Type",
                    itemsSource: articleGroupList,
                    isEditable: false,
                    required: false,
                    selectedValue: document.getElementById('articleItem_inputTax_SelectedValue').value.toString(),
                    onSelectedIndexChanged: function () {
                        $("#articleItem_inputTax_data").val(articleInputTaxTypeCollection.items[this.selectedIndex].ArticleTaxTypeId);
                    }
                });
            }
        }

        // ======================
        // CBO for output tax type
        // ======================
        function createCboForArticleOutputTaxType(taxTypes) {
            var articleOutputTaxTypeCollection = new wijmo.collections.CollectionView(taxTypes);
            var articleGroupList = new Array();
            for (var i = 0; i < articleOutputTaxTypeCollection.items.length; i++) {
                articleGroupList.push(articleOutputTaxTypeCollection.items[i].ArticleTaxTypeTaxType);
            }

            if(document.getElementById('Item_IsLocked').value == 'true') {
                cboArticleOutputTaxTypeForItem.dispose();
                cboArticleOutputTaxTypeForItem = new wijmo.input.ComboBox('#articleItem_outputTax', {
                    disabled: true,
                    placeholder: "Select Output Tax Type",
                    itemsSource: articleGroupList,
                    isEditable: false,
                    required: false,
                    selectedValue: document.getElementById('articleItem_outputTax_SelectedValue').value.toString(),
                    onSelectedIndexChanged: function () {
                        $("#articleItem_outputTax_data").val(articleOutputTaxTypeCollection.items[this.selectedIndex].ArticleTaxTypeId);
                    }
                });
            } else if(document.getElementById('Item_IsLocked').value == 'false') {
                cboArticleOutputTaxTypeForItem.dispose();
                cboArticleOutputTaxTypeForItem = new wijmo.input.ComboBox('#articleItem_outputTax', {
                    disabled: false,
                    placeholder: "Select Output Tax Type",
                    itemsSource: articleGroupList,
                    isEditable: false,
                    required: false,
                    selectedValue: document.getElementById('articleItem_outputTax_SelectedValue').value.toString(),
                    onSelectedIndexChanged: function () {
                        $("#articleItem_outputTax_data").val(articleOutputTaxTypeCollection.items[this.selectedIndex].ArticleTaxTypeId);
                    }
                });
            } else {
                cboArticleOutputTaxTypeForItem.dispose();
                cboArticleOutputTaxTypeForItem = new wijmo.input.ComboBox('#articleItem_outputTax', {
                    placeholder: "Select Output Tax Type",
                    itemsSource: articleGroupList,
                    isEditable: false,
                    required: false,
                    selectedValue: document.getElementById('articleItem_outputTax_SelectedValue').value.toString(),
                    onSelectedIndexChanged: function () {
                        $("#articleItem_outputTax_data").val(articleOutputTaxTypeCollection.items[this.selectedIndex].ArticleTaxTypeId);
                    }
                });
            }

        }

        // =============================
        // CBO for Withholding  tax type
        // =============================
        function createCboForArticleWithholdingTaxType(taxTypes) {
            var articleWithholdingTaxTypeCollection = new wijmo.collections.CollectionView(taxTypes);
            var articleGroupList = new Array();
            for (var i = 0; i < articleWithholdingTaxTypeCollection.items.length; i++) {
                articleGroupList.push(articleWithholdingTaxTypeCollection.items[i].ArticleTaxTypeTaxType);
            }

            if(document.getElementById('Item_IsLocked').value == 'true') {
                cboArticleWithholdingTaxTypeForItem.dispose();
                cboArticleWithholdingTaxTypeForItem = new wijmo.input.ComboBox('#articleItem_withholdingTax', {
                    disabled: true,
                    placeholder: "Select Withholding Tax Type",
                    itemsSource: articleGroupList,
                    isEditable: false,
                    required: false,
                    selectedValue: document.getElementById('articleItem_withholdingTax_SelectedValue').value.toString(),
                    onSelectedIndexChanged: function () {
                        $("#articleItem_withholdingTax_data").val(articleWithholdingTaxTypeCollection.items[this.selectedIndex].ArticleTaxTypeId);
                    }
                });
            } else if(document.getElementById('Item_IsLocked').value == 'false') {
                cboArticleWithholdingTaxTypeForItem.dispose();
                cboArticleWithholdingTaxTypeForItem = new wijmo.input.ComboBox('#articleItem_withholdingTax', {
                    disabled: false,
                    placeholder: "Select Withholding Tax Type",
                    itemsSource: articleGroupList,
                    isEditable: false,
                    required: false,
                    selectedValue: document.getElementById('articleItem_withholdingTax_SelectedValue').value.toString(),
                    onSelectedIndexChanged: function () {
                        $("#articleItem_withholdingTax_data").val(articleWithholdingTaxTypeCollection.items[this.selectedIndex].ArticleTaxTypeId);
                    }
                });
            } else {
                cboArticleWithholdingTaxTypeForItem.dispose();
                cboArticleWithholdingTaxTypeForItem = new wijmo.input.ComboBox('#articleItem_withholdingTax', {
                    placeholder: "Select Withholding Tax Type",
                    itemsSource: articleGroupList,
                    isEditable: false,
                    required: false,
                    selectedValue: document.getElementById('articleItem_withholdingTax_SelectedValue').value.toString(),
                    onSelectedIndexChanged: function () {
                        $("#articleItem_withholdingTax_data").val(articleWithholdingTaxTypeCollection.items[this.selectedIndex].ArticleTaxTypeId);
                    }
                });
            }
        }

        // ===========
        // Get Account
        // ===========
        function getAccount() {
            accounts = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listAccount',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            accounts.push({
                                AccountId: results[i]["Id"],
                                AccountAccount: results[i]["Account"]
                            });
                        }
                        createCboForGLAccount(accounts);
                    }
                }
            });
        }

        // ===============
        // CBO for Account
        // ===============
        function createCboForGLAccount(accounts) {
            var accountCollection = new wijmo.collections.CollectionView(accounts);
            var accountList = new Array();
            for (var i = 0; i < accountCollection.items.length; i++) {
                accountList.push(accountCollection.items[i].AccountAccount);
            }

            cboAccount.dispose();
            cboAccount = new wijmo.input.ComboBox('#Item_Account', {
                disabled: true,
                placeholder: "Select Account",
                itemsSource: accountList,
                isEditable: false,
                required: false,
                selectedValue: document.getElementById('Item_Account_selectedValue').value.toString(),
                onSelectedIndexChanged: function () {
                    $("#Item_Account_data").val(accountCollection.items[this.selectedIndex].AccountId);
                }
            });

            cboSaleAccount.dispose();
            cboSaleAccount = new wijmo.input.ComboBox('#Item_SalesAccount', {
                disabled: true,
                placeholder: "Select Sales Account",
                itemsSource: accountList,
                isEditable: false,
                required: false,
                selectedValue: document.getElementById('Item_SalesAccount_selectedValue').value.toString(),
                onSelectedIndexChanged: function () {
                    $("#Item_SalesAccount_data").val(accountCollection.items[this.selectedIndex].AccountId);
                }
            });

            cboCostAccount.dispose();
            cboCostAccount = new wijmo.input.ComboBox('#Item_CostAccount', {
                disabled: true,
                placeholder: "Select Cost Account",
                itemsSource: accountList,
                isEditable: false,
                required: false,
                selectedValue: document.getElementById('Item_CostAccount_selectedValue').value.toString(),
                onSelectedIndexChanged: function () {
                    $("#Item_CostAccount_data").val(accountCollection.items[this.selectedIndex].AccountId);
                }
            });

            cboAccumDepAccount.dispose();
            cboAccumDepAccount = new wijmo.input.ComboBox('#Item_AccumDepAccount', {
                disabled: true,
                placeholder: "Select Accum Dep Account",
                itemsSource: accountList,
                isEditable: false,
                required: false,
                selectedValue: document.getElementById('Item_AccumDepAccount_selectedValue').value.toString(),
                onSelectedIndexChanged: function () {
                    $("#Item_AccumDepAccount_data").val(accountCollection.items[this.selectedIndex].AccountId);
                }
            });

            cboExpenseAccount.dispose();
            cboExpenseAccount = new wijmo.input.ComboBox('#Item_ExpenseAccount', {
                disabled: true,
                placeholder: "Select Expense Account",
                itemsSource: accountList,
                isEditable: false,
                required: false,
                selectedValue: document.getElementById('Item_ExpenseAccount_selectedValue').value.toString(),
                onSelectedIndexChanged: function () {
                    $("#Item_ExpenseAccount_data").val(accountCollection.items[this.selectedIndex].AccountId);
                }
            });
        }

        // ========================================================
        // Function with leading zeroes to display the article code
        // ========================================================
        function zerofill(number, length) {
            var result = number.toString();
            var pad = length - result.length;
            while(pad > 0) {
                result = '0' + result;
                pad--;
            }
            return result;
        }

        // =========
        // SAVE Item
        // =========
        function itemSaveItemButton_OnClick() {
            $("#item_saveSaveItem").prop("disabled", true);
            $("#item_saveItem").prop("disabled", true);
            $("#item_editItem").prop("disabled", true);
            $("#item_printItem").prop("disabled", true);
            $("#item_closeItem").prop("disabled", true);

            var itemObject = new Object();
            var itemId = @itemId;

            if(itemId > 0) {
                itemObject.IsLocked = document.getElementById('Item_IsLocked_defaultTrue').value;
            } else {
                itemObject.IsLocked = document.getElementById('Item_IsLocked_defaultFalse').value;
            }

            var dataUpdate = JSON.stringify(itemObject);
            $.ajax({
                type: "PUT",
                url: '/api/updateArticleIsLock/' + itemId,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: dataUpdate,
                statusCode: {
                    200: function () {
                        toastr.success("Saved Item");
                        window.setTimeout(function () {
                            location.reload()
                        }, 1000);
                        $("#item_saveSaveItem").prop("disabled", true);
                        $("#item_saveItem").prop("disabled", true);
                        $("#item_editItem").prop("disabled", true);
                        $("#item_printItem").prop("disabled", true);
                        $("#item_closeItem").prop("disabled", true);
                    },
                    404: function () {
                        toastr.error("Can't Update");
                        $("#item_saveSaveItem").prop("disabled", false);
                        $("#item_saveItem").prop("disabled", false);
                        $("#item_editItem").prop("disabled", false);
                        $("#item_printItem").prop("disabled", false);
                        $("#item_closeItem").prop("disabled", false);

                    },
                    400: function () {
                        toastr.error("Bad Request");
                        $("#item_saveSaveItem").prop("disabled", false);
                        $("#item_saveItem").prop("disabled", false);
                        $("#item_editItem").prop("disabled", false);
                        $("#item_printItem").prop("disabled", false);
                        $("#item_closeItem").prop("disabled", false);
                    }
                }
            });
        }

        // =========
        // EDIT Item
        // =========
        function itemEditButton_OnClick() {
            $("#item_saveSaveItem").prop("disabled", true);
            $("#item_saveItem").prop("disabled", true);
            $("#item_editItem").prop("disabled", true);
            $("#item_printItem").prop("disabled", true);
            $("#item_closeItem").prop("disabled", true);

            var itemObject = new Object();
            var itemId = @itemId;

            if(itemId > 0) {
                itemObject.IsLocked = document.getElementById('Item_IsLocked_defaultFalse').value;
            } else {
                itemObject.IsLocked = document.getElementById('Item_IsLocked_defaultTrue').value;
            }

            var dataUpdate = JSON.stringify(itemObject);
            $.ajax({
                type: "PUT",
                url: '/api/updateArticleIsLock/' + itemId,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: dataUpdate,
                statusCode: {
                    200: function () {
                        toastr.success("Unlocked");
                        window.setTimeout(function () {
                            location.reload()
                        }, 1000);
                        $("#item_saveSaveItem").prop("disabled", true);
                        $("#item_saveItem").prop("disabled", true);
                        $("#item_editItem").prop("disabled", true);
                        $("#item_printItem").prop("disabled", true);
                        $("#item_closeItem").prop("disabled", true);
                    },
                    404: function () {
                        toastr.error("Can't Update");
                        $("#item_saveSaveItem").prop("disabled", false);
                        $("#item_saveItem").prop("disabled", false);
                        $("#item_editItem").prop("disabled", false);
                        $("#item_printItem").prop("disabled", false);
                        $("#item_closeItem").prop("disabled", false);

                    },
                    400: function () {
                        toastr.error("Bad Request");
                        $("#item_saveSaveItem").prop("disabled", false);
                        $("#item_saveItem").prop("disabled", false);
                        $("#item_editItem").prop("disabled", false);
                        $("#item_printItem").prop("disabled", false);
                        $("#item_closeItem").prop("disabled", false);
                    }
                }
            });
        }

        // ========
        // Add Item
        // ========
        function itemSaveButton_OnClick() {
            var itemObject = new Object();
            var itemId = @itemId;
            itemObject.ArticleCode = document.getElementById('articleItem_code').value;
            itemObject.ManualArticleCode = document.getElementById('articleItem_manualCode').value;
            itemObject.Article = document.getElementById('articleItem_item').value;
            itemObject.Category = document.getElementById('articleItem_category').value;
            itemObject.ArticleGroupId = document.getElementById('articleItem_itemGroup_data').value;
            itemObject.AccountId = document.getElementById('Item_Account_data').value;
            itemObject.SalesAccountId = document.getElementById('Item_SalesAccount_data').value;
            itemObject.CostAccountId = document.getElementById('Item_CostAccount_data').value;
            itemObject.AssetAccountId = document.getElementById('Item_AccumDepAccount_data').value;
            itemObject.ExpenseAccountId = document.getElementById('Item_ExpenseAccount_data').value;
            itemObject.UnitId = document.getElementById('articleItem_unit_data').value;
            itemObject.OutputTaxId = document.getElementById('articleItem_outputTax_data').value;
            itemObject.InputTaxId = document.getElementById('articleItem_inputTax_data').value;
            itemObject.WTaxTypeId = document.getElementById('articleItem_withholdingTax_data').value;
            itemObject.Price = document.getElementById('articleItem_price').value;
            itemObject.Cost = document.getElementById('articleItem_manualCost').value;
            itemObject.IsInventory = document.getElementById('articleItem_Inventory').checked;
            itemObject.Particulars = document.getElementById('articleItem_particulars').value;
            itemObject.DateAcquired = document.getElementById('Item_DateAcquired_data').value;
            itemObject.UsefulLife = document.getElementById('Item_UsefulLife').value;
            itemObject.SalvageValue = document.getElementById('Item_SalvageValue').value;
            itemObject.ManualArticleOldCode = document.getElementById('articleItem_oldManualCode').value;
            var data = JSON.stringify(itemObject);

            if( document.getElementById('articleItem_itemGroup_data').value == '') {
                document.getElementById("articleItem_itemGroup").style.border = "1px solid red";
            } else {
                document.getElementById("articleItem_itemGroup").style.border = "1px solid #C8C8C8";
            }

            if( document.getElementById('articleItem_unit_data').value == '') {
                document.getElementById("articleItem_unit").style.border = "1px solid red";
            } else {
                document.getElementById("articleItem_unit").style.border = "1px solid #C8C8C8 ";
            }

            if( document.getElementById('articleItem_inputTax_data').value == '') {
                document.getElementById("articleItem_inputTax").style.border = "1px solid red";
            } else {
                document.getElementById("articleItem_inputTax").style.border = "1px solid #C8C8C8 ";
            }

            if( document.getElementById('articleItem_outputTax_data').value == '') {
                document.getElementById("articleItem_outputTax").style.border = "1px solid red";
            } else {
                document.getElementById("articleItem_outputTax").style.border = "1px solid #C8C8C8";
            }

            if( document.getElementById('articleItem_withholdingTax_data').value == '') {
                document.getElementById("articleItem_withholdingTax").style.border = "1px solid red";
            } else {
                document.getElementById("articleItem_withholdingTax").style.border = "1px solid #C8C8C8";
            }

            if( document.getElementById('Item_Account_data').value == '') {
                document.getElementById("Item_Account").style.border = "1px solid red";
            } else {
                document.getElementById("Item_Account").style.border = "1px solid #C8C8C8";
            }

            if( document.getElementById('Item_SalesAccount_data').value == '') {
                document.getElementById("Item_SalesAccount").style.border = "1px solid red";
            } else {
                document.getElementById("Item_SalesAccount").style.border = "1px solid #C8C8C8";
            }

            if( document.getElementById('Item_CostAccount_data').value == '') {
                document.getElementById("Item_CostAccount").style.border = "1px solid red";
            } else {
                document.getElementById("Item_CostAccount").style.border = "1px solid #C8C8C8";
            }

            if( document.getElementById('Item_AccumDepAccount_data').value == '') {
                document.getElementById("Item_AccumDepAccount").style.border = "1px solid red";
            } else {
                document.getElementById("Item_AccumDepAccount").style.border = "1px solid #C8C8C8";
            }

            if( document.getElementById('Item_ExpenseAccount_data').value == '') {
                document.getElementById("Item_ExpenseAccount").style.border = "1px solid red";
            } else {
                document.getElementById("Item_ExpenseAccount").style.border = "1px solid #C8C8C8";
            }

            var isValid = true;
            $('.requiredItem').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                }
                else {
                    $(this).css({
                        "border": "",
                    });
                }
            });
            if (isValid == false) {
                toastr.error("Invalid Entry");
                e.preventDefault();
            }
            else {
                if(itemId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/addArticle/1',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: data,
                        statusCode: {
                            200: function () {
                                $("#item_saveSaveItem").prop("disabled", true);
                                $("#item_saveItem").prop("disabled", true);
                                $("#item_editItem").prop("disabled", true);
                                $("#item_printItem").prop("disabled", true);
                                $("#item_closeItem").prop("disabled", true);
                                toastr.success("Successfully Saved");
                                setTimeout(getLastInsertedIdItemByArticleTypeId, 1000);
                            },
                            404: function () {
                                toastr.error("Can't Save");
                                $("#item_saveSaveItem").prop("disabled", true);
                                $("#item_saveItem").prop("disabled", true);
                                $("#item_editItem").prop("disabled", true);
                                $("#item_printItem").prop("disabled", true);
                                $("#item_closeItem").prop("disabled", true);
                            },
                            400: function () {
                                toastr.error("Bad Request");
                                $("#item_saveSaveItem").prop("disabled", true);
                                $("#item_saveItem").prop("disabled", true);
                                $("#item_editItem").prop("disabled", true);
                                $("#item_printItem").prop("disabled", true);
                                $("#item_closeItem").prop("disabled", true);
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/updateArticle/' + itemId + '/1',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: data,
                        statusCode: {
                            200: function () {
                                $("#item_saveSaveItem").prop("disabled", true);
                                $("#item_saveItem").prop("disabled", true);
                                $("#item_editItem").prop("disabled", true);
                                $("#item_printItem").prop("disabled", true);
                                $("#item_closeItem").prop("disabled", true);
                                toastr.success("Successfully Updated");
                                window.setTimeout(function () {
                                    location.reload()
                                }, 1000);
                            },
                            404: function () {
                                toastr.error("Can't Save");
                                $("#item_saveSaveItem").prop("disabled", true);
                                $("#item_saveItem").prop("disabled", true);
                                $("#item_editItem").prop("disabled", true);
                                $("#item_printItem").prop("disabled", true);
                                $("#item_closeItem").prop("disabled", true);
                            },
                            400: function () {
                                toastr.error("Bad Request");
                                $("#item_saveSaveItem").prop("disabled", true);
                                $("#item_saveItem").prop("disabled", true);
                                $("#item_editItem").prop("disabled", true);
                                $("#item_printItem").prop("disabled", true);
                                $("#item_closeItem").prop("disabled", true);
                            }
                        }
                    });
                }
            }
        }

        // ===========
        // Onload Page
        // ===========
        $(document).ready(function () {
            document.getElementById('isLocked_Status').disabled = true;
            document.getElementById('Item_IsLocked_defaultTrue').value = 'true';
            document.getElementById('Item_IsLocked_defaultFalse').value = 'false';
            document.getElementById('currentPage').innerHTML = '<a href="@Url.Action("Index", "Software", new { BranchId = branchId })" class="currentPageLinkCustom">Main Menu</a> > ' + ' <a href="@Url.Action("Items", "Software", new { BranchId = branchId })" class="currentPageLinkCustom">Items</a> ' + ' > Item Detail';

            getArticleItemById();

            itemId = @itemId;
            if(itemId == 0) {
                // comboboxes
                getArticleItemGroupForComboBox();
                getArticleItemUnitForComboBox();
                getArticleTaxTypeForComboBox();
                getAccount();
                if(document.getElementById('articleItem_code_data').value == 0) {
                    document.getElementById('articleItem_code').value = "0000000001";
                }

                document.getElementById('articleItem_code_data').value = 0;

                var items = new wijmo.collections.ObservableArray;
                $.ajax({
                    url: '/api/articleLastArticleCodeByArticleTypeId/1',
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    data: {},
                    success: function (Results) {
                        if (Results.length > 0) {
                            items.push({
                                Id: Results.Id,
                                ItemArticleCode: Results.ArticleCode
                            });
                        }
                        var ArticleCode = parseInt(Results.ArticleCode);
                        var ArticleCode_plusOne = 0000000001;
                        var ArticleCode_Results = ArticleCode + ArticleCode_plusOne;

                        document.getElementById('articleItem_code_data').value = zerofill(ArticleCode_Results, 10);
                        document.getElementById('articleItem_code').value = zerofill(ArticleCode_Results, 10);
                    }
                });
                $("#item_saveSaveItem").prop("disabled", false);
                $("#item_saveItem").prop("disabled", false);
                $("#item_editItem").prop("disabled", true);
                $("#item_printItem").prop("disabled", true);
            }

            document.getElementById('articleItem_code').disabled = true;

            cboArticleGroupForItem  = new wijmo.input.ComboBox('#articleItem_itemGroup');
            cboArticleUnitForItem = new wijmo.input.ComboBox('#articleItem_unit');
            cboArticleInputTaxTypeForItem = new wijmo.input.ComboBox('#articleItem_inputTax');
            cboArticleOutputTaxTypeForItem = new wijmo.input.ComboBox('#articleItem_outputTax');
            cboArticleWithholdingTaxTypeForItem = new wijmo.input.ComboBox('#articleItem_withholdingTax');
            cboAccount = new wijmo.input.ComboBox('#Item_Account');
            cboSaleAccount = new wijmo.input.ComboBox('#Item_SalesAccount');
            cboCostAccount = new wijmo.input.ComboBox('#Item_CostAccount');
            cboAccumDepAccount = new wijmo.input.ComboBox('#Item_AccumDepAccount');
            cboExpenseAccount = new wijmo.input.ComboBox('#Item_ExpenseAccount');

            var d = new Date();
            document.getElementById("Item_DateAcquired_data").value = [ d.getMonth()+1, d.getDate(), d.getFullYear()].join('/');
            dateAcquired = new wijmo.input.InputDate('#Item_DateAcquired', {
                format: 'MM/dd/yyyy',
                value: new Date(),
                mask: '99/99/9999',
                onValueChanged: function () {
                    document.getElementById('Item_DateAcquired_data').value = this.value.toLocaleDateString();
                }
            });
        });
    </script>

    <!-- ======================= -->
    <!-- Unit Conversion Scripts -->
    <!-- ======================= -->
    <script type="text/javascript">
        // ====================================
        // Global Variables for Unit Conversion
        // ====================================
        var unitConversions;
        var unitConversionGrid;

        var btnFirstPageGridUnitConversion;
        var btnPreviousPageGridUnitConversion;
        var btnNextPageGridUnitConversion;
        var btnLastPageGridUnitConversion;
        var btnCurrentPageGridUnitConversion;

        // ========================
        // GET Unit Conversion List
        // ========================
        function getUnitConversion() {
            var unitConversions = new wijmo.collections.ObservableArray;
            //$('#loadingModal').modal('show');
            //$.ajax({
            //    url: '/api/listAccount',
            //    cache: false,
            //    type: 'GET',
            //    contentType: 'application/json; charset=utf-8',
            //    data: {},
            //    success: function (Results) {
            //        $('#loadingModal').modal('hide');
            //        if (Results.length > 0) {
            //            for (i = 0; i < Results.length; i++) {
            //                journalLedger.push({
            //                    EditId: "<button class='btn btn-primary btn-xs btn-block' onclick='cmdAccountEditButton_OnClick()'><i class='fa fa-edit'></i> Edit</button>",
            //                    DeleteId: "<button class='btn btn-danger btn-xs btn-block' onclick='cmdAccountDeleteButton_OnClick()'><i class='fa fa-trash'></i> Delete</button>",
            //                    Id: Results[i]["Id"],
            //                    AccountCode: Results[i]["AccountCode"],
            //                    Account: Results[i]["Account"],
            //                    AccountTypeId: Results[i]["AccountTypeId"],
            //                    AccountType: Results[i]["AccountType"],
            //                    AccountCashFlowId: Results[i]["AccountCashFlowId"],
            //                    AccountCashFlow: Results[i]["AccountCashFlow"],
            //                    IsLocked: Results[i]["IsLocked"],
            //                    CreatedById: Results[i]["CreatedById"],
            //                    CreatedBy: Results[i]["CreatedBy"],
            //                    CreatedDateTime: Results[i]["CreatedDateTime"],
            //                    UpdatedById: Results[i]["UpdatedById"],
            //                    UpdatedBy: Results[i]["UpdatedBy"],
            //                    UpdatedDateTime: Results[i]["UpdatedDateTime"]
            //                });
            //            }
            //        }
            //    }
            //}).fail(function (xhr, textStatus, err) {
            //    alert(err);
            //});
            //return unitConversions;
        }
        // ======================================
        // FlexGrid Selection for Unit Conversion
        // ======================================
        function updateDetailsUnitConversion() {
            var item = unitConversions.currentItem;
            document.getElementById('createdBy').innerHTML = item.CreatedBy;
            document.getElementById('createdDate').innerHTML = item.CreatedDateTime;
            document.getElementById('updatedBy').innerHTML = item.UpdatedBy;
            document.getElementById('updatedDate').innerHTML = item.UpdatedDateTime;
        }

        // ======================================
        // Navigation Buttons for Unit Conversion
        // ======================================
        function updateNavigateButtonsUnitConversion() {
            if (unitConversions.pageSize <= 0) {
                document.getElementById('navigationPageGridUnitConversion').style.display = 'none';
                return;
            }
            document.getElementById('navigationPageGridUnitConversion').style.display = 'block';
            if (unitConversions.pageIndex === 0) {
                btnFirstPageGridUnitConversion.setAttribute('disabled', 'disabled');
                btnPreviousPageGridUnitConversion.setAttribute('disabled', 'disabled');
                btnNextPageGridUnitConversion.removeAttribute('disabled');
                btnLastPageGridUnitConversion.removeAttribute('disabled');
            } else if (unitConversions.pageIndex === (unitConversions.pageCount - 1)) {
                btnFirstPageGridUnitConversion.removeAttribute('disabled');
                btnPreviousPageGridUnitConversion.removeAttribute('disabled');
                btnLastPageGridUnitConversion.setAttribute('disabled', 'disabled');
                btnNextPageGridUnitConversion.setAttribute('disabled', 'disabled');
            } else {
                btnFirstPageGridUnitConversion.removeAttribute('disabled');
                btnPreviousPageGridUnitConversion.removeAttribute('disabled');
                btnNextPageGridUnitConversion.removeAttribute('disabled');
                btnLastPageGridUnitConversion.removeAttribute('disabled');
            }
            btnCurrentPageGridUnitConversion.innerHTML = (unitConversions.pageIndex + 1) + ' / ' + unitConversions.pageCount;
        }

        // ================
        //  Unit Conversion
        // ================
        function unitConversionTab() {
            unitConversions = new wijmo.collections.CollectionView();
            unitConversions.canFilter = true;
            unitConversions.pageSize = 15;

            var filterTextUnitConversion = '';
            $('#InputFilterUnitConversion').keyup(function () {
                filterTextUnitConversion = this.value.toLowerCase();
                unitConversions.refresh();
            });
            unitConversions.filter = function (item) {
                return !filterTextUnitConversion || (item.unitConversions.toLowerCase().indexOf(filterTextUnitConversion) > -1);
            }
            unitConversions.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsUnitConversion();
            });
            unitConversions.currentChanged.addHandler(function (sender, args) {
                updateDetailsUnitConversion();
            });

            // Flex Grid for Unit Conversion
            unitConversionGrid = new wijmo.grid.FlexGrid('#UnitConversionGrid');
            unitConversionGrid.initialize({
                columns: [
                            {
                                "header": "Edit",
                                "binding": "EditId",
                                "width": 60,
                                "align": "center",
                                "allowResizing": false,
                                "allowSorting": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Delete",
                                "binding": "DeleteId",
                                "width": 70,
                                "align": "center",
                                "allowResizing": false,
                                "allowSorting": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Multiplier",
                                //"binding": "Date",
                                "allowSorting": true,
                                "width": "1*",
                            },
                            {
                                "header": "Unit.",
                                // "binding": "Doc Ref.",
                                "allowSorting": true,
                                "width": "3*"
                            },
                            {
                                "header": "Base Unit",
                                // "binding": "Branch",
                                "allowSorting": true,
                                "width": "2*"
                            },
                            {
                                "header": "C",
                                // "binding": "Account",
                                "allowSorting": true,
                                "width": "2*"
                            },
                ],
                autoGenerateColumns: false,
                //itemsSource: unitConversions,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            unitConversionGrid.trackChanges = true;

            //Navigation button for Unit Conversion
            btnFirstPageGridUnitConversion = document.getElementById('btnMoveToFirstPageGridUnitConversion');
            btnPreviousPageGridUnitConversion = document.getElementById('btnMoveToPreviousPageGridUnitConversion');
            btnNextPageGridUnitConversion = document.getElementById('btnMoveToNextPageGridUnitConversion');
            btnLastPageGridUnitConversion = document.getElementById('btnMoveToLastPageGridUnitConversion');
            btnCurrentPageGridUnitConversion = document.getElementById('btnCurrentPageGridUnitConversion');

            updateNavigateButtonsUnitConversion();

            btnFirstPageGridUnitConversion.addEventListener('click', function () {
                unitConversions.moveToFirstPage();
                updateNavigateButtonsUnitConversion();
            });
            btnPreviousPageGridUnitConversion.addEventListener('click', function () {
                unitConversions.moveToPreviousPage();
                updateNavigateButtonsUnitConversion();
            });
            btnNextPageGridUnitConversion.addEventListener('click', function () {
                unitConversions.moveToNextPage();
                updateNavigateButtonsUnitConversion();
            });
            btnLastPageGridUnitConversion.addEventListener('click', function () {
                unitConversions.moveToLastPage();
                updateNavigateButtonsUnitConversion();
            });
        }
    </script>

    <!-- ================= -->
    <!-- Component Scripts -->
    <!-- ================= -->
    <script type="text/javascript">
        // ==============================
        // Global Variables for Component
        // ==============================
        var components;
        var componentGrid;

        var btnFirstPageGridComponent;
        var btnPreviousPageGridComponent;
        var btnNextPageGridComponent;
        var btnLastPageGridComponent;
        var btnCurrentPageGridComponent;

        // ==================
        // GET Component List
        // ==================
        function getComponent() {
            var components = new wijmo.collections.ObservableArray;
            //$('#loadingModal').modal('show');
            //$.ajax({
            //    url: '/api/listAccount',
            //    cache: false,
            //    type: 'GET',
            //    contentType: 'application/json; charset=utf-8',
            //    data: {},
            //    success: function (Results) {
            //        $('#loadingModal').modal('hide');
            //        if (Results.length > 0) {
            //            for (i = 0; i < Results.length; i++) {
            //                journalLedger.push({
            //                    EditId: "<button class='btn btn-primary btn-xs btn-block' onclick='cmdAccountEditButton_OnClick()'><i class='fa fa-edit'></i> Edit</button>",
            //                    DeleteId: "<button class='btn btn-danger btn-xs btn-block' onclick='cmdAccountDeleteButton_OnClick()'><i class='fa fa-trash'></i> Delete</button>",
            //                    Id: Results[i]["Id"],
            //                    AccountCode: Results[i]["AccountCode"],
            //                    Account: Results[i]["Account"],
            //                    AccountTypeId: Results[i]["AccountTypeId"],
            //                    AccountType: Results[i]["AccountType"],
            //                    AccountCashFlowId: Results[i]["AccountCashFlowId"],
            //                    AccountCashFlow: Results[i]["AccountCashFlow"],
            //                    IsLocked: Results[i]["IsLocked"],
            //                    CreatedById: Results[i]["CreatedById"],
            //                    CreatedBy: Results[i]["CreatedBy"],
            //                    CreatedDateTime: Results[i]["CreatedDateTime"],
            //                    UpdatedById: Results[i]["UpdatedById"],
            //                    UpdatedBy: Results[i]["UpdatedBy"],
            //                    UpdatedDateTime: Results[i]["UpdatedDateTime"]
            //                });
            //            }
            //        }
            //    }
            //}).fail(function (xhr, textStatus, err) {
            //    alert(err);
            //});
            //return components;
        }
        // ================================
        // FlexGrid Selection for Component
        // ================================
        function updateDetailsComponent() {
            var item = components.currentItem;
            document.getElementById('createdBy').innerHTML = item.CreatedBy;
            document.getElementById('createdDate').innerHTML = item.CreatedDateTime;
            document.getElementById('updatedBy').innerHTML = item.UpdatedBy;
            document.getElementById('updatedDate').innerHTML = item.UpdatedDateTime;
        }

        // ================================
        // Navigation Buttons for Component
        // ================================
        function updateNavigateButtonsComponent() {
            if (components.pageSize <= 0) {
                document.getElementById('navigationPageGridComponent').style.display = 'none';
                return;
            }
            document.getElementById('navigationPageGridComponent').style.display = 'block';
            if (components.pageIndex === 0) {
                btnFirstPageGridComponent.setAttribute('disabled', 'disabled');
                btnPreviousPageGridComponent.setAttribute('disabled', 'disabled');
                btnNextPageGridComponent.removeAttribute('disabled');
                btnLastPageGridComponent.removeAttribute('disabled');
            } else if (components.pageIndex === (components.pageCount - 1)) {
                btnFirstPageGridComponent.removeAttribute('disabled');
                btnPreviousPageGridComponent.removeAttribute('disabled');
                btnLastPageGridComponent.setAttribute('disabled', 'disabled');
                btnNextPageGridComponent.setAttribute('disabled', 'disabled');
            } else {
                btnFirstPageGridComponent.removeAttribute('disabled');
                btnPreviousPageGridComponent.removeAttribute('disabled');
                btnNextPageGridComponent.removeAttribute('disabled');
                btnLastPageGridComponent.removeAttribute('disabled');
            }
            btnCurrentPageGridComponent.innerHTML = (components.pageIndex + 1) + ' / ' + components.pageCount;
        }

        // ==========
        //  Component
        // ==========
        function componentTab() {
            components = new wijmo.collections.CollectionView();
            components.canFilter = true;
            components.pageSize = 15;

            var filterTextComponent = '';
            $('#InputFilterComponent').keyup(function () {
                filterTextComponent = this.value.toLowerCase();
                components.refresh();
            });
            components.filter = function (item) {
                return !filterTextComponent || (item.components.toLowerCase().indexOf(filterTextComponent) > -1);
            }
            components.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsComponent();
            });
            components.currentChanged.addHandler(function (sender, args) {
                updateDetailsComponent();
            });

            // Flex Grid for Component
            componentGrid = new wijmo.grid.FlexGrid('#ComponentGrid');
            componentGrid.initialize({
                columns: [
                            {
                                "header": "Edit",
                                "binding": "EditId",
                                "width": 60,
                                "align": "center",
                                "allowResizing": false,
                                "allowSorting": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Delete",
                                "binding": "DeleteId",
                                "width": 70,
                                "align": "center",
                                "allowResizing": false,
                                "allowSorting": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Manual Code",
                                //"binding": "Date",
                                "allowSorting": true,
                                "width": "1*",
                            },
                            {
                                "header": "Component.",
                                // "binding": "Doc Ref.",
                                "allowSorting": true,
                                "width": "3*"
                            },
                            {
                                "header": "Quantity",
                                // "binding": "Branch",
                                "allowSorting": true,
                                "width": "2*"
                            },
                            {
                                "header": "Unit",
                                // "binding": "Account",
                                "allowSorting": true,
                                "width": "2*"
                            },
                            {
                                "header": "Cost",
                                // "binding": "Account",
                                "allowSorting": true,
                                "width": "2*"
                            },
                            {
                                "header": "Amount",
                                // "binding": "Account",
                                "allowSorting": true,
                                "width": "2*"
                            },
                            {
                                "header": "Particulars",
                                // "binding": "Account",
                                "allowSorting": true,
                                "width": "2*"
                            },
                ],
                autoGenerateColumns: false,
                //itemsSource: components,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            componentGrid.trackChanges = true;

            //Navigation button for Component
            btnFirstPageGridComponent = document.getElementById('btnMoveToFirstPageGridComponent');
            btnPreviousPageGridComponent = document.getElementById('btnMoveToPreviousPageGridComponent');
            btnNextPageGridComponent = document.getElementById('btnMoveToNextPageGridComponent');
            btnLastPageGridComponent = document.getElementById('btnMoveToLastPageGridComponent');
            btnCurrentPageGridComponent = document.getElementById('btnCurrentPageGridComponent');

            updateNavigateButtonsComponent();

            btnFirstPageGridComponent.addEventListener('click', function () {
                components.moveToFirstPage();
                updateNavigateButtonsComponent();
            });
            btnPreviousPageGridComponent.addEventListener('click', function () {
                components.moveToPreviousPage();
                updateNavigateButtonsComponent();
            });
            btnNextPageGridComponent.addEventListener('click', function () {
                components.moveToNextPage();
                updateNavigateButtonsComponent();
            });
            btnCurrentPageGridComponent.addEventListener('click', function () {
                components.moveToLastPage();
                updateNavigateButtonsComponent();
            });
        }
    </script>

    <!-- ================= -->
    <!-- Price Scripts -->
    <!-- ================= -->
    <script type="text/javascript">
        // ==========================
        // Global Variables for Price
        // ==========================
        var prices;
        var priceGrid;

        var btnFirstPageGridPrice;
        var btnPreviousPageGridPrice;
        var btnNextPageGridPrice;
        var btnLastPageGridPrice;
        var btnCurrentPageGridPrice;

        // ==================
        // GET Price List
        // ==================
        function getPrice() {
            var prices = new wijmo.collections.ObservableArray;
            //$('#loadingModal').modal('show');
            //$.ajax({
            //    url: '/api/listAccount',
            //    cache: false,
            //    type: 'GET',
            //    contentType: 'application/json; charset=utf-8',
            //    data: {},
            //    success: function (Results) {
            //        $('#loadingModal').modal('hide');
            //        if (Results.length > 0) {
            //            for (i = 0; i < Results.length; i++) {
            //                journalLedger.push({
            //                    EditId: "<button class='btn btn-primary btn-xs btn-block' onclick='cmdAccountEditButton_OnClick()'><i class='fa fa-edit'></i> Edit</button>",
            //                    DeleteId: "<button class='btn btn-danger btn-xs btn-block' onclick='cmdAccountDeleteButton_OnClick()'><i class='fa fa-trash'></i> Delete</button>",
            //                    Id: Results[i]["Id"],
            //                    AccountCode: Results[i]["AccountCode"],
            //                    Account: Results[i]["Account"],
            //                    AccountTypeId: Results[i]["AccountTypeId"],
            //                    AccountType: Results[i]["AccountType"],
            //                    AccountCashFlowId: Results[i]["AccountCashFlowId"],
            //                    AccountCashFlow: Results[i]["AccountCashFlow"],
            //                    IsLocked: Results[i]["IsLocked"],
            //                    CreatedById: Results[i]["CreatedById"],
            //                    CreatedBy: Results[i]["CreatedBy"],
            //                    CreatedDateTime: Results[i]["CreatedDateTime"],
            //                    UpdatedById: Results[i]["UpdatedById"],
            //                    UpdatedBy: Results[i]["UpdatedBy"],
            //                    UpdatedDateTime: Results[i]["UpdatedDateTime"]
            //                });
            //            }
            //        }
            //    }
            //}).fail(function (xhr, textStatus, err) {
            //    alert(err);
            //});
            //return prices;
        }
        // ============================
        // FlexGrid Selection for Price
        // ============================
        function updateDetailsPrice() {
            var item = prices.currentItem;
            document.getElementById('createdBy').innerHTML = item.CreatedBy;
            document.getElementById('createdDate').innerHTML = item.CreatedDateTime;
            document.getElementById('updatedBy').innerHTML = item.UpdatedBy;
            document.getElementById('updatedDate').innerHTML = item.UpdatedDateTime;
        }

        // ============================
        // Navigation Buttons for Price
        // ============================
        function updateNavigateButtonsPrice() {
            if (prices.pageSize <= 0) {
                document.getElementById('navigationPageGridPrice').style.display = 'none';
                return;
            }
            document.getElementById('navigationPageGridPrice').style.display = 'block';
            if (prices.pageIndex === 0) {
                btnFirstPageGridPrice.setAttribute('disabled', 'disabled');
                btnPreviousPageGridPrice.setAttribute('disabled', 'disabled');
                btnNextPageGridPrice.removeAttribute('disabled');
                btnLastPageGridPrice.removeAttribute('disabled');
            } else if (prices.pageIndex === (prices.pageCount - 1)) {
                btnFirstPageGridPrice.removeAttribute('disabled');
                btnPreviousPageGridPrice.removeAttribute('disabled');
                btnLastPageGridPrice.setAttribute('disabled', 'disabled');
                btnNextPageGridPrice.setAttribute('disabled', 'disabled');
            } else {
                btnFirstPageGridPrice.removeAttribute('disabled');
                btnPreviousPageGridPrice.removeAttribute('disabled');
                btnNextPageGridPrice.removeAttribute('disabled');
                btnLastPageGridPrice.removeAttribute('disabled');
            }
            btnCurrentPageGridPrice.innerHTML = (prices.pageIndex + 1) + ' / ' + prices.pageCount;
        }

        // =====
        // Price
        // =====
        function priceTab() {
            prices = new wijmo.collections.CollectionView();
            prices.canFilter = true;
            prices.pageSize = 15;

            var filterTextPrice = '';
            $('#InputFilterPrice').keyup(function () {
                filterTextPrice = this.value.toLowerCase();
                prices.refresh();
            });
            prices.filter = function (item) {
                return !filterTextPrice || (item.prices.toLowerCase().indexOf(filterTextPrice) > -1);
            }
            prices.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsPrice();
            });
            prices.currentChanged.addHandler(function (sender, args) {
                updateDetailsPrice();
            });

            // Flex Grid for Price
            priceGrid = new wijmo.grid.FlexGrid('#PriceGrid');
            priceGrid.initialize({
                columns: [
                            {
                                "header": "Edit",
                                "binding": "EditId",
                                "width": 60,
                                "align": "center",
                                "allowResizing": false,
                                "allowSorting": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Delete",
                                "binding": "DeleteId",
                                "width": 70,
                                "align": "center",
                                "allowResizing": false,
                                "allowSorting": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Manual Code",
                                //"binding": "Date",
                                "allowSorting": true,
                                "width": "1*",
                            },
                            {
                                "header": "Component.",
                                // "binding": "Doc Ref.",
                                "allowSorting": true,
                                "width": "3*"
                            },
                            {
                                "header": "Quantity",
                                // "binding": "Branch",
                                "allowSorting": true,
                                "width": "2*"
                            },
                            {
                                "header": "Unit",
                                // "binding": "Account",
                                "allowSorting": true,
                                "width": "2*"
                            },
                            {
                                "header": "Cost",
                                // "binding": "Account",
                                "allowSorting": true,
                                "width": "2*"
                            },
                            {
                                "header": "Amount",
                                // "binding": "Account",
                                "allowSorting": true,
                                "width": "2*"
                            },
                            {
                                "header": "Particulars",
                                // "binding": "Account",
                                "allowSorting": true,
                                "width": "2*"
                            },
                ],
                autoGenerateColumns: false,
                //itemsSource: prices,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            priceGrid.trackChanges = true;

            //Navigation button for price
            btnFirstPageGridPrice = document.getElementById('btnMoveToFirstPageGridPrice');
            btnPreviousPageGridPrice = document.getElementById('btnMoveToPreviousPageGridPrice');
            btnNextPageGridPrice = document.getElementById('btnMoveToNextPageGridPrice');
            btnLastPageGridPrice = document.getElementById('btnMoveToLastPageGridPrice');
            btnCurrentPageGridPrice = document.getElementById('btnCurrentPageGridPrice');

            updateNavigateButtonsPrice();

            btnFirstPageGridPrice.addEventListener('click', function () {
                prices.moveToFirstPage();
                updateNavigateButtonsPrice();
            });
            btnPreviousPageGridComponent.addEventListener('click', function () {
                prices.moveToPreviousPage();
                updateNavigateButtonsPrice();
            });
            btnNextPageGridComponent.addEventListener('click', function () {
                prices.moveToNextPage();
                updateNavigateButtonsPrice();
            });
            btnCurrentPageGridComponent.addEventListener('click', function () {
                prices.moveToLastPage();
                updateNavigateButtonsPrice();
            });
        }
    </script>

    <!-- ================= -->
    <!-- Inventory Scripts -->
    <!-- ================= -->
    <script type="text/javascript">
        // ==============================
        // Global Variables for Inventory
        // ==============================
        var inventories;
        var inventoryGrid;

        var btnFirstPageGridInventory;
        var btnPreviousPageGridInventory;
        var btnNextPageGridInventory;
        var btnLastPageGridInventory;
        var btnCurrentPageGridInventory;

        // ==================
        // GET Inventory List
        // ==================
        function getInventory() {
            var inventories = new wijmo.collections.ObservableArray;
            //$('#loadingModal').modal('show');
            //$.ajax({
            //    url: '/api/listAccount',
            //    cache: false,
            //    type: 'GET',
            //    contentType: 'application/json; charset=utf-8',
            //    data: {},
            //    success: function (Results) {
            //        $('#loadingModal').modal('hide');
            //        if (Results.length > 0) {
            //            for (i = 0; i < Results.length; i++) {
            //                journalLedger.push({
            //                    EditId: "<button class='btn btn-primary btn-xs btn-block' onclick='cmdAccountEditButton_OnClick()'><i class='fa fa-edit'></i> Edit</button>",
            //                    DeleteId: "<button class='btn btn-danger btn-xs btn-block' onclick='cmdAccountDeleteButton_OnClick()'><i class='fa fa-trash'></i> Delete</button>",
            //                    Id: Results[i]["Id"],
            //                    AccountCode: Results[i]["AccountCode"],
            //                    Account: Results[i]["Account"],
            //                    AccountTypeId: Results[i]["AccountTypeId"],
            //                    AccountType: Results[i]["AccountType"],
            //                    AccountCashFlowId: Results[i]["AccountCashFlowId"],
            //                    AccountCashFlow: Results[i]["AccountCashFlow"],
            //                    IsLocked: Results[i]["IsLocked"],
            //                    CreatedById: Results[i]["CreatedById"],
            //                    CreatedBy: Results[i]["CreatedBy"],
            //                    CreatedDateTime: Results[i]["CreatedDateTime"],
            //                    UpdatedById: Results[i]["UpdatedById"],
            //                    UpdatedBy: Results[i]["UpdatedBy"],
            //                    UpdatedDateTime: Results[i]["UpdatedDateTime"]
            //                });
            //            }
            //        }
            //    }
            //}).fail(function (xhr, textStatus, err) {
            //    alert(err);
            //});
            //return inventories;
        }
        // ================================
        // FlexGrid Selection for Inventory
        // ================================
        function updateDetailsInventory() {
            var item = inventories.currentItem;
            document.getElementById('createdBy').innerHTML = item.CreatedBy;
            document.getElementById('createdDate').innerHTML = item.CreatedDateTime;
            document.getElementById('updatedBy').innerHTML = item.UpdatedBy;
            document.getElementById('updatedDate').innerHTML = item.UpdatedDateTime;
        }

        // ================================
        // Navigation Buttons for Inventory
        // ================================
        function updateNavigateButtonsInventory() {
            if (inventories.pageSize <= 0) {
                document.getElementById('navigationPageGridInventory').style.display = 'none';
                return;
            }
            document.getElementById('navigationPageGridInventory').style.display = 'block';
            if (inventories.pageIndex === 0) {
                btnFirstPageGridInventory.setAttribute('disabled', 'disabled');
                btnPreviousPageGridInventory.setAttribute('disabled', 'disabled');
                btnNextPageGridInventory.removeAttribute('disabled');
                btnLastPageGridInventory.removeAttribute('disabled');
            } else if (inventories.pageIndex === (inventories.pageCount - 1)) {
                btnFirstPageGridInventory.removeAttribute('disabled');
                btnPreviousPageGridInventory.removeAttribute('disabled');
                btnLastPageGridInventory.setAttribute('disabled', 'disabled');
                btnNextPageGridInventory.setAttribute('disabled', 'disabled');
            } else {
                btnFirstPageGridInventory.removeAttribute('disabled');
                btnPreviousPageGridInventory.removeAttribute('disabled');
                btnNextPageGridInventory.removeAttribute('disabled');
                btnLastPageGridInventory.removeAttribute('disabled');
            }
            btnCurrentPageGridInventory.innerHTML = (inventories.pageIndex + 1) + ' / ' + inventories.pageCount;
        }

        // ==========
        //  Inventory
        // ==========
        function inventoryTab() {
            inventories = new wijmo.collections.CollectionView();
            inventories.canFilter = true;
            inventories.pageSize = 15;

            var filterTextUnitInventory = '';
            $('#InputFilterInventory').keyup(function () {
                filterTextUnitInventory = this.value.toLowerCase();
                inventories.refresh();
            });
            inventories.filter = function (item) {
                return !filterTextUnitInventory || (item.inventories.toLowerCase().indexOf(filterTextUnitInventory) > -1);
            }
            inventories.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsInventory();
            });
            inventories.currentChanged.addHandler(function (sender, args) {
                updateDetailsInventory();
            });

            // Flex Grid for Inventory
            inventoryGrid = new wijmo.grid.FlexGrid('#InventoryGrid');
            inventoryGrid.initialize({
                columns: [
                            {
                                "header": "Edit",
                                "binding": "EditId",
                                "width": 60,
                                "align": "center",
                                "allowResizing": false,
                                "allowSorting": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Delete",
                                "binding": "DeleteId",
                                "width": 70,
                                "align": "center",
                                "allowResizing": false,
                                "allowSorting": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Branch",
                                //"binding": "Date",
                                "allowSorting": true,
                                "width": "1*",
                            },
                            {
                                "header": "Code.",
                                // "binding": "Doc Ref.",
                                "allowSorting": true,
                                "width": "3*"
                            },
                            {
                                "header": "Quantity",
                                // "binding": "Branch",
                                "allowSorting": true,
                                "width": "2*"
                            },
                            {
                                "header": "Cost",
                                // "binding": "Account",
                                "allowSorting": true,
                                "width": "2*"
                            },
                            {
                                "header": "Amount",
                                // "binding": "Account",
                                "allowSorting": true,
                                "width": "2*"
                            },
                ],
                autoGenerateColumns: false,
                //itemsSource: inventories,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            inventoryGrid.trackChanges = true;

            //Navigation button for Inventory
            btnFirstPageGridInventory = document.getElementById('btnMoveToFirstPageGridInventory');
            btnPreviousPageGridInventory = document.getElementById('btnMoveToPreviousPageGridInventory');
            btnNextPageGridInventory = document.getElementById('btnMoveToNextPageGridInventory');
            btnLastPageGridInventory = document.getElementById('btnMoveToLastPageGridInventory');
            btnCurrentPageGridInventory = document.getElementById('btnCurrentPageGridInventory');

            updateNavigateButtonsInventory();

            btnFirstPageGridInventory.addEventListener('click', function () {
                inventories.moveToFirstPage();
                updateNavigateButtonsInventory();
            });
            btnPreviousPageGridInventory.addEventListener('click', function () {
                inventories.moveToPreviousPage();
                updateNavigateButtonsInventory();
            });
            btnNextPageGridInventory.addEventListener('click', function () {
                inventories.moveToNextPage();
                updateNavigateButtonsInventory();
            });
            btnLastPageGridInventory.addEventListener('click', function () {
                inventories.moveToLastPage();
                updateNavigateButtonsInventory();
            });
        }
    </script>

    <!-- ================================ -->
    <!-- Tab Current Page on Load Scripts -->
    <!-- ================================ -->
    <script type="text/javascript">
        // ====
        // TABS
        // ====
        $('#unitConversionTabId').click(function () {
            $('#UnitConversion').show();
            $('#Component').hide();
            $('#Price').hide();
            $('#Inventory').hide();
            $('#GLAccount').hide();
            $('#FixedAsset').hide();
            window.unitConversionTab = function () {
                return true;
            };
        });
        $('#componentTabId').click(function () {
            $('#UnitConversion').hide();
            $('#Component').show();
            $('#Price').hide();
            $('#Inventory').hide();
            $('#GLAccount').hide();
            $('#FixedAsset').hide();
            componentTab();
            window.componentTab = function () {
                return true;
            };
        });
        $('#priceTabId').click(function () {
            $('#UnitConversion').hide();
            $('#Component').hide();
            $('#Price').show();
            $('#Inventory').hide();
            $('#GLAccount').hide();
            $('#FixedAsset').hide();
            priceTab();
            window.priceTab = function () {
                return true;
            };
        });
        $('#inventoryTabId').click(function () {
            $('#UnitConversion').hide();
            $('#Component').hide();
            $('#Price').hide();
            $('#Inventory').show();
            $('#GLAccount').hide();
            $('#FixedAsset').hide();
            inventoryTab();
            window.inventoryTab = function () {
                return true;
            };
        });
        $('#glAccountTabId').click(function () {
            $('#UnitConversion').hide();
            $('#Component').hide();
            $('#Price').hide();
            $('#Inventory').hide();
            $('#GLAccount').show();
            $('#FixedAsset').hide();
        });
        $('#fixedAssetTabId').click(function () {
            $('#UnitConversion').hide();
            $('#Component').hide();
            $('#Price').hide();
            $('#Inventory').hide();
            $('#GLAccount').hide();
            $('#FixedAsset').show();
        });

        $(document).ready(function () {
            $('#UnitConversion').show();
            $('#Component').hide();
            $('#Price').hide();
            $('#Inventory').hide();
            $('#GLAccount').hide();
            $('#FixedAsset').hide();
            unitConversionTab();
        });
    </script>
</body>
</html>