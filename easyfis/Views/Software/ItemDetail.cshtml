@model easyfis.Entities.MstUserForm
@{
    // =====================
    // User Rights Variables
    // =====================
    var canAdd = Model.CanAdd;
    var canEdit = Model.CanEdit;
    var canDelete = Model.CanDelete;
    var canLock = Model.CanLock;
    var canUnlock = Model.CanUnlock;
    var canPrint = Model.CanPrint;
}
<!DOCTYPE html>
<html>
<head>
    <!-- Meta -->
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">

    <!-- Title of the Page -->
    <link rel="shortcut icon" href="~/Images/icon/easyfislogomini.ico">
    <title>Item Detail</title>

    <!-- CSS StyleSheets-->
    @Styles.Render("~/Content/Software-css")
</head>
<body>
    <div id="o-wrapper" class="o-wrapper">
        <main class="o-content">
            @Html.Partial("_SoftwareHeader")
            <section class="content-header">
                <div class="container">
                    <h3>
                        Item Detail
                    </h3>
                    <p>
                        <i class="fa fa-building-o fa-fw"></i> &nbsp; @ViewData["Company"] <br />
                        <i class="fa fa-home fa-fw"></i> &nbsp; <a href="#" onclick="getUserBranches()" style="color: white;">@ViewData["Branch"]</a>
                    </p>
                </div>
            </section>
            <section class="container">
                <div class="panel panel-default">
                    <div class="panel-heading">
                        <div class="row">
                            <div class="col-md-12" align="right">
                                @{
                                    if (canLock)
                                    {
                                        <button class="btn btn-primary" id="btnLockItem" onclick="btnLockItemOnclick()"><i class="fa fa-lock"></i> Lock</button>
                                    }
                                    if (canUnlock)
                                    {
                                        <button class="btn btn-primary" id="btnUnlockItem" onclick="btnUnlockItemOnclick()"><i class="fa fa-unlock"></i> Unlock</button>
                                    }
                                }
                                <button class="btn btn-danger" id="btnCloseItem" onclick="btnCloseItemOnclick()"><i class=" fa fa-times"></i> Close</button>
                            </div>
                        </div>
                    </div>
                    <div class="panel-body">
                        <div class="">
                            <form class="form-horizontal" role="form">
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            <label class="control-label col-sm-4">Code</label>
                                            <div class="col-sm-8">
                                                <input type="text" class="form-control  requiredItem" id="itemCode" placeholder="Code..." disabled />
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <label class="control-label col-sm-4">Manual Code</label>
                                            <div class="col-sm-8">
                                                <input type="text" class="form-control  requiredItem" id="itemManualCode" placeholder="Manual Code..." />
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <label class="control-label col-sm-4">Item</label>
                                            <div class="col-sm-8">
                                                <input type="text" class="form-control  requiredItem" id="itemName" placeholder="Item..." />
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <label class="control-label col-sm-4">Item Group</label>
                                            <div class="col-sm-8">
                                                <div type="text" class="" id="cboItemGroup"></div>
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <label class="control-label col-sm-4">Category</label>
                                            <div class="col-sm-8">
                                                <input type="text" class="form-control   requiredItem" id="itemCategory" placeholder="Category..." />
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <label class="control-label col-sm-4">Unit</label>
                                            <div class="col-sm-8">
                                                <div type="text" class="" id="cboUnit"></div>
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <label class="control-label col-sm-4">Price</label>
                                            <div class="col-sm-8">
                                                <input type="text" class="form-control  numberField  requiredItem" id="itemPrice" placeholder="0.00" />
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <label class="control-label col-sm-4">Particulars</label>
                                            <div class="col-sm-8">
                                                <textarea rows="5" class="form-control textarea-custom requiredItem" id="itemParticulars" placeholder="Particulars..."></textarea>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            <label class="control-label col-sm-4">Input Tax:</label>
                                            <div class="col-sm-8">
                                                <div type="text" class="comboBox-wide" id="cboInputTax"></div>
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <label class="control-label col-sm-4">Output Tax</label>
                                            <div class="col-sm-8">
                                                <div type="text" class="comboBox-wide" id="cboOutputTax"></div>
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <label class="control-label col-sm-4">Withholding Tax</label>
                                            <div class="col-sm-8">
                                                <div class="comboBox-wide" id="cboWithHoldingTax"></div>
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <label class="control-label col-sm-4">Is Inventory</label>
                                            <div class="col-sm-8">
                                                <input type="checkbox" id="itemIsInventory" />
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <label class="control-label col-sm-4">Old Manual Code</label>
                                            <div class="col-sm-8">
                                                <input type="text" class="form-control  requiredItem" id="itemOldManualCode" placeholder="Old Manual Code..." />
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <label class="control-label col-sm-4">Manual Cost</label>
                                            <div class="col-sm-8">
                                                <input type="text" class="form-control  numberField  requiredItem" id="itemManualCost" placeholder="0.00" />
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <label class="control-label col-sm-4">Kitting</label>
                                            <div class="col-sm-8">
                                                <div class="comboBox-wide" id="cboKitting"></div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
                <ul class="nav nav-tabs " role="tablist" id="myTab">
                    <li role="presentation" class="active"><a data-toggle="tab" href="#UnitConversion" id="unitConversionTabId">Unit Conversion</a></li>
                    <li role="presentation"><a data-toggle="tab" href="#Component" id="componentTabId">Component</a></li>
                    <li role="presentation"><a data-toggle="tab" href="#Price" id="priceTabId">Price</a></li>
                    <li role="presentation"><a data-toggle="tab" href="#Inventory" id="inventoryTabId">Inventory</a></li>
                    <li role="presentation"><a data-toggle="tab" href="#GLAccount" id="glAccountTabId">GL Account</a></li>
                    <li role="presentation"><a data-toggle="tab" href="#FixedAsset" id="fixedAssetTabId">Fixed Asset</a></li>
                </ul>
                <br />
                <div class="tab-content">
                    <div id="UnitConversion" class="tab-pane fade in active">
                        @{
                            if (canAdd)
                            {
                                <div class="panel panel-default">
                                    <div class="panel-heading">
                                        <div class="row">
                                            <div class="col-lg-12" align="right">

                                                <button class="btn btn-primary" id="btnAddUnitConversion" onclick="btnAddUnitConversionOnclick()"><i class="fa fa-plus"></i> Add</button>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="panel-body">
                                        <div id="unitConversionGrid" class="grid"></div>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div id="unitConversionGrid" class="grid"></div>
                                <br /><br />
                            }
                        }
                    </div>
                    <div id="Component" class="tab-pane fade in">
                        @{
                            if (canAdd)
                            {
                                <div class="panel panel-default">
                                    <div class="panel-heading">
                                        <div class="row">
                                            <div class="col-lg-12" align="right">
                                                <button class="btn btn-primary" id="btnAddComponent" onclick="btnAddComponentOnclick()"><i class="fa fa-plus"></i> Add</button>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="panel-body">
                                        <div id="ComponentGrid" class="grid"></div>
                                    </div>
                                </div>
                                <div class="panel panel-default">
                                    <div class="panel-body" style="padding-bottom: 0px;">
                                        <div class="row">
                                            <div class="col-md-7">

                                            </div>
                                            <div class="col-md-5">
                                                <dl class="dl-horizontal">
                                                    <dt>
                                                        <b>Total Amount</b>
                                                    </dt>
                                                    <dd>
                                                        <input type="text" class="form-control numberField" id="totalComponentAmount" placeholder="0.00" disabled />
                                                    </dd>
                                                </dl>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div id="ComponentGrid" class="grid"></div>
                                <br /><br />
                                <div class="row">
                                    <div class="col-md-7">

                                    </div>
                                    <div class="col-md-5">
                                        <dl class="dl-horizontal">
                                            <dt>
                                                <b>Total Amount</b>
                                            </dt>
                                            <dd>
                                                <input type="text" class="form-control numberField" id="totalComponentAmount" placeholder="0.00" disabled />
                                            </dd>
                                        </dl>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                    <div id="Price" class="tab-pane fade in">
                        @{
                            if (canAdd)
                            {
                                <div class="panel panel-default">
                                    <div class="panel-heading">
                                        <div class="row">
                                            <div class="col-lg-12" align="right">
                                                <button class="btn btn-primary " id="btnAddPrice" onclick="btnAddPriceOnclick()"><i class="fa fa-plus"></i> Add</button>

                                            </div>
                                        </div>
                                    </div>
                                    <div class="panel-body">
                                        <div id="PriceGrid" class="grid"></div>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div id="PriceGrid" class="grid"></div>
                                <br /><br />
                            }
                        }
                    </div>
                    <div id="Inventory" class="tab-pane fade in">
                        <div id="InventoryGrid"></div>
                        <br /><br />
                    </div>
                    <div id="GLAccount" class="tab-pane fade in">
                        <div class="panel panel-default">
                            <div class="panel-body">
                                <form class="form-horizontal" role="form">
                                    <div class="row">
                                        <div class="col-md-6">
                                            <div class="form-group">
                                                <label class="control-label col-sm-4">Account</label>
                                                <div class="col-sm-8">
                                                    <table style="width: 100%" border="0">
                                                        <tr>
                                                            <td style="width: 30%">
                                                                <div class="" id="cboAccountCode"></div>
                                                            </td>
                                                            <td style="width: 1%"></td>
                                                            <td style="width: 69%">
                                                                <div class="" id="cboAccount"></div>
                                                            </td>
                                                        </tr>
                                                    </table>
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                <label class="control-label col-sm-4">Sales Account</label>
                                                <div class="col-sm-8">
                                                    <table style="width: 100%" border="0">
                                                        <tr>
                                                            <td style="width: 30%">
                                                                <div class="" id="cboSalesAccountCode"></div>
                                                            </td>
                                                            <td style="width: 1%"></td>
                                                            <td style="width: 69%">
                                                                <div class="" id="cboSalesAccount"></div>
                                                            </td>
                                                        </tr>
                                                    </table>
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                <label class="control-label col-sm-4">Cost Account</label>
                                                <div class="col-sm-8">
                                                    <table style="width: 100%" border="0">
                                                        <tr>
                                                            <td style="width: 30%">
                                                                <div class="" id="cboCostAccountCode"></div>
                                                            </td>
                                                            <td style="width: 1%"></td>
                                                            <td style="width: 69%">
                                                                <div class="" id="cboCostAccount"></div>
                                                            </td>
                                                        </tr>
                                                    </table>
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                <label class="control-label col-sm-4">Accum Dep Account</label>
                                                <div class="col-sm-8">
                                                    <table style="width: 100%" border="0">
                                                        <tr>
                                                            <td style="width: 30%">
                                                                <div class="" id="cboAccumDepAccountCode"></div>
                                                            </td>
                                                            <td style="width: 1%"></td>
                                                            <td style="width: 69%">
                                                                <div class="" id="cboAccumDepAccount"></div>
                                                            </td>
                                                        </tr>
                                                    </table>
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                <label class="control-label col-sm-4">Expense Account</label>
                                                <div class="col-sm-8">
                                                    <table style="width: 100%" border="0">
                                                        <tr>
                                                            <td style="width: 30%">
                                                                <div class="" id="cboExpenseAccountCode"></div>
                                                            </td>
                                                            <td style="width: 1%"></td>
                                                            <td style="width: 69%">
                                                                <div class="" id="cboExpenseAccount"></div>
                                                            </td>
                                                        </tr>
                                                    </table>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-md-6"></div>
                                    </div>
                                </form>
                            </div>
                        </div>
                    </div>
                    <div id="FixedAsset" class="tab-pane fade in">
                        <div class="panel panel-default">
                            <div class="panel-body">
                                <form class="form-horizontal" role="form">
                                    <div class="row">
                                        <div class="col-md-6">
                                            <div class="form-group">
                                                <label class="control-label col-sm-4">Date Acquired</label>
                                                <div class="col-sm-8">
                                                    <div class="comboBox-wide" id="cboDateAcquired"></div>
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                <label class="control-label col-sm-4">Useful Life (Years)</label>
                                                <div class="col-sm-8">
                                                    <input type="text" class="form-control  numberField " id="itemUsefulLife" placeholder="0.00" />
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                <label class="control-label col-sm-4">Salvage Value</label>
                                                <div class="col-sm-8">
                                                    <input type="text" class="form-control  numberField " id="itemSalvageValue" placeholder="0.00" />
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-md-6"></div>
                                    </div>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            </section>
            @Html.Partial("_SoftwareFooter")
        </main>
    </div>
    <div id="c-mask" class="c-mask"></div>

    <!-- Unit Conversion Edit Detail -->
    <div class="modal fade" id="unitConversionEdit" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="unitConversionModalLabel">Unit Conversion</h4>
                </div>
                <div class="modal-body">
                    <center>
                        <span id="loadingUnits"></span>
                    </center>
                    <div id="unitConversionDetailForm">
                        <dl class="dl-horizontal">
                            <dt>Multiplier </dt>
                            <dd><input type="text" class="form-control  numberField  requiredUnitConversion" id="unitConversion_multiplier" placeholder="0.00" /></dd>
                            <dt>Unit</dt>
                            <dd><div class="comboBox-wide " id="cboUnitConversionUnit"></div></dd>
                            <dt>Base Unit</dt>
                            <dd><div class="comboBox-wide " id="cboUnitConversionBaseUnit"></div></dd>
                            <dt>Count Unit</dt>
                            <dd><input type="checkbox" id="unitConversion_countUnit" /></dd>
                        </dl>
                    </div>
                </div>
                <div class="modal-footer">
                    <button id="btnSaveConversionUnit" class="btn btn-primary" onclick="btnSaveUnitConversionOnclick()"><i class="fa fa-save"></i> Save</button>
                    <button id="btnCloseUnitConversionModal" class="btn btn-danger" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Unit Conversion Delete Modal Confirmation -->
    <div class="modal fade" id="deleteUnitConversionConfirm" role="dialog">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Delete</h4>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete this unit conversion?
                </div>
                <div class="modal-footer">
                    <button id="btnConfirmDeleteUnitConversion" class="btn btn-danger" onclick="btnConfirmDeleteUnitConversionOnclick()"><i class="fa fa-trash"></i> Delete</button>
                    <button id="btnCloseConfirmDeleteUnitConversion" class="btn btn-primary" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Componenet Edit Detail -->
    <div class="modal fade" id="componentEdit" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="componentModalLabel">Component</h4>
                </div>
                <div class="modal-body">
                    <center>
                        <span id="loadingComponents"></span>
                    </center>
                    <div id="componentDetailForm">
                        <dl class="dl-horizontal">
                            <dt>Component</dt>
                            <dd>
                                <table style="width: 100%" border="0">
                                    <tr>
                                        <td style="width: 30%">
                                            <div class="" id="cboComponentItemCode"></div>
                                        </td>
                                        <td style="width: 1%"></td>
                                        <td style="width: 69%">
                                            <div class="" id="cboComponentItem"></div>
                                        </td>
                                    </tr>
                                </table>
                            </dd>
                            <dt>Quantity</dt>
                            <dd><input type="text" class="form-control numberField  requiredComponent" id="component_Quantity" placeholder="0.00" /></dd>
                            <dt>Unit</dt>
                            <dd><div class="" id="cboComponentUnit"></div></dd>
                            <dt>Cost</dt>
                            <dd><input type="text" class="form-control numberField" id="component_cost" placeholder="0.00" disabled /></dd>
                            <dt>Amount</dt>
                            <dd><input type="text" class="form-control numberField" id="component_amount" placeholder="0.00" disabled /></dd>
                            <dt>Particulars</dt>
                            <dd><textarea rows="5" class="form-control textarea-custom requiredComponent" id="component_particulars" placeholder="Particulars"></textarea></dd>
                        </dl>
                    </div>
                </div>
                <div class="modal-footer">
                    <button id="btnSaveComponent" class="btn btn-primary" onclick="btnSaveComponentOnclick()"><i class="fa fa-save"></i> Save</button>
                    <button id="btnCloseComponentModal" class="btn btn-danger" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Componenet Delete Modal Confirmation -->
    <div class="modal fade" id="deleteComponenetConfirm" role="dialog">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Delete</h4>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete this component item?
                </div>
                <div class="modal-footer">
                    <button id="btnConfirmDeleteComponent" class="btn btn-danger" onclick="btnConfirmDeleteComponentOnclick()"><i class="fa fa-trash"></i> Delete</button>
                    <button id="btnCloseConfirmDeleteComponentModal" class="btn btn-primary" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Price Edit Detail -->
    <div class="modal fade" id="priceEdit" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="priceModalLabel">Price</h4>
                </div>
                <div class="modal-body">
                    <center>
                        <span id="loadingPrice"></span>
                    </center>
                    <div id="priceDetailForm">
                        <dl class="dl-horizontal">
                            <dt>Price Description</dt>
                            <dd><input type="text" class="form-control  requiredPrice" id="price_PriceDescription" placeholder="Price Description" /></dd>
                            <dt>Price</dt>
                            <dd><input type="text" class="form-control  numberField  requiredPrice" id="price_Price" placeholder="0.00" /></dd>
                            <dt>Remarks</dt>
                            <dd><textarea rows="5" class="form-control textarea-custom requiredPrice" id="price_Remarks" placeholder="Remarks"></textarea></dd>
                        </dl>
                    </div>
                </div>
                <div class="modal-footer">
                    <button id="btnSavePrice" class="btn btn-primary" onclick="btnSavePriceOnclick()"><i class="fa fa-save"></i> Save</button>
                    <button id="btnClosePriceModal" class="btn btn-danger" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Price Delete Modal Confirmation -->
    <div class="modal fade" id="deletPriceConfirm" role="dialog">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Delete</h4>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete this price?
                </div>
                <div class="modal-footer">
                    <button id="btnPriceConfirmDelete" class="btn btn-danger" onclick="btnPriceConfirmDeleteOnclick()"><i class="fa fa-trash"></i> Delete</button>
                    <button id="btnClosePriceConfirmDeleteModal" class="btn btn-primary" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>

    @Scripts.Render("~/Scripts/Software-js")
    <script type="text/javascript">
        // ================
        // Global Variables
        // ================
        var cboItemGroup = new wijmo.input.ComboBox('#cboItemGroup');
        var cboAccountCode = new wijmo.input.ComboBox('#cboAccountCode');
        var cboSalesAccountCode = new wijmo.input.ComboBox('#cboSalesAccountCode');
        var cboCostAccountCode = new wijmo.input.ComboBox('#cboCostAccountCode');
        var cboAccumDepAccountCode = new wijmo.input.ComboBox('#cboAccumDepAccountCode');
        var cboExpenseAccountCode = new wijmo.input.ComboBox('#cboExpenseAccountCode');
        var cboAccount = new wijmo.input.ComboBox('#cboAccount');
        var cboSalesAccount = new wijmo.input.ComboBox('#cboSalesAccount');
        var cboCostAccount = new wijmo.input.ComboBox('#cboCostAccount');
        var cboAccumDepAccount = new wijmo.input.ComboBox('#cboAccumDepAccount');
        var cboExpenseAccount = new wijmo.input.ComboBox('#cboExpenseAccount');
        var cboUnit = new wijmo.input.ComboBox('#cboUnit');
        var cboInputTax = new wijmo.input.ComboBox('#cboInputTax');
        var cboOutputTax = new wijmo.input.ComboBox('#cboOutputTax');
        var cboWithHoldingTax = new wijmo.input.ComboBox('#cboWithHoldingTax');
        var itemId = getParam("id");
        var cboKitting = new wijmo.input.ComboBox('#cboKitting');
        var IsLocked = false;
        var cboDateAcquired = new wijmo.input.InputDate('#cboDateAcquired');
        var unitConversions;
        var unitConversionGrid;
        var unitConversionId = 0;
        var cboUnitConversionUnit = new wijmo.input.ComboBox('#cboUnitConversionUnit');
        var cboUnitConversionBaseUnit = new wijmo.input.ComboBox('#cboUnitConversionBaseUnit');
        var components;
        var componentGrid;
        var cboComponentItemCode = new wijmo.input.ComboBox('#cboComponentItemCode');
        var cboComponentItem = new wijmo.input.ComboBox('#cboComponentItem');
        var cboComponentUnit = new wijmo.input.ComboBox('#cboComponentUnit');
        var componentId = 0;
        var prices;
        var priceGrid;
        var priceId = 0;
        var inventories;
        var inventoryGrid;
        var cboUnitSelected = false;

        // =======================
        // Get URL Parameter Value
        // =======================
        function getParam(name) {
            name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");

            var regexS = "[\\?&]" + name + "=([^&#]*)";
            var regex = new RegExp(regexS);

            var results = regex.exec(window.location.href);
            if (results == null) {
                return "";
            } else {
                return results[1];
            }
        }

        // ==============
        // Get Item Group
        // ==============
        function getArticleItemGroupForComboBox() {
            var articleItemGroupsObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/item/dropdown/list/itemGroup',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            articleItemGroupsObservableArray.push({
                                Id: results[i]["Id"],
                                ArticleGroup: results[i]["ArticleGroup"],
                                AccountId: results[i]["AccountId"],
                                SalesAccountId: results[i]["SalesAccountId"],
                                CostAccountId: results[i]["CostAccountId"],
                                AssetAccountId: results[i]["AssetAccountId"],
                                ExpenseAccountId: results[i]["ExpenseAccountId"]
                            });
                        }
                    }

                    cboItemGroup.dispose();
                    cboItemGroup = new wijmo.input.ComboBox('#cboItemGroup', {
                        isEditable: false,
                        itemsSource: articleItemGroupsObservableArray,
                        displayMemberPath: "ArticleGroup",
                        selectedValuePath: "Id",
                        onSelectedIndexChanged: function () {
                            cboAccountCode.selectedValue = this.selectedItem["AccountId"];
                            cboSalesAccountCode.selectedValue = this.selectedItem["SalesAccountId"];
                            cboCostAccountCode.selectedValue = this.selectedItem["CostAccountId"];
                            cboAccumDepAccountCode.selectedValue = this.selectedItem["AssetAccountId"];
                            cboExpenseAccountCode.selectedValue = this.selectedItem["ExpenseAccountId"];
                            cboAccount.selectedValue = this.selectedItem["AccountId"];
                            cboSalesAccount.selectedValue = this.selectedItem["SalesAccountId"];
                            cboCostAccount.selectedValue = this.selectedItem["CostAccountId"];
                            cboAccumDepAccount.selectedValue = this.selectedItem["AssetAccountId"];
                            cboExpenseAccount.selectedValue = this.selectedItem["ExpenseAccountId"];
                        }
                    });

                    getAccount();
                }
            });
        }

        // ===========
        // Get Account
        // ===========
        function getAccount() {
            var accountsObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/item/dropdown/list/itemGroup/accounts',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            accountsObservableArray.push({
                                Id: results[i]["Id"],
                                AccountCode: results[i]["AccountCode"],
                                Account: results[i]["Account"]
                            });
                        }
                    }

                    // Account Codes
                    cboAccountCode.dispose();
                    cboAccountCode = new wijmo.input.ComboBox('#cboAccountCode', {
                        disabled: true,
                        isEditable: false,
                        itemsSource: accountsObservableArray,
                        displayMemberPath: "AccountCode",
                        selectedValuePath: "Id"
                    });

                    cboSalesAccountCode.dispose();
                    cboSalesAccountCode = new wijmo.input.ComboBox('#cboSalesAccountCode', {
                        disabled: true,
                        isEditable: false,
                        itemsSource: accountsObservableArray,
                        displayMemberPath: "AccountCode",
                        selectedValuePath: "Id"
                    });

                    cboCostAccountCode.dispose();
                    cboCostAccountCode = new wijmo.input.ComboBox('#cboCostAccountCode', {
                        disabled: true,
                        isEditable: false,
                        itemsSource: accountsObservableArray,
                        displayMemberPath: "AccountCode",
                        selectedValuePath: "Id"
                    });

                    cboAccumDepAccountCode.dispose();
                    cboAccumDepAccountCode = new wijmo.input.ComboBox('#cboAccumDepAccountCode', {
                        disabled: true,
                        isEditable: false,
                        itemsSource: accountsObservableArray,
                        displayMemberPath: "AccountCode",
                        selectedValuePath: "Id"
                    });

                    cboExpenseAccountCode.dispose();
                    cboExpenseAccountCode = new wijmo.input.ComboBox('#cboExpenseAccountCode', {
                        disabled: true,
                        isEditable: false,
                        itemsSource: accountsObservableArray,
                        displayMemberPath: "AccountCode",
                        selectedValuePath: "Id"
                    });

                    // Account
                    cboAccount.dispose();
                    cboAccount = new wijmo.input.ComboBox('#cboAccount', {
                        disabled: true,
                        isEditable: false,
                        itemsSource: accountsObservableArray,
                        displayMemberPath: "Account",
                        selectedValuePath: "Id"
                    });

                    cboSalesAccount.dispose();
                    cboSalesAccount = new wijmo.input.ComboBox('#cboSalesAccount', {
                        disabled: true,
                        isEditable: false,
                        itemsSource: accountsObservableArray,
                        displayMemberPath: "Account",
                        selectedValuePath: "Id"
                    });

                    cboCostAccount.dispose();
                    cboCostAccount = new wijmo.input.ComboBox('#cboCostAccount', {
                        disabled: true,
                        isEditable: false,
                        itemsSource: accountsObservableArray,
                        displayMemberPath: "Account",
                        selectedValuePath: "Id"
                    });

                    cboAccumDepAccount.dispose();
                    cboAccumDepAccount = new wijmo.input.ComboBox('#cboAccumDepAccount', {
                        disabled: true,
                        isEditable: false,
                        itemsSource: accountsObservableArray,
                        displayMemberPath: "Account",
                        selectedValuePath: "Id"
                    });

                    cboExpenseAccount.dispose();
                    cboExpenseAccount = new wijmo.input.ComboBox('#cboExpenseAccount', {
                        disabled: true,
                        isEditable: false,
                        itemsSource: accountsObservableArray,
                        displayMemberPath: "Account",
                        selectedValuePath: "Id"
                    });

                    getArticleItemUnitForComboBox();
                }
            });
        }

        // =============
        // Get Item Unit
        // =============
        function getArticleItemUnitForComboBox() {
            var unitsObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/item/dropdown/list/unit',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            unitsObservableArray.push({
                                Id: results[i]["Id"],
                                Unit: results[i]["Unit"]
                            });
                        }
                    }

                    cboUnit.dispose();
                    cboUnit = new wijmo.input.ComboBox('#cboUnit', {
                        isEditable: false,
                        itemsSource: unitsObservableArray,
                        displayMemberPath: "Unit",
                        selectedValuePath: "Id",
                        onSelectedIndexChanged: function () {
                            if (cboUnitSelected) {
                                refresUnitConversionFlexGrid();
                            } else {
                                cboUnitSelected = true;
                            }
                        }
                    });

                    getArticleTaxTypeForComboBox();
                }
            });
        }

        // ============
        // Get Tax Type
        // ============
        function getArticleTaxTypeForComboBox() {
            var taxTypesObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/item/dropdown/list/taxType',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            taxTypesObservableArray.push({
                                Id: results[i]["Id"],
                                TaxType: results[i]["TaxType"]
                            });
                        }
                    }

                    cboInputTax.dispose();
                    cboInputTax = new wijmo.input.ComboBox('#cboInputTax', {
                        isEditable: false,
                        itemsSource: taxTypesObservableArray,
                        displayMemberPath: "TaxType",
                        selectedValuePath: "Id"
                    });

                    cboOutputTax.dispose();
                    cboOutputTax = new wijmo.input.ComboBox('#cboOutputTax', {
                        isEditable: false,
                        itemsSource: taxTypesObservableArray,
                        displayMemberPath: "TaxType",
                        selectedValuePath: "Id"
                    });

                    cboWithHoldingTax.dispose();
                    cboWithHoldingTax = new wijmo.input.ComboBox('#cboWithHoldingTax', {
                        isEditable: false,
                        itemsSource: taxTypesObservableArray,
                        displayMemberPath: "TaxType",
                        selectedValuePath: "Id"
                    });

                    createComboBoxKitting();
                }
            });
        }

        // ===========
        // Get kitting
        // ===========
        function createComboBoxKitting() {
            var kittingItemSource = ["None", "Component", "Package"];
            cboKitting.dispose();
            cboKitting = new wijmo.input.ComboBox('#cboKitting', {
                isEditable: false,
                itemsSource: kittingItemSource
            });

            getArticleItemById();
        }

        // ==============================
        // Get Article for item by its ID
        // ==============================
        function getArticleItemById() {
            NProgress.start();
            if (document.location.search.length > 0) {
                $.ajax({
                    url: '/api/item/detail/' + itemId,
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    success: function (results) {
                        if (results != null) {
                            document.getElementById('itemCode').value = results.ArticleCode;
                            document.getElementById('itemManualCode').value = results.ManualArticleCode;
                            document.getElementById('itemName').value = results.Article;
                            cboItemGroup.selectedValue = results.ArticleGroupId;
                            cboAccountCode.selectedValue = results.AccountId;
                            cboSalesAccountCode.selectedValue = results.SalesAccountId;
                            cboCostAccountCode.selectedValue = results.CostAccounIdt;
                            cboAccumDepAccountCode.selectedValue = results.AssetAccountId;
                            cboExpenseAccountCode.selectedValue = results.ExpenseAccountId;
                            cboAccount.selectedValue = results.AccountId;
                            cboSalesAccount.selectedValue = results.SalesAccountId;
                            cboCostAccount.selectedValue = results.CostAccounIdt;
                            cboAccumDepAccount.selectedValue = results.AssetAccountId;
                            cboExpenseAccount.selectedValue = results.ExpenseAccountId;
                            document.getElementById('itemCategory').value = results.Category;
                            cboUnit.selectedValue = results.UnitId;
                            document.getElementById('itemPrice').value = formatDecimalValues(results.Price);
                            document.getElementById('itemParticulars').value = results.Particulars;
                            cboInputTax.selectedValue = results.InputTaxId;
                            cboOutputTax.selectedValue = results.OutputTaxId;
                            cboWithHoldingTax.selectedValue = results.WTaxTypeId;
                            document.getElementById('itemIsInventory').checked = results.IsInventory;
                            if (results.Kitting == 0) {
                                cboKitting.selectedValue = "None";
                            } else {
                                if (results.Kitting == 1) {
                                    cboKitting.selectedValue = "Component";
                                } else {
                                    if (results.Kitting == 2) {
                                        cboKitting.selectedValue = "Package";
                                    }
                                }
                            }
                            document.getElementById('itemOldManualCode').value = results.ManualArticleOldCode;
                            document.getElementById('itemManualCost').value = formatDecimalValues(results.Cost);
                            cboDateAcquired.dispose();
                            cboDateAcquired = new wijmo.input.InputDate('#cboDateAcquired', {
                                format: 'MM-dd-yyyy',
                                value: new Date(results.DateAcquired)
                            });
                            document.getElementById('itemUsefulLife').value = formatDecimalValues(results.UsefulLife);
                            document.getElementById('itemSalvageValue').value = formatDecimalValues(results.SalvageValue);
                            document.getElementById('createdBy').innerHTML = results.CreatedBy;
                            document.getElementById('createdDate').innerHTML = results.CreatedDateTime;
                            document.getElementById('updatedBy').innerHTML = results.UpdatedBy;
                            document.getElementById('updatedDate').innerHTML = results.UpdatedDateTime;

                            if (results.IsLocked) {
                                document.getElementById('itemManualCode').disabled = true;
                                document.getElementById('itemName').disabled = true;
                                cboItemGroup.disabled = true;
                                document.getElementById('itemCategory').disabled = true;
                                cboUnit.disabled = true;
                                document.getElementById('itemPrice').disabled = true;
                                document.getElementById('itemParticulars').disabled = true;
                                cboInputTax.disabled = true;
                                cboOutputTax.disabled = true;
                                cboWithHoldingTax.disabled = true;
                                document.getElementById('itemIsInventory').disabled = true;
                                document.getElementById('itemOldManualCode').disabled = true;
                                document.getElementById('itemManualCost').disabled = true;
                                cboKitting.disabled = true;
                                cboDateAcquired.disabled = true;
                                document.getElementById('itemUsefulLife').disabled = true;
                                document.getElementById('itemSalvageValue').disabled = true;

                                $('#btnLockItem').prop('disabled', true);
                                $('#btnAddUnitConversion').prop('disabled', true);
                                $('#btnAddPrice').prop('disabled', true);
                                $('#btnAddComponent').prop('disabled', true);

                                IsLocked = true;

                                var canUnLock = "@ViewData["CanUnlock"]";
                                if (canUnLock == "False") {
                                    $("#btnUnlockItem").prop("disabled", true);
                                }
                            } else {
                                $('#btnUnlockItem').prop('disabled', true);

                                var canLock = "@ViewData["CanLock"]";
                                if (canLock == "False") {
                                    $("#btnLockItem").prop("disabled", true);
                                }

                                var canAdd = "@ViewData["CanAdd"]";
                                if (canAdd == "False") {
                                    $("#btnAddUnitConversion").prop("disabled", true);
                                    $("#btnAddComponent").prop("disabled", true);
                                    $('#btnAddPrice').prop('disabled', true);
                                }
                            }
                        } else {
                            alert("No Data");
                            window.location = "/Software/Item";
                        }

                        createUnitConversionFlexGrid();
                        createComponentFlexGrid();
                        createPriceFlexGrid();
                        createInventoryFlexGrid();
                    }
                });
            } else {
                alert("No Id Parameter Value");
                window.location = "/Software/Item";
            }
        }

        // ================
        // Item Data Object
        // ================
        function itemDataObject() {
            var itemObject = new Object();
            itemObject.ArticleCode = document.getElementById('itemCode').value;
            itemObject.ManualArticleCode = document.getElementById('itemManualCode').value;
            itemObject.Article = document.getElementById('itemName').value;
            itemObject.Category = document.getElementById('itemCategory').value;
            itemObject.ArticleGroupId = cboItemGroup.selectedValue;
            itemObject.AccountId = cboAccount.selectedValue;
            itemObject.SalesAccountId = cboSalesAccount.selectedValue;
            itemObject.CostAccountId = cboCostAccount.selectedValue;
            itemObject.AssetAccountId = cboAccumDepAccount.selectedValue;
            itemObject.ExpenseAccountId = cboExpenseAccount.selectedValue;
            itemObject.UnitId = cboUnit.selectedValue;
            itemObject.InputTaxId = cboInputTax.selectedValue;
            itemObject.OutputTaxId = cboOutputTax.selectedValue;
            itemObject.WTaxTypeId = cboWithHoldingTax.selectedValue;
            itemObject.Price = document.getElementById('itemPrice').value;
            itemObject.Cost = document.getElementById('itemManualCost').value;
            itemObject.IsInventory = document.getElementById('itemIsInventory').checked;
            itemObject.Particulars = document.getElementById('itemParticulars').value;
            itemObject.DateAcquired = cboDateAcquired.value.toLocaleDateString();
            itemObject.UsefulLife = document.getElementById('itemUsefulLife').value;
            itemObject.SalvageValue = document.getElementById('itemSalvageValue').value;
            itemObject.ManualArticleOldCode = document.getElementById('itemOldManualCode').value;
            if (cboKitting.selectedValue == "None") {
                itemObject.Kitting = 0;
            } else {
                if (cboKitting.selectedValue == "Component") {
                    itemObject.Kitting = 1;
                } else {
                    if (cboKitting.selectedValue == "Package") {
                        itemObject.Kitting = 2;
                    }
                }
            }
            var data = JSON.stringify(itemObject);
            return data;
        }

        // =========
        // Lock Item
        // =========
        function btnLockItemOnclick() {
            if (itemEntryValidation()) {
                document.getElementById('btnLockItem').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Locking";
                $('#btnLockItem').prop('disabled', true);
                $('#btnUnlockItem').prop('disabled', true);
                $('#btnCloseItem').prop('disabled', true);

                $.ajax({
                    type: "PUT",
                    url: '/api/item/lock/' + itemId,
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    data: itemDataObject(),
                    statusCode: {
                        200: function () {
                            toastr.success("Lock Successful");
                            window.setTimeout(function () {
                                location.reload()
                            }, 1000);
                        },
                        404: function (message) {
                            toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                            document.getElementById('btnLockItem').innerHTML = "<i class='fa fa-lock'></i> Lock";
                            $('#btnLockItem').prop('disabled', false);
                            $('#btnCloseItem').prop('disabled', false);
                        },
                        400: function (message) {
                            toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                            document.getElementById('btnLockItem').innerHTML = "<i class='fa fa-lock'></i> Lock";
                            $('#btnLockItem').prop('disabled', false);
                            $('#btnCloseItem').prop('disabled', false);
                        },
                        500: function (message) {
                            toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                            document.getElementById('btnLockItem').innerHTML = "<i class='fa fa-lock'></i> Lock";
                            $('#btnLockItem').prop('disabled', false);
                            $('#btnCloseItem').prop('disabled', false);
                        }
                    },
                });
            } else {
                toastr.error("Invalid Entry");
            }
        }

        // ===========
        // Unlock Item
        // ===========
        function btnUnlockItemOnclick() {
            document.getElementById('btnUnlockItem').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Unlocking";
            $('#btnLockItem').prop('disabled', true);
            $('#btnUnlockItem').prop('disabled', true);
            $('#btnCloseItem').prop('disabled', true);

            $.ajax({
                type: "PUT",
                url: '/api/item/unlock/' + itemId,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Unlock Successful");
                        window.setTimeout(function () {
                            location.reload()
                        }, 1000);
                    },
                    404: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                        document.getElementById('btnUnlockItem').innerHTML = "<i class='fa fa-unlock'></i> Unlock";
                        $('#btnUnlockItem').prop('disabled', false);
                        $('#btnCloseItem').prop('disabled', false);
                    },
                    400: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                        document.getElementById('btnUnlockItem').innerHTML = "<i class='fa fa-unlock'></i> Unlock";
                        $('#btnUnlockItem').prop('disabled', false);
                        $('#btnCloseItem').prop('disabled', false);
                    },
                    500: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                        document.getElementById('btnUnlockItem').innerHTML = "<i class='fa fa-unlock'></i> Unlock";
                        $('#btnUnlockItem').prop('disabled', false);
                        $('#btnCloseItem').prop('disabled', false);
                    }
                }
            });
        }

        // =================
        // Close Item Button
        // =================
        function btnCloseItemOnclick() {
            window.location = '/Software/Item';
        }

        // =====================
        // Item Entry Validation
        // =====================
        function itemEntryValidation() {
            var isValid = true;
            $('.requiredItem').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                } else {
                    $(this).css({
                        "border": "",
                    });
                }
            });
            return isValid;
        }

        // ========================
        // GET Unit Conversion List
        // ========================
        function getUnitConversion() {
            var unitConversions = new wijmo.collections.ObservableArray;
            if (document.location.search.length > 0) {
                $.ajax({
                    url: '/api/unitConversion/list/' + itemId,
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    success: function (results) {
                        if (results.length > 0) {
                            var btnEditId = "<button class='btn btn-primary btn-xs btn-block' onclick='btnEditUnitConversion_OnClick()'><i class='fa fa-edit'></i> Edit</button>";
                            var btnDeleteId = "<button class='btn btn-danger btn-xs btn-block' onclick='btnDeleteUnitConversion_OnClick()'><i class='fa fa-trash'></i> Delete</button>";
                            if (IsLocked) {
                                btnEditId = "<button class='btn btn-primary btn-xs btn-block' onclick='btnEditUnitConversion_OnClick()' disabled><i class='fa fa-edit'></i> Edit</button>";
                                btnDeleteId = "<button class='btn btn-danger btn-xs btn-block' onclick='btnDeleteUnitConversion_OnClick()' disabled><i class='fa fa-trash'></i> Delete</button>";
                            }

                            for (i = 0; i < results.length; i++) {
                                unitConversions.push({
                                    EditId: btnEditId,
                                    DeleteId: btnDeleteId,
                                    Id: results[i]["Id"],
                                    Multiplier: results[i]["Multiplier"],
                                    MultiplierDisplay: parseFloat(results[i]["Multiplier"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                    UnitId: results[i]["UnitId"],
                                    Unit: results[i]["Unit"],
                                    Equals: "=",
                                    BaseUnit: cboUnit.selectedItem["Unit"],
                                    IsCountUnit: results[i]["IsCountUnit"]
                                });
                            }
                        }

                        NProgress.done();
                    }
                });
            }

            return unitConversions;
        }

        // =======================
        // Refresh Unit Conversion
        // =======================
        function refresUnitConversionFlexGrid() {
            unitConversions = new wijmo.collections.CollectionView(getUnitConversion());
            unitConversionGrid.itemsSource = unitConversions;
            unitConversionGrid.trackChanges = true;
        }

        // ================
        //  Unit Conversion
        // ================
        function createUnitConversionFlexGrid() {
            unitConversions = new wijmo.collections.CollectionView(getUnitConversion());
            unitConversionGrid = new wijmo.grid.FlexGrid('#unitConversionGrid');
            unitConversionGrid.initialize({
                columns: [
                    @{
                        if (canEdit)
                        {
                            <text>
                                {
                                    "header": "Edit",
                                    "binding": "EditId",
                                    "width": 70,
                                    "align": "center",
                                    "allowResizing": false,
                                    "allowSorting": false,
                                    "isContentHtml": true
                                },
                            </text>
                        }
                        if (canDelete)
                        {
                            <text>
                                {
                                    "header": "Delete",
                                    "binding": "DeleteId",
                                    "width": 70,
                                    "align": "center",
                                    "allowResizing": false,
                                    "allowSorting": false,
                                    "isContentHtml": true
                                },
                            </text>
                        }
                    }
                    {
                        "header": "Multiplier",
                        "binding": "MultiplierDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": "2*"
                    },
                    {
                        "header": "Unit",
                        "binding": "Unit",
                        "allowSorting": true,
                        "width": "3*"
                    },
                    {
                        "header": " ",
                        "binding": "Equals",
                        "allowSorting": true,
                        "align": "center",
                        "width": 50
                    },
                    {
                        "header": "Base Unit",
                        "binding": "BaseUnit",
                        "allowSorting": true,
                        "width": "3*"
                    },
                    {
                        "header": "C",
                        "binding": "IsCountUnit",
                        "allowSorting": true,
                        "width": 50
                    },
                ],
                autoGenerateColumns: false,
                itemsSource: unitConversions,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            unitConversionGrid.trackChanges = true;
        }

        // ======================
        // Unit Conversion - Unit
        // ======================
        function getUnitConversionUnit(unitId) {
            var unitConversionUnitsObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/unitConversion/dropdown/list/unit',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            unitConversionUnitsObservableArray.push({
                                Id: results[i]["Id"],
                                Unit: results[i]["Unit"]
                            });
                        }
                    }

                    var disabled = true;
                    if (results.length > 0) {
                        disabled = false;
                    }

                    cboUnitConversionUnit.dispose();
                    cboUnitConversionUnit = new wijmo.input.ComboBox('#cboUnitConversionUnit', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: unitConversionUnitsObservableArray,
                        displayMemberPath: "Unit",
                        selectedValuePath: "Id",
                        selectedValue: unitId
                    });

                    cboUnitConversionBaseUnit.dispose();
                    cboUnitConversionBaseUnit = new wijmo.input.ComboBox('#cboUnitConversionBaseUnit', {
                        disabled: true,
                        isEditable: false,
                        itemsSource: unitConversionUnitsObservableArray,
                        displayMemberPath: "Unit",
                        selectedValuePath: "Id",
                        selectedValue: cboUnit.selectedValue
                    });

                    setTimeout(function () {
                        $("#loadingUnits").hide();
                        $("#unitConversionDetailForm").show();
                        if (results.length > 0) {
                            $('#btnSaveConversionUnit').prop('disabled', false);
                        }
                    }, 500);
                }
            });
        }

        // ===================
        // ADD Unit Conversion
        // ===================
        function btnAddUnitConversionOnclick() {
            $('#unitConversionEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $("#loadingUnits").show();
            document.getElementById("loadingUnits").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#unitConversionDetailForm").hide();

            document.getElementById('btnSaveConversionUnit').innerHTML = "<i class='fa fa-save'></i> Save";
            $('#btnSaveConversionUnit').prop('disabled', true);
            $('#btnCloseUnitConversionModal').prop('disabled', false);

            unitConversionId = 0;
            document.getElementById('unitConversion_multiplier').value = formatDecimalValues(1);
            getUnitConversionUnit(cboUnit.selectedValue);
            document.getElementById('unitConversion_countUnit').checked = false;
        }

        // ====================
        // Edit Unit Conversion
        // ====================
        function btnEditUnitConversion_OnClick() {
            $('#unitConversionEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $("#loadingUnits").show();
            document.getElementById("loadingUnits").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#unitConversionDetailForm").hide();

            document.getElementById('btnSaveConversionUnit').innerHTML = "<i class='fa fa-save'></i> Save";
            $('#btnSaveConversionUnit').prop('disabled', true);
            $('#btnCloseUnitConversionModal').prop('disabled', false);

            unitConversions.editItem(unitConversions.currentItem);
            var unitConversion = unitConversions.currentEditItem;
            unitConversionId = unitConversion.Id;
            document.getElementById('unitConversion_multiplier').value = formatDecimalValues(unitConversion.Multiplier);
            getUnitConversionUnit(unitConversion.UnitId);
            document.getElementById('unitConversion_countUnit').checked = unitConversion.IsCountUnit;
        }

        // ======================
        // Delete Unit Conversion
        // ======================
        function btnDeleteUnitConversion_OnClick() {
            $('#deleteUnitConversionConfirm').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById('btnConfirmDeleteUnitConversion').innerHTML = "<i class='fa fa-trash'></i> Delete";
            $('#btnConfirmDeleteUnitConversion').prop('disabled', false);
            $('#btnCloseConfirmDeleteUnitConversion').prop('disabled', false);
        }

        // ==============================
        // Confirm Delete Unit Conversion
        // ==============================
        function btnConfirmDeleteUnitConversionOnclick() {
            document.getElementById('btnConfirmDeleteUnitConversion').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Deleting";
            $('#btnConfirmDeleteUnitConversion').prop('disabled', true);
            $('#btnCloseConfirmDeleteUnitConversion').prop('disabled', true);

            unitConversions.editItem(unitConversions.currentItem);
            var unitConversionId = unitConversions.currentEditItem.Id;
            $.ajax({
                url: '/api/unitConversion/delete/' + unitConversionId + '/' + itemId,
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Delete Successful");
                        $('#deleteUnitConversionConfirm').modal('hide');
                        refresUnitConversionFlexGrid();
                    },
                    404: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                        $('#deleteUnitConversionConfirm').modal('hide');
                        document.getElementById('btnConfirmDeleteUnitConversion').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $('#btnConfirmDeleteUnitConversion').prop('disabled', false);
                        $('#btnCloseConfirmDeleteUnitConversion').prop('disabled', false);
                    },
                    400: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                        $('#deleteUnitConversionConfirm').modal('hide');
                        document.getElementById('btnConfirmDeleteUnitConversion').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $('#btnConfirmDeleteUnitConversion').prop('disabled', false);
                        $('#btnCloseConfirmDeleteUnitConversion').prop('disabled', false);
                    },
                    500: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                        $('#deleteUnitConversionConfirm').modal('hide');
                        document.getElementById('btnConfirmDeleteUnitConversion').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $('#btnConfirmDeleteUnitConversion').prop('disabled', false);
                        $('#btnCloseConfirmDeleteUnitConversion').prop('disabled', false);
                    }
                }
            });
        }

        // ================================
        // Unit Conversion entry Validation
        // ================================
        function unitConversionEntryValidation() {
            var isValid = true;
            $('.requiredUnitConversion').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                } else {
                    $(this).css({
                        "border": "",
                    });
                }
            });
            return isValid;
        }

        // ====================
        // Save Unit Conversion
        // ====================
        function btnSaveUnitConversionOnclick() {
            var unitConversionObject = new Object();
            unitConversionObject.ArticleId = itemId;
            unitConversionObject.UnitId = cboUnitConversionUnit.selectedValue;
            unitConversionObject.Multiplier = document.getElementById("unitConversion_multiplier").value.toLocaleString();
            unitConversionObject.IsCountUnit = document.getElementById("unitConversion_countUnit").checked;
            var data = JSON.stringify(unitConversionObject);

            if (unitConversionEntryValidation()) {
                document.getElementById('btnSaveConversionUnit').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Saving";
                $('#btnSaveConversionUnit').prop('disabled', true);
                $('#btnCloseUnitConversionModal').prop('disabled', true);

                if (unitConversionId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/unitConversion/add/' + itemId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: data,
                        statusCode: {
                            200: function () {
                                toastr.success("Save Successful");
                                $('#unitConversionEdit').modal('hide');
                                refresUnitConversionFlexGrid();
                            },
                            404: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                                $('#unitConversionEdit').modal('hide');
                                document.getElementById('btnSaveConversionUnit').innerHTML = "<i class='fa fa-save'></i> Save";
                                $('#btnSaveConversionUnit').prop('disabled', false);
                                $('#btnCloseUnitConversionModal').prop('disabled', false);
                            },
                            400: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                                $('#unitConversionEdit').modal('hide');
                                document.getElementById('btnSaveConversionUnit').innerHTML = "<i class='fa fa-save'></i> Save";
                                $('#btnSaveConversionUnit').prop('disabled', false);
                                $('#btnCloseUnitConversionModal').prop('disabled', false);
                            },
                            500: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                                $('#unitConversionEdit').modal('hide');
                                document.getElementById('btnSaveConversionUnit').innerHTML = "<i class='fa fa-save'></i> Save";
                                $('#btnSaveConversionUnit').prop('disabled', false);
                                $('#btnCloseUnitConversionModal').prop('disabled', false);
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/unitConversion/update/' + unitConversionId + '/' + itemId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: data,
                        statusCode: {
                            200: function () {
                                toastr.success("Update Successful");
                                $('#unitConversionEdit').modal('hide');
                                refresUnitConversionFlexGrid();
                            },
                            404: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                                $('#unitConversionEdit').modal('hide');
                                document.getElementById('btnSaveConversionUnit').innerHTML = "<i class='fa fa-save'></i> Save";
                                $('#btnSaveConversionUnit').prop('disabled', false);
                                $('#btnCloseUnitConversionModal').prop('disabled', false);
                            },
                            400: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                                $('#unitConversionEdit').modal('hide');
                                document.getElementById('btnSaveConversionUnit').innerHTML = "<i class='fa fa-save'></i> Save";
                                $('#btnSaveConversionUnit').prop('disabled', false);
                                $('#btnCloseUnitConversionModal').prop('disabled', false);
                            },
                            500: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                                $('#unitConversionEdit').modal('hide');
                                document.getElementById('btnSaveConversionUnit').innerHTML = "<i class='fa fa-save'></i> Save";
                                $('#btnSaveConversionUnit').prop('disabled', false);
                                $('#btnCloseUnitConversionModal').prop('disabled', false);
                            }
                        }
                    });
                }
            } else {
                toastr.error("Invalid Entry");
            }
        }

        // ==================
        // GET Component List
        // ==================
        function getComponent() {
            var componentsObservableArray = new wijmo.collections.ObservableArray;
            if (document.location.search.length > 0) {
                $.ajax({
                    url: '/api/listArticleComponent/' + itemId,
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    success: function (componentResults) {
                        var totalComponentAmount = 0;
                        if (componentResults.length > 0) {
                            var canEdit = "@ViewData["CanEdit"]";
                            var editDisabled = "";
                            if (canEdit == "False") {
                                editDisabled = "disabled";
                            }

                            var canDelete = "@ViewData["CanDelete"]";
                            var deleteDisabled = "";
                            if (canDelete == "False") {
                                deleteDisabled = "disabled";
                            }

                            var btnEditId = "<button class='btn btn-primary btn-xs btn-block' onclick='btnEditCompoent_OnClick()'" + editDisabled + "><i class='fa fa-edit'></i> Edit</button>";
                            var btnDeleteId = "<button class='btn btn-danger btn-xs btn-block' onclick='btnDeleteCompoent_OnClick()'" + deleteDisabled + "><i class='fa fa-trash'></i> Delete</button>";
                            if (IsLocked) {
                                btnEditId = "<button class='btn btn-primary btn-xs btn-block' onclick='btnEditCompoent_OnClick()' disabled><i class='fa fa-edit'></i> Edit</button>";
                                btnDeleteId = "<button class='btn btn-danger btn-xs btn-block' onclick='btnDeleteCompoent_OnClick()' disabled><i class='fa fa-trash'></i> Delete</button>";
                            }

                            for (i = 0; i < componentResults.length; i++) {
                                totalComponentAmount += (componentResults[i]["Quantity"] * componentResults[i]["Cost"]);

                                componentsObservableArray.push({
                                    EditId: btnEditId,
                                    DeleteId: btnDeleteId,
                                    Id: componentResults[i]["Id"],
                                    ArticleId: componentResults[i]["ArticleId"],
                                    Article: componentResults[i]["Article"],
                                    ComponentArticleId: componentResults[i]["ComponentArticleId"],
                                    ComponentArticleCode: componentResults[i]["ComponentArticleCode"],
                                    ComponentArticle: componentResults[i]["ComponentArticle"],
                                    Quantity: componentResults[i]["Quantity"],
                                    QuantityDisplay: parseFloat(componentResults[i]["Quantity"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                    UnitId: componentResults[i]["UnitId"],
                                    Unit: componentResults[i]["Unit"],
                                    Cost: componentResults[i]["Cost"],
                                    CostDisplay: parseFloat(componentResults[i]["Cost"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                    Amount: componentResults[i]["Quantity"] * componentResults[i]["Cost"],
                                    AmountDisplay: parseFloat(componentResults[i]["Quantity"] * componentResults[i]["Cost"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                    Particulars: componentResults[i]["Particulars"]
                                });
                            }
                        }

                        document.getElementById('totalComponentAmount').value = parseFloat(totalComponentAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        NProgress.done();
                    }
                });
            }

            return componentsObservableArray;
        }

        // ==========================
        // Refresh Component FlexGrid
        // ==========================
        function refreshComponentFlexGrid() {
            components = new wijmo.collections.CollectionView(getComponent());

            componentGrid.itemsSource = components;
            componentGrid.trackChanges = true;
        }

        // ==========
        //  Component
        // ==========
        function createComponentFlexGrid() {
            components = new wijmo.collections.CollectionView(getComponent());

            componentGrid = new wijmo.grid.FlexGrid('#ComponentGrid');
            componentGrid.initialize({
                columns: [
                    @{
                        if (canEdit)
                        {
                            <text>
                                {
                                    "header": "Edit",
                                    "binding": "EditId",
                                    "width": 70,
                                    "align": "center",
                                    "allowResizing": false,
                                    "allowSorting": false,
                                    "isContentHtml": true
                                },
                            </text>
                        }
                        if (canDelete)
                        {
                            <text>
                                {
                                    "header": "Delete",
                                    "binding": "DeleteId",
                                    "width": 70,
                                    "align": "center",
                                    "allowResizing": false,
                                    "allowSorting": false,
                                    "isContentHtml": true
                                },
                            </text>
                        }
                    }
                    {
                        "header": "Manual Code",
                        "binding": "ComponentArticleCode",
                        "allowSorting": true,
                        "width": "1.7*"
                    },
                    {
                        "header": "Component.",
                        "binding": "ComponentArticle",
                        "allowSorting": true,
                        "width": "2.5*"
                    },
                    {
                        "header": "Quantity",
                        "binding": "QuantityDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": "1.5*"
                    },
                    {
                        "header": "Unit",
                        "binding": "Unit",
                        "allowSorting": true,
                        "width": "1*"
                    },
                    {
                        "header": "Cost",
                        "binding": "CostDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": "1.5*"
                    },
                    {
                        "header": "Amount",
                        "binding": "AmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": "1.5*"
                    },
                    {
                        "header": "Particulars",
                        "binding": "Particulars",
                        "allowSorting": true,
                        "width": "1.7*"
                    },
                ],
                autoGenerateColumns: false,
                itemsSource: components,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            componentGrid.trackChanges = true;
        }

        $('#component_Quantity').keyup(function () {
            computeComponentAmount();
        });

        // ======================================
        // GET Item Id, Manual Code and Component
        // ======================================
        function getArticleItemForManualCodeAndComponent(itemIdSelectedValue, UnitId) {
            var articleComponenetsItemsObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/articleItems/' + itemId,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (articleComponentItemsResults) {
                    if (articleComponentItemsResults.length > 0) {
                        for (i = 0; i < articleComponentItemsResults.length; i++) {
                            articleComponenetsItemsObservableArray.push({
                                Id: articleComponentItemsResults[i]["Id"],
                                ItemCode: articleComponentItemsResults[i]["ManualArticleCode"],
                                ItemComponent: articleComponentItemsResults[i]["Article"],
                                UnitId: articleComponentItemsResults[i]["UnitId"],
                                Unit: articleComponentItemsResults[i]["Unit"],
                                Cost: articleComponentItemsResults[i]["Cost"]
                            });
                        }
                    }

                    var disabled = true;
                    if (articleComponentItemsResults.length > 0) {
                        disabled = false;
                        $('#btnSaveComponent').prop('disabled', false);
                    } else {
                        $('#btnSaveComponent').prop('disabled', true);
                    }

                    cboComponentItemCode.dispose();
                    cboComponentItemCode = new wijmo.input.ComboBox('#cboComponentItemCode', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: articleComponenetsItemsObservableArray,
                        displayMemberPath: "ItemCode",
                        selectedValuePath: "Id",
                        selectedValue: itemIdSelectedValue,
                        onSelectedIndexChanged: function () {
                            cboComponentItem.selectedValue = this.selectedValue;
                        }
                    });

                    cboComponentItem.dispose();
                    cboComponentItem = new wijmo.input.ComboBox('#cboComponentItem', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: articleComponenetsItemsObservableArray,
                        displayMemberPath: "ItemComponent",
                        selectedValuePath: "Id",
                        selectedValue: itemIdSelectedValue,
                        onSelectedIndexChanged: function () {
                            cboComponentItemCode.selectedValue = this.selectedValue;
                            cboComponentUnit.selectedValue = this.selectedItem["UnitId"];
                            document.getElementById("component_cost").value = formatDecimalValues(this.selectedItem["Cost"]);
                            computeComponentAmount();
                        }
                    });

                    if (componentId == 0) {
                        getComponentUnitForComboBox(cboComponentItem.selectedItem["UnitId"]);
                        document.getElementById("component_cost").value = formatDecimalValues(cboComponentItem.selectedItem["Cost"]);
                    } else {
                        getComponentUnitForComboBox(UnitId);
                    }

                    computeComponentAmount();
                }
            });
        }

        // =============
        // Get Item Unit
        // =============
        function getComponentUnitForComboBox(UnitId) {
            var componentUnitsObservableArray = new wijmo.collections.ObservableArray();
            if (cboComponentItem.selectedValue != null) {
                $.ajax({
                    url: '/api/listUnit',
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    success: function (componentItemUnitResults) {
                        if (componentItemUnitResults.length > 0) {
                            for (i = 0; i < componentItemUnitResults.length; i++) {
                                componentUnitsObservableArray.push({
                                    Id: componentItemUnitResults[i]["Id"],
                                    Unit: componentItemUnitResults[i]["Unit"]
                                });
                            }
                        }

                        cboComponentUnit.dispose();
                        cboComponentUnit = new wijmo.input.ComboBox('#cboComponentUnit', {
                            disabled: true,
                            isEditable: false,
                            itemsSource: componentUnitsObservableArray,
                            displayMemberPath: "Unit",
                            selectedValuePath: "Id",
                            selectedValue: UnitId
                        });

                        setTimeout(function () {
                            $("#loadingComponents").hide();
                            $("#componentDetailForm").show();
                            if (componentItemUnitResults.length <= 0) {
                                $('#btnSaveComponent').prop('disabled', true);
                            }
                        }, 500);
                    }
                });
            } else {
                cboComponentUnit.dispose();
                cboComponentUnit = new wijmo.input.ComboBox('#cboComponentUnit', {
                    disabled: true,
                    isEditable: false,
                    itemsSource: componentUnitsObservableArray
                });

                setTimeout(function () {
                    $("#loadingComponents").hide();
                    $("#componentDetailForm").show();
                    $('#btnSaveComponent').prop('disabled', true);
                }, 500);
            }
        }

        // =============
        // ADD component
        // =============
        function btnAddComponentOnclick() {
            $('#componentEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $("#loadingComponents").show();
            document.getElementById("loadingComponents").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#componentDetailForm").hide();

            document.getElementById("btnSaveComponent").innerHTML = "<i class='fa fa-save'></i> Save"
            $("#btnSaveComponent").prop("disabled", true);
            $("#btnCloseComponentModal").prop("disabled", false);

            componentId = 0;
            getArticleItemForManualCodeAndComponent(0, 0);
            document.getElementById('component_Quantity').value = formatDecimalValues(1);
            document.getElementById('component_particulars').value = 'NA';
        }

        // ==============
        // Edit component
        // ==============
        function btnEditCompoent_OnClick() {
            $('#componentEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $("#loadingComponents").show();
            document.getElementById("loadingComponents").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#componentDetailForm").hide();

            document.getElementById("btnSaveComponent").innerHTML = "<i class='fa fa-save'></i> Save"
            $("#btnSaveComponent").prop("disabled", true);
            $("#btnCloseComponentModal").prop("disabled", false);

            components.editItem(components.currentItem);
            var component = components.currentEditItem;
            componentId = component.Id;
            getArticleItemForManualCodeAndComponent(component.ComponentArticleId, component.UnitId);
            document.getElementById('component_Quantity').value = formatDecimalValues(component.Quantity);
            document.getElementById('component_cost').value = formatDecimalValues(component.Cost);
            document.getElementById('component_amount').value = formatDecimalValues(component.Amount);
            document.getElementById('component_particulars').value = component.Particulars;
        }

        // ==========================
        // Component entry Validation
        // ==========================
        function componentEntryValidation() {
            var isValid = true;
            $('.requiredComponent').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                } else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            return isValid;
        }

        // ==============
        // Save component
        // ==============
        function btnSaveComponentOnclick() {
            if (componentEntryValidation()) {
                document.getElementById("btnSaveComponent").innerHTML = "<i class='fa fa-spinner fa-spin'></i> Saving"
                $("#btnSaveComponent").prop("disabled", true);
                $("#btnCloseComponentModal").prop("disabled", true);

                var componentObject = new Object();
                componentObject.ArticleId = itemId;
                componentObject.ComponentArticleId = cboComponentItem.selectedValue;
                componentObject.Quantity = document.getElementById("component_Quantity").value;
                componentObject.Particulars = document.getElementById("component_particulars").value;
                var data = JSON.stringify(componentObject);

                if (componentId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/addArticleComponent',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: data,
                        success: function (id) {
                            if (id > 0) {
                                toastr.success("Save Successful");
                                $('#componentEdit').modal('hide');
                                refreshComponentFlexGrid();
                            } else {
                                toastr.error("Internal Server Error");
                                $('#componentEdit').modal('hide');
                                document.getElementById("btnSaveComponent").innerHTML = "<i class='fa fa-save'></i> Save"
                                $("#btnSaveComponent").prop("disabled", false);
                                $("#btnCloseComponentModal").prop("disabled", false);

                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/updateArticleComponent/' + componentId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: data,
                        statusCode: {
                            200: function () {
                                toastr.success("Update Successful");
                                $('#componentEdit').modal('hide');
                                refreshComponentFlexGrid();
                            },
                            404: function () {
                                toastr.error("Not Found");
                                $('#componentEdit').modal('hide');
                                document.getElementById("btnSaveComponent").innerHTML = "<i class='fa fa-save'></i> Save"
                                $("#btnSaveComponent").prop("disabled", false);
                                $("#btnCloseComponentModal").prop("disabled", false);

                            },
                            400: function () {
                                toastr.error("Bad Request");
                                $('#componentEdit').modal('hide');
                                document.getElementById("btnSaveComponent").innerHTML = "<i class='fa fa-save'></i> Save"
                                $("#btnSaveComponent").prop("disabled", false);
                                $("#btnCloseComponentModal").prop("disabled", false);

                            }
                        }
                    });
                }
            } else {
                toastr.error("Invalid Entry");
            }
        }

        // ================
        // Delete component
        // ================
        function btnDeleteCompoent_OnClick() {
            $('#deleteComponenetConfirm').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById('btnConfirmDeleteComponent').innerHTML = "<i class='fa fa-trash'></i> Delete";
            $('#btnConfirmDeleteComponent').prop('disabled', false);
            $('#btnCloseConfirmDeleteComponentModal').prop('disabled', false);
        }

        // ========================
        // Confirm Delete component
        // ========================
        function btnConfirmDeleteComponentOnclick() {
            document.getElementById('btnConfirmDeleteComponent').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Deleting";
            $('#btnConfirmDeleteComponent').prop('disabled', true);
            $('#btnCloseConfirmDeleteComponentModal').prop('disabled', true);

            components.editItem(components.currentItem);
            var component = components.currentEditItem;
            $.ajax({
                url: '/api/deleteArticleComponent/' + component.Id,
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Delete Successful");
                        $('#deleteComponenetConfirm').modal('hide');
                        refreshComponentFlexGrid();
                    },
                    404: function () {
                        toastr.error("Not Found");
                        $('#deleteComponenetConfirm').modal('hide');
                        document.getElementById('btnConfirmDeleteComponent').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $('#btnConfirmDeleteComponent').prop('disabled', false);
                        $('#btnCloseConfirmDeleteComponentModal').prop('disabled', false);
                    },
                    400: function () {
                        toastr.error("Bad Request");
                        $('#deleteComponenetConfirm').modal('hide');
                        document.getElementById('btnConfirmDeleteComponent').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $('#btnConfirmDeleteComponent').prop('disabled', false);
                        $('#btnCloseConfirmDeleteComponentModal').prop('disabled', false);
                    }
                }
            });
        }

        // =================
        // Compute component
        // =================
        function computeComponentAmount() {
            var quantity = document.getElementById('component_Quantity').value;
            var cost = document.getElementById('component_cost').value;
            var replacedQuantity = quantity.replace(/\,/g, '');
            var replacedCost = cost.replace(/\,/g, '');

            var roundAmount = replacedQuantity * replacedCost;
            document.getElementById('component_amount').value = formatDecimalValues(roundAmount);
        }

        // ==================
        // GET Price List
        // ==================
        function getPrice() {
            var prices = new wijmo.collections.ObservableArray;
            if (document.location.search.length > 0) {
                $.ajax({
                    url: '/api/listArticlePrice/' + itemId,
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    success: function (priceResults) {
                        if (priceResults.length > 0) {
                            var canEdit = "@ViewData["CanEdit"]";
                            var editDisabled = "";
                            if (canEdit == "False") {
                                editDisabled = "disabled";
                            }

                            var canDelete = "@ViewData["CanDelete"]";
                            var deleteDisabled = "";
                            if (canDelete == "False") {
                                deleteDisabled = "disabled";
                            }

                            var btnEditId = "<button class='btn btn-primary btn-xs btn-block' onclick='btnEditPrice_OnClick()' " + editDisabled + "><i class='fa fa-edit'></i> Edit</button>";
                            var btnDeleteId = "<button class='btn btn-danger btn-xs btn-block' onclick='btnDeletePrice_OnClick()' " + deleteDisabled + "><i class='fa fa-trash'></i> Delete</button>";
                            if (IsLocked) {
                                btnEditId = "<button class='btn btn-primary btn-xs btn-block' onclick='btnEditPrice_OnClick()' disabled><i class='fa fa-edit'></i> Edit</button>";
                                btnDeleteId = "<button class='btn btn-danger btn-xs btn-block' onclick='btnDeletePrice_OnClick()' disabled><i class='fa fa-trash'></i> Delete</button>";
                            }

                            for (i = 0; i < priceResults.length; i++) {
                                prices.push({
                                    EditId: btnEditId,
                                    DeleteId: btnDeleteId,
                                    Id: priceResults[i]["Id"],
                                    ArticleId: priceResults[i]["ArticleId"],
                                    Article: priceResults[i]["Article"],
                                    PriceDescription: priceResults[i]["PriceDescription"],
                                    Price: priceResults[i]["Price"],
                                    PriceDisplay: parseFloat(priceResults[i]["Price"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                    Remarks: priceResults[i]["Remarks"]
                                });
                            }
                        }

                        NProgress.done();
                    }
                });
            }

            return prices;
        }

        // =======================
        // Refresh Price Flex Grid
        // =======================
        function refreshPriceFlexGrid() {
            prices = new wijmo.collections.CollectionView(getPrice());

            priceGrid.itemsSource = prices;
            priceGrid.trackChanges = true;
        }

        // =====
        // Price
        // =====
        function createPriceFlexGrid() {
            prices = new wijmo.collections.CollectionView(getPrice());

            priceGrid = new wijmo.grid.FlexGrid('#PriceGrid');
            priceGrid.initialize({
                columns: [
                    @{
                        if (canEdit)
                        {
                            <text>
                                {
                                    "header": "Edit",
                                    "binding": "EditId",
                                    "width": 70,
                                    "align": "center",
                                    "allowResizing": false,
                                    "allowSorting": false,
                                    "isContentHtml": true
                                },
                            </text>
                        }
                        if (canDelete)
                        {
                            <text>
                                {
                                    "header": "Delete",
                                    "binding": "DeleteId",
                                    "width": 70,
                                    "align": "center",
                                    "allowResizing": false,
                                    "allowSorting": false,
                                    "isContentHtml": true
                                },
                            </text>
                        }
                    }
                    {
                        "header": "Description",
                        "binding": "PriceDescription",
                        "allowSorting": true,
                        "width": "3*"
                    },
                    {
                        "header": "Price",
                        "binding": "PriceDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": "2*"
                    },
                    {
                        "header": "Remarks",
                        "binding": "Remarks",
                        "allowSorting": true,
                        "width": "3*"
                    }
                ],
                autoGenerateColumns: false,
                itemsSource: prices,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            priceGrid.trackChanges = true;
        }

        // ======================
        // Price entry Validation
        // ======================
        function priceEntryValidation() {
            var isValid = true;
            $('.requiredPrice').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                } else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            return isValid;
        }

        // =========
        // Add Price
        // =========
        function btnAddPriceOnclick() {
            $('#priceEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $("#loadingPrice").show();
            document.getElementById("loadingPrice").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#priceDetailForm").hide();

            document.getElementById('btnSavePrice').innerHTML = "<i class='fa fa-save'></i> Save";
            $('#btnSavePrice').prop('disabled', true);
            $('#btnClosePriceModal').prop('disabled', false);

            priceId = 0;
            document.getElementById('price_PriceDescription').value = "NA";
            document.getElementById('price_Price').value = formatDecimalValues(0);
            document.getElementById('price_Remarks').value = "NA";

            setTimeout(function () {
                $("#loadingPrice").hide();
                $("#priceDetailForm").show();
                $('#btnSavePrice').prop('disabled', false);
            }, 500);
        }

        // ==========
        // Edit Price
        // ==========
        function btnEditPrice_OnClick() {
            $('#priceEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $("#loadingPrice").show();
            document.getElementById("loadingPrice").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#priceDetailForm").hide();

            document.getElementById('btnSavePrice').innerHTML = "<i class='fa fa-save'></i> Save";
            $('#btnSavePrice').prop('disabled', true);
            $('#btnClosePriceModal').prop('disabled', false);

            prices.editItem(prices.currentItem);
            var price = prices.currentEditItem;
            priceId = price.Id;
            document.getElementById('price_PriceDescription').value = price.PriceDescription;
            document.getElementById('price_Price').value = formatDecimalValues(price.Price);
            document.getElementById('price_Remarks').value = price.Remarks;

            setTimeout(function () {
                $("#loadingPrice").hide();
                $("#priceDetailForm").show();
                $('#btnSavePrice').prop('disabled', false);
            }, 500);
        }

        // ============
        // Delete Price
        // ============
        function btnDeletePrice_OnClick() {
            $('#deletPriceConfirm').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById('btnPriceConfirmDelete').innerHTML = "<i class='fa fa-trash'></i> Delete";
            $('#btnPriceConfirmDelete').prop('disabled', false);
            $('#btnClosePriceConfirmDeleteModal').prop('disabled', false);
        }

        // confirm delete price
        function btnPriceConfirmDeleteOnclick() {
            document.getElementById('btnPriceConfirmDelete').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Deleting";
            $('#btnPriceConfirmDelete').prop('disabled', true);
            $('#btnClosePriceConfirmDeleteModal').prop('disabled', true);

            prices.editItem(prices.currentItem);
            var price = prices.currentEditItem;
            $.ajax({
                url: '/api/deleteArticlePrice/' + price.Id,
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Delete Successful");
                        $('#deletPriceConfirm').modal('hide');
                        refreshPriceFlexGrid();
                    },
                    404: function () {
                        toastr.error("Not Found");
                        $('#deletPriceConfirm').modal('hide');
                        document.getElementById('btnPriceConfirmDelete').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $('#btnPriceConfirmDelete').prop('disabled', false);
                        $('#btnClosePriceConfirmDeleteModal').prop('disabled', false);
                    },
                    400: function () {
                        toastr.error("Bad Request");
                        $('#deletPriceConfirm').modal('hide');
                        document.getElementById('btnPriceConfirmDelete').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $('#btnPriceConfirmDelete').prop('disabled', false);
                        $('#btnClosePriceConfirmDeleteModal').prop('disabled', false);
                    }
                }
            });
        }

        // ==========
        // Save Price
        // ==========
        function btnSavePriceOnclick() {
            var priceObject = new Object();
            priceObject.ArticleId = itemId;
            priceObject.PriceDescription = document.getElementById('price_PriceDescription').value;
            priceObject.Price = document.getElementById('price_Price').value;
            priceObject.Remarks = document.getElementById('price_Remarks').value;
            var data = JSON.stringify(priceObject);

            if (priceEntryValidation()) {
                document.getElementById('btnSavePrice').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Saving";
                $('#btnSavePrice').prop('disabled', true);
                $('#btnClosePriceModal').prop('disabled', true);

                if (priceId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/addArticlePrice',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: data,
                        success: function (id) {
                            if (id > 0) {
                                toastr.success("Save Successful");
                                $('#priceEdit').modal('hide');
                                refreshPriceFlexGrid();
                            } else {
                                toastr.error("Internal Server Error");
                                $('#priceEdit').modal('hide');
                                document.getElementById('btnSavePrice').innerHTML = "<i class='fa fa-save'></i> Save";
                                $('#btnSavePrice').prop('disabled', false);
                                $('#btnClosePriceModal').prop('disabled', false);
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/updateArticlePrice/' + priceId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: data,
                        statusCode: {
                            200: function () {
                                toastr.success("Update Successful");
                                $('#priceEdit').modal('hide');
                                refreshPriceFlexGrid();
                            },
                            404: function () {
                                toastr.error("Not Found");
                                $('#priceEdit').modal('hide');
                                document.getElementById('btnSavePrice').innerHTML = "<i class='fa fa-save'></i> Save";
                                $('#btnSavePrice').prop('disabled', false);
                                $('#btnClosePriceModal').prop('disabled', false);
                            },
                            400: function () {
                                toastr.error("Bad Request");
                                $('#priceEdit').modal('hide');
                                document.getElementById('btnSavePrice').innerHTML = "<i class='fa fa-save'></i> Save";
                                $('#btnSavePrice').prop('disabled', false);
                                $('#btnClosePriceModal').prop('disabled', false);
                            }
                        }
                    });
                }
            } else {
                toastr.error("Invalid Entry");
            }
        }

        // ==================
        // GET Inventory List
        // ==================
        function getInventory() {
            var inventoriesObservableArray = new wijmo.collections.ObservableArray;
            if (document.location.search.length > 0) {
                $.ajax({
                    url: '/api/listArticleInventoryByArticleId/items/' + itemId,
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    data: {},
                    success: function (Results) {
                        if (Results.length > 0) {
                            for (i = 0; i < Results.length; i++) {
                                inventoriesObservableArray.push({
                                    Id: Results[i]["Id"],
                                    BranchId: Results[i]["BranchId"],
                                    Branch: Results[i]["Branch"],
                                    ArticleId: Results[i]["ArticleId"],
                                    Article: Results[i]["Article"],
                                    InventoryCode: Results[i]["InventoryCode"],
                                    Quantity: Results[i]["Quantity"],
                                    QuantityDisplay: parseFloat(Results[i]["Quantity"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                    Cost: Results[i]["Cost"],
                                    CostDisplay: parseFloat(Results[i]["Cost"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                    Amount: Results[i]["Amount"],
                                    AmountDisplay: parseFloat(Results[i]["Amount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                    Particulars: Results[i]["Particulars"],
                                });
                            }
                        }

                        NProgress.done();
                    }
                });
            }

            return inventoriesObservableArray;
        }

        // =================
        // Refresh Inventory
        // =================
        function refreshInventoryFlexGrid() {
            inventories = new wijmo.collections.CollectionView(getInventory());
            inventoryGrid.itemsSource = inventories;
            inventoryGrid.trackChanges = true;
        }

        // ==========
        //  Inventory
        // ==========
        function createInventoryFlexGrid() {
            inventories = new wijmo.collections.CollectionView(getInventory());

            // Flex Grid for Inventory
            inventoryGrid = new wijmo.grid.FlexGrid('#InventoryGrid');
            inventoryGrid.initialize({
                columns: [
                    {
                        "header": "Branch",
                        "binding": "Branch",
                        "allowSorting": true,
                        "width": "3*"
                    },
                    {
                        "header": "Code",
                        "binding": "InventoryCode",
                        "allowSorting": true,
                        "width": "4*"
                    },
                    {
                        "header": "Quantity",
                        "binding": "QuantityDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": "2*"
                    },
                    {
                        "header": "Cost",
                        "binding": "CostDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": "2*"
                    },
                    {
                        "header": "Amount",
                        "binding": "AmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": "2*"
                    },
                ],
                autoGenerateColumns: false,
                itemsSource: inventories,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            inventoryGrid.trackChanges = true;
        }

        // ====
        // TABS
        // ====
        $('#unitConversionTabId').click(function () {
            $('#UnitConversion').show();
            $('#Component').hide();
            $('#Price').hide();
            $('#Inventory').hide();
            $('#GLAccount').hide();
            $('#FixedAsset').hide();
            NProgress.start();
            refresUnitConversionFlexGrid();
        });

        $('#componentTabId').click(function () {
            $('#UnitConversion').hide();
            $('#Component').show();
            $('#Price').hide();
            $('#Inventory').hide();
            $('#GLAccount').hide();
            $('#FixedAsset').hide();
            NProgress.start();
            refreshComponentFlexGrid();
        });

        $('#priceTabId').click(function () {
            $('#UnitConversion').hide();
            $('#Component').hide();
            $('#Price').show();
            $('#Inventory').hide();
            $('#GLAccount').hide();
            $('#FixedAsset').hide();
            NProgress.start();
            refreshPriceFlexGrid();
        });

        $('#inventoryTabId').click(function () {
            $('#UnitConversion').hide();
            $('#Component').hide();
            $('#Price').hide();
            $('#Inventory').show();
            $('#GLAccount').hide();
            $('#FixedAsset').hide();
            refreshInventoryFlexGrid();
        });

        $('#glAccountTabId').click(function () {
            $('#UnitConversion').hide();
            $('#Component').hide();
            $('#Price').hide();
            $('#Inventory').hide();
            $('#GLAccount').show();
            $('#FixedAsset').hide();
        });

        $('#fixedAssetTabId').click(function () {
            $('#UnitConversion').hide();
            $('#Component').hide();
            $('#Price').hide();
            $('#Inventory').hide();
            $('#GLAccount').hide();
            $('#FixedAsset').show();
        });

        // ===========
        // Onload Page
        // ===========
        $(document).ready(function () {
            getArticleItemGroupForComboBox();
        });
    </script>
    <script type="text/javascript">
        var cboUserBranches = new wijmo.input.ComboBox('#cboUserBranches');
        function getUserBranches() {
            $("#loadingUserBranches").show();
            document.getElementById("loadingUserBranches").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#userBranchContent").hide();

            $('#userBranchesModal').modal({ show: true, backdrop: 'static' });

            document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
            $("#updateUserBranch").prop("disabled", false);
            $("#closeUserBranch").prop("disabled", false);

            var userBranchesObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/userBranch/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (userBranchesResults) {
                    if (userBranchesResults.length > 0) {
                        for (i = 0; i < userBranchesResults.length; i++) {
                            userBranchesObservableArray.push({
                                BranchId: userBranchesResults[i]["BranchId"],
                                Branch: userBranchesResults[i]["Branch"]
                            });
                        }
                    }

                    var currentBranch = "@ViewData["BranchId"]";
                    cboUserBranches.dispose();
                    cboUserBranches = new wijmo.input.ComboBox('#cboUserBranches', {
                        isEditable: false,
                        placeholder: "Select Branches",
                        itemsSource: userBranchesObservableArray,
                        displayMemberPath: "Branch",
                        selectedValuePath: "BranchId",
                        selectedValue: currentBranch
                    });

                    setTimeout(function () {
                        $("#loadingUserBranches").hide();
                        $("#userBranchContent").show();
                    }, 500)
                }
            });
        }

        function updateUserBranchOnclick() {
            document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Updating";
            $("#updateUserBranch").prop("disabled", true);
            $("#closeUserBranch").prop("disabled", true);

            var userBranchObject = new Object();
            userBranchObject.BranchId = cboUserBranches.selectedValue;
            var userBranchData = JSON.stringify(userBranchObject);

            $.ajax({
                type: "PUT",
                url: '/api/userBranch/update',
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: userBranchData,
                statusCode: {
                    200: function () {
                        toastr.success("Update Successful");
                        window.setTimeout(function () {
                            location.reload()
                        }, 1000);
                    },
                    404: function () {
                        toastr.error("Not Found");
                        document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
                        $("#updateUserBranch").prop("disabled", false);
                        $("#closeUserBranch").prop("disabled", false);
                    },
                    500: function () {
                        toastr.error("Bad Request");
                        document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
                        $("#updateUserBranch").prop("disabled", false);
                        $("#closeUserBranch").prop("disabled", false);
                    }
                }
            });
        }
    </script>
    <script type="text/javascript">
        var slideLeft = new Menu({
            wrapper: '#o-wrapper',
            type: 'slide-left',
            menuOpenerClass: '.c-button',
            maskId: '#c-mask'
        });

        var slideLeftBtn = document.querySelector('#c-button--slide-left');

        slideLeftBtn.addEventListener('click', function (e) {
            e.preventDefault;
            slideLeft.open();
        });
    </script>

</body>
</html>