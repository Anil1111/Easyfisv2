@model easyfis.Entities.MstUserForm
@{
    // =====================
    // User Rights Variables
    // =====================
    var canAdd = Model.CanAdd;
    var canEdit = Model.CanEdit;
    var canDelete = Model.CanDelete;
    var canLock = Model.CanLock;
    var canUnlock = Model.CanUnlock;
    var canPrint = Model.CanPrint;
}
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">
    <link rel="shortcut icon" href="~/Images/icon/easyfislogomini.ico">
    <title>Item Detail</title>

    @Styles.Render("~/Content/Software-css")
</head>
<body>
    <div id="o-wrapper" class="o-wrapper">
        <main class="o-content">
            @Html.Partial("_SoftwareHeader")

            <section class="content-header">
                <div class="container">
                    <h3>
                        Item Detail
                    </h3>
                    <p>
                        <i class="fa fa-building-o fa-fw"></i> &nbsp; @ViewData["Company"] <br />
                        <i class="fa fa-home fa-fw"></i> &nbsp; <a href="#" onclick="getUserBranches()" style="color: white;">@ViewData["Branch"]</a>
                    </p>
                </div>
            </section>
            <section class="container">
                <div class="panel panel-default">

                    <!--
                        =======================================
                        Options: Lock, Unlock, and Close Button
                        =======================================
                    -->
                    <div class="panel-heading">
                        <div class="row">
                            <div class="col-md-2">
                                <button class="btn btn-primary" id="btnItemDetailSave" onclick="btnItemDetailSaveOnclick()"><i class="fa fa-save"></i> Save</button>
                            </div>
                            <div class="col-md-10" align="right">
                                @{
                                    if (canLock)
                                    {
                                        <button class="btn btn-primary" id="btnItemDetailLock" onclick="btnItemDetailLockOnclick()"><i class="fa fa-lock"></i> Lock</button>
                                    }
                                    if (canUnlock)
                                    {
                                        <button class="btn btn-primary" id="btnItemDetailUnlock" onclick="btnItemDetailUnlockOnclick()"><i class="fa fa-unlock"></i> Unlock</button>
                                    }
                                }
                                <button class="btn btn-danger" id="btnItemDetailClose" onclick="btnItemDetailCloseOnclick()"><i class=" fa fa-times"></i> Close</button>
                            </div>
                        </div>
                    </div>

                    <!--
                        ======================================
                        Details, Fields and Other Informations
                        ======================================
                    -->
                    <div class="panel-body">
                        <form class="form-horizontal" role="form">
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Code</label>
                                        <div class="col-sm-8">
                                            <input type="text" class="form-control requiredItem" id="inpItemDetailCode" placeholder="Code" disabled />
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Barcode</label>
                                        <div class="col-sm-8">
                                            <input type="text" class="form-control requiredItem" id="inpItemDetailManualCode" placeholder="Manual Code" />
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Item</label>
                                        <div class="col-sm-8">
                                            <input type="text" class="form-control requiredItem" id="inpItemDetailItem" placeholder="Item" />
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Item Group</label>
                                        <div class="col-sm-8">
                                            <div type="text" id="cboItemDetailItemGroup"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Category</label>
                                        <div class="col-sm-8">
                                            <input type="text" class="form-control requiredItem" id="inpItemDetailCategory" placeholder="Category" />
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Unit</label>
                                        <div class="col-sm-8">
                                            <div type="text" id="cboItemDetailUnit"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Price</label>
                                        <div class="col-sm-8">
                                            <input type="text" class="form-control numberField requiredItem" id="inpItemDetailPrice" placeholder="0.00" />
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Particulars</label>
                                        <div class="col-sm-8">
                                            <textarea rows="5" class="form-control textarea-custom requiredItem" id="inpItemDetailParticulars" placeholder="Particulars..."></textarea>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Input Tax:</label>
                                        <div class="col-sm-8">
                                            <div type="text" class="comboBox-wide" id="cboItemDetailInputTax"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Output Tax</label>
                                        <div class="col-sm-8">
                                            <div type="text" class="comboBox-wide" id="cboItemDetailOutputTax"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Withholding Tax</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboItemDetailWitholdingTax"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Is Inventory</label>
                                        <div class="col-sm-8">
                                            <input type="checkbox" id="inpItemDetailIsInventory" onchange="isInventoryOnChange(this)" />
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">SKU Code</label>
                                        <div class="col-sm-8">
                                            <input type="text" class="form-control requiredItem" id="inpItemDetailSKUCode" placeholder="SKU Code..." />
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Manual Cost</label>
                                        <div class="col-sm-8">
                                            <input type="text" class="form-control numberField requiredItem" id="inpItemDetailManualCost" placeholder="0.00" />
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Kitting</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboItemDetailKitting"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>

                <!--
                    ==============================================================
                    Unit Conversion, Price, Inventory, GL Account, and Fixed Asset
                    ==============================================================
                -->
                <ul class="nav nav-tabs " role="tablist" id="myTab">
                    <li role="presentation" class="active"><a data-toggle="tab" href="#UnitConversion" id="unitConversionTab">Unit Conversion</a></li>
                    <li role="presentation"><a data-toggle="tab" href="#Component" id="componentTab">Components</a></li>
                    <li role="presentation"><a data-toggle="tab" href="#Price" id="priceTab">Prices</a></li>
                    <li role="presentation"><a data-toggle="tab" href="#Inventory" id="inventoryTab">Inventory Entries</a></li>
                    <li role="presentation"><a data-toggle="tab" href="#GLAccount" id="GLAccountTab">GL Accounts</a></li>
                    <li role="presentation"><a data-toggle="tab" href="#FixedAsset" id="fixedAssetTab">Fixed Asset</a></li>
                    <li role="presentation"><a data-toggle="tab" href="#Consignment" id="consignmentTab">Consignment</a></li>
                </ul>
                <br />
                <div class="tab-content">

                    <!--
                        ============================
                        Tab Content: Unit Conversion
                        ============================
                    -->
                    <div id="UnitConversion" class="tab-pane active">
                        <div class="panel panel-default">

                            <!--
                                =======================
                                Unit Conversion: Filter
                                =======================
                            -->
                            <div class="panel-heading">
                                <table style="width: 100%" border="0">
                                    <tr>
                                        <td style="width: 49.5%">
                                            <div class="input-group">
                                                <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                                <input type="text" class="form-control" id="inpUnitConversionSearchFilter" placeholder="Search...">
                                            </div>
                                        </td>
                                        <td style="width: 1%"></td>
                                        <td style="width: 24%">
                                            <div class="input-group">
                                                <span class="input-group-addon"><b><i class="fa fa-table"></i></b></span>
                                                <div class="comboBox-wide" id="cboUnitConversionDisplayNumberOfRows"></div>
                                            </div>
                                        </td>
                                        <td style="width: 1%"></td>
                                        <td style="width: 24.5%" align="right">
                                            @{
                                                if (canAdd)
                                                {
                                                    <button class="btn btn-primary" id="btnUnitConversionAdd" onclick="btnUnitConversionAddOnclick()"><i class="fa fa-plus"></i> Add</button>
                                                }
                                            }
                                        </td>
                                    </tr>
                                </table>
                            </div>

                            <!--
                                ==========================
                                Unit Conversion: Flex Grid
                                ==========================
                            -->
                            <div class="panel-body">
                                <div id="unitConversionFlexGrid" class="grid"></div>
                            </div>

                            <!--
                                ===================================
                                Unit Conversion: Navigation Buttons
                                ===================================
                            -->
                            <div class="panel-footer">
                                <div class="row">
                                    <div class="btn-group col-md-7" id="unitConversionNavigationPageGrid">
                                        <button type="button" class="btn btn-default border-custom" id="btnUnitConversionMoveToFirstPageGrid">
                                            <span class="glyphicon glyphicon-fast-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" id="btnUnitConversionMoveToPreviousPageGrid">
                                            <span class="glyphicon glyphicon-step-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnUnitConversionCurrentPageGrid"></button>
                                        <button type="button" class="btn btn-default border-custom" id="btnUnitConversionMoveToNextPageGrid">
                                            <span class="glyphicon glyphicon-step-forward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" id="btnUnitConversionMoveToLastPageGrid">
                                            <span class="glyphicon glyphicon-fast-forward"></span>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!--
                        ===========================
                        Tab Content: Item Component
                        ===========================
                    -->
                    <div id="Component" class="tab-pane">

                        <!--
                            ======================
                            Item Component: Filter
                            ======================
                        -->
                        <div class="panel panel-default">
                            <div class="panel-heading">
                                <table style="width: 100%" border="0">
                                    <tr>
                                        <td style="width: 49.5%">
                                            <div class="input-group">
                                                <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                                <input type="text" class="form-control" id="inpComponentSearchFilter" placeholder="Search...">
                                            </div>
                                        </td>
                                        <td style="width: 1%"></td>
                                        <td style="width: 24%">
                                            <div class="input-group">
                                                <span class="input-group-addon"><b><i class="fa fa-table"></i></b></span>
                                                <div class="comboBox-wide" id="cboComponentDisplayNumberOfRows"></div>
                                            </div>
                                        </td>
                                        <td style="width: 1%"></td>
                                        <td style="width: 24.5%" align="right">
                                            @{
                                                if (canAdd)
                                                {
                                                    <button class="btn btn-primary" id="btnComponentAdd" onclick="btnComponentAddOnclick()"><i class="fa fa-plus"></i> Add</button>
                                                }
                                            }
                                        </td>
                                    </tr>
                                </table>
                            </div>

                            <!--
                                =========================
                                Item Component: Flex Grid
                                =========================
                            -->
                            <div class="panel-body">
                                <div id="componentFlexGrid" class="grid"></div>
                            </div>

                            <!--
                                ==================================
                                Item Component: Navigation Buttons
                                ==================================
                            -->
                            <div class="panel-footer">
                                <div class="row">
                                    <div class="btn-group col-md-7" id="componentNavigationPageGrid">
                                        <button type="button" class="btn btn-default border-custom" id="btnComponentMoveToFirstPageGrid">
                                            <span class="glyphicon glyphicon-fast-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" id="btnComponentMoveToPreviousPageGrid">
                                            <span class="glyphicon glyphicon-step-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnComponentCurrentPageGrid"></button>
                                        <button type="button" class="btn btn-default border-custom" id="btnComponentMoveToNextPageGrid">
                                            <span class="glyphicon glyphicon-step-forward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" id="btnComponentMoveToLastPageGrid">
                                            <span class="glyphicon glyphicon-fast-forward"></span>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!--
                            ======================
                            Item Component: Totals
                            ======================
                        -->
                        <div class="panel panel-default">
                            <div class="panel-body" style="padding-bottom: 0px;">
                                <div class="row">
                                    <div class="col-md-6"></div>
                                    <div class="col-md-6">
                                        <dl class="dl-horizontal">
                                            <dt>
                                                <b>Total Amount</b>
                                            </dt>
                                            <dd>
                                                <input type="text" class="form-control numberField" id="totalComponentAmount" placeholder="0.00" disabled />
                                            </dd>
                                        </dl>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!--
                        =======================
                        Tab Content: Item Price
                        =======================
                    -->
                    <div id="Price" class="tab-pane">
                        <div class="panel panel-default">

                            <!--
                                ==================
                                Item Price: Filter
                                ==================
                            -->
                            <div class="panel-heading">
                                <table style="width: 100%" border="0">
                                    <tr>
                                        <td style="width: 49.5%">
                                            <div class="input-group">
                                                <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                                <input type="text" class="form-control" id="inpPriceSearchFilter" placeholder="Search...">
                                            </div>
                                        </td>
                                        <td style="width: 1%"></td>
                                        <td style="width: 24%">
                                            <div class="input-group">
                                                <span class="input-group-addon"><b><i class="fa fa-table"></i></b></span>
                                                <div class="comboBox-wide" id="cboPriceDisplayNumberOfRows"></div>
                                            </div>
                                        </td>
                                        <td style="width: 1%"></td>
                                        <td style="width: 24.5%" align="right">
                                            @{
                                                if (canAdd)
                                                {
                                                    <button class="btn btn-primary" id="btnPriceAdd" onclick="btnPriceAddOnclick()"><i class="fa fa-plus"></i> Add</button>
                                                }
                                            }
                                        </td>
                                    </tr>
                                </table>
                            </div>

                            <!--
                                =====================
                                Item Price: Flex Grid
                                =====================
                            -->
                            <div class="panel-body">
                                <div id="priceFlexGrid" class="grid"></div>
                            </div>

                            <!--
                                ==============================
                                Item Price: Navigation Buttons
                                ==============================
                            -->
                            <div class="panel-footer">
                                <div class="row">
                                    <div class="btn-group col-md-7" id="priceNavigationPageGrid">
                                        <button type="button" class="btn btn-default border-custom" id="btnPriceMoveToFirstPageGrid">
                                            <span class="glyphicon glyphicon-fast-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" id="btnPriceMoveToPreviousPageGrid">
                                            <span class="glyphicon glyphicon-step-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnPriceCurrentPageGrid"></button>
                                        <button type="button" class="btn btn-default border-custom" id="btnPriceMoveToNextPageGrid">
                                            <span class="glyphicon glyphicon-step-forward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" id="btnPriceMoveToLastPageGrid">
                                            <span class="glyphicon glyphicon-fast-forward"></span>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!--
                        ======================
                        Tab Content: Inventory
                        ======================
                    -->
                    <div id="Inventory" class="tab-pane">
                        <div class="panel panel-default">

                            <!--
                                =================
                                Inventory: Filter
                                =================
                            -->
                            <div class="panel-heading">
                                <table style="width: 100%" border="0">
                                    <tr>
                                        <td style="width: 49.5%">
                                            <div class="input-group">
                                                <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                                <input type="text" class="form-control" id="inpInventorySearchFilter" placeholder="Search...">
                                            </div>
                                        </td>
                                        <td style="width: 1%"></td>
                                        <td style="width: 24%">
                                            <div class="input-group">
                                                <span class="input-group-addon"><b><i class="fa fa-table"></i></b></span>
                                                <div class="comboBox-wide" id="cboInventoryShowNumberOfRows"></div>
                                            </div>
                                        </td>
                                        <td style="width: 1%"></td>
                                        <td style="width: 24.5%" align="right"> </td>
                                    </tr>
                                </table>
                            </div>

                            <!--
                                ====================
                                Inventory: Flex Grid
                                ====================
                            -->
                            <div class="panel-body">
                                <div id="inventoryFlexGrid"></div>
                            </div>

                            <!--
                                =============================
                                Inventory: Navigation Buttons
                                =============================
                            -->
                            <div class="panel-footer">
                                <div class="row">
                                    <div class="btn-group col-md-7" id="inventoryNavigationPageGrid">
                                        <button type="button" class="btn btn-default border-custom" id="btnInventoryMoveToFirstPageGrid">
                                            <span class="glyphicon glyphicon-fast-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" id="btnInventoryMoveToPreviousPageGrid">
                                            <span class="glyphicon glyphicon-step-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnInventoryCurrentPageGrid"></button>
                                        <button type="button" class="btn btn-default border-custom" id="btnInventoryMoveToNextPageGrid">
                                            <span class="glyphicon glyphicon-step-forward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" id="btnInventoryMoveToLastPageGrid">
                                            <span class="glyphicon glyphicon-fast-forward"></span>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!--
                        =======================
                        Tab Content: GL Account
                        =======================
                    -->
                    <div id="GLAccount" class="tab-pane">
                        <div class="panel panel-default">
                            <div class="panel-body">
                                <form class="form-horizontal" role="form">
                                    <div class="row">
                                        <div class="col-md-6">
                                            <div class="form-group">
                                                <label class="control-label col-sm-4">Account</label>
                                                <div class="col-sm-8">
                                                    <table style="width: 100%" border="0">
                                                        <tr>
                                                            <td style="width: 30%">
                                                                <div id="cboItemDetailAccountCode"></div>
                                                            </td>
                                                            <td style="width: 1%"></td>
                                                            <td style="width: 69%">
                                                                <div id="cboItemDetailAccount"></div>
                                                            </td>
                                                        </tr>
                                                    </table>
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                <label class="control-label col-sm-4">Sales Account</label>
                                                <div class="col-sm-8">
                                                    <table style="width: 100%" border="0">
                                                        <tr>
                                                            <td style="width: 30%">
                                                                <div id="cboItemDetailSalesAccountCode"></div>
                                                            </td>
                                                            <td style="width: 1%"></td>
                                                            <td style="width: 69%">
                                                                <div id="cboItemDetailSalesAccount"></div>
                                                            </td>
                                                        </tr>
                                                    </table>
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                <label class="control-label col-sm-4">Cost Account</label>
                                                <div class="col-sm-8">
                                                    <table style="width: 100%" border="0">
                                                        <tr>
                                                            <td style="width: 30%">
                                                                <div id="cboItemDetailCostAccountCode"></div>
                                                            </td>
                                                            <td style="width: 1%"></td>
                                                            <td style="width: 69%">
                                                                <div id="cboItemDetailCostAccount"></div>
                                                            </td>
                                                        </tr>
                                                    </table>
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                <label class="control-label col-sm-4">Accum Dep Account</label>
                                                <div class="col-sm-8">
                                                    <table style="width: 100%" border="0">
                                                        <tr>
                                                            <td style="width: 30%">
                                                                <div id="cboItemDetailAccumDepAccountCode"></div>
                                                            </td>
                                                            <td style="width: 1%"></td>
                                                            <td style="width: 69%">
                                                                <div id="cboItemDetailAccumDepAccount"></div>
                                                            </td>
                                                        </tr>
                                                    </table>
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                <label class="control-label col-sm-4">Expense Account</label>
                                                <div class="col-sm-8">
                                                    <table style="width: 100%" border="0">
                                                        <tr>
                                                            <td style="width: 30%">
                                                                <div id="cboItemDetailExpenseAccountCode"></div>
                                                            </td>
                                                            <td style="width: 1%"></td>
                                                            <td style="width: 69%">
                                                                <div id="cboItemDetailExpenseAccount"></div>
                                                            </td>
                                                        </tr>
                                                    </table>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-md-6"></div>
                                    </div>
                                </form>
                            </div>
                        </div>
                    </div>

                    <!--
                        ========================
                        Tab Content: Fixed Asset
                        ========================
                    -->
                    <div id="FixedAsset" class="tab-pane">
                        <div class="panel panel-default">
                            <div class="panel-body">
                                <form class="form-horizontal" role="form">
                                    <div class="row">
                                        <div class="col-md-6">
                                            <div class="form-group">
                                                <label class="control-label col-sm-4">Date Acquired</label>
                                                <div class="col-sm-8">
                                                    <div class="comboBox-wide" id="cboItemDetailDateAcquired"></div>
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                <label class="control-label col-sm-4">Useful Life (Years)</label>
                                                <div class="col-sm-8">
                                                    <input type="text" class="form-control numberField" id="inpItemDetailUsefulLife" placeholder="0.00" />
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                <label class="control-label col-sm-4">Salvage Value</label>
                                                <div class="col-sm-8">
                                                    <input type="text" class="form-control numberField" id="inpItemDetailsalvageValue" placeholder="0.00" />
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-md-6"></div>
                                    </div>
                                </form>
                            </div>
                        </div>
                    </div>

                    <!--
                        ========================
                        Tab Content: Consignment
                        ========================
                    -->
                    <div id="Consignment" class="tab-pane">
                        <div class="panel panel-default">
                            <div class="panel-body">
                                <form class="form-horizontal" role="form">
                                    <div class="row">
                                        <div class="col-md-6">
                                            <div class="form-group">
                                                <label class="control-label col-sm-4">Default Supplier</label>
                                                <div class="col-sm-8">
                                                    <div class="comboBox-wide" id="cboItemDetailDefaultSupplier"></div>
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                <label class="control-label col-sm-4">Is Consignment</label>
                                                <div class="col-sm-8">
                                                    <input type="checkbox" id="inpItemDetailIsConsignment" onchange="isConsignmentOnchange(this)" />
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                <label class="control-label col-sm-4">Cost Percentage (%)</label>
                                                <div class="col-sm-8">
                                                    <input type="text" class="form-control requiredItem numberField" id="inpItemDetailConsignmentCostPercentage" placeholder="0.00" />
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                <label class="control-label col-sm-4">Cost Value</label>
                                                <div class="col-sm-8">
                                                    <input type="text" class="form-control requiredItem numberField" id="inpItemDetailConsignmentCostValue" placeholder="0.00" />
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-md-6"></div>
                                    </div>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>

                <!--
                    ==========
                    User Stamp
                    ==========
                -->
                <div class="panel panel-default">
                    <div class="panel-heading">
                        User stamp
                    </div>
                    <div class="panel-body">
                        <div class="row">
                            <div class="col-md-6">
                                <p>Created by:</p>
                                <div style="padding-left: 10px;">
                                    <i class="fa fa-key fa-fw"></i> <label id="createdBy">NA</label>
                                    <br />
                                    <small><i class="fa fa-calendar fa-fw"></i> &nbsp;<span id="createdDate">mm/dd/yyyy</span></small>
                                </div>
                                <br />
                            </div>
                            <div class="col-md-6">
                                <p>Updated by:</p>
                                <div style="padding-left: 10px;">
                                    <i class="fa fa-key fa-fw"></i> <label id="updatedBy">NA</label>
                                    <br />
                                    <small><i class="fa fa-calendar fa-fw"></i> &nbsp;<span id="updatedDate">mm/dd/yyyy</span></small>
                                </div>
                                <br />
                            </div>
                        </div>
                    </div>
                </div>
            </section>

            @Html.Partial("_SoftwareFooter")
        </main>
    </div>
    <div id="c-mask" class="c-mask"></div>

    <!--
        ==============================
         Unit Conversion: Detail Modal
        ==============================
    -->
    <div class="modal fade" id="unitConversionModal" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="unitConversionModalTitle">Unit Conversion</h4>
                </div>
                <div class="modal-body">
                    <center>
                        <span id="unitConversionLoading"></span>
                    </center>
                    <div id="unitConversionContent">
                        <dl class="dl-horizontal">
                            <dt>Multiplier </dt>
                            <dd>
                                <input type="text" class="form-control numberField requiredUnitConversion" id="inpUnitConversionMultiplier" placeholder="0.00" />
                            </dd>
                            <dt>Unit</dt>
                            <dd>
                                <div class="comboBox-wide" id="cboUnitConversionUnit"></div>
                            </dd>
                            <dt>Base Unit</dt>
                            <dd>
                                <div class="comboBox-wide" id="cboUnitConversionBaseUnit"></div>
                            </dd>
                            <dt>Count Unit</dt>
                            <dd>
                                <input type="checkbox" id="inpUnitConversionCountUnit" />
                            </dd>
                        </dl>
                    </div>
                </div>
                <div class="modal-footer">
                    <button id="btnUnitConversionSave" class="btn btn-primary" onclick="btnUnitConversionSaveOnclick()"><i class="fa fa-save"></i> Save</button>
                    <button id="btnUnitConversionCloseModal" class="btn btn-danger" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!--
        ==============================
         Unit Conversion: Delete Modal
        ==============================
    -->
    <div class="modal fade" id="unitConversionDeleteModal" role="dialog">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Delete</h4>
                </div>
                <div class="modal-body">
                    Delete Unit Conversion?
                </div>
                <div class="modal-footer">
                    <button id="btnUnitConversionConfirmDelete" class="btn btn-danger" onclick="btnUnitConversionConfirmDeleteOnclick()"><i class="fa fa-trash"></i> Delete</button>
                    <button id="btnUnitConversionConfirmDeleteCloseModal" class="btn btn-primary" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <!--
        =============================
         Item Component: Detail Modal
        =============================
    -->
    <div class="modal fade" id="componentModal" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="componentModalTitle">Component</h4>
                </div>
                <div class="modal-body">
                    <center>
                        <span id="componentLoading"></span>
                    </center>
                    <div id="componentContent">
                        <dl class="dl-horizontal">
                            <dt>Component</dt>
                            <dd>
                                <table style="width: 100%" border="0">
                                    <tr>
                                        <td style="width: 30%">
                                            <div id="cboComponentItemCode"></div>
                                        </td>
                                        <td style="width: 1%"></td>
                                        <td style="width: 69%">
                                            <div id="cboComponentItem"></div>
                                        </td>
                                    </tr>
                                </table>
                            </dd>
                            <dt>Quantity</dt>
                            <dd>
                                <input type="text" class="form-control numberField requiredComponent" id="inpComponentQuantity" placeholder="0.00" />
                            </dd>
                            <dt>Unit</dt>
                            <dd>
                                <div id="cboComponentUnit"></div>
                            </dd>
                            <dt>Cost</dt>
                            <dd>
                                <input type="text" class="form-control numberField" id="inpComponentCost" placeholder="0.00" disabled />
                            </dd>
                            <dt>Amount</dt>
                            <dd>
                                <input type="text" class="form-control numberField" id="inpComponentAmount" placeholder="0.00" disabled />
                            </dd>
                            <dt>Particulars</dt>
                            <dd>
                                <textarea rows="5" class="form-control textarea-custom requiredComponent" id="inpComponentParticulars" placeholder="Particulars..."></textarea>
                            </dd>
                        </dl>
                    </div>
                </div>
                <div class="modal-footer">
                    <button id="btnComponentSave" class="btn btn-primary" onclick="btnComponentSaveOnclick()"><i class="fa fa-save"></i> Save</button>
                    <button id="btnComponentCloseModal" class="btn btn-danger" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!--
        =============================
         Item Component: Delete Modal
        =============================
    -->
    <div class="modal fade" id="componentDeleteModal" role="dialog">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Delete</h4>
                </div>
                <div class="modal-body">
                    Delete Component?
                </div>
                <div class="modal-footer">
                    <button id="btnComponentConfirmDelete" class="btn btn-danger" onclick="btnComponentConfirmDeleteOnclick()"><i class="fa fa-trash"></i> Delete</button>
                    <button id="btnComponentConfirmDeleteCloseModal" class="btn btn-primary" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <!--
        =========================
         Item Price: Detail Modal
        =========================
    -->
    <div class="modal fade" id="priceModal" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="priceModalTitle">Price</h4>
                </div>
                <div class="modal-body">
                    <center>
                        <span id="priceLoading"></span>
                    </center>
                    <div id="priceContent">
                        <dl class="dl-horizontal">
                            <dt>Description</dt>
                            <dd>
                                <input type="text" class="form-control requiredPrice" id="inpPriceDescription" placeholder="Price Description" />
                            </dd>
                            <dt>Price</dt>
                            <dd>
                                <input type="text" class="form-control numberField requiredPrice" id="inpPricePrice" placeholder="0.00" />
                            </dd>
                            <dt>Remarks</dt>
                            <dd>
                                <textarea rows="5" class="form-control textarea-custom requiredPrice" id="inpPriceRemarks" placeholder="Remarks"></textarea>
                            </dd>
                        </dl>
                    </div>
                </div>
                <div class="modal-footer">
                    <button id="btnPriceSave" class="btn btn-primary" onclick="btnPriceSaveOnclick()"><i class="fa fa-save"></i> Save</button>
                    <button id="btnPriceCloseModal" class="btn btn-danger" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!--
        =========================
         Item Price: Delete Modal
        =========================
    -->
    <div class="modal fade" id="priceDeleteModal" role="dialog">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Delete</h4>
                </div>
                <div class="modal-body">
                    Delete Price?
                </div>
                <div class="modal-footer">
                    <button id="btnPriceConfirmDelete" class="btn btn-danger" onclick="btnPriceConfirmDeleteOnclick()"><i class="fa fa-trash"></i> Delete</button>
                    <button id="btnPriceConfirmDeleteCloseModal" class="btn btn-primary" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>

    @Scripts.Render("~/Scripts/Software-js")
    <script type="text/javascript">
        // =================================
        // Item Detail Combo Data and Fields
        // =================================
        var cboItemDetailItemGroup = new wijmo.input.ComboBox('#cboItemDetailItemGroup');
        var cboItemDetailUnit = new wijmo.input.ComboBox('#cboItemDetailUnit');
        var isCboItemDetailUnitSelected = false;
        var cboItemDetailAccountCode = new wijmo.input.ComboBox('#cboItemDetailAccountCode');
        var cboItemDetailAccount = new wijmo.input.ComboBox('#cboItemDetailAccount');
        var cboItemDetailSalesAccountCode = new wijmo.input.ComboBox('#cboItemDetailSalesAccountCode');
        var cboItemDetailSalesAccount = new wijmo.input.ComboBox('#cboItemDetailSalesAccount');
        var cboItemDetailCostAccountCode = new wijmo.input.ComboBox('#cboItemDetailCostAccountCode');
        var cboItemDetailCostAccount = new wijmo.input.ComboBox('#cboItemDetailCostAccount');
        var cboItemDetailAccumDepAccountCode = new wijmo.input.ComboBox('#cboItemDetailAccumDepAccountCode');
        var cboItemDetailAccumDepAccount = new wijmo.input.ComboBox('#cboItemDetailAccumDepAccount');
        var cboItemDetailExpenseAccountCode = new wijmo.input.ComboBox('#cboItemDetailExpenseAccountCode');
        var cboItemDetailExpenseAccount = new wijmo.input.ComboBox('#cboItemDetailExpenseAccount');
        var cboItemDetailInputTax = new wijmo.input.ComboBox('#cboItemDetailInputTax');
        var cboItemDetailOutputTax = new wijmo.input.ComboBox('#cboItemDetailOutputTax');
        var cboItemDetailWitholdingTax = new wijmo.input.ComboBox('#cboItemDetailWitholdingTax');
        var cboItemDetailKitting = new wijmo.input.ComboBox('#cboItemDetailKitting');
        var cboItemDetailDefaultSupplier = new wijmo.input.ComboBox('#cboItemDetailDefaultSupplier');
        var cboItemDetailDateAcquired = new wijmo.input.InputDate('#cboItemDetailDateAcquired');
        var isLocked = false;

        // =================================================================
        // Unit Conversion Collection View, Flex Grid and Navigation Buttons
        // =================================================================
        var unitConversionCollectionView;
        var unitConversionFlexGrid;
        var cboUnitConversionDisplayNumberOfRows = new wijmo.input.ComboBox('#cboUnitConversionDisplayNumberOfRows');
        var btnUnitConversionMoveToFirstPageGrid = document.getElementById('btnUnitConversionMoveToFirstPageGrid');
        var btnUnitConversionMoveToPreviousPageGrid = document.getElementById('btnUnitConversionMoveToPreviousPageGrid');
        var btnUnitConversionMoveToNextPageGrid = document.getElementById('btnUnitConversionMoveToNextPageGrid');
        var btnUnitConversionMoveToLastPageGrid = document.getElementById('btnUnitConversionMoveToLastPageGrid');
        var btnUnitConversionCurrentPageGrid = document.getElementById('btnUnitConversionCurrentPageGrid');

        // =====================================
        // Unit Conversion Combo Data and Fields
        // =====================================
        var unitConversionId = 0;
        var cboUnitConversionUnit = new wijmo.input.ComboBox('#cboUnitConversionUnit');
        var cboUnitConversionBaseUnit = new wijmo.input.ComboBox('#cboUnitConversionBaseUnit');

        // ===========================================================
        // Component Collection View, Flex Grid and Navigation Buttons
        // ===========================================================
        var componentCollectionView;
        var componentFlexGrid;
        var cboComponentDisplayNumberOfRows = new wijmo.input.ComboBox('#cboComponentDisplayNumberOfRows');
        var btnComponentMoveToFirstPageGrid = document.getElementById('btnComponentMoveToFirstPageGrid');
        var btnComponentMoveToPreviousPageGrid = document.getElementById('btnComponentMoveToPreviousPageGrid');
        var btnComponentMoveToNextPageGrid = document.getElementById('btnComponentMoveToNextPageGrid');
        var btnComponentMoveToLastPageGrid = document.getElementById('btnComponentMoveToLastPageGrid');
        var btnComponentCurrentPageGrid = document.getElementById('btnComponentCurrentPageGrid');

        // ===============================
        // Component Combo Data and Fields
        // ===============================
        var componentId = 0;
        var cboComponentItemCode = new wijmo.input.ComboBox('#cboComponentItemCode');
        var cboComponentItem = new wijmo.input.ComboBox('#cboComponentItem');
        var cboComponentUnit = new wijmo.input.ComboBox('#cboComponentUnit');

        // =======================================================
        // Price Collection View, Flex Grid and Navigation Buttons
        // =======================================================
        var priceCollectionView;
        var priceFlexGrid;
        var cboPriceDisplayNumberOfRows = new wijmo.input.ComboBox('#cboPriceDisplayNumberOfRows');
        var btnPriceMoveToFirstPageGrid = document.getElementById('btnPriceMoveToFirstPageGrid');
        var btnPriceMoveToPreviousPageGrid = document.getElementById('btnPriceMoveToPreviousPageGrid');
        var btnPriceMoveToNextPageGrid = document.getElementById('btnPriceMoveToNextPageGrid');
        var btnPriceMoveToLastPageGrid = document.getElementById('btnPriceMoveToLastPageGrid');
        var btnPriceCurrentPageGrid = document.getElementById('btnPriceCurrentPageGrid');

        // ===========================
        // Price Combo Data and Fields
        // ===========================
        var priceId = 0;

        // ===========================================================
        // Inventory Collection View, Flex Grid and Navigation Buttons
        // ===========================================================
        var inventoryCollectionView;
        var inventoryFlexGrid;
        var cboInventoryShowNumberOfRows = new wijmo.input.ComboBox('#cboInventoryShowNumberOfRows');
        var btnInventoryMoveToFirstPageGrid = document.getElementById('btnInventoryMoveToFirstPageGrid');
        var btnInventoryMoveToPreviousPageGrid = document.getElementById('btnInventoryMoveToPreviousPageGrid');
        var btnInventoryMoveToNextPageGrid = document.getElementById('btnInventoryMoveToNextPageGrid');
        var btnInventoryMoveToLastPageGrid = document.getElementById('btnInventoryMoveToLastPageGrid');
        var btnInventoryCurrentPageGrid = document.getElementById('btnInventoryCurrentPageGrid');

        // =======================
        // Get URL Parameter Value
        // =======================
        function getURLParameterValue(name) {
            name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");

            var regexS = "[\\?&]" + name + "=([^&#]*)";
            var regex = new RegExp(regexS);

            var results = regex.exec(window.location.href);
            if (results == null) {
                return "";
            } else {
                return results[1];
            }
        }

        // ===================================
        // Create Item Detail Combo Item Group
        // ===================================
        function createCboItemDetailItemGroup() {
            var itemGroupsObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/item/dropdown/list/itemGroup',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            itemGroupsObservableArray.push({
                                Id: results[i]["Id"],
                                ArticleGroup: results[i]["ArticleGroup"],
                                AccountId: results[i]["AccountId"],
                                SalesAccountId: results[i]["SalesAccountId"],
                                CostAccountId: results[i]["CostAccountId"],
                                AssetAccountId: results[i]["AssetAccountId"],
                                ExpenseAccountId: results[i]["ExpenseAccountId"]
                            });
                        }
                    }

                    cboItemDetailItemGroup.dispose();
                    cboItemDetailItemGroup = new wijmo.input.ComboBox('#cboItemDetailItemGroup', {
                        isEditable: false,
                        itemsSource: itemGroupsObservableArray,
                        displayMemberPath: "ArticleGroup",
                        selectedValuePath: "Id",
                        onSelectedIndexChanged: function () {
                            cboItemDetailAccountCode.selectedValue = this.selectedItem["AccountId"];
                            cboItemDetailAccount.selectedValue = this.selectedItem["AccountId"];
                            cboItemDetailSalesAccountCode.selectedValue = this.selectedItem["SalesAccountId"];
                            cboItemDetailSalesAccount.selectedValue = this.selectedItem["SalesAccountId"];
                            cboItemDetailCostAccountCode.selectedValue = this.selectedItem["CostAccountId"];
                            cboItemDetailCostAccount.selectedValue = this.selectedItem["CostAccountId"];
                            cboItemDetailAccumDepAccountCode.selectedValue = this.selectedItem["AssetAccountId"];
                            cboItemDetailAccumDepAccount.selectedValue = this.selectedItem["AssetAccountId"];
                            cboItemDetailExpenseAccountCode.selectedValue = this.selectedItem["ExpenseAccountId"];
                            cboItemDetailExpenseAccount.selectedValue = this.selectedItem["ExpenseAccountId"];
                        }
                    });

                    createCboItemDetailAccount();
                }
            });
        }

        // ================================
        // Create Item Detail Combo Account
        // ================================
        function createCboItemDetailAccount() {
            var accountsObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/item/dropdown/list/itemGroup/accounts',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            accountsObservableArray.push({
                                Id: results[i]["Id"],
                                AccountCode: results[i]["AccountCode"],
                                Account: results[i]["Account"]
                            });
                        }
                    }

                    // =============
                    // Account Codes
                    // =============
                    cboItemDetailAccountCode.dispose();
                    cboItemDetailAccountCode = new wijmo.input.ComboBox('#cboItemDetailAccountCode', {
                        disabled: true,
                        isEditable: false,
                        itemsSource: accountsObservableArray,
                        displayMemberPath: "AccountCode",
                        selectedValuePath: "Id"
                    });

                    cboItemDetailSalesAccountCode.dispose();
                    cboItemDetailSalesAccountCode = new wijmo.input.ComboBox('#cboItemDetailSalesAccountCode', {
                        disabled: true,
                        isEditable: false,
                        itemsSource: accountsObservableArray,
                        displayMemberPath: "AccountCode",
                        selectedValuePath: "Id"
                    });

                    cboItemDetailCostAccountCode.dispose();
                    cboItemDetailCostAccountCode = new wijmo.input.ComboBox('#cboItemDetailCostAccountCode', {
                        disabled: true,
                        isEditable: false,
                        itemsSource: accountsObservableArray,
                        displayMemberPath: "AccountCode",
                        selectedValuePath: "Id"
                    });

                    cboItemDetailAccumDepAccountCode.dispose();
                    cboItemDetailAccumDepAccountCode = new wijmo.input.ComboBox('#cboItemDetailAccumDepAccountCode', {
                        disabled: true,
                        isEditable: false,
                        itemsSource: accountsObservableArray,
                        displayMemberPath: "AccountCode",
                        selectedValuePath: "Id"
                    });

                    cboItemDetailExpenseAccountCode.dispose();
                    cboItemDetailExpenseAccountCode = new wijmo.input.ComboBox('#cboItemDetailExpenseAccountCode', {
                        disabled: true,
                        isEditable: false,
                        itemsSource: accountsObservableArray,
                        displayMemberPath: "AccountCode",
                        selectedValuePath: "Id"
                    });

                    // =======
                    // Account
                    // =======
                    cboItemDetailAccount.dispose();
                    cboItemDetailAccount = new wijmo.input.ComboBox('#cboItemDetailAccount', {
                        disabled: true,
                        isEditable: false,
                        itemsSource: accountsObservableArray,
                        displayMemberPath: "Account",
                        selectedValuePath: "Id"
                    });

                    cboItemDetailSalesAccount.dispose();
                    cboItemDetailSalesAccount = new wijmo.input.ComboBox('#cboItemDetailSalesAccount', {
                        disabled: true,
                        isEditable: false,
                        itemsSource: accountsObservableArray,
                        displayMemberPath: "Account",
                        selectedValuePath: "Id"
                    });

                    cboItemDetailCostAccount.dispose();
                    cboItemDetailCostAccount = new wijmo.input.ComboBox('#cboItemDetailCostAccount', {
                        disabled: true,
                        isEditable: false,
                        itemsSource: accountsObservableArray,
                        displayMemberPath: "Account",
                        selectedValuePath: "Id"
                    });

                    cboItemDetailAccumDepAccount.dispose();
                    cboItemDetailAccumDepAccount = new wijmo.input.ComboBox('#cboItemDetailAccumDepAccount', {
                        disabled: true,
                        isEditable: false,
                        itemsSource: accountsObservableArray,
                        displayMemberPath: "Account",
                        selectedValuePath: "Id"
                    });

                    cboItemDetailExpenseAccount.dispose();
                    cboItemDetailExpenseAccount = new wijmo.input.ComboBox('#cboItemDetailExpenseAccount', {
                        disabled: true,
                        isEditable: false,
                        itemsSource: accountsObservableArray,
                        displayMemberPath: "Account",
                        selectedValuePath: "Id"
                    });

                    createCboItemDetailUnit();
                }
            });
        }

        // =============================
        // Create Item Detail Combo Unit
        // =============================
        function createCboItemDetailUnit() {
            var unitsObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/item/dropdown/list/unit',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            unitsObservableArray.push({
                                Id: results[i]["Id"],
                                Unit: results[i]["Unit"]
                            });
                        }
                    }

                    cboItemDetailUnit.dispose();
                    cboItemDetailUnit = new wijmo.input.ComboBox('#cboItemDetailUnit', {
                        isEditable: false,
                        itemsSource: unitsObservableArray,
                        displayMemberPath: "Unit",
                        selectedValuePath: "Id",
                        onSelectedIndexChanged: function () {
                            if (isCboItemDetailUnitSelected) {
                                refresUnitConversionFlexGrid();
                            } else {
                                isCboItemDetailUnitSelected = true;
                            }
                        }
                    });

                    createCboItemDetailTaxType();
                }
            });
        }

        // =================================
        // Create Item Detail Combo Tax Type
        // =================================
        function createCboItemDetailTaxType() {
            var taxTypesObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/item/dropdown/list/taxType',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            taxTypesObservableArray.push({
                                Id: results[i]["Id"],
                                TaxType: results[i]["TaxType"]
                            });
                        }
                    }

                    cboItemDetailInputTax.dispose();
                    cboItemDetailInputTax = new wijmo.input.ComboBox('#cboItemDetailInputTax', {
                        isEditable: false,
                        itemsSource: taxTypesObservableArray,
                        displayMemberPath: "TaxType",
                        selectedValuePath: "Id"
                    });

                    cboItemDetailOutputTax.dispose();
                    cboItemDetailOutputTax = new wijmo.input.ComboBox('#cboItemDetailOutputTax', {
                        isEditable: false,
                        itemsSource: taxTypesObservableArray,
                        displayMemberPath: "TaxType",
                        selectedValuePath: "Id"
                    });

                    cboItemDetailWitholdingTax.dispose();
                    cboItemDetailWitholdingTax = new wijmo.input.ComboBox('#cboItemDetailWitholdingTax', {
                        isEditable: false,
                        itemsSource: taxTypesObservableArray,
                        displayMemberPath: "TaxType",
                        selectedValuePath: "Id"
                    });

                    createCboItemDetailKitting();
                }
            });
        }

        // ================================
        // Create Item Detail Combo Kitting
        // ================================
        function createCboItemDetailKitting() {
            var kittingItemSource = ["None", "Component", "Package"];
            cboItemDetailKitting.dispose();
            cboItemDetailKitting = new wijmo.input.ComboBox('#cboItemDetailKitting', {
                isEditable: false,
                itemsSource: kittingItemSource
            });

            createCboItemDetailSupplier();
        }

        // =================================
        // Create Item Detail Combo Supplier
        // =================================
        function createCboItemDetailSupplier() {
            var supplierObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/item/dropdown/list/supplier',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            supplierObservableArray.push({
                                Id: results[i]["Id"],
                                Article: results[i]["Article"]
                            });
                        }
                    }

                    cboItemDetailDefaultSupplier.dispose();
                    cboItemDetailDefaultSupplier = new wijmo.input.ComboBox('#cboItemDetailDefaultSupplier', {
                        isEditable: false,
                        itemsSource: supplierObservableArray,
                        displayMemberPath: "Article",
                        selectedValuePath: "Id",
                        required: false
                    });

                    getItemDetailData();
                }
            });
        }

        // =========================
        // Inventory On Change Event
        // =========================
        function isInventoryOnChange(isInventoryCheckboxElement) {
            if (!isInventoryCheckboxElement.checked) {
                document.getElementById('inpItemDetailIsConsignment').checked = false;
            }
        }

        // ===========================
        // Consignment On Change Event
        // ===========================
        function isConsignmentOnchange(isConsinmentCheckboxElement) {
            if (isConsinmentCheckboxElement.checked) {
                document.getElementById('inpItemDetailIsInventory').checked = true;
            }
        }

        // ====================
        // Get Item Detail Data
        // ====================
        function getItemDetailData() {
            NProgress.start();

            if (document.location.search.length > 0) {
                $.ajax({
                    url: '/api/item/detail/' + getURLParameterValue("id"),
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    success: function (results) {
                        if (results != null) {
                            document.getElementById('inpItemDetailCode').value = results.ArticleCode;
                            document.getElementById('inpItemDetailManualCode').value = results.ManualArticleCode;
                            document.getElementById('inpItemDetailItem').value = results.Article;
                            cboItemDetailItemGroup.selectedValue = results.ArticleGroupId;
                            cboItemDetailAccountCode.selectedValue = results.AccountId;
                            cboItemDetailAccount.selectedValue = results.AccountId;
                            cboItemDetailSalesAccountCode.selectedValue = results.SalesAccountId;
                            cboItemDetailSalesAccount.selectedValue = results.SalesAccountId;
                            cboItemDetailCostAccountCode.selectedValue = results.CostAccountId;
                            cboItemDetailCostAccount.selectedValue = results.CostAccountId;
                            cboItemDetailAccumDepAccountCode.selectedValue = results.AssetAccountId;
                            cboItemDetailAccumDepAccount.selectedValue = results.AssetAccountId;
                            cboItemDetailExpenseAccountCode.selectedValue = results.ExpenseAccountId;
                            cboItemDetailExpenseAccount.selectedValue = results.ExpenseAccountId;
                            document.getElementById('inpItemDetailCategory').value = results.Category;
                            cboItemDetailUnit.selectedValue = results.UnitId;
                            document.getElementById('inpItemDetailPrice').value = formatDecimalValues(results.Price);
                            document.getElementById('inpItemDetailParticulars').value = results.Particulars;
                            cboItemDetailInputTax.selectedValue = results.InputTaxId;
                            cboItemDetailOutputTax.selectedValue = results.OutputTaxId;
                            cboItemDetailWitholdingTax.selectedValue = results.WTaxTypeId;
                            document.getElementById('inpItemDetailIsInventory').checked = results.IsInventory;
                            document.getElementById('inpItemDetailIsConsignment').checked = results.IsConsignment;
                            document.getElementById('inpItemDetailConsignmentCostPercentage').value = formatDecimalValues(results.ConsignmentCostPercentage);
                            document.getElementById('inpItemDetailConsignmentCostValue').value = formatDecimalValues(results.ConsignmentCostValue);

                            if (results.Kitting == 0) {
                                cboItemDetailKitting.selectedValue = "None";
                            } else {
                                if (results.Kitting == 1) {
                                    cboItemDetailKitting.selectedValue = "Component";
                                } else {
                                    if (results.Kitting == 2) {
                                        cboItemDetailKitting.selectedValue = "Package";
                                    }
                                }
                            }

                            cboItemDetailDefaultSupplier.selectedValue = results.DefaultSupplierId;
                            document.getElementById('inpItemDetailSKUCode').value = results.ManualArticleOldCode;
                            document.getElementById('inpItemDetailManualCost').value = formatDecimalValues(results.Cost);

                            cboItemDetailDateAcquired.dispose();
                            cboItemDetailDateAcquired = new wijmo.input.InputDate('#cboItemDetailDateAcquired', {
                                format: 'MM-dd-yyyy',
                                value: new Date(results.DateAcquired)
                            });

                            document.getElementById('inpItemDetailUsefulLife').value = formatDecimalValues(results.UsefulLife);
                            document.getElementById('inpItemDetailsalvageValue').value = formatDecimalValues(results.SalvageValue);

                            document.getElementById('createdBy').innerHTML = results.CreatedBy;
                            document.getElementById('createdDate').innerHTML = results.CreatedDateTime;
                            document.getElementById('updatedBy').innerHTML = results.UpdatedBy;
                            document.getElementById('updatedDate').innerHTML = results.UpdatedDateTime;

                            if (results.IsLocked) {
                                document.getElementById('inpItemDetailManualCode').disabled = true;
                                document.getElementById('inpItemDetailItem').disabled = true;
                                cboItemDetailItemGroup.disabled = true;
                                document.getElementById('inpItemDetailCategory').disabled = true;
                                cboItemDetailUnit.disabled = true;
                                document.getElementById('inpItemDetailPrice').disabled = true;
                                document.getElementById('inpItemDetailParticulars').disabled = true;
                                cboItemDetailInputTax.disabled = true;
                                cboItemDetailOutputTax.disabled = true;
                                cboItemDetailWitholdingTax.disabled = true;
                                document.getElementById('inpItemDetailIsInventory').disabled = true;
                                document.getElementById('inpItemDetailSKUCode').disabled = true;
                                document.getElementById('inpItemDetailManualCost').disabled = true;
                                cboItemDetailKitting.disabled = true;
                                cboItemDetailDateAcquired.disabled = true;
                                document.getElementById('inpItemDetailUsefulLife').disabled = true;
                                document.getElementById('inpItemDetailsalvageValue').disabled = true;
                                cboItemDetailDefaultSupplier.disabled = true;
                                document.getElementById('inpItemDetailIsConsignment').disabled = true;
                                document.getElementById('inpItemDetailConsignmentCostPercentage').disabled = true;
                                document.getElementById('inpItemDetailConsignmentCostValue').disabled = true;

                                $('#btnItemDetailSave').prop('disabled', true);
                                $('#btnItemDetailLock').prop('disabled', true);
                                $('#btnUnitConversionAdd').prop('disabled', true);
                                $('#btnPriceAdd').prop('disabled', true);
                                $('#btnComponentAdd').prop('disabled', true);

                                isLocked = true;
                            } else {
                                $('#btnItemDetailUnlock').prop('disabled', true);
                            }
                        } else {
                            alert("No Data");
                            window.location = "/Software/Item";
                        }

                        createCboDisplayNumberOfRows();
                        createUnitConversionFlexGrid();
                        createComponentFlexGrid();
                        createPriceFlexGrid();
                        createInventoryFlexGrid();
                    }
                });
            } else {
                alert("No Id Parameter Value");
                window.location = "/Software/Item";
            }
        }

        // ================
        // Item Data Object
        // ================
        function itemDataObject() {
            var itemObject = new Object();
            itemObject.ArticleCode = document.getElementById('inpItemDetailCode').value;
            itemObject.ManualArticleCode = document.getElementById('inpItemDetailManualCode').value;
            itemObject.Article = document.getElementById('inpItemDetailItem').value;
            itemObject.Category = document.getElementById('inpItemDetailCategory').value;
            itemObject.ArticleGroupId = cboItemDetailItemGroup.selectedValue;
            itemObject.AccountId = cboItemDetailAccount.selectedValue;
            itemObject.SalesAccountId = cboItemDetailSalesAccount.selectedValue;
            itemObject.CostAccountId = cboItemDetailCostAccount.selectedValue;
            itemObject.AssetAccountId = cboItemDetailAccumDepAccount.selectedValue;
            itemObject.ExpenseAccountId = cboItemDetailExpenseAccount.selectedValue;
            itemObject.UnitId = cboItemDetailUnit.selectedValue;
            itemObject.InputTaxId = cboItemDetailInputTax.selectedValue;
            itemObject.OutputTaxId = cboItemDetailOutputTax.selectedValue;
            itemObject.WTaxTypeId = cboItemDetailWitholdingTax.selectedValue;
            itemObject.Price = document.getElementById('inpItemDetailPrice').value;
            itemObject.Cost = document.getElementById('inpItemDetailManualCost').value;
            itemObject.IsInventory = document.getElementById('inpItemDetailIsInventory').checked;
            itemObject.Particulars = document.getElementById('inpItemDetailParticulars').value;
            itemObject.DateAcquired = cboItemDetailDateAcquired.value.toLocaleDateString();
            itemObject.UsefulLife = document.getElementById('inpItemDetailUsefulLife').value;
            itemObject.SalvageValue = document.getElementById('inpItemDetailsalvageValue').value;
            itemObject.ManualArticleOldCode = document.getElementById('inpItemDetailSKUCode').value;
            itemObject.IsConsignment = document.getElementById('inpItemDetailIsConsignment').checked;
            itemObject.ConsignmentCostPercentage = document.getElementById('inpItemDetailConsignmentCostPercentage').value;
            itemObject.ConsignmentCostValue = document.getElementById('inpItemDetailConsignmentCostValue').value;

            if (cboItemDetailKitting.selectedValue == "None") {
                itemObject.Kitting = 0;
            } else {
                if (cboItemDetailKitting.selectedValue == "Component") {
                    itemObject.Kitting = 1;
                } else {
                    if (cboItemDetailKitting.selectedValue == "Package") {
                        itemObject.Kitting = 2;
                    }
                }
            }

            itemObject.DefaultSupplierId = cboItemDetailDefaultSupplier.selectedValue;
            var data = JSON.stringify(itemObject);
            return data;
        }

        // =========
        // Save Item
        // =========
        function btnItemDetailSaveOnclick() {
            if (itemEntryValidation()) {
                document.getElementById('btnItemDetailSave').innerHTML = "<i class='fa fa-save'></i> Saving...";
                $('#btnItemDetailSave').prop('disabled', true);
                $('#btnItemDetailLock').prop('disabled', true);
                $('#btnItemDetailUnlock').prop('disabled', true);
                $('#btnItemDetailClose').prop('disabled', true);

                $.ajax({
                    type: "PUT",
                    url: '/api/item/save/' + getURLParameterValue("id"),
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    data: itemDataObject(),
                    statusCode: {
                        200: function () {
                            toastr.success("Save Successful");
                            window.setTimeout(function () {
                                location.reload()
                            }, 1000);
                        },
                        404: function (message) {
                            toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                            document.getElementById('btnItemDetailSave').innerHTML = "<i class='fa fa-save'></i> Save";
                            $("#btnItemDetailSave").prop("disabled", false);

                            if (isLocked) {
                                $("#btnItemDetailUnlock").prop("disabled", false);
                            } else {
                                $("#btnItemDetailLock").prop("disabled", false);
                            }

                            $("#btnItemDetailClose").prop("disabled", false);
                        },
                        400: function (message) {
                            toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                            document.getElementById('btnItemDetailSave').innerHTML = "<i class='fa fa-save'></i> Save";
                            $("#btnItemDetailSave").prop("disabled", false);

                            if (isLocked) {
                                $("#btnItemDetailUnlock").prop("disabled", false);
                            } else {
                                $("#btnItemDetailLock").prop("disabled", false);
                            }

                            $("#btnItemDetailClose").prop("disabled", false);
                        },
                        500: function (message) {
                            toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                            document.getElementById('btnItemDetailSave').innerHTML = "<i class='fa fa-save'></i> Save";
                            $("#btnItemDetailSave").prop("disabled", false);

                            if (isLocked) {
                                $("#btnItemDetailUnlock").prop("disabled", false);
                            } else {
                                $("#btnItemDetailLock").prop("disabled", false);
                            }

                            $("#btnItemDetailClose").prop("disabled", false);
                        }
                    },
                });
            } else {
                toastr.error("Invalid Entry");
            }
        }

        // =========
        // Lock Item
        // =========
        function btnItemDetailLockOnclick() {
            if (itemEntryValidation()) {
                document.getElementById('btnItemDetailLock').innerHTML = "<i class='fa fa-lock'></i> Locking...";
                $('#btnItemDetailSave').prop('disabled', true);
                $('#btnItemDetailLock').prop('disabled', true);
                $('#btnItemDetailUnlock').prop('disabled', true);
                $('#btnItemDetailClose').prop('disabled', true);

                $.ajax({
                    type: "PUT",
                    url: '/api/item/lock/' + getURLParameterValue("id"),
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    data: itemDataObject(),
                    statusCode: {
                        200: function () {
                            toastr.success("Lock Successful");
                            window.setTimeout(function () {
                                location.reload()
                            }, 1000);
                        },
                        404: function (message) {
                            toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                            document.getElementById('btnItemDetailLock').innerHTML = "<i class='fa fa-lock'></i> Lock";
                            $('#btnItemDetailSave').prop('disabled', false);
                            $('#btnItemDetailLock').prop('disabled', false);
                            $('#btnItemDetailClose').prop('disabled', false);
                        },
                        400: function (message) {
                            toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                            document.getElementById('btnItemDetailLock').innerHTML = "<i class='fa fa-lock'></i> Lock";
                            $('#btnItemDetailSave').prop('disabled', false);
                            $('#btnItemDetailLock').prop('disabled', false);
                            $('#btnItemDetailClose').prop('disabled', false);
                        },
                        500: function (message) {
                            toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                            document.getElementById('btnItemDetailLock').innerHTML = "<i class='fa fa-lock'></i> Lock";
                            $('#btnItemDetailSave').prop('disabled', false);
                            $('#btnItemDetailLock').prop('disabled', false);
                            $('#btnItemDetailClose').prop('disabled', false);
                        }
                    },
                });
            } else {
                toastr.error("Invalid Entry");
            }
        }

        // ===========
        // Unlock Item
        // ===========
        function btnItemDetailUnlockOnclick() {
            document.getElementById('btnItemDetailUnlock').innerHTML = "<i class='fa fa-unlock'></i> Unlocking...";
            $('#btnItemDetailSave').prop('disabled', true);
            $('#btnItemDetailLock').prop('disabled', true);
            $('#btnItemDetailUnlock').prop('disabled', true);
            $('#btnItemDetailClose').prop('disabled', true);

            $.ajax({
                type: "PUT",
                url: '/api/item/unlock/' + getURLParameterValue("id"),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Unlock Successful");
                        window.setTimeout(function () {
                            location.reload()
                        }, 1000);
                    },
                    404: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                        document.getElementById('btnItemDetailUnlock').innerHTML = "<i class='fa fa-unlock'></i> Unlock";
                        $('#btnItemDetailSave').prop('disabled', false);
                        $('#btnItemDetailUnlock').prop('disabled', false);
                        $('#btnItemDetailClose').prop('disabled', false);
                    },
                    400: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                        document.getElementById('btnItemDetailUnlock').innerHTML = "<i class='fa fa-unlock'></i> Unlock";
                        $('#btnItemDetailSave').prop('disabled', false);
                        $('#btnItemDetailUnlock').prop('disabled', false);
                        $('#btnItemDetailClose').prop('disabled', false);
                    },
                    500: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                        document.getElementById('btnItemDetailUnlock').innerHTML = "<i class='fa fa-unlock'></i> Unlock";
                        $('#btnItemDetailSave').prop('disabled', false);
                        $('#btnItemDetailUnlock').prop('disabled', false);
                        $('#btnItemDetailClose').prop('disabled', false);
                    }
                }
            });
        }

        // ==========
        // Close Item
        // ==========
        function btnItemDetailCloseOnclick() {
            window.location = '/Software/Item';
        }

        // =====================
        // Item Entry Validation
        // =====================
        function itemEntryValidation() {
            var isValid = true;
            $('.requiredItem').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                } else {
                    $(this).css({
                        "border": "",
                    });
                }
            });
            return isValid;
        }

        // ========================
        // Get Unit Conversion Data
        // ========================
        function getUnitConversionData() {
            var unitConversionObservableArray = new wijmo.collections.ObservableArray;
            if (document.location.search.length > 0) {
                $.ajax({
                    url: '/api/unitConversion/list/' + getURLParameterValue("id"),
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    success: function (results) {
                        if (results.length > 0) {
                            var btnEditId = "<button class='btn btn-primary btn-xs btn-block' onclick='btnUnitConversionEditOnclick()'><i class='fa fa-edit'></i> Edit</button>";
                            var btnDeleteId = "<button class='btn btn-danger btn-xs btn-block' onclick='btnUnitConversionDeleteOnclick()'><i class='fa fa-trash'></i> Delete</button>";
                            if (isLocked) {
                                btnEditId = "<button class='btn btn-primary btn-xs btn-block' onclick='btnUnitConversionEditOnclick()' disabled><i class='fa fa-edit'></i> Edit</button>";
                                btnDeleteId = "<button class='btn btn-danger btn-xs btn-block' onclick='btnUnitConversionDeleteOnclick()' disabled><i class='fa fa-trash'></i> Delete</button>";
                            }

                            for (i = 0; i < results.length; i++) {
                                unitConversionObservableArray.push({
                                    EditId: btnEditId,
                                    DeleteId: btnDeleteId,
                                    Id: results[i]["Id"],
                                    Multiplier: results[i]["Multiplier"],
                                    MultiplierDisplay: parseFloat(results[i]["Multiplier"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                    UnitId: results[i]["UnitId"],
                                    Unit: results[i]["Unit"],
                                    Equals: "=",
                                    BaseUnit: cboItemDetailUnit.selectedItem["Unit"],
                                    IsCountUnit: results[i]["IsCountUnit"]
                                });
                            }
                        }

                        NProgress.done();
                    }
                });
            }

            return unitConversionObservableArray;
        }

        // ================================
        // Create Unit Conversion Flex Grid
        // ================================
        function createUnitConversionFlexGrid() {
            unitConversionCollectionView = new wijmo.collections.CollectionView(getUnitConversionData());
            unitConversionCollectionView.canFilter = true;
            unitConversionCollectionView.pageSize = cboUnitConversionDisplayNumberOfRows.selectedValue;

            var filterText = '';
            $('#inpUnitConversionSearchFilter').keyup(function () {
                filterText = this.value.toLowerCase();
                unitConversionCollectionView.refresh();
            });

            unitConversionCollectionView.filter = function (item) {
                return !filterText || (item.Unit.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.BaseUnit.toLowerCase().indexOf(filterText) > -1);
            }

            unitConversionCollectionView.collectionChanged.addHandler(function (sender, args) {
                updateUnitConversionNavigationButtons();
            });

            unitConversionFlexGrid = new wijmo.grid.FlexGrid('#unitConversionFlexGrid');
            unitConversionFlexGrid.initialize({
                columns: [
                    @{
                        if (canEdit)
                        {
                            <text>
                                {
                                    "header": "Edit",
                                    "binding": "EditId",
                                    "width": 70,
                                    "align": "center",
                                    "allowResizing": false,
                                    "allowSorting": false,
                                    "isContentHtml": true
                                },
                            </text>
                        }
                        if (canDelete)
                        {
                            <text>
                                {
                                    "header": "Delete",
                                    "binding": "DeleteId",
                                    "width": 70,
                                    "align": "center",
                                    "allowResizing": false,
                                    "allowSorting": false,
                                    "isContentHtml": true
                                },
                            </text>
                        }
                    }
                    {
                        "header": "Multiplier",
                        "binding": "MultiplierDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": "2*"
                    },
                    {
                        "header": "Unit",
                        "binding": "Unit",
                        "allowSorting": true,
                        "width": "3*"
                    },
                    {
                        "header": " ",
                        "binding": "Equals",
                        "allowSorting": true,
                        "align": "center",
                        "width": 50
                    },
                    {
                        "header": "Base Unit",
                        "binding": "BaseUnit",
                        "allowSorting": true,
                        "width": "3*"
                    },
                    {
                        "header": "C",
                        "binding": "IsCountUnit",
                        "allowSorting": true,
                        "width": 50
                    },
                ],
                autoGenerateColumns: false,
                itemsSource: unitConversionCollectionView,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            unitConversionFlexGrid.trackChanges = true;

            updateUnitConversionNavigationButtons();

            btnUnitConversionMoveToFirstPageGrid.addEventListener('click', function () {
                unitConversionCollectionView.moveToFirstPage();
                updateUnitConversionNavigationButtons();
            });

            btnUnitConversionMoveToPreviousPageGrid.addEventListener('click', function () {
                unitConversionCollectionView.moveToPreviousPage();
                updateUnitConversionNavigationButtons();
            });

            btnUnitConversionMoveToNextPageGrid.addEventListener('click', function () {
                unitConversionCollectionView.moveToNextPage();
                updateUnitConversionNavigationButtons();
            });

            btnUnitConversionMoveToLastPageGrid.addEventListener('click', function () {
                unitConversionCollectionView.moveToLastPage();
                updateUnitConversionNavigationButtons();
            });
        }

        // ========================================
        // Update Unit Conversion Navigation Button
        // ========================================
        function updateUnitConversionNavigationButtons() {
            if (unitConversionCollectionView.pageSize <= 0) {
                document.getElementById('unitConversionNavigationPageGrid').style.display = 'none';
                return;
            }
            document.getElementById('unitConversionNavigationPageGrid').style.display = 'block';
            if (unitConversionCollectionView.pageIndex === 0) {
                btnUnitConversionMoveToFirstPageGrid.setAttribute('disabled', 'disabled');
                btnUnitConversionMoveToPreviousPageGrid.setAttribute('disabled', 'disabled');
                btnUnitConversionMoveToNextPageGrid.removeAttribute('disabled');
                btnUnitConversionMoveToLastPageGrid.removeAttribute('disabled');
            } else if (unitConversionCollectionView.pageIndex === (unitConversionCollectionView.pageCount - 1)) {
                btnUnitConversionMoveToFirstPageGrid.removeAttribute('disabled');
                btnUnitConversionMoveToPreviousPageGrid.removeAttribute('disabled');
                btnUnitConversionMoveToLastPageGrid.setAttribute('disabled', 'disabled');
                btnUnitConversionMoveToNextPageGrid.setAttribute('disabled', 'disabled');
            } else {
                btnUnitConversionMoveToFirstPageGrid.removeAttribute('disabled');
                btnUnitConversionMoveToPreviousPageGrid.removeAttribute('disabled');
                btnUnitConversionMoveToNextPageGrid.removeAttribute('disabled');
                btnUnitConversionMoveToLastPageGrid.removeAttribute('disabled');
            }
            btnUnitConversionCurrentPageGrid.innerHTML = (unitConversionCollectionView.pageIndex + 1) + ' / ' + unitConversionCollectionView.pageCount;
        }

        // =================================
        // Refresh Unit Conversion Flex Grid
        // =================================
        function refresUnitConversionFlexGrid() {
            unitConversionCollectionView = new wijmo.collections.CollectionView(getUnitConversionData());
            unitConversionCollectionView.canFilter = true;
            unitConversionCollectionView.pageSize = cboUnitConversionDisplayNumberOfRows.selectedValue;

            var filterText = '';
            $('#inpUnitConversionSearchFilter').keyup(function () {
                filterText = this.value.toLowerCase();
                unitConversionCollectionView.refresh();
            });

            unitConversionCollectionView.filter = function (item) {
                return !filterText || (item.Unit.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.BaseUnit.toLowerCase().indexOf(filterText) > -1);
            }

            unitConversionCollectionView.collectionChanged.addHandler(function (sender, args) {
                updateUnitConversionNavigationButtons();
            });

            unitConversionFlexGrid.itemsSource = unitConversionCollectionView;
            unitConversionFlexGrid.trackChanges = true;
        }

        // =================================
        // Create Unit Conversion Combo Unit
        // =================================
        function createCboUnitConversionUnit(unitId) {
            var unitConversionUnitsObservableArray = new wijmo.collections.ObservableArray();

            $.ajax({
                url: '/api/unitConversion/dropdown/list/unit',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            unitConversionUnitsObservableArray.push({
                                Id: results[i]["Id"],
                                Unit: results[i]["Unit"]
                            });
                        }
                    }

                    var disabled = true;
                    if (results.length > 0) {
                        disabled = false;
                    }

                    cboUnitConversionUnit.dispose();
                    cboUnitConversionUnit = new wijmo.input.ComboBox('#cboUnitConversionUnit', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: unitConversionUnitsObservableArray,
                        displayMemberPath: "Unit",
                        selectedValuePath: "Id",
                        selectedValue: unitId
                    });

                    cboUnitConversionBaseUnit.dispose();
                    cboUnitConversionBaseUnit = new wijmo.input.ComboBox('#cboUnitConversionBaseUnit', {
                        disabled: true,
                        isEditable: false,
                        itemsSource: unitConversionUnitsObservableArray,
                        displayMemberPath: "Unit",
                        selectedValuePath: "Id",
                        selectedValue: cboItemDetailUnit.selectedValue
                    });

                    setTimeout(function () {
                        $("#unitConversionLoading").hide();
                        $("#unitConversionContent").show();
                        if (results.length > 0) {
                            $('#btnUnitConversionSave').prop('disabled', false);
                        }
                    }, 500);
                }
            });
        }

        // ===================
        // Add Unit Conversion
        // ===================
        function btnUnitConversionAddOnclick() {
            $('#unitConversionModal').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById("unitConversionModalTitle").innerHTML = 'Add Unit Conversion';

            $("#unitConversionLoading").show();
            document.getElementById("unitConversionLoading").innerHTML = 'Loading...';
            $("#unitConversionContent").hide();

            document.getElementById('btnUnitConversionSave').innerHTML = "<i class='fa fa-save'></i> Save";
            $('#btnUnitConversionSave').prop('disabled', true);
            $('#btnUnitConversionCloseModal').prop('disabled', false);

            unitConversionId = 0;
            document.getElementById('inpUnitConversionMultiplier').value = formatDecimalValues(1);
            createCboUnitConversionUnit(cboItemDetailUnit.selectedValue);
            document.getElementById('inpUnitConversionCountUnit').checked = false;
        }

        // ====================
        // Edit Unit Conversion
        // ====================
        function btnUnitConversionEditOnclick() {
            $('#unitConversionModal').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById("unitConversionModalTitle").innerHTML = 'Edit Unit Conversion';

            $("#unitConversionLoading").show();
            document.getElementById("unitConversionLoading").innerHTML = 'Loading...';
            $("#unitConversionContent").hide();

            document.getElementById('btnUnitConversionSave').innerHTML = "<i class='fa fa-save'></i> Save";
            $('#btnUnitConversionSave').prop('disabled', true);
            $('#btnUnitConversionCloseModal').prop('disabled', false);

            unitConversionCollectionView.editItem(unitConversionCollectionView.currentItem);
            var unitConversion = unitConversionCollectionView.currentEditItem;
            unitConversionId = unitConversion.Id;
            document.getElementById('inpUnitConversionMultiplier').value = formatDecimalValues(unitConversion.Multiplier);
            createCboUnitConversionUnit(unitConversion.UnitId);
            document.getElementById('inpUnitConversionCountUnit').checked = unitConversion.IsCountUnit;
        }

        // ======================
        // Delete Unit Conversion
        // ======================
        function btnUnitConversionDeleteOnclick() {
            $('#unitConversionDeleteModal').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById('btnUnitConversionConfirmDelete').innerHTML = "<i class='fa fa-trash'></i> Delete";
            $('#btnUnitConversionConfirmDelete').prop('disabled', false);
            $('#btnUnitConversionConfirmDeleteCloseModal').prop('disabled', false);
        }

        // ==============================
        // Confirm Delete Unit Conversion
        // ==============================
        function btnUnitConversionConfirmDeleteOnclick() {
            document.getElementById('btnUnitConversionConfirmDelete').innerHTML = "<i class='fa fa-trash'></i> Deleting...";
            $('#btnUnitConversionConfirmDelete').prop('disabled', true);
            $('#btnUnitConversionConfirmDeleteCloseModal').prop('disabled', true);

            unitConversionCollectionView.editItem(unitConversionCollectionView.currentItem);
            var unitConversionId = unitConversionCollectionView.currentEditItem.Id;
            $.ajax({
                url: '/api/unitConversion/delete/' + unitConversionId + '/' + getURLParameterValue("id"),
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Delete Successful");
                        $('#unitConversionDeleteModal').modal('hide');
                        refresUnitConversionFlexGrid();
                    },
                    404: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                        $('#unitConversionDeleteModal').modal('hide');
                        document.getElementById('btnUnitConversionConfirmDelete').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $('#btnUnitConversionConfirmDelete').prop('disabled', false);
                        $('#btnUnitConversionConfirmDeleteCloseModal').prop('disabled', false);
                    },
                    400: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                        $('#unitConversionDeleteModal').modal('hide');
                        document.getElementById('btnUnitConversionConfirmDelete').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $('#btnUnitConversionConfirmDelete').prop('disabled', false);
                        $('#btnUnitConversionConfirmDeleteCloseModal').prop('disabled', false);
                    },
                    500: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                        $('#unitConversionDeleteModal').modal('hide');
                        document.getElementById('btnUnitConversionConfirmDelete').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $('#btnUnitConversionConfirmDelete').prop('disabled', false);
                        $('#btnUnitConversionConfirmDeleteCloseModal').prop('disabled', false);
                    }
                }
            });
        }

        // ================================
        // Unit Conversion Entry Validation
        // ================================
        function unitConversionEntryValidation() {
            var isValid = true;
            $('.requiredUnitConversion').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                } else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            return isValid;
        }

        // ====================
        // Save Unit Conversion
        // ====================
        function btnUnitConversionSaveOnclick() {
            var unitConversionObject = new Object();
            unitConversionObject.ArticleId = getURLParameterValue("id");
            unitConversionObject.UnitId = cboUnitConversionUnit.selectedValue;
            unitConversionObject.Multiplier = document.getElementById("inpUnitConversionMultiplier").value.toLocaleString();
            unitConversionObject.IsCountUnit = document.getElementById("inpUnitConversionCountUnit").checked;
            var data = JSON.stringify(unitConversionObject);

            if (unitConversionEntryValidation()) {
                document.getElementById('btnUnitConversionSave').innerHTML = "<i class='fa fa-save'></i> Saving...";
                $('#btnUnitConversionSave').prop('disabled', true);
                $('#btnUnitConversionCloseModal').prop('disabled', true);

                if (unitConversionId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/unitConversion/add/' + getURLParameterValue("id"),
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: data,
                        statusCode: {
                            200: function () {
                                toastr.success("Save Successful");
                                $('#unitConversionModal').modal('hide');
                                refresUnitConversionFlexGrid();
                            },
                            404: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                                $('#unitConversionModal').modal('hide');
                                document.getElementById('btnUnitConversionSave').innerHTML = "<i class='fa fa-save'></i> Save";
                                $('#btnUnitConversionSave').prop('disabled', false);
                                $('#btnUnitConversionCloseModal').prop('disabled', false);
                            },
                            400: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                                $('#unitConversionModal').modal('hide');
                                document.getElementById('btnUnitConversionSave').innerHTML = "<i class='fa fa-save'></i> Save";
                                $('#btnUnitConversionSave').prop('disabled', false);
                                $('#btnUnitConversionCloseModal').prop('disabled', false);
                            },
                            500: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                                $('#unitConversionModal').modal('hide');
                                document.getElementById('btnUnitConversionSave').innerHTML = "<i class='fa fa-save'></i> Save";
                                $('#btnUnitConversionSave').prop('disabled', false);
                                $('#btnUnitConversionCloseModal').prop('disabled', false);
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/unitConversion/update/' + unitConversionId + '/' + getURLParameterValue("id"),
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: data,
                        statusCode: {
                            200: function () {
                                toastr.success("Update Successful");
                                $('#unitConversionModal').modal('hide');
                                refresUnitConversionFlexGrid();
                            },
                            404: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                                $('#unitConversionModal').modal('hide');
                                document.getElementById('btnUnitConversionSave').innerHTML = "<i class='fa fa-save'></i> Save";
                                $('#btnUnitConversionSave').prop('disabled', false);
                                $('#btnUnitConversionCloseModal').prop('disabled', false);
                            },
                            400: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                                $('#unitConversionModal').modal('hide');
                                document.getElementById('btnUnitConversionSave').innerHTML = "<i class='fa fa-save'></i> Save";
                                $('#btnUnitConversionSave').prop('disabled', false);
                                $('#btnUnitConversionCloseModal').prop('disabled', false);
                            },
                            500: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                                $('#unitConversionModal').modal('hide');
                                document.getElementById('btnUnitConversionSave').innerHTML = "<i class='fa fa-save'></i> Save";
                                $('#btnUnitConversionSave').prop('disabled', false);
                                $('#btnUnitConversionCloseModal').prop('disabled', false);
                            }
                        }
                    });
                }
            } else {
                toastr.error("Invalid Entry");
            }
        }

        // ==================
        // Get Component Data
        // ==================
        function getComponentData() {
            var componentCollectionViewObservableArray = new wijmo.collections.ObservableArray;
            if (document.location.search.length > 0) {
                $.ajax({
                    url: '/api/itemComponent/list/' + getURLParameterValue("id"),
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    success: function (results) {
                        var totalComponentAmount = 0;
                        if (results.length > 0) {
                            var btnEditId = "<button class='btn btn-primary btn-xs btn-block' onclick='btnCompoentEditOnclick()'><i class='fa fa-edit'></i> Edit</button>";
                            var btnDeleteId = "<button class='btn btn-danger btn-xs btn-block' onclick='btnCompoentDeleteOnclick()'><i class='fa fa-trash'></i> Delete</button>";
                            if (isLocked) {
                                btnEditId = "<button class='btn btn-primary btn-xs btn-block' onclick='btnCompoentEditOnclick()' disabled><i class='fa fa-edit'></i> Edit</button>";
                                btnDeleteId = "<button class='btn btn-danger btn-xs btn-block' onclick='btnCompoentDeleteOnclick()' disabled><i class='fa fa-trash'></i> Delete</button>";
                            }

                            for (i = 0; i < results.length; i++) {
                                totalComponentAmount += results[i]["Amount"];

                                componentCollectionViewObservableArray.push({
                                    EditId: btnEditId,
                                    DeleteId: btnDeleteId,
                                    Id: results[i]["Id"],
                                    ComponentArticleId: results[i]["ComponentArticleId"],
                                    ComponentArticleManualCode: results[i]["ComponentArticleManualCode"],
                                    ComponentManualArticleOldCode: results[i]["ComponentManualArticleOldCode"],
                                    ComponentArticle: results[i]["ComponentArticle"],
                                    Quantity: results[i]["Quantity"],
                                    QuantityDisplay: parseFloat(results[i]["Quantity"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                    Unit: results[i]["Unit"],
                                    Cost: results[i]["Cost"],
                                    CostDisplay: parseFloat(results[i]["Cost"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                    Amount: results[i]["Amount"],
                                    AmountDisplay: parseFloat(results[i]["Amount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                    Particulars: results[i]["Particulars"]
                                });
                            }
                        }

                        document.getElementById('totalComponentAmount').value = parseFloat(totalComponentAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        NProgress.done();
                    }
                });
            }

            return componentCollectionViewObservableArray;
        }

        // ==========================
        // Create Component Flex Grid
        // ==========================
        function createComponentFlexGrid() {
            componentCollectionView = new wijmo.collections.CollectionView(getComponentData());
            componentCollectionView.canFilter = true;
            componentCollectionView.pageSize = cboComponentDisplayNumberOfRows.selectedValue;

            var filterText = '';
            $('#inpComponentSearchFilter').keyup(function () {
                filterText = this.value.toLowerCase();
                componentCollectionView.refresh();
            });

            componentCollectionView.filter = function (item) {
                return !filterText || (item.ComponentArticleManualCode.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.ComponentArticle.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Unit.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Particulars.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.ComponentManualArticleOldCode.toLowerCase().indexOf(filterText) > -1);
            }

            componentCollectionView.collectionChanged.addHandler(function (sender, args) {
                updateComponentNavigationButtons();
            });

            componentFlexGrid = new wijmo.grid.FlexGrid('#componentFlexGrid');
            componentFlexGrid.initialize({
                columns: [
                    @{
                        if (canEdit)
                        {
                            <text>
                                {
                                    "header": "Edit",
                                    "binding": "EditId",
                                    "width": 70,
                                    "align": "center",
                                    "allowResizing": false,
                                    "allowSorting": false,
                                    "isContentHtml": true
                                },
                            </text>
                        }
                        if (canDelete)
                        {
                            <text>
                                {
                                    "header": "Delete",
                                    "binding": "DeleteId",
                                    "width": 70,
                                    "align": "center",
                                    "allowResizing": false,
                                    "allowSorting": false,
                                    "isContentHtml": true
                                },
                            </text>
                        }
                    }
                    {
                        "header": "Bar Code",
                        "binding": "ComponentArticleManualCode",
                        "allowSorting": true,
                        "width": "1.7*"
                    },
                    {
                        "header": "SKU Code",
                        "binding": "ComponentManualArticleOldCode",
                        "allowSorting": true,
                        "width": "1.7*"
                    },
                    {
                        "header": "Component",
                        "binding": "ComponentArticle",
                        "allowSorting": true,
                        "width": "2.5*"
                    },
                    {
                        "header": "Quantity",
                        "binding": "QuantityDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": "1.5*"
                    },
                    {
                        "header": "Unit",
                        "binding": "Unit",
                        "allowSorting": true,
                        "width": "1*"
                    },
                    {
                        "header": "Cost",
                        "binding": "CostDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": "1.5*"
                    },
                    {
                        "header": "Amount",
                        "binding": "AmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": "1.5*"
                    },
                    {
                        "header": "Particulars",
                        "binding": "Particulars",
                        "allowSorting": true,
                        "width": "1.7*"
                    },
                ],
                autoGenerateColumns: false,
                itemsSource: componentCollectionView,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            componentFlexGrid.trackChanges = true;

            updateComponentNavigationButtons();

            btnComponentMoveToFirstPageGrid.addEventListener('click', function () {
                componentCollectionView.moveToFirstPage();
                updateComponentNavigationButtons();
            });

            btnComponentMoveToPreviousPageGrid.addEventListener('click', function () {
                componentCollectionView.moveToPreviousPage();
                updateComponentNavigationButtons();
            });

            btnComponentMoveToNextPageGrid.addEventListener('click', function () {
                componentCollectionView.moveToNextPage();
                updateComponentNavigationButtons();
            });

            btnComponentMoveToLastPageGrid.addEventListener('click', function () {
                componentCollectionView.moveToLastPage();
                updateComponentNavigationButtons();
            });
        }

        // ==================================
        // Update Component Navigation Button
        // ==================================
        function updateComponentNavigationButtons() {
            if (componentCollectionView.pageSize <= 0) {
                document.getElementById('componentNavigationPageGrid').style.display = 'none';
                return;
            }
            document.getElementById('componentNavigationPageGrid').style.display = 'block';
            if (componentCollectionView.pageIndex === 0) {
                btnComponentMoveToFirstPageGrid.setAttribute('disabled', 'disabled');
                btnComponentMoveToPreviousPageGrid.setAttribute('disabled', 'disabled');
                btnComponentMoveToNextPageGrid.removeAttribute('disabled');
                btnComponentMoveToLastPageGrid.removeAttribute('disabled');
            } else if (componentCollectionView.pageIndex === (componentCollectionView.pageCount - 1)) {
                btnComponentMoveToFirstPageGrid.removeAttribute('disabled');
                btnComponentMoveToPreviousPageGrid.removeAttribute('disabled');
                btnComponentMoveToLastPageGrid.setAttribute('disabled', 'disabled');
                btnComponentMoveToNextPageGrid.setAttribute('disabled', 'disabled');
            } else {
                btnComponentMoveToFirstPageGrid.removeAttribute('disabled');
                btnComponentMoveToPreviousPageGrid.removeAttribute('disabled');
                btnComponentMoveToNextPageGrid.removeAttribute('disabled');
                btnComponentMoveToLastPageGrid.removeAttribute('disabled');
            }
            btnComponentCurrentPageGrid.innerHTML = (componentCollectionView.pageIndex + 1) + ' / ' + componentCollectionView.pageCount;
        }

        // ==========================
        // Refresh Component FlexGrid
        // ==========================
        function refreshComponentFlexGrid() {
            componentCollectionView = new wijmo.collections.CollectionView(getComponentData());
            componentCollectionView.canFilter = true;
            componentCollectionView.pageSize = cboComponentDisplayNumberOfRows.selectedValue;

            var filterText = '';
            $('#inpComponentSearchFilter').keyup(function () {
                filterText = this.value.toLowerCase();
                componentCollectionView.refresh();
            });

            componentCollectionView.filter = function (item) {
                return !filterText || (item.ComponentArticleManualCode.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.ComponentArticle.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Unit.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Particulars.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.ComponentManualArticleOldCode.toLowerCase().indexOf(filterText) > -1);
            }

            componentCollectionView.collectionChanged.addHandler(function (sender, args) {
                updateComponentNavigationButtons();
            });

            componentFlexGrid.itemsSource = componentCollectionView;
            componentFlexGrid.trackChanges = true;
        }

        // ================================
        // Create Item Component Combo Item
        // ================================
        function createCboItemComponentItem(itemIdSelectedValue, UnitId) {
            var itemObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/itemComponent/dropdown/list/item/' + getURLParameterValue("id"),
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            itemObservableArray.push({
                                Id: results[i]["Id"],
                                ManualArticleCode: results[i]["ManualArticleCode"],
                                Article: results[i]["Article"],
                                UnitId: results[i]["UnitId"],
                                Cost: results[i]["Cost"] != null ? results[i]["Cost"] : 0
                            });
                        }
                    }

                    var disabled = true;
                    if (results.length > 0) {
                        disabled = false;
                        $('#btnComponentSave').prop('disabled', false);
                    } else {
                        $('#btnComponentSave').prop('disabled', true);
                    }

                    cboComponentItemCode.dispose();
                    cboComponentItemCode = new wijmo.input.ComboBox('#cboComponentItemCode', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: itemObservableArray,
                        displayMemberPath: "ManualArticleCode",
                        selectedValuePath: "Id",
                        selectedValue: itemIdSelectedValue,
                        onSelectedIndexChanged: function () {
                            cboComponentItem.selectedValue = this.selectedValue;
                        }
                    });

                    cboComponentItem.dispose();
                    cboComponentItem = new wijmo.input.ComboBox('#cboComponentItem', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: itemObservableArray,
                        displayMemberPath: "Article",
                        selectedValuePath: "Id",
                        selectedValue: itemIdSelectedValue,
                        onSelectedIndexChanged: function () {
                            cboComponentItemCode.selectedValue = this.selectedValue;
                            cboComponentUnit.selectedValue = this.selectedItem["UnitId"];
                            document.getElementById("inpComponentCost").value = formatDecimalValues(this.selectedItem["Cost"]);
                            computeComponentAmount();
                        }
                    });

                    if (componentId == 0) {
                        createCboItemComponentUnit(cboComponentItem.selectedItem["UnitId"]);
                        document.getElementById("inpComponentCost").value = formatDecimalValues(cboComponentItem.selectedItem["Cost"]);
                    } else {
                        createCboItemComponentUnit(UnitId);
                    }

                    computeComponentAmount();
                }
            });
        }

        // ================================
        // Create Item Component Combo Unit
        // ================================
        function createCboItemComponentUnit(UnitId) {
            var componentUnitObservableArray = new wijmo.collections.ObservableArray();
            if (cboComponentItem.selectedValue != null) {
                $.ajax({
                    url: '/api/itemComponent/dropdown/list/unit',
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    success: function (results) {
                        if (results.length > 0) {
                            for (i = 0; i < results.length; i++) {
                                componentUnitObservableArray.push({
                                    Id: results[i]["Id"],
                                    Unit: results[i]["Unit"]
                                });
                            }
                        }

                        cboComponentUnit.dispose();
                        cboComponentUnit = new wijmo.input.ComboBox('#cboComponentUnit', {
                            disabled: true,
                            isEditable: false,
                            itemsSource: componentUnitObservableArray,
                            displayMemberPath: "Unit",
                            selectedValuePath: "Id",
                            selectedValue: UnitId
                        });

                        setTimeout(function () {
                            $("#componentLoading").hide();
                            $("#componentContent").show();
                            if (results.length <= 0) {
                                $('#btnComponentSave').prop('disabled', true);
                            }
                        }, 500);
                    }
                });
            } else {
                cboComponentUnit.dispose();
                cboComponentUnit = new wijmo.input.ComboBox('#cboComponentUnit', {
                    disabled: true,
                    isEditable: false,
                    itemsSource: componentUnitObservableArray
                });

                setTimeout(function () {
                    $("#componentLoading").hide();
                    $("#componentContent").show();
                    $('#btnComponentSave').prop('disabled', true);
                }, 500);
            }
        }

        // =============
        // Add Component
        // =============
        function btnComponentAddOnclick() {
            $('#componentModal').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById("componentModalTitle").innerHTML = 'Add Component';

            $("#componentLoading").show();
            document.getElementById("componentLoading").innerHTML = 'Loading...';
            $("#componentContent").hide();

            document.getElementById("btnComponentSave").innerHTML = "<i class='fa fa-save'></i> Save"
            $("#btnComponentSave").prop("disabled", true);
            $("#btnComponentCloseModal").prop("disabled", false);

            componentId = 0;
            createCboItemComponentItem(0, 0);
            document.getElementById('inpComponentQuantity').value = formatDecimalValues(1);
            document.getElementById('inpComponentParticulars').value = 'NA';
        }

        // ==============
        // Edit Component
        // ==============
        function btnCompoentEditOnclick() {
            $('#componentModal').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById("componentModalTitle").innerHTML = 'Edit Component';

            $("#componentLoading").show();
            document.getElementById("componentLoading").innerHTML = 'Loading...';
            $("#componentContent").hide();

            document.getElementById("btnComponentSave").innerHTML = "<i class='fa fa-save'></i> Save"
            $("#btnComponentSave").prop("disabled", true);
            $("#btnComponentCloseModal").prop("disabled", false);

            componentCollectionView.editItem(componentCollectionView.currentItem);
            var component = componentCollectionView.currentEditItem;
            componentId = component.Id;
            createCboItemComponentItem(component.ComponentArticleId, component.UnitId);
            document.getElementById('inpComponentQuantity').value = formatDecimalValues(component.Quantity);
            document.getElementById('inpComponentCost').value = formatDecimalValues(component.Cost);
            document.getElementById('inpComponentAmount').value = formatDecimalValues(component.Amount);
            document.getElementById('inpComponentParticulars').value = component.Particulars;
        }

        // ==============
        // Save component
        // ==============
        function btnComponentSaveOnclick() {
            if (componentEntryValidation()) {
                document.getElementById("btnComponentSave").innerHTML = "<i class='fa fa-save'></i> Saving..."
                $("#btnComponentSave").prop("disabled", true);
                $("#btnComponentCloseModal").prop("disabled", true);

                var componentObject = new Object();
                componentObject.ComponentArticleId = cboComponentItem.selectedValue;
                componentObject.Quantity = document.getElementById("inpComponentQuantity").value;
                componentObject.Particulars = document.getElementById("inpComponentParticulars").value;
                var data = JSON.stringify(componentObject);

                if (componentId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/itemComponent/add/' + getURLParameterValue("id"),
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: data,
                        statusCode: {
                            200: function () {
                                toastr.success("Save Successful");
                                $('#componentModal').modal('hide');
                                refreshComponentFlexGrid();
                            },
                            404: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                                $('#componentModal').modal('hide');
                                document.getElementById("btnComponentSave").innerHTML = "<i class='fa fa-save'></i> Save"
                                $("#btnComponentSave").prop("disabled", false);
                                $("#btnComponentCloseModal").prop("disabled", false);
                            },
                            400: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                                $('#componentModal').modal('hide');
                                document.getElementById("btnComponentSave").innerHTML = "<i class='fa fa-save'></i> Save"
                                $("#btnComponentSave").prop("disabled", false);
                                $("#btnComponentCloseModal").prop("disabled", false);
                            },
                            500: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                                $('#componentModal').modal('hide');
                                document.getElementById("btnComponentSave").innerHTML = "<i class='fa fa-save'></i> Save"
                                $("#btnComponentSave").prop("disabled", false);
                                $("#btnComponentCloseModal").prop("disabled", false);
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/itemComponent/update/' + componentId + '/' + getURLParameterValue("id"),
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: data,
                        statusCode: {
                            200: function () {
                                toastr.success("Update Successful");
                                $('#componentModal').modal('hide');
                                refreshComponentFlexGrid();
                            },
                            404: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                                $('#componentModal').modal('hide');
                                document.getElementById("btnComponentSave").innerHTML = "<i class='fa fa-save'></i> Save"
                                $("#btnComponentSave").prop("disabled", false);
                                $("#btnComponentCloseModal").prop("disabled", false);
                            },
                            400: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                                $('#componentModal').modal('hide');
                                document.getElementById("btnComponentSave").innerHTML = "<i class='fa fa-save'></i> Save"
                                $("#btnComponentSave").prop("disabled", false);
                                $("#btnComponentCloseModal").prop("disabled", false);
                            },
                            500: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                                $('#componentModal').modal('hide');
                                document.getElementById("btnComponentSave").innerHTML = "<i class='fa fa-save'></i> Save"
                                $("#btnComponentSave").prop("disabled", false);
                                $("#btnComponentCloseModal").prop("disabled", false);
                            }
                        }
                    });
                }
            } else {
                toastr.error("Invalid Entry");
            }
        }

        // ==========================
        // Component Entry Validation
        // ==========================
        function componentEntryValidation() {
            var isValid = true;
            $('.requiredComponent').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                } else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            return isValid;
        }

        // ================
        // Delete component
        // ================
        function btnCompoentDeleteOnclick() {
            $('#componentDeleteModal').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById('btnComponentConfirmDelete').innerHTML = "<i class='fa fa-trash'></i> Delete";
            $('#btnComponentConfirmDelete').prop('disabled', false);
            $('#btnComponentConfirmDeleteCloseModal').prop('disabled', false);
        }

        // ========================
        // Confirm Delete component
        // ========================
        function btnComponentConfirmDeleteOnclick() {
            document.getElementById('btnComponentConfirmDelete').innerHTML = "<i class='fa fa-trash'></i> Deleting...";
            $('#btnComponentConfirmDelete').prop('disabled', true);
            $('#btnComponentConfirmDeleteCloseModal').prop('disabled', true);

            componentCollectionView.editItem(componentCollectionView.currentItem);
            var component = componentCollectionView.currentEditItem;
            $.ajax({
                url: '/api/itemComponent/delete/' + component.Id + '/' + getURLParameterValue("id"),
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Delete Successful");
                        $('#componentDeleteModal').modal('hide');
                        refreshComponentFlexGrid();
                    },
                    404: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                        $('#componentDeleteModal').modal('hide');
                        document.getElementById('btnComponentConfirmDelete').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $('#btnComponentConfirmDelete').prop('disabled', false);
                        $('#btnComponentConfirmDeleteCloseModal').prop('disabled', false);
                    },
                    400: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                        $('#componentDeleteModal').modal('hide');
                        document.getElementById('btnComponentConfirmDelete').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $('#btnComponentConfirmDelete').prop('disabled', false);
                        $('#btnComponentConfirmDeleteCloseModal').prop('disabled', false);
                    },
                    500: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                        $('#componentDeleteModal').modal('hide');
                        document.getElementById('btnComponentConfirmDelete').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $('#btnComponentConfirmDelete').prop('disabled', false);
                        $('#btnComponentConfirmDeleteCloseModal').prop('disabled', false);
                    }
                }
            });
        }

        // =================
        // Compute component
        // =================
        function computeComponentAmount() {
            var quantity = document.getElementById('inpComponentQuantity').value;
            var cost = document.getElementById('inpComponentCost').value;
            var replacedQuantity = quantity.replace(/\,/g, '');
            var replacedCost = cost.replace(/\,/g, '');

            var roundAmount = replacedQuantity * replacedCost;
            document.getElementById('inpComponentAmount').value = formatDecimalValues(roundAmount);
        }

        $('#inpComponentQuantity').keyup(function () {
            computeComponentAmount();
        });

        // ==============
        // Get Price Data
        // ==============
        function getPriceData() {
            var priceObservableArray = new wijmo.collections.ObservableArray;
            if (document.location.search.length > 0) {
                $.ajax({
                    url: '/api/itemPrice/list/' + getURLParameterValue("id"),
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    success: function (results) {
                        if (results.length > 0) {
                            var btnEditId = "<button class='btn btn-primary btn-xs btn-block' onclick='btnPriceEditOnclick()'><i class='fa fa-edit'></i> Edit</button>";
                            var btnDeleteId = "<button class='btn btn-danger btn-xs btn-block' onclick='btnPriceDeleteOnclick()'><i class='fa fa-trash'></i> Delete</button>";
                            if (isLocked) {
                                btnEditId = "<button class='btn btn-primary btn-xs btn-block' onclick='btnPriceEditOnclick()' disabled><i class='fa fa-edit'></i> Edit</button>";
                                btnDeleteId = "<button class='btn btn-danger btn-xs btn-block' onclick='btnPriceDeleteOnclick()' disabled><i class='fa fa-trash'></i> Delete</button>";
                            }

                            for (i = 0; i < results.length; i++) {
                                priceObservableArray.push({
                                    EditId: btnEditId,
                                    DeleteId: btnDeleteId,
                                    Id: results[i]["Id"],
                                    PriceDescription: results[i]["PriceDescription"],
                                    Price: results[i]["Price"],
                                    PriceDisplay: parseFloat(results[i]["Price"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                    Remarks: results[i]["Remarks"]
                                });
                            }
                        }

                        NProgress.done();
                    }
                });
            }

            return priceObservableArray;
        }

        // ======================
        // Create Price Flex Grid
        // ======================
        function createPriceFlexGrid() {
            priceCollectionView = new wijmo.collections.CollectionView(getPriceData());
            priceCollectionView.canFilter = true;
            priceCollectionView.pageSize = cboPriceDisplayNumberOfRows.selectedValue;

            var filterText = '';
            $('#inpPriceSearchFilter').keyup(function () {
                filterText = this.value.toLowerCase();
                priceCollectionView.refresh();
            });

            priceCollectionView.filter = function (item) {
                return !filterText || (item.PriceDescription.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Remarks.toLowerCase().indexOf(filterText) > -1);
            }

            priceCollectionView.collectionChanged.addHandler(function (sender, args) {
                updatePriceNavigationButton();
            });

            priceFlexGrid = new wijmo.grid.FlexGrid('#priceFlexGrid');
            priceFlexGrid.initialize({
                columns: [
                    @{
                        if (canEdit)
                        {
                            <text>
                                {
                                    "header": "Edit",
                                    "binding": "EditId",
                                    "width": 70,
                                    "align": "center",
                                    "allowResizing": false,
                                    "allowSorting": false,
                                    "isContentHtml": true
                                },
                            </text>
                        }
                        if (canDelete)
                        {
                            <text>
                                {
                                    "header": "Delete",
                                    "binding": "DeleteId",
                                    "width": 70,
                                    "align": "center",
                                    "allowResizing": false,
                                    "allowSorting": false,
                                    "isContentHtml": true
                                },
                            </text>
                        }
                    }
                    {
                        "header": "Description",
                        "binding": "PriceDescription",
                        "allowSorting": true,
                        "width": "3*"
                    },
                    {
                        "header": "Price",
                        "binding": "PriceDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": "2*"
                    },
                    {
                        "header": "Remarks",
                        "binding": "Remarks",
                        "allowSorting": true,
                        "width": "3*"
                    }
                ],
                autoGenerateColumns: false,
                itemsSource: priceCollectionView,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            priceFlexGrid.trackChanges = true;

            updatePriceNavigationButton();

            btnPriceMoveToFirstPageGrid.addEventListener('click', function () {
                priceCollectionView.moveToFirstPage();
                updatePriceNavigationButton();
            });

            btnPriceMoveToPreviousPageGrid.addEventListener('click', function () {
                priceCollectionView.moveToPreviousPage();
                updatePriceNavigationButton();
            });

            btnPriceMoveToNextPageGrid.addEventListener('click', function () {
                priceCollectionView.moveToNextPage();
                updatePriceNavigationButton();
            });

            btnPriceMoveToLastPageGrid.addEventListener('click', function () {
                priceCollectionView.moveToLastPage();
                updatePriceNavigationButton();
            });
        }

        // ===============================
        // Update Price Navigation Buttons
        // ===============================
        function updatePriceNavigationButton() {
            if (priceCollectionView.pageSize <= 0) {
                document.getElementById('priceNavigationPageGrid').style.display = 'none';
                return;
            }
            document.getElementById('priceNavigationPageGrid').style.display = 'block';
            if (priceCollectionView.pageIndex === 0) {
                btnPriceMoveToFirstPageGrid.setAttribute('disabled', 'disabled');
                btnPriceMoveToPreviousPageGrid.setAttribute('disabled', 'disabled');
                btnPriceMoveToNextPageGrid.removeAttribute('disabled');
                btnPriceMoveToLastPageGrid.removeAttribute('disabled');
            } else if (priceCollectionView.pageIndex === (priceCollectionView.pageCount - 1)) {
                btnPriceMoveToFirstPageGrid.removeAttribute('disabled');
                btnPriceMoveToPreviousPageGrid.removeAttribute('disabled');
                btnPriceMoveToLastPageGrid.setAttribute('disabled', 'disabled');
                btnPriceMoveToNextPageGrid.setAttribute('disabled', 'disabled');
            } else {
                btnPriceMoveToFirstPageGrid.removeAttribute('disabled');
                btnPriceMoveToPreviousPageGrid.removeAttribute('disabled');
                btnPriceMoveToNextPageGrid.removeAttribute('disabled');
                btnPriceMoveToLastPageGrid.removeAttribute('disabled');
            }
            btnPriceCurrentPageGrid.innerHTML = (priceCollectionView.pageIndex + 1) + ' / ' + priceCollectionView.pageCount;
        }

        // =======================
        // Refresh Price Flex Grid
        // =======================
        function refreshPriceFlexGrid() {
            priceCollectionView = new wijmo.collections.CollectionView(getPriceData());
            priceCollectionView.canFilter = true;
            priceCollectionView.pageSize = cboPriceDisplayNumberOfRows.selectedValue;

            var filterText = '';
            $('#inpPriceSearchFilter').keyup(function () {
                filterText = this.value.toLowerCase();
                priceCollectionView.refresh();
            });

            priceCollectionView.filter = function (item) {
                return !filterText || (item.PriceDescription.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Remarks.toLowerCase().indexOf(filterText) > -1);
            }

            priceCollectionView.collectionChanged.addHandler(function (sender, args) {
                updatePriceNavigationButton();
            });

            priceFlexGrid.itemsSource = priceCollectionView;
            priceFlexGrid.trackChanges = true;
        }

        // ======================
        // Price Entry Validation
        // ======================
        function priceEntryValidation() {
            var isValid = true;
            $('.requiredPrice').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                } else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            return isValid;
        }

        // =========
        // Add Price
        // =========
        function btnPriceAddOnclick() {
            $('#priceModal').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById("priceModalTitle").innerHTML = 'Add Price';

            $("#priceLoading").show();
            document.getElementById("priceLoading").innerHTML = 'Loading...';
            $("#priceContent").hide();

            document.getElementById('btnPriceSave').innerHTML = "<i class='fa fa-save'></i> Save";
            $('#btnPriceSave').prop('disabled', true);
            $('#btnPriceCloseModal').prop('disabled', false);

            priceId = 0;
            document.getElementById('inpPriceDescription').value = "NA";
            document.getElementById('inpPricePrice').value = formatDecimalValues(0);
            document.getElementById('inpPriceRemarks').value = "NA";

            setTimeout(function () {
                $("#priceLoading").hide();
                $("#priceContent").show();
                $('#btnPriceSave').prop('disabled', false);
            }, 500);
        }

        // ==========
        // Edit Price
        // ==========
        function btnPriceEditOnclick() {
            $('#priceModal').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById("priceModalTitle").innerHTML = 'Edit Price';

            $("#priceLoading").show();
            document.getElementById("priceLoading").innerHTML = 'Loading...';
            $("#priceContent").hide();

            document.getElementById('btnPriceSave').innerHTML = "<i class='fa fa-save'></i> Save";
            $('#btnPriceSave').prop('disabled', true);
            $('#btnPriceCloseModal').prop('disabled', false);

            priceCollectionView.editItem(priceCollectionView.currentItem);
            var price = priceCollectionView.currentEditItem;
            priceId = price.Id;
            document.getElementById('inpPriceDescription').value = price.PriceDescription;
            document.getElementById('inpPricePrice').value = formatDecimalValues(price.Price);
            document.getElementById('inpPriceRemarks').value = price.Remarks;

            setTimeout(function () {
                $("#priceLoading").hide();
                $("#priceContent").show();
                $('#btnPriceSave').prop('disabled', false);
            }, 500);
        }

        // ============
        // Delete Price
        // ============
        function btnPriceDeleteOnclick() {
            $('#priceDeleteModal').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById('btnPriceConfirmDelete').innerHTML = "<i class='fa fa-trash'></i> Delete";
            $('#btnPriceConfirmDelete').prop('disabled', false);
            $('#btnPriceConfirmDeleteCloseModal').prop('disabled', false);
        }

        // ====================
        // Confirm Delete Price
        // ====================
        function btnPriceConfirmDeleteOnclick() {
            document.getElementById('btnPriceConfirmDelete').innerHTML = "<i class='fa fa-trash'></i> Deleting...";
            $('#btnPriceConfirmDelete').prop('disabled', true);
            $('#btnPriceConfirmDeleteCloseModal').prop('disabled', true);

            priceCollectionView.editItem(priceCollectionView.currentItem);
            var price = priceCollectionView.currentEditItem;

            $.ajax({
                url: '/api/itemPrice/delete/' + price.Id + '/' + getURLParameterValue("id"),
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Delete Successful");
                        $('#priceDeleteModal').modal('hide');
                        refreshPriceFlexGrid();
                    },
                    404: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                        $('#priceDeleteModal').modal('hide');
                        document.getElementById('btnPriceConfirmDelete').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $('#btnPriceConfirmDelete').prop('disabled', false);
                        $('#btnPriceConfirmDeleteCloseModal').prop('disabled', false);
                    },
                    400: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                        $('#priceDeleteModal').modal('hide');
                        document.getElementById('btnPriceConfirmDelete').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $('#btnPriceConfirmDelete').prop('disabled', false);
                        $('#btnPriceConfirmDeleteCloseModal').prop('disabled', false);
                    },
                    500: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                        $('#priceDeleteModal').modal('hide');
                        document.getElementById('btnPriceConfirmDelete').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $('#btnPriceConfirmDelete').prop('disabled', false);
                        $('#btnPriceConfirmDeleteCloseModal').prop('disabled', false);
                    }
                }
            });
        }

        // ==========
        // Save Price
        // ==========
        function btnPriceSaveOnclick() {
            var priceObject = new Object();
            priceObject.ArticleId = getURLParameterValue("id");
            priceObject.PriceDescription = document.getElementById('inpPriceDescription').value;
            priceObject.Price = document.getElementById('inpPricePrice').value;
            priceObject.Remarks = document.getElementById('inpPriceRemarks').value;
            var data = JSON.stringify(priceObject);

            if (priceEntryValidation()) {
                document.getElementById('btnPriceSave').innerHTML = "<i class='fa fa-save'></i> Saving...";
                $('#btnPriceSave').prop('disabled', true);
                $('#btnPriceCloseModal').prop('disabled', true);

                if (priceId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/itemPrice/add/' + getURLParameterValue("id"),
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: data,
                        statusCode: {
                            200: function () {
                                toastr.success("Save Successful");
                                $('#priceModal').modal('hide');
                                refreshPriceFlexGrid();
                            },
                            404: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                                $('#priceModal').modal('hide');
                                document.getElementById('btnPriceSave').innerHTML = "<i class='fa fa-save'></i> Save";
                                $('#btnPriceSave').prop('disabled', false);
                                $('#btnPriceCloseModal').prop('disabled', false);
                            },
                            400: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                                $('#priceModal').modal('hide');
                                document.getElementById('btnPriceSave').innerHTML = "<i class='fa fa-save'></i> Save";
                                $('#btnPriceSave').prop('disabled', false);
                                $('#btnPriceCloseModal').prop('disabled', false);
                            },
                            500: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                                $('#priceModal').modal('hide');
                                document.getElementById('btnPriceSave').innerHTML = "<i class='fa fa-save'></i> Save";
                                $('#btnPriceSave').prop('disabled', false);
                                $('#btnPriceCloseModal').prop('disabled', false);
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/itemPrice/update/' + priceId + '/' + getURLParameterValue("id"),
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: data,
                        statusCode: {
                            200: function () {
                                toastr.success("Update Successful");
                                $('#priceModal').modal('hide');
                                refreshPriceFlexGrid();
                            },
                            404: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                                $('#priceModal').modal('hide');
                                document.getElementById('btnPriceSave').innerHTML = "<i class='fa fa-save'></i> Save";
                                $('#btnPriceSave').prop('disabled', false);
                                $('#btnPriceCloseModal').prop('disabled', false);
                            },
                            400: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                                $('#priceModal').modal('hide');
                                document.getElementById('btnPriceSave').innerHTML = "<i class='fa fa-save'></i> Save";
                                $('#btnPriceSave').prop('disabled', false);
                                $('#btnPriceCloseModal').prop('disabled', false);
                            },
                            500: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                                $('#priceModal').modal('hide');
                                document.getElementById('btnPriceSave').innerHTML = "<i class='fa fa-save'></i> Save";
                                $('#btnPriceSave').prop('disabled', false);
                                $('#btnPriceCloseModal').prop('disabled', false);
                            }
                        }
                    });
                }
            } else {
                toastr.error("Invalid Entry");
            }
        }

        // ==================
        // Get Inventory Data
        // ==================
        function getInventoryData() {
            var inventoryObservableArray = new wijmo.collections.ObservableArray;
            if (document.location.search.length > 0) {
                $.ajax({
                    url: '/api/itemInventory/list/' + getURLParameterValue("id"),
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    data: {},
                    success: function (results) {
                        if (results.length > 0) {
                            for (i = 0; i < results.length; i++) {
                                inventoryObservableArray.push({
                                    Id: results[i]["Id"],
                                    Branch: results[i]["Branch"],
                                    InventoryCode: results[i]["InventoryCode"],
                                    Quantity: results[i]["Quantity"],
                                    QuantityDisplay: parseFloat(results[i]["Quantity"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                    Cost: results[i]["Cost"],
                                    CostDisplay: parseFloat(results[i]["Cost"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                    Amount: results[i]["Amount"],
                                    AmountDisplay: parseFloat(results[i]["Amount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                    Particulars: results[i]["Particulars"],
                                });
                            }
                        }

                        NProgress.done();
                    }
                });
            }

            return inventoryObservableArray;
        }

        // ==========================
        // Create Inventory Flex Grid
        // ==========================
        function createInventoryFlexGrid() {
            inventoryCollectionView = new wijmo.collections.CollectionView(getInventoryData());
            inventoryCollectionView.canFilter = true;
            inventoryCollectionView.pageSize = cboInventoryShowNumberOfRows.selectedValue;

            var filterText = '';
            $('#inpInventorySearchFilter').keyup(function () {
                filterText = this.value.toLowerCase();
                inventoryCollectionView.refresh();
            });

            inventoryCollectionView.filter = function (item) {
                return !filterText || (item.Branch.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.InventoryCode.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Particulars.toLowerCase().indexOf(filterText) > -1);
            }

            inventoryCollectionView.collectionChanged.addHandler(function (sender, args) {
                updateInventoryNavigationButton();
            });

            inventoryFlexGrid = new wijmo.grid.FlexGrid('#inventoryFlexGrid');
            inventoryFlexGrid.initialize({
                columns: [
                    {
                        "header": "Branch",
                        "binding": "Branch",
                        "allowSorting": true,
                        "width": "3*"
                    },
                    {
                        "header": "Code",
                        "binding": "InventoryCode",
                        "allowSorting": true,
                        "width": "4*"
                    },
                    {
                        "header": "Quantity",
                        "binding": "QuantityDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": "2*"
                    },
                    {
                        "header": "Cost",
                        "binding": "CostDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": "2*"
                    },
                    {
                        "header": "Amount",
                        "binding": "AmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": "2*"
                    },
                    {
                        "header": "Particulars",
                        "binding": "Particulars",
                        "allowSorting": true,
                        "width": "3*"
                    },
                ],
                autoGenerateColumns: false,
                itemsSource: inventoryCollectionView,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            inventoryFlexGrid.trackChanges = true;

            updateInventoryNavigationButton();

            btnInventoryMoveToFirstPageGrid.addEventListener('click', function () {
                inventoryCollectionView.moveToFirstPage();
                updateInventoryNavigationButton();
            });

            btnInventoryMoveToPreviousPageGrid.addEventListener('click', function () {
                inventoryCollectionView.moveToPreviousPage();
                updateInventoryNavigationButton();
            });

            btnInventoryMoveToNextPageGrid.addEventListener('click', function () {
                inventoryCollectionView.moveToNextPage();
                updateInventoryNavigationButton();
            });

            btnInventoryMoveToLastPageGrid.addEventListener('click', function () {
                inventoryCollectionView.moveToLastPage();
                updateInventoryNavigationButton();
            });
        }

        // ==================================
        // Update Invetory Navigation Buttons
        // ==================================
        function updateInventoryNavigationButton() {
            if (inventoryCollectionView.pageSize <= 0) {
                document.getElementById('inventoryNavigationPageGrid').style.display = 'none';
                return;
            }
            document.getElementById('inventoryNavigationPageGrid').style.display = 'block';
            if (inventoryCollectionView.pageIndex === 0) {
                btnInventoryMoveToFirstPageGrid.setAttribute('disabled', 'disabled');
                btnInventoryMoveToPreviousPageGrid.setAttribute('disabled', 'disabled');
                btnInventoryMoveToNextPageGrid.removeAttribute('disabled');
                btnInventoryMoveToLastPageGrid.removeAttribute('disabled');
            } else if (inventoryCollectionView.pageIndex === (inventoryCollectionView.pageCount - 1)) {
                btnInventoryMoveToFirstPageGrid.removeAttribute('disabled');
                btnInventoryMoveToPreviousPageGrid.removeAttribute('disabled');
                btnInventoryMoveToLastPageGrid.setAttribute('disabled', 'disabled');
                btnInventoryMoveToNextPageGrid.setAttribute('disabled', 'disabled');
            } else {
                btnInventoryMoveToFirstPageGrid.removeAttribute('disabled');
                btnInventoryMoveToPreviousPageGrid.removeAttribute('disabled');
                btnInventoryMoveToNextPageGrid.removeAttribute('disabled');
                btnInventoryMoveToLastPageGrid.removeAttribute('disabled');
            }
            btnInventoryCurrentPageGrid.innerHTML = (inventoryCollectionView.pageIndex + 1) + ' / ' + inventoryCollectionView.pageCount;
        }

        // ===========================
        // Refresh Inventory Flex Grid
        // ===========================
        function refreshInventoryFlexGrid() {
            inventoryCollectionView = new wijmo.collections.CollectionView(getInventoryData());
            inventoryCollectionView.canFilter = true;
            inventoryCollectionView.pageSize = cboInventoryShowNumberOfRows.selectedValue;

            var filterText = '';
            $('#inpInventorySearchFilter').keyup(function () {
                filterText = this.value.toLowerCase();
                inventoryCollectionView.refresh();
            });

            inventoryCollectionView.filter = function (item) {
                return !filterText || (item.Branch.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.InventoryCode.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Particulars.toLowerCase().indexOf(filterText) > -1);
            }

            inventoryCollectionView.collectionChanged.addHandler(function (sender, args) {
                updateInventoryNavigationButton();
            });

            inventoryFlexGrid.itemsSource = inventoryCollectionView;
            inventoryFlexGrid.trackChanges = true;
        }

        // ===================================
        // Create Combo Display Number of Rows
        // ===================================
        function createCboDisplayNumberOfRows() {
            var rowsObservableArray = new wijmo.collections.ObservableArray();

            for (var i = 0; i <= 4; i++) {
                var rows = 0;
                var rowsString = "";

                if (i == 0) {
                    rows = 15;
                    rowsString = "Show 15 Rows";
                } else if (i == 1) {
                    rows = 50;
                    rowsString = "Show 50 Rows";
                } else if (i == 2) {
                    rows = 100;
                    rowsString = "Show 100 Rows";
                } else if (i == 3) {
                    rows = 150;
                    rowsString = "Show 150 Rows";
                } else {
                    rows = 200;
                    rowsString = "Show 200 Rows";
                }

                rowsObservableArray.push({
                    rowNumber: rows,
                    rowString: rowsString
                });
            }

            cboUnitConversionDisplayNumberOfRows.dispose();
            cboUnitConversionDisplayNumberOfRows = new wijmo.input.ComboBox('#cboUnitConversionDisplayNumberOfRows', {
                isEditable: false,
                itemsSource: rowsObservableArray,
                displayMemberPath: "rowString",
                selectedValuePath: "rowNumber",
                selectedValue: 50,
                onSelectedIndexChanged: function () {
                    NProgress.start();

                    setTimeout(function () {
                        var numberOfRows = cboUnitConversionDisplayNumberOfRows.selectedValue;
                        unitConversionCollectionView.pageSize = parseInt(numberOfRows);
                        unitConversionCollectionView.refresh();
                        unitConversionFlexGrid.refresh();

                        NProgress.done();
                    }, 300);
                }
            });

            cboComponentDisplayNumberOfRows.dispose();
            cboComponentDisplayNumberOfRows = new wijmo.input.ComboBox('#cboComponentDisplayNumberOfRows', {
                isEditable: false,
                itemsSource: rowsObservableArray,
                displayMemberPath: "rowString",
                selectedValuePath: "rowNumber",
                selectedValue: 50,
                onSelectedIndexChanged: function () {
                    NProgress.start();

                    setTimeout(function () {
                        var numberOfRows = cboComponentDisplayNumberOfRows.selectedValue;
                        componentCollectionView.pageSize = parseInt(numberOfRows);
                        componentCollectionView.refresh();
                        componentFlexGrid.refresh();

                        NProgress.done();
                    }, 300);
                }
            });

            cboPriceDisplayNumberOfRows.dispose();
            cboPriceDisplayNumberOfRows = new wijmo.input.ComboBox('#cboPriceDisplayNumberOfRows', {
                isEditable: false,
                itemsSource: rowsObservableArray,
                displayMemberPath: "rowString",
                selectedValuePath: "rowNumber",
                selectedValue: 50,
                onSelectedIndexChanged: function () {
                    NProgress.start();

                    setTimeout(function () {
                        var numberOfRows = cboPriceDisplayNumberOfRows.selectedValue;
                        priceCollectionView.pageSize = parseInt(numberOfRows);
                        priceCollectionView.refresh();
                        priceFlexGrid.refresh();

                        NProgress.done();
                    }, 300);
                }
            });

            cboInventoryShowNumberOfRows.dispose();
            cboInventoryShowNumberOfRows = new wijmo.input.ComboBox('#cboInventoryShowNumberOfRows', {
                isEditable: false,
                itemsSource: rowsObservableArray,
                displayMemberPath: "rowString",
                selectedValuePath: "rowNumber",
                selectedValue: 50,
                onSelectedIndexChanged: function () {
                    NProgress.start();

                    setTimeout(function () {
                        var numberOfRows = cboInventoryShowNumberOfRows.selectedValue;
                        inventoryCollectionView.pageSize = parseInt(numberOfRows);
                        inventoryCollectionView.refresh();
                        inventoryFlexGrid.refresh();

                        NProgress.done();
                    }, 300);
                }
            });
        }

        // ===================
        // Tabs On Click Event
        // ===================
        $('#unitConversionTab').click(function () {
            $('#UnitConversion').show();
            $('#Component').hide();
            $('#Price').hide();
            $('#Inventory').hide();
            $('#GLAccount').hide();
            $('#FixedAsset').hide();
            $('#Consignment').hide();
            NProgress.start();
            refresUnitConversionFlexGrid();
        });
        $('#componentTab').click(function () {
            $('#UnitConversion').hide();
            $('#Component').show();
            $('#Price').hide();
            $('#Inventory').hide();
            $('#GLAccount').hide();
            $('#FixedAsset').hide();
            $('#Consignment').hide();
            NProgress.start();
            refreshComponentFlexGrid();
        });
        $('#priceTab').click(function () {
            $('#UnitConversion').hide();
            $('#Component').hide();
            $('#Price').show();
            $('#Inventory').hide();
            $('#GLAccount').hide();
            $('#FixedAsset').hide();
            $('#Consignment').hide();
            NProgress.start();
            refreshPriceFlexGrid();
        });
        $('#inventoryTab').click(function () {
            $('#UnitConversion').hide();
            $('#Component').hide();
            $('#Price').hide();
            $('#Inventory').show();
            $('#GLAccount').hide();
            $('#FixedAsset').hide();
            $('#Consignment').hide();
            refreshInventoryFlexGrid();
        });
        $('#GLAccountTab').click(function () {
            $('#UnitConversion').hide();
            $('#Component').hide();
            $('#Price').hide();
            $('#Inventory').hide();
            $('#GLAccount').show();
            $('#FixedAsset').hide();
            $('#Consignment').hide();
        });
        $('#fixedAssetTab').click(function () {
            $('#UnitConversion').hide();
            $('#Component').hide();
            $('#Price').hide();
            $('#Inventory').hide();
            $('#GLAccount').hide();
            $('#FixedAsset').show();
            $('#Consignment').hide();
        });
        $('#consignmentTab').click(function () {
            $('#UnitConversion').hide();
            $('#Component').hide();
            $('#Price').hide();
            $('#Inventory').hide();
            $('#GLAccount').hide();
            $('#FixedAsset').hide();
            $('#Consignment').show();
        });

        // ============
        // On Load Page
        // ============
        $(document).ready(function () {
            createCboItemDetailItemGroup();
        });
    </script>
    <script type="text/javascript">
        // =================
        // User Branch Combo
        // =================
        var cboUserBranches = new wijmo.input.ComboBox('#cboUserBranches');

        // =========================
        // Get Current User Branches
        // =========================
        function getUserBranches() {
            $("#loadingUserBranches").show();
            document.getElementById("loadingUserBranches").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#userBranchContent").hide();

            $('#userBranchesModal').modal({ show: true, backdrop: 'static' });

            document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
            $("#updateUserBranch").prop("disabled", false);
            $("#closeUserBranch").prop("disabled", false);

            var userBranchesObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/userBranch/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (userBranchesResults) {
                    if (userBranchesResults.length > 0) {
                        for (i = 0; i < userBranchesResults.length; i++) {
                            userBranchesObservableArray.push({
                                BranchId: userBranchesResults[i]["BranchId"],
                                Branch: userBranchesResults[i]["Branch"]
                            });
                        }
                    }

                    var currentBranch = "@ViewData["BranchId"]";
                    cboUserBranches.dispose();
                    cboUserBranches = new wijmo.input.ComboBox('#cboUserBranches', {
                        isEditable: false,
                        placeholder: "Select Branches",
                        itemsSource: userBranchesObservableArray,
                        displayMemberPath: "Branch",
                        selectedValuePath: "BranchId",
                        selectedValue: currentBranch
                    });

                    setTimeout(function () {
                        $("#loadingUserBranches").hide();
                        $("#userBranchContent").show();
                    }, 500)
                }
            });
        }

        // ==========================
        // Update Current User Branch
        // ==========================
        function updateUserBranchOnclick() {
            document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Updating";
            $("#updateUserBranch").prop("disabled", true);
            $("#closeUserBranch").prop("disabled", true);

            var userBranchObject = new Object();
            userBranchObject.BranchId = cboUserBranches.selectedValue;
            var userBranchData = JSON.stringify(userBranchObject);

            $.ajax({
                type: "PUT",
                url: '/api/userBranch/update',
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: userBranchData,
                statusCode: {
                    200: function () {
                        toastr.success("Update Successful");
                        window.setTimeout(function () {
                            location.reload()
                        }, 1000);
                    },
                    404: function () {
                        toastr.error("Not Found");
                        document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
                        $("#updateUserBranch").prop("disabled", false);
                        $("#closeUserBranch").prop("disabled", false);
                    },
                    500: function () {
                        toastr.error("Bad Request");
                        document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
                        $("#updateUserBranch").prop("disabled", false);
                        $("#closeUserBranch").prop("disabled", false);
                    }
                }
            });
        }
    </script>
    <script type="text/javascript">
        // ======================
        // Side Bar Menu Settings
        // ======================
        var slideLeft = new Menu({
            wrapper: '#o-wrapper',
            type: 'slide-left',
            menuOpenerClass: '.c-button',
            maskId: '#c-mask'
        });

        var slideLeftBtn = document.querySelector('#c-button--slide-left');

        slideLeftBtn.addEventListener('click', function (e) {
            e.preventDefault;
            slideLeft.open();
        });
    </script>
</body>
</html>