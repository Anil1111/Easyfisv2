<!DOCTYPE html>
<html>
<head>
    <!-- Meta -->
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">

    <!-- Title of the Page -->
    <title>Item Detail</title>

    <!-- CSS StyleSheets-->
    @Styles.Render("~/Content/Software-css")
</head>
<body class="hold-transition skin-blue fixed sidebar-mini">
    <div class="wrapper">
        @Html.Partial("_SoftwareHeader")
        @Html.Partial("_SoftwareSideBarMenu")

        <div class="content-wrapper">
            <section class="content-header">
                <h1>
                    Item Detail
                    <small><i class="fa fa-building"></i> <span id="currentCompanyName"></span> / <span id="currentBranchName"></span></small>
                </h1>
                <ol class="breadcrumb">
                    <li><a href="/Software"><i class="fa fa-dashboard"></i> Dashboard</a></li>
                    <li><a href="/Software/Items"> Item </a></li>
                    <li>Item Detail</li>
                </ol>
            </section>

            <section class="content">
                <div class="box box-default">
                    <div class="box-header">
                        <div class="row">
                            <div class="col-md-6"></div>
                            <div class="col-md-6" align="right">
                                <button class="btn btn-primary btn-sm" id="item_SaveButton" onclick="itemSaveButton_OnClick()"><i class="fa fa-save"></i> Save</button>
                                <button class="btn btn-primary btn-sm" id="item_LockButton" onclick="itemLockButton_OnClick()"><i class="fa fa-lock"></i> Lock</button>
                                <button class="btn btn-primary btn-sm" id="item_UnlockButton" onclick="itemUnlockButton_OnClick()"><i class="fa fa-unlock"></i> Unlock</button>
                                <button class="btn btn-danger btn-sm" id="item_CloseButton" onclick="itemCloseButton_OnClick()"><i class=" fa fa-times"></i> Close</button>
                            </div>
                        </div>
                    </div>
                    <div class="box-body">
                        <div class="well">
                            <form class="form-horizontal" role="form">
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            <label class="control-label col-sm-4">Code</label>
                                            <div class="col-sm-8">
                                                <input type="text" class="form-control input-30 input-sm requiredItem" id="articleItem_code" placeholder="Code" />
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <label class="control-label col-sm-4">Manual Code</label>
                                            <div class="col-sm-8">
                                                <input type="text" class="form-control input-sm requiredItem" id="articleItem_manualCode" placeholder="Manual Code" />
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <label class="control-label col-sm-4">Item</label>
                                            <div class="col-sm-8">
                                                <input type="text" class="form-control input-sm requiredItem" id="articleItem_item" placeholder="Item" />
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <label class="control-label col-sm-4">Item Group</label>
                                            <div class="col-sm-8">
                                                <div type="text" class="input-70" id="articleItem_itemGroup"></div>
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <label class="control-label col-sm-4">Category</label>
                                            <div class="col-sm-8">
                                                <input type="text" class="form-control input-70 input-sm requiredItem" id="articleItem_category" placeholder="Category" />
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <label class="control-label col-sm-4">Unit</label>
                                            <div class="col-sm-8">
                                                <div type="text" class="input-50" id="articleItem_unit"></div>
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <label class="control-label col-sm-4">Price</label>
                                            <div class="col-sm-8">
                                                <input type="text" class="form-control input-50 numberField input-sm requiredItem" id="articleItem_price" placeholder="0.00" />
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <label class="control-label col-sm-4">Particulars</label>
                                            <div class="col-sm-8">
                                                <textarea class="form-control textarea-custom requiredItem" id="articleItem_particulars" placeholder="Particulars"></textarea>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            <label class="control-label col-sm-4">Input Tax:</label>
                                            <div class="col-sm-8">
                                                <div type="text" class="comboBox-wide" id="articleItem_inputTax"></div>
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <label class="control-label col-sm-4">Output Tax</label>
                                            <div class="col-sm-8">
                                                <div type="text" class="comboBox-wide" id="articleItem_outputTax"></div>
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <label class="control-label col-sm-4">Withholding Tax</label>
                                            <div class="col-sm-8">
                                                <div type="text" class="comboBox-wide" id="articleItem_withholdingTax"></div>
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <label class="control-label col-sm-4">Inventory</label>
                                            <div class="col-sm-8">
                                                <input type="checkbox" id="articleItem_Inventory" />
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <label class="control-label col-sm-4">Old Manual Code</label>
                                            <div class="col-sm-8">
                                                <input type="text" class="form-control input-sm requiredItem" id="articleItem_oldManualCode" placeholder="Old Manual Code" />
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <label class="control-label col-sm-4">Manual Cost</label>
                                            <div class="col-sm-8">
                                                <input type="text" class="form-control input-50 numberField input-sm requiredItem" id="articleItem_manualCost" placeholder="0.00" />
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </form>
                        </div>
                        <br />
                        <!-- Item Lines -->
                        <ul class="nav nav-tabs " role="tablist" id="myTab">
                            <li role="presentation" class="active"><a data-toggle="tab" href="#UnitConversion" id="unitConversionTabId">Unit Conversion</a></li>
                            <li role="presentation"><a data-toggle="tab" href="#Component" id="componentTabId">Component</a></li>
                            <li role="presentation"><a data-toggle="tab" href="#Price" id="priceTabId">Price</a></li>
                            <li role="presentation"><a data-toggle="tab" href="#Inventory" id="inventoryTabId">Inventory</a></li>
                            <li role="presentation"><a data-toggle="tab" href="#GLAccount" id="glAccountTabId">GL Account</a></li>
                            <li role="presentation"><a data-toggle="tab" href="#FixedAsset" id="fixedAssetTabId">Fixed Asset</a></li>
                        </ul>
                        <br />
                        <div class="tab-content">
                            <!-- UnitConversion List -->
                            <div id="UnitConversion" class="tab-pane fade in active">
                                <div class="row">
                                    <div class="col-lg-12" align="right">
                                        <button class="btn btn-primary btn-sm" id="btnAddUnitConversion" onclick="cmdAddUnitConversion_OnClick()"><i class="fa fa-plus"></i> Add</button>
                                    </div>
                                </div>
                                <br />
                                <div class="row">
                                    <div class="col-lg-12">
                                        <div id="UnitConversionGrid" class="grid"></div>
                                    </div>
                                </div>
                            </div>

                            <!-- Component List -->
                            <div id="Component" class="tab-pane fade in">
                                <div class="row">
                                    <div class="col-lg-12" align="right">
                                        <button class="btn btn-primary btn-sm" id="btnAddComponent" onclick="cmdAddComponent_OnClick()"><i class="fa fa-plus"></i> Add</button>
                                    </div>
                                </div>
                                <br />
                                <div class="row">
                                    <div class="col-lg-12">
                                        <div id="ComponentGrid" class="grid"></div>
                                    </div>
                                </div>
                            </div>

                            <!-- Price List -->
                            <div id="Price" class="tab-pane fade in">
                                <div class="row">
                                    <div class="col-lg-12" align="right">
                                        <button class="btn btn-primary btn-sm" id="btnAddPrice" onclick="cmdAddPrice_OnClick()"><i class="fa fa-plus"></i> Add</button>
                                    </div>
                                </div>
                                <br />
                                <div class="row">
                                    <div class="col-lg-12">
                                        <div id="PriceGrid" class="grid"></div>
                                    </div>
                                </div>
                            </div>

                            <!-- Inventory List -->
                            <div id="Inventory" class="tab-pane fade in">
                                <br />
                                <div class="row">
                                    <div class="col-lg-12">
                                        <div id="InventoryGrid" class="grid"></div>
                                    </div>
                                </div>
                            </div>

                            <!-- GL Account  -->
                            <div id="GLAccount" class="tab-pane fade in">
                                <br />
                                <div class="well">
                                    <form class="form-horizontal" role="form">
                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="form-group">
                                                    <label class="control-label col-sm-4">Account</label>
                                                    <div class="col-sm-8">
                                                        <div class="input-30" id="Item_AccountCode"></div>
                                                        <div class="input-68" id="Item_Account"></div>
                                                    </div>
                                                </div>
                                                <div class="form-group">
                                                    <label class="control-label col-sm-4">Sales Account</label>
                                                    <div class="col-sm-8">
                                                        <div class="input-30" id="Item_SalesAccountCode"></div>
                                                        <div class="input-68" id="Item_SalesAccount"></div>
                                                    </div>
                                                </div>
                                                <div class="form-group">
                                                    <label class="control-label col-sm-4">Cost Account</label>
                                                    <div class="col-sm-8">
                                                        <div class="input-30" id="Item_CostAccountCode"></div>
                                                        <div class="input-68" id="Item_CostAccount"></div>
                                                    </div>
                                                </div>
                                                <div class="form-group">
                                                    <label class="control-label col-sm-4">Accum Dep Account</label>
                                                    <div class="col-sm-8">
                                                        <div class="input-30" id="Item_AccumDepAccountCode"></div>
                                                        <div class="input-68" id="Item_AccumDepAccount"></div>
                                                    </div>
                                                </div>
                                                <div class="form-group">
                                                    <label class="control-label col-sm-4">Expense Account</label>
                                                    <div class="col-sm-8">
                                                        <div class="input-30" id="Item_ExpenseAccountCode"></div>
                                                        <div class="input-68" id="Item_ExpenseAccount"></div>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-md-6"></div>
                                        </div>
                                    </form>
                                </div>
                            </div>

                            <!-- Fixed Asset  -->
                            <div id="FixedAsset" class="tab-pane fade in">
                                <br />
                                <div class="well">
                                    <form class="form-horizontal" role="form">
                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="form-group">
                                                    <label class="control-label col-sm-4">Date Acquired</label>
                                                    <div class="col-sm-8">
                                                        <div class="comboBox-wide" id="Item_DateAcquired"></div>
                                                    </div>
                                                </div>
                                                <div class="form-group">
                                                    <label class="control-label col-sm-4">Useful Life (Years)</label>
                                                    <div class="col-sm-8">
                                                        <input type="text" class="form-control input-50 numberField input-sm" id="Item_UsefulLife" placeholder="0.00" />
                                                    </div>
                                                </div>
                                                <div class="form-group">
                                                    <label class="control-label col-sm-4">Salvage Value</label>
                                                    <div class="col-sm-8">
                                                        <input type="text" class="form-control input-50 numberField input-sm" id="Item_SalvageValue" placeholder="0.00" />
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-md-6"></div>
                                        </div>
                                    </form>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </section>
        </div>

        @Html.Partial("_SoftwareFooter")
    </div>

    <!-- Unit Conversion Edit Detail -->
    <div class="modal fade" id="unitConversionEdit" role="dialog">
        <div class="modal-dialog">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title" id="unitConversionModalLabel">Unit Conversion Detail</h4>
                </div>
                <div class="modal-body">
                    <form id="unitConversionDetailForm">
                        <input type="text" id="unitConversion_Id" />
                        <dl class="dl-horizontal">
                            <dt>Multiplier </dt>
                            <dd><input type="text" class="form-control input-30 numberField input-sm requiredUnitConversion" id="unitConversion_multiplier" placeholder="0.00" /></dd>
                            <dt>Unit</dt>
                            <dd>
                                <div class="comboBox-wide input-50" id="unitConversion_unit"></div>
                            </dd>
                            <dt>Base Unit</dt>
                            <dd>
                                <div class="comboBox-wide input-50" id="unitConversion_baseUnit"></div>
                            </dd>
                            <dt>Count Unit</dt>
                            <dd><input type="checkbox" id="unitConversion_countUnit" /></dd>
                        </dl>
                    </form>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary btn-sm" id="cmdSaveUnitConversionButton" onclick="cmdUnitConversionSaveButton_OnClick()"><i class="fa fa-save"></i> Save</button>
                    <button id="cmdUnitConversionDetailCloseButton" class="btn btn-danger btn-sm" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Unit Conversion Delete Modal Confirmation -->
    <div class="modal fade" id="deleteUnitConversionConfirm" role="dialog">
        <div class="modal-dialog modal-sm">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Delete Unit Conversion <i class="fa fa-trash"></i></h4>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete this?
                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger btn-sm" id="cmdConfirmDeleteUnitConversion" onclick="cmdUnitConversionConfirmDeleteButton_OnClick()"><i class="fa fa-trash"></i> Delete</button>
                    <button id="cmdConfirmDeleteUnitConversionCloseButton" class="btn btn-primary btn-sm" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Componenet Edit Detail -->
    <div class="modal fade" id="componentEdit" role="dialog">
        <div class="modal-dialog">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title" id="componentModalLabel">Component Detail</h4>
                </div>
                <div class="modal-body">
                    <form id="componentDetailForm">
                        <input type="hidden" id="component_Id" />
                        <dl class="dl-horizontal">
                            <dt>Component</dt>
                            <dd>
                                <div class="input-30" id="component_ManualCode"></div>
                                <div class="input-68" id="component_Component"></div>
                            </dd>
                            <dt>Quantity</dt>
                            <dd><input type="text" class="form-control input-50 numberField input-sm" id="component_Quantity" placeholder="0.00" /></dd>
                            <dt>Unit</dt>
                            <dd>
                                <div class="input-50" id="component_unit"></div>
                            </dd>
                            <dt>Cost</dt>
                            <dd><input type="text" class="form-control input-50 numberField input-sm requiredComponent" id="component_cost" placeholder="0.00" /></dd>
                            <dt>Amount</dt>
                            <dd><input type="text" class="form-control input-50 numberField input-sm requiredComponent" id="component_amount" placeholder="0.00" /></dd>
                            <dt>Particulars</dt>
                            <dd><textarea class="form-control textarea-custom requiredComponent" id="component_particulars" placeholder="Particulars"></textarea></dd>
                        </dl>
                    </form>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary btn-sm" id="cmdSaveComponenetButton" onclick="cmdComponenetSaveButton_OnClick()"><i class="fa fa-save"></i> Save</button>
                    <button id="cmdUnitComponenetDetailCloseButton" class="btn btn-danger btn-sm" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Componenet Delete Modal Confirmation -->
    <div class="modal fade" id="deleteComponenetConfirm" role="dialog">
        <div class="modal-dialog modal-sm">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Delete Componenet <i class="fa fa-trash"></i></h4>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete this?
                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger btn-sm" id="cmdConfirmDeleteComponenet" onclick="cmdComponenetConfirmDeleteButton_OnClick()"><i class="fa fa-trash"></i> Delete</button>
                    <button id="cmdConfirmDeleteComponenetCloseButton" class="btn btn-primary btn-sm" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Price Edit Detail -->
    <div class="modal fade" id="priceEdit" role="dialog">
        <div class="modal-dialog">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title" id="priceModalLabel">Price Detail</h4>
                </div>
                <div class="modal-body">
                    <form id="priceDetailForm">
                        <input type="hidden" id="price_Id" />
                        <dl class="dl-horizontal">
                            <dt>Price Description</dt>
                            <dd><input type="text" class="form-control input-sm requiredPrice" id="price_PriceDescription" placeholder="Price Description" /></dd>
                            <dt>Price</dt>
                            <dd><input type="text" class="form-control input-50 numberField input-sm requiredPrice" id="price_Price" placeholder="0.00" /></dd>
                            <dt>Remarks</dt>
                            <dd><textarea class="form-control textarea-custom requiredPrice" id="price_Remarks" placeholder="Remarks"></textarea></dd>
                        </dl>
                    </form>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary btn-sm" id="cmdSavePriceButton" onclick="cmdPriceSaveButton_OnClick()"><i class="fa fa-save"></i> Save</button>
                    <button id="cmdPriceDetailCloseButton" class="btn btn-danger btn-sm" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Price Delete Modal Confirmation -->
    <div class="modal fade" id="deletPriceConfirm" role="dialog">
        <div class="modal-dialog modal-sm">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Delete Price <i class="fa fa-trash"></i></h4>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete this?
                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger btn-sm" id="cmdConfirmDeletePrice" onclick="cmdPriceConfirmDeleteButton_OnClick()"><i class="fa fa-trash"></i> Delete</button>
                    <button id="cmdConfirmDeletePriceCloseButton" class="btn btn-primary btn-sm" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>

    @Scripts.Render("~/Scripts/Software-js")
    <script type="text/javascript">
        // ================
        // Global Variables
        // ================
        var items;
        var dateAcquired;
        var articleItemGroups;
        var articleItemUnits;
        var taxTypes;
        var accounts;
        var cboAccountCode;
        var cboAccount;
        var cboSaleAccountCode;
        var cboSaleAccount;
        var cboCostAccountCode;
        var cboCostAccount;
        var cboAccumDepAccountCode;
        var cboAccumDepAccount;
        var cboExpenseAccountCode;
        var cboExpenseAccount;
        var cboArticleGroupForItem;
        var cboArticleUnitForItem;
        var cboArticleInputTaxTypeForItem;
        var cboArticleOutputTaxTypeForItem;
        var cboArticleWithholdingTaxTypeForItem;
        var itemArticleGroupSelectedValue = "";
        var itemUnitSelectedValue = "";
        var itemInputTaxSelectedValue = "";
        var itemOutputTaxSelectedValue = "";
        var itemWithHoldingTaxSelectedValue = "";
        var accountSelectedValue = "";
        var salesAccountSelectedValue = "";
        var costAccountSelectedValue = "";
        var accumDepAccountSelectedValue = "";
        var expenseAccountSelectedValue = "";
        var IsLocked;
        var itemId = getParam('ItemId');

        // =======================
        // Get URL Parameter Value
        // =======================
        function getParam(name) {
            name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
            var regexS = "[\\?&]" + name + "=([^&#]*)";
            var regex = new RegExp(regexS);
            var results = regex.exec(window.location.href);
            if (results == null) {
                return "";
            } else {
                return results[1];
            }
        }

        // ==============================
        // Get Article for item by its ID
        // ==============================
        function getArticleItemById() {
            NProgress.start();
            var items = new wijmo.collections.ObservableArray;
            if (document.location.search.length > 0) {
                $.ajax({
                    url: '/api/article/' + itemId,
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    data: {},
                    success: function (itemResults) {
                        if (itemResults != null) {
                            document.getElementById('Item_UsefulLife').value = itemResults.UsefulLife;
                            document.getElementById('Item_SalvageValue').value = itemResults.SalvageValue;
                            document.getElementById('articleItem_code').value = itemResults.ArticleCode;
                            document.getElementById('articleItem_manualCode').value = itemResults.ManualArticleCode;
                            document.getElementById('articleItem_item').value = itemResults.Article;
                            document.getElementById('articleItem_category').value = itemResults.Category;
                            document.getElementById('articleItem_price').value = itemResults.Price;
                            document.getElementById('articleItem_particulars').value = itemResults.Particulars;
                            document.getElementById('articleItem_Inventory').checked = itemResults.IsInventory;
                            document.getElementById('articleItem_oldManualCode').value = itemResults.ManualArticleOldCode;
                            document.getElementById('articleItem_manualCost').value = itemResults.Cost;
                            document.getElementById('createdBy').innerHTML = itemResults.CreatedBy;
                            document.getElementById('createdDate').innerHTML = itemResults.CreatedDateTime;
                            document.getElementById('updatedBy').innerHTML = itemResults.UpdatedBy;
                            document.getElementById('updatedDate').innerHTML = itemResults.UpdatedDateTime;
                            itemArticleGroupSelectedValue = itemResults.ArticleGroup;
                            itemUnitSelectedValue = itemResults.Unit;
                            itemInputTaxSelectedValue = itemResults.InputTax;
                            itemOutputTaxSelectedValue = itemResults.OutputTax;
                            itemWithHoldingTaxSelectedValue = itemResults.WTaxType;
                            accountSelectedValue = itemResults.Account;
                            salesAccountSelectedValue = itemResults.SalesAccount;
                            costAccountSelectedValue = itemResults.CostAccount;
                            accumDepAccountSelectedValue = itemResults.AssetAccount;
                            expenseAccountSelectedValue = itemResults.ExpenseAccount;
                            NProgress.done();

                            if (itemResults.IsLocked == true) {
                                document.getElementById('articleItem_manualCode').disabled = true;
                                document.getElementById('articleItem_item').disabled = true;
                                document.getElementById('articleItem_category').disabled = true;
                                document.getElementById('articleItem_price').disabled = true;
                                document.getElementById('articleItem_particulars').disabled = true;
                                document.getElementById('articleItem_Inventory').disabled = true;
                                document.getElementById('articleItem_oldManualCode').disabled = true;
                                document.getElementById('articleItem_manualCost').disabled = true;
                                document.getElementById('Item_UsefulLife').disabled = true;
                                document.getElementById('Item_SalvageValue').disabled = true;
                                $('#item_SaveButton').prop('disabled', true);
                                $('#item_LockButton').prop('disabled', true);
                                $('#item_UnlockButton').prop('disabled', false);
                                $('#item_CloseButton').prop('disabled', false);
                                $('#btnAddUnitConversion').prop('disabled', true);
                                $('#btnAddPrice').prop('disabled', true);
                                $('#btnAddComponent').prop('disabled', true);
                                createInputDateForDateAquired(true, itemResults.DateAcquired);
                                IsLocked = true;
                            } else {
                                document.getElementById('articleItem_manualCode').disabled = false;
                                document.getElementById('articleItem_item').disabled = false;
                                document.getElementById('articleItem_category').disabled = false;
                                document.getElementById('articleItem_price').disabled = false;
                                document.getElementById('articleItem_particulars').disabled = false;
                                document.getElementById('articleItem_Inventory').disabled = false;
                                document.getElementById('articleItem_oldManualCode').disabled = false;
                                document.getElementById('articleItem_manualCost').disabled = false;
                                document.getElementById('Item_UsefulLife').disabled = false;
                                document.getElementById('Item_SalvageValue').disabled = false;
                                $('#item_SaveButton').prop('disabled', true);
                                $('#item_LockButton').prop('disabled', false);
                                $('#item_UnlockButton').prop('disabled', true);
                                $('#item_CloseButton').prop('disabled', false);
                                $('#btnAddUnitConversion').prop('disabled', false);
                                $('#btnAddPrice').prop('disabled', false);
                                $('#btnAddComponent').prop('disabled', false);
                                createInputDateForDateAquired(false, itemResults.DateAcquired);
                                IsLocked = false;
                            }

                            getLastArticleCode();
                            getArticleItemGroupForComboBox();
                            getArticleItemUnitForComboBox();
                            getArticleTaxTypeForComboBox();
                        } else {
                            confirm("No Data");
                            window.location = '/Software/Item';
                        }
                    }
                }).fail(function () {
                    confirm("URL Not Found");
                    window.location = '/Software/Item';
                });
            } else {
                getLastArticleCode();
                getArticleItemGroupForComboBox();
                getArticleItemUnitForComboBox();
                getArticleTaxTypeForComboBox();

                NProgress.done();
            }
            return items;
        }

        // =================
        // IsLocked Disabled
        // =================
        function isLockedDisabledDropdown(items) {
            var disabled;
            if (items == 0) {
                disabled = true;
            } else {
                if (IsLocked == true) {
                    disabled = true;
                } else {
                    disabled = false;
                }
            }
            return disabled;
        }

        // ==================================
        // create Input date for Date Aquired
        // ==================================
        function createInputDateForDateAquired(disabled, dateValue) {
            dateAcquired.dispose();
            dateAcquired = new wijmo.input.InputDate('#Item_DateAcquired', {
                disabled: disabled,
                format: 'MM/dd/yyyy',
                value: new Date(dateValue),
                mask: '99/99/9999'
            });
            return dateAcquired.value;
        }

        // ==============================
        // Get Last Id for Item by its ID
        // ==============================
        function getLastInsertedIdItemByArticleTypeId() {
            $.ajax({
                url: '/api/articleLastIdByArticleTypeId/1',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (lastItemResults) {
                    window.setTimeout(function () {
                        window.location = '/Software/ItemDetail?ItemId=' + lastItemResults.Id;
                    }, 1000);
                }
            });
        }

        // =====================
        // Get Artile Item Group
        // =====================
        function getArticleItemGroupForComboBox() {
            articleItemGroups = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listArticleGroupByArticleTypeId/1',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (itemGroupResults) {
                    if (itemGroupResults.length > 0) {
                        for (i = 0; i < itemGroupResults.length; i++) {
                            articleItemGroups.push({
                                ArticleGroupId: itemGroupResults[i]["Id"],
                                ArticleGroup: itemGroupResults[i]["ArticleGroup"],
                                AccountId: itemGroupResults[i]["AccountId"],
                                AccountCode: itemGroupResults[i]["AccountCode"],
                                Account: itemGroupResults[i]["Account"],
                                SalesAccountId: itemGroupResults[i]["SalesAccountId"],
                                SalesAccountCode: itemGroupResults[i]["SalesAccountCode"],
                                SalesAccount: itemGroupResults[i]["SalesAccount"],
                                CostAccountId: itemGroupResults[i]["CostAccountId"],
                                CostAccountCode: itemGroupResults[i]["CostAccountCode"],
                                CostAccount: itemGroupResults[i]["CostAccount"],
                                AssetAccountId: itemGroupResults[i]["AssetAccountId"],
                                AssetAccountCode: itemGroupResults[i]["AssetAccountCode"],
                                AssetAccount: itemGroupResults[i]["AssetAccount"],
                                ExpenseAccountId: itemGroupResults[i]["ExpenseAccountId"],
                                ExpenseAccountCode: itemGroupResults[i]["ExpenseAccountCode"],
                                ExpenseAccount: itemGroupResults[i]["ExpenseAccount"]
                            });
                        }
                        createCboForArticleItemGroup(articleItemGroups);
                        getAccount();
                    } else {
                        createCboForArticleItemGroup(articleItemGroups);
                        getAccount();
                    }
                }
            });
        }

        // ==================
        // CBO for Item Group
        // ==================
        function createCboForArticleItemGroup(articleItemGroups) {
            cboArticleGroupForItem.dispose();
            cboArticleGroupForItem = new wijmo.input.ComboBox('#articleItem_itemGroup', {
                disabled: isLockedDisabledDropdown(articleItemGroups),
                placeholder: "Item Group",
                itemsSource: articleItemGroups,
                displayMemberPath: "ArticleGroup",
                isEditable: false,
                selectedValuePath: "ArticleGroup",
                selectedValue: itemArticleGroupSelectedValue.toString(),
                onSelectedIndexChanged: function () {
                    accountSelectedValue = this.selectedItem["Account"];
                    salesAccountSelectedValue = this.selectedItem["SalesAccount"];
                    costAccountSelectedValue = this.selectedItem["CostAccount"];
                    accumDepAccountSelectedValue = this.selectedItem["AssetAccount"];
                    expenseAccountSelectedValue = this.selectedItem["ExpenseAccount"];
                    getAccount();
                }
            });
        }

        // ====================
        // Get Artile Item Unit
        // ====================
        function getArticleItemUnitForComboBox() {
            articleItemUnits = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listUnit',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (itemUnitResults) {
                    if (itemUnitResults.length > 0) {
                        for (i = 0; i < itemUnitResults.length; i++) {
                            articleItemUnits.push({
                                ArticleUnitId: itemUnitResults[i]["Id"],
                                ArticleUnit: itemUnitResults[i]["Unit"]
                            });
                        }
                        createCboForArticleItemUnit(articleItemUnits);
                    } else {
                        createCboForArticleItemUnit(articleItemUnits);
                    }
                }
            });
        }

        // =================
        // CBO for Item Unit
        // =================
        function createCboForArticleItemUnit(articleItemUnits) {
            cboArticleUnitForItem.dispose();
            cboArticleUnitForItem = new wijmo.input.ComboBox('#articleItem_unit', {
                disabled: isLockedDisabledDropdown(articleItemUnits),
                placeholder: "Select Unit",
                itemsSource: articleItemUnits,
                displayMemberPath: "ArticleUnit",
                isEditable: false,
                selectedValuePath: "ArticleUnit",
                selectedValue: itemUnitSelectedValue.toString()
            });
        }

        // ===================
        // Get Artile Tax Type
        // ===================
        function getArticleTaxTypeForComboBox() {
            taxTypes = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listTaxType',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (taxTypeResults) {
                    if (taxTypeResults.length > 0) {
                        for (i = 0; i < taxTypeResults.length; i++) {
                            taxTypes.push({
                                ArticleTaxTypeId: taxTypeResults[i]["Id"],
                                ArticleTax: taxTypeResults[i]["TaxType"]
                            });
                        }
                        createCboForArticleTaxType(taxTypes);
                    } else {
                        createCboForArticleTaxType(taxTypes);
                    }
                }
            });
        }

        // ======================
        // CBO for input tax type
        // ======================
        function createCboForArticleTaxType(taxTypes) {
            cboArticleInputTaxTypeForItem.dispose();
            cboArticleInputTaxTypeForItem = new wijmo.input.ComboBox('#articleItem_inputTax', {
                disabled: isLockedDisabledDropdown(taxTypes),
                placeholder: "Input Tax Type",
                itemsSource: taxTypes,
                displayMemberPath: "ArticleTax",
                isEditable: false,
                selectedValuePath: "ArticleTax",
                selectedValue: itemInputTaxSelectedValue.toString()
            });

            cboArticleOutputTaxTypeForItem.dispose();
            cboArticleOutputTaxTypeForItem = new wijmo.input.ComboBox('#articleItem_outputTax', {
                disabled: isLockedDisabledDropdown(taxTypes),
                placeholder: "Output Tax Type",
                itemsSource: taxTypes,
                displayMemberPath: "ArticleTax",
                isEditable: false,
                selectedValuePath: "ArticleTax",
                selectedValue: itemOutputTaxSelectedValue.toString()
            });

            cboArticleWithholdingTaxTypeForItem.dispose();
            cboArticleWithholdingTaxTypeForItem = new wijmo.input.ComboBox('#articleItem_withholdingTax', {
                disabled: isLockedDisabledDropdown(taxTypes),
                placeholder: "Withholding Tax Type",
                itemsSource: taxTypes,
                displayMemberPath: "ArticleTax",
                isEditable: false,
                selectedValuePath: "ArticleTax",
                selectedValue: itemWithHoldingTaxSelectedValue.toString()
            });
        }

        // ===========
        // Get Account
        // ===========
        function getAccount() {
            accounts = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listAccount',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (accountResults) {
                    if (accountResults.length > 0) {
                        for (i = 0; i < accountResults.length; i++) {
                            accounts.push({
                                AccountId: accountResults[i]["Id"],
                                AccountCode: accountResults[i]["AccountCode"],
                                Account: accountResults[i]["Account"]
                            });
                        }
                        createCboForGLAccountCode(accounts);
                        createCboForGLAccount(accounts);
                    } else {
                        createCboForGLAccountCode(accounts);
                        createCboForGLAccount(accounts);
                    }
                }
            });
        }

        // ====================
        // CBO for Account Code
        // ====================
        function createCboForGLAccountCode(accounts) {
            cboAccountCode.dispose();
            cboAccountCode = new wijmo.input.ComboBox('#Item_AccountCode', {
                disabled: true,
                placeholder: "Account Code",
                itemsSource: accounts,
                displayMemberPath: "AccountCode",
                isEditable: false,
                selectedValuePath: "AccountCode",
                selectedValue: cboArticleGroupForItem.selectedItem["AccountCode"].toString()
            });

            cboSaleAccountCode.dispose();
            cboSaleAccountCode = new wijmo.input.ComboBox('#Item_SalesAccountCode', {
                disabled: true,
                placeholder: "Sales Account Code",
                itemsSource: accounts,
                displayMemberPath: "AccountCode",
                isEditable: false,
                selectedValuePath: "AccountCode",
                selectedValue: cboArticleGroupForItem.selectedItem["SalesAccountCode"].toString()
            });

            cboCostAccountCode.dispose();
            cboCostAccountCode = new wijmo.input.ComboBox('#Item_CostAccountCode', {
                disabled: true,
                placeholder: "Cost Account Code",
                itemsSource: accounts,
                displayMemberPath: "AccountCode",
                isEditable: false,
                selectedValuePath: "AccountCode",
                selectedValue: cboArticleGroupForItem.selectedItem["CostAccountCode"].toString()
            });

            cboAccumDepAccountCode.dispose();
            cboAccumDepAccountCode = new wijmo.input.ComboBox('#Item_AccumDepAccountCode', {
                disabled: true,
                placeholder: "Accum Dep Account Code",
                itemsSource: accounts,
                displayMemberPath: "AccountCode",
                isEditable: false,
                selectedValuePath: "AccountCode",
                selectedValue: cboArticleGroupForItem.selectedItem["AssetAccountCode"].toString()
            });

            cboExpenseAccountCode.dispose();
            cboExpenseAccountCode = new wijmo.input.ComboBox('#Item_ExpenseAccountCode', {
                disabled: true,
                placeholder: "Accum Dep Account Code",
                itemsSource: accounts,
                displayMemberPath: "AccountCode",
                isEditable: false,
                selectedValuePath: "AccountCode",
                selectedValue: cboArticleGroupForItem.selectedItem["ExpenseAccountCode"].toString()
            });
        }

        // ===============
        // CBO for Account
        // ===============
        function createCboForGLAccount(accounts) {
            cboAccount.dispose();
            cboAccount = new wijmo.input.ComboBox('#Item_Account', {
                disabled: true,
                placeholder: "Account",
                itemsSource: accounts,
                displayMemberPath: "Account",
                isEditable: false,
                selectedValuePath: "Account",
                selectedValue: cboArticleGroupForItem.selectedItem["Account"].toString()
            });

            cboSaleAccount.dispose();
            cboSaleAccount = new wijmo.input.ComboBox('#Item_SalesAccount', {
                disabled: true,
                placeholder: "Sales Account",
                itemsSource: accounts,
                displayMemberPath: "Account",
                isEditable: false,
                selectedValuePath: "Account",
                selectedValue: cboArticleGroupForItem.selectedItem["SalesAccount"].toString()
            });

            cboCostAccount.dispose();
            cboCostAccount = new wijmo.input.ComboBox('#Item_CostAccount', {
                disabled: true,
                placeholder: "Cost Account",
                itemsSource: accounts,
                displayMemberPath: "Account",
                isEditable: false,
                selectedValuePath: "Account",
                selectedValue: cboArticleGroupForItem.selectedItem["CostAccount"].toString()
            });

            cboAccumDepAccount.dispose();
            cboAccumDepAccount = new wijmo.input.ComboBox('#Item_AccumDepAccount', {
                disabled: true,
                placeholder: "Accum Dep Account",
                itemsSource: accounts,
                displayMemberPath: "Account",
                isEditable: false,
                selectedValuePath: "Account",
                selectedValue: cboArticleGroupForItem.selectedItem["AssetAccount"].toString()
            });

            cboExpenseAccount.dispose();
            cboExpenseAccount = new wijmo.input.ComboBox('#Item_ExpenseAccount', {
                disabled: true,
                placeholder: "Accum Dep Account",
                itemsSource: accounts,
                displayMemberPath: "Account",
                isEditable: false,
                selectedValuePath: "Account",
                selectedValue: cboArticleGroupForItem.selectedItem["ExpenseAccount"].toString()
            });
        }

        // =====================
        // Item Entry Validation
        // =====================
        function itemEntryValidation() {
            var isValid = true;
            $('.requiredItem').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                } else {
                    $(this).css({
                        "border": "",
                    });
                }
            });
            return isValid;
        }

        // ===============================
        // Item drop down field validation
        // ===============================
        function dropdownValidation() {
            if (cboArticleGroupForItem.selectedItem["ArticleGroupId"].toString() == '') {
                document.getElementById("articleItem_itemGroup").style.border = "1px solid red";
            } else {
                document.getElementById("articleItem_itemGroup").style.border = "1px solid #C8C8C8";
            }

            if (cboArticleUnitForItem.selectedItem["ArticleUnitId"].toString() == '') {
                document.getElementById("articleItem_unit").style.border = "1px solid red";
            } else {
                document.getElementById("articleItem_unit").style.border = "1px solid #C8C8C8 ";
            }

            if (cboArticleInputTaxTypeForItem.selectedItem["ArticleTaxTypeId"].toString() == '') {
                document.getElementById("articleItem_inputTax").style.border = "1px solid red";
            } else {
                document.getElementById("articleItem_inputTax").style.border = "1px solid #C8C8C8 ";
            }

            if (cboArticleOutputTaxTypeForItem.selectedItem["ArticleTaxTypeId"].toString() == '') {
                document.getElementById("articleItem_outputTax").style.border = "1px solid red";
            } else {
                document.getElementById("articleItem_outputTax").style.border = "1px solid #C8C8C8";
            }

            if (cboArticleWithholdingTaxTypeForItem.selectedItem["ArticleTaxTypeId"].toString() == '') {
                document.getElementById("articleItem_withholdingTax").style.border = "1px solid red";
            } else {
                document.getElementById("articleItem_withholdingTax").style.border = "1px solid #C8C8C8";
            }

            if (cboAccount.selectedItem["AccountId"].toString() == '') {
                document.getElementById("Item_Account").style.border = "1px solid red";
            } else {
                document.getElementById("Item_Account").style.border = "1px solid #C8C8C8";
            }

            if (cboSaleAccount.selectedItem["AccountId"].toString() == '') {
                document.getElementById("Item_SalesAccount").style.border = "1px solid red";
            } else {
                document.getElementById("Item_SalesAccount").style.border = "1px solid #C8C8C8";
            }

            if (cboCostAccount.selectedItem["AccountId"].toString() == '') {
                document.getElementById("Item_CostAccount").style.border = "1px solid red";
            } else {
                document.getElementById("Item_CostAccount").style.border = "1px solid #C8C8C8";
            }

            if (cboAccumDepAccount.selectedItem["AccountId"].toString() == '') {
                document.getElementById("Item_AccumDepAccount").style.border = "1px solid red";
            } else {
                document.getElementById("Item_AccumDepAccount").style.border = "1px solid #C8C8C8";
            }

            if (cboExpenseAccount.selectedItem["AccountId"].toString() == '') {
                document.getElementById("Item_ExpenseAccount").style.border = "1px solid red";
            } else {
                document.getElementById("Item_ExpenseAccount").style.border = "1px solid #C8C8C8";
            }
        }

        // ================
        // Item Data Object
        // ================
        function itemDataObject() {
            var itemObject = new Object();
            itemObject.ArticleCode = document.getElementById('articleItem_code').value;
            itemObject.ManualArticleCode = document.getElementById('articleItem_manualCode').value;
            itemObject.Article = document.getElementById('articleItem_item').value;
            itemObject.Category = document.getElementById('articleItem_category').value;
            itemObject.ArticleGroupId = cboArticleGroupForItem.selectedItem["ArticleGroupId"];
            itemObject.AccountId = cboAccount.selectedItem["AccountId"];
            itemObject.SalesAccountId = cboSaleAccount.selectedItem["AccountId"];
            itemObject.CostAccountId = cboCostAccount.selectedItem["AccountId"];
            itemObject.AssetAccountId = cboAccumDepAccount.selectedItem["AccountId"];
            itemObject.ExpenseAccountId = cboExpenseAccount.selectedItem["AccountId"];
            itemObject.UnitId = cboArticleUnitForItem.selectedItem["ArticleUnitId"];
            itemObject.InputTaxId = cboArticleInputTaxTypeForItem.selectedItem["ArticleTaxTypeId"];
            itemObject.OutputTaxId = cboArticleOutputTaxTypeForItem.selectedItem["ArticleTaxTypeId"];
            itemObject.WTaxTypeId = cboArticleWithholdingTaxTypeForItem.selectedItem["ArticleTaxTypeId"];
            itemObject.Price = document.getElementById('articleItem_price').value;
            itemObject.Cost = document.getElementById('articleItem_manualCost').value;
            itemObject.IsInventory = document.getElementById('articleItem_Inventory').checked;
            itemObject.Particulars = document.getElementById('articleItem_particulars').value;
            itemObject.DateAcquired = dateAcquired.value;
            itemObject.UsefulLife = document.getElementById('Item_UsefulLife').value;
            itemObject.SalvageValue = document.getElementById('Item_SalvageValue').value;
            itemObject.ManualArticleOldCode = document.getElementById('articleItem_oldManualCode').value;
            var data = JSON.stringify(itemObject);
            return data;
        }

        // =========
        // Save Item
        // =========
        function itemSaveButton_OnClick() {
            dropdownValidation();
            if (itemEntryValidation() == false) {
                toastr.error("Invalid Entry");
            } else {
                document.getElementById('item_SaveButton').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Saving...";
                $('#item_SaveButton').prop('disabled', true);
                $('#item_LockButton').prop('disabled', true);
                $('#item_UnlockButton').prop('disabled', true);
                $('#item_CloseButton').prop('disabled', true);

                $.ajax({
                    type: "POST",
                    url: '/api/addArticle/1',
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    data: itemDataObject(),
                    statusCode: {
                        200: function () {
                            document.getElementById('item_SaveButton').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Saving...";
                            $('#item_SaveButton').prop('disabled', true);
                            $('#item_LockButton').prop('disabled', true);
                            $('#item_UnlockButton').prop('disabled', true);
                            $('#item_CloseButton').prop('disabled', true);
                            toastr.success("Successfully saved");
                            setTimeout(getLastInsertedIdItemByArticleTypeId, 1000);
                        },
                        404: function () {
                            document.getElementById('item_SaveButton').innerHTML = "<i class='fa fa-save'></i> Save";
                            $('#item_SaveButton').prop('disabled', false);
                            $('#item_LockButton').prop('disabled', true);
                            $('#item_UnlockButton').prop('disabled', true);
                            $('#item_CloseButton').prop('disabled', false);
                            toastr.error("Save request not found");
                        },
                        400: function () {
                            document.getElementById('item_SaveButton').innerHTML = "<i class='fa fa-save'></i> Save";
                            $('#item_SaveButton').prop('disabled', false);
                            $('#item_LockButton').prop('disabled', true);
                            $('#item_UnlockButton').prop('disabled', true);
                            $('#item_CloseButton').prop('disabled', false);
                            toastr.error("Cannot save new record");
                        }
                    }
                });
            }
        }

        // =========
        // Lock Item
        // =========
        function itemLockButton_OnClick() {
            dropdownValidation();
            if (itemEntryValidation() == false) {
                toastr.error("Invalid Entry");
            } else {
                document.getElementById('item_LockButton').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Locking...";
                $('#item_SaveButton').prop('disabled', true);
                $('#item_LockButton').prop('disabled', true);
                $('#item_UnlockButton').prop('disabled', true);
                $('#item_CloseButton').prop('disabled', true);

                $.ajax({
                    type: "PUT",
                    url: '/api/updateArticle/' + itemId + '/1',
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    data: itemDataObject(),
                    statusCode: {
                        200: function () {
                            document.getElementById('item_LockButton').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Locking...";
                            $('#item_SaveButton').prop('disabled', true);
                            $('#item_LockButton').prop('disabled', true);
                            $('#item_UnlockButton').prop('disabled', true);
                            $('#item_CloseButton').prop('disabled', true);
                            toastr.success("Locked");
                            window.setTimeout(function () {
                                location.reload()
                            }, 1000);
                        },
                        404: function () {
                            document.getElementById('item_LockButton').innerHTML = "<i class='fa fa-lock'></i> Lock";
                            $('#item_SaveButton').prop('disabled', false);
                            $('#item_LockButton').prop('disabled', false);
                            $('#item_UnlockButton').prop('disabled', true);
                            $('#item_CloseButton').prop('disabled', false);
                            toastr.error("Lock request not found");
                        },
                        400: function () {
                            document.getElementById('item_LockButton').innerHTML = "<i class='fa fa-lock'></i> Lock";
                            $('#item_SaveButton').prop('disabled', false);
                            $('#item_LockButton').prop('disabled', false);
                            $('#item_UnlockButton').prop('disabled', true);
                            $('#item_CloseButton').prop('disabled', false);
                            toastr.error("Cannot lock record");
                        }
                    }
                });
            }
        }

        // ===========
        // Unlock Item
        // ===========
        function itemUnlockButton_OnClick() {
            document.getElementById('item_UnlockButton').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Unlocking...";
            $('#item_SaveButton').prop('disabled', true);
            $('#item_LockButton').prop('disabled', true);
            $('#item_UnlockButton').prop('disabled', true);
            $('#item_CloseButton').prop('disabled', true);

            $.ajax({
                type: "PUT",
                url: '/api/unlockArticle/' + itemId,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: {},
                statusCode: {
                    200: function () {
                        document.getElementById('item_UnlockButton').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Unlocking...";
                        $('#item_SaveButton').prop('disabled', true);
                        $('#item_LockButton').prop('disabled', true);
                        $('#item_UnlockButton').prop('disabled', true);
                        $('#item_CloseButton').prop('disabled', true);
                        toastr.success("Unlocked");
                        window.setTimeout(function () {
                            location.reload()
                        }, 1000);
                    },
                    404: function () {
                        document.getElementById('item_UnlockButton').innerHTML = "<i class='fa fa-unlock'></i> Unlock";
                        $('#item_SaveButton').prop('disabled', true);
                        $('#item_LockButton').prop('disabled', true);
                        $('#item_UnlockButton').prop('disabled', false);
                        $('#item_CloseButton').prop('disabled', false);
                        toastr.error("Unlock request not found");
                    },
                    400: function () {
                        document.getElementById('item_UnlockButton').innerHTML = "<i class='fa fa-unlock'></i> Unlock";
                        $('#item_SaveButton').prop('disabled', true);
                        $('#item_LockButton').prop('disabled', true);
                        $('#item_UnlockButton').prop('disabled', false);
                        $('#item_CloseButton').prop('disabled', false);
                        toastr.error("Cannot unlock record");
                    }
                }
            });
        }

        // =================
        // Close Item Button
        // =================
        function itemCloseButton_OnClick() {
            window.location = '/Software/Items';
        }

        // ========================================================
        // Function with leading zeroes to display the article code
        // ========================================================
        function zerofill(number, length) {
            var result = number.toString();
            var pad = length - result.length;
            while (pad > 0) {
                result = '0' + result;
                pad--;
            }
            return result;
        }

        // =========================
        // Get the last Article Code
        // =========================
        function getLastArticleCode() {
            document.getElementById('articleItem_code').disabled = true;
            if (document.location.search.length == 0) {
                var items = new wijmo.collections.ObservableArray;
                $.ajax({
                    url: '/api/articleLastArticleCodeByArticleTypeId/1',
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    data: {},
                    success: function (lastArticleCodeResults) {
                        if (lastArticleCodeResults != null) {
                            var articleCode = parseInt(lastArticleCodeResults.ArticleCode);
                            var articleCodeResults = articleCode + 0000000001;
                            document.getElementById('articleItem_code').value = zerofill(articleCodeResults, 10);
                        } else {
                            document.getElementById('articleItem_code').value = "0000000001";
                        }
                    }
                });

                $('#item_SaveButton').prop('disabled', false);
                $('#item_LockButton').prop('disabled', true);
                $('#item_UnlockButton').prop('disabled', true);
                $('#item_CloseButton').prop('disabled', false);
            }
        }

        // ===========
        // Onload Page
        // ===========
        $(document).ready(function () {
            cboArticleGroupForItem = new wijmo.input.ComboBox('#articleItem_itemGroup');
            cboArticleUnitForItem = new wijmo.input.ComboBox('#articleItem_unit');
            cboArticleInputTaxTypeForItem = new wijmo.input.ComboBox('#articleItem_inputTax');
            cboArticleOutputTaxTypeForItem = new wijmo.input.ComboBox('#articleItem_outputTax');
            cboArticleWithholdingTaxTypeForItem = new wijmo.input.ComboBox('#articleItem_withholdingTax');
            cboAccountCode = new wijmo.input.ComboBox('#Item_AccountCode');
            cboAccount = new wijmo.input.ComboBox('#Item_Account');
            cboSaleAccountCode = new wijmo.input.ComboBox('#Item_SalesAccountCode');
            cboSaleAccount = new wijmo.input.ComboBox('#Item_SalesAccount');
            cboCostAccountCode = new wijmo.input.ComboBox('#Item_CostAccountCode');
            cboCostAccount = new wijmo.input.ComboBox('#Item_CostAccount');
            cboAccumDepAccountCode = new wijmo.input.ComboBox('#Item_AccumDepAccountCode');
            cboAccumDepAccount = new wijmo.input.ComboBox('#Item_AccumDepAccount');
            cboExpenseAccountCode = new wijmo.input.ComboBox('#Item_ExpenseAccountCode');
            cboExpenseAccount = new wijmo.input.ComboBox('#Item_ExpenseAccount');
            dateAcquired = new wijmo.input.InputDate('#Item_DateAcquired', {
                format: 'MM/dd/yyyy',
                value: new Date(),
                mask: '99/99/9999'
            });
            getArticleItemById();

            if (document.location.search.length == 0) {
                $('#item_SaveButton').show();
                $("#item_LockButton").hide();
                $('#item_UnlockButton').hide();

                $('#btnAddUnitConversion').prop('disabled', true);
                $('#btnAddPrice').prop('disabled', true);
                $('#btnAddComponent').prop('disabled', true);
            } else {
                $('#item_SaveButton').hide();
                $("#item_LockButton").show();
                $('#item_UnlockButton').show();

                $('#btnAddUnitConversion').prop('disabled', false);
                $('#btnAddPrice').prop('disabled', false);
                $('#btnAddComponent').prop('disabled', false);
            }
        });
    </script>

    <!-- ======================= -->
    <!-- Unit Conversion Scripts -->
    <!-- ======================= -->
    <script type="text/javascript">
        // ====================================
        // Global Variables for Unit Conversion
        // ====================================
        var unitConversions;
        var unitConversionGrid;
        var unitConversionUnits;
        var cboUnitConversionUnit;
        var cboUnitConversionBaseUnit;
        var unitConversionUnitSelectedValue = "";

        // ========================
        // GET Unit Conversion List
        // ========================
        function getUnitConversion() {
            var unitConversions = new wijmo.collections.ObservableArray;
            if (document.location.search.length > 0) {
                $.ajax({
                    url: '/api/listArticleUnitByArticleId/' + itemId,
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    data: {},
                    success: function (unitConversionResults) {
                        if (unitConversionResults.length > 0) {
                            $.ajax({
                                url: '/api/article/' + itemId,
                                cache: false,
                                type: 'GET',
                                contentType: 'application/json; charset=utf-8',
                                data: {},
                                success: function (itemResults) {

                                    var btnEditId;
                                    var btnDeleteId;
                                    if (itemResults.IsLocked == true) {
                                        btnEditId = "<button class='btn btn-primary btn-xs btn-block' onclick='btnEditUnitConversion_OnClick()' disabled><i class='fa fa-edit'></i> Edit</button>";
                                        btnDeleteId = "<button class='btn btn-danger btn-xs btn-block' onclick='btnDeleteUnitConversion_OnClick()' disabled><i class='fa fa-trash'></i> Delete</button>";
                                    } else {
                                        btnEditId = "<button class='btn btn-primary btn-xs btn-block' onclick='btnEditUnitConversion_OnClick()'><i class='fa fa-edit'></i> Edit</button>";
                                        btnDeleteId = "<button class='btn btn-danger btn-xs btn-block' onclick='btnDeleteUnitConversion_OnClick()'><i class='fa fa-trash'></i> Delete</button>";
                                    }

                                    for (i = 0; i < unitConversionResults.length; i++) {
                                        unitConversions.push({
                                            EditId: btnEditId,
                                            DeleteId: btnDeleteId,
                                            Id: unitConversionResults[i]["Id"],
                                            ArticleId: unitConversionResults[i]["ArticleId"],
                                            Article: unitConversionResults[i]["Article"],
                                            UnitId: unitConversionResults[i]["UnitId"],
                                            Unit: unitConversionResults[i]["Unit"],
                                            Equals: "=",
                                            Multiplier: unitConversionResults[i]["Multiplier"],
                                            IsCountUnit: unitConversionResults[i]["IsCountUnit"],
                                            BaseUnit: itemUnitSelectedValue.toString()
                                        });
                                    }
                                }
                            });
                        }
                    }
                });
            }
            return unitConversions;
        }

        // ======================
        // Unit Conversion - Unit
        // ======================
        function getUnitConversionUnit() {
            unitConversionUnits = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listUnit',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (unitCoversionUnitResults) {
                    if (unitCoversionUnitResults.length > 0) {
                        for (i = 0; i < unitCoversionUnitResults.length; i++) {
                            unitConversionUnits.push({
                                UnitId: unitCoversionUnitResults[i]["Id"],
                                Unit: unitCoversionUnitResults[i]["Unit"]
                            });
                        }
                        createCboForUnitConversionUnit(unitConversionUnits);
                    } else {
                        createCboForUnitConversionUnit(unitConversionUnits);
                    }
                }
            });
        }

        // ============================
        // CBO for Unit Conversion Unit
        // ============================
        function createCboForUnitConversionUnit(unitConversionUnits) {
            cboUnitConversionUnit.dispose();
            cboUnitConversionUnit = new wijmo.input.ComboBox('#unitConversion_unit', {
                placeholder: "Unit",
                itemsSource: unitConversionUnits,
                displayMemberPath: "Unit",
                isEditable: false,
                selectedValuePath: "Unit",
                selectedValue: unitConversionUnitSelectedValue.toString()
            });

            cboUnitConversionBaseUnit.dispose();
            cboUnitConversionBaseUnit = new wijmo.input.ComboBox('#unitConversion_baseUnit', {
                disabled: true,
                placeholder: "Unit",
                itemsSource: unitConversionUnits,
                displayMemberPath: "Unit",
                isEditable: false,
                selectedValuePath: "Unit",
                selectedValue: cboArticleUnitForItem.selectedItem["ArticleUnit"].toString()
            });
        }

        // ===================
        // ADD Unit Conversion
        // ===================
        function cmdAddUnitConversion_OnClick() {
            $('#unitConversionEdit').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById('unitConversion_Id').value = 0;
            document.getElementById('unitConversion_multiplier').value = '';
            document.getElementById('unitConversion_countUnit').checked = false;

            unitConversionUnitSelectedValue = '';
            getUnitConversionUnit();
        }

        // ====================
        // Edit Unit Conversion
        // ====================
        function btnEditUnitConversion_OnClick() {
            $('#unitConversionEdit').modal({
                show: true,
                backdrop: 'static'
            });

            unitConversions.editItem(unitConversions.currentItem);
            var unitConversion = unitConversions.currentEditItem;
            document.getElementById('unitConversion_Id').value = unitConversion.Id;
            document.getElementById('unitConversion_multiplier').value = unitConversion.Multiplier;
            document.getElementById('unitConversion_countUnit').checked = unitConversion.IsCountUnit;

            unitConversionUnitSelectedValue = unitConversion.Unit;
            getUnitConversionUnit();
        }

        // ======================
        // Delete Unit Conversion
        // ======================
        function btnDeleteUnitConversion_OnClick() {
            $('#deleteUnitConversionConfirm').modal({
                show: true,
                backdrop: 'static'
            });
        }
        // confirm delete Unit Conversion
        function cmdUnitConversionConfirmDeleteButton_OnClick() {
            document.getElementById('cmdConfirmDeleteUnitConversion').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Deleting...";
            $('#cmdConfirmDeleteUnitConversion').prop('disabled', true);
            $('#cmdConfirmDeleteUnitConversionCloseButton').prop('disabled', true);

            unitConversions.editItem(unitConversions.currentItem);
            var unitConversionId = unitConversions.currentEditItem.Id;
            $.ajax({
                url: '/api/deleteArticleUnit/' + unitConversionId,
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        document.getElementById('cmdConfirmDeleteUnitConversion').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $('#cmdConfirmDeleteUnitConversion').prop('disabled', false);
                        $('#cmdConfirmDeleteUnitConversionCloseButton').prop('disabled', false);
                        toastr.success("Successfully deleted");
                        $('#deleteUnitConversionConfirm').modal('hide');
                        refreshUnitConversions();
                    },
                    404: function () {
                        document.getElementById('cmdConfirmDeleteUnitConversion').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $('#cmdConfirmDeleteUnitConversion').prop('disabled', false);
                        $('#cmdConfirmDeleteUnitConversionCloseButton').prop('disabled', false);
                        $('#deleteUnitConversionConfirm').modal('hide');
                        toastr.error("Delete request not found");
                    },
                    400: function () {
                        document.getElementById('cmdConfirmDeleteUnitConversion').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $('#cmdConfirmDeleteUnitConversion').prop('disabled', false);
                        $('#cmdConfirmDeleteUnitConversionCloseButton').prop('disabled', false);
                        $('#deleteUnitConversionConfirm').modal('hide');
                        toastr.error("Cannot delete record");
                    }
                }
            });
        }

        // ================================
        // Unit Conversion entry Validation
        // ================================
        function unitConversionEntryValidation() {
            var isValid = true;
            $('.requiredUnitConversion').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                }
                else {
                    $(this).css({
                        "border": "",
                    });
                }
            });
            return isValid;
        }

        // ====================
        // Save Unit Conversion
        // ====================
        function cmdUnitConversionSaveButton_OnClick() {
            var unitConversionObject = new Object();
            unitConversionObject.ArticleId = itemId;
            unitConversionObject.UnitId = cboUnitConversionUnit.selectedItem["UnitId"];
            unitConversionObject.Multiplier = document.getElementById("unitConversion_multiplier").value.toLocaleString();
            unitConversionObject.IsCountUnit = document.getElementById("unitConversion_countUnit").checked;
            var data = JSON.stringify(unitConversionObject);

            if (unitConversionEntryValidation() == false) {
                toastr.error("Invalid Entry");
            } else {
                document.getElementById('cmdSaveUnitConversionButton').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Saving...";
                $('#cmdSaveUnitConversionButton').prop('disabled', true);
                $('#cmdUnitConversionDetailCloseButton').prop('disabled', true);

                var unitConversionId = document.getElementById('unitConversion_Id').value;
                if (unitConversionId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/addArticleUnit',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: data,
                        statusCode: {
                            200: function () {
                                document.getElementById('cmdSaveUnitConversionButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $('#cmdSaveUnitConversionButton').prop('disabled', false);
                                $('#cmdUnitConversionDetailCloseButton').prop('disabled', false);
                                toastr.success("Successfully saved");
                                $('#unitConversionEdit').modal('hide');
                                refreshUnitConversions();
                            },
                            404: function () {
                                document.getElementById('cmdSaveUnitConversionButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $('#cmdSaveUnitConversionButton').prop('disabled', false);
                                $('#cmdUnitConversionDetailCloseButton').prop('disabled', false);
                                toastr.error("Save request not found");
                                $('#unitConversionEdit').modal('hide');
                            },
                            400: function () {
                                document.getElementById('cmdSaveUnitConversionButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $('#cmdSaveUnitConversionButton').prop('disabled', false);
                                $('#cmdUnitConversionDetailCloseButton').prop('disabled', false);
                                toastr.error("Cannot save new record");
                                $('#unitConversionEdit').modal('hide');
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/updateArticleUnit/' + unitConversionId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: data,
                        statusCode: {
                            200: function () {
                                document.getElementById('cmdSaveUnitConversionButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $('#cmdSaveUnitConversionButton').prop('disabled', false);
                                $('#cmdUnitConversionDetailCloseButton').prop('disabled', false);
                                toastr.success("Successfully updated");
                                $('#unitConversionEdit').modal('hide');
                                refreshUnitConversions();
                            },
                            404: function () {
                                document.getElementById('cmdSaveUnitConversionButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $('#cmdSaveUnitConversionButton').prop('disabled', false);
                                $('#cmdUnitConversionDetailCloseButton').prop('disabled', false);
                                toastr.error("Update request not found");
                                $('#unitConversionEdit').modal('hide');
                            },
                            400: function () {
                                document.getElementById('cmdSaveUnitConversionButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $('#cmdSaveUnitConversionButton').prop('disabled', false);
                                $('#cmdUnitConversionDetailCloseButton').prop('disabled', false);
                                toastr.error("Cannot update record");
                                $('#unitConversionEdit').modal('hide');
                            }
                        }
                    });
                }
            }
        }

        // =======================
        // Refresh Unit Conversion
        // =======================
        function refreshUnitConversions() {
            unitConversions = new wijmo.collections.CollectionView(getUnitConversion());

            // Flex Grid for Unit Conversion
            unitConversionGrid.itemsSource = unitConversions;
            unitConversionGrid.trackChanges = true;
        }

        // ================
        //  Unit Conversion
        // ================
        function unitConversionTab() {
            cboUnitConversionUnit = new wijmo.input.ComboBox('#unitConversion_unit');
            cboUnitConversionBaseUnit = new wijmo.input.ComboBox('#unitConversion_baseUnit');

            unitConversions = new wijmo.collections.CollectionView(getUnitConversion());

            // Flex Grid for Unit Conversion
            unitConversionGrid = new wijmo.grid.FlexGrid('#UnitConversionGrid');
            unitConversionGrid.initialize({
                columns: [
                            {
                                "header": "Edit",
                                "binding": "EditId",
                                "width": 60,
                                "align": "center",
                                "allowResizing": false,
                                "allowSorting": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Delete",
                                "binding": "DeleteId",
                                "width": 70,
                                "align": "center",
                                "allowResizing": false,
                                "allowSorting": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Multiplier",
                                "binding": "Multiplier",
                                "allowSorting": true,
                                "width": "1*",
                            },
                            {
                                "header": "Unit",
                                "binding": "Unit",
                                "allowSorting": true,
                                "width": "3*"
                            },
                            {
                                "header": " ",
                                "binding": "Equals",
                                "allowSorting": true,
                                "width": "0.5*",
                                "align": "center"
                            },
                            {
                                "header": "Base Unit",
                                "binding": "BaseUnit",
                                "allowSorting": true,
                                "width": "3*"
                            },
                            {
                                "header": "Count Unit",
                                "binding": "IsCountUnit",
                                "allowSorting": true,
                                "width": "1*"
                            },
                ],
                autoGenerateColumns: false,
                itemsSource: unitConversions,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });
            unitConversionGrid.trackChanges = true;
        }
    </script>

    <!-- ================= -->
    <!-- Component Scripts -->
    <!-- ================= -->
    <script type="text/javascript">
        // ==============================
        // Global Variables for Component
        // ==============================
        var components;
        var componentGrid;
        var articleComponenetsItems;
        var cboManualCodeArticleItems;
        var cboComponentArticleItem;
        var componentUnits;
        var cboComponentUnit;
        var manualCodeSelectedValue = "";
        var componentUnitSelectedValue = "";

        // ==================
        // GET Component List
        // ==================
        function getComponent() {
            NProgress.start();
            var components = new wijmo.collections.ObservableArray;
            if (document.location.search.length > 0) {
                $.ajax({
                    url: '/api/listArticleComponent/' + itemId,
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    data: {},
                    success: function (componentResults) {
                        if (componentResults.length > 0) {
                            $.ajax({
                                url: '/api/article/' + itemId,
                                cache: false,
                                type: 'GET',
                                contentType: 'application/json; charset=utf-8',
                                data: {},
                                success: function (itemResults) {
                                    var btnEditId;
                                    var btnDeleteId;
                                    if (itemResults.IsLocked == true) {
                                        btnEditId = "<button class='btn btn-primary btn-xs btn-block' onclick='btnEditCompoent_OnClick()' disabled><i class='fa fa-edit'></i> Edit</button>";
                                        btnDeleteId = "<button class='btn btn-danger btn-xs btn-block' onclick='btnDeleteCompoent_OnClick()' disabled><i class='fa fa-trash'></i> Delete</button>";
                                    } else {
                                        btnEditId = "<button class='btn btn-primary btn-xs btn-block' onclick='btnEditCompoent_OnClick()'><i class='fa fa-edit'></i> Edit</button>";
                                        btnDeleteId = "<button class='btn btn-danger btn-xs btn-block' onclick='btnDeleteCompoent_OnClick()'><i class='fa fa-trash'></i> Delete</button>";
                                    }

                                    for (i = 0; i < componentResults.length; i++) {
                                        components.push({
                                            EditId: btnEditId,
                                            DeleteId: btnDeleteId,
                                            Id: componentResults[i]["Id"],
                                            ArticleId: componentResults[i]["ArticleId"],
                                            Article: componentResults[i]["Article"],
                                            ComponentArticleId: componentResults[i]["ComponentArticleId"],
                                            ComponentArticle: componentResults[i]["ComponentArticle"],
                                            Quantity: componentResults[i]["Quantity"],
                                            Unit: componentResults[i]["Unit"],
                                            Cost: componentResults[i]["Cost"],
                                            Particulars: componentResults[i]["Particulars"]
                                        });
                                    }
                                }
                            });
                        }
                        NProgress.done();
                    }
                });
            } else {
                NProgress.done();
            }
            return components;
        }

        // ======================================
        // GET Item Id, Manual Code and Component
        // ======================================
        function getArticleItemForManualCodeAndComponent() {
            articleComponenetsItems = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listArticleByArticleTypeId/1',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (articleComponentItemsResults) {
                    if (articleComponentItemsResults.length > 0) {
                        for (i = 0; i < articleComponentItemsResults.length; i++) {
                            articleComponenetsItems.push({
                                ItemId: articleComponentItemsResults[i]["Id"],
                                ItemCode: articleComponentItemsResults[i]["ManualArticleCode"],
                                ItemComponent: articleComponentItemsResults[i]["Article"],
                                UnitId: articleComponentItemsResults[i]["UnitId"],
                                Unit: articleComponentItemsResults[i]["Unit"]
                            });
                        }
                        createCboForItemComponent(articleComponenetsItems);
                        //createCboForManualCode(articleComponenetsItems, cboComponentArticleItem.selectedItem["ItemCode"]);
                    } else {
                        createCboForItemComponent(articleComponenetsItems);
                        //createCboForManualCode(articleComponenetsItems, cboComponentArticleItem.selectedItem["ItemCode"]);
                    }
                }
            });
        }

        // ==================
        // CBO item Component
        // ==================
        function createCboForItemComponent(articleComponenetsItems) {
            cboComponentArticleItem.dispose();
            cboComponentArticleItem = new wijmo.input.ComboBox('#component_Component', {
                placeholder: "Item Component",
                itemsSource: articleComponenetsItems,
                displayMemberPath: "ItemComponent",
                isEditable: false,
                selectedValuePath: "ItemComponent",
                // selectedValue: cboManualCodeArticleItems.selectedItem["ItemComponent"].toString(),
                onSelectedIndexChanged: function () {
                    manualCodeSelectedValue = this.selectedItem["ItemCode"].toString();
                    componentUnitSelectedValue = this.selectedItem["Unit"].toString();
                    createCboForManualCode(articleComponenetsItems, this.selectedItem["ItemCode"]);
                    getComponentUnitForComboBox(this.selectedItem["Unit"]);
                }
            });
            getComponentUnitForComboBox(cboComponentArticleItem.selectedItem["Unit"]);
            createCboForManualCode(articleComponenetsItems, cboComponentArticleItem.selectedItem["ItemCode"]);
        }

        // ===============
        // CBO Manual Code
        // ===============
        function createCboForManualCode(articleComponenetsItems, manualCodeSelectedValue) {
            cboManualCodeArticleItems.dispose();
            cboManualCodeArticleItems = new wijmo.input.ComboBox('#component_ManualCode', {
                disabled: true,
                placeholder: "Manual Code",
                itemsSource: articleComponenetsItems,
                displayMemberPath: "ItemCode",
                isEditable: false,
                selectedValuePath: "ItemCode",
                selectedValue: manualCodeSelectedValue.toString()
            });

        }

        // =============
        // Get Item Unit
        // =============
        function getComponentUnitForComboBox(unitSelectedValue) {
            componentUnits = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listUnit',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (componentItemUnitResults) {
                    if (componentItemUnitResults.length > 0) {
                        for (i = 0; i < componentItemUnitResults.length; i++) {
                            componentUnits.push({
                                UnitId: componentItemUnitResults[i]["Id"],
                                Unit: componentItemUnitResults[i]["Unit"]
                            });
                        }
                        createCboForComponentUnit(componentUnits, unitSelectedValue);
                    } else {
                        createCboForComponentUnit(componentUnits, unitSelectedValue);
                    }
                }
            });
        }

        // ======================
        // CBO for Component Unit
        // ======================
        function createCboForComponentUnit(componentUnits, unitSelectedValue) {
            cboComponentUnit.dispose();
            cboComponentUnit = new wijmo.input.ComboBox('#component_unit', {
                disabled: true,
                placeholder: "Unit",
                itemsSource: componentUnits,
                displayMemberPath: "Unit",
                isEditable: false,
                selectedValuePath: "Unit",
                selectedValue: unitSelectedValue.toString()
            });
        }

        // =============
        // ADD component
        // =============
        function cmdAddComponent_OnClick() {
            $('#componentEdit').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById('component_Id').value = 0;
            document.getElementById('component_cost').value = '';
            document.getElementById('component_amount').value = '';
            document.getElementById('component_particulars').value = '';
            getArticleItemForManualCodeAndComponent();
        }

        // ==============
        // Edit component
        // ==============
        function btnEditCompoent_OnClick() {
            $('#componentEdit').modal({
                show: true,
                backdrop: 'static'
            });

            components.editItem(components.currentItem);
            var component = components.currentEditItem;
            document.getElementById('component_Id').value = component.Id;
            document.getElementById('component_Quantity').value = component.Quantity;
            document.getElementById('component_cost').value = component.Cost;
            document.getElementById('component_amount').value = '';
            document.getElementById('component_particulars').value = component.Particulars;

            getArticleItemForManualCodeAndComponent();
        }

        // ==============
        // Delete component
        // ==============
        function btnDeleteCompoent_OnClick() {
            $('#deleteComponenetConfirm').modal({
                show: true,
                backdrop: 'static'
            });
        }

        // ==========
        //  Component
        // ==========
        function componentTab() {
            cboManualCodeArticleItems = new wijmo.input.ComboBox('#component_ManualCode');
            cboComponentArticleItem = new wijmo.input.ComboBox('#component_Component');
            cboComponentUnit = new wijmo.input.ComboBox('#component_unit');

            components = new wijmo.collections.CollectionView(getComponent());

            // Flex Grid for Component
            componentGrid = new wijmo.grid.FlexGrid('#ComponentGrid');
            componentGrid.initialize({
                columns: [
                            {
                                "header": "Edit",
                                "binding": "EditId",
                                "width": 60,
                                "align": "center",
                                "allowResizing": false,
                                "allowSorting": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Delete",
                                "binding": "DeleteId",
                                "width": 70,
                                "align": "center",
                                "allowResizing": false,
                                "allowSorting": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Manual Code",
                                "binding": "Article",
                                "allowSorting": true,
                                "width": "3*",
                            },
                            {
                                "header": "Component.",
                                "binding": "ComponentArticle",
                                "allowSorting": true,
                                "width": "4*"
                            },
                            {
                                "header": "Quantity",
                                "binding": "Quantity",
                                "allowSorting": true,
                                "width": "2*"
                            },
                            {
                                "header": "Unit",
                                "binding": "Unit",
                                "allowSorting": true,
                                "width": "2*"
                            },
                            {
                                "header": "Cost",
                                "binding": "Cost",
                                "allowSorting": true,
                                "width": "2*"
                            },
                            {
                                "header": "Amount",
                                "binding": "Account",
                                "allowSorting": true,
                                "width": "2*"
                            },
                            {
                                "header": "Particulars",
                                "binding": "Particulars",
                                "allowSorting": true,
                                "width": "3.5*"
                            },
                ],
                autoGenerateColumns: false,
                itemsSource: components,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });
            componentGrid.trackChanges = true;
        }
    </script>

    <!-- ================= -->
    <!-- Price Scripts -->
    <!-- ================= -->
    <script type="text/javascript">
        // ==========================
        // Global Variables for Price
        // ==========================
        var prices;
        var priceGrid;

        // ==================
        // GET Price List
        // ==================
        function getPrice() {
            NProgress.start();
            var prices = new wijmo.collections.ObservableArray;
            if (document.location.search.length > 0) {
                $.ajax({
                    url: '/api/listArticlePrice/' + itemId,
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    data: {},
                    success: function (priceResults) {
                        if (priceResults.length > 0) {
                            $.ajax({
                                url: '/api/article/' + itemId,
                                cache: false,
                                type: 'GET',
                                contentType: 'application/json; charset=utf-8',
                                data: {},
                                success: function (itemResults) {
                                    var btnEditId;
                                    var btnDeleteId;
                                    if (itemResults.IsLocked == true) {
                                        btnEditId = "<button class='btn btn-primary btn-xs btn-block' onclick='btnEditPrice_OnClick()' disabled><i class='fa fa-edit'></i> Edit</button>";
                                        btnDeleteId = "<button class='btn btn-danger btn-xs btn-block' onclick='btnDeletePrice_OnClick()' disabled><i class='fa fa-trash'></i> Delete</button>";
                                    } else {
                                        btnEditId = "<button class='btn btn-primary btn-xs btn-block' onclick='btnEditPrice_OnClick()'><i class='fa fa-edit'></i> Edit</button>";
                                        btnDeleteId = "<button class='btn btn-danger btn-xs btn-block' onclick='btnDeletePrice_OnClick()'><i class='fa fa-trash'></i> Delete</button>";
                                    }

                                    for (i = 0; i < priceResults.length; i++) {
                                        prices.push({
                                            EditId: btnEditId,
                                            DeleteId: btnDeleteId,
                                            Id: priceResults[i]["Id"],
                                            ArticleId: priceResults[i]["ArticleId"],
                                            Article: priceResults[i]["Article"],
                                            PriceDescription: priceResults[i]["PriceDescription"],
                                            Price: priceResults[i]["Price"],
                                            Remarks: priceResults[i]["Remarks"]
                                        });
                                    }
                                }
                            });
                        }
                        NProgress.done();
                    }
                });
            } else {
                NProgress.done();
            }
            return prices;
        }

        // ======================
        // Price entry Validation
        // ======================
        function priceEntryValidation() {
            var isValid = true;
            $('.requiredPrice').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                }
                else {
                    $(this).css({
                        "border": "",
                    });
                }
            });
            return isValid;
        }

        // =========
        // Add Price
        // =========
        function cmdAddPrice_OnClick() {
            $('#priceEdit').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById('cmdSavePriceButton').innerHTML = "<i class='fa fa-save'></i> Save";
            $('#cmdSavePriceButton').prop('disabled', false);
            $('#cmdPriceDetailCloseButton').prop('disabled', false);

            document.getElementById('price_Id').value = 0;
            document.getElementById('price_PriceDescription').value = '';
            document.getElementById('price_Price').value = '';
            document.getElementById('price_Remarks').value = '';
        }

        // ==========
        // Edit Price
        // ==========
        function btnEditPrice_OnClick() {
            $('#priceEdit').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById('cmdSavePriceButton').innerHTML = "<i class='fa fa-save'></i> Save";
            $('#cmdSavePriceButton').prop('disabled', false);
            $('#cmdPriceDetailCloseButton').prop('disabled', false);

            prices.editItem(prices.currentItem);
            var price = prices.currentEditItem;
            document.getElementById('price_Id').value = price.Id;
            document.getElementById('price_PriceDescription').value = price.PriceDescription;
            document.getElementById('price_Price').value = price.Price;
            document.getElementById('price_Remarks').value = price.Remarks;
        }

        // ======================
        // Refresh Price Flexgrid
        // ======================
        function refreshPriceFlexgrid() {
            prices = new wijmo.collections.CollectionView(getPrice());

            // Flex Grid for Price
            priceGrid.trackChanges = true;
            priceGrid.itemsSource = prices;
        }

        // ============
        // Delete Price
        // ============
        function btnDeletePrice_OnClick() {
            $('#deletPriceConfirm').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById('cmdConfirmDeletePrice').innerHTML = "<i class='fa fa-trash'></i> Delete";
            $('#cmdConfirmDeletePrice').prop('disabled', false);
            $('#cmdConfirmDeletePriceCloseButton').prop('disabled', false);
        }
        // confirm delete price
        function cmdPriceConfirmDeleteButton_OnClick() {
            document.getElementById('cmdConfirmDeletePrice').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Deleting...";
            $('#cmdConfirmDeletePrice').prop('disabled', true);
            $('#cmdConfirmDeletePriceCloseButton').prop('disabled', true);

            prices.editItem(prices.currentItem);
            var priceId = prices.currentEditItem.Id;
            $.ajax({
                url: '/api/deleteArticlePrice/' + priceId,
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        document.getElementById('cmdConfirmDeletePrice').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Deleting...";
                        $('#cmdConfirmDeletePrice').prop('disabled', true);
                        $('#cmdConfirmDeletePriceCloseButton').prop('disabled', true);
                        toastr.success("Successfully deleted");
                        $('#deletPriceConfirm').modal('hide');
                        refreshPriceFlexgrid();
                    },
                    404: function () {
                        document.getElementById('cmdConfirmDeletePrice').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $('#cmdConfirmDeletePrice').prop('disabled', true);
                        $('#cmdConfirmDeletePriceCloseButton').prop('disabled', true);
                        $('#deletPriceConfirm').modal('hide');
                        toastr.error("Delete request not found");
                    },
                    400: function () {
                        document.getElementById('cmdConfirmDeletePrice').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $('#cmdConfirmDeletePrice').prop('disabled', true);
                        $('#cmdConfirmDeletePriceCloseButton').prop('disabled', true);
                        $('#deletPriceConfirm').modal('hide');
                        toastr.error("Cannot delete record");
                    }
                }
            });
        }

        // ==========
        // Save Price
        // ==========
        function cmdPriceSaveButton_OnClick() {
            var priceObject = new Object();
            var priceId = document.getElementById('price_Id').value;
            priceObject.ArticleId = itemId;
            priceObject.PriceDescription = document.getElementById('price_PriceDescription').value;
            priceObject.Price = document.getElementById('price_Price').value;
            priceObject.Remarks = document.getElementById('price_Remarks').value;
            var data = JSON.stringify(priceObject);

            if (priceEntryValidation() == false) {
                toastr.error("Invalid Entry");
            } else {
                document.getElementById('cmdSavePriceButton').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Saving...";
                $('#cmdSavePriceButton').prop('disabled', true);
                $('#cmdPriceDetailCloseButton').prop('disabled', true);

                if (priceId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/addArticlePrice',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: data,
                        statusCode: {
                            200: function () {
                                document.getElementById('cmdSavePriceButton').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Saving...";
                                $('#cmdSavePriceButton').prop('disabled', true);
                                $('#cmdPriceDetailCloseButton').prop('disabled', true);
                                toastr.success("Successfully saved");
                                $('#priceEdit').modal('hide');
                                refreshPriceFlexgrid();
                            },
                            404: function () {
                                document.getElementById('cmdSavePriceButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $('#cmdSavePriceButton').prop('disabled', false);
                                $('#cmdPriceDetailCloseButton').prop('disabled', false);
                                toastr.error("Save request not found");
                                $('#priceEdit').modal('hide');
                            },
                            400: function () {
                                document.getElementById('cmdSavePriceButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $('#cmdSavePriceButton').prop('disabled', false);
                                $('#cmdPriceDetailCloseButton').prop('disabled', false);
                                toastr.error("Cannot save new record");
                                $('#priceEdit').modal('hide');
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/updateArticlePrice/' + priceId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: data,
                        statusCode: {
                            200: function () {
                                document.getElementById('cmdSavePriceButton').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Updating...";
                                $('#cmdSavePriceButton').prop('disabled', true);
                                $('#cmdPriceDetailCloseButton').prop('disabled', true);
                                toastr.success("Successfully updated");
                                $('#priceEdit').modal('hide');
                                refreshPriceFlexgrid();
                            },
                            404: function () {
                                document.getElementById('cmdSavePriceButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $('#cmdSavePriceButton').prop('disabled', false);
                                $('#cmdPriceDetailCloseButton').prop('disabled', false);
                                toastr.error("Update request not found");
                                $('#priceEdit').modal('hide');
                            },
                            400: function () {
                                document.getElementById('cmdSavePriceButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $('#cmdSavePriceButton').prop('disabled', false);
                                $('#cmdPriceDetailCloseButton').prop('disabled', false);
                                toastr.error("Cannot update record");
                                $('#priceEdit').modal('hide');
                            }
                        }
                    });
                }
            }
        }

        // =====
        // Price
        // =====
        function priceTab() {
            prices = new wijmo.collections.CollectionView(getPrice());

            // Flex Grid for Price
            priceGrid = new wijmo.grid.FlexGrid('#PriceGrid');
            priceGrid.initialize({
                columns: [
                            {
                                "header": "Edit",
                                "binding": "EditId",
                                "width": 60,
                                "align": "center",
                                "allowResizing": false,
                                "allowSorting": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Delete",
                                "binding": "DeleteId",
                                "width": 70,
                                "align": "center",
                                "allowResizing": false,
                                "allowSorting": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Price Description",
                                "binding": "PriceDescription",
                                "allowSorting": true,
                                "width": "1.5*",
                            },
                            {
                                "header": "Price",
                                "binding": "Price",
                                "allowSorting": true,
                                "width": "1*"
                            },
                            {
                                "header": "Remarks",
                                "binding": "Remarks",
                                "allowSorting": true,
                                "width": "3*"
                            }
                ],
                autoGenerateColumns: false,
                itemsSource: prices,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });
            priceGrid.trackChanges = true;
        }
    </script>

    <!-- ================= -->
    <!-- Inventory Scripts -->
    <!-- ================= -->
    <script type="text/javascript">
        // ==============================
        // Global Variables for Inventory
        // ==============================
        var inventories;
        var inventoryGrid;

        // ==================
        // GET Inventory List
        // ==================
        function getInventory() {
            var inventories = new wijmo.collections.ObservableArray;
            NProgress.start();
            if (document.location.search.length > 0) {
                $.ajax({
                    url: '/api/listArticleInventoryByArticleId/' + itemId,
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    data: {},
                    success: function (Results) {
                        NProgress.done();
                        if (Results.length > 0) {
                            for (i = 0; i < Results.length; i++) {
                                inventories.push({
                                    Id: Results[i]["Id"],
                                    BranchId: Results[i]["BranchId"],
                                    Branch: Results[i]["Branch"],
                                    ArticleId: Results[i]["ArticleId"],
                                    Article: Results[i]["Article"],
                                    InventoryCode: Results[i]["InventoryCode"],
                                    Quantity: Results[i]["Quantity"],
                                    Cost: Results[i]["Cost"],
                                    Amount: Results[i]["Amount"],
                                    Particulars: Results[i]["Particulars"],
                                });
                            }
                        }
                    }
                }).fail(function (xhr, textStatus, err) {
                    alert(err);
                });
            } else {
                NProgress.done();
            }
            return inventories;
        }

        // ==========
        //  Inventory
        // ==========
        function inventoryTab() {
            inventories = new wijmo.collections.CollectionView(getInventory());

            // Flex Grid for Inventory
            inventoryGrid = new wijmo.grid.FlexGrid('#InventoryGrid');
            inventoryGrid.initialize({
                columns: [
                            {
                                "header": "Branch",
                                "binding": "Branch",
                                "allowSorting": true,
                                "width": "3*",
                            },
                            {
                                "header": "Code.",
                                "binding": "InventoryCode",
                                "allowSorting": true,
                                "width": "2*"
                            },
                            {
                                "header": "Quantity",
                                "binding": "Quantity",
                                "allowSorting": true,
                                "width": "1*"
                            },
                            {
                                "header": "Cost",
                                "binding": "Cost",
                                "allowSorting": true,
                                "width": "1*"
                            },
                            {
                                "header": "Amount",
                                "binding": "Amount",
                                "allowSorting": true,
                                "width": "1*"
                            },
                ],
                autoGenerateColumns: false,
                itemsSource: inventories,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });
            inventoryGrid.trackChanges = true;
        }
    </script>

    <!-- ================================ -->
    <!-- Tab Current Page on Load Scripts -->
    <!-- ================================ -->
    <script type="text/javascript">
        // ====
        // TABS
        // ====
        $('#unitConversionTabId').click(function () {
            $('#UnitConversion').show();
            $('#Component').hide();
            $('#Price').hide();
            $('#Inventory').hide();
            $('#GLAccount').hide();
            $('#FixedAsset').hide();
            window.unitConversionTab = function () {
                return true;
            };
        });
        $('#componentTabId').click(function () {
            $('#UnitConversion').hide();
            $('#Component').show();
            $('#Price').hide();
            $('#Inventory').hide();
            $('#GLAccount').hide();
            $('#FixedAsset').hide();
            componentTab();
            window.componentTab = function () {
                return true;
            };
        });
        $('#priceTabId').click(function () {
            $('#UnitConversion').hide();
            $('#Component').hide();
            $('#Price').show();
            $('#Inventory').hide();
            $('#GLAccount').hide();
            $('#FixedAsset').hide();
            priceTab();
            window.priceTab = function () {
                return true;
            };
        });
        $('#inventoryTabId').click(function () {
            $('#UnitConversion').hide();
            $('#Component').hide();
            $('#Price').hide();
            $('#Inventory').show();
            $('#GLAccount').hide();
            $('#FixedAsset').hide();
            inventoryTab();
            window.inventoryTab = function () {
                return true;
            };
        });
        $('#glAccountTabId').click(function () {
            $('#UnitConversion').hide();
            $('#Component').hide();
            $('#Price').hide();
            $('#Inventory').hide();
            $('#GLAccount').show();
            $('#FixedAsset').hide();
        });
        $('#fixedAssetTabId').click(function () {
            $('#UnitConversion').hide();
            $('#Component').hide();
            $('#Price').hide();
            $('#Inventory').hide();
            $('#GLAccount').hide();
            $('#FixedAsset').show();
        });

        $(document).ready(function () {
            $("#price_Price").keydown(function (e) {
                // Allow: backspace, delete, tab, escape, enter and .
                if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 110, 190]) !== -1 ||
                    // Allow: Ctrl+A
                    (e.keyCode == 65 && e.ctrlKey === true) ||
                    // Allow: Ctrl+C
                    (e.keyCode == 67 && e.ctrlKey === true) ||
                    // Allow: Ctrl+X
                    (e.keyCode == 88 && e.ctrlKey === true) ||
                    // Allow: home, end, left, right
                    (e.keyCode >= 35 && e.keyCode <= 39)) {
                    // let it happen, don't do anything
                    return;
                }
                // Ensure that it is a number and stop the keypress
                if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
                    e.preventDefault();
                }
            });

            $('#UnitConversion').show();
            $('#Component').hide();
            $('#Price').hide();
            $('#Inventory').hide();
            $('#GLAccount').hide();
            $('#FixedAsset').hide();
            unitConversionTab();
        });
    </script>
</body>
</html>