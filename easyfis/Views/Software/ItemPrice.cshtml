@model easyfis.Entities.MstUserForm
@{
    // =====================
    // User Rights Variables
    // =====================
    var canAdd = Model.CanAdd;
    var canEdit = Model.CanEdit;
    var canDelete = Model.CanDelete;
    var canLock = Model.CanLock;
    var canUnlock = Model.CanUnlock;
    var canPrint = Model.CanPrint;
}
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">
    <link rel="shortcut icon" href="~/Images/icon/easyfislogomini.ico">
    <title>Item Price</title>

    @Styles.Render("~/Content/Software-css")
</head>
<body>
    <div id="o-wrapper" class="o-wrapper">
        <main class="o-content">
            @Html.Partial("_SoftwareHeader")

            <section class="content-header">
                <div class="container">
                    <h3>
                        Item Price
                    </h3>
                    <p>
                        <i class="fa fa-building-o fa-fw"></i> &nbsp; @ViewData["Company"] <br />
                        <i class="fa fa-home fa-fw"></i> &nbsp; <a href="#" onclick="getUserBranches()" style="color: white;">@ViewData["Branch"]</a>
                    </p>
                </div>
            </section>
            <section class="container">
                <div class="panel panel-default">

                    <!--
                        ===============
                        Search / Filter
                        ===============
                    -->
                    <div class="panel-heading">
                        <table style="width: 100%" border="0">
                            <tr>
                                <td style="width: 59%">
                                    <div class="input-group ">
                                        <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                        <input type="text" class="form-control" id="inpItemPriceSearchFilter" placeholder="Search...">
                                    </div>
                                </td>
                                <td style="width: 1%"></td>
                                <td style="width: 40%" align="right">
                                    @{
                                        if (canAdd)
                                        {
                                            <button class="btn btn-primary" id="btnItemPriceAdd" onclick="btnItemPriceAddOnclick()"><i class="fa fa-plus"></i> Add</button>
                                        }
                                    }
                                    <button class="btn btn-danger" id="btnItemPriceClose" onclick="btnItemPriceCloseOnclick()"><i class=" fa fa-times"></i> Close</button>
                                </td>
                            </tr>
                        </table>
                    </div>

                    <!--
                        ==================
                        Date Range Filters
                        ==================
                    -->
                    <div class="panel-heading">
                        <table style="width: 100%" border="0">
                            <tr>
                                <td style="width: 29%">
                                    <div class="input-group ">
                                        <span class="input-group-addon"><b>Start Date</b></span>
                                        <div id="cboItemPriceStartDateFilter"></div>
                                    </div>
                                </td>
                                <td style="width: 1%"></td>
                                <td style="width: 29%">
                                    <div class="input-group ">
                                        <span class="input-group-addon"><b>End Date</b></span>
                                        <div id="cboItemPriceEndDateFilter"></div>
                                    </div>
                                </td>
                                <td style="width: 41%"></td>
                            </tr>
                        </table>
                    </div>

                    <!--
                        =========
                        Flex Grid
                        =========
                    -->
                    <div class="panel-body">
                        <div id="itemPriceFlexGrid" class="grid" align="left"></div>
                    </div>

                    <!--
                        ==================
                        Navigation Buttons
                        ==================
                    -->
                    <div class="panel-footer">
                        <div class="row">
                            <div class="btn-group col-md-7" id="itemPriceNavigationPageGrid">
                                <button type="button" class="btn btn-default border-custom" id="btnItemPriceMoveToFirstPageGrid">
                                    <span class="glyphicon glyphicon-fast-backward"></span>
                                </button>
                                <button type="button" class="btn btn-default border-custom" id="btnItemPriceMoveToPreviousPageGrid">
                                    <span class="glyphicon glyphicon-step-backward"></span>
                                </button>
                                <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnItemPriceCurrentPageGrid"></button>
                                <button type="button" class="btn btn-default border-custom" id="btnItemPriceMoveToNextPageGrid">
                                    <span class="glyphicon glyphicon-step-forward"></span>
                                </button>
                                <button type="button" class="btn btn-default border-custom" id="btnItemPriceMoveToLastPageGrid">
                                    <span class="glyphicon glyphicon-fast-forward"></span>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                <!--
                    ==========
                    User Stamp
                    ==========
                -->
                <div class="panel panel-default">
                    <div class="panel-heading">
                        User stamp
                    </div>
                    <div class="panel-body">
                        <div class="row">
                            <div class="col-md-6">
                                <p>Created by:</p>
                                <div style="padding-left: 10px;">
                                    <i class="fa fa-key fa-fw"></i> <label id="createdBy">NA</label>
                                    <br />
                                    <small><i class="fa fa-calendar fa-fw"></i> &nbsp;<span id="createdDate">mm/dd/yyyy</span></small>
                                </div>
                                <br />
                            </div>
                            <div class="col-md-6">
                                <p>Updated by:</p>
                                <div style="padding-left: 10px;">
                                    <i class="fa fa-key fa-fw"></i> <label id="updatedBy">NA</label>
                                    <br />
                                    <small><i class="fa fa-calendar fa-fw"></i> &nbsp;<span id="updatedDate">mm/dd/yyyy</span></small>
                                </div>
                                <br />
                            </div>
                        </div>
                    </div>
                </div>
            </section>

            @Html.Partial("_SoftwareFooter")
        </main>
    </div>
    <div id="c-mask" class="c-mask"></div>

    <!--
        =================================
        ItemPrice Confirm Delete (Modal)
        =================================
    -->
    <div class="modal fade" id="itemPriceConfirmDeleteModal" role="dialog">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Delete</h4>
                </div>
                <div class="modal-body">
                    Delete Item Price?
                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger" id="btnItemPriceConfirmDelete" onclick="btnItemPriceConfirmDeleteOnclick()"><i class="fa fa-trash"></i> Delete</button>
                    <button class="btn btn-primary" id="btnItemPriceConfirmDeleteCloseModal" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>

    @Scripts.Render("~/Scripts/Software-js")
    <script type="text/javascript">
        // =============================
        // Item Price Date Range Filters
        // =============================
        var cboItemPriceStartDateFilter = new wijmo.input.InputDate('#cboItemPriceStartDateFilter');
        var cboItemPriceEndDateFilter = new wijmo.input.InputDate('#cboItemPriceEndDateFilter');
        var isCboItemPriceStartDateFilterSelected = true;
        var isCboItemPriceEndDateFilterSelected = true;

        // =======================================
        // Item Price ItemPrice View and Flex Grid
        // =======================================
        var itemPriceCollectionView;
        var itemPriceFlexGrid;

        // =============================
        // Item Price Navigation Buttons
        // =============================
        var btnItemPriceMoveToFirstPageGrid = document.getElementById('btnItemPriceMoveToFirstPageGrid');
        var btnItemPriceMoveToPreviousPageGrid = document.getElementById('btnItemPriceMoveToPreviousPageGrid');
        var btnItemPriceMoveToNextPageGrid = document.getElementById('btnItemPriceMoveToNextPageGrid');
        var btnItemPriceMoveToLastPageGrid = document.getElementById('btnItemPriceMoveToLastPageGrid');
        var btnItemPriceCurrentPageGrid = document.getElementById('btnItemPriceCurrentPageGrid');

        // ===============================
        // Create Combo Date Range Filters
        // ===============================
        function createCboDateRangeFilters() {
            cboItemPriceStartDateFilter.dispose();
            cboItemPriceStartDateFilter = new wijmo.input.InputDate('#cboItemPriceStartDateFilter', {
                format: 'MM-dd-yyyy',
                value: new Date(),
                onValueChanged: function () {
                    if (!isCboItemPriceStartDateFilterSelected) {
                        refreshItemPriceFlexGrid();
                    } else {
                        isCboItemPriceStartDateFilterSelected = false;
                    }
                }
            });

            cboItemPriceEndDateFilter.dispose();
            cboItemPriceEndDateFilter = new wijmo.input.InputDate('#cboItemPriceEndDateFilter', {
                format: 'MM-dd-yyyy',
                value: new Date(),
                onValueChanged: function () {
                    if (!isCboItemPriceEndDateFilterSelected) {
                        refreshItemPriceFlexGrid();
                    } else {
                        isCboItemPriceEndDateFilterSelected = false;
                    }
                }
            });
        }

        // ===================
        // Get Item Price Data
        // ===================
        function getItemPriceData() {
            NProgress.start();
            var startDate = cboItemPriceStartDateFilter.value.toLocaleDateString().replace(/\//g, '-');
            var endDate = cboItemPriceEndDateFilter.value.toLocaleDateString().replace(/\//g, '-');

            var itemPricesObservableArray = new wijmo.collections.ObservableArray;

            $.ajax({
                url: '/api/articlePrice/list/' + startDate + '/' + endDate,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            var IPDateResult = new Date(results[i]["IPDate"])
                            var IPDate = ('0' + (IPDateResult.getMonth() + 1)).slice(-2) + '-' + ('0' + IPDateResult.getDate()).slice(-2) + '-' + IPDateResult.getFullYear();

                            itemPricesObservableArray.push({
                                EditId: "<button class='btn btn-primary btn-xs btn-block' id='itemPriceEditButton' onclick='btnItemPriceEditOnclick()'><i class='fa fa-edit'></i> Edit</button>",
                                DeleteId: "<button class='btn btn-danger btn-xs btn-block' onclick='btnItemPriceDeleteOnclick()'><i class='fa fa-trash'></i> Delete</button>",
                                Id: results[i]["Id"],
                                IPNumber: results[i]["IPNumber"],
                                IPDate: IPDate,
                                ManualIPNumber: results[i]["ManualIPNumber"],
                                Particulars: results[i]["Particulars"],
                                IsLocked: results[i]["IsLocked"],
                                CreatedBy: results[i]["CreatedBy"],
                                CreatedDateTime: results[i]["CreatedDateTime"],
                                UpdatedBy: results[i]["UpdatedBy"],
                                UpdatedDateTime: results[i]["UpdatedDateTime"]
                            });
                        }
                    }

                    NProgress.done();
                }
            });

            return itemPricesObservableArray;
        }

        // ===========================
        // Create Item Price Flex Gird
        // ===========================
        function createItemPriceFlexGrid() {
            createCboDateRangeFilters();

            itemPriceCollectionView = new wijmo.collections.CollectionView(getItemPriceData());
            itemPriceCollectionView.canFilter = true;
            itemPriceCollectionView.pageSize = 15;

            var filterText = '';
            $('#inpItemPriceSearchFilter').keyup(function () {
                filterText = this.value.toLowerCase();
                itemPriceCollectionView.refresh();
            });

            itemPriceCollectionView.filter = function (item) {
                return !filterText || (item.IPNumber.toLowerCase().indexOf(filterText) > -1)
                    || (item.ManualIPNumber.toLowerCase().indexOf(filterText) > -1)
                    || (item.Particulars.toLowerCase().indexOf(filterText) > -1);
            }

            itemPriceCollectionView.collectionChanged.addHandler(function (sender, args) {
                updateItemPriceNavigationButtons();
            });

            itemPriceCollectionView.currentChanged.addHandler(function (sender, args) {
                updateItemPriceDetailsFlexGridSelection();
            });

            itemPriceFlexGrid = new wijmo.grid.FlexGrid('#itemPriceFlexGrid');
            itemPriceFlexGrid.initialize({
                columns: [
                            @{
                                if (canEdit)
                                {
                                    <text>
                                        {
                                            "header": "Edit",
                                            "binding": "EditId",
                                            "width": 70,
                                            "align": "center",
                                            "allowResizing": false,
                                            "allowSorting": false,
                                            "isContentHtml": true
                                        },
                                    </text>
                                }
                                if (canDelete)
                                {
                                    <text>
                                        {
                                            "header": "Delete",
                                            "binding": "DeleteId",
                                            "width": 70,
                                            "align": "center",
                                            "allowResizing": false,
                                            "allowSorting": false,
                                            "isContentHtml": true
                                        },
                                    </text>
                                }
                            }
                            {
                                "header": "IP Number",
                                "binding": "IPNumber",
                                "allowSorting": true,
                                "width": 100
                            },
                            {
                                "header": "IP Date",
                                "binding": "IPDate",
                                "allowSorting": true,
                                "width": 90
                            },
                            {
                                "header": "Manual IP No.",
                                "binding": "ManualIPNumber",
                                "allowSorting": true,
                                "width": 120
                            },
                            {
                                "header": "Particulars",
                                "binding": "Particulars",
                                "allowSorting": true,
                                "width": "2.5*"
                            },
                            {
                                "header": "L",
                                "binding": "IsLocked",
                                "allowSorting": true,
                                "width": 50
                            }
                ],
                autoGenerateColumns: false,
                itemsSource: itemPriceCollectionView,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            itemPriceFlexGrid.trackChanges = true;

            updateItemPriceNavigationButtons();

            btnItemPriceMoveToFirstPageGrid.addEventListener('click', function () {
                itemPriceCollectionView.moveToFirstPage();
                updateItemPriceNavigationButtons();
            });

            btnItemPriceMoveToPreviousPageGrid.addEventListener('click', function () {
                itemPriceCollectionView.moveToPreviousPage();
                updateItemPriceNavigationButtons();
            });

            btnItemPriceMoveToNextPageGrid.addEventListener('click', function () {
                itemPriceCollectionView.moveToNextPage();
                updateItemPriceNavigationButtons();
            });

            btnItemPriceMoveToLastPageGrid.addEventListener('click', function () {
                itemPriceCollectionView.moveToLastPage();
                updateItemPriceNavigationButtons();
            });
        }

        // =============================================
        // Update Item Price Details Flex Grid Selection
        // =============================================
        function updateItemPriceDetailsFlexGridSelection() {
            var item = itemPriceCollectionView.currentItem;
            document.getElementById('createdBy').innerHTML = item.CreatedBy;
            document.getElementById('createdDate').innerHTML = item.CreatedDateTime;
            document.getElementById('updatedBy').innerHTML = item.UpdatedBy;
            document.getElementById('updatedDate').innerHTML = item.UpdatedDateTime;
        }

        // ====================================
        // Update Item Price Navigation Buttons
        // ====================================
        function updateItemPriceNavigationButtons() {
            if (itemPriceCollectionView.pageSize <= 0) {
                document.getElementById('itemPriceNavigationPageGrid').style.display = 'none';
                return;
            }
            document.getElementById('itemPriceNavigationPageGrid').style.display = 'block';
            if (itemPriceCollectionView.pageIndex === 0) {
                btnItemPriceMoveToFirstPageGrid.setAttribute('disabled', 'disabled');
                btnItemPriceMoveToPreviousPageGrid.setAttribute('disabled', 'disabled');
                btnItemPriceMoveToNextPageGrid.removeAttribute('disabled');
                btnItemPriceMoveToLastPageGrid.removeAttribute('disabled');
            } else if (itemPriceCollectionView.pageIndex === (itemPriceCollectionView.pageCount - 1)) {
                btnItemPriceMoveToFirstPageGrid.removeAttribute('disabled');
                btnItemPriceMoveToPreviousPageGrid.removeAttribute('disabled');
                btnItemPriceMoveToLastPageGrid.setAttribute('disabled', 'disabled');
                btnItemPriceMoveToNextPageGrid.setAttribute('disabled', 'disabled');
            } else {
                btnItemPriceMoveToFirstPageGrid.removeAttribute('disabled');
                btnItemPriceMoveToPreviousPageGrid.removeAttribute('disabled');
                btnItemPriceMoveToNextPageGrid.removeAttribute('disabled');
                btnItemPriceMoveToLastPageGrid.removeAttribute('disabled');
            }
            btnItemPriceCurrentPageGrid.innerHTML = (itemPriceCollectionView.pageIndex + 1) + ' / ' + itemPriceCollectionView.pageCount;
        }

        // ============================
        // Refresh Item Price Flex Grid
        // ============================
        function refreshItemPriceFlexGrid() {
            itemPriceCollectionView = new wijmo.collections.CollectionView(getItemPriceData());
            itemPriceCollectionView.canFilter = true;
            itemPriceCollectionView.pageSize = 15;

            var filterText = '';
            $('#inpItemPriceSearchFilter').keyup(function () {
                filterText = this.value.toLowerCase();
                itemPriceCollectionView.refresh();
            });

            itemPriceCollectionView.filter = function (item) {
                return !filterText || (item.IPNumber.toLowerCase().indexOf(filterText) > -1)
                    || (item.ManualIPNumber.toLowerCase().indexOf(filterText) > -1)
                    || (item.Particulars.toLowerCase().indexOf(filterText) > -1);
            }

            itemPriceCollectionView.collectionChanged.addHandler(function (sender, args) {
                updateItemPriceNavigationButtons();
            });

            itemPriceCollectionView.currentChanged.addHandler(function (sender, args) {
                updateItemPriceDetailsFlexGridSelection();
            });

            itemPriceFlexGrid.itemsSource = itemPriceCollectionView;
            itemPriceFlexGrid.trackChanges = true;
        }

        // ==============
        // Add Item Price
        // ==============
        function btnItemPriceAddOnclick() {
            document.getElementById('btnItemPriceAdd').innerHTML = "<i class='fa fa-plus'></i> Adding...";
            $('#btnItemPriceAdd').prop('disabled', true);
            $('#btnItemPriceClose').prop('disabled', true);

            $.ajax({
                type: "POST",
                url: '/api/articlePrice/add',
                contentType: "application/json; charset=utf-8",
                statusCode: {
                    200: function (id) {
                        window.location = '/Software/ItemPriceDetail?id=' + id;
                    },
                    404: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                        document.getElementById('btnItemPriceAdd').innerHTML = "<i class='fa fa-plus'></i> Add";
                        $('#btnItemPriceAdd').prop('disabled', false);
                        $('#btnItemPriceClose').prop('disabled', false);
                    },
                    400: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                        document.getElementById('btnItemPriceAdd').innerHTML = "<i class='fa fa-plus'></i> Add";
                        $('#btnItemPriceAdd').prop('disabled', false);
                        $('#btnItemPriceClose').prop('disabled', false);
                    },
                    500: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                        document.getElementById('btnItemPriceAdd').innerHTML = "<i class='fa fa-plus'></i> Add";
                        $('#btnItemPriceAdd').prop('disabled', false);
                        $('#btnItemPriceClose').prop('disabled', false);
                    }
                }
            });
        }

        // ===============
        // Edit Item Price
        // ===============
        function btnItemPriceEditOnclick() {
            itemPriceCollectionView.editItem(itemPriceCollectionView.currentItem);
            var itemPrice = itemPriceCollectionView.currentEditItem;
            var itemPriceId = itemPrice.Id;
            window.location = '/Software/ItemPriceDetail?id=' + itemPriceId;
        }

        // =================
        // Delete Item Price
        // =================
        function btnItemPriceDeleteOnclick() {
            itemPriceCollectionView.editItem(itemPriceCollectionView.currentItem);
            var itemPrice = itemPriceCollectionView.currentEditItem;
            if (itemPrice.IsLocked) {
                toastr.error("Delete is not allowed when the selected record is locked!");
            } else {
                $('#itemPriceConfirmDeleteModal').modal({
                    show: true,
                    backdrop: 'static'
                });

                document.getElementById('btnItemPriceConfirmDelete').innerHTML = "<i class='fa fa-trash'></i> Delete";
                $("#btnItemPriceConfirmDelete").prop("disabled", false);
                $("#btnItemPriceConfirmDeleteCloseModal").prop("disabled", false);
            }
        }

        // =========================
        // Confirm Delete Item Price
        // =========================
        function btnItemPriceConfirmDeleteOnclick() {
            document.getElementById('btnItemPriceConfirmDelete').innerHTML = "<i class='fa fa-trash'></i> Deleting...";
            $("#btnItemPriceConfirmDelete").prop("disabled", true);
            $("#btnItemPriceConfirmDeleteCloseModal").prop("disabled", true);

            itemPriceCollectionView.editItem(itemPriceCollectionView.currentItem);
            var id = itemPriceCollectionView.currentEditItem.Id;

            $.ajax({
                url: '/api/articlePrice/delete/' + id,
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Delete Successful");
                        $('#itemPriceConfirmDeleteModal').modal('hide');
                        refreshItemPriceFlexGrid();
                    },
                    404: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                        document.getElementById('btnItemPriceConfirmDelete').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $("#btnItemPriceConfirmDelete").prop("disabled", false);
                        $("#btnItemPriceConfirmDeleteCloseModal").prop("disabled", false);
                    },
                    400: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                        document.getElementById('btnItemPriceConfirmDelete').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $("#btnItemPriceConfirmDelete").prop("disabled", false);
                        $("#btnItemPriceConfirmDeleteCloseModal").prop("disabled", false);
                    },
                    500: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                        document.getElementById('btnItemPriceConfirmDelete').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $("#btnItemPriceConfirmDelete").prop("disabled", false);
                        $("#btnItemPriceConfirmDeleteCloseModal").prop("disabled", false);
                    }
                }
            });
        }

        // ================
        // Close Item Price
        // ================
        function btnItemPriceCloseOnclick() {
            window.location = '/Software';
        }

        // =============================
        // Document Ready - On load Page
        // =============================
        $(document).ready(function () {
            createItemPriceFlexGrid();
        });
    </script>
    <script type="text/javascript">
        // =================
        // User Branch Combo
        // =================
        var cboUserBranches = new wijmo.input.ComboBox('#cboUserBranches');

        // =========================
        // Get Current User Branches
        // =========================
        function getUserBranches() {
            $("#loadingUserBranches").show();
            document.getElementById("loadingUserBranches").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#userBranchContent").hide();

            $('#userBranchesModal').modal({ show: true, backdrop: 'static' });

            document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
            $("#updateUserBranch").prop("disabled", false);
            $("#closeUserBranch").prop("disabled", false);

            var userBranchesObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/userBranch/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (userBranchesResults) {
                    if (userBranchesResults.length > 0) {
                        for (i = 0; i < userBranchesResults.length; i++) {
                            userBranchesObservableArray.push({
                                BranchId: userBranchesResults[i]["BranchId"],
                                Branch: userBranchesResults[i]["Branch"]
                            });
                        }
                    }

                    var currentBranch = "@ViewData["BranchId"]";
                    cboUserBranches.dispose();
                    cboUserBranches = new wijmo.input.ComboBox('#cboUserBranches', {
                        isEditable: false,
                        placeholder: "Select Branches",
                        itemsSource: userBranchesObservableArray,
                        displayMemberPath: "Branch",
                        selectedValuePath: "BranchId",
                        selectedValue: currentBranch
                    });

                    setTimeout(function () {
                        $("#loadingUserBranches").hide();
                        $("#userBranchContent").show();
                    }, 500)
                }
            });
        }

        // ==========================
        // Update Current User Branch
        // ==========================
        function updateUserBranchOnclick() {
            document.getElementById('updateUserBranch').innerHTML = "Updating";
            $("#updateUserBranch").prop("disabled", true);
            $("#closeUserBranch").prop("disabled", true);

            var userBranchObject = new Object();
            userBranchObject.BranchId = cboUserBranches.selectedValue;
            var userBranchData = JSON.stringify(userBranchObject);

            $.ajax({
                type: "PUT",
                url: '/api/userBranch/update',
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: userBranchData,
                statusCode: {
                    200: function () {
                        toastr.success("Update Successful");
                        window.setTimeout(function () {
                            location.reload()
                        }, 1000);
                    },
                    404: function () {
                        toastr.error("Not Found");
                        document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
                        $("#updateUserBranch").prop("disabled", false);
                        $("#closeUserBranch").prop("disabled", false);
                    },
                    500: function () {
                        toastr.error("Bad Request");
                        document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
                        $("#updateUserBranch").prop("disabled", false);
                        $("#closeUserBranch").prop("disabled", false);
                    }
                }
            });
        }
    </script>
    <script type="text/javascript">
        // ======================
        // Side Bar Menu Settings
        // ======================
        var slideLeft = new Menu({
            wrapper: '#o-wrapper',
            type: 'slide-left',
            menuOpenerClass: '.c-button',
            maskId: '#c-mask'
        });

        var slideLeftBtn = document.querySelector('#c-button--slide-left');

        slideLeftBtn.addEventListener('click', function (e) {
            e.preventDefault;
            slideLeft.open();
        });
    </script>
</body>
</html>