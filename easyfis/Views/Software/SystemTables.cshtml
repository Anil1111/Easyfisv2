@{
    var branchId = Request.QueryString["BranchId"];
}
<!DOCTYPE html>
<html>
<head>
    <!-- Meta -->
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">
    <meta name="description" content="Some slide and push menu demos using CSS3 transitions.">

    <!-- Title of the Page -->
    <title>System Tables</title>

    <!-- CSS StyleSheets-->
    @Styles.Render("~/Font-Awesome/css")
    @Styles.Render("~/Content/Software-css")
    @Styles.Render("~/WijmoCSS/Wijmo-css")
</head>
<body>
    <div id="wrapper" class="wrapper">
        <!-- Header -->
        @Html.Partial("_SoftwareHeader")

        <!-- Section -->
        <section>
            <br /><br /><br />
            <div class="container">
                <h4><i class="fa fa-table fa-2x"></i> System Tables</h4>
                <br />
                <div class="div_Current_Page">
                    <span id="currentPage"></span>
                </div>
                <ul class="nav nav-tabs pill-custom" role="tablist" id="myTab">
                    <li role="presentation" class="active"><a data-toggle="tab" href="#Discount" id="discountTabId">Discount</a></li>
                    <li role="presentation"><a data-toggle="tab" href="#PayType" id="payTypeTabId">Pay Type</a></li>
                    <li role="presentation"><a data-toggle="tab" href="#Tax" id="taxTabId">Tax</a></li>
                    <li role="presentation"><a data-toggle="tab" href="#Unit" id="unitTabId">Unit</a></li>
                    <li role="presentation"><a data-toggle="tab" href="#Term" id="termTabId">Terms</a></li>
                    <li role="presentation"><a data-toggle="tab" href="#Employee" id="employeeTabId">Employees</a></li>
                    <li role="presentation"><a data-toggle="tab" href="#ArticleGroup" id="articleGroupTabId">Article Groups</a></li>
                    <li role="presentation"><a data-toggle="tab" href="#OtherArticle" id="otherArticleTabId">Other Articles</a></li>
                </ul>
                <br />
                <!-- Discount -->
                <div id="Discount" class="tab-pane fade in active">
                    <div class="row">
                        <div class="col-lg-12">
                            <h4>Discount</h4>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-lg-4">
                            <div class="input-group input-group-sm">
                                <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                <input type="text" class="form-control input-sm" id="InputFilterDiscount" placeholder="Search">
                            </div>
                        </div>
                        <div class="col-lg-8" align="right">
                            <button class="btn btn-primary btn-sm" onclick="btnDiscountAdd_OnClick()"><i class="fa fa-plus"></i> Add</button>
                            <a href="@Url.Action("Index", "Software", new { BranchId = branchId })" class="btn btn-danger btn-sm" id="cmdCloseButtonCompany"><i class="fa fa-times"></i> Close</a>
                        </div>
                    </div>
                    <br />
                    <div class="row" align="left">
                        <div class="col-lg-12">
                            <div id="DiscountGrid" class="grid" align="left"></div>
                        </div>
                    </div>
                    <br />
                    <div class="row">
                        <div class="btn-group col-md-7" id="navigationPageGridDiscount">
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToFirstPageGridDiscount">
                                <span class="glyphicon glyphicon-fast-backward"></span>
                            </button>
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToPreviousPageGridDiscount">
                                <span class="glyphicon glyphicon-step-backward"></span>
                            </button>
                            <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnCurrentPageGridDiscount"></button>
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToNextPageGridDiscount">
                                <span class="glyphicon glyphicon-step-forward"></span>
                            </button>
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToLastPageGridDiscount">
                                <span class="glyphicon glyphicon-fast-forward"></span>
                            </button>
                        </div>
                    </div>
                </div>
                <!-- Pay Type -->
                <div id="PayType" class="tab-pane fade">
                    <div class="row">
                        <div class="col-lg-12">
                            <h4>Pay Type</h4>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-lg-4">
                            <div class="input-group input-group-sm">
                                <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                <input type="text" class="form-control input-sm" id="InputFilterPayType" placeholder="Search">
                            </div>
                        </div>
                        <div class="col-lg-8" align="right">
                            <button class="btn btn-primary btn-sm" onclick="btnPayTypeAdd_OnClick()"><i class="fa fa-plus"></i> Add</button>
                            <a href="@Url.Action("Index", "Software", new { BranchId = branchId })" class="btn btn-danger btn-sm" id="cmdCloseButtonCompany"><i class="fa fa-times"></i> Close</a>
                        </div>
                    </div>
                    <br />
                    <div class="row" align="left">
                        <div class="col-lg-12">
                            <div id="PayTypeGrid" class="grid" align="left"></div>
                        </div>
                    </div>
                    <br />
                    <div class="row">
                        <div class="btn-group col-md-7" id="navigationPageGridPayType">
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToFirstPageGridPayType">
                                <span class="glyphicon glyphicon-fast-backward"></span>
                            </button>
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToPreviousPageGridPayType">
                                <span class="glyphicon glyphicon-step-backward"></span>
                            </button>
                            <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnCurrentPageGridPayType"></button>
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToNextPageGridPayType">
                                <span class="glyphicon glyphicon-step-forward"></span>
                            </button>
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToLastPageGridPayType">
                                <span class="glyphicon glyphicon-fast-forward"></span>
                            </button>
                        </div>
                    </div>
                </div>
                <!-- Tax -->
                <div id="Tax" class="tab-pane fade">
                    <div class="row">
                        <div class="col-lg-12">
                            <h4>Tax</h4>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-lg-4">
                            <div class="input-group input-group-sm">
                                <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                <input type="text" class="form-control input-sm" id="InputFilterTax" placeholder="Search">
                            </div>
                        </div>
                        <div class="col-lg-8" align="right">
                            <button class="btn btn-primary btn-sm" onclick="btnTaxAdd_OnClick()"><i class="fa fa-plus"></i> Add</button>
                            <a href="@Url.Action("Index", "Software", new { BranchId = branchId })" class="btn btn-danger btn-sm" id="cmdCloseButtonCompany"><i class="fa fa-times"></i> Close</a>
                        </div>
                    </div>
                    <br />
                    <div class="row" align="left">
                        <div class="col-lg-12">
                            <div id="TaxGrid" class="grid" align="left"></div>
                        </div>
                    </div>
                    <br />
                    <div class="row">
                        <div class="btn-group col-md-7" id="navigationPageGridTax">
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToFirstPageGridTax">
                                <span class="glyphicon glyphicon-fast-backward"></span>
                            </button>
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToPreviousPageGridTax">
                                <span class="glyphicon glyphicon-step-backward"></span>
                            </button>
                            <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnCurrentPageGridTax"></button>
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToNextPageGridTax">
                                <span class="glyphicon glyphicon-step-forward"></span>
                            </button>
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToLastPageGridTax">
                                <span class="glyphicon glyphicon-fast-forward"></span>
                            </button>
                        </div>
                    </div>
                </div>
                <!-- Unit -->
                <div id="Unit" class="tab-pane fade">
                    <div class="row">
                        <div class="col-lg-12">
                            <h4>Unit</h4>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-lg-4">
                            <div class="input-group input-group-sm">
                                <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                <input type="text" class="form-control input-sm" id="InputFilterUnit" placeholder="Search">
                            </div>
                        </div>
                        <div class="col-lg-8" align="right">
                            <buton class="btn btn-primary btn-sm" onclick="btnUnitAdd_OnClick()"><i class="fa fa-plus"></i> Add</buton>
                            <a href="@Url.Action("Index", "Software", new { BranchId = branchId })" class="btn btn-danger btn-sm" id="cmdCloseButtonCompany"><i class="fa fa-times"></i> Close</a>
                        </div>
                    </div>
                    <br />
                    <div class="row" align="left">
                        <div class="col-lg-12">
                            <div id="UnitGrid" class="grid" align="left"></div>
                        </div>
                    </div>
                    <br />
                    <div class="row">
                        <div class="btn-group col-md-7" id="navigationPageGridUnit">
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToFirstPageGridUnit">
                                <span class="glyphicon glyphicon-fast-backward"></span>
                            </button>
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToPreviousPageGridUnit">
                                <span class="glyphicon glyphicon-step-backward"></span>
                            </button>
                            <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnCurrentPageGridUnit"></button>
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToNextPageGridUnit">
                                <span class="glyphicon glyphicon-step-forward"></span>
                            </button>
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToLastPageGridUnit">
                                <span class="glyphicon glyphicon-fast-forward"></span>
                            </button>
                        </div>
                    </div>
                </div>
                <!-- Terms -->
                <div id="Term" class="tab-pane fade">
                    <div class="row">
                        <div class="col-lg-12">
                            <h4>Term</h4>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-lg-4">
                            <div class="input-group input-group-sm">
                                <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                <input type="text" class="form-control input-sm" id="InputFilterTerm" placeholder="Search">
                            </div>
                        </div>
                        <div class="col-lg-8" align="right">
                            <a href="#" class="btn btn-primary btn-sm" onclick="btnTermAdd_OnClick()"><i class="fa fa-plus"></i> Add</a>
                            <a href="@Url.Action("Index", "Software", new { BranchId = branchId })" class="btn btn-danger btn-sm" id="cmdCloseButtonCompany"><i class="fa fa-times"></i> Close</a>
                        </div>
                    </div>
                    <br />
                    <div class="row" align="left">
                        <div class="col-lg-12">
                            <div id="TermGrid" class="grid" align="left"></div>
                        </div>
                    </div>
                    <br />
                    <div class="row">
                        <div class="btn-group col-md-7" id="navigationPageGridTerm">
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToFirstPageGridTerm">
                                <span class="glyphicon glyphicon-fast-backward"></span>
                            </button>
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToPreviousPageGridTerm">
                                <span class="glyphicon glyphicon-step-backward"></span>
                            </button>
                            <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnCurrentPageGridTerm"></button>
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToNextPageGridTerm">
                                <span class="glyphicon glyphicon-step-forward"></span>
                            </button>
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToLastPageGridTerm">
                                <span class="glyphicon glyphicon-fast-forward"></span>
                            </button>
                        </div>
                    </div>
                </div>
                <!-- Employees -->
                <div id="Employee" class="tab-pane fade">
                    <div class="row">
                        <div class="col-lg-12">
                            <h4>Employee</h4>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-lg-4">
                            <div class="input-group input-group-sm">
                                <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                <input type="text" class="form-control input-sm" id="InputFilterEmployee" placeholder="Search">
                            </div>
                        </div>
                        <div class="col-lg-8" align="right">
                            <button class="btn btn-primary btn-sm" onclick="btnEmployeeAdd_OnClick()"><i class="fa fa-plus"></i> Add</button>
                            <a href="@Url.Action("Index", "Software", new { BranchId = branchId })" class="btn btn-danger btn-sm" id="cmdCloseButtonCompany"><i class="fa fa-times"></i> Close</a>
                        </div>
                    </div>
                    <br />
                    <div class="row" align="left">
                        <div class="col-lg-12">
                            <div id="EmployeeGrid" class="grid" align="left"></div>
                        </div>
                    </div>
                    <br />
                    <div class="row">
                        <div class="btn-group col-md-7" id="navigationPageGridEmployee">
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToFirstPageGridEmployee">
                                <span class="glyphicon glyphicon-fast-backward"></span>
                            </button>
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToPreviousPageGridEmployee">
                                <span class="glyphicon glyphicon-step-backward"></span>
                            </button>
                            <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnCurrentPageGridEmployee"></button>
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToNextPageGridEmployee">
                                <span class="glyphicon glyphicon-step-forward"></span>
                            </button>
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToLastPageGridEmployee">
                                <span class="glyphicon glyphicon-fast-forward"></span>
                            </button>
                        </div>
                    </div>
                </div>
                <!-- Article Group -->
                <div id="ArticleGroup" class="tab-pane fade">
                    <div class="row">
                        <div class="col-lg-12">
                            <h4>Article Groups</h4>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-lg-4">
                            <div class="input-group input-group-sm">
                                <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                <input type="text" class="form-control input-sm" id="InputFilterArticleGroup" placeholder="Search">
                            </div>
                        </div>
                        <div class="col-lg-8" align="right">
                            <button class="btn btn-primary btn-sm" onclick="btnAddArtileGroup_OnClick()"><i class="fa fa-plus"></i> Add</button>
                            <a href="@Url.Action("Index", "Software", new { BranchId = branchId })" class="btn btn-danger btn-sm" id="cmdCloseButtonCompany"><i class="fa fa-times"></i> Close</a>
                        </div>
                    </div>
                    <br />
                    <div class="row" align="left">
                        <div class="col-lg-12">
                            <div id="ArticleGroupGrid" class="grid" align="left"></div>
                        </div>
                    </div>
                    <br />
                    <div class="row">
                        <div class="btn-group col-md-7" id="navigationPageGridArticleGroup">
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToFirstPageGridArticleGroup">
                                <span class="glyphicon glyphicon-fast-backward"></span>
                            </button>
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToPreviousPageGridArticleGroup">
                                <span class="glyphicon glyphicon-step-backward"></span>
                            </button>
                            <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnCurrentPageGridArticleGroup"></button>
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToNextPageGridArticleGroup">
                                <span class="glyphicon glyphicon-step-forward"></span>
                            </button>
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToLastPageGridArticleGroup">
                                <span class="glyphicon glyphicon-fast-forward"></span>
                            </button>
                        </div>
                    </div>
                </div>
                <!-- Other Article -->
                <div id="OtherArticle" class="tab-pane fade">
                    <div class="row">
                        <div class="col-lg-12">
                            <h4>Other Article</h4>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-lg-4">
                            <div class="input-group input-group-sm">
                                <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                <input type="text" class="form-control input-sm" id="InputFilterOtherArticle" placeholder="Search">
                            </div>
                        </div>
                        <div class="col-lg-8" align="right">
                            <button class="btn btn-primary btn-sm" onclick="btnAddArticle_OnClick()"><i class="fa fa-plus"></i> Add</button>
                            <a href="@Url.Action("Index", "Software", new { BranchId = branchId })" class="btn btn-danger btn-sm" id="cmdCloseButtonCompany"><i class="fa fa-times"></i> Close</a>
                        </div>
                    </div>
                    <br />
                    <div class="row" align="left">
                        <div class="col-lg-12">
                            <div id="OtherArticleGrid" class="grid" align="left"></div>
                        </div>
                    </div>
                    <br />
                    <div class="row">
                        <div class="btn-group col-md-7" id="navigationPageGridOtherArticle">
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToFirstPageGridOtherArticle">
                                <span class="glyphicon glyphicon-fast-backward"></span>
                            </button>
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToPreviousPageGridOtherArticle">
                                <span class="glyphicon glyphicon-step-backward"></span>
                            </button>
                            <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnCurrentPageGridOtherArticle"></button>
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToNextPageGridOtherArticle">
                                <span class="glyphicon glyphicon-step-forward"></span>
                            </button>
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToLastPageGridOtherArticle">
                                <span class="glyphicon glyphicon-fast-forward"></span>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </section>

        <!-- ==================== -->
        <!-- Discount Edit Detail -->
        <!-- ==================== -->
        <div class="modal fade" id="discountEdit" role="dialog">
            <div class="modal-dialog">
                <!-- Modal content-->
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                        <h4 class="modal-title" id="discountModalLabel">Discount Detail</h4>
                    </div>
                    <div class="modal-body">
                        <form id="DiscountDetailForm">
                            <input type="hidden" id="discount_id" />
                            <dl class="dl-horizontal">
                                <dt>Discount:</dt>
                                <dd><input type="text" class="form-control input-sm requiredDiscount" id="discount_Discount" /></dd>
                                <dt>Discount Rate (%):</dt>
                                <dd><input type="text" class="form-control input-sm requiredDiscount" id="discount_DiscountRate" /></dd>
                                <dt>VAT Inclusive:</dt>
                                <dd><input type="checkbox" id="discount_VATInclusive" /></dd>
                                <dt>Account:</dt>
                                <dd>
                                    <div id="discount_Account" class="comboBox-wide"></div>

                                    <input type="hidden" class="requiredDiscount" id="discount_Account_data" />
                                    <input type="hidden" id="discount_Account_selectedValue" />
                                </dd>
                            </dl>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-primary btn-sm" id="cmdSaveDiscountButton" onclick="btnDiscountSaveButton_OnClick()"><i class="fa fa-save"></i> Save</button>
                        <button id="cmdDiscountDetailCloseButton" class="btn btn-danger btn-sm" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- =============== -->
        <!-- Discount Delete -->
        <!-- =============== -->
        <div class="modal fade" id="deleteDiscountConfirm" role="dialog">
            <div class="modal-dialog modal-sm">
                <!-- Modal content-->
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                        <h4 class="modal-title">Delete Discount <i class="fa fa-trash"></i></h4>
                    </div>
                    <div class="modal-body">
                        Are you sure you want to delete this?
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-danger btn-sm" id="cmdConfirmDeleteDiscount" onclick="cmdDiscountConfirmDeleteButton_OnClick()"><i class="fa fa-trash"></i> Delete</button>
                        <button id="cmdConfirmDeleteCloseButtonDiscount" class="btn btn-primary btn-sm" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- ==================== -->
        <!-- Pay Type Edit Detail -->
        <!-- ==================== -->
        <div class="modal fade" id="payTypeEdit" role="dialog">
            <div class="modal-dialog">
                <!-- Modal content-->
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                        <h4 class="modal-title" id="PayTypeModalLabel">Pay Type Detail</h4>
                    </div>
                    <div class="modal-body">
                        <form id="PayTypeDetailForm">
                            <input type="hidden" id="payType_id" />
                            <dl class="dl-horizontal">
                                <dt>Pay Type:</dt>
                                <dd><input type="text" class="form-control input-sm requiredPayType" id="payType_PayType" /></dd>
                                <dt>Account:</dt>
                                <dd>
                                    <div id="payType_Account" class="comboBox-wide"></div>

                                    <input type="hidden" class="requiredPayType" id="payType_Account_data" />
                                    <input type="hidden" id="payType_Account_selectedValue" />
                                </dd>
                            </dl>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-primary btn-sm" id="cmdSavePayTypeButton" onclick="btnPayTypeSaveButton_OnClick()"><i class="fa fa-save"></i> Save</button>
                        <button id="cmdPayTypeDetailCloseButton" class="btn btn-danger btn-sm" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- =============== -->
        <!-- Pay Type Delete -->
        <!-- =============== -->
        <div class="modal fade" id="deletePayTypeConfirm" role="dialog">
            <div class="modal-dialog modal-sm">
                <!-- Modal content-->
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                        <h4 class="modal-title">Delete Pay Type <i class="fa fa-trash"></i></h4>
                    </div>
                    <div class="modal-body">
                        Are you sure you want to delete this?
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-danger btn-sm" id="cmdConfirmDeletePayType" onclick="cmdPayTypeConfirmDeleteButton_OnClick()"><i class="fa fa-trash"></i> Delete</button>
                        <button id="cmdConfirmDeleteCloseButtonPayType" class="btn btn-primary btn-sm" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- =============== -->
        <!-- Tax Edit Detail -->
        <!-- =============== -->
        <div class="modal fade" id="taxEdit" role="dialog">
            <div class="modal-dialog">
                <!-- Modal content-->
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                        <h4 class="modal-title" id="TaxTypeModalLabel">Tax Type Detail</h4>
                    </div>
                    <div class="modal-body">
                        <form id="TaxDetailForm">
                            <input type="hidden" id="taxType_id" />
                            <dl class="dl-horizontal">
                                <dt>Tax Type:</dt>
                                <dd><input type="text" class="form-control input-sm requiredTaxType" id="taxType_TaxType" /></dd>
                                <dt>Tax Rate (%):</dt>
                                <dd><input type="text" class="form-control input-sm requiredTaxType" id="taxType_TaxRate" /></dd>
                                <dt>VAT Inclusive:</dt>
                                <dd><input type="checkbox" id="taxType_TaxVATInclusive" class="requiredTaxType" /></dd>
                                <dt>Account:</dt>
                                <dd>
                                    <div id="taxType_Account" class="comboBox-wide"></div>

                                    <input type="hidden" class="requiredTaxType" id="taxType_Account_data" />
                                    <input type="hidden" id="taxType_Account_selectedValue" />
                                </dd>
                            </dl>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-primary btn-sm" id="cmdSaveTaxTypeButton" onclick="btnTaxTypeSaveButton_OnClick()"><i class="fa fa-save"></i> Save</button>
                        <button id="cmdTaxTypeDetailCloseButton" class="btn btn-danger btn-sm" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- ========== -->
        <!-- Tax Delete -->
        <!-- ========== -->
        <div class="modal fade" id="deleteTaxTypeConfirm" role="dialog">
            <div class="modal-dialog modal-sm">
                <!-- Modal content-->
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                        <h4 class="modal-title">Delete Tax Type <i class="fa fa-trash"></i></h4>
                    </div>
                    <div class="modal-body">
                        Are you sure you want to delete this?
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-danger btn-sm" id="cmdConfirmDeleteTaxType" onclick="cmdTaxTypeConfirmDeleteButton_OnClick()"><i class="fa fa-trash"></i> Delete</button>
                        <button id="cmdConfirmDeleteCloseButtonTaxType" class="btn btn-primary btn-sm" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- ================ -->
        <!-- Unit Edit Detail -->
        <!-- ================ -->
        <div class="modal fade" id="unitEdit" role="dialog">
            <div class="modal-dialog">
                <!-- Modal content-->
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                        <h4 class="modal-title" id="unitModalLabel">Unit Detail</h4>
                    </div>
                    <div class="modal-body">
                        <form id="UnitDetailForm">
                            <input type="hidden" id="unit_id" />
                            <dl class="dl-horizontal">
                                <dt>Unit:</dt>
                                <dd><input type="text" class="form-control input-sm requiredUnit" id="unit_Unit" /></dd>
                            </dl>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-primary btn-sm" id="cmdSaveUnitButton" onclick="btnUnitSaveButton_OnClick()"><i class="fa fa-save"></i> Save</button>
                        <button id="cmdUnitDetailCloseButton" class="btn btn-danger btn-sm" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- =========== -->
        <!-- Unit Delete -->
        <!-- =========== -->
        <div class="modal fade" id="deleteUnitConfirm" role="dialog">
            <div class="modal-dialog modal-sm">
                <!-- Modal content-->
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                        <h4 class="modal-title">Delete Unit <i class="fa fa-trash"></i></h4>
                    </div>
                    <div class="modal-body">
                        Are you sure you want to delete this?
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-danger btn-sm" id="cmdConfirmDeleteUnit" onclick="cmdUnitConfirmDeleteButton_OnClick()"><i class="fa fa-trash"></i> Delete</button>
                        <button id="cmdConfirmDeleteCloseButtonUnit" class="btn btn-primary btn-sm" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- ================ -->
        <!-- Term Edit Detail -->
        <!-- ================ -->
        <div class="modal fade" id="termEdit" role="dialog">
            <div class="modal-dialog">
                <!-- Modal content-->
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                        <h4 class="modal-title" id="termModalLabel">Term Detail</h4>
                    </div>
                    <div class="modal-body">
                        <form id="TermDetailForm">
                            <input type="hidden" id="term_id" />
                            <dl class="dl-horizontal">
                                <dt>Term:</dt>
                                <dd><input type="text" class="form-control input-sm requiredTerm" id="term_Term" /></dd>
                                <dt>No. of Days:</dt>
                                <dd><input type="text" class="form-control input-sm requiredTerm" id="term_NoOfDays" /></dd>
                            </dl>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-primary btn-sm" id="cmdSaveTermButton" onclick="btnTermSaveButton_OnClick()"><i class="fa fa-save"></i> Save</button>
                        <button id="cmdTermDetailCloseButton" class="btn btn-danger btn-sm" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- =========== -->
        <!-- Term Delete -->
        <!-- =========== -->
        <div class="modal fade" id="deleteTermConfirm" role="dialog">
            <div class="modal-dialog modal-sm">
                <!-- Modal content-->
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                        <h4 class="modal-title">Delete Term <i class="fa fa-trash"></i></h4>
                    </div>
                    <div class="modal-body">
                        Are you sure you want to delete this?
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-danger btn-sm" id="cmdConfirmDeleteTerm" onclick="cmdTermConfirmDeleteButton_OnClick()"><i class="fa fa-trash"></i> Delete</button>
                        <button id="cmdConfirmDeleteCloseButtonTerm" class="btn btn-primary btn-sm" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- ==================== -->
        <!-- Employee Edit Detail -->
        <!-- ==================== -->
        <div class="modal fade" id="employeeEdit" role="dialog">
            <div class="modal-dialog">
                <!-- Modal content-->
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                        <h4 class="modal-title" id="employeeModalLabel">Employee Detail</h4>
                    </div>
                    <div class="modal-body">
                        <form id="employeeDetailForm">
                            <input type="hidden" id="employee_id" />
                            <dl class="dl-horizontal">
                                <dt>Code:</dt>
                                <dd><input type="text" class="form-control input-sm requiredEmployee" id="employee_Code" /></dd>
                                <dt>Employee:</dt>
                                <dd><input type="text" class="form-control input-sm requiredEmployee" id="employee_Employee" /></dd>
                                <dt>Account:</dt>
                                <dd>
                                    <div id="employee_Account" class="comboBox-wide"></div>

                                    <input type="hidden" class="requiredEmployee" id="employee_Account_data" />
                                    <input type="hidden" id="employee_Account_selectedValue" />
                                </dd>
                                <dt>Address:</dt>
                                <dd><textarea class="form-control input-sm textarea-custom requiredEmployee" id="employee_Address"></textarea></dd>
                                <dt>Contact Number:</dt>
                                <dd><input type="text" class="form-control input-sm requiredEmployee" id="employee_ContactNumber" /></dd>
                            </dl>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-primary btn-sm" id="cmdSaveEmployeeButton" onclick="btnEmployeeSaveButton_OnClick()"><i class="fa fa-save"></i> Save</button>
                        <button id="cmdEmployeeDetailCloseButton" class="btn btn-danger btn-sm" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- =============== -->
        <!-- Employee Delete -->
        <!-- =============== -->
        <div class="modal fade" id="deleteEmployeeConfirm" role="dialog">
            <div class="modal-dialog modal-sm">
                <!-- Modal content-->
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                        <h4 class="modal-title">Delete Employee <i class="fa fa-trash"></i></h4>
                    </div>
                    <div class="modal-body">
                        Are you sure you want to delete this?
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-danger btn-sm" id="cmdConfirmDeleteEmployee" onclick="cmdEmployeeConfirmDeleteButton_OnClick()"><i class="fa fa-trash"></i> Delete</button>
                        <button id="cmdConfirmDeleteCloseButtonEmployee" class="btn btn-primary btn-sm" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- ========================= -->
        <!-- Article Group Edit Detail -->
        <!-- ========================= -->
        <div class="modal fade" id="articleGroupEdit" role="dialog">
            <div class="modal-dialog">
                <!-- Modal content-->
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                        <h4 class="modal-title" id="articleGroupModalLabel">Article Group Detail</h4>
                    </div>
                    <div class="modal-body">
                        <form id="articleGroupDetailForm">
                            <input type="hidden" id="articleGroup_id" />
                            <dl class="dl-horizontal">
                                <dt>Article Group:</dt>
                                <dd><input type="text" class="form-control input-sm requiredArticleGroup" id="articleGroup_ArticleGroup" /></dd>
                                <dt>Article Type:</dt>
                                <dd>
                                    <div id="articleGroup_ArticleType" class="comboBox-wide"></div>

                                    <input type="hidden" class="requiredArticleGroup" id="articleGroup_ArticleType_data" />
                                    <input type="hidden" id="articleGroup_ArticleType_selectedValue" />
                                </dd>
                                <dt>Account:</dt>
                                <dd>
                                    <div id="articleGroup_Account" class="comboBox-wide"></div>

                                    <input type="hidden" class="requiredArticleGroup" id="articleGroup_Account_data" />
                                    <input type="hidden" id="articleGroup_Account_selectedValue" />
                                </dd>
                                <dt>Sales Account:</dt>
                                <dd>
                                    <div id="articleGroup_SalesAccount" class="comboBox-wide"></div>

                                    <input type="hidden" class="requiredArticleGroup" id="articleGroup_SalesAccount_data" />
                                    <input type="hidden" id="articleGroup_SalesAccount_selectedValue" />
                                </dd>
                                <dt>Cost Account:</dt>
                                <dd>
                                    <div id="articleGroup_CostAccount" class="comboBox-wide"></div>

                                    <input type="hidden" class="requiredArticleGroup" id="articleGroup_CostAccount_data" />
                                    <input type="hidden" id="articleGroup_CostAccount_selectedValue" />
                                </dd>
                                <dt>Asset Account:</dt>
                                <dd>
                                    <div id="articleGroup_AssetAccount" class="comboBox-wide"></div>

                                    <input type="hidden" class="requiredArticleGroup" id="articleGroup_AssetAccount_data" />
                                    <input type="hidden" id="articleGroup_AssetAccount_selectedValue" />
                                </dd>
                                <dt>Expense Account:</dt>
                                <dd>
                                    <div id="articleGroup_ExpenseAccount" class="comboBox-wide"></div>

                                    <input type="hidden" class="requiredArticleGroup" id="articleGroup_ExpenseAccount_data" />
                                    <input type="hidden" id="articleGroup_ExpenseAccount_selectedValue" />
                                </dd>
                            </dl>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-primary btn-sm" id="cmdSaveArticleGroupButton" onclick="btnArticleGroupSaveButton_OnClick()"><i class="fa fa-save"></i> Save</button>
                        <button id="cmdArticleGroupDetailCloseButton" class="btn btn-danger btn-sm" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- ==================== -->
        <!-- Article Group Delete -->
        <!-- ==================== -->
        <div class="modal fade" id="deleteArticleGroupConfirm" role="dialog">
            <div class="modal-dialog modal-sm">
                <!-- Modal content-->
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                        <h4 class="modal-title">Delete Article Group <i class="fa fa-trash"></i></h4>
                    </div>
                    <div class="modal-body">
                        Are you sure you want to delete this?
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-danger btn-sm" id="cmdConfirmDeleteArticleGroup" onclick="cmdArticleGroupConfirmDeleteButton_OnClick()"><i class="fa fa-trash"></i> Delete</button>
                        <button id="cmdConfirmDeleteCloseButtonArticleGroup" class="btn btn-primary btn-sm" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- =================== -->
        <!-- Article Edit Detail -->
        <!-- =================== -->
        <div class="modal fade" id="articleEdit" role="dialog">
            <div class="modal-dialog">
                <!-- Modal content-->
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                        <h4 class="modal-title" id="articleModalLabel"> Article Detail</h4>
                    </div>
                    <div class="modal-body">
                        <form id="articleDetailForm">
                            <input type="hidden" id="article_id" />
                            <dl class="dl-horizontal">
                                <dt>Code:</dt>
                                <dd><input type="text" class="form-control input-sm requiredArticle" id="article_Code" /></dd>
                                <dt>Article:</dt>
                                <dd><input type="text" class="form-control input-sm requiredArticle" id="article_Article" /></dd>
                                <dt>Account:</dt>
                                <dd>
                                    <div id="article_Account" class="comboBox-wide"></div>

                                    <input type="hidden" class="requiredArticle" id="article_Account_data" />
                                    <input type="hidden" id="article_Account_selectedValue" />
                                </dd>
                                <dt>Address:</dt>
                                <dd><textarea class="form-control input-sm textarea-custom requiredArticle" id="article_Address"></textarea></dd>
                                <dt>Contact Number:</dt>
                                <dd><input type="text" class="form-control input-sm requiredArticle" id="article_ContactNumber" /></dd>
                            </dl>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-primary btn-sm" id="cmdSaveArticleButton" onclick="btnArticleSaveButton_OnClick()"><i class="fa fa-save"></i> Save</button>
                        <button id="cmdArticleDetailCloseButton" class="btn btn-danger btn-sm" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- ============== -->
        <!-- Article Delete -->
        <!-- ============== -->
        <div class="modal fade" id="deleteArticleConfirm" role="dialog">
            <div class="modal-dialog modal-sm">
                <!-- Modal content-->
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                        <h4 class="modal-title">Delete Article <i class="fa fa-trash"></i></h4>
                    </div>
                    <div class="modal-body">
                        Are you sure you want to delete this?
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-danger btn-sm" id="cmdConfirmDeleteArticle" onclick="cmdArticleConfirmDeleteButton_OnClick()"><i class="fa fa-trash"></i> Delete</button>
                        <button id="cmdConfirmDeleteCloseButtonArticle" class="btn btn-primary btn-sm" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Loading Modal -->
        <div class="modal fade" id="loadingModal" tabindex="-1" role="dialog" aria-labelledby="Loading..." aria-hidden="true" data-backdrop="static" data-keyboard="false">
            <div class=" modal-dialog modal-sm">
                <!-- Modal content-->
                <div class="modal-content">
                    <div class="modal-body">
                        <h4>Loading ...</h4>
                    </div>
                    <div class="modal-footer">
                        <img class="img-thumbnail img-responsive center-block img-custom" src='~/images/loading/progress_bar.gif'>
                    </div>
                </div>
            </div>
        </div>

        <!-- Footer Menu -->
        @Html.Partial("_SoftwareFooter")
    </div>

    <!-- SideBar Menu -->
    @Html.Partial("_SoftwareSideBarMenu")

    <div id="c-mask" class="c-mask"></div><!-- /c-mask -->
    @Scripts.Render("~/Scripts/Software-js")
    @Scripts.Render("~/WijmoScripts/Wijmo-js")

    <!-- ================ -->
    <!-- Discount Scripts -->
    <!-- ================ -->
    <script type="text/javascript">
        // =============================
        // Global Variables for Discount
        // =============================
        var discounts;
        var discountAccounts;
        var discountGrid;
        var cboDiscountForAccount;
        var btnFirstPageGridDiscount;
        var btnPreviousPageGridDiscount;
        var btnNextPageGridDiscount;
        var btnLastPageGridDiscount;
        var btnCurrentPageGridDiscount;

        // =================
        // GET Discount List
        // =================
        function getDiscount() {
            var discounts = new wijmo.collections.ObservableArray;
            $('#loadingModal').modal('show');
            $.ajax({
                url: '/api/listDiscount',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (Results) {
                    $('#loadingModal').modal('hide');
                    if (Results.length > 0) {
                        for (i = 0; i < Results.length; i++) {
                            discounts.push({
                                EditId: "<button class='btn btn-primary btn-xs btn-block' id='cmdDiscountEdit' onclick='btnDiscountEdit_OnClick()'><i class='fa fa-edit'></i> Edit</button>",
                                DeleteId: "<button class='btn btn-danger btn-xs btn-block' id='cmdDiscountDelete' onclick='btnDiscountDelete_OnClick()'><i class='fa fa-trash'></i> Delete</button>",
                                Id: Results[i]["Id"],
                                Discount: Results[i]["Discount"],
                                DiscountRate: Results[i]["DiscountRate"],
                                IsInclusive: Results[i]["IsInclusive"],
                                AccountId: Results[i]["AccountId"],
                                Account: Results[i]["Account"],
                                IsLocked: Results[i]["IsLocked"],
                                CreatedById: Results[i]["CreatedById"],
                                CreatedBy: Results[i]["CreatedBy"],
                                CreatedDateTime: Results[i]["CreatedDateTime"],
                                UpdatedById: Results[i]["UpdatedById"],
                                UpdatedBy: Results[i]["UpdatedBy"],
                                UpdatedDateTime: Results[i]["UpdatedDateTime"]
                            });
                        }
                    }
                }
            }).fail(function (xhr, textStatus, err) {
                alert(err);
            });
            return discounts;
        }

        // ===============================
        // FlexGrid Selection for Discount
        // ===============================
        function updateDetailsDiscount() {
            var item = discounts.currentItem;
            document.getElementById('createdBy').innerHTML = item.CreatedBy;
            document.getElementById('createdDate').innerHTML = item.CreatedDateTime;
            document.getElementById('updatedBy').innerHTML = item.UpdatedBy;
            document.getElementById('updatedDate').innerHTML = item.UpdatedDateTime;
        }

        // ===============================
        // Navigation Buttons for Discount
        // ===============================
        function updateNavigateButtonsDiscount() {
            if (discounts.pageSize <= 0) {
                document.getElementById('navigationPageGridDiscount').style.display = 'none';
                return;
            }
            document.getElementById('navigationPageGridDiscount').style.display = 'block';
            if (discounts.pageIndex === 0) {
                btnFirstPageGridDiscount.setAttribute('disabled', 'disabled');
                btnPreviousPageGridDiscount.setAttribute('disabled', 'disabled');
                btnNextPageGridDiscount.removeAttribute('disabled');
                btnLastPageGridDiscount.removeAttribute('disabled');
            } else if (discounts.pageIndex === (discounts.pageCount - 1)) {
                btnFirstPageGridDiscount.removeAttribute('disabled');
                btnPreviousPageGridDiscount.removeAttribute('disabled');
                btnLastPageGridDiscount.setAttribute('disabled', 'disabled');
                btnNextPageGridDiscount.setAttribute('disabled', 'disabled');
            } else {
                btnFirstPageGridDiscount.removeAttribute('disabled');
                btnPreviousPageGridDiscount.removeAttribute('disabled');
                btnNextPageGridDiscount.removeAttribute('disabled');
                btnLastPageGridDiscount.removeAttribute('disabled');
            }
            btnCurrentPageGridDiscount.innerHTML = (discounts.pageIndex + 1) + ' / ' + discounts.pageCount;
        }

        // ===========
        // Get Account
        // ===========
        function getDiscountAccountForComboBox() {
            discountAccounts = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listAccount',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            discountAccounts.push({
                                AccountId: results[i]["Id"],
                                AccountAccount: results[i]["Account"]
                            });
                        }
                        createCboForDiscountAccount(discountAccounts);
                    }
                }
            });
        }

        // ===============
        // CBO for Account
        // ===============
        function  createCboForDiscountAccount(discountAccounts) {
            var accountCollection = new wijmo.collections.CollectionView(discountAccounts);
            var accountList = new Array();
            for (var i = 0; i < accountCollection.items.length; i++) {
                accountList.push(accountCollection.items[i].AccountAccount);
            }

            cboDiscountForAccount.dispose();
            cboDiscountForAccount = new wijmo.input.ComboBox('#discount_Account', {
                placeholder: "Select Account",
                itemsSource: accountList,
                isEditable: false,
                required: false,
                selectedValue: document.getElementById('discount_Account_selectedValue').value.toString(),
                onSelectedIndexChanged: function () {
                    $("#discount_Account_data").val(accountCollection.items[this.selectedIndex].AccountId);
                }
            });
        }

        // ============
        // ADD Discount
        // ============
        function btnDiscountAdd_OnClick() {
            $('#discountEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $("#cmdSaveDiscountButton").prop("disabled", false);
            $("#cmdDiscountDetailCloseButton").prop("disabled", false);

            getDiscountAccountForComboBox();

            document.getElementById('discount_id').value = 0;
            document.getElementById('discount_Discount').value = "";
            document.getElementById('discount_DiscountRate').value = "";
            document.getElementById('discount_VATInclusive').checked = "";
            document.getElementById('discount_Account_data').value = "";
            document.getElementById('discount_Account_selectedValue').value = "";
        }

        // =============
        // EDIT Discount
        // =============
        function btnDiscountEdit_OnClick() {
            discounts.editItem(discounts.currentItem);
            $('#discountEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $("#cmdSaveDiscountButton").prop("disabled", false);
            $("#cmdDiscountDetailCloseButton").prop("disabled", false);

            getDiscountAccountForComboBox();

            var discount = discounts.currentEditItem;
            document.getElementById('discount_id').value = discount.Id ? discount.Id : '';
            document.getElementById('discount_Discount').value = discount.Discount ? discount.Discount : '';
            document.getElementById('discount_DiscountRate').value = discount.DiscountRate ? discount.DiscountRate : '';
            document.getElementById('discount_VATInclusive').checked = discount.IsInclusive ? discount.IsInclusive : '';
            document.getElementById('discount_Account_data').value = discount.AccountId ? discount.AccountId : '';
            document.getElementById('discount_Account_selectedValue').value = discount.Account ? discount.Account : '';
        }

        // ===============
        // Delete Discount
        // ===============
        function btnDiscountDelete_OnClick() {
            $('#deleteDiscountConfirm').modal({
                show: true,
                backdrop: 'static'
            });

            $("#cmdConfirmDeleteDiscount").prop("disabled", false);
            $("#cmdConfirmDeleteCloseButtonDiscount").prop("disabled", false);
        }
        // Discount Confirm Delete Button
        function cmdDiscountConfirmDeleteButton_OnClick() {
            $("#cmdConfirmDeleteDiscount").prop("disabled", true);
            $("#cmdConfirmDeleteCloseButtonDiscount").prop("disabled", true);

            discounts.editItem(discounts.currentItem);
            var id = discounts.currentEditItem.Id;
            $.ajax({
                url: '/api/deleteDiscount/' + id,
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        $("#cmdConfirmDeleteDiscount").prop("disabled", true);
                        $("#cmdConfirmDeleteCloseButtonDiscount").prop("disabled", true);
                        toastr.success("Successfully Deleted");

                        $('#deleteDiscountConfirm').modal('hide');

                        discounts = new wijmo.collections.CollectionView(getDiscount());
                        discounts.canFilter = true;
                        discounts.pageSize = 15;

                        var filterTextDiscount = '';
                        $('#InputFilterDiscount').keyup(function () {
                            filterTextDiscount = this.value.toLowerCase();
                            discounts.refresh();
                        });
                        discounts.filter = function (item) {
                            return !filterTextDiscount || (item.Discount.toLowerCase().indexOf(filterTextDiscount) > -1);
                        }
                        discounts.collectionChanged.addHandler(function (sender, args) {
                            updateNavigateButtonsDiscount();
                        });
                        discounts.currentChanged.addHandler(function (sender, args) {
                            updateDetailsDiscount();
                        });

                        discountGrid.itemsSource = discounts;
                        discountGrid.trackChanges = true;
                    },
                    404: function () {
                        toastr.error("Request Not Found");
                        $("#cmdConfirmDeleteDiscount").prop("disabled", false);
                        $("#cmdConfirmDeleteCloseButtonDiscount").prop("disabled", false);
                        $('#deleteDiscountConfirm').modal('hide');

                    },
                    400: function () {
                        toastr.error("Can't be deleted");
                        $("#cmdConfirmDeleteDiscount").prop("disabled", false);
                        $("#cmdConfirmDeleteCloseButtonDiscount").prop("disabled", false);
                        $('#deleteDiscountConfirm').modal('hide');
                    }
                }
            });
        }

        // =============
        // Save Discount
        // =============
        function btnDiscountSaveButton_OnClick() {
            var discountObject = new Object();
            var discountId = document.getElementById('discount_id').value;
            discountObject.Discount = document.getElementById('discount_Discount').value;
            discountObject.DiscountRate = document.getElementById('discount_DiscountRate').value;
            discountObject.IsInclusive = document.getElementById('discount_VATInclusive').checked;
            discountObject.AccountId = document.getElementById('discount_Account_data').value;
            var discountData = JSON.stringify(discountObject);

            if( document.getElementById('discount_Account_data').value == '') {
                document.getElementById("discount_Account").style.border = "1px solid red";
            } else {
                document.getElementById("discount_Account").style.border = "1px solid #C8C8C8   ";
            }

            var isValid = true;
            $('.requiredDiscount').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                }
                else {
                    $(this).css({
                        "border": "",
                    });
                }
            });
            if (isValid == false) {
                toastr.error("Invalid Entry");
                e.preventDefault();
            }
            else {
                $("#cmdSaveDiscountButton").prop("disabled", true);
                $("#cmdDiscountDetailCloseButton").prop("disabled", true);

                if(discountId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/addDiscount',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: discountData,
                        statusCode: {
                            200: function () {
                                $("#cmdSaveDiscountButton").prop("disabled", true);
                                $("#cmdDiscountDetailCloseButton").prop("disabled", true);
                                toastr.success("Successfully Saved");

                                $('#discountEdit').modal('hide');

                                discounts = new wijmo.collections.CollectionView(getDiscount());
                                discounts.canFilter = true;
                                discounts.pageSize = 15;

                                var filterTextDiscount = '';
                                $('#InputFilterDiscount').keyup(function () {
                                    filterTextDiscount = this.value.toLowerCase();
                                    discounts.refresh();
                                });
                                discounts.filter = function (item) {
                                    return !filterTextDiscount || (item.Discount.toLowerCase().indexOf(filterTextDiscount) > -1);
                                }
                                discounts.collectionChanged.addHandler(function (sender, args) {
                                    updateNavigateButtonsDiscount();
                                });
                                discounts.currentChanged.addHandler(function (sender, args) {
                                    updateDetailsDiscount();
                                });

                                discountGrid.itemsSource = discounts;
                                discountGrid.trackChanges = true;
                            },
                            404: function () {
                                toastr.error("Can't Save");
                                $("#cmdSaveDiscountButton").prop("disabled", false);
                                $("#cmdDiscountDetailCloseButton").prop("disabled", false);
                            },
                            400: function () {
                                toastr.error("Bad Request");
                                $("#cmdSaveDiscountButton").prop("disabled", false);
                                $("#cmdDiscountDetailCloseButton").prop("disabled", false);
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/updateDiscount/' + discountId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: discountData,
                        statusCode: {
                            200: function () {
                                $("#cmdSaveDiscountButton").prop("disabled", true);
                                $("#cmdDiscountDetailCloseButton").prop("disabled", true);
                                toastr.success("Successfully Updated");

                                $('#discountEdit').modal('hide');

                                discounts = new wijmo.collections.CollectionView(getDiscount());
                                discounts.canFilter = true;
                                discounts.pageSize = 15;

                                var filterTextDiscount = '';
                                $('#InputFilterDiscount').keyup(function () {
                                    filterTextDiscount = this.value.toLowerCase();
                                    discounts.refresh();
                                });
                                discounts.filter = function (item) {
                                    return !filterTextDiscount || (item.Discount.toLowerCase().indexOf(filterTextDiscount) > -1);
                                }
                                discounts.collectionChanged.addHandler(function (sender, args) {
                                    updateNavigateButtonsDiscount();
                                });
                                discounts.currentChanged.addHandler(function (sender, args) {
                                    updateDetailsDiscount();
                                });

                                discountGrid.itemsSource = discounts;
                                discountGrid.trackChanges = true;
                            },
                            404: function () {
                                toastr.error("Can't Save");
                                $("#cmdSaveDiscountButton").prop("disabled", false);
                                $("#cmdDiscountDetailCloseButton").prop("disabled", false);
                            },
                            400: function () {
                                toastr.error("Bad Request");
                                $("#cmdSaveDiscountButton").prop("disabled", false);
                                $("#cmdDiscountDetailCloseButton").prop("disabled", false);
                            }
                        }
                    });
                }
            }
        }

        // ========
        // Discount
        // ========
        function discountTab() {
            cboDiscountForAccount = new wijmo.input.ComboBox('#discount_Account');

            discounts = new wijmo.collections.CollectionView(getDiscount());
            discounts.canFilter = true;
            discounts.pageSize = 15;

            var filterTextDiscount = '';
            $('#InputFilterDiscount').keyup(function () {
                filterTextDiscount = this.value.toLowerCase();
                discounts.refresh();
            });
            discounts.filter = function (item) {
                return !filterTextDiscount || (item.Discount.toLowerCase().indexOf(filterTextDiscount) > -1);
            }
            discounts.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsDiscount();
            });
            discounts.currentChanged.addHandler(function (sender, args) {
                updateDetailsDiscount();
            });

            // Flex Grid for Discount
            discountGrid = new wijmo.grid.FlexGrid('#DiscountGrid');
            discountGrid.initialize({
                columns: [
                            {
                                "header": "Edit",
                                "binding": "EditId",
                                "width": 60,
                                "align": "center",
                                "allowResizing": false,
                                "allowSorting": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Delete",
                                "binding": "DeleteId",
                                "width": 70,
                                "align": "center",
                                "allowResizing": false,
                                "allowSorting": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Discount",
                                "binding": "Discount",
                                "align": "left",
                                "allowSorting": true,
                                "width": "2*",
                            },
                            {
                                "header": "Rate.",
                                "binding": "DiscountRate",
                                "align": "right",
                                "allowSorting": true,
                                "width": "0.7*"
                            },
                            {
                                "header": "Inclusive",
                                "binding": "IsInclusive",
                                "align": "center",
                                "allowSorting": true,
                                "width": "0.5*"
                            },
                            {
                                "header": "Account",
                                "binding": "Account",
                                "align": "left",
                                "allowSorting": true,
                                "width": "2*"
                            }
                ],
                autoGenerateColumns: false,
                itemsSource: discounts,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            discountGrid.trackChanges = true;

            //Navigation button for discount
            btnFirstPageGridDiscount = document.getElementById('btnMoveToFirstPageGridDiscount');
            btnPreviousPageGridDiscount = document.getElementById('btnMoveToPreviousPageGridDiscount');
            btnNextPageGridDiscount = document.getElementById('btnMoveToNextPageGridDiscount');
            btnLastPageGridDiscount = document.getElementById('btnMoveToLastPageGridDiscount');
            btnCurrentPageGridDiscount = document.getElementById('btnCurrentPageGridDiscount');

            updateNavigateButtonsDiscount();

            btnFirstPageGridDiscount.addEventListener('click', function () {
                discounts.moveToFirstPage();
                updateNavigateButtonsDiscount();
            });
            btnPreviousPageGridDiscount.addEventListener('click', function () {
                discounts.moveToPreviousPage();
                updateNavigateButtonsDiscount();
            });
            btnNextPageGridDiscount.addEventListener('click', function () {
                discounts.moveToNextPage();
                updateNavigateButtonsDiscount();
            });
            btnLastPageGridDiscount.addEventListener('click', function () {
                discounts.moveToLastPage();
                updateNavigateButtonsDiscount();
            });
        }
    </script>

    <!-- ================ -->
    <!-- Pay Type Scripts -->
    <!-- ================ -->
    <script type="text/javascript">
        // =============================
        // Global Variables for Pay Type
        // =============================
        var paytypes;
        var payTypeGrid;
        var payTypeAccounts;
        var cboPayTypeForAccount;
        var btnFirstPageGridPayType;
        var btnPreviousPageGridPayType;
        var btnNextPageGridPayType;
        var btnLastPageGridPayType;
        var btnCurrentPageGridPayType;

        // =================
        // GET Pay Type List
        // =================
        function getPayType() {
            var paytypes = new wijmo.collections.ObservableArray;
            $('#loadingModal').modal('show');
            $.ajax({
                url: '/api/listPayType',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (Results) {
                    $('#loadingModal').modal('hide');
                    if (Results.length > 0) {
                        for (i = 0; i < Results.length; i++) {
                            paytypes.push({
                                EditId: "<button class='btn btn-primary btn-xs btn-block' onclick='btnPayTypeEdit_OnClick()'><i class='fa fa-edit'></i> Edit</button>",
                                DeleteId: "<button class='btn btn-danger btn-xs btn-block' onclick='btnPayTypeDelete_OnClick()'><i class='fa fa-trash'></i> Delete</button>",
                                Id: Results[i]["Id"],
                                PayType: Results[i]["PayType"],
                                AccountId: Results[i]["AccountId"],
                                Account: Results[i]["Account"],
                                IsLocked: Results[i]["IsLocked"],
                                CreatedById: Results[i]["CreatedById"],
                                CreatedBy: Results[i]["CreatedBy"],
                                CreatedDateTime: Results[i]["CreatedDateTime"],
                                UpdatedById: Results[i]["UpdatedById"],
                                UpdatedBy: Results[i]["UpdatedBy"],
                                UpdatedDateTime: Results[i]["UpdatedDateTime"]
                            });
                        }
                    }
                }
            }).fail(function (xhr, textStatus, err) {
                alert(err);
            });
            return paytypes;
        }

        // ===============================
        // FlexGrid Selection for Pay Type
        // ===============================
        function updateDetailsPayType() {
            var item = paytypes.currentItem;
            document.getElementById('createdBy').innerHTML = item.CreatedBy;
            document.getElementById('createdDate').innerHTML = item.CreatedDateTime;
            document.getElementById('updatedBy').innerHTML = item.UpdatedBy;
            document.getElementById('updatedDate').innerHTML = item.UpdatedDateTime;
        }

        // ===============================
        // Navigation Buttons for Pay Type
        // ===============================
        function updateNavigateButtonsPayType() {
            if (paytypes.pageSize <= 0) {
                document.getElementById('navigationPageGridPayType').style.display = 'none';
                return;
            }
            document.getElementById('navigationPageGridPayType').style.display = 'block';
            if (paytypes.pageIndex === 0) {
                btnFirstPageGridPayType.setAttribute('disabled', 'disabled');
                btnPreviousPageGridPayType.setAttribute('disabled', 'disabled');
                btnNextPageGridPayType.removeAttribute('disabled');
                btnLastPageGridPayType.removeAttribute('disabled');
            } else if (paytypes.pageIndex === (paytypes.pageCount - 1)) {
                btnFirstPageGridPayType.removeAttribute('disabled');
                btnPreviousPageGridPayType.removeAttribute('disabled');
                btnLastPageGridPayType.setAttribute('disabled', 'disabled');
                btnNextPageGridPayType.setAttribute('disabled', 'disabled');
            } else {
                btnFirstPageGridPayType.removeAttribute('disabled');
                btnPreviousPageGridPayType.removeAttribute('disabled');
                btnNextPageGridPayType.removeAttribute('disabled');
                btnLastPageGridPayType.removeAttribute('disabled');
            }
            btnCurrentPageGridPayType.innerHTML = (paytypes.pageIndex + 1) + ' / ' + paytypes.pageCount;
        }

        // ====================
        // Get Pay Type Account
        // ====================
        function getPayTypeAccountForComboBox() {
            payTypeAccounts = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listAccount',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            payTypeAccounts.push({
                                AccountId: results[i]["Id"],
                                AccountAccount: results[i]["Account"]
                            });
                        }
                        createCboForPayTypeAccount(payTypeAccounts);
                    }
                }
            });
        }

        // ===============
        // CBO for Account
        // ===============
        function  createCboForPayTypeAccount(payTypeAccounts) {
            var accountCollection = new wijmo.collections.CollectionView(payTypeAccounts);
            var accountList = new Array();
            for (var i = 0; i < accountCollection.items.length; i++) {
                accountList.push(accountCollection.items[i].AccountAccount);
            }

            cboPayTypeForAccount.dispose();
            cboPayTypeForAccount = new wijmo.input.ComboBox('#payType_Account', {
                placeholder: "Select Account",
                itemsSource: accountList,
                isEditable: false,
                required: false,
                selectedValue: document.getElementById('payType_Account_selectedValue').value.toString(),
                onSelectedIndexChanged: function () {
                    $("#payType_Account_data").val(accountCollection.items[this.selectedIndex].AccountId);
                }
            });
        }

        // ============
        // ADD Pay Type
        // ============
        function btnPayTypeAdd_OnClick() {
            $('#payTypeEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $("#cmdSavePayTypeButton").prop("disabled", false);
            $("#cmdPayTypeDetailCloseButton").prop("disabled", false);

            getPayTypeAccountForComboBox();

            document.getElementById('payType_id').value = 0;
            document.getElementById('payType_PayType').value = "";
            document.getElementById('payType_Account_data').value = "";
            document.getElementById('payType_Account_selectedValue').value = "";
        }

        // =============
        // EDIT Pay Type
        // =============
        function btnPayTypeEdit_OnClick() {
            paytypes.editItem(paytypes.currentItem);
            $('#payTypeEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $("#cmdSavePayTypeButton").prop("disabled", false);
            $("#cmdPayTypeDetailCloseButton").prop("disabled", false);

            getPayTypeAccountForComboBox();

            var paytype = paytypes.currentEditItem;
            document.getElementById('payType_id').value = paytype.Id ? paytype.Id : '';
            document.getElementById('payType_PayType').value = paytype.PayType ? paytype.PayType : '';
            document.getElementById('payType_Account_data').value = paytype.AccountId ? paytype.AccountId : '';
            document.getElementById('payType_Account_selectedValue').value = paytype.Account ? paytype.Account : '';
        }

        // ===============
        // DELETE Pay Type
        // ===============
        function btnPayTypeDelete_OnClick() {
            $('#deletePayTypeConfirm').modal({
                show: true,
                backdrop: 'static'
            });

            $("#cmdConfirmDeletePayType").prop("disabled", false);
            $("#cmdConfirmDeleteCloseButtonPayType").prop("disabled", false);
        }
        // Pay Type Confirm Delete Button
        function cmdPayTypeConfirmDeleteButton_OnClick() {
            $("#cmdConfirmDeletePayType").prop("disabled", true);
            $("#cmdConfirmDeleteCloseButtonPayType").prop("disabled", true);

            paytypes.editItem(paytypes.currentItem);
            var id = paytypes.currentEditItem.Id;
            $.ajax({
                url: '/api/deletePayType/' + id,
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        $("#cmdConfirmDeletePayType").prop("disabled", true);
                        $("#cmdConfirmDeleteCloseButtonPayType").prop("disabled", true);
                        toastr.success("Successfully Deleted");

                        $('#deletePayTypeConfirm').modal('hide');

                        paytypes = new wijmo.collections.CollectionView(getPayType());
                        paytypes.canFilter = true;
                        paytypes.pageSize = 15;

                        var filterTextPayType = '';
                        $('#InputFilterPayType').keyup(function () {
                            filterTextPayType = this.value.toLowerCase();
                            paytypes.refresh();
                        });
                        paytypes.filter = function (item) {
                            return !filterTextPayType || (item.PayType.toLowerCase().indexOf(filterTextPayType) > -1);
                        }
                        paytypes.collectionChanged.addHandler(function (sender, args) {
                            updateNavigateButtonsPayType();
                        });
                        paytypes.currentChanged.addHandler(function (sender, args) {
                            updateDetailsPayType();
                        });

                        payTypeGrid.itemsSource = paytypes;
                        payTypeGrid.trackChanges = true;
                    },
                    404: function () {
                        toastr.error("Request Not Found");
                        $("#cmdConfirmDeletePayType").prop("disabled", false);
                        $("#cmdConfirmDeleteCloseButtonPayType").prop("disabled", false);
                        $('#deletePayTypeConfirm').modal('hide');

                    },
                    400: function () {
                        toastr.error("Can't be deleted");
                        $("#cmdConfirmDeletePayType").prop("disabled", false);
                        $("#cmdConfirmDeleteCloseButtonPayType").prop("disabled", false);
                        $('#deletePayTypeConfirm').modal('hide');
                    }
                }
            });
        }

        // =============
        // Save Pay Type
        // =============
        function btnPayTypeSaveButton_OnClick() {
            var payTypeObject = new Object();
            var payTypeId = document.getElementById('payType_id').value;
            payTypeObject.PayType = document.getElementById('payType_PayType').value;
            payTypeObject.AccountId = document.getElementById('payType_Account_data').value;
            var payTypeData = JSON.stringify(payTypeObject);

            if( document.getElementById('payType_Account_data').value == '') {
                document.getElementById("payType_Account").style.border = "1px solid red";
            } else {
                document.getElementById("payType_Account").style.border = "1px solid #C8C8C8   ";
            }

            var isValid = true;
            $('.requiredPayType').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                }
                else {
                    $(this).css({
                        "border": "",
                    });
                }
            });
            if (isValid == false) {
                toastr.error("Invalid Entry");
                e.preventDefault();
            }
            else {
                $("#cmdSavePayTypeButton").prop("disabled", true);
                $("#cmdPayTypeDetailCloseButton").prop("disabled", true);

                if(payTypeId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/addPayType',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: payTypeData,
                        statusCode: {
                            200: function () {
                                $("#cmdSavePayTypeButton").prop("disabled", true);
                                $("#cmdPayTypeDetailCloseButton").prop("disabled", true);
                                toastr.success("Successfully Saved");

                                $('#payTypeEdit').modal('hide');

                                paytypes = new wijmo.collections.CollectionView(getPayType());
                                paytypes.canFilter = true;
                                paytypes.pageSize = 15;

                                var filterTextPayType = '';
                                $('#InputFilterPayType').keyup(function () {
                                    filterTextPayType = this.value.toLowerCase();
                                    paytypes.refresh();
                                });
                                paytypes.filter = function (item) {
                                    return !filterTextPayType || (item.PayType.toLowerCase().indexOf(filterTextPayType) > -1);
                                }
                                paytypes.collectionChanged.addHandler(function (sender, args) {
                                    updateNavigateButtonsPayType();
                                });
                                paytypes.currentChanged.addHandler(function (sender, args) {
                                    updateDetailsPayType();
                                });

                                payTypeGrid.itemsSource = paytypes;
                                payTypeGrid.trackChanges = true;
                            },
                            404: function () {
                                toastr.error("Can't Save");
                                $("#cmdSavePayTypeButton").prop("disabled", false);
                                $("#cmdPayTypeDetailCloseButton").prop("disabled", false);
                            },
                            400: function () {
                                toastr.error("Bad Request");
                                $("#cmdSavePayTypeButton").prop("disabled", false);
                                $("#cmdPayTypeDetailCloseButton").prop("disabled", false);
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/updatePayType/' + payTypeId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: payTypeData,
                        statusCode: {
                            200: function () {
                                $("#cmdSavePayTypeButton").prop("disabled", true);
                                $("#cmdPayTypeDetailCloseButton").prop("disabled", true);
                                toastr.success("Successfully Updated");

                                $('#payTypeEdit').modal('hide');

                                paytypes = new wijmo.collections.CollectionView(getPayType());
                                paytypes.canFilter = true;
                                paytypes.pageSize = 15;

                                var filterTextPayType = '';
                                $('#InputFilterPayType').keyup(function () {
                                    filterTextPayType = this.value.toLowerCase();
                                    paytypes.refresh();
                                });
                                paytypes.filter = function (item) {
                                    return !filterTextPayType || (item.PayType.toLowerCase().indexOf(filterTextPayType) > -1);
                                }
                                paytypes.collectionChanged.addHandler(function (sender, args) {
                                    updateNavigateButtonsPayType();
                                });
                                paytypes.currentChanged.addHandler(function (sender, args) {
                                    updateDetailsPayType();
                                });

                                payTypeGrid.itemsSource = paytypes;
                                payTypeGrid.trackChanges = true;
                            },
                            404: function () {
                                toastr.error("Can't Save");
                                $("#cmdSavePayTypeButton").prop("disabled", false);
                                $("#cmdPayTypeDetailCloseButton").prop("disabled", false);
                            },
                            400: function () {
                                toastr.error("Bad Request");
                                $("#cmdSavePayTypeButton").prop("disabled", false);
                                $("#cmdPayTypeDetailCloseButton").prop("disabled", false);
                            }
                        }
                    });
                }
            }
        }

        // ========
        // Pay Type
        // ========
        function payTypeTab() {
            cboPayTypeForAccount = new wijmo.input.ComboBox('#payType_Account');

            paytypes = new wijmo.collections.CollectionView(getPayType());
            paytypes.canFilter = true;
            paytypes.pageSize = 15;

            var filterTextPayType = '';
            $('#InputFilterPayType').keyup(function () {
                filterTextPayType = this.value.toLowerCase();
                paytypes.refresh();
            });
            paytypes.filter = function (item) {
                return !filterTextPayType || (item.PayType.toLowerCase().indexOf(filterTextPayType) > -1);
            }
            paytypes.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsPayType();
            });
            paytypes.currentChanged.addHandler(function (sender, args) {
                updateDetailsPayType();
            });

            // Flex Grid for Pay Type
            payTypeGrid = new wijmo.grid.FlexGrid('#PayTypeGrid');
            payTypeGrid.initialize({
                columns: [
                            {
                                "header": "Edit",
                                "binding": "EditId",
                                "width": 60,
                                "align": "center",
                                "allowResizing": false,
                                "allowSorting": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Delete",
                                "binding": "DeleteId",
                                "width": 70,
                                "align": "center",
                                "allowResizing": false,
                                "allowSorting": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Pay Type",
                                "binding": "PayType",
                                "align": "left",
                                "allowSorting": true,
                                "width": "2*",
                            },
                            {
                                "header": "Account",
                                "binding": "Account",
                                "align": "left",
                                "allowSorting": true,
                                "width": "2*"
                            }
                ],
                autoGenerateColumns: false,
                itemsSource: paytypes,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            payTypeGrid.trackChanges = true;

            //Navigation button for Pay Type
            btnFirstPageGridPayType = document.getElementById('btnMoveToFirstPageGridPayType');
            btnPreviousPageGridPayType = document.getElementById('btnMoveToPreviousPageGridPayType');
            btnNextPageGridPayType = document.getElementById('btnMoveToNextPageGridPayType');
            btnLastPageGridPayType = document.getElementById('btnMoveToLastPageGridPayType');
            btnCurrentPageGridPayType = document.getElementById('btnCurrentPageGridPayType');

            updateNavigateButtonsPayType();

            btnFirstPageGridPayType.addEventListener('click', function () {
                paytypes.moveToFirstPage();
                updateNavigateButtonsPayType();
            });
            btnPreviousPageGridPayType.addEventListener('click', function () {
                paytypes.moveToPreviousPage();
                updateNavigateButtonsPayType();
            });
            btnNextPageGridPayType.addEventListener('click', function () {
                paytypes.moveToNextPage();
                updateNavigateButtonsPayType();
            });
            btnLastPageGridPayType.addEventListener('click', function () {
                paytypes.moveToLastPage();
                updateNavigateButtonsPayType();
            });
        }
    </script>

    <!-- =========== -->
    <!-- Tax Scripts -->
    <!-- =========== -->
    <script type="text/javascript">
        // ========================
        // Global Variables for Tax
        // ========================
        var taxes;
        var taxGrid;
        var taxAccounts;
        var cboTaxForAccount;
        var btnFirstPageGridTax;
        var btnPreviousPageGridTax;
        var btnNextPageGridTax;
        var btnLastPageGridTax;
        var btnCurrentPageGridTax;

        // ============
        // GET Tax List
        // ============
        function getTax() {
            var taxes = new wijmo.collections.ObservableArray;
            $('#loadingModal').modal('show');
            $.ajax({
                url: '/api/listTaxType',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (Results) {
                    $('#loadingModal').modal('hide');
                    if (Results.length > 0) {
                        for (i = 0; i < Results.length; i++) {
                            taxes.push({
                                EditId: "<button class='btn btn-primary btn-xs btn-block' onclick='btnTaxEdit_OnClick()'><i class='fa fa-edit'></i> Edit</button>",
                                DeleteId: "<button class='btn btn-danger btn-xs btn-block' onclick='btnTaxDelete_OnClick()'><i class='fa fa-trash'></i> Delete</button>",
                                Id: Results[i]["Id"],
                                TaxType: Results[i]["TaxType"],
                                TaxRate: Results[i]["TaxRate"],
                                IsInclusive: Results[i]["IsInclusive"],
                                AccountId: Results[i]["AccountId"],
                                Account: Results[i]["Account"],
                                IsLocked: Results[i]["IsLocked"],
                                CreatedById: Results[i]["CreatedById"],
                                CreatedBy: Results[i]["CreatedBy"],
                                CreatedDateTime: Results[i]["CreatedDateTime"],
                                UpdatedById: Results[i]["UpdatedById"],
                                UpdatedBy: Results[i]["UpdatedBy"],
                                UpdatedDateTime: Results[i]["UpdatedDateTime"]
                            });
                        }
                    }
                }
            }).fail(function (xhr, textStatus, err) {
                alert(err);
            });
            return taxes;
        }
        // ==========================
        // FlexGrid Selection for Tax
        // ==========================
        function updateDetailsTax() {
            var item = taxes.currentItem;
            document.getElementById('createdBy').innerHTML = item.CreatedBy;
            document.getElementById('createdDate').innerHTML = item.CreatedDateTime;
            document.getElementById('updatedBy').innerHTML = item.UpdatedBy;
            document.getElementById('updatedDate').innerHTML = item.UpdatedDateTime;
        }

        // ==========================
        // Navigation Buttons for Tax
        // ==========================
        function updateNavigateButtonsTax() {
            if (taxes.pageSize <= 0) {
                document.getElementById('navigationPageGridTax').style.display = 'none';
                return;
            }
            document.getElementById('navigationPageGridTax').style.display = 'block';
            if (taxes.pageIndex === 0) {
                btnFirstPageGridTax.setAttribute('disabled', 'disabled');
                btnPreviousPageGridTax.setAttribute('disabled', 'disabled');
                btnNextPageGridTax.removeAttribute('disabled');
                btnLastPageGridTax.removeAttribute('disabled');
            } else if (taxes.pageIndex === (taxes.pageCount - 1)) {
                btnFirstPageGridTax.removeAttribute('disabled');
                btnPreviousPageGridTax.removeAttribute('disabled');
                btnLastPageGridTax.setAttribute('disabled', 'disabled');
                btnNextPageGridTax.setAttribute('disabled', 'disabled');
            } else {
                btnFirstPageGridTax.removeAttribute('disabled');
                btnPreviousPageGridTax.removeAttribute('disabled');
                btnNextPageGridTax.removeAttribute('disabled');
                btnLastPageGridTax.removeAttribute('disabled');
            }
            btnCurrentPageGridTax.innerHTML = (taxes.pageIndex + 1) + ' / ' + taxes.pageCount;
        }

        // ===========
        // Get Account
        // ===========
        function getTaxAccountForComboBox() {
            taxAccounts = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listAccount',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            taxAccounts.push({
                                AccountId: results[i]["Id"],
                                AccountAccount: results[i]["Account"]
                            });
                        }
                        createCboForTaxAccount(taxAccounts);
                    }
                }
            });
        }

        // ===============
        // CBO for Account
        // ===============
        function  createCboForTaxAccount(taxAccounts) {
            var accountCollection = new wijmo.collections.CollectionView(taxAccounts);
            var accountList = new Array();
            for (var i = 0; i < accountCollection.items.length; i++) {
                accountList.push(accountCollection.items[i].AccountAccount);
            }

            cboTaxForAccount.dispose();
            cboTaxForAccount = new wijmo.input.ComboBox('#taxType_Account', {
                placeholder: "Select Account",
                itemsSource: accountList,
                isEditable: false,
                required: false,
                selectedValue: document.getElementById('taxType_Account_selectedValue').value.toString(),
                onSelectedIndexChanged: function () {
                    $("#taxType_Account_data").val(accountCollection.items[this.selectedIndex].AccountId);
                }
            });
        }

        // =======
        // ADD Tax
        // =======
        function btnTaxAdd_OnClick() {
            $('#taxEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $("#cmdSaveTaxTypeButton").prop("disabled", false);
            $("#cmdTaxTypeDetailCloseButton").prop("disabled", false);

            getTaxAccountForComboBox();

            document.getElementById('taxType_id').value = 0;
            document.getElementById('taxType_TaxType').value = "";
            document.getElementById('taxType_TaxRate').value = "";
            document.getElementById('taxType_TaxVATInclusive').checked = "";
            document.getElementById('taxType_Account_data').value = "";
            document.getElementById('taxType_Account_selectedValue').value = "";
        }

        // ========
        // EDIT Tax
        // ========
        function btnTaxEdit_OnClick() {
            taxes.editItem(taxes.currentItem);
            $('#taxEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $("#cmdSaveTaxTypeButton").prop("disabled", false);
            $("#cmdTaxTypeDetailCloseButton").prop("disabled", false);

            getTaxAccountForComboBox();

            var tax = taxes.currentEditItem;
            document.getElementById('taxType_id').value = tax.Id ? tax.Id : '';
            document.getElementById('taxType_TaxType').value = tax.TaxType ? tax.TaxType : '';
            document.getElementById('taxType_TaxRate').value = tax.TaxRate ? tax.TaxRate : '';
            document.getElementById('taxType_TaxVATInclusive').checked = tax.IsInclusive ? tax.IsInclusive : '';
            document.getElementById('taxType_Account_data').value = tax.AccountId ? tax.AccountId : '';
            document.getElementById('taxType_Account_selectedValue').value = tax.Account ? tax.Account : '';
        }

        // ========
        // SAVE Tax
        // ========
        function btnTaxTypeSaveButton_OnClick() {
            var taxObject = new Object();
            var taxId = document.getElementById('taxType_id').value;
            taxObject.TaxType = document.getElementById('taxType_TaxType').value;
            taxObject.TaxRate = document.getElementById('taxType_TaxRate').value;
            taxObject.IsInclusive = document.getElementById('taxType_TaxVATInclusive').checked;
            taxObject.AccountId = document.getElementById('taxType_Account_data').value;
            var taxData = JSON.stringify(taxObject);

            if( document.getElementById('taxType_Account_data').value == '') {
                document.getElementById("taxType_Account").style.border = "1px solid red";
            } else {
                document.getElementById("taxType_Account").style.border = "1px solid #C8C8C8   ";
            }

            var isValid = true;
            $('.requiredTaxType').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                }
                else {
                    $(this).css({
                        "border": "",
                    });
                }
            });
            if (isValid == false) {
                toastr.error("Invalid Entry");
                e.preventDefault();
            }
            else {
                $("#cmdSaveTaxTypeButton").prop("disabled", true);
                $("#cmdTaxTypeDetailCloseButton").prop("disabled", true);

                if(taxId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/addTaxType',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: taxData,
                        statusCode: {
                            200: function () {
                                $("#cmdSaveTaxTypeButton").prop("disabled", true);
                                $("#cmdTaxTypeDetailCloseButton").prop("disabled", true);
                                toastr.success("Successfully Saved");

                                $('#taxEdit').modal('hide');

                                taxes = new wijmo.collections.CollectionView(getTax());
                                taxes.canFilter = true;
                                taxes.pageSize = 15;

                                var filterTextTax = '';
                                $('#InputFilterTax').keyup(function () {
                                    filterTextTax = this.value.toLowerCase();
                                    taxes.refresh();
                                });
                                taxes.filter = function (item) {
                                    return !filterTextTax || (item.TaxType.toLowerCase().indexOf(filterTextTax) > -1);
                                }
                                taxes.collectionChanged.addHandler(function (sender, args) {
                                    updateNavigateButtonsTax();
                                });
                                taxes.currentChanged.addHandler(function (sender, args) {
                                    updateDetailsTax();
                                });

                                taxGrid.itemsSource = taxes;
                                taxGrid.trackChanges = true;
                            },
                            404: function () {
                                toastr.error("Can't Save");
                                $("#cmdSaveTaxTypeButton").prop("disabled", false);
                                $("#cmdTaxTypeDetailCloseButton").prop("disabled", false);
                            },
                            400: function () {
                                toastr.error("Bad Request");
                                $("#cmdSaveTaxTypeButton").prop("disabled", false);
                                $("#cmdTaxTypeDetailCloseButton").prop("disabled", false);
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/updateTaxType/' + taxId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: taxData,
                        statusCode: {
                            200: function () {
                                $("#cmdSaveTaxTypeButton").prop("disabled", true);
                                $("#cmdTaxTypeDetailCloseButton").prop("disabled", true);
                                toastr.success("Successfully Updated");

                                $('#taxEdit').modal('hide');

                                taxes = new wijmo.collections.CollectionView(getTax());
                                taxes.canFilter = true;
                                taxes.pageSize = 15;

                                var filterTextTax = '';
                                $('#InputFilterTax').keyup(function () {
                                    filterTextTax = this.value.toLowerCase();
                                    taxes.refresh();
                                });
                                taxes.filter = function (item) {
                                    return !filterTextTax || (item.TaxType.toLowerCase().indexOf(filterTextTax) > -1);
                                }
                                taxes.collectionChanged.addHandler(function (sender, args) {
                                    updateNavigateButtonsTax();
                                });
                                taxes.currentChanged.addHandler(function (sender, args) {
                                    updateDetailsTax();
                                });

                                taxGrid.itemsSource = taxes;
                                taxGrid.trackChanges = true;
                            },
                            404: function () {
                                toastr.error("Can't Save");
                                $("#cmdSaveTaxTypeButton").prop("disabled", false);
                                $("#cmdTaxTypeDetailCloseButton").prop("disabled", false);
                            },
                            400: function () {
                                toastr.error("Bad Request");
                                $("#cmdSaveTaxTypeButton").prop("disabled", false);
                                $("#cmdTaxTypeDetailCloseButton").prop("disabled", false);
                            }
                        }
                    });
                }
            }
        }

        // ==========
        // DELETE Tax
        // ==========
        function btnTaxDelete_OnClick() {
            $('#deleteTaxTypeConfirm').modal({
                show: true,
                backdrop: 'static'
            });

            $("#cmdConfirmDeleteTaxType").prop("disabled", false);
            $("#cmdConfirmDeleteCloseButtonTaxType").prop("disabled", false);
        }
        // Tax Type Confirm Delete Button
        function cmdTaxTypeConfirmDeleteButton_OnClick() {
            $("#cmdConfirmDeleteTaxType").prop("disabled", true);
            $("#cmdConfirmDeleteCloseButtonTaxType").prop("disabled", true);

            taxes.editItem(taxes.currentItem);
            var id = taxes.currentEditItem.Id;
            $.ajax({
                url: '/api/deleteTaxType/' + id,
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        $("#cmdConfirmDeleteTaxType").prop("disabled", true);
                        $("#cmdConfirmDeleteCloseButtonTaxType").prop("disabled", true);
                        toastr.success("Successfully Deleted");

                        $('#deleteTaxTypeConfirm').modal('hide');

                        taxes = new wijmo.collections.CollectionView(getTax());
                        taxes.canFilter = true;
                        taxes.pageSize = 15;

                        var filterTextTax = '';
                        $('#InputFilterTax').keyup(function () {
                            filterTextTax = this.value.toLowerCase();
                            taxes.refresh();
                        });
                        taxes.filter = function (item) {
                            return !filterTextTax || (item.TaxType.toLowerCase().indexOf(filterTextTax) > -1);
                        }
                        taxes.collectionChanged.addHandler(function (sender, args) {
                            updateNavigateButtonsTax();
                        });
                        taxes.currentChanged.addHandler(function (sender, args) {
                            updateDetailsTax();
                        });

                        taxGrid.itemsSource = taxes;
                        taxGrid.trackChanges = true;
                    },
                    404: function () {
                        toastr.error("Request Not Found");
                        $("#cmdConfirmDeleteTaxType").prop("disabled", false);
                        $("#cmdConfirmDeleteCloseButtonTaxType").prop("disabled", false);
                        $('#deleteTaxTypeConfirm').modal('hide');

                    },
                    400: function () {
                        toastr.error("Can't be deleted");
                        $("#cmdConfirmDeleteTaxType").prop("disabled", false);
                        $("#cmdConfirmDeleteCloseButtonTaxType").prop("disabled", false);
                        $('#deleteTaxTypeConfirm').modal('hide');
                    }
                }
            });
        }

        // ===
        // Tax
        // ===
        function taxTab() {
            cboTaxForAccount = new wijmo.input.ComboBox('#taxType_Account');

            taxes = new wijmo.collections.CollectionView(getTax());
            taxes.canFilter = true;
            taxes.pageSize = 15;

            var filterTextTax = '';
            $('#InputFilterTax').keyup(function () {
                filterTextTax = this.value.toLowerCase();
                taxes.refresh();
            });
            taxes.filter = function (item) {
                return !filterTextTax || (item.TaxType.toLowerCase().indexOf(filterTextTax) > -1);
            }
            taxes.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsTax();
            });
            taxes.currentChanged.addHandler(function (sender, args) {
                updateDetailsTax();
            });

            // Flex Grid for Tax
            taxGrid = new wijmo.grid.FlexGrid('#TaxGrid');
            taxGrid.initialize({
                columns: [
                            {
                                "header": "Edit",
                                "binding": "EditId",
                                "width": 60,
                                "align": "center",
                                "allowResizing": false,
                                "allowSorting": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Delete",
                                "binding": "DeleteId",
                                "width": 70,
                                "align": "center",
                                "allowResizing": false,
                                "allowSorting": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Tax Type",
                                "binding": "TaxType",
                                "align": "left",
                                "allowSorting": true,
                                "width": "2*",
                            },
                            {
                                "header": "Rate",
                                "binding": "TaxRate",
                                "align": "right",
                                "allowSorting": true,
                                "width": "0.7*"
                            },
                            {
                                "header": "Inclusive",
                                "binding": "IsInclusive",
                                "align": "center",
                                "allowSorting": true,
                                "width": "0.5*"
                            },
                            {
                                "header": "Account",
                                "binding": "Account",
                                "align": "left",
                                "allowSorting": true,
                                "width": "2*"
                            }
                ],
                autoGenerateColumns: false,
                itemsSource: taxes,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            taxGrid.trackChanges = true;

            //Navigation button for Tax
            btnFirstPageGridTax = document.getElementById('btnMoveToFirstPageGridTax');
            btnPreviousPageGridTax = document.getElementById('btnMoveToPreviousPageGridTax');
            btnNextPageGridTax = document.getElementById('btnMoveToNextPageGridTax');
            btnLastPageGridTax = document.getElementById('btnMoveToLastPageGridTax');
            btnCurrentPageGridTax = document.getElementById('btnCurrentPageGridTax');

            updateNavigateButtonsTax();

            btnFirstPageGridTax.addEventListener('click', function () {
                taxes.moveToFirstPage();
                updateNavigateButtonsTax();
            });
            btnPreviousPageGridTax.addEventListener('click', function () {
                taxes.moveToPreviousPage();
                updateNavigateButtonsTax();
            });
            btnNextPageGridTax.addEventListener('click', function () {
                taxes.moveToNextPage();
                updateNavigateButtonsTax();
            });
            btnLastPageGridTax.addEventListener('click', function () {
                taxes.moveToLastPage();
                updateNavigateButtonsTax();
            });
        }
    </script>

    <!-- ============ -->
    <!-- Unit Scripts -->
    <!-- ============ -->
    <script type="text/javascript">
        // =========================
        // Global Variables for Unit
        // =========================
        var units;
        var unitGrid;
        var btnFirstPageGridUnit;
        var btnPreviousPageGridUnit;
        var btnNextPageGridUnit;
        var btnLastPageGridUnit;
        var btnCurrentPageGridUnit;

        // =============
        // GET Unit List
        // =============
        function getUnit() {
            var units = new wijmo.collections.ObservableArray;
            $('#loadingModal').modal('show');
            $.ajax({
                url: '/api/listUnit',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (Results) {
                    $('#loadingModal').modal('hide');
                    if (Results.length > 0) {
                        for (i = 0; i < Results.length; i++) {
                            units.push({
                                EditId: "<button class='btn btn-primary btn-xs btn-block' onclick='btnEditUnit_OnClick()'><i class='fa fa-edit'></i> Edit</button>",
                                DeleteId: "<button class='btn btn-danger btn-xs btn-block' onclick='btnDeletetUnit_OnClick()'><i class='fa fa-trash'></i> Delete</button>",
                                Id: Results[i]["Id"],
                                Unit: Results[i]["Unit"],
                                IsLocked: Results[i]["IsLocked"],
                                CreatedById: Results[i]["CreatedById"],
                                CreatedBy: Results[i]["CreatedBy"],
                                CreatedDateTime: Results[i]["CreatedDateTime"],
                                UpdatedById: Results[i]["UpdatedById"],
                                UpdatedBy: Results[i]["UpdatedBy"],
                                UpdatedDateTime: Results[i]["UpdatedDateTime"]
                            });
                        }
                    }
                }
            }).fail(function (xhr, textStatus, err) {
                alert(err);
            });
            return units;
        }

        // ===========================
        // FlexGrid Selection for Unit
        // ===========================
        function updateDetailsUnit() {
            var item = units.currentItem;
            document.getElementById('createdBy').innerHTML = item.CreatedBy;
            document.getElementById('createdDate').innerHTML = item.CreatedDateTime;
            document.getElementById('updatedBy').innerHTML = item.UpdatedBy;
            document.getElementById('updatedDate').innerHTML = item.UpdatedDateTime;
        }

        // ===========================
        // Navigation Buttons for Unit
        // ===========================
        function updateNavigateButtonsUnit() {
            if (units.pageSize <= 0) {
                document.getElementById('navigationPageGridUnit').style.display = 'none';
                return;
            }
            document.getElementById('navigationPageGridUnit').style.display = 'block';
            if (units.pageIndex === 0) {
                btnFirstPageGridUnit.setAttribute('disabled', 'disabled');
                btnPreviousPageGridUnit.setAttribute('disabled', 'disabled');
                btnNextPageGridUnit.removeAttribute('disabled');
                btnLastPageGridUnit.removeAttribute('disabled');
            } else if (units.pageIndex === (units.pageCount - 1)) {
                btnFirstPageGridUnit.removeAttribute('disabled');
                btnPreviousPageGridUnit.removeAttribute('disabled');
                btnLastPageGridUnit.setAttribute('disabled', 'disabled');
                btnNextPageGridUnit.setAttribute('disabled', 'disabled');
            } else {
                btnFirstPageGridUnit.removeAttribute('disabled');
                btnPreviousPageGridUnit.removeAttribute('disabled');
                btnNextPageGridUnit.removeAttribute('disabled');
                btnLastPageGridUnit.removeAttribute('disabled');
            }
            btnCurrentPageGridUnit.innerHTML = (units.pageIndex + 1) + ' / ' + units.pageCount;
        }

        // ========
        // ADD Unit
        // ========
        function btnUnitAdd_OnClick() {
            $('#unitEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $("#cmdSaveUnitButton").prop("disabled", false);
            $("#cmdUnitDetailCloseButton").prop("disabled", false);

            document.getElementById('unit_id').value = 0;
            document.getElementById('unit_Unit').value = "";
        }

        // =========
        // EDIT Unit
        // =========
        function btnEditUnit_OnClick() {
            units.editItem(units.currentItem);
            $('#unitEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $("#cmdSaveUnitButton").prop("disabled", false);
            $("#cmdUnitDetailCloseButton").prop("disabled", false);

            var unit = units.currentEditItem;
            document.getElementById('unit_id').value = unit.Id ? unit.Id : '';
            document.getElementById('unit_Unit').value = unit.Unit ? unit.Unit : '';
        }

        // =========
        // SAVE Unit
        // =========
        function btnUnitSaveButton_OnClick() {
            var unitObject = new Object();
            var unitId = document.getElementById('unit_id').value;
            unitObject.Unit = document.getElementById('unit_Unit').value;
            var unitData = JSON.stringify(unitObject);

            var isValid = true;
            $('.requiredUnit').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                }
                else {
                    $(this).css({
                        "border": "",
                    });
                }
            });
            if (isValid == false) {
                toastr.error("Invalid Entry");
                e.preventDefault();
            }
            else {
                $("#cmdSaveUnitButton").prop("disabled", true);
                $("#cmdUnitDetailCloseButton").prop("disabled", true);

                if(unitId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/addUnit',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: unitData,
                        statusCode: {
                            200: function () {
                                $("#cmdSaveUnitButton").prop("disabled", true);
                                $("#cmdUnitDetailCloseButton").prop("disabled", true);
                                toastr.success("Successfully Saved");

                                $('#unitEdit').modal('hide');

                                units = new wijmo.collections.CollectionView(getUnit());
                                units.canFilter = true;
                                units.pageSize = 15;

                                var filterTextUnit = '';
                                $('#InputFilterUnit').keyup(function () {
                                    filterTextUnit = this.value.toLowerCase();
                                    units.refresh();
                                });
                                units.filter = function (item) {
                                    return !filterTextUnit || (item.Unit.toLowerCase().indexOf(filterTextUnit) > -1);
                                }
                                units.collectionChanged.addHandler(function (sender, args) {
                                    updateNavigateButtonsUnit();
                                });
                                units.currentChanged.addHandler(function (sender, args) {
                                    updateDetailsUnit();
                                });

                                unitGrid.itemsSource = units;
                                unitGrid.trackChanges = true;
                            },
                            404: function () {
                                toastr.error("Can't Save");
                                $("#cmdSaveUnitButton").prop("disabled", false);
                                $("#cmdUnitDetailCloseButton").prop("disabled", false);
                            },
                            400: function () {
                                toastr.error("Bad Request");
                                $("#cmdSaveUnitButton").prop("disabled", false);
                                $("#cmdUnitDetailCloseButton").prop("disabled", false);
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/updateUnit/' + unitId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: unitData,
                        statusCode: {
                            200: function () {
                                $("#cmdSaveUnitButton").prop("disabled", true);
                                $("#cmdUnitDetailCloseButton").prop("disabled", true);
                                toastr.success("Successfully Updated");

                                $('#unitEdit').modal('hide');

                                units = new wijmo.collections.CollectionView(getUnit());
                                units.canFilter = true;
                                units.pageSize = 15;

                                var filterTextUnit = '';
                                $('#InputFilterUnit').keyup(function () {
                                    filterTextUnit = this.value.toLowerCase();
                                    units.refresh();
                                });
                                units.filter = function (item) {
                                    return !filterTextUnit || (item.Unit.toLowerCase().indexOf(filterTextUnit) > -1);
                                }
                                units.collectionChanged.addHandler(function (sender, args) {
                                    updateNavigateButtonsUnit();
                                });
                                units.currentChanged.addHandler(function (sender, args) {
                                    updateDetailsUnit();
                                });

                                unitGrid.itemsSource = units;
                                unitGrid.trackChanges = true;
                            },
                            404: function () {
                                toastr.error("Can't Save");
                                $("#cmdSaveUnitButton").prop("disabled", false);
                                $("#cmdUnitDetailCloseButton").prop("disabled", false);
                            },
                            400: function () {
                                toastr.error("Bad Request");
                                $("#cmdSaveUnitButton").prop("disabled", false);
                                $("#cmdUnitDetailCloseButton").prop("disabled", false);
                            }
                        }
                    });
                }
            }
        }

        // ===========
        // DELETE Unit
        // ===========
        function btnDeletetUnit_OnClick() {
            $('#deleteUnitConfirm').modal({
                show: true,
                backdrop: 'static'
            });

            $("#cmdConfirmDeleteUnit").prop("disabled", false);
            $("#cmdConfirmDeleteCloseButtonUnit").prop("disabled", false);
        }
        // Unit Confirm Delete Button
        function cmdUnitConfirmDeleteButton_OnClick() {
            $("#cmdConfirmDeleteUnit").prop("disabled", true);
            $("#cmdConfirmDeleteCloseButtonUnit").prop("disabled", true);

            units.editItem(units.currentItem);
            var id = units.currentEditItem.Id;
            $.ajax({
                url: '/api/deleteUnit/' + id,
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        $("#cmdConfirmDeleteUnit").prop("disabled", true);
                        $("#cmdConfirmDeleteCloseButtonUnit").prop("disabled", true);
                        toastr.success("Successfully Deleted");

                        $('#deleteUnitConfirm').modal('hide');

                        units = new wijmo.collections.CollectionView(getUnit());
                        units.canFilter = true;
                        units.pageSize = 15;

                        var filterTextUnit = '';
                        $('#InputFilterUnit').keyup(function () {
                            filterTextUnit = this.value.toLowerCase();
                            units.refresh();
                        });
                        units.filter = function (item) {
                            return !filterTextUnit || (item.Unit.toLowerCase().indexOf(filterTextUnit) > -1);
                        }
                        units.collectionChanged.addHandler(function (sender, args) {
                            updateNavigateButtonsUnit();
                        });
                        units.currentChanged.addHandler(function (sender, args) {
                            updateDetailsUnit();
                        });

                        unitGrid.itemsSource = units;
                        unitGrid.trackChanges = true;
                    },
                    404: function () {
                        toastr.error("Request Not Found");
                        $("#cmdConfirmDeleteUnit").prop("disabled", false);
                        $("#cmdConfirmDeleteCloseButtonUnit").prop("disabled", false);
                        $('#deleteUnitConfirm').modal('hide');

                    },
                    400: function () {
                        toastr.error("Can't be deleted");
                        $("#cmdConfirmDeleteUnit").prop("disabled", false);
                        $("#cmdConfirmDeleteCloseButtonUnit").prop("disabled", false);
                        $('#deleteUnitConfirm').modal('hide');
                    }
                }
            });
        }

        // ====
        // Unit
        // ====
        function unitTab() {
            units = new wijmo.collections.CollectionView(getUnit());
            units.canFilter = true;
            units.pageSize = 15;

            var filterTextUnit = '';
            $('#InputFilterUnit').keyup(function () {
                filterTextUnit = this.value.toLowerCase();
                units.refresh();
            });
            units.filter = function (item) {
                return !filterTextUnit || (item.Unit.toLowerCase().indexOf(filterTextUnit) > -1);
            }
            units.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsUnit();
            });
            units.currentChanged.addHandler(function (sender, args) {
                updateDetailsUnit();
            });

            // Flex Grid for Unit
            unitGrid = new wijmo.grid.FlexGrid('#UnitGrid');
            unitGrid.initialize({
                columns: [
                            {
                                "header": "Edit",
                                "binding": "EditId",
                                "width": 60,
                                "align": "center",
                                "allowResizing": false,
                                "allowSorting": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Delete",
                                "binding": "DeleteId",
                                "width": 70,
                                "align": "center",
                                "allowResizing": false,
                                "allowSorting": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Unit",
                                "binding": "Unit",
                                "align": "left",
                                "allowSorting": true,
                                "width": "1*",
                            }
                ],
                autoGenerateColumns: false,
                itemsSource: units,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            unitGrid.trackChanges = true;

            //Navigation button for Unit
            btnFirstPageGridUnit = document.getElementById('btnMoveToFirstPageGridUnit');
            btnPreviousPageGridUnit = document.getElementById('btnMoveToPreviousPageGridUnit');
            btnNextPageGridUnit = document.getElementById('btnMoveToNextPageGridUnit');
            btnLastPageGridUnit = document.getElementById('btnMoveToLastPageGridUnit');
            btnCurrentPageGridUnit = document.getElementById('btnCurrentPageGridUnit');

            updateNavigateButtonsUnit();

            btnFirstPageGridUnit.addEventListener('click', function () {
                units.moveToFirstPage();
                updateNavigateButtonsUnit();
            });
            btnPreviousPageGridUnit.addEventListener('click', function () {
                units.moveToPreviousPage();
                updateNavigateButtonsUnit();
            });
            btnNextPageGridUnit.addEventListener('click', function () {
                units.moveToNextPage();
                updateNavigateButtonsUnit();
            });
            btnLastPageGridUnit.addEventListener('click', function () {
                units.moveToLastPage();
                updateNavigateButtonsUnit();
            });
        }
    </script>

    <!-- ============ -->
    <!-- Term Scripts -->
    <!-- ============ -->
    <script type="text/javascript">
        // =========================
        // Global Variables for Term
        // =========================
        var terms;
        var termGrid;
        var btnFirstPageGridTerm;
        var btnPreviousPageGridTerm;
        var btnNextPageGridTerm;
        var btnLastPageGridTerm;
        var btnCurrentPageGridTerm;

        // =============
        // GET Term List
        // =============
        function getTerm() {
            var terms = new wijmo.collections.ObservableArray;
            $('#loadingModal').modal('show');
            $.ajax({
                url: '/api/listTerm',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (Results) {
                    $('#loadingModal').modal('hide');
                    if (Results.length > 0) {
                        for (i = 0; i < Results.length; i++) {
                            terms.push({
                                EditId: "<button class='btn btn-primary btn-xs btn-block' onclick='btnEditTerm_OnClick()'><i class='fa fa-edit'></i> Edit</button>",
                                DeleteId: "<button class='btn btn-danger btn-xs btn-block' onclick='btnDeleteTerm_OnClick()'><i class='fa fa-trash'></i> Delete</button>",
                                Id: Results[i]["Id"],
                                Term: Results[i]["Term"],
                                NumberOfDays: Results[i]["NumberOfDays"],
                                IsLocked: Results[i]["IsLocked"],
                                CreatedById: Results[i]["CreatedById"],
                                CreatedBy: Results[i]["CreatedBy"],
                                CreatedDateTime: Results[i]["CreatedDateTime"],
                                UpdatedById: Results[i]["UpdatedById"],
                                UpdatedBy: Results[i]["UpdatedBy"],
                                UpdatedDateTime: Results[i]["UpdatedDateTime"]
                            });
                        }
                    }
                }
            }).fail(function (xhr, textStatus, err) {
                alert(err);
            });
            return terms;
        }
        // ===========================
        // FlexGrid Selection for Term
        // ===========================
        function updateDetailsTerm() {
            var item = terms.currentItem;
            document.getElementById('createdBy').innerHTML = item.CreatedBy;
            document.getElementById('createdDate').innerHTML = item.CreatedDateTime;
            document.getElementById('updatedBy').innerHTML = item.UpdatedBy;
            document.getElementById('updatedDate').innerHTML = item.UpdatedDateTime;
        }

        // ===========================
        // Navigation Buttons for Term
        // ===========================
        function updateNavigateButtonsTerm() {
            if (terms.pageSize <= 0) {
                document.getElementById('navigationPageGridTerm').style.display = 'none';
                return;
            }
            document.getElementById('navigationPageGridTerm').style.display = 'block';
            if (terms.pageIndex === 0) {
                btnFirstPageGridTerm.setAttribute('disabled', 'disabled');
                btnPreviousPageGridTerm.setAttribute('disabled', 'disabled');
                btnNextPageGridTerm.removeAttribute('disabled');
                btnLastPageGridTerm.removeAttribute('disabled');
            } else if (terms.pageIndex === (terms.pageCount - 1)) {
                btnFirstPageGridTerm.removeAttribute('disabled');
                btnPreviousPageGridTerm.removeAttribute('disabled');
                btnLastPageGridTerm.setAttribute('disabled', 'disabled');
                btnNextPageGridTerm.setAttribute('disabled', 'disabled');
            } else {
                btnFirstPageGridTerm.removeAttribute('disabled');
                btnPreviousPageGridTerm.removeAttribute('disabled');
                btnNextPageGridTerm.removeAttribute('disabled');
                btnLastPageGridTerm.removeAttribute('disabled');
            }
            btnCurrentPageGridTerm.innerHTML = (terms.pageIndex + 1) + ' / ' + terms.pageCount;
        }

        // ========
        // ADD Term
        // ========
        function btnTermAdd_OnClick() {
            $('#termEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $("#cmdSaveTermButton").prop("disabled", false);
            $("#cmdTermDetailCloseButton").prop("disabled", false);

            document.getElementById('term_id').value = 0;
            document.getElementById('term_Term').value = "";
            document.getElementById('term_NoOfDays').value = "";
        }

        // =========
        // EDIT Term
        // =========
        function btnEditTerm_OnClick() {
            terms.editItem(terms.currentItem);
            $('#termEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $("#cmdSaveTermButton").prop("disabled", false);
            $("#cmdTermDetailCloseButton").prop("disabled", false);

            var term = terms.currentEditItem;
            document.getElementById('term_id').value = term.Id ? term.Id : '';
            document.getElementById('term_Term').value = term.Term ? term.Term : '';
            document.getElementById('term_NoOfDays').value = term.NumberOfDays ? term.NumberOfDays : '';
        }

        // ===========
        // DELETE Term
        // ===========
        function btnDeleteTerm_OnClick() {
            $('#deleteTermConfirm').modal({
                show: true,
                backdrop: 'static'
            });

            $("#cmdConfirmDeleteTerm").prop("disabled", false);
            $("#cmdConfirmDeleteCloseButtonTerm").prop("disabled", false);
        }
        // Term Confirm Delete Button
        function cmdTermConfirmDeleteButton_OnClick() {
            $("#cmdConfirmDeleteTerm").prop("disabled", true);
            $("#cmdConfirmDeleteCloseButtonTerm").prop("disabled", true);

            terms.editItem(terms.currentItem);
            var id = terms.currentEditItem.Id;
            $.ajax({
                url: '/api/deleteTerm/' + id,
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        $("#cmdConfirmDeleteTerm").prop("disabled", true);
                        $("#cmdConfirmDeleteCloseButtonTerm").prop("disabled", true);
                        toastr.success("Successfully Deleted");

                        $('#deleteTermConfirm').modal('hide');

                        terms = new wijmo.collections.CollectionView(getTerm());
                        terms.canFilter = true;
                        terms.pageSize = 15;

                        var filterTextTerm = '';
                        $('#InputFilterTerm').keyup(function () {
                            filterTextTerm = this.value.toLowerCase();
                            terms.refresh();
                        });
                        terms.filter = function (item) {
                            return !filterTextTerm || (item.Term.toLowerCase().indexOf(filterTextTerm) > -1);
                        }
                        terms.collectionChanged.addHandler(function (sender, args) {
                            updateNavigateButtonsTerm();
                        });
                        terms.currentChanged.addHandler(function (sender, args) {
                            updateDetailsTerm();
                        });

                        termGrid.itemsSource = terms;
                        termGrid.trackChanges = true;
                    },
                    404: function () {
                        toastr.error("Request Not Found");
                        $("#cmdConfirmDeleteTerm").prop("disabled", false);
                        $("#cmdConfirmDeleteCloseButtonTerm").prop("disabled", false);
                        $('#deleteTermConfirm').modal('hide');

                    },
                    400: function () {
                        toastr.error("Can't be deleted");
                        $("#cmdConfirmDeleteTerm").prop("disabled", false);
                        $("#cmdConfirmDeleteCloseButtonTerm").prop("disabled", false);
                        $('#deleteTermConfirm').modal('hide');
                    }
                }
            });
        }

        // =========
        // SAVE Term
        // =========
        function btnTermSaveButton_OnClick() {
            var termObject = new Object();
            var termId = document.getElementById('term_id').value;
            termObject.Term = document.getElementById('term_Term').value;
            termObject.NumberOfDays = document.getElementById('term_NoOfDays').value;
            var termData = JSON.stringify(termObject);

            var isValid = true;
            $('.requiredTerm').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                }
                else {
                    $(this).css({
                        "border": "",
                    });
                }
            });
            if (isValid == false) {
                toastr.error("Invalid Entry");
                e.preventDefault();
            }
            else {
                $("#cmdSaveTermButton").prop("disabled", true);
                $("#cmdTermDetailCloseButton").prop("disabled", true);

                if(termId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/addTerm',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: termData,
                        statusCode: {
                            200: function () {
                                $("#cmdSaveTermButton").prop("disabled", true);
                                $("#cmdTermDetailCloseButton").prop("disabled", true);
                                toastr.success("Successfully Saved");

                                $('#termEdit').modal('hide');

                                terms = new wijmo.collections.CollectionView(getTerm());
                                terms.canFilter = true;
                                terms.pageSize = 15;

                                var filterTextTerm = '';
                                $('#InputFilterTerm').keyup(function () {
                                    filterTextTerm = this.value.toLowerCase();
                                    terms.refresh();
                                });
                                terms.filter = function (item) {
                                    return !filterTextTerm || (item.Term.toLowerCase().indexOf(filterTextTerm) > -1);
                                }
                                terms.collectionChanged.addHandler(function (sender, args) {
                                    updateNavigateButtonsTerm();
                                });
                                terms.currentChanged.addHandler(function (sender, args) {
                                    updateDetailsTerm();
                                });

                                termGrid.itemsSource = terms;
                                termGrid.trackChanges = true;
                            },
                            404: function () {
                                toastr.error("Can't Save");
                                $("#cmdSaveTermButton").prop("disabled", false);
                                $("#cmdTermDetailCloseButton").prop("disabled", false);
                            },
                            400: function () {
                                toastr.error("Bad Request");
                                $("#cmdSaveTermButton").prop("disabled", false);
                                $("#cmdTermDetailCloseButton").prop("disabled", false);
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/updateTerm/' + termId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: termData,
                        statusCode: {
                            200: function () {
                                $("#cmdSaveTermButton").prop("disabled", true);
                                $("#cmdTermDetailCloseButton").prop("disabled", true);
                                toastr.success("Successfully Updated");

                                $('#termEdit').modal('hide');

                                terms = new wijmo.collections.CollectionView(getTerm());
                                terms.canFilter = true;
                                terms.pageSize = 15;

                                var filterTextTerm = '';
                                $('#InputFilterTerm').keyup(function () {
                                    filterTextTerm = this.value.toLowerCase();
                                    terms.refresh();
                                });
                                terms.filter = function (item) {
                                    return !filterTextTerm || (item.Term.toLowerCase().indexOf(filterTextTerm) > -1);
                                }
                                terms.collectionChanged.addHandler(function (sender, args) {
                                    updateNavigateButtonsTerm();
                                });
                                terms.currentChanged.addHandler(function (sender, args) {
                                    updateDetailsTerm();
                                });

                                termGrid.itemsSource = terms;
                                termGrid.trackChanges = true;
                            },
                            404: function () {
                                toastr.error("Can't Save");
                                $("#cmdSaveTermButton").prop("disabled", false);
                                $("#cmdTermDetailCloseButton").prop("disabled", false);
                            },
                            400: function () {
                                toastr.error("Bad Request");
                                $("#cmdSaveTermButton").prop("disabled", false);
                                $("#cmdTermDetailCloseButton").prop("disabled", false);
                            }
                        }
                    });
                }
            }
        }

        // ====
        // Term
        // ====
        function termTab() {
            terms = new wijmo.collections.CollectionView(getTerm());
            terms.canFilter = true;
            terms.pageSize = 15;

            var filterTextTerm = '';
            $('#InputFilterTerm').keyup(function () {
                filterTextTerm = this.value.toLowerCase();
                terms.refresh();
            });
            terms.filter = function (item) {
                return !filterTextTerm || (item.Term.toLowerCase().indexOf(filterTextTerm) > -1);
            }
            terms.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsTerm();
            });
            terms.currentChanged.addHandler(function (sender, args) {
                updateDetailsTerm();
            });

            // Flex Grid for Term
            termGrid = new wijmo.grid.FlexGrid('#TermGrid');
            termGrid.initialize({
                columns: [
                            {
                                "header": "Edit",
                                "binding": "EditId",
                                "width": 60,
                                "align": "center",
                                "allowResizing": false,
                                "allowSorting": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Delete",
                                "binding": "DeleteId",
                                "width": 70,
                                "align": "center",
                                "allowResizing": false,
                                "allowSorting": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Term",
                                "binding": "Term",
                                "align": "left",
                                "allowSorting": true,
                                "width": "1*",
                            },
                            {
                                "header": "Days",
                                "binding": "NumberOfDays",
                                "align": "right",
                                "allowSorting": true,
                                "width": "1*"
                            }
                ],
                autoGenerateColumns: false,
                itemsSource: terms,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            termGrid.trackChanges = true;

            //Navigation button for Term
            btnFirstPageGridTerm = document.getElementById('btnMoveToFirstPageGridTerm');
            btnPreviousPageGridTerm = document.getElementById('btnMoveToPreviousPageGridTerm');
            btnNextPageGridTerm = document.getElementById('btnMoveToNextPageGridTerm');
            btnLastPageGridTerm = document.getElementById('btnMoveToLastPageGridTerm');
            btnCurrentPageGridTerm = document.getElementById('btnCurrentPageGridTerm');

            updateNavigateButtonsTerm();

            btnFirstPageGridTerm.addEventListener('click', function () {
                terms.moveToFirstPage();
                updateNavigateButtonsTerm();
            });
            btnPreviousPageGridTerm.addEventListener('click', function () {
                terms.moveToPreviousPage();
                updateNavigateButtonsTerm();
            });
            btnNextPageGridTerm.addEventListener('click', function () {
                terms.moveToNextPage();
                updateNavigateButtonsTerm();
            });
            btnLastPageGridTerm.addEventListener('click', function () {
                terms.moveToLastPage();
                updateNavigateButtonsTerm();
            });
        }
    </script>

    <!-- ================ -->
    <!-- Employee Scripts -->
    <!-- ================ -->
    <script type="text/javascript">
        // =============================
        // Global Variables for Employee
        // =============================
        var employees;
        var employeeGrid;
        var employeeAccounts;
        var cboEmployeeForAccount;
        var btnFirstPageEmployee;
        var btnPreviousPageGridEmployee;
        var btnNextPageGridEmployee;
        var btnLastPageGridEmployee;
        var btnCurrentPageGridEmployee;

        // =================
        // GET Employee List
        // =================
        function getEmployee() {
            var employees = new wijmo.collections.ObservableArray;
            $('#loadingModal').modal('show');
            $.ajax({
                url: '/api/listArticleByArticleTypeId/4',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (Results) {
                    $('#loadingModal').modal('hide');
                    if (Results.length > 0) {
                        for (i = 0; i < Results.length; i++) {
                            employees.push({
                                EditId: "<button class='btn btn-primary btn-xs btn-block' onclick='btnEditEmployee_OnClick()'><i class='fa fa-edit'></i> Edit</button>",
                                DeleteId: "<button class='btn btn-danger btn-xs btn-block' onclick='btnDeleteEmployee_OnClick()'><i class='fa fa-trash'></i> Delete</button>",
                                Id: Results[i]["Id"],
                                ArticleCode : Results[i]["ArticleCode"],
                                ManualArticleCode : Results[i]["ManualArticleCode"],
                                Article : Results[i]["Article"],
                                Category : Results[i]["Category"],
                                ArticleTypeId : Results[i]["ArticleTypeId"],
                                ArticleType : Results[i]["ArticleType"],
                                ArticleGroupId : Results[i]["ArticleGroupId"],
                                ArticleGroup : Results[i]["ArticleGroup"],
                                AccountId : Results[i]["AccountId"],
                                Account : Results[i]["Account"],
                                SalesAccountId : Results[i]["SalesAccountId"],
                                CostAccountId : Results[i]["CostAccountId"],
                                AssetAccountId : Results[i]["AssetAccountId"],
                                ExpenseAccountId : Results[i]["ExpenseAccountId"],
                                UnitId : Results[i]["UnitId"],
                                Unit : Results[i]["Unit"],
                                OutputTaxId : Results[i]["OutputTaxId"],
                                InputTaxId : Results[i]["InputTaxId"],
                                WTaxTypeId : Results[i]["WTaxTypeId"],
                                Price : Results[i]["Price"],
                                Cost : Results[i]["Cost"],
                                IsInventory : Results[i]["IsInventory"],
                                Particulars : Results[i]["Particulars"],
                                Address : Results[i]["Address"],
                                TermId : Results[i]["TermId"],
                                ContactNumber : Results[i]["ContactNumber"],
                                ContactPerson : Results[i]["ContactPerson"],
                                TaxNumber : Results[i]["TaxNumber"],
                                CreditLimit : Results[i]["CreditLimit"],
                                DateAcquired : Results[i]["DateAcquired"],
                                UsefulLife : Results[i]["UsefulLife"],
                                SalvageValue : Results[i]["SalvageValue"],
                                ManualArticleOldCode : Results[i]["ManualArticleOldCode"],
                                IsLocked: Results[i]["IsLocked"],
                                CreatedById: Results[i]["CreatedById"],
                                CreatedBy: Results[i]["CreatedBy"],
                                CreatedDateTime: Results[i]["CreatedDateTime"],
                                UpdatedById: Results[i]["UpdatedById"],
                                UpdatedBy: Results[i]["UpdatedBy"],
                                UpdatedDateTime: Results[i]["UpdatedDateTime"]
                            });
                        }
                    }
                }
            }).fail(function (xhr, textStatus, err) {
                alert(err);
            });
            return employees;
        }

        // ===============================
        // FlexGrid Selection for Employee
        // ===============================
        function updateDetailsEmployee() {
            var item = employees.currentItem;
            document.getElementById('createdBy').innerHTML = item.CreatedBy;
            document.getElementById('createdDate').innerHTML = item.CreatedDateTime;
            document.getElementById('updatedBy').innerHTML = item.UpdatedBy;
            document.getElementById('updatedDate').innerHTML = item.UpdatedDateTime;
        }

        // ===============================
        // Navigation Buttons for Employee
        // ===============================
        function updateNavigateButtonsEmployee() {
            if (employees.pageSize <= 0) {
                document.getElementById('navigationPageGridEmployee').style.display = 'none';
                return;
            }
            document.getElementById('navigationPageGridEmployee').style.display = 'block';
            if (employees.pageIndex === 0) {
                btnFirstPageGridEmployee.setAttribute('disabled', 'disabled');
                btnPreviousPageGridEmployee.setAttribute('disabled', 'disabled');
                btnNextPageGridEmployee.removeAttribute('disabled');
                btnLastPageGridEmployee.removeAttribute('disabled');
            } else if (employees.pageIndex === (employees.pageCount - 1)) {
                btnFirstPageGridEmployee.removeAttribute('disabled');
                btnPreviousPageGridEmployee.removeAttribute('disabled');
                btnLastPageGridEmployee.setAttribute('disabled', 'disabled');
                btnNextPageGridEmployee.setAttribute('disabled', 'disabled');
            } else {
                btnFirstPageGridEmployee.removeAttribute('disabled');
                btnPreviousPageGridEmployee.removeAttribute('disabled');
                btnNextPageGridEmployee.removeAttribute('disabled');
                btnLastPageGridEmployee.removeAttribute('disabled');
            }
            btnCurrentPageGridEmployee.innerHTML = (employees.pageIndex + 1) + ' / ' + employees.pageCount;
        }

        // ===========
        // Get Account
        // ===========
        function getEmployeeAccountForComboBox() {
            employeeAccounts = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listAccount',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            employeeAccounts.push({
                                AccountId: results[i]["Id"],
                                AccountAccount: results[i]["Account"]
                            });
                        }
                        createCboForEmployeeAccount(employeeAccounts);
                    }
                }
            });
        }

        // ===============
        // CBO for Account
        // ===============
        function  createCboForEmployeeAccount(employeeAccounts) {
            var accountCollection = new wijmo.collections.CollectionView(employeeAccounts);
            var accountList = new Array();
            for (var i = 0; i < accountCollection.items.length; i++) {
                accountList.push(accountCollection.items[i].AccountAccount);
            }

            cboEmployeeForAccount.dispose();
            cboEmployeeForAccount = new wijmo.input.ComboBox('#employee_Account', {
                placeholder: "Select Account",
                itemsSource: accountList,
                isEditable: false,
                required: false,
                selectedValue: document.getElementById('employee_Account_selectedValue').value.toString(),
                onSelectedIndexChanged: function () {
                    $("#employee_Account_data").val(accountCollection.items[this.selectedIndex].AccountId);
                }
            });
        }

        // ============
        // ADD Employee
        // ============
        function btnEmployeeAdd_OnClick() {
            $('#employeeEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $("#cmdSaveEmployeeButton").prop("disabled", false);
            $("#cmdEmployeeDetailCloseButton").prop("disabled", false);

            getEmployeeAccountForComboBox();

            document.getElementById('employee_id').value = 0;
            document.getElementById('employee_Code').value = "";
            document.getElementById('employee_Employee').value = "";
            document.getElementById('employee_Account_data').value = "";
            document.getElementById('employee_Account_selectedValue').value = "";
            document.getElementById('employee_Address').value = "";
            document.getElementById('employee_ContactNumber').value = "";

            var employees = new wijmo.collections.ObservableArray;
            $.ajax({
                url: '/api/articleLastArticleCodeByArticleTypeId/4',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (Results) {
                    if (Results.length > 0) {
                        employees.push({
                            Id: Results.Id,
                            EmployeeArticleCode: Results.ArticleCode
                        });
                    }
                    var ArticleCode = parseInt(Results.ArticleCode);
                    var ArticleCode_plusOne = 0000000001;
                    var ArticleCode_Results = ArticleCode + ArticleCode_plusOne;

                    document.getElementById('employee_Code').value = zerofill(ArticleCode_Results, 10);
                }
            });
        }

        // =============
        // EDIT Employee
        // =============
        function btnEditEmployee_OnClick() {
            employees.editItem(employees.currentItem);
            $('#employeeEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $("#cmdSaveEmployeeButton").prop("disabled", false);
            $("#cmdEmployeeDetailCloseButton").prop("disabled", false);

            getEmployeeAccountForComboBox();

            var employee = employees.currentEditItem;
            document.getElementById('employee_id').value = employee.Id ? employee.Id : '';
            document.getElementById('employee_Code').value = employee.ArticleCode ? employee.ArticleCode : '';
            document.getElementById('employee_Employee').value = employee.Article ? employee.Article : '';
            document.getElementById('employee_Account_data').value = employee.AccountId ? employee.AccountId : '';
            document.getElementById('employee_Account_selectedValue').value = employee.Account ? employee.Account : '';
            document.getElementById('employee_Address').value = employee.Address ? employee.Address : '';
            document.getElementById('employee_ContactNumber').value = employee.ContactNumber ? employee.ContactNumber : '';
        }

        // ===============
        // DELETE Employee
        // ===============
        function btnDeleteEmployee_OnClick() {
            $('#deleteEmployeeConfirm').modal({
                show: true,
                backdrop: 'static'
            });

            $("#cmdConfirmDeleteEmployee").prop("disabled", false);
            $("#cmdConfirmDeleteCloseButtonEmployee").prop("disabled", false);
        }
        // Employee Confirm Delete Button
        function cmdEmployeeConfirmDeleteButton_OnClick() {
            $("#cmdConfirmDeleteEmployee").prop("disabled", true);
            $("#cmdConfirmDeleteCloseButtonEmployee").prop("disabled", true);

            employees.editItem(employees.currentItem);
            var id = employees.currentEditItem.Id;
            $.ajax({
                url: '/api/deleteArticle/' + id,
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        $("#cmdConfirmDeleteEmployee").prop("disabled", true);
                        $("#cmdConfirmDeleteCloseButtonEmployee").prop("disabled", true);
                        toastr.success("Successfully Deleted");

                        $('#deleteEmployeeConfirm').modal('hide');

                        employees = new wijmo.collections.CollectionView(getEmployee());
                        employees.canFilter = true;
                        employees.pageSize = 15;

                        var filterTextEmployee = '';
                        $('#InputFilterTerm').keyup(function () {
                            filterTextEmployee = this.value.toLowerCase();
                            employees.refresh();
                        });
                        employees.filter = function (item) {
                            return !filterTextEmployee || (item.Article.toLowerCase().indexOf(filterTextEmployee) > -1);
                        }
                        employees.collectionChanged.addHandler(function (sender, args) {
                            updateNavigateButtonsEmployee();
                        });
                        employees.currentChanged.addHandler(function (sender, args) {
                            updateDetailsEmployee();
                        });

                        employeeGrid.itemsSource = employees;
                        employeeGrid.trackChanges = true;
                    },
                    404: function () {
                        toastr.error("Request Not Found");
                        $("#cmdConfirmDeleteEmployee").prop("disabled", false);
                        $("#cmdConfirmDeleteCloseButtonEmployee").prop("disabled", false);
                        $('#deleteEmployeeConfirm').modal('hide');

                    },
                    400: function () {
                        toastr.error("Can't be deleted");
                        $("#cmdConfirmDeleteEmployee").prop("disabled", false);
                        $("#cmdConfirmDeleteCloseButtonEmployee").prop("disabled", false);
                        $('#deleteEmployeeConfirm').modal('hide');
                    }
                }
            });
        }

        // =============
        // SAVE Employee
        // =============
        function btnEmployeeSaveButton_OnClick() {
            var employeeObject = new Object();
            var employeeId = document.getElementById('employee_id').value;
            employeeObject.ArticleCode = document.getElementById('employee_Code').value;
            employeeObject.Article = document.getElementById('employee_Employee').value;
            employeeObject.AccountId = document.getElementById('employee_Account_data').value;
            employeeObject.Address = document.getElementById('employee_Address').value;
            employeeObject.ContactNumber = document.getElementById('employee_ContactNumber').value;
            var employeeData = JSON.stringify(employeeObject);

            if( document.getElementById('employee_Account_data').value == '') {
                document.getElementById("employee_Account").style.border = "1px solid red";
            } else {
                document.getElementById("employee_Account").style.border = "1px solid #C8C8C8";
            }

            var isValid = true;
            $('.requiredEmployee').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                }
                else {
                    $(this).css({
                        "border": "",
                    });
                }
            });
            if (isValid == false) {
                toastr.error("Invalid Entry");
                e.preventDefault();
            }
            else {
                $("#cmdSaveEmployeeButton").prop("disabled", true);
                $("#cmdEmployeeDetailCloseButton").prop("disabled", true);

                if(employeeId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/addArticle/4',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: employeeData,
                        statusCode: {
                            200: function () {
                                $("#cmdSaveEmployeeButton").prop("disabled", true);
                                $("#cmdEmployeeDetailCloseButton").prop("disabled", true);
                                toastr.success("Successfully Saved");

                                $('#employeeEdit').modal('hide');

                                employees = new wijmo.collections.CollectionView(getEmployee());
                                employees.canFilter = true;
                                employees.pageSize = 15;

                                var filterTextEmployee = '';
                                $('#InputFilterTerm').keyup(function () {
                                    filterTextEmployee = this.value.toLowerCase();
                                    employees.refresh();
                                });
                                employees.filter = function (item) {
                                    return !filterTextEmployee || (item.Article.toLowerCase().indexOf(filterTextEmployee) > -1);
                                }
                                employees.collectionChanged.addHandler(function (sender, args) {
                                    updateNavigateButtonsEmployee();
                                });
                                employees.currentChanged.addHandler(function (sender, args) {
                                    updateDetailsEmployee();
                                });

                                employeeGrid.itemsSource = employees;
                                employeeGrid.trackChanges = true;
                            },
                            404: function () {
                                toastr.error("Can't Save");
                                $("#cmdSaveEmployeeButton").prop("disabled", false);
                                $("#cmdEmployeeDetailCloseButton").prop("disabled", false);
                            },
                            400: function () {
                                toastr.error("Bad Request");
                                $("#cmdSaveEmployeeButton").prop("disabled", false);
                                $("#cmdEmployeeDetailCloseButton").prop("disabled", false);
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/updateArticle/' + employeeId + '/4',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: employeeData,
                        statusCode: {
                            200: function () {
                                $("#cmdSaveEmployeeButton").prop("disabled", true);
                                $("#cmdEmployeeDetailCloseButton").prop("disabled", true);
                                toastr.success("Successfully Updated");

                                $('#employeeEdit').modal('hide');

                                employees = new wijmo.collections.CollectionView(getEmployee());
                                employees.canFilter = true;
                                employees.pageSize = 15;

                                var filterTextEmployee = '';
                                $('#InputFilterTerm').keyup(function () {
                                    filterTextEmployee = this.value.toLowerCase();
                                    employees.refresh();
                                });
                                employees.filter = function (item) {
                                    return !filterTextEmployee || (item.Article.toLowerCase().indexOf(filterTextEmployee) > -1);
                                }
                                employees.collectionChanged.addHandler(function (sender, args) {
                                    updateNavigateButtonsEmployee();
                                });
                                employees.currentChanged.addHandler(function (sender, args) {
                                    updateDetailsEmployee();
                                });

                                employeeGrid.itemsSource = employees;
                                employeeGrid.trackChanges = true;
                            },
                            404: function () {
                                toastr.error("Can't Save");
                                $("#cmdSaveEmployeeButton").prop("disabled", false);
                                $("#cmdEmployeeDetailCloseButton").prop("disabled", false);
                            },
                            400: function () {
                                toastr.error("Bad Request");
                                $("#cmdSaveEmployeeButton").prop("disabled", false);
                                $("#cmdEmployeeDetailCloseButton").prop("disabled", false);
                            }
                        }
                    });
                }
            }
        }

        // ========================================================
        // Function with leading zeroes to display the article code
        // ========================================================
        function zerofill(number, length) {
            var result = number.toString();
            var pad = length - result.length;
            while(pad > 0) {
                result = '0' + result;
                pad--;
            }
            return result;
        }

        // ========
        // Employee
        // ========
        function employeeTab() {
            cboEmployeeForAccount = new wijmo.input.ComboBox('#employee_Account');
            document.getElementById('employee_Code').disabled = true;

            employees = new wijmo.collections.CollectionView(getEmployee());
            employees.canFilter = true;
            employees.pageSize = 15;

            var filterTextEmployee = '';
            $('#InputFilterEmployee').keyup(function () {
                filterTextEmployee = this.value.toLowerCase();
                employees.refresh();
            });
            employees.filter = function (item) {
                return !filterTextEmployee || (item.Article.toLowerCase().indexOf(filterTextEmployee) > -1);
            }
            employees.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsEmployee();
            });
            employees.currentChanged.addHandler(function (sender, args) {
                updateDetailsEmployee();
            });

            // Flex Grid for Employee
            employeeGrid = new wijmo.grid.FlexGrid('#EmployeeGrid');
            employeeGrid.initialize({
                columns: [
                            {
                                "header": "Edit",
                                "binding": "EditId",
                                "width": 60,
                                "align": "center",
                                "allowResizing": false,
                                "allowSorting": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Delete",
                                "binding": "DeleteId",
                                "width": 70,
                                "align": "center",
                                "allowResizing": false,
                                "allowSorting": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Code",
                                "binding": "ArticleCode",
                                "align": "left",
                                "allowSorting": true,
                                "width": "1*",
                            },
                            {
                                "header": "Employee",
                                "binding": "Article",
                                "align": "left",
                                "allowSorting": true,
                                "width": "3*"
                            },
                            {
                                "header": "Account",
                                "binding": "Account",
                                "align": "left",
                                "allowSorting": true,
                                "width": "3*"
                            }
                ],
                autoGenerateColumns: false,
                itemsSource: employees,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            employeeGrid.trackChanges = true;

            //Navigation button for Employee
            btnFirstPageGridEmployee = document.getElementById('btnMoveToFirstPageGridEmployee');
            btnPreviousPageGridEmployee = document.getElementById('btnMoveToPreviousPageGridEmployee');
            btnNextPageGridEmployee = document.getElementById('btnMoveToNextPageGridEmployee');
            btnLastPageGridEmployee = document.getElementById('btnMoveToLastPageGridEmployee');
            btnCurrentPageGridEmployee = document.getElementById('btnCurrentPageGridEmployee');

            updateNavigateButtonsEmployee();

            btnFirstPageGridEmployee.addEventListener('click', function () {
                employees.moveToFirstPage();
                updateNavigateButtonsEmployee();
            });
            btnPreviousPageGridEmployee.addEventListener('click', function () {
                employees.moveToPreviousPage();
                updateNavigateButtonsEmployee();
            });
            btnNextPageGridEmployee.addEventListener('click', function () {
                employees.moveToNextPage();
                updateNavigateButtonsEmployee();
            });
            btnLastPageGridEmployee.addEventListener('click', function () {
                employees.moveToLastPage();
                updateNavigateButtonsEmployee();
            });
        }
    </script>

    <!-- ===================== -->
    <!-- Article Group Scripts -->
    <!-- ===================== -->
    <script type="text/javascript">
        // ==================================
        // Global Variables for Article Group
        // ==================================
        var articlegroups;
        var articleGroupGrid;
        var articleGroupAccounts;
        var articleTypes;
        var cboArticleType;
        var cboArticleGroupAccount;
        var cboArticleGroupSaleAccount;
        var cboArticleGroupCostAccount;
        var cboArticleGroupAssetAccount;
        var cboArticleGroupExpenseAccount;
        var btnFirstPageArticleGroup;
        var btnPreviousPageGridArticleGroup;
        var btnNextPageGridArticleGroup;
        var btnLastPageGridArticleGroup;
        var btnCurrentPageGridArticleGroup;

        // ======================
        // GET Article Group List
        // ======================
        function getArticleGroup() {
            var articlegroups = new wijmo.collections.ObservableArray;
            $('#loadingModal').modal('show');
            $.ajax({
                url: '/api/listArticleGroup',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (Results) {
                    $('#loadingModal').modal('hide');
                    if (Results.length > 0) {
                        for (i = 0; i < Results.length; i++) {
                            articlegroups.push({
                                EditId: "<button class='btn btn-primary btn-xs btn-block' onclick='btnEditArticleGroup_OnClick()'><i class='fa fa-edit'></i> Edit</button>",
                                DeleteId: "<button class='btn btn-danger btn-xs btn-block' onclick='btnDeleteArticleGroup_OnClick()'><i class='fa fa-trash'></i> Delete</button>",
                                Id: Results[i]["Id"],
                                ArticleGroup: Results[i]["ArticleGroup"],
                                ArticleTypeId: Results[i]["ArticleTypeId"],
                                ArticleType: Results[i]["ArticleType"],
                                AccountId: Results[i]["AccountId"],
                                Account: Results[i]["Account"],
                                SalesAccountId: Results[i]["SalesAccountId"],
                                SalesAccount: Results[i]["SalesAccount"],
                                CostAccountId: Results[i]["CostAccountId"],
                                CostAccount: Results[i]["CostAccount"],
                                AssetAccountId: Results[i]["AssetAccountId"],
                                AssetAccount: Results[i]["AssetAccount"],
                                ExpenseAccountId: Results[i]["ExpenseAccountId"],
                                ExpenseAccount: Results[i]["ExpenseAccount"],
                                IsLocked: Results[i]["IsLocked"],
                                CreatedById: Results[i]["CreatedById"],
                                CreatedBy: Results[i]["CreatedBy"],
                                CreatedDateTime: Results[i]["CreatedDateTime"],
                                UpdatedById: Results[i]["UpdatedById"],
                                UpdatedBy: Results[i]["UpdatedBy"],
                                UpdatedDateTime: Results[i]["UpdatedDateTime"]
                            });
                        }
                    }
                }
            }).fail(function (xhr, textStatus, err) {
                alert(err);
            });
            return articlegroups;
        }

        // ====================================
        // FlexGrid Selection for Article Group
        // ====================================
        function updateDetailsArticleGroup() {
            var item = articlegroups.currentItem;
            document.getElementById('createdBy').innerHTML = item.CreatedBy;
            document.getElementById('createdDate').innerHTML = item.CreatedDateTime;
            document.getElementById('updatedBy').innerHTML = item.UpdatedBy;
            document.getElementById('updatedDate').innerHTML = item.UpdatedDateTime;
        }

        // ====================================
        // Navigation Buttons for Article Group
        // ====================================
        function updateNavigateButtonsArticleGroup() {
            if (articlegroups.pageSize <= 0) {
                document.getElementById('navigationPageGridArticleGroup').style.display = 'none';
                return;
            }
            document.getElementById('navigationPageGridArticleGroup').style.display = 'block';
            if (articlegroups.pageIndex === 0) {
                btnFirstPageGridArticleGroup.setAttribute('disabled', 'disabled');
                btnPreviousPageGridArticleGroup.setAttribute('disabled', 'disabled');
                btnNextPageGridArticleGroup.removeAttribute('disabled');
                btnLastPageGridArticleGroup.removeAttribute('disabled');
            } else if (articlegroups.pageIndex === (articlegroups.pageCount - 1)) {
                btnFirstPageGridArticleGroup.removeAttribute('disabled');
                btnPreviousPageGridArticleGroup.removeAttribute('disabled');
                btnLastPageGridArticleGroup.setAttribute('disabled', 'disabled');
                btnNextPageGridArticleGroup.setAttribute('disabled', 'disabled');
            } else {
                btnFirstPageGridArticleGroup.removeAttribute('disabled');
                btnPreviousPageGridArticleGroup.removeAttribute('disabled');
                btnNextPageGridArticleGroup.removeAttribute('disabled');
                btnLastPageGridArticleGroup.removeAttribute('disabled');
            }
            btnCurrentPageGridArticleGroup.innerHTML = (articlegroups.pageIndex + 1) + ' / ' + articlegroups.pageCount;
        }

        // ================
        // Get Article Type
        // ================
        function getArticleType() {
            articleTypes = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listArticleType',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            articleTypes.push({
                                ArticleTypeId: results[i]["Id"],
                                ArticleType: results[i]["ArticleType"]
                            });
                        }
                        createCboForArticleType(articleTypes);
                    }
                }
            });
        }

        // ====================
        // CBO for Article Type
        // ====================
        function createCboForArticleType(articleTypes) {
            var articleTypeCollection = new wijmo.collections.CollectionView(articleTypes);
            var aeticleTypeList = new Array();
            for (var i = 0; i < articleTypeCollection.items.length; i++) {
                aeticleTypeList.push(articleTypeCollection.items[i].ArticleType);
            }

            cboArticleType.dispose();
            cboArticleType = new wijmo.input.ComboBox('#articleGroup_ArticleType', {
                placeholder: "Select Article Type",
                itemsSource: aeticleTypeList,
                isEditable: false,
                required: false,
                selectedValue: document.getElementById('articleGroup_ArticleType_selectedValue').value.toString(),
                onSelectedIndexChanged: function () {
                    $("#articleGroup_ArticleType_data").val(articleTypeCollection.items[this.selectedIndex].ArticleTypeId);
                }
            });
        }

        // ===========
        // Get Account
        // ===========
        function getArticleGroupAccount() {
            articleGroupAccounts = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listAccount',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            articleGroupAccounts.push({
                                AccountId: results[i]["Id"],
                                AccountAccount: results[i]["Account"]
                            });
                        }
                        createCboForArticleGroupAccount(articleGroupAccounts);
                    }
                }
            });
        }

        // ===============
        // CBO for Account
        // ===============
        function createCboForArticleGroupAccount(articleGroupAccounts) {
            var accountCollection = new wijmo.collections.CollectionView(articleGroupAccounts);
            var accountList = new Array();
            for (var i = 0; i < accountCollection.items.length; i++) {
                accountList.push(accountCollection.items[i].AccountAccount);
            }

            cboArticleGroupAccount.dispose();
            cboArticleGroupAccount = new wijmo.input.ComboBox('#articleGroup_Account', {
                placeholder: "Select Account",
                itemsSource: accountList,
                isEditable: false,
                required: false,
                selectedValue: document.getElementById('articleGroup_Account_selectedValue').value.toString(),
                onSelectedIndexChanged: function () {
                    $("#articleGroup_Account_data").val(accountCollection.items[this.selectedIndex].AccountId);
                }
            });

            cboArticleGroupSaleAccount.dispose();
            cboArticleGroupSaleAccount = new wijmo.input.ComboBox('#articleGroup_SalesAccount', {
                placeholder: "Select Sales Account",
                itemsSource: accountList,
                isEditable: false,
                required: false,
                selectedValue: document.getElementById('articleGroup_SalesAccount_selectedValue').value.toString(),
                onSelectedIndexChanged: function () {
                    $("#articleGroup_SalesAccount_data").val(accountCollection.items[this.selectedIndex].AccountId);
                }
            });

            cboArticleGroupCostAccount.dispose();
            cboArticleGroupCostAccount = new wijmo.input.ComboBox('#articleGroup_CostAccount', {
                placeholder: "Select Cost Account",
                itemsSource: accountList,
                isEditable: false,
                required: false,
                selectedValue: document.getElementById('articleGroup_CostAccount_selectedValue').value.toString(),
                onSelectedIndexChanged: function () {
                    $("#articleGroup_CostAccount_data").val(accountCollection.items[this.selectedIndex].AccountId);
                }
            });

            cboArticleGroupAssetAccount.dispose();
            cboArticleGroupAssetAccount = new wijmo.input.ComboBox('#articleGroup_AssetAccount', {
                placeholder: "Select Asset Account",
                itemsSource: accountList,
                isEditable: false,
                required: false,
                selectedValue: document.getElementById('articleGroup_AssetAccount_selectedValue').value.toString(),
                onSelectedIndexChanged: function () {
                    $("#articleGroup_AssetAccount_data").val(accountCollection.items[this.selectedIndex].AccountId);
                }
            });

            cboArticleGroupExpenseAccount.dispose();
            cboArticleGroupExpenseAccount = new wijmo.input.ComboBox('#articleGroup_ExpenseAccount', {
                placeholder: "Select Expense Account",
                itemsSource: accountList,
                isEditable: false,
                required: false,
                selectedValue: document.getElementById('articleGroup_ExpenseAccount_selectedValue').value.toString(),
                onSelectedIndexChanged: function () {
                    $("#articleGroup_ExpenseAccount_data").val(accountCollection.items[this.selectedIndex].AccountId);
                }
            });
        }

        // =================
        // ADD Article Group
        // =================
        function btnAddArtileGroup_OnClick() {
            $('#articleGroupEdit').modal({
                show: true,
                backdrop: 'static'
            });
            
            $("#cmdSaveArticleGroupButton").prop("disabled", false);
            $("#cmdArticleGroupDetailCloseButton").prop("disabled", false);

            getArticleType();
            getArticleGroupAccount();

            document.getElementById('articleGroup_id').value = 0;
            document.getElementById('articleGroup_ArticleGroup').value = "";
            document.getElementById('articleGroup_ArticleType_data').value = "";
            document.getElementById('articleGroup_ArticleType_selectedValue').value = "";
            document.getElementById('articleGroup_Account_data').value = "";
            document.getElementById('articleGroup_Account_selectedValue').value = "";
            document.getElementById('articleGroup_SalesAccount_data').value = "";
            document.getElementById('articleGroup_SalesAccount_selectedValue').value = "";
            document.getElementById('articleGroup_CostAccount_data').value = "";
            document.getElementById('articleGroup_CostAccount_selectedValue').value = "";
            document.getElementById('articleGroup_AssetAccount_data').value = "";
            document.getElementById('articleGroup_AssetAccount_selectedValue').value = "";
            document.getElementById('articleGroup_ExpenseAccount_data').value = "";
            document.getElementById('articleGroup_ExpenseAccount_selectedValue').value = "";
        }

        // ==================
        // EDIT Article Group
        // ==================
        function btnEditArticleGroup_OnClick() {
            articlegroups.editItem(articlegroups.currentItem);
            $('#articleGroupEdit').modal({
                show: true,
                backdrop: 'static'
            });
            
            $("#cmdSaveArticleGroupButton").prop("disabled", false);
            $("#cmdArticleGroupDetailCloseButton").prop("disabled", false);

            getArticleType();
            getArticleGroupAccount();

            var articlegroup = articlegroups.currentEditItem;
            document.getElementById('articleGroup_id').value = articlegroup.Id ? articlegroup.Id : '';
            document.getElementById('articleGroup_ArticleGroup').value = articlegroup.ArticleGroup ? articlegroup.ArticleGroup : '';
            document.getElementById('articleGroup_ArticleType_data').value = articlegroup.ArticleTypeId ? articlegroup.ArticleTypeId : '';
            document.getElementById('articleGroup_ArticleType_selectedValue').value = articlegroup.ArticleType ? articlegroup.ArticleType : '';
            document.getElementById('articleGroup_Account_data').value = articlegroup.AccountId ? articlegroup.AccountId : '';
            document.getElementById('articleGroup_Account_selectedValue').value = articlegroup.Account ? articlegroup.Account : '';
            document.getElementById('articleGroup_SalesAccount_data').value = articlegroup.SalesAccountId ? articlegroup.SalesAccountId : '';
            document.getElementById('articleGroup_SalesAccount_selectedValue').value = articlegroup.SalesAccount ? articlegroup.SalesAccount : '';
            document.getElementById('articleGroup_CostAccount_data').value = articlegroup.CostAccountId ? articlegroup.CostAccountId : '';
            document.getElementById('articleGroup_CostAccount_selectedValue').value = articlegroup.CostAccount ? articlegroup.CostAccount : '';
            document.getElementById('articleGroup_AssetAccount_data').value = articlegroup.AssetAccountId ? articlegroup.AssetAccountId : '';
            document.getElementById('articleGroup_AssetAccount_selectedValue').value = articlegroup.AssetAccount ? articlegroup.AssetAccount : '';
            document.getElementById('articleGroup_ExpenseAccount_data').value = articlegroup.ExpenseAccountId ? articlegroup.ExpenseAccountId : '';
            document.getElementById('articleGroup_ExpenseAccount_selectedValue').value = articlegroup.ExpenseAccount ? articlegroup.ExpenseAccount : '';
        }

        // ====================
        // DELETE Article Group
        // ====================
        function btnDeleteArticleGroup_OnClick() {
            $('#deleteArticleGroupConfirm').modal({
                show: true,
                backdrop: 'static'
            });

            $("#cmdConfirmDeleteArticleGroup").prop("disabled", false);
            $("#cmdConfirmDeleteCloseButtonArticleGroup").prop("disabled", false);
        }
        // Article Group Confirm Delete Button
        function cmdArticleGroupConfirmDeleteButton_OnClick() {
            $("#cmdConfirmDeleteArticleGroup").prop("disabled", true);
            $("#cmdConfirmDeleteCloseButtonArticleGroup").prop("disabled", true);

            articlegroups.editItem(articlegroups.currentItem);
            var id = articlegroups.currentEditItem.Id;
            $.ajax({
                url: '/api/deleteArticleGroup/' + id,
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        $("#cmdConfirmDeleteArticleGroup").prop("disabled", true);
                        $("#cmdConfirmDeleteCloseButtonArticleGroup").prop("disabled", true);
                        toastr.success("Successfully Deleted");

                        $('#deleteArticleGroupConfirm').modal('hide');

                        articlegroups = new wijmo.collections.CollectionView(getArticleGroup());
                        articlegroups.canFilter = true;
                        articlegroups.pageSize = 15;

                        var filterTextArticleGroup = '';
                        $('#InputFilterArticleGroup').keyup(function () {
                            filterTextArticleGroup = this.value.toLowerCase();
                            articlegroups.refresh();
                        });
                        articlegroups.filter = function (item) {
                            return !filterTextArticleGroup || (item.ArticleGroup.toLowerCase().indexOf(filterTextArticleGroup) > -1);
                        }
                        articlegroups.collectionChanged.addHandler(function (sender, args) {
                            updateNavigateButtonsArticleGroup();
                        });
                        articlegroups.currentChanged.addHandler(function (sender, args) {
                            updateDetailsArticleGroup();
                        });

                        articleGroupGrid.itemsSource = articlegroups;
                        articleGroupGrid.trackChanges = true;
                    },
                    404: function () {
                        toastr.error("Request Not Found");
                        $("#cmdConfirmDeleteArticleGroup").prop("disabled", false);
                        $("#cmdConfirmDeleteCloseButtonArticleGroup").prop("disabled", false);
                        $('#deleteArticleGroupConfirm').modal('hide');

                    },
                    400: function () {
                        toastr.error("Can't be deleted");
                        $("#cmdConfirmDeleteArticleGroup").prop("disabled", false);
                        $("#cmdConfirmDeleteCloseButtonArticleGroup").prop("disabled", false);
                        $('#deleteArticleGroupConfirm').modal('hide');
                    }
                }
            });
        }

        // ==================
        // SAVE Article Group
        // ==================
        function btnArticleGroupSaveButton_OnClick() {
            var articleGroupObject = new Object();
            var articleGroupId = document.getElementById('articleGroup_id').value;
            articleGroupObject.ArticleGroup = document.getElementById('articleGroup_ArticleGroup').value;
            articleGroupObject.ArticleTypeId = document.getElementById('articleGroup_ArticleType_data').value;
            articleGroupObject.AccountId = document.getElementById('articleGroup_Account_data').value;
            articleGroupObject.SalesAccountId = document.getElementById('articleGroup_SalesAccount_data').value;
            articleGroupObject.CostAccountId = document.getElementById('articleGroup_CostAccount_data').value;
            articleGroupObject.AssetAccountId = document.getElementById('articleGroup_AssetAccount_data').value;
            articleGroupObject.ExpenseAccountId = document.getElementById('articleGroup_ExpenseAccount_data').value;
            var articleGroupData = JSON.stringify(articleGroupObject);

            if( document.getElementById('articleGroup_ArticleType_data').value == '') {
                document.getElementById("articleGroup_ArticleType").style.border = "1px solid red";
            } else {
                document.getElementById("articleGroup_ArticleType").style.border = "1px solid #C8C8C8";
            }

            if( document.getElementById('articleGroup_Account_data').value == '') {
                document.getElementById("articleGroup_Account").style.border = "1px solid red";
            } else {
                document.getElementById("articleGroup_Account").style.border = "1px solid #C8C8C8";
            }
            
            if( document.getElementById('articleGroup_SalesAccount_data').value == '') {
                document.getElementById("articleGroup_SalesAccount").style.border = "1px solid red";
            } else {
                document.getElementById("articleGroup_SalesAccount").style.border = "1px solid #C8C8C8";
            }
            
            if( document.getElementById('articleGroup_CostAccount_data').value == '') {
                document.getElementById("articleGroup_CostAccount").style.border = "1px solid red";
            } else {
                document.getElementById("articleGroup_CostAccount").style.border = "1px solid #C8C8C8";
            }
            
            if( document.getElementById('articleGroup_AssetAccount_data').value == '') {
                document.getElementById("articleGroup_AssetAccount").style.border = "1px solid red";
            } else {
                document.getElementById("articleGroup_AssetAccount").style.border = "1px solid #C8C8C8";
            }
            
            if( document.getElementById('articleGroup_ExpenseAccount_data').value == '') {
                document.getElementById("articleGroup_ExpenseAccount").style.border = "1px solid red";
            } else {
                document.getElementById("articleGroup_ExpenseAccount").style.border = "1px solid #C8C8C8";
            }

            var isValid = true;
            $('.requiredArticleGroup').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                }
                else {
                    $(this).css({
                        "border": "",
                    });
                }
            });
            if (isValid == false) {
                toastr.error("Invalid Entry");
                e.preventDefault();
            }
            else {
                $("#cmdSaveArticleGroupButton").prop("disabled", true);
                $("#cmdArticleGroupDetailCloseButton").prop("disabled", true);

                if(articleGroupId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/addArticleGroup',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: articleGroupData,
                        statusCode: {
                            200: function () {
                                $("#cmdSaveArticleGroupButton").prop("disabled", true);
                                $("#cmdArticleGroupDetailCloseButton").prop("disabled", true);
                                toastr.success("Successfully Saved");

                                $('#articleGroupEdit').modal('hide');
                                
                                articlegroups = new wijmo.collections.CollectionView(getArticleGroup());
                                articlegroups.canFilter = true;
                                articlegroups.pageSize = 15;

                                var filterTextArticleGroup = '';
                                $('#InputFilterArticleGroup').keyup(function () {
                                    filterTextArticleGroup = this.value.toLowerCase();
                                    articlegroups.refresh();
                                });
                                articlegroups.filter = function (item) {
                                    return !filterTextArticleGroup || (item.ArticleGroup.toLowerCase().indexOf(filterTextArticleGroup) > -1);
                                }
                                articlegroups.collectionChanged.addHandler(function (sender, args) {
                                    updateNavigateButtonsArticleGroup();
                                });
                                articlegroups.currentChanged.addHandler(function (sender, args) {
                                    updateDetailsArticleGroup();
                                });

                                articleGroupGrid.itemsSource = articlegroups;
                                articleGroupGrid.trackChanges = true;
                            },
                            404: function () {
                                toastr.error("Can't Save");
                                $("#cmdSaveArticleGroupButton").prop("disabled", false);
                                $("#cmdArticleGroupDetailCloseButton").prop("disabled", false);
                            },
                            400: function () {
                                toastr.error("Bad Request");
                                $("#cmdSaveArticleGroupButton").prop("disabled", false);
                                $("#cmdArticleGroupDetailCloseButton").prop("disabled", false);
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/updateArticleGroup/' + articleGroupId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: articleGroupData,
                        statusCode: {
                            200: function () {
                                $("#cmdSaveArticleGroupButton").prop("disabled", true);
                                $("#cmdArticleGroupDetailCloseButton").prop("disabled", true);
                                toastr.success("Successfully Updated");

                                $('#articleGroupEdit').modal('hide');

                                articlegroups = new wijmo.collections.CollectionView(getArticleGroup());
                                articlegroups.canFilter = true;
                                articlegroups.pageSize = 15;

                                var filterTextArticleGroup = '';
                                $('#InputFilterArticleGroup').keyup(function () {
                                    filterTextArticleGroup = this.value.toLowerCase();
                                    articlegroups.refresh();
                                });
                                articlegroups.filter = function (item) {
                                    return !filterTextArticleGroup || (item.ArticleGroup.toLowerCase().indexOf(filterTextArticleGroup) > -1);
                                }
                                articlegroups.collectionChanged.addHandler(function (sender, args) {
                                    updateNavigateButtonsArticleGroup();
                                });
                                articlegroups.currentChanged.addHandler(function (sender, args) {
                                    updateDetailsArticleGroup();
                                });

                                articleGroupGrid.itemsSource = articlegroups;
                                articleGroupGrid.trackChanges = true;
                            },
                            404: function () {
                                toastr.error("Can't Save");
                                $("#cmdSaveArticleGroupButton").prop("disabled", false);
                                $("#cmdArticleGroupDetailCloseButton").prop("disabled", false);
                            },
                            400: function () {
                                toastr.error("Bad Request");
                                $("#cmdSaveArticleGroupButton").prop("disabled", false);
                                $("#cmdArticleGroupDetailCloseButton").prop("disabled", false);
                            }
                        }
                    });
                }
            }
        }

        // =============
        // Article Group
        // =============
        function articleGroupTab() {
            cboArticleType = new wijmo.input.ComboBox('#articleGroup_ArticleType');
            cboArticleGroupAccount = new wijmo.input.ComboBox('#articleGroup_Account');
            cboArticleGroupSaleAccount = new wijmo.input.ComboBox('#articleGroup_SalesAccount');
            cboArticleGroupCostAccount = new wijmo.input.ComboBox('#articleGroup_CostAccount');
            cboArticleGroupAssetAccount = new wijmo.input.ComboBox('#articleGroup_AssetAccount');
            cboArticleGroupExpenseAccount = new wijmo.input.ComboBox('#articleGroup_ExpenseAccount');

            articlegroups = new wijmo.collections.CollectionView(getArticleGroup());
            articlegroups.canFilter = true;
            articlegroups.pageSize = 15;

            var filterTextArticleGroup = '';
            $('#InputFilterArticleGroup').keyup(function () {
                filterTextArticleGroup = this.value.toLowerCase();
                articlegroups.refresh();
            });
            articlegroups.filter = function (item) {
                return !filterTextArticleGroup || (item.ArticleGroup.toLowerCase().indexOf(filterTextArticleGroup) > -1);
            }
            articlegroups.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsArticleGroup();
            });
            articlegroups.currentChanged.addHandler(function (sender, args) {
                updateDetailsArticleGroup();
            });

            // Flex Grid for Article Group
            articleGroupGrid = new wijmo.grid.FlexGrid('#ArticleGroupGrid');
            articleGroupGrid.initialize({
                columns: [
                            {
                                "header": "Edit",
                                "binding": "EditId",
                                "width": 60,
                                "align": "center",
                                "allowResizing": false,
                                "allowSorting": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Delete",
                                "binding": "DeleteId",
                                "width": 70,
                                "align": "center",
                                "allowResizing": false,
                                "allowSorting": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Article Group",
                                "binding": "ArticleGroup",
                                "align": "left",
                                "allowSorting": true,
                                "width": "1*",
                            },
                            {
                                "header": "Type",
                                "binding": "ArticleType",
                                "align": "left",
                                "allowSorting": true,
                                "width": "1*"
                            }
                ],
                autoGenerateColumns: false,
                itemsSource: articlegroups,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            articleGroupGrid.trackChanges = true;

            //Navigation button for Employee
            btnFirstPageGridArticleGroup = document.getElementById('btnMoveToFirstPageGridArticleGroup');
            btnPreviousPageGridArticleGroup = document.getElementById('btnMoveToPreviousPageGridArticleGroup');
            btnNextPageGridArticleGroup = document.getElementById('btnMoveToNextPageGridArticleGroup');
            btnLastPageGridArticleGroup = document.getElementById('btnMoveToLastPageGridArticleGroup');
            btnCurrentPageGridArticleGroup = document.getElementById('btnCurrentPageGridArticleGroup');

            updateNavigateButtonsArticleGroup();

            btnFirstPageGridArticleGroup.addEventListener('click', function () {
                articlegroups.moveToFirstPage();
                updateNavigateButtonsArticleGroup();
            });
            btnPreviousPageGridArticleGroup.addEventListener('click', function () {
                articlegroups.moveToPreviousPage();
                updateNavigateButtonsArticleGroup();
            });
            btnNextPageGridArticleGroup.addEventListener('click', function () {
                articlegroups.moveToNextPage();
                updateNavigateButtonsArticleGroup();
            });
            btnLastPageGridArticleGroup.addEventListener('click', function () {
                articlegroups.moveToLastPage();
                updateNavigateButtonsArticleGroup();
            });
        }
    </script>

    <!-- ===================== -->
    <!-- Other Article Scripts -->
    <!-- ===================== -->
    <script type="text/javascript">
        // ==================================
        // Global Variables for Other Article
        // ==================================
        var otherarticles;
        var otherArticleGrid;
        var articlesAccounts;
        var cboArticleForAccount;
        var btnFirstPageGridOtherArticle;
        var btnPreviousPageGridOtherArticle;
        var btnNextPageGridOtherArticle;
        var btnLastPageGridOtherArticle;
        var btnCurrentPageGridOtherArticle;

        // ======================
        // GET Other Article List
        // ======================
        function getOtherArticle() {
            var otherarticles = new wijmo.collections.ObservableArray;
            $('#loadingModal').modal('show');
            $.ajax({
                url: '/api/listArticleByArticleTypeId/6',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (Results) {
                    $('#loadingModal').modal('hide');
                    if (Results.length > 0) {
                        for (i = 0; i < Results.length; i++) {
                            otherarticles.push({
                                EditId: "<button class='btn btn-primary btn-xs btn-block' onclick='btnEditArticle_OnClick()'><i class='fa fa-edit'></i> Edit</button>",
                                DeleteId: "<button class='btn btn-danger btn-xs btn-block' onclick='btnDeleteArticle_OnClick()'><i class='fa fa-trash'></i> Delete</button>",
                                Id: Results[i]["Id"],
                                ArticleCode : Results[i]["ArticleCode"],
                                ManualArticleCode : Results[i]["ManualArticleCode"],
                                Article : Results[i]["Article"],
                                Category : Results[i]["Category"],
                                ArticleTypeId : Results[i]["ArticleTypeId"],
                                ArticleType : Results[i]["ArticleType"],
                                ArticleGroupId : Results[i]["ArticleGroupId"],
                                ArticleGroup : Results[i]["ArticleGroup"],
                                AccountId : Results[i]["AccountId"],
                                Account : Results[i]["Account"],
                                SalesAccountId : Results[i]["SalesAccountId"],
                                CostAccountId : Results[i]["CostAccountId"],
                                AssetAccountId : Results[i]["AssetAccountId"],
                                ExpenseAccountId : Results[i]["ExpenseAccountId"],
                                UnitId : Results[i]["UnitId"],
                                Unit : Results[i]["Unit"],
                                OutputTaxId : Results[i]["OutputTaxId"],
                                InputTaxId : Results[i]["InputTaxId"],
                                WTaxTypeId : Results[i]["WTaxTypeId"],
                                Price : Results[i]["Price"],
                                Cost : Results[i]["Cost"],
                                IsInventory : Results[i]["IsInventory"],
                                Particulars : Results[i]["Particulars"],
                                Address : Results[i]["Address"],
                                TermId : Results[i]["TermId"],
                                ContactNumber : Results[i]["ContactNumber"],
                                ContactPerson : Results[i]["ContactPerson"],
                                TaxNumber : Results[i]["TaxNumber"],
                                CreditLimit : Results[i]["CreditLimit"],
                                DateAcquired : Results[i]["DateAcquired"],
                                UsefulLife : Results[i]["UsefulLife"],
                                SalvageValue : Results[i]["SalvageValue"],
                                ManualArticleOldCode : Results[i]["ManualArticleOldCode"],
                                IsLocked: Results[i]["IsLocked"],
                                CreatedById: Results[i]["CreatedById"],
                                CreatedBy: Results[i]["CreatedBy"],
                                CreatedDateTime: Results[i]["CreatedDateTime"],
                                UpdatedById: Results[i]["UpdatedById"],
                                UpdatedBy: Results[i]["UpdatedBy"],
                                UpdatedDateTime: Results[i]["UpdatedDateTime"]
                            });
                        }
                    }
                }
            }).fail(function (xhr, textStatus, err) {
                alert(err);
            });
            return otherarticles;
        }

        // ====================================
        // FlexGrid Selection for Other Article
        // ====================================
        function updateDetailsOtherArticle() {
            var item = otherarticles.currentItem;
            document.getElementById('createdBy').innerHTML = item.CreatedBy;
            document.getElementById('createdDate').innerHTML = item.CreatedDateTime;
            document.getElementById('updatedBy').innerHTML = item.UpdatedBy;
            document.getElementById('updatedDate').innerHTML = item.UpdatedDateTime;
        }

        // ====================================
        // Navigation Buttons for Other Article
        // ====================================
        function updateNavigateButtonsOtherArticle() {
            if (otherarticles.pageSize <= 0) {
                document.getElementById('navigationPageGridOtherArticle').style.display = 'none';
                return;
            }
            document.getElementById('navigationPageGridOtherArticle').style.display = 'block';
            if (otherarticles.pageIndex === 0) {
                btnFirstPageGridOtherArticle.setAttribute('disabled', 'disabled');
                btnPreviousPageGridOtherArticle.setAttribute('disabled', 'disabled');
                btnNextPageGridOtherArticle.removeAttribute('disabled');
                btnLastPageGridOtherArticle.removeAttribute('disabled');
            } else if (otherarticles.pageIndex === (otherarticles.pageCount - 1)) {
                btnFirstPageGridOtherArticle.removeAttribute('disabled');
                btnPreviousPageGridOtherArticle.removeAttribute('disabled');
                btnLastPageGridOtherArticle.setAttribute('disabled', 'disabled');
                btnNextPageGridOtherArticle.setAttribute('disabled', 'disabled');
            } else {
                btnFirstPageGridOtherArticle.removeAttribute('disabled');
                btnPreviousPageGridOtherArticle.removeAttribute('disabled');
                btnNextPageGridOtherArticle.removeAttribute('disabled');
                btnLastPageGridOtherArticle.removeAttribute('disabled');
            }
            btnCurrentPageGridOtherArticle.innerHTML = (otherarticles.pageIndex + 1) + ' / ' + otherarticles.pageCount;
        }

        // ========================================================
        // Function with leading zeroes to display the article code
        // ========================================================
        function zerofillArticle(number, length) {
            var result = number.toString();
            var pad = length - result.length;
            while(pad > 0) {
                result = '0' + result;
                pad--;
            }
            return result;
        }

        // ===========
        // Get Account
        // ===========
        function getArticleAccountForComboBox() {
            articlesAccounts = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listAccount',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            articlesAccounts.push({
                                AccountId: results[i]["Id"],
                                AccountAccount: results[i]["Account"]
                            });
                        }
                        createCboForArticleAccount(articlesAccounts);
                    }
                }
            });
        }

        // ===============
        // CBO for Account
        // ===============
        function  createCboForArticleAccount(articlesAccounts) {
            var accountCollection = new wijmo.collections.CollectionView(articlesAccounts);
            var accountList = new Array();
            for (var i = 0; i < accountCollection.items.length; i++) {
                accountList.push(accountCollection.items[i].AccountAccount);
            }

            cboArticleForAccount.dispose();
            cboArticleForAccount = new wijmo.input.ComboBox('#article_Account', {
                placeholder: "Select Account",
                itemsSource: accountList,
                isEditable: false,
                required: false,
                selectedValue: document.getElementById('article_Account_selectedValue').value.toString(),
                onSelectedIndexChanged: function () {
                    $("#article_Account_data").val(accountCollection.items[this.selectedIndex].AccountId);
                }
            });
        }

        // =================
        // Add Other Article
        // =================
        function btnAddArticle_OnClick() {
            $('#articleEdit').modal({
                show: true,
                backdrop: 'static'
            });
            
            $("#cmdSaveArticleButton").prop("disabled", false);
            $("#cmdArticleDetailCloseButton").prop("disabled", false);

            getArticleAccountForComboBox();

            document.getElementById('article_id').value = 0;
            document.getElementById('article_Code').value = "";
            document.getElementById('article_Article').value = "";
            document.getElementById('article_Account_data').value = "";
            document.getElementById('article_Account_selectedValue').value = "";
            document.getElementById('article_Address').value = "";
            document.getElementById('article_ContactNumber').value = "";

            var articles = new wijmo.collections.ObservableArray;
            $.ajax({
                url: '/api/articleLastArticleCodeByArticleTypeId/6',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (Results) {
                    if (Results.length > 0) {
                        articles.push({
                            Id: Results.Id,
                            OtherArticleCode: Results.ArticleCode
                        });
                    }
                    var ArticleCode = parseInt(Results.ArticleCode);
                    var ArticleCode_plusOne = 0000000001;
                    var ArticleCode_Results = ArticleCode + ArticleCode_plusOne;

                    document.getElementById('article_Code').value = zerofillArticle(ArticleCode_Results, 10);
                }
            });

        }

        // ==================
        // Edit Other Article
        // ==================
        function btnEditArticle_OnClick() {
            otherarticles.editItem(otherarticles.currentItem);
            $('#articleEdit').modal({
                show: true,
                backdrop: 'static'
            });
            
            $("#cmdSaveArticleButton").prop("disabled", false);
            $("#cmdArticleDetailCloseButton").prop("disabled", false);

            getArticleAccountForComboBox();

            var otherarticle = otherarticles.currentEditItem;
            document.getElementById('article_id').value = otherarticle.Id ? otherarticle.Id : '';
            document.getElementById('article_Code').value = otherarticle.ArticleCode ? otherarticle.ArticleCode : '';
            document.getElementById('article_Article').value = otherarticle.Article ? otherarticle.Article : '';
            document.getElementById('article_Account_data').value = otherarticle.AccountId ? otherarticle.AccountId : '';
            document.getElementById('article_Account_selectedValue').value = otherarticle.Account ? otherarticle.Account : '';
            document.getElementById('article_Address').value = otherarticle.Address ? otherarticle.Address : '';
            document.getElementById('article_ContactNumber').value = otherarticle.ContactNumber ? otherarticle.ContactNumber : '';
        }

        // ====================
        // Delete Other Article
        // ====================
        function btnDeleteArticle_OnClick() {
            $('#deleteArticleConfirm').modal({
                show: true,
                backdrop: 'static'
            });

            $("#cmdConfirmDeleteArticle").prop("disabled", false);
            $("#cmdConfirmDeleteCloseButtonArticle").prop("disabled", false);
        }
        // Article Confirm Delete Button
        function cmdArticleConfirmDeleteButton_OnClick() {
            $("#cmdConfirmDeleteArticle").prop("disabled", true);
            $("#cmdConfirmDeleteCloseButtonArticle").prop("disabled", true);

            otherarticles.editItem(otherarticles.currentItem);
            var id = otherarticles.currentEditItem.Id;
            $.ajax({
                url: '/api/deleteArticle/' + id,
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        $("#cmdConfirmDeleteArticle").prop("disabled", true);
                        $("#cmdConfirmDeleteCloseButtonArticle").prop("disabled", true);
                        toastr.success("Successfully Deleted");

                        $('#deleteArticleConfirm').modal('hide');

                        otherarticles = new wijmo.collections.CollectionView(getOtherArticle());
                        otherarticles.canFilter = true;
                        otherarticles.pageSize = 15;

                        var filterTextOtherArticle = '';
                        $('#InputFilterOtherArticle').keyup(function () {
                            filterTextOtherArticle = this.value.toLowerCase();
                            otherarticles.refresh();
                        });
                        otherarticles.filter = function (item) {
                            return !filterTextOtherArticle || (item.Article.toLowerCase().indexOf(filterTextOtherArticle) > -1);
                        }
                        otherarticles.collectionChanged.addHandler(function (sender, args) {
                            updateNavigateButtonsOtherArticle();
                        });
                        otherarticles.currentChanged.addHandler(function (sender, args) {
                            updateDetailsOtherArticle();
                        });

                        otherArticleGrid.itemsSource = otherarticles;
                        otherArticleGrid.trackChanges = true;
                    },
                    404: function () {
                        toastr.error("Request Not Found");
                        $("#cmdConfirmDeleteArticle").prop("disabled", false);
                        $("#cmdConfirmDeleteCloseButtonArticle").prop("disabled", false);
                        $('#deleteArticleConfirm').modal('hide');

                    },
                    400: function () {
                        toastr.error("Can't be deleted");
                        $("#cmdConfirmDeleteArticle").prop("disabled", false);
                        $("#cmdConfirmDeleteCloseButtonArticle").prop("disabled", false);
                        $('#deleteArticleConfirm').modal('hide');
                    }
                }
            });
        }

        
        // ==================
        // Save Other Article
        // ==================
        function btnArticleSaveButton_OnClick() {
            var otherArticleObject = new Object();
            var otherArticleId = document.getElementById('article_id').value;
            otherArticleObject.ArticleCode = document.getElementById('article_Code').value;
            otherArticleObject.Article = document.getElementById('article_Article').value;
            otherArticleObject.AccountId = document.getElementById('article_Account_data').value;
            otherArticleObject.Address = document.getElementById('article_Address').value;
            otherArticleObject.ContactNumber = document.getElementById('article_ContactNumber').value;
            var otherArticleData = JSON.stringify(otherArticleObject);

            if( document.getElementById('article_Account_data').value == '') {
                document.getElementById("article_Account").style.border = "1px solid red";
            } else {
                document.getElementById("article_Account").style.border = "1px solid #C8C8C8";
            }

            var isValid = true;
            $('.requiredArticle').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                }
                else {
                    $(this).css({
                        "border": "",
                    });
                }
            });
            if (isValid == false) {
                toastr.error("Invalid Entry");
                e.preventDefault();
            }
            else {
                $("#cmdSaveArticleButton").prop("disabled", true);
                $("#cmdArticleDetailCloseButton").prop("disabled", true);

                if(otherArticleId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/addArticle/6',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: otherArticleData,
                        statusCode: {
                            200: function () {
                                $("#cmdSaveArticleButton").prop("disabled", true);
                                $("#cmdArticleDetailCloseButton").prop("disabled", true);
                                toastr.success("Successfully Saved");

                                $('#articleEdit').modal('hide');

                                otherarticles = new wijmo.collections.CollectionView(getOtherArticle());
                                otherarticles.canFilter = true;
                                otherarticles.pageSize = 15;

                                var filterTextOtherArticle = '';
                                $('#InputFilterOtherArticle').keyup(function () {
                                    filterTextOtherArticle = this.value.toLowerCase();
                                    otherarticles.refresh();
                                });
                                otherarticles.filter = function (item) {
                                    return !filterTextOtherArticle || (item.Article.toLowerCase().indexOf(filterTextOtherArticle) > -1);
                                }
                                otherarticles.collectionChanged.addHandler(function (sender, args) {
                                    updateNavigateButtonsOtherArticle();
                                });
                                otherarticles.currentChanged.addHandler(function (sender, args) {
                                    updateDetailsOtherArticle();
                                });

                                otherArticleGrid.itemsSource = otherarticles;
                                otherArticleGrid.trackChanges = true;
                            },
                            404: function () {
                                toastr.error("Can't Save");
                                $("#cmdSaveArticleButton").prop("disabled", false);
                                $("#cmdArticleDetailCloseButton").prop("disabled", false);
                            },
                            400: function () {
                                toastr.error("Bad Request");
                                $("#cmdSaveArticleButton").prop("disabled", false);
                                $("#cmdArticleDetailCloseButton").prop("disabled", false);
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/updateArticle/' + otherArticleId + '/6',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: otherArticleData,
                        statusCode: {
                            200: function () {
                                $("#cmdSaveEmployeeButton").prop("disabled", true);
                                $("#cmdEmployeeDetailCloseButton").prop("disabled", true);
                                toastr.success("Successfully Updated");

                                $('#articleEdit').modal('hide');

                                otherarticles = new wijmo.collections.CollectionView(getOtherArticle());
                                otherarticles.canFilter = true;
                                otherarticles.pageSize = 15;

                                var filterTextOtherArticle = '';
                                $('#InputFilterOtherArticle').keyup(function () {
                                    filterTextOtherArticle = this.value.toLowerCase();
                                    otherarticles.refresh();
                                });
                                otherarticles.filter = function (item) {
                                    return !filterTextOtherArticle || (item.Article.toLowerCase().indexOf(filterTextOtherArticle) > -1);
                                }
                                otherarticles.collectionChanged.addHandler(function (sender, args) {
                                    updateNavigateButtonsOtherArticle();
                                });
                                otherarticles.currentChanged.addHandler(function (sender, args) {
                                    updateDetailsOtherArticle();
                                });

                                otherArticleGrid.itemsSource = otherarticles;
                                otherArticleGrid.trackChanges = true;
                            },
                            404: function () {
                                toastr.error("Can't Save");
                                $("#cmdSaveArticleButton").prop("disabled", false);
                                $("#cmdArticleDetailCloseButton").prop("disabled", false);
                            },
                            400: function () {
                                toastr.error("Bad Request");
                                $("#cmdSaveArticleButton").prop("disabled", false);
                                $("#cmdArticleDetailCloseButton").prop("disabled", false);
                            }
                        }
                    });
                }
            }
        }

        // =============
        // Other Article
        // =============
        function otherArticleTab() {
            cboArticleForAccount = new wijmo.input.ComboBox('#article_Account');
            document.getElementById('article_Code').disabled = true;

            otherarticles = new wijmo.collections.CollectionView(getOtherArticle());
            otherarticles.canFilter = true;
            otherarticles.pageSize = 15;

            var filterTextOtherArticle = '';
            $('#InputFilterOtherArticle').keyup(function () {
                filterTextOtherArticle = this.value.toLowerCase();
                otherarticles.refresh();
            });
            otherarticles.filter = function (item) {
                return !filterTextOtherArticle || (item.Article.toLowerCase().indexOf(filterTextOtherArticle) > -1);
            }
            otherarticles.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsOtherArticle();
            });
            otherarticles.currentChanged.addHandler(function (sender, args) {
                updateDetailsOtherArticle();
            });

            // Flex Grid for Other Article
            otherArticleGrid = new wijmo.grid.FlexGrid('#OtherArticleGrid');
            otherArticleGrid.initialize({
                columns: [
                            {
                                "header": "Edit",
                                "binding": "EditId",
                                "width": 60,
                                "align": "center",
                                "allowResizing": false,
                                "allowSorting": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Delete",
                                "binding": "DeleteId",
                                "width": 70,
                                "align": "center",
                                "allowResizing": false,
                                "allowSorting": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Code",
                                "binding": "ArticleCode",
                                "align": "left",
                                "allowSorting": true,
                                "width": "1*",
                            },
                            {
                                "header": "Article.",
                                "binding": "Article",
                                "align": "left",
                                "allowSorting": true,
                                "width": "3*"
                            },
                            {
                                "header": "Account",
                                "binding": "Account",
                                "align": "left",
                                "allowSorting": true,
                                "width": "3*"
                            }
                ],
                autoGenerateColumns: false,
                itemsSource: otherarticles,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            otherArticleGrid.trackChanges = true;

            //Navigation button for Other Article
            btnFirstPageGridOtherArticle = document.getElementById('btnMoveToFirstPageGridOtherArticle');
            btnPreviousPageGridOtherArticle = document.getElementById('btnMoveToPreviousPageGridOtherArticle');
            btnNextPageGridOtherArticle = document.getElementById('btnMoveToNextPageGridOtherArticle');
            btnLastPageGridOtherArticle = document.getElementById('btnMoveToLastPageGridOtherArticle');
            btnCurrentPageGridOtherArticle = document.getElementById('btnCurrentPageGridOtherArticle');

            updateNavigateButtonsOtherArticle();

            btnFirstPageGridOtherArticle.addEventListener('click', function () {
                otherarticles.moveToFirstPage();
                updateNavigateButtonsOtherArticle();
            });
            btnPreviousPageGridOtherArticle.addEventListener('click', function () {
                otherarticles.moveToPreviousPage();
                updateNavigateButtonsOtherArticle();
            });
            btnNextPageGridOtherArticle.addEventListener('click', function () {
                otherarticles.moveToNextPage();
                updateNavigateButtonsOtherArticle();
            });
            btnLastPageGridOtherArticle.addEventListener('click', function () {
                otherarticles.moveToLastPage();
                updateNavigateButtonsOtherArticle();
            });
        }
    </script>

    <!-- ================================ -->
    <!-- Tab Current Page on Load Scripts -->
    <!-- ================================ -->
    <script type="text/javascript">
        // ====
        // TABS
        // ====
        $('#discountTabId').click(function () {
            $('#Discount').show();
            $('#PayType').hide();
            $('#Tax').hide();
            $('#Unit').hide();
            $('#Term').hide();
            $('#Employee').hide();
            $('#ArticleGroup').hide();
            $('#OtherArticle').hide();
            $('#AccountType').hide();
            window.discountTab = function () {
                return true;
            };
        });
        $('#payTypeTabId').click(function () {
            $('#Discount').hide();
            $('#PayType').show();
            $('#Tax').hide();
            $('#Unit').hide();
            $('#Term').hide();
            $('#Employee').hide();
            $('#ArticleGroup').hide();
            $('#OtherArticle').hide();
            $('#AccountType').hide();
            payTypeTab();
            window.payTypeTab = function () {
                return true;
            };
        });
        $('#taxTabId').click(function () {
            $('#Discount').hide();
            $('#PayType').hide();
            $('#Tax').show();
            $('#Unit').hide();
            $('#Term').hide();
            $('#Employee').hide();
            $('#ArticleGroup').hide();
            $('#OtherArticle').hide();
            $('#AccountType').hide();
            taxTab();
            window.taxTab = function () {
                return true;
            };
        });
        $('#unitTabId').click(function () {
            $('#Discount').hide();
            $('#PayType').hide();
            $('#Tax').hide();
            $('#Unit').show();
            $('#Term').hide();
            $('#Employee').hide();
            $('#ArticleGroup').hide();
            $('#OtherArticle').hide();
            $('#AccountType').hide();
            unitTab();
            window.unitTab = function () {
                return true;
            };
        });
        $('#termTabId').click(function () {
            $('#Discount').hide();
            $('#PayType').hide();
            $('#Tax').hide();
            $('#Unit').hide();
            $('#Term').show();
            $('#Employee').hide();
            $('#ArticleGroup').hide();
            $('#OtherArticle').hide();
            $('#AccountType').hide();
            termTab();
            window.termTab = function () {
                return true;
            };
        });
        $('#employeeTabId').click(function () {
            $('#Discount').hide();
            $('#PayType').hide();
            $('#Tax').hide();
            $('#Unit').hide();
            $('#Term').hide();
            $('#Employee').show();
            $('#ArticleGroup').hide();
            $('#OtherArticle').hide();
            $('#AccountType').hide();
            employeeTab();
            window.employeeTab = function () {
                return true;
            };
        });
        $('#articleGroupTabId').click(function () {
            $('#Discount').hide();
            $('#PayType').hide();
            $('#Tax').hide();
            $('#Unit').hide();
            $('#Term').hide();
            $('#Employee').hide();
            $('#ArticleGroup').show();
            $('#OtherArticle').hide();
            $('#AccountType').hide();
            articleGroupTab();
            window.articleGroupTab = function () {
                return true;
            };
        });
        $('#otherArticleTabId').click(function () {
            $('#Discount').hide();
            $('#PayType').hide();
            $('#Tax').hide();
            $('#Unit').hide();
            $('#Term').hide();
            $('#Employee').hide();
            $('#ArticleGroup').hide();
            $('#OtherArticle').show();
            $('#AccountType').hide();
            otherArticleTab();
            window.otherArticleTab = function () {
                return true;
            };
        });
        $('#accountTypeTabId').click(function () {
            $('#Discount').hide();
            $('#PayType').hide();
            $('#Tax').hide();
            $('#Unit').hide();
            $('#Term').hide();
            $('#Employee').hide();
            $('#ArticleGroup').hide();
            $('#OtherArticle').hide();
            $('#AccountType').show();
            accountTypeTab();
            window.accountTypeTab = function () {
                return true;
            };
        });

        $(document).ready(function () {
            $.ajax({
                url: '/api/listBranchById/' + @branchId,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        branches.push({
                            BranchId: results.Id,
                            BranchBranch: results.Branch
                        });
                    }
                    //document.getElementById('currentBranchName').innerHTML = '<a href="@Url.Action("Index", "Software", new { BranchId = branchId })" class="branchNameStyle">' + results.Branch + "</a>: /";
                }
            });

            document.getElementById('currentPage').innerHTML = '<a href="@Url.Action("Index", "Software", new { BranchId = branchId })" class="currentPageLinkCustom">Main Menu</a> ' + ' > System Tables';

            toastr.options = {
                "closeButton": false,
                "debug": true,
                "newestOnTop": true,
                "progressBar": true,
                "positionClass": "toast-top-right",
                "preventDuplicates": true,
                "onclick": null,
                "showDuration": "300",
                "hideDuration": "1000",
                "timeOut": "5000",
                "extendedTimeOut": "1000",
                "showEasing": "swing",
                "hideEasing": "linear",
                "showMethod": "fadeIn",
                "hideMethod": "fadeOut"
            }

            $('#Discount').show();
            $('#PayType').hide();
            $('#Tax').hide();
            $('#Unit').hide();
            $('#Term').hide();
            $('#Employee').hide();
            $('#ArticleGroup').hide();
            $('#OtherArticle').hide();
            $('#AccountType').hide();

            discountTab();
        });
    </script>
</body>
</html>