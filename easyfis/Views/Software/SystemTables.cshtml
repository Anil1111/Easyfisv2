@model easyfis.Entities.MstUserForm
@{
    // =====================
    // User Rights Variables
    // =====================
    var canAdd = Model.CanAdd;
    var canEdit = Model.CanEdit;
    var canDelete = Model.CanDelete;
    var canLock = Model.CanLock;
    var canUnlock = Model.CanUnlock;
    var canPrint = Model.CanPrint;
}
<!DOCTYPE html>
<html>
<head>
    <!-- Meta -->
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">

    <!-- Title of the Page -->
    <link rel="shortcut icon" href="~/Images/icon/easyfislogomini.ico">
    <title>System Tables</title>

    <!-- CSS StyleSheets-->
    @Styles.Render("~/Content/Software-css")
</head>
<body>
    <div id="o-wrapper" class="o-wrapper">
        <main class="o-content">
            @Html.Partial("_SoftwareHeader")
            <section class="content-header">
                <div class="container">
                    <h3>
                        System Tables
                    </h3>
                    <p>
                        <i class="fa fa-building-o fa-fw"></i> &nbsp; @ViewData["Company"] <br />
                        <i class="fa fa-home fa-fw"></i> &nbsp; <a href="#" onclick="getUserBranches()" style="color: white;">@ViewData["Branch"]</a>
                    </p>
                </div>
            </section>
            <section class="container">
                <div class="row">
                    <div class="col-md-2">
                        <ul class="nav nav-pills nav-stacked pill-custom" role="tablist" id="myTab">
                            <li role="presentation" class="active"><a data-toggle="tab" href="#Discount" id="discountTabId">Discounts</a></li>
                            <li role="presentation"><a data-toggle="tab" href="#PayType" id="payTypeTabId">Pay Types</a></li>
                            <li role="presentation"><a data-toggle="tab" href="#Tax" id="taxTabId">Tax Types</a></li>
                            <li role="presentation"><a data-toggle="tab" href="#Unit" id="unitTabId">Units</a></li>
                            <li role="presentation"><a data-toggle="tab" href="#Term" id="termTabId">Terms</a></li>
                            <li role="presentation"><a data-toggle="tab" href="#ArticleGroup" id="articleGroupTabId">Article Groups</a></li>
                            <li role="presentation"><a data-toggle="tab" href="#Employee" id="employeeTabId">Employees</a></li>
                            <li role="presentation"><a data-toggle="tab" href="#OtherArticle" id="otherArticleTabId">Other Articles</a></li>
                            @*<li role="presentation"><a data-toggle="tab" href="#UserRole" id="userRoleTabId">User Roles</a></li>*@
                            <li role="presentation"><a data-toggle="tab" href="#Status" id="statusTabId">Status</a></li>
                        </ul>
                        <br />
                    </div>
                    <div class="col-md-10">
                        <div class="tab-content">
                            <!-- Discount -->
                            <div id="Discount" class="tab-pane in active">
                                <div class="panel panel-default">
                                    <div class="panel-heading">
                                        <table style="width: 100%" border="0">
                                            <tr>
                                                <td style="width: 59%">
                                                    <div class="input-group">
                                                        <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                                        <input type="text" class="form-control" id="InputFilterDiscount" placeholder="Search...">
                                                    </div>
                                                </td>
                                                <td style="width: 1%"></td>
                                                <td style="width: 40%" align="right">
                                                    @{
                                                        if (canAdd)
                                                        {
                                                            <button class="btn btn-primary " id="btnAddDiscount" onclick="btnDiscountAdd_OnClick()"><i class="fa fa-plus"></i> Add</button>
                                                        }
                                                    }
                                                    <a href="@Url.Action("Index", "Software")" class="btn btn-danger " id="cmdCloseButtonCompany"><i class="fa fa-times"></i> Close</a>
                                                </td>
                                            </tr>
                                        </table>
                                    </div>
                                    <div class="panel-body">
                                        <div id="DiscountGrid" class="grid" align="left"></div>
                                    </div>
                                    <div class="panel-footer">
                                        <div class="row">
                                            <div class="btn-group col-md-7" id="navigationPageGridDiscount">
                                                <button type="button" class="btn btn-default border-custom" id="btnMoveToFirstPageGridDiscount">
                                                    <span class="glyphicon glyphicon-fast-backward"></span>
                                                </button>
                                                <button type="button" class="btn btn-default border-custom" id="btnMoveToPreviousPageGridDiscount">
                                                    <span class="glyphicon glyphicon-step-backward"></span>
                                                </button>
                                                <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnCurrentPageGridDiscount"></button>
                                                <button type="button" class="btn btn-default border-custom" id="btnMoveToNextPageGridDiscount">
                                                    <span class="glyphicon glyphicon-step-forward"></span>
                                                </button>
                                                <button type="button" class="btn btn-default border-custom" id="btnMoveToLastPageGridDiscount">
                                                    <span class="glyphicon glyphicon-fast-forward"></span>
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <!-- Pay Type -->
                            <div id="PayType" class="tab-pane">
                                <div class="panel panel-default">
                                    <div class="panel-heading">
                                        <table style="width: 100%" border="0">
                                            <tr>
                                                <td style="width: 59%">
                                                    <div class="input-group">
                                                        <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                                        <input type="text" class="form-control" id="InputFilterPayType" placeholder="Search...">
                                                    </div>
                                                </td>
                                                <td style="width: 1%"></td>
                                                <td style="width: 40%" align="right">
                                                    @{
                                                        if (canAdd)
                                                        {
                                                            <button class="btn btn-primary " id="btnAddPayType" onclick="btnPayTypeAdd_OnClick()"><i class="fa fa-plus"></i> Add</button>
                                                        }
                                                    }
                                                    <a href="@Url.Action("Index", "Software")" class="btn btn-danger " id="cmdCloseButtonCompany"><i class="fa fa-times"></i> Close</a>
                                                </td>
                                            </tr>
                                        </table>
                                    </div>
                                    <div class="panel-body">
                                        <div id="PayTypeGrid" class="grid" align="left"></div>
                                    </div>
                                    <div class="panel-footer">
                                        <div class="row">
                                            <div class="btn-group col-md-7" id="navigationPageGridPayType">
                                                <button type="button" class="btn btn-default border-custom" id="btnMoveToFirstPageGridPayType">
                                                    <span class="glyphicon glyphicon-fast-backward"></span>
                                                </button>
                                                <button type="button" class="btn btn-default border-custom" id="btnMoveToPreviousPageGridPayType">
                                                    <span class="glyphicon glyphicon-step-backward"></span>
                                                </button>
                                                <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnCurrentPageGridPayType"></button>
                                                <button type="button" class="btn btn-default border-custom" id="btnMoveToNextPageGridPayType">
                                                    <span class="glyphicon glyphicon-step-forward"></span>
                                                </button>
                                                <button type="button" class="btn btn-default border-custom" id="btnMoveToLastPageGridPayType">
                                                    <span class="glyphicon glyphicon-fast-forward"></span>
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <!-- Tax -->
                            <div id="Tax" class="tab-pane">
                                <div class="panel panel-default">
                                    <div class="panel-heading">
                                        <table style="width: 100%" border="0">
                                            <tr>
                                                <td style="width: 59%">
                                                    <div class="input-group">
                                                        <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                                        <input type="text" class="form-control" id="InputFilterTax" placeholder="Search...">
                                                    </div>
                                                </td>
                                                <td style="width: 1%"></td>
                                                <td style="width: 40%" align="right">
                                                    @{
                                                        if (canAdd)
                                                        {
                                                            <button class="btn btn-primary " id="btnAddTax" onclick="btnTaxAdd_OnClick()"><i class="fa fa-plus"></i> Add</button>
                                                        }
                                                    }
                                                    <a href="@Url.Action("Index", "Software")" class="btn btn-danger " id="cmdCloseButtonCompany"><i class="fa fa-times"></i> Close</a>
                                                </td>
                                            </tr>
                                        </table>
                                    </div>
                                    <div class="panel-body">
                                        <div id="TaxGrid" class="grid" align="left"></div>
                                    </div>
                                    <div class="panel-footer">
                                        <div class="row">
                                            <div class="btn-group col-md-7" id="navigationPageGridTax">
                                                <button type="button" class="btn btn-default border-custom" id="btnMoveToFirstPageGridTax">
                                                    <span class="glyphicon glyphicon-fast-backward"></span>
                                                </button>
                                                <button type="button" class="btn btn-default border-custom" id="btnMoveToPreviousPageGridTax">
                                                    <span class="glyphicon glyphicon-step-backward"></span>
                                                </button>
                                                <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnCurrentPageGridTax"></button>
                                                <button type="button" class="btn btn-default border-custom" id="btnMoveToNextPageGridTax">
                                                    <span class="glyphicon glyphicon-step-forward"></span>
                                                </button>
                                                <button type="button" class="btn btn-default border-custom" id="btnMoveToLastPageGridTax">
                                                    <span class="glyphicon glyphicon-fast-forward"></span>
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <!-- Unit -->
                            <div id="Unit" class="tab-pane">
                                <div class="panel panel-default">
                                    <div class="panel-heading">
                                        <table style="width: 100%" border="0">
                                            <tr>
                                                <td style="width: 59%">
                                                    <div class="input-group">
                                                        <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                                        <input type="text" class="form-control" id="InputFilterUnit" placeholder="Search...">
                                                    </div>
                                                </td>
                                                <td style="width: 1%"></td>
                                                <td style="width: 40%" align="right">
                                                    @{
                                                        if (canAdd)
                                                        {
                                                            <button class="btn btn-primary " id="btnAddUnit" onclick="btnUnitAdd_OnClick()"><i class="fa fa-plus"></i> Add</button>
                                                        }
                                                    }
                                                    <a href="@Url.Action("Index", "Software")" class="btn btn-danger " id="cmdCloseButtonCompany"><i class="fa fa-times"></i> Close</a>
                                                </td>
                                            </tr>
                                        </table>
                                    </div>
                                    <div class="panel-body">
                                        <div id="UnitGrid" class="grid" align="left"></div>
                                    </div>
                                    <div class="panel-footer">
                                        <div class="row">
                                            <div class="btn-group col-md-7" id="navigationPageGridUnit">
                                                <button type="button" class="btn btn-default border-custom" id="btnMoveToFirstPageGridUnit">
                                                    <span class="glyphicon glyphicon-fast-backward"></span>
                                                </button>
                                                <button type="button" class="btn btn-default border-custom" id="btnMoveToPreviousPageGridUnit">
                                                    <span class="glyphicon glyphicon-step-backward"></span>
                                                </button>
                                                <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnCurrentPageGridUnit"></button>
                                                <button type="button" class="btn btn-default border-custom" id="btnMoveToNextPageGridUnit">
                                                    <span class="glyphicon glyphicon-step-forward"></span>
                                                </button>
                                                <button type="button" class="btn btn-default border-custom" id="btnMoveToLastPageGridUnit">
                                                    <span class="glyphicon glyphicon-fast-forward"></span>
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <!-- Terms -->
                            <div id="Term" class="tab-pane">
                                <div class="panel panel-default">
                                    <div class="panel-heading">
                                        <table style="width: 100%" border="0">
                                            <tr>
                                                <td style="width: 59%">
                                                    <div class="input-group">
                                                        <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                                        <input type="text" class="form-control" id="InputFilterTerm" placeholder="Search...">
                                                    </div>
                                                </td>
                                                <td style="width: 1%"></td>
                                                <td style="width: 40%" align="right">
                                                    @{
                                                        if (canAdd)
                                                        {
                                                            <button class="btn btn-primary " id="btnAddTerm" onclick="btnTermAdd_OnClick()"><i class="fa fa-plus"></i> Add</button>
                                                        }
                                                    }
                                                    <a href="@Url.Action("Index", "Software")" class="btn btn-danger " id="cmdCloseButtonCompany"><i class="fa fa-times"></i> Close</a>
                                                </td>
                                            </tr>
                                        </table>
                                    </div>
                                    <div class="panel-body">
                                        <div id="TermGrid" class="grid" align="left"></div>
                                    </div>
                                    <div class="panel-footer">
                                        <div class="row">
                                            <div class="btn-group col-md-7" id="navigationPageGridTerm">
                                                <button type="button" class="btn btn-default border-custom" id="btnMoveToFirstPageGridTerm">
                                                    <span class="glyphicon glyphicon-fast-backward"></span>
                                                </button>
                                                <button type="button" class="btn btn-default border-custom" id="btnMoveToPreviousPageGridTerm">
                                                    <span class="glyphicon glyphicon-step-backward"></span>
                                                </button>
                                                <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnCurrentPageGridTerm"></button>
                                                <button type="button" class="btn btn-default border-custom" id="btnMoveToNextPageGridTerm">
                                                    <span class="glyphicon glyphicon-step-forward"></span>
                                                </button>
                                                <button type="button" class="btn btn-default border-custom" id="btnMoveToLastPageGridTerm">
                                                    <span class="glyphicon glyphicon-fast-forward"></span>
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <!-- Article Group -->
                            <div id="ArticleGroup" class="tab-pane">
                                <div class="panel panel-default">
                                    <div class="panel-heading">
                                        <table style="width: 100%" border="0">
                                            <tr>
                                                <td style="width: 59%">
                                                    <div class="input-group">
                                                        <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                                        <input type="text" class="form-control" id="InputFilterArticleGroup" placeholder="Search...">
                                                    </div>
                                                </td>
                                                <td style="width: 1%"></td>
                                                <td style="width: 40%" align="right">
                                                    @{
                                                        if (canAdd)
                                                        {
                                                            <button class="btn btn-primary " id="btnAddArticleGroup" onclick="btnAddArtileGroup_OnClick()"><i class="fa fa-plus"></i> Add</button>
                                                        }
                                                    }
                                                    <a href="@Url.Action("Index", "Software")" class="btn btn-danger " id="cmdCloseButtonCompany"><i class="fa fa-times"></i> Close</a>
                                                </td>
                                            </tr>
                                        </table>
                                    </div>
                                    <div class="panel-body">
                                        <div id="ArticleGroupGrid" class="grid" align="left"></div>
                                    </div>
                                    <div class="panel-footer">
                                        <div class="row">
                                            <div class="btn-group col-md-7" id="navigationPageGridArticleGroup">
                                                <button type="button" class="btn btn-default border-custom" id="btnMoveToFirstPageGridArticleGroup">
                                                    <span class="glyphicon glyphicon-fast-backward"></span>
                                                </button>
                                                <button type="button" class="btn btn-default border-custom" id="btnMoveToPreviousPageGridArticleGroup">
                                                    <span class="glyphicon glyphicon-step-backward"></span>
                                                </button>
                                                <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnCurrentPageGridArticleGroup"></button>
                                                <button type="button" class="btn btn-default border-custom" id="btnMoveToNextPageGridArticleGroup">
                                                    <span class="glyphicon glyphicon-step-forward"></span>
                                                </button>
                                                <button type="button" class="btn btn-default border-custom" id="btnMoveToLastPageGridArticleGroup">
                                                    <span class="glyphicon glyphicon-fast-forward"></span>
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <!-- Employees -->
                            <div id="Employee" class="tab-pane">
                                <div class="panel panel-default">
                                    <div class="panel-heading">
                                        <table style="width: 100%" border="0">
                                            <tr>
                                                <td style="width: 59%">
                                                    <div class="input-group">
                                                        <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                                        <input type="text" class="form-control" id="InputFilterEmployee" placeholder="Search...">
                                                    </div>
                                                </td>
                                                <td style="width: 1%"></td>
                                                <td style="width: 40%" align="right">
                                                    @{
                                                        if (canAdd)
                                                        {
                                                            <button class="btn btn-primary " id="btnAddEmployee" onclick="btnEmployeeAdd_OnClick()"><i class="fa fa-plus"></i> Add</button>
                                                        }
                                                    }
                                                    <a href="@Url.Action("Index", "Software")" class="btn btn-danger " id="cmdCloseButtonCompany"><i class="fa fa-times"></i> Close</a>
                                                </td>
                                            </tr>
                                        </table>
                                    </div>
                                    <div class="panel-body">
                                        <div id="EmployeeGrid" class="grid" align="left"></div>
                                    </div>
                                    <div class="panel-footer">
                                        <div class="row">
                                            <div class="btn-group col-md-7" id="navigationPageGridEmployee">
                                                <button type="button" class="btn btn-default border-custom" id="btnMoveToFirstPageGridEmployee">
                                                    <span class="glyphicon glyphicon-fast-backward"></span>
                                                </button>
                                                <button type="button" class="btn btn-default border-custom" id="btnMoveToPreviousPageGridEmployee">
                                                    <span class="glyphicon glyphicon-step-backward"></span>
                                                </button>
                                                <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnCurrentPageGridEmployee"></button>
                                                <button type="button" class="btn btn-default border-custom" id="btnMoveToNextPageGridEmployee">
                                                    <span class="glyphicon glyphicon-step-forward"></span>
                                                </button>
                                                <button type="button" class="btn btn-default border-custom" id="btnMoveToLastPageGridEmployee">
                                                    <span class="glyphicon glyphicon-fast-forward"></span>
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <!-- OtherArticles -->
                            <div id="OtherArticle" class="tab-pane">
                                <div class="panel panel-default">
                                    <div class="panel-heading">
                                        <table style="width: 100%" border="0">
                                            <tr>
                                                <td style="width: 59%">
                                                    <div class="input-group">
                                                        <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                                        <input type="text" class="form-control" id="InputFilterOtherArticle" placeholder="Search...">
                                                    </div>
                                                </td>
                                                <td style="width: 1%"></td>
                                                <td style="width: 40%" align="right">
                                                    @{
                                                        if (canAdd)
                                                        {
                                                            <button class="btn btn-primary " id="btnAddOtherArticle" onclick="btnOtherArticleAdd_OnClick()"><i class="fa fa-plus"></i> Add</button>
                                                        }
                                                    }
                                                    <a href="@Url.Action("Index", "Software")" class="btn btn-danger " id="cmdCloseButtonCompany"><i class="fa fa-times"></i> Close</a>
                                                </td>
                                            </tr>
                                        </table>
                                    </div>
                                    <div class="panel-body">
                                        <div id="OtherArticleGrid" class="grid" align="left"></div>
                                    </div>
                                    <div class="panel-footer">
                                        <div class="row">
                                            <div class="btn-group col-md-7" id="navigationPageGridOtherArticle">
                                                <button type="button" class="btn btn-default border-custom" id="btnMoveToFirstPageGridOtherArticle">
                                                    <span class="glyphicon glyphicon-fast-backward"></span>
                                                </button>
                                                <button type="button" class="btn btn-default border-custom" id="btnMoveToPreviousPageGridOtherArticle">
                                                    <span class="glyphicon glyphicon-step-backward"></span>
                                                </button>
                                                <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnCurrentPageGridOtherArticle"></button>
                                                <button type="button" class="btn btn-default border-custom" id="btnMoveToNextPageGridOtherArticle">
                                                    <span class="glyphicon glyphicon-step-forward"></span>
                                                </button>
                                                <button type="button" class="btn btn-default border-custom" id="btnMoveToLastPageGridOtherArticle">
                                                    <span class="glyphicon glyphicon-fast-forward"></span>
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <!-- User Role -->
                            <div id="UserRole" class="tab-pane">
                                <div class="panel panel-default">
                                    <div class="panel-heading">
                                        <table style="width: 100%" border="0">
                                            <tr>
                                                <td style="width: 59%">
                                                    <div class="input-group">
                                                        <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                                        <input type="text" class="form-control" id="InputFilterUserRole" placeholder="Search...">
                                                    </div>
                                                </td>
                                                <td style="width: 1%"></td>
                                                <td style="width: 40%" align="right">
                                                    @{
                                                        if (canAdd)
                                                        {
                                                            <button class="btn btn-primary " id="btnAddUserRole" onclick="btnUserRoleAdd_OnClick()"><i class="fa fa-plus"></i> Add</button>
                                                        }
                                                    }
                                                    <a href="@Url.Action("Index", "Software")" class="btn btn-danger " id="cmdCloseButtonCompany"><i class="fa fa-times"></i> Close</a>
                                                </td>
                                            </tr>
                                        </table>
                                    </div>
                                    <div class="panel-body">
                                        <div id="UserRoleGrid" class="grid" align="left"></div>
                                    </div>
                                    <div class="panel-footer">
                                        <div class="row">
                                            <div class="btn-group col-md-7" id="navigationPageGridUserRole">
                                                <button type="button" class="btn btn-default border-custom" id="btnMoveToFirstPageGridUserRole">
                                                    <span class="glyphicon glyphicon-fast-backward"></span>
                                                </button>
                                                <button type="button" class="btn btn-default border-custom" id="btnMoveToPreviousPageGridUserRole">
                                                    <span class="glyphicon glyphicon-step-backward"></span>
                                                </button>
                                                <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnCurrentPageGridUserRole"></button>
                                                <button type="button" class="btn btn-default border-custom" id="btnMoveToNextPageGridUserRole">
                                                    <span class="glyphicon glyphicon-step-forward"></span>
                                                </button>
                                                <button type="button" class="btn btn-default border-custom" id="btnMoveToLastPageGridUserRole">
                                                    <span class="glyphicon glyphicon-fast-forward"></span>
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <!-- Status -->
                            <div id="Status" class="tab-pane">
                                <div class="panel panel-default">
                                    <div class="panel-heading">
                                        <table style="width: 100%" border="0">
                                            <tr>
                                                <td style="width: 59%">
                                                    <div class="input-group">
                                                        <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                                        <input type="text" class="form-control" id="InputFilterStatus" placeholder="Search...">
                                                    </div>
                                                </td>
                                                <td style="width: 1%"></td>
                                                <td style="width: 40%" align="right">
                                                    @{
                                                        if (canAdd)
                                                        {
                                                            <button class="btn btn-primary " id="btnAddStatus" onclick="btnStatusAdd_OnClick()"><i class="fa fa-plus"></i> Add</button>
                                                        }
                                                    }
                                                    <a href="@Url.Action("Index", "Software")" class="btn btn-danger " id="cmdCloseButtonCompany"><i class="fa fa-times"></i> Close</a>
                                                </td>
                                            </tr>
                                        </table>
                                    </div>
                                    <div class="panel-body">
                                        <div id="StatusGrid" class="grid" align="left"></div>
                                    </div>
                                    <div class="panel-footer">
                                        <div class="row">
                                            <div class="btn-group col-md-7" id="navigationPageGridStatus">
                                                <button type="button" class="btn btn-default border-custom" id="btnMoveToFirstPageGridStatus">
                                                    <span class="glyphicon glyphicon-fast-backward"></span>
                                                </button>
                                                <button type="button" class="btn btn-default border-custom" id="btnMoveToPreviousPageGridStatus">
                                                    <span class="glyphicon glyphicon-step-backward"></span>
                                                </button>
                                                <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnCurrentPageGridStatus"></button>
                                                <button type="button" class="btn btn-default border-custom" id="btnMoveToNextPageGridStatus">
                                                    <span class="glyphicon glyphicon-step-forward"></span>
                                                </button>
                                                <button type="button" class="btn btn-default border-custom" id="btnMoveToLastPageGridStatus">
                                                    <span class="glyphicon glyphicon-fast-forward"></span>
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- User Stamp -->
                        <div class="panel panel-default">
                            <div class="panel-heading">
                                User stamp
                            </div>
                            <div class="panel-body">
                                <div class="row">
                                    <div class="col-md-6">
                                        <p>Created by:</p>
                                        <div style="padding-left: 10px;">
                                            <i class="fa fa-key fa-fw"></i> <label id="createdBy">NA</label>
                                            <br />
                                            <small><i class="fa fa-calendar fa-fw"></i> &nbsp;<span id="createdDate">mm/dd/yyyy</span></small>
                                        </div>
                                        <br />
                                    </div>
                                    <div class="col-md-6">
                                        <p>Updated by:</p>
                                        <div style="padding-left: 10px;">
                                            <i class="fa fa-key fa-fw"></i> <label id="updatedBy">NA</label>
                                            <br />
                                            <small><i class="fa fa-calendar fa-fw"></i> &nbsp;<span id="updatedDate">mm/dd/yyyy</span></small>
                                        </div>
                                        <br />
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </section>
            @Html.Partial("_SoftwareFooter")
        </main>
    </div>
    <div id="c-mask" class="c-mask"></div>

    <!-- ==================== -->
    <!-- Discount Edit Detail -->
    <!-- ==================== -->
    <div class="modal fade" id="discountEdit" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="discountModalLabel">Discount</h4>
                </div>
                <div class="modal-body">
                    <center>
                        <span id="loadingModalDiscount"></span>
                    </center>
                    <form id="DiscountDetailForm">
                        <dl class="dl-horizontal">
                            <dt>Discount</dt>
                            <dd><input type="text" class="form-control requiredDiscount" id="discount_Discount" placeholder="Discount" /></dd>
                            <dt>Discount Rate (%)</dt>
                            <dd><input type="text" class="form-control requiredDiscount  numberField" id="discount_DiscountRate" placeholder="0.00" /></dd>
                            <dt>Is Inclusive</dt>
                            <dd><input type="checkbox" id="discount_VATInclusive" /></dd>
                            <dt>Account</dt>
                            <dd>
                                <table style="width: 100%" border="0">
                                    <tr>
                                        <td style="width: 30%">
                                            <div class="comboBox-wide" id="cboDiscountAccountCode"></div>
                                        </td>
                                        <td style="width: 1%"></td>
                                        <td style="width: 69%">
                                            <div class="comboBox-wide" id="cboDiscountAccount"></div>
                                        </td>
                                    </tr>
                                </table>
                            </dd>
                        </dl>
                    </form>
                </div>
                <div class="modal-footer">
                    <button id="cmdSaveDiscountButton" class="btn btn-primary" onclick="btnDiscountSaveButton_OnClick()"><i class="fa fa-save"></i> Save</button>
                    <button id="cmdDiscountDetailCloseButton" class="btn btn-danger" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- =============== -->
    <!-- Discount Delete -->
    <!-- =============== -->
    <div class="modal fade" id="deleteDiscountConfirm" role="dialog">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Delete</h4>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete this discount?
                </div>
                <div class="modal-footer">
                    <button id="cmdConfirmDeleteDiscount" class="btn btn-danger" onclick="cmdDiscountConfirmDeleteButton_OnClick()"><i class="fa fa-trash"></i> Delete</button>
                    <button id="cmdConfirmDeleteCloseButtonDiscount" class="btn btn-primary" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <!-- ==================== -->
    <!-- Pay Type Edit Detail -->
    <!-- ==================== -->
    <div class="modal fade" id="payTypeEdit" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="PayTypeModalLabel">Pay Type</h4>
                </div>
                <div class="modal-body">
                    <center>
                        <span id="loadingModalPayType"></span>
                    </center>
                    <form id="PayTypeDetailForm">
                        <dl class="dl-horizontal">
                            <dt>Pay Type</dt>
                            <dd><input type="text" class="form-control requiredPayType" id="payType_PayType" placeholder="Pay type" /></dd>
                            <dt>Account</dt>
                            <dd>
                                <table style="width: 100%" border="0">
                                    <tr>
                                        <td style="width: 30%">
                                            <div class="comboBox-wide" id="cboPayTypeAccountCode"></div>
                                        </td>
                                        <td style="width: 1%"></td>
                                        <td style="width: 69%">
                                            <div class="comboBox-wide" id="cboPayTypeAccount"></div>
                                        </td>
                                    </tr>
                                </table>
                            </dd>
                        </dl>
                    </form>
                </div>
                <div class="modal-footer">
                    <button id="cmdSavePayTypeButton" class="btn btn-primary" onclick="btnPayTypeSaveButton_OnClick()"><i class="fa fa-save"></i> Save</button>
                    <button id="cmdPayTypeDetailCloseButton" class="btn btn-danger" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- =============== -->
    <!-- Pay Type Delete -->
    <!-- =============== -->
    <div class="modal fade" id="deletePayTypeConfirm" role="dialog">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Delete</h4>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete this pay type?
                </div>
                <div class="modal-footer">
                    <button id="cmdConfirmDeletePayType" class="btn btn-danger" onclick="cmdPayTypeConfirmDeleteButton_OnClick()"><i class="fa fa-trash"></i> Delete</button>
                    <button id="cmdConfirmDeleteCloseButtonPayType" class="btn btn-primary" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <!-- =============== -->
    <!-- Tax Edit Detail -->
    <!-- =============== -->
    <div class="modal fade" id="taxEdit" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="TaxTypeModalLabel">Tax Type</h4>
                </div>
                <div class="modal-body">
                    <center>
                        <span id="loadingModalTaxType"></span>
                    </center>
                    <form id="TaxDetailForm">
                        <dl class="dl-horizontal">
                            <dt>Tax Type</dt>
                            <dd><input type="text" class="form-control requiredTaxType" id="taxType_TaxType" placeholder="Tax type" /></dd>
                            <dt>Tax Rate (%)</dt>
                            <dd><input type="text" class="form-control requiredTaxType  numberField" id="taxType_TaxRate" placeholder="0.00" /></dd>
                            <dt>Is Inclusive</dt>
                            <dd><input type="checkbox" id="taxType_TaxVATInclusive" class="requiredTaxType" /></dd>
                            <dt>Account</dt>
                            <dd>
                                <table style="width: 100%" border="0">
                                    <tr>
                                        <td style="width: 30%">
                                            <div class="comboBox-wide" id="cboTaxTypeAccountCode"></div>
                                        </td>
                                        <td style="width: 1%"></td>
                                        <td style="width: 69%">
                                            <div class="comboBox-wide" id="cboTaxTypeAccount"></div>
                                        </td>
                                    </tr>
                                </table>
                            </dd>
                        </dl>
                    </form>
                </div>
                <div class="modal-footer">
                    <button id="cmdSaveTaxTypeButton" class="btn btn-primary" onclick="btnTaxTypeSaveButton_OnClick()"><i class="fa fa-save"></i> Save</button>
                    <button id="cmdTaxTypeDetailCloseButton" class="btn btn-danger" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- ========== -->
    <!-- Tax Delete -->
    <!-- ========== -->
    <div class="modal fade" id="deleteTaxTypeConfirm" role="dialog">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Delete</h4>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete this tax type?
                </div>
                <div class="modal-footer">
                    <button id="cmdConfirmDeleteTaxType" class="btn btn-danger" onclick="cmdTaxTypeConfirmDeleteButton_OnClick()"><i class="fa fa-trash"></i> Delete</button>
                    <button id="cmdConfirmDeleteCloseButtonTaxType" class="btn btn-primary" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <!-- ================ -->
    <!-- Unit Edit Detail -->
    <!-- ================ -->
    <div class="modal fade" id="unitEdit" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="unitModalLabel">Unit</h4>
                </div>
                <div class="modal-body">
                    <center>
                        <span id="loadingModalUnit"></span>
                    </center>
                    <form id="UnitDetailForm">
                        <dl class="dl-horizontal">
                            <dt>Unit</dt>
                            <dd><input type="text" class="form-control requiredUnit" id="unit_Unit" placeholder="Unit" /></dd>
                        </dl>
                    </form>
                </div>
                <div class="modal-footer">
                    <button id="cmdSaveUnitButton" class="btn btn-primary" onclick="btnUnitSaveButton_OnClick()"><i class="fa fa-save"></i> Save</button>
                    <button id="cmdUnitDetailCloseButton" class="btn btn-danger" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- =========== -->
    <!-- Unit Delete -->
    <!-- =========== -->
    <div class="modal fade" id="deleteUnitConfirm" role="dialog">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Delete</h4>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete this unit?
                </div>
                <div class="modal-footer">
                    <button id="cmdConfirmDeleteUnit" class="btn btn-danger" onclick="cmdUnitConfirmDeleteButton_OnClick()"><i class="fa fa-trash"></i> Delete</button>
                    <button id="cmdConfirmDeleteCloseButtonUnit" class="btn btn-primary" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <!-- ================ -->
    <!-- Term Edit Detail -->
    <!-- ================ -->
    <div class="modal fade" id="termEdit" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="termModalLabel">Term</h4>
                </div>
                <div class="modal-body">
                    <center>
                        <span id="loadingModalTerm"></span>
                    </center>
                    <form id="TermDetailForm">
                        <input type="hidden" id="term_id" />
                        <dl class="dl-horizontal">
                            <dt>Term</dt>
                            <dd><input type="text" class="form-control requiredTerm" id="term_Term" placeholder="Term" /></dd>
                            <dt>No. of Days</dt>
                            <dd><input type="text" class="form-control requiredTerm  numberField" id="term_NoOfDays" placeholder="0.00" /></dd>
                        </dl>
                    </form>
                </div>
                <div class="modal-footer">
                    <button id="cmdSaveTermButton" class="btn btn-primary" onclick="btnTermSaveButton_OnClick()"><i class="fa fa-save"></i> Save</button>
                    <button id="cmdTermDetailCloseButton" class="btn btn-danger" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- =========== -->
    <!-- Term Delete -->
    <!-- =========== -->
    <div class="modal fade" id="deleteTermConfirm" role="dialog">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Delete</h4>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete this term?
                </div>
                <div class="modal-footer">
                    <button id="cmdConfirmDeleteTerm" class="btn btn-danger" onclick="cmdTermConfirmDeleteButton_OnClick()"><i class="fa fa-trash"></i> Delete</button>
                    <button id="cmdConfirmDeleteCloseButtonTerm" class="btn btn-primary" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <!-- ========================= -->
    <!-- Article Group Edit Detail -->
    <!-- ========================= -->
    <div class="modal fade" id="articleGroupEdit" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="articleGroupModalLabel">Article Group</h4>
                </div>
                <div class="modal-body">
                    <ul class="nav nav-tabs pill-custom" role="tablist" id="myTab">
                        <li role="presentation" class="active"><a data-toggle="tab" href="#articleGroupDetailTarget" id="articleGroupDetailTab">Article Group</a></li>
                        <li role="presentation"><a data-toggle="tab" href="#articleGroupBranchTarget" id="articleGroupBranchTab">Article Group Branch</a></li>
                    </ul>
                    <br />
                    <div class="tab-content">
                        <div id="articleGroupDetailTarget" class="tab-pane fade in active">
                            <center>
                                <span id="loadingModalArticleGroup"></span>
                            </center>
                            <form id="articleGroupDetailForm">
                                <dl class="dl-horizontal">
                                    <dt>Article Group</dt>
                                    <dd><input type="text" class="form-control requiredArticleGroup" id="articleGroup_ArticleGroup" placeholder="Article Group" /></dd>
                                    <dt>Article Type:</dt>
                                    <dd>
                                        <div class="comboBox-wide" id="cboArticleType"></div>
                                    </dd>
                                    <dt>Account</dt>
                                    <dd>
                                        <table style="width: 100%" border="0">
                                            <tr>
                                                <td style="width: 30%">
                                                    <div class="comboBox-wide" id="cboArticleGroupAccountCode"></div>
                                                </td>
                                                <td style="width: 1%"></td>
                                                <td style="width: 69%">
                                                    <div class="comboBox-wide" id="cboArticleGroupAccount"></div>
                                                </td>
                                            </tr>
                                        </table>
                                    </dd>
                                    <dt>Sales Account</dt>
                                    <dd>
                                        <table style="width: 100%" border="0">
                                            <tr>
                                                <td style="width: 30%">
                                                    <div class="comboBox-wide" id="cboArticleGroupSalesAccountCode"></div>
                                                </td>
                                                <td style="width: 1%"></td>
                                                <td style="width: 69%">
                                                    <div class="comboBox-wide" id="cboArticleGroupSalesAccount"></div>
                                                </td>
                                            </tr>
                                        </table>
                                    </dd>
                                    <dt>Cost Account</dt>
                                    <dd>
                                        <table style="width: 100%" border="0">
                                            <tr>
                                                <td style="width: 30%">
                                                    <div class="comboBox-wide" id="cboArticleGroupCostAccountCode"></div>
                                                </td>
                                                <td style="width: 1%"></td>
                                                <td style="width: 69%">
                                                    <div class="comboBox-wide" id="cboArticleGroupCostAccount"></div>
                                                </td>
                                            </tr>
                                        </table>
                                    </dd>
                                    <dt>Asset Account</dt>
                                    <dd>
                                        <table style="width: 100%" border="0">
                                            <tr>
                                                <td style="width: 30%">
                                                    <div class="comboBox-wide" id="cboArticleGroupAssetAccountCode"></div>
                                                </td>
                                                <td style="width: 1%"></td>
                                                <td style="width: 69%">
                                                    <div class="comboBox-wide" id="cboArticleGroupAssetAccount"></div>
                                                </td>
                                            </tr>
                                        </table>
                                    </dd>
                                    <dt>Expense Account</dt>
                                    <dd>
                                        <table style="width: 100%" border="0">
                                            <tr>
                                                <td style="width: 30%">
                                                    <div class="comboBox-wide" id="cboArticleGroupExpenseAccountCode"></div>
                                                </td>
                                                <td style="width: 1%"></td>
                                                <td style="width: 69%">
                                                    <div class="comboBox-wide" id="cboArticleGroupExpenseAccount"></div>
                                                </td>
                                            </tr>
                                        </table>
                                    </dd>
                                </dl>
                            </form>
                        </div>
                        <div id="articleGroupBranchTarget" class="tab-pane fade in">
                            <center>
                                <span id="loadingArticleGroupBranch"></span>
                            </center>
                            <div id="articleGroupBranchFlexGridDetail">
                                <div class="panel panel-default">
                                    <div class="panel-heading">
                                        <div class="row">
                                            <div class="col-lg-12" align="right">
                                                <button class="btn btn-primary" id="btnAddArticleGroupBranch" onclick="btnAddArticleGroupBranchOnlick()"><i class="fa fa-plus"></i> Add</button>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="panel-body">
                                        <div id="articleGroupBranchFlexGrid" style="max-height: 250px"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button id="cmdSaveArticleGroupButton" class="btn btn-primary" onclick="btnArticleGroupSaveButton_OnClick()"><i class="fa fa-save"></i> Save</button>
                    <button id="cmdArticleGroupDetailCloseButton" class="btn btn-danger" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- =========================== -->
    <!-- Article Group Branch Detail -->
    <!-- =========================== -->
    <div class="modal fade" id="articleGroupBranchEdit" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="articleGroupBranchModalLabel">Article Group Branch</h4>
                </div>
                <div class="modal-body">
                    <center>
                        <span id="loadingModalArticleGroupBranch"></span>
                    </center>
                    <form id="articleGroupBranchDetailForm">
                        <dl class="dl-horizontal">
                            <dt>Company</dt>
                            <dd>
                                <div class="comboBox-wide" id="cboArticleGroupBranchCompany"></div>
                            </dd>
                            <dt>Branch</dt>
                            <dd>
                                <div class="comboBox-wide" id="cboArticleGroupBranch"></div>
                            </dd>
                            <dt>Account</dt>
                            <dd>
                                <table style="width: 100%" border="0">
                                    <tr>
                                        <td style="width: 30%">
                                            <div class="comboBox-wide" id="cboArticleGroupBranchAccountCode"></div>
                                        </td>
                                        <td style="width: 1%"></td>
                                        <td style="width: 69%">
                                            <div class="comboBox-wide" id="cboArticleGroupBranchAccount"></div>
                                        </td>
                                    </tr>
                                </table>
                            </dd>
                            <dt>Sales Account</dt>
                            <dd>
                                <table style="width: 100%" border="0">
                                    <tr>
                                        <td style="width: 30%">
                                            <div class="comboBox-wide" id="cboArticleGroupBranchSalesAccountCode"></div>
                                        </td>
                                        <td style="width: 1%"></td>
                                        <td style="width: 69%">
                                            <div class="comboBox-wide" id="cboArticleGroupBranchSalesAccount"></div>
                                        </td>
                                    </tr>
                                </table>
                            </dd>
                            <dt>Cost Account</dt>
                            <dd>
                                <table style="width: 100%" border="0">
                                    <tr>
                                        <td style="width: 30%">
                                            <div class="comboBox-wide" id="cboArticleGroupBranchCostAccountCode"></div>
                                        </td>
                                        <td style="width: 1%"></td>
                                        <td style="width: 69%">
                                            <div class="comboBox-wide" id="cboArticleGroupBranchCostAccount"></div>
                                        </td>
                                    </tr>
                                </table>
                            </dd>
                            <dt>Asset Account</dt>
                            <dd>
                                <table style="width: 100%" border="0">
                                    <tr>
                                        <td style="width: 30%">
                                            <div class="comboBox-wide" id="cboArticleGroupBranchAssetAccountCode"></div>
                                        </td>
                                        <td style="width: 1%"></td>
                                        <td style="width: 69%">
                                            <div class="comboBox-wide" id="cboArticleGroupBranchAssetAccount"></div>
                                        </td>
                                    </tr>
                                </table>
                            </dd>
                            <dt>Expense Account</dt>
                            <dd>
                                <table style="width: 100%" border="0">
                                    <tr>
                                        <td style="width: 30%">
                                            <div class="comboBox-wide" id="cboArticleGroupBranchExpenseAccountCode"></div>
                                        </td>
                                        <td style="width: 1%"></td>
                                        <td style="width: 69%">
                                            <div class="comboBox-wide" id="cboArticleGroupBranchExpenseAccount"></div>
                                        </td>
                                    </tr>
                                </table>
                            </dd>
                        </dl>
                    </form>
                </div>
                <div class="modal-footer">
                    <button id="cmdSaveArticleGroupBranchButton" class="btn btn-primary" onclick="btnArticleGroupBranchSaveButton_OnClick()"><i class="fa fa-save"></i> Save</button>
                    <button id="cmdArticleGroupBranchDetailCloseButton" class="btn btn-danger" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- ==================== -->
    <!-- Article Group Delete -->
    <!-- ==================== -->
    <div class="modal fade" id="deleteArticleGroupConfirm" role="dialog">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Delete</h4>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete this article group?
                </div>
                <div class="modal-footer">
                    <button id="cmdConfirmDeleteArticleGroup" class="btn btn-danger" onclick="cmdArticleGroupConfirmDeleteButton_OnClick()"><i class="fa fa-trash"></i> Delete</button>
                    <button id="cmdConfirmDeleteCloseButtonArticleGroup" class="btn btn-primary" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <!-- =========================== -->
    <!-- Article Group Branch Delete -->
    <!-- =========================== -->
    <div class="modal fade" id="deleteArticleGroupBranchConfirm" role="dialog">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Delete</h4>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete this article group branch?
                </div>
                <div class="modal-footer">
                    <button id="cmdConfirmDeleteArticleGroupBranch" class="btn btn-danger" onclick="cmdArticleGroupBranchConfirmDeleteButton_OnClick()"><i class="fa fa-trash"></i> Delete</button>
                    <button id="cmdConfirmDeleteCloseButtonArticleGroupBranch" class="btn btn-primary" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <!-- ==================== -->
    <!-- Employee Edit Detail -->
    <!-- ==================== -->
    <div class="modal fade" id="employeeEdit" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="employeeModalLabel">Employee</h4>
                </div>
                <div class="modal-body">
                    <center>
                        <span id="loadingModalEmployee"></span>
                    </center>
                    <form id="employeeDetailForm">
                        <dl class="dl-horizontal">
                            <dt id="employee_Code_Label">Code</dt>
                            <dd id="employee_Code_Input"><input type="text" class="form-control  requiredEmployee" id="employee_Code" placeholder="Code" disabled /></dd>
                            <dt>Manual Code</dt>
                            <dd>
                                <input type="text" class="form-control requiredBank" id="inpManualEmployeeCode" placeholder="Manual Code" />
                            </dd>
                            <dt>Employee</dt>
                            <dd><input type="text" class="form-control requiredEmployee" id="employee_Employee" placeholder="Employee" /></dd>
                            <dt>Employee Group</dt>
                            <dd>
                                <div class="comboBox-wide" id="cboEmployeeGroup"></div>
                            </dd>
                            <dt>Account</dt>
                            <dd>
                                <table style="width: 100%" border="0">
                                    <tr>
                                        <td style="width: 30%">
                                            <div class="comboBox-wide" id="cboEmployeeAccountCode"></div>
                                        </td>
                                        <td style="width: 1%"></td>
                                        <td style="width: 69%">
                                            <div class="comboBox-wide" id="cboEmployeeAccount"></div>
                                        </td>
                                    </tr>
                                </table>
                            </dd>
                            <dt>Address</dt>
                            <dd><textarea class="form-control textarea-custom requiredEmployee" id="employee_Address" rows="5" placeholder="Address"></textarea></dd>
                            <dt>Contact Number</dt>
                            <dd><input type="text" class="form-control  requiredEmployee" id="employee_ContactNumber" placeholder="Contact Number" /></dd>
                            <dt>Contact Person</dt>
                            <dd><input type="text" class="form-control  requiredEmployee" id="employee_ContactPerson" placeholder="Contact Person" /></dd>
                        </dl>
                    </form>
                </div>
                <div class="modal-footer">
                    <button id="cmdSaveEmployeeButton" class="btn btn-primary" onclick="btnEmployeeSaveButton_OnClick()"><i class="fa fa-save"></i> Save</button>
                    <button id="cmdEmployeeDetailCloseButton" class="btn btn-danger" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- =============== -->
    <!-- Employee Delete -->
    <!-- =============== -->
    <div class="modal fade" id="deleteEmployeeConfirm" role="dialog">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Delete</h4>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete this employee?
                </div>
                <div class="modal-footer">
                    <button id="cmdConfirmDeleteEmployee" class="btn btn-danger" onclick="cmdEmployeeConfirmDeleteButton_OnClick()"><i class="fa fa-trash"></i> Delete</button>
                    <button id="cmdConfirmDeleteCloseButtonEmployee" class="btn btn-primary" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <!-- ========================= -->
    <!-- Other Article Edit Detail -->
    <!-- ========================= -->
    <div class="modal fade" id="otherArticleEdit" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="otherArticleModalLabel">Other Article</h4>
                </div>
                <div class="modal-body">
                    <center>
                        <span id="loadingModalOtherArticle"></span>
                    </center>
                    <form id="otherArticleDetailForm">
                        <dl class="dl-horizontal">
                            <dt id="otherArticle_Code_Label">Code</dt>
                            <dd id="otherArticle_Code_Input"><input type="text" class="form-control  requiredOtherArticle" id="otherArticle_Code" placeholder="Code" disabled /></dd>
                             <dt>Manual Code</dt>
                            <dd>
                                <input type="text" class="form-control requiredBank" id="inpManualOtherArticleCode" placeholder="Manual Code" />
                            </dd>
                            <dt>Article</dt>
                            <dd><input type="text" class="form-control requiredOtherArticle" id="otherArticle_OtherArticle" placeholder="OtherArticle" /></dd>
                            <dt>Article Group</dt>
                            <dd>
                                <div class="comboBox-wide" id="cboOtherArticleGroup"></div>
                            </dd>
                            <dt>Account</dt>
                            <dd>
                                <table style="width: 100%" border="0">
                                    <tr>
                                        <td style="width: 30%">
                                            <div class="comboBox-wide" id="cboOtherArticleAccountCode"></div>
                                        </td>
                                        <td style="width: 1%"></td>
                                        <td style="width: 69%">
                                            <div class="comboBox-wide" id="cboOtherArticleAccount"></div>
                                        </td>
                                    </tr>
                                </table>
                            </dd>
                            <dt>Address</dt>
                            <dd><textarea class="form-control textarea-custom requiredOtherArticle" id="otherArticle_Address" rows="5" placeholder="Address"></textarea></dd>
                            <dt>Contact Number</dt>
                            <dd><input type="text" class="form-control  requiredOtherArticle" id="otherArticle_ContactNumber" placeholder="Contact Number" /></dd>
                            <dt>Contact Person</dt>
                            <dd><input type="text" class="form-control  requiredOtherArticle" id="otherArticle_ContactPerson" placeholder="Contact Person" /></dd>
                        </dl>
                    </form>
                </div>
                <div class="modal-footer">
                    <button id="cmdSaveOtherArticleButton" class="btn btn-primary" onclick="btnOtherArticleSaveButton_OnClick()"><i class="fa fa-save"></i> Save</button>
                    <button id="cmdOtherArticleDetailCloseButton" class="btn btn-danger" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- ==================== -->
    <!-- Other Article Delete -->
    <!-- ==================== -->
    <div class="modal fade" id="deleteOtherArticleConfirm" role="dialog">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Delete</h4>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete this article?
                </div>
                <div class="modal-footer">
                    <button id="cmdConfirmDeleteOtherArticle" class="btn btn-danger" onclick="cmdOtherArticleConfirmDeleteButton_OnClick()"><i class="fa fa-trash"></i> Delete</button>
                    <button id="cmdConfirmDeleteCloseButtonOtherArticle" class="btn btn-primary" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <!-- ================ -->
    <!-- Status Edit Detail -->
    <!-- ================ -->
    <div class="modal fade" id="statusEdit" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="statusModalLabel">Status</h4>
                </div>
                <div class="modal-body">
                    <center>
                        <span id="loadingModalStatus"></span>
                    </center>
                    <form id="StatusDetailForm">
                        <dl class="dl-horizontal">
                            <dt>Status</dt>
                            <dd><input type="text" class="form-control requiredStatus" id="status_Status" placeholder="Status" /></dd>
                            <dt>Category</dt>
                            <dd>
                                <div class="comboBox-wide" id="cboCategory"></div>
                            </dd>
                        </dl>
                    </form>
                </div>
                <div class="modal-footer">
                    <button id="cmdSaveStatusButton" class="btn btn-primary" onclick="btnStatusSaveButton_OnClick()"><i class="fa fa-save"></i> Save</button>
                    <button id="cmdStatusDetailCloseButton" class="btn btn-danger" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- =========== -->
    <!-- Status Delete -->
    <!-- =========== -->
    <div class="modal fade" id="deleteStatusConfirm" role="dialog">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Delete</h4>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete this status?
                </div>
                <div class="modal-footer">
                    <button id="cmdConfirmDeleteStatus" class="btn btn-danger" onclick="cmdStatusConfirmDeleteButton_OnClick()"><i class="fa fa-trash"></i> Delete</button>
                    <button id="cmdConfirmDeleteCloseButtonStatus" class="btn btn-primary" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>

    @Scripts.Render("~/Scripts/Software-js")
    <!-- ================ -->
    <!-- Discount Scripts -->
    <!-- ================ -->
    <script type="text/javascript">
        // =============================
        // Global Variables for Discount
        // =============================
        var discounts;
        var discountGrid;
        var btnFirstPageGridDiscount;
        var btnPreviousPageGridDiscount;
        var btnNextPageGridDiscount;
        var btnLastPageGridDiscount;
        var btnCurrentPageGridDiscount;
        var discountId = 0;
        var cboDiscountAccountCode = new wijmo.input.ComboBox('#cboDiscountAccountCode');
        var cboDiscountAccount = new wijmo.input.ComboBox('#cboDiscountAccount');

        // =================
        // Get discount list
        // =================
        function getDiscount() {
            var discounts = new wijmo.collections.ObservableArray;
            NProgress.start();
            $.ajax({
                url: '/api/discount/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            discounts.push({
                                EditId: "<button class='btn btn-primary btn-xs btn-block' id='cmdDiscountEdit' onclick='btnDiscountEdit_OnClick()'><i class='fa fa-edit'></i> Edit</button>",
                                DeleteId: "<button class='btn btn-danger btn-xs btn-block' onclick='btnDiscountDelete_OnClick()'><i class='fa fa-trash'></i> Delete</button>",
                                Id: results[i]["Id"],
                                Discount: results[i]["Discount"],
                                DiscountRate: results[i]["DiscountRate"],
                                DiscountRateDisplay: parseFloat(results[i]["DiscountRate"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                IsInclusive: results[i]["IsInclusive"],
                                AccountId: results[i]["AccountId"],
                                Account: results[i]["Account"],
                                IsLocked: results[i]["IsLocked"],
                                CreatedBy: results[i]["CreatedBy"],
                                CreatedDateTime: results[i]["CreatedDateTime"],
                                UpdatedBy: results[i]["UpdatedBy"],
                                UpdatedDateTime: results[i]["UpdatedDateTime"]
                            });
                        }
                    }

                    NProgress.done();
                }
            });

            return discounts;
        }

        // ============================
        // Discount delete lock record
        // ===========================
        function btnDiscountDeleteLock_OnClick() {
            $('#deleteRecordLock').modal({
                show: true,
                backdrop: 'static'
            });
        }

        // ===============================
        // FlexGrid Selection for Discount
        // ===============================
        function updateDetailsDiscount() {
            var item = discounts.currentItem;
            document.getElementById('createdBy').innerHTML = item.CreatedBy;
            document.getElementById('createdDate').innerHTML = item.CreatedDateTime;
            document.getElementById('updatedBy').innerHTML = item.UpdatedBy;
            document.getElementById('updatedDate').innerHTML = item.UpdatedDateTime;
        }

        // ===============================
        // Navigation buttons for discount
        // ===============================
        function updateNavigateButtonsDiscount() {
            if (discounts.pageSize <= 0) {
                document.getElementById('navigationPageGridDiscount').style.display = 'none';
                return;
            }
            document.getElementById('navigationPageGridDiscount').style.display = 'block';
            if (discounts.pageIndex === 0) {
                btnFirstPageGridDiscount.setAttribute('disabled', 'disabled');
                btnPreviousPageGridDiscount.setAttribute('disabled', 'disabled');
                btnNextPageGridDiscount.removeAttribute('disabled');
                btnLastPageGridDiscount.removeAttribute('disabled');
            } else if (discounts.pageIndex === (discounts.pageCount - 1)) {
                btnFirstPageGridDiscount.removeAttribute('disabled');
                btnPreviousPageGridDiscount.removeAttribute('disabled');
                btnLastPageGridDiscount.setAttribute('disabled', 'disabled');
                btnNextPageGridDiscount.setAttribute('disabled', 'disabled');
            } else {
                btnFirstPageGridDiscount.removeAttribute('disabled');
                btnPreviousPageGridDiscount.removeAttribute('disabled');
                btnNextPageGridDiscount.removeAttribute('disabled');
                btnLastPageGridDiscount.removeAttribute('disabled');
            }
            btnCurrentPageGridDiscount.innerHTML = (discounts.pageIndex + 1) + ' / ' + discounts.pageCount;
        }

        // =======================================
        // Get account list for discount combo box
        // =======================================
        function getDiscountAccountForComboBox(accountId) {
            var discountAccountsObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/discount/dropdown/list/account',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            discountAccountsObservableArray.push({
                                Id: results[i]["Id"],
                                AccountCode: results[i]["AccountCode"],
                                Account: results[i]["Account"]
                            });
                        }
                    }

                    var disabled = true;
                    if (results.length > 0) {
                        disabled = false;
                        $('#cmdSaveDiscountButton').prop('disabled', false);
                    } else {
                        $('#cmdSaveDiscountButton').prop('disabled', true);
                    }

                    cboDiscountAccountCode.dispose();
                    cboDiscountAccountCode = new wijmo.input.ComboBox('#cboDiscountAccountCode', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: discountAccountsObservableArray,
                        displayMemberPath: "AccountCode",
                        selectedValuePath: "Id",
                        selectedValue: accountId,
                        onSelectedIndexChanged: function () {
                            cboDiscountAccount.selectedValue = this.selectedValue;
                        }
                    });

                    cboDiscountAccount.dispose();
                    cboDiscountAccount = new wijmo.input.ComboBox('#cboDiscountAccount', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: discountAccountsObservableArray,
                        displayMemberPath: "Account",
                        selectedValuePath: "Id",
                        selectedValue: accountId,
                        onSelectedIndexChanged: function () {
                            cboDiscountAccountCode.selectedValue = this.selectedValue;
                        }
                    });

                    setTimeout(function () {
                        $("#loadingModalDiscount").hide();
                        $("#DiscountDetailForm").show();
                    }, 500);
                }
            });
        }

        // ================
        // Add new discount
        // ================
        function btnDiscountAdd_OnClick() {
            $('#discountEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $('.requiredDiscount').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            $("#loadingModalDiscount").show();
            document.getElementById("loadingModalDiscount").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#DiscountDetailForm").hide();

            document.getElementById("cmdSaveDiscountButton").innerHTML = '<i class="fa fa-save"></i> Save';
            $('#cmdSaveDiscountButton').prop('disabled', true);
            $('#cmdDiscountDetailCloseButton').prop('disabled', false);

            discountId = 0;
            document.getElementById('discount_Discount').value = "NA";
            document.getElementById('discount_DiscountRate').value = formatDecimalValues(0);
            document.getElementById('discount_VATInclusive').checked = "";
            getDiscountAccountForComboBox(0);

            document.getElementById('discount_Discount').disabled = false;
            document.getElementById('discount_DiscountRate').disabled = false;
            document.getElementById('discount_VATInclusive').disabled = false;
        }

        // =============
        // Edit Discount
        // =============
        function btnDiscountEdit_OnClick() {
            $('#discountEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $('.requiredDiscount').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            $("#loadingModalDiscount").show();
            document.getElementById("loadingModalDiscount").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#DiscountDetailForm").hide();

            document.getElementById("cmdSaveDiscountButton").innerHTML = '<i class="fa fa-save"></i> Save';
            $('#cmdSaveDiscountButton').prop('disabled', true);
            $('#cmdDiscountDetailCloseButton').prop("disabled", false);

            discounts.editItem(discounts.currentItem);
            var discount = discounts.currentEditItem;
            discountId = discount.Id;
            document.getElementById('discount_Discount').value = discount.Discount ? discount.Discount : '';
            document.getElementById('discount_DiscountRate').value = formatDecimalValues(discount.DiscountRate);
            document.getElementById('discount_VATInclusive').checked = discount.IsInclusive ? discount.IsInclusive : '';
            getDiscountAccountForComboBox(discount.AccountId);

            document.getElementById('discount_Discount').disabled = false;
            document.getElementById('discount_DiscountRate').disabled = false;
            document.getElementById('discount_VATInclusive').disabled = false;
        }

        // =========================
        // Discount Entry Validation
        // =========================
        function discountEntryValidation() {
            var isValid = true;
            $('.requiredDiscount').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                } else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            return isValid;
        }

        // =========================
        // Discount refresh flexgrid
        // =========================
        function refreshDiscountFlexgrid() {
            discounts = new wijmo.collections.CollectionView(getDiscount());
            discounts.canFilter = true;
            discounts.pageSize = 15;

            var filterTextDiscount = '';
            $('#InputFilterDiscount').keyup(function () {
                filterTextDiscount = this.value.toLowerCase();
                discounts.refresh();
            });
            discounts.filter = function (item) {
                return !filterTextDiscount || (item.Discount.toLowerCase().indexOf(filterTextDiscount) > -1)
                    || (item.Account.toLowerCase().indexOf(filterTextDiscount) > -1);
            }
            discounts.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsDiscount();
            });
            discounts.currentChanged.addHandler(function (sender, args) {
                updateDetailsDiscount();
            });

            discountGrid.itemsSource = discounts;
            discountGrid.trackChanges = true;
        }

        // =============
        // Save Discount
        // =============
        function btnDiscountSaveButton_OnClick() {
            var discountObject = new Object();
            discountObject.Discount = document.getElementById('discount_Discount').value;
            discountObject.DiscountRate = document.getElementById('discount_DiscountRate').value;
            discountObject.IsInclusive = document.getElementById('discount_VATInclusive').checked;
            discountObject.AccountId = cboDiscountAccount.selectedValue;
            var discountData = JSON.stringify(discountObject);

            if (discountEntryValidation()) {
                document.getElementById("cmdSaveDiscountButton").innerHTML = '<i class="fa fa-spinner fa-spin"></i> Saving';
                $('#cmdSaveDiscountButton').prop('disabled', true);
                $('#cmdDiscountDetailCloseButton').prop('disabled', true);

                if (discountId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/discount/add',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: discountData,
                        statusCode: {
                            200: function () {
                                toastr.success("Save Successful");
                                $('#discountEdit').modal('hide');
                                refreshDiscountFlexgrid();
                            },
                            404: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                                document.getElementById("cmdSaveDiscountButton").innerHTML = '<i class="fa fa-save"></i> Save';
                                $('#cmdSaveDiscountButton').prop('disabled', false);
                                $('#cmdDiscountDetailCloseButton').prop('disabled', false);
                            },
                            400: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                                document.getElementById("cmdSaveDiscountButton").innerHTML = '<i class="fa fa-save"></i> Save';
                                $('#cmdSaveDiscountButton').prop('disabled', false);
                                $('#cmdDiscountDetailCloseButton').prop('disabled', false);
                            },
                            500: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                                document.getElementById("cmdSaveDiscountButton").innerHTML = '<i class="fa fa-save"></i> Save';
                                $('#cmdSaveDiscountButton').prop('disabled', false);
                                $('#cmdDiscountDetailCloseButton').prop('disabled', false);
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/discount/update/' + discountId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: discountData,
                        statusCode: {
                            200: function () {
                                toastr.success("Update Successful");
                                $('#discountEdit').modal('hide');
                                refreshDiscountFlexgrid();
                            },
                            404: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                                document.getElementById("cmdSaveDiscountButton").innerHTML = '<i class="fa fa-save"></i> Save';
                                $('#cmdSaveDiscountButton').prop('disabled', false);
                                $('#cmdDiscountDetailCloseButton').prop('disabled', false);
                            },
                            400: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                                document.getElementById("cmdSaveDiscountButton").innerHTML = '<i class="fa fa-save"></i> Save';
                                $('#cmdSaveDiscountButton').prop('disabled', false);
                                $('#cmdDiscountDetailCloseButton').prop('disabled', false);
                            },
                            500: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                                document.getElementById("cmdSaveDiscountButton").innerHTML = '<i class="fa fa-save"></i> Save';
                                $('#cmdSaveDiscountButton').prop('disabled', false);
                                $('#cmdDiscountDetailCloseButton').prop('disabled', false);
                            }
                        }
                    });
                }
            } else {
                toastr.error("Invalid entry");
            }
        }

        // ===============
        // Delete Discount
        // ===============
        function btnDiscountDelete_OnClick() {
            discounts.editItem(discounts.currentItem);
            var discount = discounts.currentEditItem;

            $('#deleteDiscountConfirm').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById("cmdConfirmDeleteDiscount").innerHTML = '<i class="fa fa-trash"></i> Delete';
            $('#cmdConfirmDeleteDiscount').prop('disabled', false);
            $('#cmdConfirmDeleteCloseButtonDiscount').prop('disabled', false);
        }

        // Discount Confirm Delete Button
        function cmdDiscountConfirmDeleteButton_OnClick() {
            document.getElementById("cmdConfirmDeleteDiscount").innerHTML = '<i class="fa fa-spinner fa-spin"></i> Deleting';
            $('#cmdConfirmDeleteDiscount').prop('disabled', true);
            $('#cmdConfirmDeleteCloseButtonDiscount').prop('disabled', true);

            discounts.editItem(discounts.currentItem);
            var discountId = discounts.currentEditItem.Id;
            var discountName = discounts.currentEditItem.Discount;

            $.ajax({
                url: '/api/discount/delete/' + discountId,
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Delete Successful");
                        $('#deleteDiscountConfirm').modal('hide');
                        refreshDiscountFlexgrid()
                    },
                    404: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                        $('#deleteDiscountConfirm').modal('hide');
                        document.getElementById("cmdConfirmDeleteDiscount").innerHTML = '<i class="fa fa-trash"></i> Delete';
                        $('#cmdConfirmDeleteDiscount').prop('disabled', false);
                        $('#cmdConfirmDeleteCloseButtonDiscount').prop('disabled', false);
                    },
                    400: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                        $('#deleteDiscountConfirm').modal('hide');
                        document.getElementById("cmdConfirmDeleteDiscount").innerHTML = '<i class="fa fa-trash"></i> Delete';
                        $('#cmdConfirmDeleteDiscount').prop('disabled', false);
                        $('#cmdConfirmDeleteCloseButtonDiscount').prop('disabled', false);
                    },
                    500: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                        $('#deleteDiscountConfirm').modal('hide');
                        document.getElementById("cmdConfirmDeleteDiscount").innerHTML = '<i class="fa fa-trash"></i> Delete';
                        $('#cmdConfirmDeleteDiscount').prop('disabled', false);
                        $('#cmdConfirmDeleteCloseButtonDiscount').prop('disabled', false);
                    }
                }
            });
        }

        // ========
        // Discount
        // ========
        function discountTab() {
            discounts = new wijmo.collections.CollectionView(getDiscount());
            discounts.canFilter = true;
            discounts.pageSize = 15;

            var filterTextDiscount = '';
            $('#InputFilterDiscount').keyup(function () {
                filterTextDiscount = this.value.toLowerCase();
                discounts.refresh();
            });
            discounts.filter = function (item) {
                return !filterTextDiscount || (item.Discount.toLowerCase().indexOf(filterTextDiscount) > -1)
                || (item.Account.toLowerCase().indexOf(filterTextDiscount) > -1);
            }
            discounts.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsDiscount();
            });
            discounts.currentChanged.addHandler(function (sender, args) {
                updateDetailsDiscount();
            });

            // Flex Grid for Discount
            discountGrid = new wijmo.grid.FlexGrid('#DiscountGrid');
            discountGrid.initialize({
                columns: [
                            @{
                                if (canEdit)
                                {
                                    <text>
                                        {
                                            "header": "Edit",
                                            "binding": "EditId",
                                            "width": 70,
                                            "align": "center",
                                            "allowResizing": false,
                                            "allowSorting": false,
                                            "isContentHtml": true
                                        },
                                    </text>
                                }
                                if (canDelete)
                                {
                                    <text>
                                        {
                                            "header": "Delete",
                                            "binding": "DeleteId",
                                            "width": 70,
                                            "align": "center",
                                            "allowResizing": false,
                                            "allowSorting": false,
                                            "isContentHtml": true
                                        },
                                    </text>
                                }
                            }
                            {
                                "header": "Discount",
                                "binding": "Discount",
                                "allowSorting": true,
                                "width": "3*"
                            },
                            {
                                "header": "Rate.",
                                "binding": "DiscountRateDisplay",
                                "allowSorting": true,
                                "align": "right",
                                "width": "1*"
                            },
                            {
                                "header": "I",
                                "binding": "IsInclusive",
                                "allowSorting": true,
                                "width": 50
                            },
                            {
                                "header": "Account",
                                "binding": "Account",
                                "allowSorting": true,
                                "width": "3*"
                            }
                ],
                autoGenerateColumns: false,
                itemsSource: discounts,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            discountGrid.trackChanges = true;

            //Navigation button for discount
            btnFirstPageGridDiscount = document.getElementById('btnMoveToFirstPageGridDiscount');
            btnPreviousPageGridDiscount = document.getElementById('btnMoveToPreviousPageGridDiscount');
            btnNextPageGridDiscount = document.getElementById('btnMoveToNextPageGridDiscount');
            btnLastPageGridDiscount = document.getElementById('btnMoveToLastPageGridDiscount');
            btnCurrentPageGridDiscount = document.getElementById('btnCurrentPageGridDiscount');

            updateNavigateButtonsDiscount();

            btnFirstPageGridDiscount.addEventListener('click', function () {
                discounts.moveToFirstPage();
                updateNavigateButtonsDiscount();
            });
            btnPreviousPageGridDiscount.addEventListener('click', function () {
                discounts.moveToPreviousPage();
                updateNavigateButtonsDiscount();
            });
            btnNextPageGridDiscount.addEventListener('click', function () {
                discounts.moveToNextPage();
                updateNavigateButtonsDiscount();
            });
            btnLastPageGridDiscount.addEventListener('click', function () {
                discounts.moveToLastPage();
                updateNavigateButtonsDiscount();
            });
        }
    </script>

    <!-- ================ -->
    <!-- Pay Type Scripts -->
    <!-- ================ -->
    <script type="text/javascript">
        // =============================
        // Global Variables for Pay Type
        // =============================
        var paytypes;
        var payTypeGrid;
        var btnFirstPageGridPayType;
        var btnPreviousPageGridPayType;
        var btnNextPageGridPayType;
        var btnLastPageGridPayType;
        var btnCurrentPageGridPayType;
        var payTypeId = 0;
        var cboPayTypeAccountCode = new wijmo.input.ComboBox('#cboPayTypeAccountCode');
        var cboPayTypeAccount = new wijmo.input.ComboBox('#cboPayTypeAccount');

        // =================
        // GET Pay Type List
        // =================
        function getPayType() {
            var paytypes = new wijmo.collections.ObservableArray;
            NProgress.start();
            $.ajax({
                url: '/api/payType/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            paytypes.push({
                                EditId: "<button class='btn btn-primary btn-xs btn-block' onclick='btnPayTypeEdit_OnClick()'><i class='fa fa-edit'></i> Edit</button>",
                                DeleteId: "<button class='btn btn-danger btn-xs btn-block' onclick='btnPayTypeDelete_OnClick()'><i class='fa fa-trash'></i> Delete</button>",
                                Id: results[i]["Id"],
                                PayType: results[i]["PayType"],
                                AccountId: results[i]["AccountId"],
                                Account: results[i]["Account"],
                                IsLocked: results[i]["IsLocked"],
                                CreatedBy: results[i]["CreatedBy"],
                                CreatedDateTime: results[i]["CreatedDateTime"],
                                UpdatedBy: results[i]["UpdatedBy"],
                                UpdatedDateTime: results[i]["UpdatedDateTime"]
                            });

                        }
                    }

                    NProgress.done();
                }
            });

            return paytypes;
        }

        // ==========================
        // PayType Delete Lock Button
        // ==========================
        function btnPayTypeDeleteLock_OnClick() {
            $('#deleteRecordLock').modal({
                show: true,
                backdrop: 'static'
            });
        }

        // ===============================
        // FlexGrid Selection for Pay Type
        // ===============================
        function updateDetailsPayType() {
            var item = paytypes.currentItem;
            document.getElementById('createdBy').innerHTML = item.CreatedBy;
            document.getElementById('createdDate').innerHTML = item.CreatedDateTime;
            document.getElementById('updatedBy').innerHTML = item.UpdatedBy;
            document.getElementById('updatedDate').innerHTML = item.UpdatedDateTime;
        }

        // ===============================
        // Navigation Buttons for Pay Type
        // ===============================
        function updateNavigateButtonsPayType() {
            if (paytypes.pageSize <= 0) {
                document.getElementById('navigationPageGridPayType').style.display = 'none';
                return;
            }
            document.getElementById('navigationPageGridPayType').style.display = 'block';
            if (paytypes.pageIndex === 0) {
                btnFirstPageGridPayType.setAttribute('disabled', 'disabled');
                btnPreviousPageGridPayType.setAttribute('disabled', 'disabled');
                btnNextPageGridPayType.removeAttribute('disabled');
                btnLastPageGridPayType.removeAttribute('disabled');
            } else if (paytypes.pageIndex === (paytypes.pageCount - 1)) {
                btnFirstPageGridPayType.removeAttribute('disabled');
                btnPreviousPageGridPayType.removeAttribute('disabled');
                btnLastPageGridPayType.setAttribute('disabled', 'disabled');
                btnNextPageGridPayType.setAttribute('disabled', 'disabled');
            } else {
                btnFirstPageGridPayType.removeAttribute('disabled');
                btnPreviousPageGridPayType.removeAttribute('disabled');
                btnNextPageGridPayType.removeAttribute('disabled');
                btnLastPageGridPayType.removeAttribute('disabled');
            }
            btnCurrentPageGridPayType.innerHTML = (paytypes.pageIndex + 1) + ' / ' + paytypes.pageCount;
        }

        // ================================================
        // Get pay type account list for pay type combo box
        // ================================================
        function getPayTypeAccountForComboBox(accountId) {
            var payTypeAccountsObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/payType/dropdown/list/account',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            payTypeAccountsObservableArray.push({
                                Id: results[i]["Id"],
                                AccountCode: results[i]["AccountCode"],
                                Account: results[i]["Account"]
                            });
                        }
                    }

                    var disabled = true;
                    if (results.length > 0) {
                        disabled = false;
                        $('#cmdSavePayTypeButton').prop('disabled', false);
                    } else {
                        $('#cmdSavePayTypeButton').prop('disabled', true);
                    }

                    cboPayTypeAccountCode.dispose();
                    cboPayTypeAccountCode = new wijmo.input.ComboBox('#cboPayTypeAccountCode', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: payTypeAccountsObservableArray,
                        displayMemberPath: "AccountCode",
                        selectedValuePath: "Id",
                        selectedValue: accountId,
                        onSelectedIndexChanged: function () {
                            cboPayTypeAccount.selectedValue = this.selectedValue;
                        }
                    });

                    cboPayTypeAccount.dispose();
                    cboPayTypeAccount = new wijmo.input.ComboBox('#cboPayTypeAccount', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: payTypeAccountsObservableArray,
                        displayMemberPath: "Account",
                        selectedValuePath: "Id",
                        selectedValue: accountId,
                        onSelectedIndexChanged: function () {
                            cboPayTypeAccountCode.selectedValue = this.selectedValue;
                        }
                    });

                    setTimeout(function () {
                        $("#loadingModalPayType").hide();
                        $("#PayTypeDetailForm").show();
                    }, 500);
                }
            });
        }

        // ================
        // Add new Pay Type
        // ================
        function btnPayTypeAdd_OnClick() {
            $('#payTypeEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $('.requiredPayType').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            $("#loadingModalPayType").show();
            document.getElementById("loadingModalPayType").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#PayTypeDetailForm").hide();

            document.getElementById("cmdSavePayTypeButton").innerHTML = '<i class="fa fa-save"></i> Save';
            $('#cmdSavePayTypeButton').prop('disabled', true);
            $('#cmdPayTypeDetailCloseButton').prop('disabled', false);

            payTypeId = 0;
            document.getElementById('payType_PayType').value = "NA";
            getPayTypeAccountForComboBox(0);

            document.getElementById('payType_PayType').disabled = false;
        }

        // =============
        // Edit Pay Type
        // =============
        function btnPayTypeEdit_OnClick() {
            $('#payTypeEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $('.requiredPayType').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            $("#loadingModalPayType").show();
            document.getElementById("loadingModalPayType").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#PayTypeDetailForm").hide();

            document.getElementById("cmdSavePayTypeButton").innerHTML = '<i class="fa fa-save"></i> Save';
            $('#cmdSavePayTypeButton').prop('disabled', true);
            $('#cmdPayTypeDetailCloseButton').prop('disabled', false);

            paytypes.editItem(paytypes.currentItem);
            var paytype = paytypes.currentEditItem;
            payTypeId = paytype.Id;
            document.getElementById('payType_PayType').value = paytype.PayType ? paytype.PayType : '';
            getPayTypeAccountForComboBox(paytype.AccountId);

            document.getElementById('payType_PayType').disabled = false;
        }

        // =========================
        // Pay Type Entry Validation
        // =========================
        function payTypeEntryValidation() {
            var isValid = true;
            $('.requiredPayType').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                } else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            return isValid;
        }

        // =========================
        // Refresh Pay Type flexgrid
        // =========================
        function refreshPayTypeFlexgrid() {
            paytypes = new wijmo.collections.CollectionView(getPayType());
            paytypes.canFilter = true;
            paytypes.pageSize = 15;

            var filterTextPayType = '';
            $('#InputFilterPayType').keyup(function () {
                filterTextPayType = this.value.toLowerCase();
                paytypes.refresh();
            });
            paytypes.filter = function (item) {
                return !filterTextPayType || (item.PayType.toLowerCase().indexOf(filterTextPayType) > -1);
            }
            paytypes.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsPayType();
            });
            paytypes.currentChanged.addHandler(function (sender, args) {
                updateDetailsPayType();
            });

            payTypeGrid.itemsSource = paytypes;
            payTypeGrid.trackChanges = true;
        }

        // =============
        // Save Pay Type
        // =============
        function btnPayTypeSaveButton_OnClick() {
            var payTypeObject = new Object();
            payTypeObject.PayType = document.getElementById('payType_PayType').value;
            payTypeObject.AccountId = cboPayTypeAccount.selectedValue;
            var payTypeData = JSON.stringify(payTypeObject);

            if (payTypeEntryValidation()) {
                document.getElementById("cmdSavePayTypeButton").innerHTML = '<i class="fa fa-spinner fa-spin"></i> Saving';
                $('#cmdSavePayTypeButton').prop('disabled', true);
                $('#cmdPayTypeDetailCloseButton').prop('disabled', true);

                if (payTypeId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/payType/add',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: payTypeData,
                        statusCode: {
                            200: function () {
                                toastr.success("Save Successful");
                                $('#payTypeEdit').modal('hide');
                                refreshPayTypeFlexgrid();
                            },
                            404: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                                document.getElementById("cmdSavePayTypeButton").innerHTML = '<i class="fa fa-save"></i> Save';
                                $('#cmdSavePayTypeButton').prop('disabled', false);
                                $('#cmdPayTypeDetailCloseButton').prop('disabled', false);
                            },
                            400: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                                document.getElementById("cmdSavePayTypeButton").innerHTML = '<i class="fa fa-save"></i> Save';
                                $('#cmdSavePayTypeButton').prop('disabled', false);
                                $('#cmdPayTypeDetailCloseButton').prop('disabled', false);
                            },
                            500: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                                document.getElementById("cmdSavePayTypeButton").innerHTML = '<i class="fa fa-save"></i> Save';
                                $('#cmdSavePayTypeButton').prop('disabled', false);
                                $('#cmdPayTypeDetailCloseButton').prop('disabled', false);
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/payType/update/' + payTypeId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: payTypeData,
                        statusCode: {
                            200: function () {
                                toastr.success("Update Successful");
                                $('#payTypeEdit').modal('hide');
                                refreshPayTypeFlexgrid();
                            },
                            404: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                                document.getElementById("cmdSavePayTypeButton").innerHTML = '<i class="fa fa-save"></i> Save';
                                $('#cmdSavePayTypeButton').prop('disabled', false);
                                $('#cmdPayTypeDetailCloseButton').prop('disabled', false);
                            },
                            400: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                                document.getElementById("cmdSavePayTypeButton").innerHTML = '<i class="fa fa-save"></i> Save';
                                $('#cmdSavePayTypeButton').prop('disabled', false);
                                $('#cmdPayTypeDetailCloseButton').prop('disabled', false);
                            },
                            500: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                                document.getElementById("cmdSavePayTypeButton").innerHTML = '<i class="fa fa-save"></i> Save';
                                $('#cmdSavePayTypeButton').prop('disabled', false);
                                $('#cmdPayTypeDetailCloseButton').prop('disabled', false);
                            }
                        }
                    });
                }
            } else {
                toastr.error("Invalid entry");
            }
        }

        // ===============
        // DELETE Pay Type
        // ===============
        function btnPayTypeDelete_OnClick() {
            paytypes.editItem(paytypes.currentItem);
            var paytype = paytypes.currentEditItem;

            $('#deletePayTypeConfirm').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById("cmdConfirmDeletePayType").innerHTML = '<i class="fa fa-trash"></i> Delete';
            $('#cmdConfirmDeletePayType').prop('disabled', false);
            $('#cmdConfirmDeleteCloseButtonPayType').prop('disabled', false);
        }

        // Pay Type Confirm Delete Button
        function cmdPayTypeConfirmDeleteButton_OnClick() {
            document.getElementById("cmdConfirmDeletePayType").innerHTML = '<i class="fa fa-spinner fa-spin"></i> Deleting';
            $('#cmdConfirmDeletePayType').prop('disabled', true);
            $('#cmdConfirmDeleteCloseButtonPayType').prop('disabled', true);

            paytypes.editItem(paytypes.currentItem);
            var payTypeId = paytypes.currentEditItem.Id;

            $.ajax({
                url: '/api/payType/delete/' + payTypeId,
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Delete Successful");
                        $('#deletePayTypeConfirm').modal('hide');
                        refreshPayTypeFlexgrid();
                    },
                    404: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                        $('#deletePayTypeConfirm').modal('hide');
                        document.getElementById("cmdConfirmDeletePayType").innerHTML = '<i class="fa fa-trash"></i> Delete';
                        $('#cmdConfirmDeletePayType').prop('disabled', false);
                        $('#cmdConfirmDeleteCloseButtonPayType').prop('disabled', false);
                    },
                    400: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                        $('#deletePayTypeConfirm').modal('hide');
                        document.getElementById("cmdConfirmDeletePayType").innerHTML = '<i class="fa fa-trash"></i> Delete';
                        $('#cmdConfirmDeletePayType').prop('disabled', false);
                        $('#cmdConfirmDeleteCloseButtonPayType').prop('disabled', false);
                    },
                    500: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                        $('#deletePayTypeConfirm').modal('hide');
                        document.getElementById("cmdConfirmDeletePayType").innerHTML = '<i class="fa fa-trash"></i> Delete';
                        $('#cmdConfirmDeletePayType').prop('disabled', false);
                        $('#cmdConfirmDeleteCloseButtonPayType').prop('disabled', false);
                    }
                }
            });
        }

        // ========
        // Pay Type
        // ========
        function payTypeTab() {
            paytypes = new wijmo.collections.CollectionView(getPayType());
            paytypes.canFilter = true;
            paytypes.pageSize = 15;

            var filterTextPayType = '';
            $('#InputFilterPayType').keyup(function () {
                filterTextPayType = this.value.toLowerCase();
                paytypes.refresh();
            });
            paytypes.filter = function (item) {
                return !filterTextPayType || (item.PayType.toLowerCase().indexOf(filterTextPayType) > -1);
            }
            paytypes.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsPayType();
            });
            paytypes.currentChanged.addHandler(function (sender, args) {
                updateDetailsPayType();
            });

            // Flex Grid for Pay Type
            payTypeGrid = new wijmo.grid.FlexGrid('#PayTypeGrid');
            payTypeGrid.initialize({
                columns: [
                            @{
                                if (canEdit)
                                {
                                    <text>
                                        {
                                            "header": "Edit",
                                            "binding": "EditId",
                                            "width": 70,
                                            "align": "center",
                                            "allowResizing": false,
                                            "allowSorting": false,
                                            "isContentHtml": true
                                        },
                                    </text>
                                }
                                if (canDelete)
                                {
                                    <text>
                                        {
                                            "header": "Delete",
                                            "binding": "DeleteId",
                                            "width": 70,
                                            "align": "center",
                                            "allowResizing": false,
                                            "allowSorting": false,
                                            "isContentHtml": true
                                        },
                                    </text>
                                }
                            }
                            {
                                "header": "Pay Type",
                                "binding": "PayType",
                                "allowSorting": true,
                                "width": "3*"
                            },
                            {
                                "header": "Account",
                                "binding": "Account",
                                "allowSorting": true,
                                "width": "3*"
                            }
                ],
                autoGenerateColumns: false,
                itemsSource: paytypes,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            payTypeGrid.trackChanges = true;

            //Navigation button for Pay Type
            btnFirstPageGridPayType = document.getElementById('btnMoveToFirstPageGridPayType');
            btnPreviousPageGridPayType = document.getElementById('btnMoveToPreviousPageGridPayType');
            btnNextPageGridPayType = document.getElementById('btnMoveToNextPageGridPayType');
            btnLastPageGridPayType = document.getElementById('btnMoveToLastPageGridPayType');
            btnCurrentPageGridPayType = document.getElementById('btnCurrentPageGridPayType');

            updateNavigateButtonsPayType();

            btnFirstPageGridPayType.addEventListener('click', function () {
                paytypes.moveToFirstPage();
                updateNavigateButtonsPayType();
            });
            btnPreviousPageGridPayType.addEventListener('click', function () {
                paytypes.moveToPreviousPage();
                updateNavigateButtonsPayType();
            });
            btnNextPageGridPayType.addEventListener('click', function () {
                paytypes.moveToNextPage();
                updateNavigateButtonsPayType();
            });
            btnLastPageGridPayType.addEventListener('click', function () {
                paytypes.moveToLastPage();
                updateNavigateButtonsPayType();
            });
        }
    </script>

    <!-- =========== -->
    <!-- Tax Scripts -->
    <!-- =========== -->
    <script type="text/javascript">
        // ========================
        // Global Variables for Tax
        // ========================
        var taxes;
        var taxGrid;
        var btnFirstPageGridTax;
        var btnPreviousPageGridTax;
        var btnNextPageGridTax;
        var btnLastPageGridTax;
        var btnCurrentPageGridTax;

        var taxTypeId = 0;
        var cboTaxTypeAccountCode = new wijmo.input.ComboBox('#cboTaxTypeAccountCode');
        var cboTaxTypeAccount = new wijmo.input.ComboBox('#cboTaxTypeAccount');

        // ============
        // GET Tax List
        // ============
        function getTax() {
            var taxes = new wijmo.collections.ObservableArray;
            NProgress.start();
            $.ajax({
                url: '/api/taxType/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            taxes.push({
                                EditId: "<button class='btn btn-primary btn-xs btn-block' onclick='btnTaxEdit_OnClick()'><i class='fa fa-edit'></i> Edit</button>",
                                DeleteId: "<button class='btn btn-danger btn-xs btn-block' onclick='btnTaxDelete_OnClick()'><i class='fa fa-trash'></i> Delete</button>",
                                Id: results[i]["Id"],
                                TaxType: results[i]["TaxType"],
                                TaxRate: results[i]["TaxRate"],
                                TaxRateDisplay: parseFloat(results[i]["TaxRate"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                IsInclusive: results[i]["IsInclusive"],
                                AccountId: results[i]["AccountId"],
                                Account: results[i]["Account"],
                                IsLocked: results[i]["IsLocked"],
                                CreatedBy: results[i]["CreatedBy"],
                                CreatedDateTime: results[i]["CreatedDateTime"],
                                UpdatedBy: results[i]["UpdatedBy"],
                                UpdatedDateTime: results[i]["UpdatedDateTime"]
                            });
                        }
                    }

                    NProgress.done();
                }
            });

            return taxes;
        }

        // ======================
        // Tax Delete Lock Button
        // ======================
        function btnTaxDeleteLock_OnClick() {
            $('#deleteRecordLock').modal({
                show: true,
                backdrop: 'static'
            });
        }

        // ==========================
        // FlexGrid Selection for Tax
        // ==========================
        function updateDetailsTax() {
            var item = taxes.currentItem;
            document.getElementById('createdBy').innerHTML = item.CreatedBy;
            document.getElementById('createdDate').innerHTML = item.CreatedDateTime;
            document.getElementById('updatedBy').innerHTML = item.UpdatedBy;
            document.getElementById('updatedDate').innerHTML = item.UpdatedDateTime;
        }

        // ===============================
        // Navigation Buttons for Tax type
        // ===============================
        function updateNavigateButtonsTax() {
            if (taxes.pageSize <= 0) {
                document.getElementById('navigationPageGridTax').style.display = 'none';
                return;
            }
            document.getElementById('navigationPageGridTax').style.display = 'block';
            if (taxes.pageIndex === 0) {
                btnFirstPageGridTax.setAttribute('disabled', 'disabled');
                btnPreviousPageGridTax.setAttribute('disabled', 'disabled');
                btnNextPageGridTax.removeAttribute('disabled');
                btnLastPageGridTax.removeAttribute('disabled');
            } else if (taxes.pageIndex === (taxes.pageCount - 1)) {
                btnFirstPageGridTax.removeAttribute('disabled');
                btnPreviousPageGridTax.removeAttribute('disabled');
                btnLastPageGridTax.setAttribute('disabled', 'disabled');
                btnNextPageGridTax.setAttribute('disabled', 'disabled');
            } else {
                btnFirstPageGridTax.removeAttribute('disabled');
                btnPreviousPageGridTax.removeAttribute('disabled');
                btnNextPageGridTax.removeAttribute('disabled');
                btnLastPageGridTax.removeAttribute('disabled');
            }
            btnCurrentPageGridTax.innerHTML = (taxes.pageIndex + 1) + ' / ' + taxes.pageCount;
        }

        // =======================================
        // Get Account list for tax type combo box
        // =======================================
        function getTaxAccountForComboBox(accountId) {
            var taxAccountsObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/taxType/dropdown/list/account',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            taxAccountsObservableArray.push({
                                Id: results[i]["Id"],
                                AccountCode: results[i]["AccountCode"],
                                Account: results[i]["Account"]
                            });
                        }
                    }

                    var disabled = true;
                    if (results.length > 0) {
                        disabled = false;
                        $('#cmdSaveTaxTypeButton').prop('disabled', false);
                    } else {
                        $('#cmdSaveTaxTypeButton').prop('disabled', true);
                    }

                    cboTaxTypeAccountCode.dispose();
                    cboTaxTypeAccountCode = new wijmo.input.ComboBox('#cboTaxTypeAccountCode', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: taxAccountsObservableArray,
                        displayMemberPath: "AccountCode",
                        selectedValuePath: "Id",
                        selectedValue: accountId,
                        onSelectedIndexChanged: function () {
                            cboTaxTypeAccount.selectedValue = this.selectedValue;
                        }
                    });

                    cboTaxTypeAccount.dispose();
                    cboTaxTypeAccount = new wijmo.input.ComboBox('#cboTaxTypeAccount', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: taxAccountsObservableArray,
                        displayMemberPath: "Account",
                        selectedValuePath: "Id",
                        selectedValue: accountId,
                        onSelectedIndexChanged: function () {
                            cboTaxTypeAccountCode.selectedValue = this.selectedValue;
                        }
                    });

                    setTimeout(function () {
                        $("#loadingModalTaxType").hide();
                        $("#TaxDetailForm").show();
                    }, 500);
                }
            });
        }

        // ================
        // Add new Tax type
        // ================
        function btnTaxAdd_OnClick() {
            $('#taxEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $('.requiredTaxType').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            $("#loadingModalTaxType").show();
            document.getElementById("loadingModalTaxType").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#TaxDetailForm").hide();

            document.getElementById("cmdSaveTaxTypeButton").innerHTML = '<i class="fa fa-save"></i> Save';
            $('#cmdSaveTaxTypeButton').prop('disabled', true);
            $('#cmdTaxTypeDetailCloseButton').prop('disabled', false);

            taxTypeId = 0;
            document.getElementById('taxType_TaxType').value = "NA";
            document.getElementById('taxType_TaxRate').value = formatDecimalValues(0);
            document.getElementById('taxType_TaxVATInclusive').checked = false;
            getTaxAccountForComboBox(0);

            document.getElementById('taxType_TaxType').disabled = false;
            document.getElementById('taxType_TaxRate').disabled = false;
            document.getElementById('taxType_TaxVATInclusive').disabled = false;
        }

        // ========
        // EDIT Tax
        // ========
        function btnTaxEdit_OnClick() {
            $('#taxEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $('.requiredTaxType').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            $("#loadingModalTaxType").show();
            document.getElementById("loadingModalTaxType").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#TaxDetailForm").hide();

            document.getElementById("cmdSaveTaxTypeButton").innerHTML = '<i class="fa fa-save"></i> Save';
            $('#cmdSaveTaxTypeButton').prop('disabled', true);
            $('#cmdTaxTypeDetailCloseButton').prop('disabled', false);

            taxes.editItem(taxes.currentItem);
            var tax = taxes.currentEditItem;
            taxTypeId = tax.Id;
            document.getElementById('taxType_TaxType').value = tax.TaxType ? tax.TaxType : '';
            document.getElementById('taxType_TaxRate').value = formatDecimalValues(tax.TaxRate);
            document.getElementById('taxType_TaxVATInclusive').checked = tax.IsInclusive ? tax.IsInclusive : '';
            getTaxAccountForComboBox(tax.AccountId);

            document.getElementById('taxType_TaxType').disabled = false;
            document.getElementById('taxType_TaxRate').disabled = false;
            document.getElementById('taxType_TaxVATInclusive').disabled = false;
        }

        // =========================
        // Tax Type Entry Validation
        // =========================
        function taxTypeEntryValidation() {
            var isValid = true;
            $('.requiredTaxType').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                } else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            return isValid;
        }

        // =========================
        // Refresh Tax Type Flexgrid
        // =========================
        function refreshTaxTypeFlexgrid() {
            taxes = new wijmo.collections.CollectionView(getTax());
            taxes.canFilter = true;
            taxes.pageSize = 15;

            var filterTextTax = '';
            $('#InputFilterTax').keyup(function () {
                filterTextTax = this.value.toLowerCase();
                taxes.refresh();
            });
            taxes.filter = function (item) {
                return !filterTextTax || (item.TaxType.toLowerCase().indexOf(filterTextTax) > -1);
            }
            taxes.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsTax();
            });
            taxes.currentChanged.addHandler(function (sender, args) {
                updateDetailsTax();
            });

            taxGrid.itemsSource = taxes;
            taxGrid.trackChanges = true;
        }

        // ========
        // SAVE Tax
        // ========
        function btnTaxTypeSaveButton_OnClick() {
            var taxObject = new Object();
            taxObject.TaxType = document.getElementById('taxType_TaxType').value;
            taxObject.TaxRate = document.getElementById('taxType_TaxRate').value;
            taxObject.IsInclusive = document.getElementById('taxType_TaxVATInclusive').checked;
            taxObject.AccountId = cboTaxTypeAccount.selectedValue;
            var taxData = JSON.stringify(taxObject);

            if (taxTypeEntryValidation()) {
                document.getElementById("cmdSaveTaxTypeButton").innerHTML = '<i class="fa fa-spinner fa-spin"></i> Saving';
                $('#cmdSaveTaxTypeButton').prop('disabled', true);
                $('#cmdTaxTypeDetailCloseButton').prop('disabled', true);

                if (taxTypeId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/taxType/add',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: taxData,
                        statusCode: {
                            200: function () {
                                toastr.success("Save Successful");
                                $('#taxEdit').modal('hide');
                                refreshTaxTypeFlexgrid();
                            },
                            404: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                                document.getElementById("cmdSaveTaxTypeButton").innerHTML = '<i class="fa fa-save"></i> Save';
                                $('#cmdSaveTaxTypeButton').prop('disabled', false);
                                $('#cmdTaxTypeDetailCloseButton').prop('disabled', false);
                            },
                            400: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                                document.getElementById("cmdSaveTaxTypeButton").innerHTML = '<i class="fa fa-save"></i> Save';
                                $('#cmdSaveTaxTypeButton').prop('disabled', false);
                                $('#cmdTaxTypeDetailCloseButton').prop('disabled', false);
                            },
                            500: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                                document.getElementById("cmdSaveTaxTypeButton").innerHTML = '<i class="fa fa-save"></i> Save';
                                $('#cmdSaveTaxTypeButton').prop('disabled', false);
                                $('#cmdTaxTypeDetailCloseButton').prop('disabled', false);
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/taxType/update/' + taxTypeId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: taxData,
                        statusCode: {
                            200: function () {
                                toastr.success("Update Successful");
                                $('#taxEdit').modal('hide');
                                refreshTaxTypeFlexgrid();
                            },
                            404: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                                document.getElementById("cmdSaveTaxTypeButton").innerHTML = '<i class="fa fa-save"></i> Save';
                                $('#cmdSaveTaxTypeButton').prop('disabled', false);
                                $('#cmdTaxTypeDetailCloseButton').prop('disabled', false);
                            },
                            400: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                                document.getElementById("cmdSaveTaxTypeButton").innerHTML = '<i class="fa fa-save"></i> Save';
                                $('#cmdSaveTaxTypeButton').prop('disabled', false);
                                $('#cmdTaxTypeDetailCloseButton').prop('disabled', false);
                            },
                            500: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                                document.getElementById("cmdSaveTaxTypeButton").innerHTML = '<i class="fa fa-save"></i> Save';
                                $('#cmdSaveTaxTypeButton').prop('disabled', false);
                                $('#cmdTaxTypeDetailCloseButton').prop('disabled', false);
                            }
                        }
                    });
                }
            } else {
                toastr.error("Invalid entry");
            }
        }

        // ==========
        // DELETE Tax
        // ==========
        function btnTaxDelete_OnClick() {
            taxes.editItem(taxes.currentItem);
            var tax = taxes.currentEditItem;

            $('#deleteTaxTypeConfirm').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById("cmdConfirmDeleteTaxType").innerHTML = '<i class="fa fa-trash"></i> Delete';
            $('#cmdConfirmDeleteTaxType').prop('disabled', false);
            $('#cmdConfirmDeleteCloseButtonTaxType').prop('disabled', false);
        }

        // Tax Type Confirm Delete Button
        function cmdTaxTypeConfirmDeleteButton_OnClick() {
            document.getElementById("cmdConfirmDeleteTaxType").innerHTML = '<i class="fa fa-spinner fa-spin"></i> Deleting';
            $('#cmdConfirmDeleteTaxType').prop('disabled', true);
            $('#cmdConfirmDeleteCloseButtonTaxType').prop('disabled', true);

            taxes.editItem(taxes.currentItem);
            var taxId = taxes.currentEditItem.Id;

            $.ajax({
                url: '/api/taxType/delete/' + taxId,
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Delete Successful");
                        $('#deleteTaxTypeConfirm').modal('hide');
                        refreshTaxTypeFlexgrid();
                    },
                    404: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                        $('#deleteTaxTypeConfirm').modal('hide');
                        document.getElementById("cmdConfirmDeleteTaxType").innerHTML = '<i class="fa fa-trash"></i> Delete';
                        $('#cmdConfirmDeleteTaxType').prop('disabled', false);
                        $('#cmdConfirmDeleteCloseButtonTaxType').prop('disabled', false);
                    },
                    400: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                        $('#deleteTaxTypeConfirm').modal('hide');
                        document.getElementById("cmdConfirmDeleteTaxType").innerHTML = '<i class="fa fa-trash"></i> Delete';
                        $('#cmdConfirmDeleteTaxType').prop('disabled', false);
                        $('#cmdConfirmDeleteCloseButtonTaxType').prop('disabled', false);
                    },
                    500: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                        $('#deleteTaxTypeConfirm').modal('hide');
                        document.getElementById("cmdConfirmDeleteTaxType").innerHTML = '<i class="fa fa-trash"></i> Delete';
                        $('#cmdConfirmDeleteTaxType').prop('disabled', false);
                        $('#cmdConfirmDeleteCloseButtonTaxType').prop('disabled', false);
                    }
                }
            });
        }

        // ===
        // Tax
        // ===
        function taxTab() {
            taxes = new wijmo.collections.CollectionView(getTax());
            taxes.canFilter = true;
            taxes.pageSize = 15;

            var filterTextTax = '';
            $('#InputFilterTax').keyup(function () {
                filterTextTax = this.value.toLowerCase();
                taxes.refresh();
            });
            taxes.filter = function (item) {
                return !filterTextTax || (item.TaxType.toLowerCase().indexOf(filterTextTax) > -1);
            }
            taxes.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsTax();
            });
            taxes.currentChanged.addHandler(function (sender, args) {
                updateDetailsTax();
            });

            // Flex Grid for Tax
            taxGrid = new wijmo.grid.FlexGrid('#TaxGrid');
            taxGrid.initialize({
                columns: [
                            @{
                                if (canEdit)
                                {
                                    <text>
                                        {
                                            "header": "Edit",
                                            "binding": "EditId",
                                            "width": 70,
                                            "align": "center",
                                            "allowResizing": false,
                                            "allowSorting": false,
                                            "isContentHtml": true
                                        },
                                    </text>
                                }
                                if (canDelete)
                                {
                                    <text>
                                        {
                                            "header": "Delete",
                                            "binding": "DeleteId",
                                            "width": 70,
                                            "align": "center",
                                            "allowResizing": false,
                                            "allowSorting": false,
                                            "isContentHtml": true
                                        },
                                    </text>
                                }
                            }
                            {
                                "header": "Tax Type",
                                "binding": "TaxType",
                                "allowSorting": true,
                                "width": "3*"
                            },
                            {
                                "header": "Rate",
                                "binding": "TaxRateDisplay",
                                "allowSorting": true,
                                "align": "right",
                                "width": "1*"
                            },
                            {
                                "header": "I",
                                "binding": "IsInclusive",
                                "allowSorting": true,
                                "width": 50
                            },
                            {
                                "header": "Account",
                                "binding": "Account",
                                "allowSorting": true,
                                "width": "3*"
                            }
                ],
                autoGenerateColumns: false,
                itemsSource: taxes,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            taxGrid.trackChanges = true;

            //Navigation button for Tax
            btnFirstPageGridTax = document.getElementById('btnMoveToFirstPageGridTax');
            btnPreviousPageGridTax = document.getElementById('btnMoveToPreviousPageGridTax');
            btnNextPageGridTax = document.getElementById('btnMoveToNextPageGridTax');
            btnLastPageGridTax = document.getElementById('btnMoveToLastPageGridTax');
            btnCurrentPageGridTax = document.getElementById('btnCurrentPageGridTax');

            updateNavigateButtonsTax();

            btnFirstPageGridTax.addEventListener('click', function () {
                taxes.moveToFirstPage();
                updateNavigateButtonsTax();
            });
            btnPreviousPageGridTax.addEventListener('click', function () {
                taxes.moveToPreviousPage();
                updateNavigateButtonsTax();
            });
            btnNextPageGridTax.addEventListener('click', function () {
                taxes.moveToNextPage();
                updateNavigateButtonsTax();
            });
            btnLastPageGridTax.addEventListener('click', function () {
                taxes.moveToLastPage();
                updateNavigateButtonsTax();
            });
        }
    </script>

    <!-- ============ -->
    <!-- Unit Scripts -->
    <!-- ============ -->
    <script type="text/javascript">
        // =========================
        // Global Variables for Unit
        // =========================
        var units;
        var unitGrid;
        var btnFirstPageGridUnit;
        var btnPreviousPageGridUnit;
        var btnNextPageGridUnit;
        var btnLastPageGridUnit;
        var btnCurrentPageGridUnit;
        var unitId = 0;

        // =============
        // GET Unit List
        // =============
        function getUnit() {
            var units = new wijmo.collections.ObservableArray;
            NProgress.start();
            $.ajax({
                url: '/api/unit/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            units.push({
                                EditId: "<button class='btn btn-primary btn-xs btn-block' onclick='btnEditUnit_OnClick()'><i class='fa fa-edit'></i> Edit</button>",
                                DeleteId: "<button class='btn btn-danger btn-xs btn-block' onclick='btnDeletetUnit_OnClick()'><i class='fa fa-trash'></i> Delete</button>",
                                Id: results[i]["Id"],
                                Unit: results[i]["Unit"],
                                IsLocked: results[i]["IsLocked"],
                                CreatedBy: results[i]["CreatedBy"],
                                CreatedDateTime: results[i]["CreatedDateTime"],
                                UpdatedBy: results[i]["UpdatedBy"],
                                UpdatedDateTime: results[i]["UpdatedDateTime"]
                            });
                        }
                    }

                    NProgress.done();
                }
            });

            return units;
        }

        // ===========================
        // FlexGrid Selection for Unit
        // ===========================
        function updateDetailsUnit() {
            var item = units.currentItem;
            document.getElementById('createdBy').innerHTML = item.CreatedBy;
            document.getElementById('createdDate').innerHTML = item.CreatedDateTime;
            document.getElementById('updatedBy').innerHTML = item.UpdatedBy;
            document.getElementById('updatedDate').innerHTML = item.UpdatedDateTime;
        }

        // ===========================
        // Navigation Buttons for Unit
        // ===========================
        function updateNavigateButtonsUnit() {
            if (units.pageSize <= 0) {
                document.getElementById('navigationPageGridUnit').style.display = 'none';
                return;
            }
            document.getElementById('navigationPageGridUnit').style.display = 'block';
            if (units.pageIndex === 0) {
                btnFirstPageGridUnit.setAttribute('disabled', 'disabled');
                btnPreviousPageGridUnit.setAttribute('disabled', 'disabled');
                btnNextPageGridUnit.removeAttribute('disabled');
                btnLastPageGridUnit.removeAttribute('disabled');
            } else if (units.pageIndex === (units.pageCount - 1)) {
                btnFirstPageGridUnit.removeAttribute('disabled');
                btnPreviousPageGridUnit.removeAttribute('disabled');
                btnLastPageGridUnit.setAttribute('disabled', 'disabled');
                btnNextPageGridUnit.setAttribute('disabled', 'disabled');
            } else {
                btnFirstPageGridUnit.removeAttribute('disabled');
                btnPreviousPageGridUnit.removeAttribute('disabled');
                btnNextPageGridUnit.removeAttribute('disabled');
                btnLastPageGridUnit.removeAttribute('disabled');
            }
            btnCurrentPageGridUnit.innerHTML = (units.pageIndex + 1) + ' / ' + units.pageCount;
        }

        // ============
        // Add new Unit
        // ============
        function btnUnitAdd_OnClick() {
            $('#unitEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $('.requiredUnit').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            $("#loadingModalUnit").show();
            document.getElementById("loadingModalUnit").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#UnitDetailForm").hide();

            document.getElementById("cmdSaveUnitButton").innerHTML = '<i class="fa fa-save"></i> Save';
            $('#cmdSaveUnitButton').prop('disabled', true);
            $('#cmdUnitDetailCloseButton').prop('disabled', false);

            unitId = 0;
            document.getElementById('unit_Unit').value = "NA";

            document.getElementById('unit_Unit').disabled = false;

            setTimeout(function () {
                $("#loadingModalUnit").hide();
                $("#UnitDetailForm").show();
                $('#cmdSaveUnitButton').prop('disabled', false);
            }, 500);
        }

        // =========
        // Edit Unit
        // =========
        function btnEditUnit_OnClick() {
            $('#unitEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $('.requiredUnit').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            $("#loadingModalUnit").show();
            document.getElementById("loadingModalUnit").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#UnitDetailForm").hide();

            document.getElementById("cmdSaveUnitButton").innerHTML = '<i class="fa fa-save"></i> Save';
            $('#cmdSaveUnitButton').prop('disabled', true);
            $('#cmdUnitDetailCloseButton').prop('disabled', false);

            units.editItem(units.currentItem);
            var unit = units.currentEditItem;
            unitId = unit.Id ? unit.Id : '';
            document.getElementById('unit_Unit').value = unit.Unit ? unit.Unit : '';

            setTimeout(function () {
                $("#loadingModalUnit").hide();
                $("#UnitDetailForm").show();
                $('#cmdSaveUnitButton').prop('disabled', false);
            }, 500);
        }

        // =====================
        // Unit Entry Validation
        // =====================
        function unitEntryValidation() {
            var isValid = true;
            $('.requiredUnit').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                } else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            return isValid;
        }

        // =====================
        // Refresh Unit Flexgrid
        // =====================
        function refreshUnitFlexgrid() {
            units = new wijmo.collections.CollectionView(getUnit());
            units.canFilter = true;
            units.pageSize = 15;

            var filterTextUnit = '';
            $('#InputFilterUnit').keyup(function () {
                filterTextUnit = this.value.toLowerCase();
                units.refresh();
            });
            units.filter = function (item) {
                return !filterTextUnit || (item.Unit.toLowerCase().indexOf(filterTextUnit) > -1);
            }
            units.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsUnit();
            });
            units.currentChanged.addHandler(function (sender, args) {
                updateDetailsUnit();
            });

            unitGrid.itemsSource = units;
            unitGrid.trackChanges = true;
        }

        // =========
        // SAVE Unit
        // =========
        function btnUnitSaveButton_OnClick() {
            var unitObject = new Object();
            unitObject.Unit = document.getElementById('unit_Unit').value;
            var unitData = JSON.stringify(unitObject);

            if (unitEntryValidation()) {
                document.getElementById("cmdSaveUnitButton").innerHTML = '<i class="fa fa-spinner fa-spin"></i> Saving';
                $('#cmdSaveUnitButton').prop('disabled', true);
                $('#cmdUnitDetailCloseButton').prop('disabled', true);

                if (unitId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/unit/add',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: unitData,
                        statusCode: {
                            200: function () {
                                toastr.success("Save Successful");
                                $('#unitEdit').modal('hide');
                                refreshUnitFlexgrid();
                            },
                            404: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                                document.getElementById("cmdSaveUnitButton").innerHTML = '<i class="fa fa-save"></i> Save';
                                $('#cmdSaveUnitButton').prop('disabled', false);
                                $('#cmdUnitDetailCloseButton').prop('disabled', false);
                            },
                            400: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                                document.getElementById("cmdSaveUnitButton").innerHTML = '<i class="fa fa-save"></i> Save';
                                $('#cmdSaveUnitButton').prop('disabled', false);
                                $('#cmdUnitDetailCloseButton').prop('disabled', false);
                            },
                            500: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                                document.getElementById("cmdSaveUnitButton").innerHTML = '<i class="fa fa-save"></i> Save';
                                $('#cmdSaveUnitButton').prop('disabled', false);
                                $('#cmdUnitDetailCloseButton').prop('disabled', false);
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/unit/update/' + unitId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: unitData,
                        statusCode: {
                            200: function () {
                                toastr.success("Update Successful");
                                $('#unitEdit').modal('hide');
                                refreshUnitFlexgrid();
                            },
                            404: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                                document.getElementById("cmdSaveUnitButton").innerHTML = '<i class="fa fa-save"></i> Save';
                                $('#cmdSaveUnitButton').prop('disabled', false);
                                $('#cmdUnitDetailCloseButton').prop('disabled', false);
                            },
                            400: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                                document.getElementById("cmdSaveUnitButton").innerHTML = '<i class="fa fa-save"></i> Save';
                                $('#cmdSaveUnitButton').prop('disabled', false);
                                $('#cmdUnitDetailCloseButton').prop('disabled', false);
                            },
                            500: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                                document.getElementById("cmdSaveUnitButton").innerHTML = '<i class="fa fa-save"></i> Save';
                                $('#cmdSaveUnitButton').prop('disabled', false);
                                $('#cmdUnitDetailCloseButton').prop('disabled', false);
                            }
                        }
                    });
                }
            } else {
                toastr.error("Invalid entry");
            }
        }

        // ===========
        // DELETE Unit
        // ===========
        function btnDeletetUnit_OnClick() {
            units.editItem(units.currentItem);
            var unit = units.currentEditItem;

            $('#deleteUnitConfirm').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById("cmdConfirmDeleteUnit").innerHTML = '<i class="fa fa-trash"></i> Delete';
            $('#cmdConfirmDeleteUnit').prop('disabled', false);
            $('#cmdConfirmDeleteCloseButtonUnit').prop('disabled', false);
        }

        // Unit Confirm Delete Button
        function cmdUnitConfirmDeleteButton_OnClick() {
            document.getElementById("cmdConfirmDeleteUnit").innerHTML = '<i class="fa fa-spinner fa-spin"></i> Deleting';
            $('#cmdConfirmDeleteUnit').prop('disabled', true);
            $('#cmdConfirmDeleteCloseButtonUnit').prop('disabled', true);

            units.editItem(units.currentItem);
            var unitId = units.currentEditItem.Id;

            $.ajax({
                url: '/api/unit/delete/' + unitId,
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Delete Successful");
                        $('#deleteUnitConfirm').modal('hide');
                        refreshUnitFlexgrid();
                    },
                    404: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                        $('#deleteUnitConfirm').modal('hide');
                        document.getElementById("cmdConfirmDeleteUnit").innerHTML = '<i class="fa fa-trash"></i> Delete';
                        $('#cmdConfirmDeleteUnit').prop('disabled', false);
                        $('#cmdConfirmDeleteCloseButtonUnit').prop('disabled', false);
                    },
                    400: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                        $('#deleteUnitConfirm').modal('hide');
                        document.getElementById("cmdConfirmDeleteUnit").innerHTML = '<i class="fa fa-trash"></i> Delete';
                        $('#cmdConfirmDeleteUnit').prop('disabled', false);
                        $('#cmdConfirmDeleteCloseButtonUnit').prop('disabled', false);
                    },
                    500: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                        $('#deleteUnitConfirm').modal('hide');
                        document.getElementById("cmdConfirmDeleteUnit").innerHTML = '<i class="fa fa-trash"></i> Delete';
                        $('#cmdConfirmDeleteUnit').prop('disabled', false);
                        $('#cmdConfirmDeleteCloseButtonUnit').prop('disabled', false);
                    }
                }
            });
        }

        // ====
        // Unit
        // ====
        function unitTab() {
            units = new wijmo.collections.CollectionView(getUnit());
            units.canFilter = true;
            units.pageSize = 15;

            var filterTextUnit = '';
            $('#InputFilterUnit').keyup(function () {
                filterTextUnit = this.value.toLowerCase();
                units.refresh();
            });
            units.filter = function (item) {
                return !filterTextUnit || (item.Unit.toLowerCase().indexOf(filterTextUnit) > -1);
            }
            units.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsUnit();
            });
            units.currentChanged.addHandler(function (sender, args) {
                updateDetailsUnit();
            });

            // Flex Grid for Unit
            unitGrid = new wijmo.grid.FlexGrid('#UnitGrid');
            unitGrid.initialize({
                columns: [
                           @{
                                if (canEdit)
                                {
                                    <text>
                                        {
                                            "header": "Edit",
                                            "binding": "EditId",
                                            "width": 70,
                                            "align": "center",
                                            "allowResizing": false,
                                            "allowSorting": false,
                                            "isContentHtml": true
                                        },
                                    </text>
                                }
                                if (canDelete)
                                {
                                    <text>
                                        {
                                            "header": "Delete",
                                            "binding": "DeleteId",
                                            "width": 70,
                                            "align": "center",
                                            "allowResizing": false,
                                            "allowSorting": false,
                                            "isContentHtml": true
                                        },
                                    </text>
                                }
                            }
                            {
                                "header": "Unit",
                                "binding": "Unit",
                                "allowSorting": true,
                                "width": "3*",
                            }
                ],
                autoGenerateColumns: false,
                itemsSource: units,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            unitGrid.trackChanges = true;

            btnFirstPageGridUnit = document.getElementById('btnMoveToFirstPageGridUnit');
            btnPreviousPageGridUnit = document.getElementById('btnMoveToPreviousPageGridUnit');
            btnNextPageGridUnit = document.getElementById('btnMoveToNextPageGridUnit');
            btnLastPageGridUnit = document.getElementById('btnMoveToLastPageGridUnit');
            btnCurrentPageGridUnit = document.getElementById('btnCurrentPageGridUnit');

            updateNavigateButtonsUnit();

            btnFirstPageGridUnit.addEventListener('click', function () {
                units.moveToFirstPage();
                updateNavigateButtonsUnit();
            });

            btnPreviousPageGridUnit.addEventListener('click', function () {
                units.moveToPreviousPage();
                updateNavigateButtonsUnit();
            });

            btnNextPageGridUnit.addEventListener('click', function () {
                units.moveToNextPage();
                updateNavigateButtonsUnit();
            });

            btnLastPageGridUnit.addEventListener('click', function () {
                units.moveToLastPage();
                updateNavigateButtonsUnit();
            });
        }
    </script>

    <!-- ============ -->
    <!-- Term Scripts -->
    <!-- ============ -->
    <script type="text/javascript">
        // =========================
        // Global Variables for Term
        // =========================
        var terms;
        var termGrid;
        var btnFirstPageGridTerm;
        var btnPreviousPageGridTerm;
        var btnNextPageGridTerm;
        var btnLastPageGridTerm;
        var btnCurrentPageGridTerm;
        var termId = 0;

        // =============
        // GET Term List
        // =============
        function getTerm() {
            var terms = new wijmo.collections.ObservableArray;
            NProgress.start();
            $.ajax({
                url: '/api/term/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            terms.push({
                                EditId: "<button class='btn btn-primary btn-xs btn-block' onclick='btnEditTerm_OnClick()'><i class='fa fa-edit'></i> Edit</button>",
                                DeleteId: "<button class='btn btn-danger btn-xs btn-block' onclick='btnDeleteTerm_OnClick()'><i class='fa fa-trash'></i> Delete</button>",
                                Id: results[i]["Id"],
                                Term: results[i]["Term"],
                                NumberOfDays: results[i]["NumberOfDays"],
                                IsLocked: results[i]["IsLocked"],
                                CreatedById: results[i]["CreatedById"],
                                CreatedBy: results[i]["CreatedBy"],
                                CreatedDateTime: results[i]["CreatedDateTime"],
                                UpdatedById: results[i]["UpdatedById"],
                                UpdatedBy: results[i]["UpdatedBy"],
                                UpdatedDateTime: results[i]["UpdatedDateTime"]
                            });

                        }
                    }

                    NProgress.done();
                }
            });

            return terms;
        }

        // ===========================
        // FlexGrid Selection for Term
        // ===========================
        function updateDetailsTerm() {
            var item = terms.currentItem;
            document.getElementById('createdBy').innerHTML = item.CreatedBy;
            document.getElementById('createdDate').innerHTML = item.CreatedDateTime;
            document.getElementById('updatedBy').innerHTML = item.UpdatedBy;
            document.getElementById('updatedDate').innerHTML = item.UpdatedDateTime;
        }

        // ===========================
        // Navigation Buttons for Term
        // ===========================
        function updateNavigateButtonsTerm() {
            if (terms.pageSize <= 0) {
                document.getElementById('navigationPageGridTerm').style.display = 'none';
                return;
            }
            document.getElementById('navigationPageGridTerm').style.display = 'block';
            if (terms.pageIndex === 0) {
                btnFirstPageGridTerm.setAttribute('disabled', 'disabled');
                btnPreviousPageGridTerm.setAttribute('disabled', 'disabled');
                btnNextPageGridTerm.removeAttribute('disabled');
                btnLastPageGridTerm.removeAttribute('disabled');
            } else if (terms.pageIndex === (terms.pageCount - 1)) {
                btnFirstPageGridTerm.removeAttribute('disabled');
                btnPreviousPageGridTerm.removeAttribute('disabled');
                btnLastPageGridTerm.setAttribute('disabled', 'disabled');
                btnNextPageGridTerm.setAttribute('disabled', 'disabled');
            } else {
                btnFirstPageGridTerm.removeAttribute('disabled');
                btnPreviousPageGridTerm.removeAttribute('disabled');
                btnNextPageGridTerm.removeAttribute('disabled');
                btnLastPageGridTerm.removeAttribute('disabled');
            }
            btnCurrentPageGridTerm.innerHTML = (terms.pageIndex + 1) + ' / ' + terms.pageCount;
        }

        // ============
        // Add new Term
        // ============
        function btnTermAdd_OnClick() {
            $('#termEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $('.requiredTerm').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            $("#loadingModalTerm").show();
            document.getElementById("loadingModalTerm").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#TermDetailForm").hide();

            document.getElementById("cmdSaveTermButton").innerHTML = '<i class="fa fa-save"></i> Save';
            $('#cmdSaveTermButton').prop('disabled', true);
            $('#cmdTermDetailCloseButton').prop('disabled', false);

            termId = 0;
            document.getElementById('term_Term').value = "NA";
            document.getElementById('term_NoOfDays').value = "0";

            document.getElementById('term_Term').disabled = false;
            document.getElementById('term_NoOfDays').disabled = false;

            setTimeout(function () {
                $("#loadingModalTerm").hide();
                $("#TermDetailForm").show();
                $('#cmdSaveTermButton').prop('disabled', false);
            }, 500);
        }

        // =========
        // Edit Term
        // =========
        function btnEditTerm_OnClick() {
            terms.editItem(terms.currentItem);
            $('#termEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $('.requiredTerm').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            $("#loadingModalTerm").show();
            document.getElementById("loadingModalTerm").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#TermDetailForm").hide();

            document.getElementById("cmdSaveTermButton").innerHTML = '<i class="fa fa-save"></i> Save';
            $('#cmdSaveTermButton').prop('disabled', true);
            $('#cmdTermDetailCloseButton').prop('disabled', false);

            var term = terms.currentEditItem;
            termId = term.Id;
            document.getElementById('term_Term').value = term.Term ? term.Term : '';
            document.getElementById('term_NoOfDays').value = term.NumberOfDays;

            setTimeout(function () {
                $("#loadingModalTerm").hide();
                $("#TermDetailForm").show();
                $('#cmdSaveTermButton').prop('disabled', false);
            }, 500);
        }

        // =====================
        // Term Entry Validation
        // =====================
        function termEntryValidation() {
            var isValid = true;
            $('.requiredTerm').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                } else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            return isValid;
        }

        // =====================
        // Refresh Term flexgrid
        // =====================
        function refreshTermFlexgrid() {
            terms = new wijmo.collections.CollectionView(getTerm());
            terms.canFilter = true;
            terms.pageSize = 15;

            var filterTextTerm = '';
            $('#InputFilterTerm').keyup(function () {
                filterTextTerm = this.value.toLowerCase();
                terms.refresh();
            });
            terms.filter = function (item) {
                return !filterTextTerm || (item.Term.toLowerCase().indexOf(filterTextTerm) > -1);
            }
            terms.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsTerm();
            });
            terms.currentChanged.addHandler(function (sender, args) {
                updateDetailsTerm();
            });

            termGrid.itemsSource = terms;
            termGrid.trackChanges = true;
        }

        // =========
        // SAVE Term
        // =========
        function btnTermSaveButton_OnClick() {
            var termObject = new Object();
            termObject.Term = document.getElementById('term_Term').value;
            termObject.NumberOfDays = document.getElementById('term_NoOfDays').value;
            var termData = JSON.stringify(termObject);

            if (termEntryValidation()) {
                document.getElementById("cmdSaveTermButton").innerHTML = '<i class="fa fa-spinner fa-spin"></i> Saving';
                $('#cmdSaveTermButton').prop('disabled', true);
                $('#cmdTermDetailCloseButton').prop('disabled', true);

                if (termId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/term/add',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: termData,
                        statusCode: {
                            200: function () {
                                toastr.success("Save Successful");
                                $('#termEdit').modal('hide');
                                refreshTermFlexgrid();
                            },
                            404: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                                document.getElementById("cmdSaveTermButton").innerHTML = '<i class="fa fa-save"></i> Save';
                                $('#cmdSaveTermButton').prop('disabled', false);
                                $('#cmdTermDetailCloseButton').prop('disabled', false);
                            },
                            400: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                                document.getElementById("cmdSaveTermButton").innerHTML = '<i class="fa fa-save"></i> Save';
                                $('#cmdSaveTermButton').prop('disabled', false);
                                $('#cmdTermDetailCloseButton').prop('disabled', false);
                            },
                            500: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                                document.getElementById("cmdSaveTermButton").innerHTML = '<i class="fa fa-save"></i> Save';
                                $('#cmdSaveTermButton').prop('disabled', false);
                                $('#cmdTermDetailCloseButton').prop('disabled', false);
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/term/update/' + termId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: termData,
                        statusCode: {
                            200: function () {
                                toastr.success("Update Successful");
                                $('#termEdit').modal('hide');
                                refreshTermFlexgrid();
                            },
                            404: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                                document.getElementById("cmdSaveTermButton").innerHTML = '<i class="fa fa-save"></i> Save';
                                $('#cmdSaveTermButton').prop('disabled', false);
                                $('#cmdTermDetailCloseButton').prop('disabled', false);
                            },
                            400: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                                document.getElementById("cmdSaveTermButton").innerHTML = '<i class="fa fa-save"></i> Save';
                                $('#cmdSaveTermButton').prop('disabled', false);
                                $('#cmdTermDetailCloseButton').prop('disabled', false);
                            },
                            500: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                                document.getElementById("cmdSaveTermButton").innerHTML = '<i class="fa fa-save"></i> Save';
                                $('#cmdSaveTermButton').prop('disabled', false);
                                $('#cmdTermDetailCloseButton').prop('disabled', false);
                            }
                        }
                    });
                }
            } else {
                toastr.error("Invalid entry");
            }
        }

        // ===========
        // DELETE Term
        // ===========
        function btnDeleteTerm_OnClick() {
            terms.editItem(terms.currentItem);
            var term = terms.currentEditItem;

            $('#deleteTermConfirm').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById("cmdConfirmDeleteTerm").innerHTML = '<i class="fa fa-trash"></i> Delete';
            $('#cmdConfirmDeleteTerm').prop('disabled', false);
            $('#cmdConfirmDeleteCloseButtonTerm').prop('disabled', false);
        }

        // Term Confirm Delete Button
        function cmdTermConfirmDeleteButton_OnClick() {
            document.getElementById("cmdConfirmDeleteTerm").innerHTML = '<i class="fa fa-spinner fa-spin"></i> Deleting';
            $('#cmdConfirmDeleteTerm').prop('disabled', true);
            $('#cmdConfirmDeleteCloseButtonTerm').prop('disabled', true);

            terms.editItem(terms.currentItem);
            var termId = terms.currentEditItem.Id;

            $.ajax({
                url: '/api/term/delete/' + termId,
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Delete Successful");
                        $('#deleteTermConfirm').modal('hide');
                        refreshTermFlexgrid();
                    },
                    404: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                        $('#deleteTermConfirm').modal('hide');
                        document.getElementById("cmdConfirmDeleteTerm").innerHTML = '<i class="fa fa-trash"></i> Delete';
                        $('#cmdConfirmDeleteTerm').prop('disabled', false);
                        $('#cmdConfirmDeleteCloseButtonTerm').prop('disabled', false);
                    },
                    400: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                        $('#deleteTermConfirm').modal('hide');
                        document.getElementById("cmdConfirmDeleteTerm").innerHTML = '<i class="fa fa-trash"></i> Delete';
                        $('#cmdConfirmDeleteTerm').prop('disabled', false);
                        $('#cmdConfirmDeleteCloseButtonTerm').prop('disabled', false);
                    },
                    500: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                        $('#deleteTermConfirm').modal('hide');
                        document.getElementById("cmdConfirmDeleteTerm").innerHTML = '<i class="fa fa-trash"></i> Delete';
                        $('#cmdConfirmDeleteTerm').prop('disabled', false);
                        $('#cmdConfirmDeleteCloseButtonTerm').prop('disabled', false);
                    }
                }
            });
        }

        // ====
        // Term
        // ====
        function termTab() {
            terms = new wijmo.collections.CollectionView(getTerm());
            terms.canFilter = true;
            terms.pageSize = 15;

            var filterTextTerm = '';
            $('#InputFilterTerm').keyup(function () {
                filterTextTerm = this.value.toLowerCase();
                terms.refresh();
            });
            terms.filter = function (item) {
                return !filterTextTerm || (item.Term.toLowerCase().indexOf(filterTextTerm) > -1);
            }
            terms.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsTerm();
            });
            terms.currentChanged.addHandler(function (sender, args) {
                updateDetailsTerm();
            });

            // Flex Grid for Term
            termGrid = new wijmo.grid.FlexGrid('#TermGrid');
            termGrid.initialize({
                columns: [
                           @{
                                if (canEdit)
                                {
                                    <text>
                                        {
                                            "header": "Edit",
                                            "binding": "EditId",
                                            "width": 70,
                                            "align": "center",
                                            "allowResizing": false,
                                            "allowSorting": false,
                                            "isContentHtml": true
                                        },
                                    </text>
                                }
                                if (canDelete)
                                {
                                    <text>
                                        {
                                            "header": "Delete",
                                            "binding": "DeleteId",
                                            "width": 70,
                                            "align": "center",
                                            "allowResizing": false,
                                            "allowSorting": false,
                                            "isContentHtml": true
                                        },
                                    </text>
                                }
                            }
                            {
                                "header": "Term",
                                "binding": "Term",
                                "allowSorting": true,
                                "width": "3*",
                            },
                            {
                                "header": "Days",
                                "binding": "NumberOfDays",
                                "allowSorting": true,
                                "width": "1*"
                            }
                ],
                autoGenerateColumns: false,
                itemsSource: terms,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            termGrid.trackChanges = true;

            //Navigation button for Term
            btnFirstPageGridTerm = document.getElementById('btnMoveToFirstPageGridTerm');
            btnPreviousPageGridTerm = document.getElementById('btnMoveToPreviousPageGridTerm');
            btnNextPageGridTerm = document.getElementById('btnMoveToNextPageGridTerm');
            btnLastPageGridTerm = document.getElementById('btnMoveToLastPageGridTerm');
            btnCurrentPageGridTerm = document.getElementById('btnCurrentPageGridTerm');

            updateNavigateButtonsTerm();

            btnFirstPageGridTerm.addEventListener('click', function () {
                terms.moveToFirstPage();
                updateNavigateButtonsTerm();
            });
            btnPreviousPageGridTerm.addEventListener('click', function () {
                terms.moveToPreviousPage();
                updateNavigateButtonsTerm();
            });
            btnNextPageGridTerm.addEventListener('click', function () {
                terms.moveToNextPage();
                updateNavigateButtonsTerm();
            });
            btnLastPageGridTerm.addEventListener('click', function () {
                terms.moveToLastPage();
                updateNavigateButtonsTerm();
            });
        }
    </script>

    <!-- ===================== -->
    <!-- Article Group Scripts -->
    <!-- ===================== -->
    <script type="text/javascript">
        // ==================================
        // Global Variables for Article Group
        // ==================================
        var articlegroups;
        var articleGroupGrid;

        var articleGroupId = 0;
        var cboArticleType = new wijmo.input.ComboBox('#cboArticleType');
        var cboArticleGroupAccountCode = new wijmo.input.ComboBox('#cboArticleGroupAccountCode');
        var cboArticleGroupSalesAccountCode = new wijmo.input.ComboBox('#cboArticleGroupSalesAccountCode');
        var cboArticleGroupCostAccountCode = new wijmo.input.ComboBox('#cboArticleGroupCostAccountCode');
        var cboArticleGroupAssetAccountCode = new wijmo.input.ComboBox('#cboArticleGroupAssetAccountCode');
        var cboArticleGroupExpenseAccountCode = new wijmo.input.ComboBox('#cboArticleGroupExpenseAccountCode');
        var cboArticleGroupAccount = new wijmo.input.ComboBox('#cboArticleGroupAccount');
        var cboArticleGroupSalesAccount = new wijmo.input.ComboBox('#cboArticleGroupSalesAccount');
        var cboArticleGroupCostAccount = new wijmo.input.ComboBox('#cboArticleGroupCostAccount');
        var cboArticleGroupAssetAccount = new wijmo.input.ComboBox('#cboArticleGroupAssetAccount');
        var cboArticleGroupExpenseAccount = new wijmo.input.ComboBox('#cboArticleGroupExpenseAccount');

        var btnFirstPageArticleGroup;
        var btnPreviousPageGridArticleGroup;
        var btnNextPageGridArticleGroup;
        var btnLastPageGridArticleGroup;
        var btnCurrentPageGridArticleGroup;

        var articleGroupBranchCollectionView;
        var articleGroupBranchFlexGrid = new wijmo.grid.FlexGrid('#articleGroupBranchFlexGrid');
        var articleGroupBranchId = 0;

        var cboArticleGroupBranchCompany = new wijmo.input.ComboBox('#cboArticleGroupBranchCompany');
        var cboArticleGroupBranch = new wijmo.input.ComboBox('#cboArticleGroupBranch');
        var cboArticleGroupBranchAccountCode = new wijmo.input.ComboBox('#cboArticleGroupBranchAccountCode');
        var cboArticleGroupBranchSalesAccountCode = new wijmo.input.ComboBox('#cboArticleGroupBranchSalesAccountCode');
        var cboArticleGroupBranchCostAccountCode = new wijmo.input.ComboBox('#cboArticleGroupBranchCostAccountCode');
        var cboArticleGroupBranchAssetAccountCode = new wijmo.input.ComboBox('#cboArticleGroupBranchAssetAccountCode');
        var cboArticleGroupBranchExpenseAccountCode = new wijmo.input.ComboBox('#cboArticleGroupBranchExpenseAccountCode');
        var cboArticleGroupBranchAccount = new wijmo.input.ComboBox('#cboArticleGroupBranchAccount');
        var cboArticleGroupBranchSalesAccount = new wijmo.input.ComboBox('#cboArticleGroupBranchSalesAccount');
        var cboArticleGroupBranchCostAccount = new wijmo.input.ComboBox('#cboArticleGroupBranchCostAccount');
        var cboArticleGroupBranchAssetAccount = new wijmo.input.ComboBox('#cboArticleGroupBranchAssetAccount');
        var cboArticleGroupBranchExpenseAccount = new wijmo.input.ComboBox('#cboArticleGroupBranchExpenseAccount');

        // ======================
        // GET Article Group List
        // ======================
        function getArticleGroup() {
            var articlegroups = new wijmo.collections.ObservableArray;
            NProgress.start();
            $.ajax({
                url: '/api/articleGroup/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            articlegroups.push({
                                EditId: "<button class='btn btn-primary btn-xs btn-block' onclick='btnEditArticleGroup_OnClick()'><i class='fa fa-edit'></i> Edit</button>",
                                DeleteId: "<button class='btn btn-danger btn-xs btn-block' onclick='btnDeleteArticleGroup_OnClick()'><i class='fa fa-trash'></i> Delete</button>",
                                Id: results[i]["Id"],
                                ArticleGroup: results[i]["ArticleGroup"],
                                ArticleTypeId: results[i]["ArticleTypeId"],
                                ArticleType: results[i]["ArticleType"],
                                AccountId: results[i]["AccountId"],
                                Account: results[i]["Account"],
                                SalesAccountId: results[i]["SalesAccountId"],
                                SalesAccount: results[i]["SalesAccount"],
                                CostAccountId: results[i]["CostAccountId"],
                                CostAccount: results[i]["CostAccount"],
                                AssetAccountId: results[i]["AssetAccountId"],
                                AssetAccount: results[i]["AssetAccount"],
                                ExpenseAccountId: results[i]["ExpenseAccountId"],
                                ExpenseAccount: results[i]["ExpenseAccount"],
                                IsLocked: results[i]["IsLocked"],
                                CreatedById: results[i]["CreatedById"],
                                CreatedBy: results[i]["CreatedBy"],
                                CreatedDateTime: results[i]["CreatedDateTime"],
                                UpdatedById: results[i]["UpdatedById"],
                                UpdatedBy: results[i]["UpdatedBy"],
                                UpdatedDateTime: results[i]["UpdatedDateTime"]
                            });

                        }
                    }

                    NProgress.done();
                }
            });

            return articlegroups;
        }

        // ====================================
        // FlexGrid Selection for Article Group
        // ====================================
        function updateDetailsArticleGroup() {
            var item = articlegroups.currentItem;
            document.getElementById('createdBy').innerHTML = item.CreatedBy;
            document.getElementById('createdDate').innerHTML = item.CreatedDateTime;
            document.getElementById('updatedBy').innerHTML = item.UpdatedBy;
            document.getElementById('updatedDate').innerHTML = item.UpdatedDateTime;
        }

        // ====================================
        // Navigation Buttons for Article Group
        // ====================================
        function updateNavigateButtonsArticleGroup() {
            if (articlegroups.pageSize <= 0) {
                document.getElementById('navigationPageGridArticleGroup').style.display = 'none';
                return;
            }
            document.getElementById('navigationPageGridArticleGroup').style.display = 'block';
            if (articlegroups.pageIndex === 0) {
                btnFirstPageGridArticleGroup.setAttribute('disabled', 'disabled');
                btnPreviousPageGridArticleGroup.setAttribute('disabled', 'disabled');
                btnNextPageGridArticleGroup.removeAttribute('disabled');
                btnLastPageGridArticleGroup.removeAttribute('disabled');
            } else if (articlegroups.pageIndex === (articlegroups.pageCount - 1)) {
                btnFirstPageGridArticleGroup.removeAttribute('disabled');
                btnPreviousPageGridArticleGroup.removeAttribute('disabled');
                btnLastPageGridArticleGroup.setAttribute('disabled', 'disabled');
                btnNextPageGridArticleGroup.setAttribute('disabled', 'disabled');
            } else {
                btnFirstPageGridArticleGroup.removeAttribute('disabled');
                btnPreviousPageGridArticleGroup.removeAttribute('disabled');
                btnNextPageGridArticleGroup.removeAttribute('disabled');
                btnLastPageGridArticleGroup.removeAttribute('disabled');
            }
            btnCurrentPageGridArticleGroup.innerHTML = (articlegroups.pageIndex + 1) + ' / ' + articlegroups.pageCount;
        }

        // ================
        // Get Article Type
        // ================
        function getArticleType(articleTypeId, acccountId, salesAccountId, costAccountId, assetAccountId, expenseAccountId) {
            var articleTypesObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/articleGroup/dropdown/list/articleType',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            articleTypesObservableArray.push({
                                Id: results[i]["Id"],
                                ArticleType: results[i]["ArticleType"]
                            });
                        }
                    }

                    var disabled = true;
                    if (results.length > 0) {
                        disabled = false;
                        $('#cmdSaveArticleGroupButton').prop('disabled', false);
                    } else {
                        $('#cmdSaveArticleGroupButton').prop('disabled', true);
                    }

                    cboArticleType.dispose();
                    cboArticleType = new wijmo.input.ComboBox('#cboArticleType', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: articleTypesObservableArray,
                        displayMemberPath: "ArticleType",
                        selectedValuePath: "Id",
                        selectedValue: articleTypeId
                    });

                    getArticleGroupAccount(acccountId, salesAccountId, costAccountId, assetAccountId, expenseAccountId);
                }
            });
        }

        // ============================================
        // Get Account list for article group combo box
        // ============================================
        function getArticleGroupAccount(acccountId, salesAccountId, costAccountId, assetAccountId, expenseAccountId) {
            var articleGroupAccountsObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/articleGroup/dropdown/list/account',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            articleGroupAccountsObservableArray.push({
                                Id: results[i]["Id"],
                                AccountCode: results[i]["AccountCode"],
                                Account: results[i]["Account"]
                            });
                        }
                    }

                    var disabled = true;
                    if (results.length > 0) {
                        disabled = false;
                    } else {
                        $('#cmdSaveArticleGroupButton').prop('disabled', true);
                    }

                    // =============
                    // Account Codes
                    // =============
                    cboArticleGroupAccountCode.dispose();
                    cboArticleGroupAccountCode = new wijmo.input.ComboBox('#cboArticleGroupAccountCode', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: articleGroupAccountsObservableArray,
                        displayMemberPath: "AccountCode",
                        selectedValuePath: "Id",
                        selectedValue: acccountId,
                        onSelectedIndexChanged: function () {
                            cboArticleGroupAccount.selectedValue = this.selectedValue;
                        }
                    });

                    cboArticleGroupSalesAccountCode.dispose();
                    cboArticleGroupSalesAccountCode = new wijmo.input.ComboBox('#cboArticleGroupSalesAccountCode', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: articleGroupAccountsObservableArray,
                        displayMemberPath: "AccountCode",
                        selectedValuePath: "Id",
                        selectedValue: salesAccountId,
                        onSelectedIndexChanged: function () {
                            cboArticleGroupSalesAccount.selectedValue = this.selectedValue;
                        }
                    });

                    cboArticleGroupCostAccountCode.dispose();
                    cboArticleGroupCostAccountCode = new wijmo.input.ComboBox('#cboArticleGroupCostAccountCode', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: articleGroupAccountsObservableArray,
                        displayMemberPath: "AccountCode",
                        selectedValuePath: "Id",
                        selectedValue: costAccountId,
                        onSelectedIndexChanged: function () {
                            cboArticleGroupCostAccount.selectedValue = this.selectedValue;
                        }
                    });

                    cboArticleGroupAssetAccountCode.dispose();
                    cboArticleGroupAssetAccountCode = new wijmo.input.ComboBox('#cboArticleGroupAssetAccountCode', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: articleGroupAccountsObservableArray,
                        displayMemberPath: "AccountCode",
                        selectedValuePath: "Id",
                        selectedValue: assetAccountId,
                        onSelectedIndexChanged: function () {
                            cboArticleGroupAssetAccount.selectedValue = this.selectedValue;
                        }
                    });

                    cboArticleGroupExpenseAccountCode.dispose();
                    cboArticleGroupExpenseAccountCode = new wijmo.input.ComboBox('#cboArticleGroupExpenseAccountCode', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: articleGroupAccountsObservableArray,
                        displayMemberPath: "AccountCode",
                        selectedValuePath: "Id",
                        selectedValue: expenseAccountId,
                        onSelectedIndexChanged: function () {
                            cboArticleGroupExpenseAccount.selectedValue = this.selectedValue;
                        }
                    });

                    // =======
                    // Account
                    // =======
                    cboArticleGroupAccount.dispose();
                    cboArticleGroupAccount = new wijmo.input.ComboBox('#cboArticleGroupAccount', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: articleGroupAccountsObservableArray,
                        displayMemberPath: "Account",
                        selectedValuePath: "Id",
                        selectedValue: acccountId,
                        onSelectedIndexChanged: function () {
                            cboArticleGroupAccountCode.selectedValue = this.selectedValue;
                        }
                    });

                    cboArticleGroupSalesAccount.dispose();
                    cboArticleGroupSalesAccount = new wijmo.input.ComboBox('#cboArticleGroupSalesAccount', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: articleGroupAccountsObservableArray,
                        displayMemberPath: "Account",
                        selectedValuePath: "Id",
                        selectedValue: salesAccountId,
                        onSelectedIndexChanged: function () {
                            cboArticleGroupSalesAccountCode.selectedValue = this.selectedValue;
                        }
                    });

                    cboArticleGroupCostAccount.dispose();
                    cboArticleGroupCostAccount = new wijmo.input.ComboBox('#cboArticleGroupCostAccount', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: articleGroupAccountsObservableArray,
                        displayMemberPath: "Account",
                        selectedValuePath: "Id",
                        selectedValue: costAccountId,
                        onSelectedIndexChanged: function () {
                            cboArticleGroupCostAccountCode.selectedValue = this.selectedValue;
                        }
                    });

                    cboArticleGroupAssetAccount.dispose();
                    cboArticleGroupAssetAccount = new wijmo.input.ComboBox('#cboArticleGroupAssetAccount', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: articleGroupAccountsObservableArray,
                        displayMemberPath: "Account",
                        selectedValuePath: "Id",
                        selectedValue: assetAccountId,
                        onSelectedIndexChanged: function () {
                            cboArticleGroupAssetAccountCode.selectedValue = this.selectedValue;
                        }
                    });

                    cboArticleGroupExpenseAccount.dispose();
                    cboArticleGroupExpenseAccount = new wijmo.input.ComboBox('#cboArticleGroupExpenseAccount', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: articleGroupAccountsObservableArray,
                        displayMemberPath: "Account",
                        selectedValuePath: "Id",
                        selectedValue: expenseAccountId,
                        onSelectedIndexChanged: function () {
                            cboArticleGroupExpenseAccountCode.selectedValue = this.selectedValue;
                        }
                    });

                    setTimeout(function () {
                        $("#loadingModalArticleGroup").hide();
                        $("#articleGroupDetailForm").show();
                    }, 500);
                }
            });
        }

        // =================
        // Add Article Group
        // =================
        function btnAddArtileGroup_OnClick() {
            $('#articleGroupEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $('.requiredArticleGroup').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            $("#loadingModalArticleGroup").show();
            document.getElementById("loadingModalArticleGroup").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#articleGroupDetailForm").hide();

            document.getElementById("cmdSaveArticleGroupButton").innerHTML = '<i class="fa fa-save"></i> Save';
            $('#cmdSaveArticleGroupButton').prop('disabled', true);
            $('#cmdArticleGroupDetailCloseButton').prop('disabled', false);

            articleGroupId = 0;
            document.getElementById('articleGroup_ArticleGroup').value = "NA";
            getArticleType(0, 0, 0, 0, 0, 0);

            document.getElementById('articleGroup_ArticleGroup').disabled = false;

            $('#btnAddArticleGroupBranch').prop('disabled', true);
        }

        // ==================
        // Edit Article Group
        // ==================
        function btnEditArticleGroup_OnClick() {
            $('#articleGroupEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $('.requiredArticleGroup').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            $("#loadingModalArticleGroup").show();
            document.getElementById("loadingModalArticleGroup").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#articleGroupDetailForm").hide();

            document.getElementById("cmdSaveArticleGroupButton").innerHTML = '<i class="fa fa-save"></i> Save';
            $('#cmdSaveArticleGroupButton').prop('disabled', true);
            $('#cmdArticleGroupDetailCloseButton').prop('disabled', false);

            articlegroups.editItem(articlegroups.currentItem);
            var articlegroup = articlegroups.currentEditItem;
            articleGroupId = articlegroup.Id;
            document.getElementById('articleGroup_ArticleGroup').value = articlegroup.ArticleGroup;
            getArticleType(articlegroup.ArticleTypeId, articlegroup.AccountId, articlegroup.SalesAccountId, articlegroup.CostAccountId, articlegroup.AssetAccountId, articlegroup.ExpenseAccountId);

            $("#loadingArticleGroupBranch").show();
            document.getElementById("loadingArticleGroupBranch").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#articleGroupBranchFlexGridDetail").hide();

            setTimeout(function () {
                createArticleGroupBranchFlexGrid();
            }, 500);
        }

        // ==============================
        // Article Group Entry Validation
        // ==============================
        function articleGroupEntryValidation() {
            var isValid = true;
            $('.requiredArticleGroup').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                } else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            return isValid;
        }

        // ==============================
        // Refresh Article Group Flexgrid
        // ==============================
        function refreshArticleGroupFlexgrid() {
            articlegroups = new wijmo.collections.CollectionView(getArticleGroup());
            articlegroups.canFilter = true;
            articlegroups.pageSize = 15;

            var filterTextArticleGroup = '';
            $('#InputFilterArticleGroup').keyup(function () {
                filterTextArticleGroup = this.value.toLowerCase();
                articlegroups.refresh();
            });
            articlegroups.filter = function (item) {
                return !filterTextArticleGroup || (item.ArticleGroup.toLowerCase().indexOf(filterTextArticleGroup) > -1);
            }
            articlegroups.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsArticleGroup();
            });
            articlegroups.currentChanged.addHandler(function (sender, args) {
                updateDetailsArticleGroup();
            });

            articleGroupGrid.itemsSource = articlegroups;
            articleGroupGrid.trackChanges = true;
        }

        // ==================
        // SAVE Article Group
        // ==================
        function btnArticleGroupSaveButton_OnClick() {
            var articleGroupObject = new Object();
            articleGroupObject.ArticleGroup = document.getElementById('articleGroup_ArticleGroup').value;
            articleGroupObject.ArticleTypeId = cboArticleType.selectedValue;
            articleGroupObject.AccountId = cboArticleGroupAccount.selectedValue;
            articleGroupObject.SalesAccountId = cboArticleGroupSalesAccount.selectedValue;
            articleGroupObject.CostAccountId = cboArticleGroupCostAccount.selectedValue;
            articleGroupObject.AssetAccountId = cboArticleGroupAssetAccount.selectedValue;
            articleGroupObject.ExpenseAccountId = cboArticleGroupExpenseAccount.selectedValue;
            var articleGroupData = JSON.stringify(articleGroupObject);

            if (articleGroupEntryValidation()) {
                document.getElementById("cmdSaveArticleGroupButton").innerHTML = '<i class="fa fa-spinner fa-spin"></i> Saving';
                $('#cmdSaveArticleGroupButton').prop('disabled', true);
                $('#cmdArticleGroupDetailCloseButton').prop('disabled', true);

                if (articleGroupId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/articleGroup/add',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: articleGroupData,
                        statusCode: {
                            200: function () {
                                toastr.success("Save Successful");
                                $('#articleGroupEdit').modal('hide');
                                refreshArticleGroupFlexgrid();
                            },
                            404: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                                document.getElementById("cmdSaveArticleGroupButton").innerHTML = '<i class="fa fa-save"></i> Save';
                                $('#cmdSaveArticleGroupButton').prop('disabled', false);
                                $('#cmdArticleGroupDetailCloseButton').prop('disabled', false);
                            },
                            400: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                                document.getElementById("cmdSaveArticleGroupButton").innerHTML = '<i class="fa fa-save"></i> Save';
                                $('#cmdSaveArticleGroupButton').prop('disabled', false);
                                $('#cmdArticleGroupDetailCloseButton').prop('disabled', false);
                            },
                            500: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                                document.getElementById("cmdSaveArticleGroupButton").innerHTML = '<i class="fa fa-save"></i> Save';
                                $('#cmdSaveArticleGroupButton').prop('disabled', false);
                                $('#cmdArticleGroupDetailCloseButton').prop('disabled', false);
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/articleGroup/update/' + articleGroupId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: articleGroupData,
                        statusCode: {
                            200: function () {
                                toastr.success("Update Successful");
                                $('#articleGroupEdit').modal('hide');
                                refreshArticleGroupFlexgrid();
                            },
                            404: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                                document.getElementById("cmdSaveArticleGroupButton").innerHTML = '<i class="fa fa-save"></i> Save';
                                $('#cmdSaveArticleGroupButton').prop('disabled', false);
                                $('#cmdArticleGroupDetailCloseButton').prop('disabled', false);
                            },
                            400: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                                document.getElementById("cmdSaveArticleGroupButton").innerHTML = '<i class="fa fa-save"></i> Save';
                                $('#cmdSaveArticleGroupButton').prop('disabled', false);
                                $('#cmdArticleGroupDetailCloseButton').prop('disabled', false);
                            },
                            500: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                                document.getElementById("cmdSaveArticleGroupButton").innerHTML = '<i class="fa fa-save"></i> Save';
                                $('#cmdSaveArticleGroupButton').prop('disabled', false);
                                $('#cmdArticleGroupDetailCloseButton').prop('disabled', false);
                            }
                        }
                    });
                }
            } else {
                toastr.error("Invalid entry");
            }
        }

        // ====================
        // DELETE Article Group
        // ====================
        function btnDeleteArticleGroup_OnClick() {
            articlegroups.editItem(articlegroups.currentItem);
            var articlegroup = articlegroups.currentEditItem;

            $('#deleteArticleGroupConfirm').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById("cmdConfirmDeleteArticleGroup").innerHTML = '<i class="fa fa-trash"></i> Delete';
            $('#cmdConfirmDeleteArticleGroup').prop('disabled', false);
            $('#cmdConfirmDeleteCloseButtonArticleGroup').prop('disabled', false);
        }

        // Article Group Confirm Delete Button
        function cmdArticleGroupConfirmDeleteButton_OnClick() {
            document.getElementById("cmdConfirmDeleteArticleGroup").innerHTML = '<i class="fa fa-spinner fa-spin"></i> Deleting';
            $('#cmdConfirmDeleteArticleGroup').prop('disabled', true);
            $('#cmdConfirmDeleteCloseButtonArticleGroup').prop('disabled', true);

            articlegroups.editItem(articlegroups.currentItem);
            var articleGroupId = articlegroups.currentEditItem.Id;

            $.ajax({
                url: '/api/articleGroup/delete/' + articleGroupId,
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Delete Successful");
                        $('#deleteArticleGroupConfirm').modal('hide');
                        refreshArticleGroupFlexgrid();
                    },
                    404: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                        $('#deleteArticleGroupConfirm').modal('hide');
                        document.getElementById("cmdConfirmDeleteArticleGroup").innerHTML = '<i class="fa fa-trash"></i> Delete';
                        $('#cmdConfirmDeleteArticleGroup').prop('disabled', false);
                        $('#cmdConfirmDeleteCloseButtonArticleGroup').prop('disabled', false);
                    },
                    400: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                        $('#deleteArticleGroupConfirm').modal('hide');
                        document.getElementById("cmdConfirmDeleteArticleGroup").innerHTML = '<i class="fa fa-trash"></i> Delete';
                        $('#cmdConfirmDeleteArticleGroup').prop('disabled', false);
                        $('#cmdConfirmDeleteCloseButtonArticleGroup').prop('disabled', false);
                    },
                    500: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                        $('#deleteArticleGroupConfirm').modal('hide');
                        document.getElementById("cmdConfirmDeleteArticleGroup").innerHTML = '<i class="fa fa-trash"></i> Delete';
                        $('#cmdConfirmDeleteArticleGroup').prop('disabled', false);
                        $('#cmdConfirmDeleteCloseButtonArticleGroup').prop('disabled', false);
                    }
                }
            });
        }

        // =============
        // Article Group
        // =============
        function articleGroupTab() {
            articlegroups = new wijmo.collections.CollectionView(getArticleGroup());
            articlegroups.canFilter = true;
            articlegroups.pageSize = 15;

            var filterTextArticleGroup = '';
            $('#InputFilterArticleGroup').keyup(function () {
                filterTextArticleGroup = this.value.toLowerCase();
                articlegroups.refresh();
            });
            articlegroups.filter = function (item) {
                return !filterTextArticleGroup || (item.ArticleGroup.toLowerCase().indexOf(filterTextArticleGroup) > -1);
            }
            articlegroups.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsArticleGroup();
            });
            articlegroups.currentChanged.addHandler(function (sender, args) {
                updateDetailsArticleGroup();
            });

            // Flex Grid for Article Group
            articleGroupGrid = new wijmo.grid.FlexGrid('#ArticleGroupGrid');
            articleGroupGrid.initialize({
                columns: [
                            @{
                                if (canEdit)
                                {
                                    <text>
                                        {
                                            "header": "Edit",
                                            "binding": "EditId",
                                            "width": 70,
                                            "align": "center",
                                            "allowResizing": false,
                                            "allowSorting": false,
                                            "isContentHtml": true
                                        },
                                    </text>
                                }
                                if (canDelete)
                                {
                                    <text>
                                        {
                                            "header": "Delete",
                                            "binding": "DeleteId",
                                            "width": 70,
                                            "align": "center",
                                            "allowResizing": false,
                                            "allowSorting": false,
                                            "isContentHtml": true
                                        },
                                    </text>
                                }
                            }
                            {
                                "header": "Article Group",
                                "binding": "ArticleGroup",
                                "allowSorting": true,
                                "width": "3*"
                            },
                            {
                                "header": "Type",
                                "binding": "ArticleType",
                                "allowSorting": true,
                                "width": "3*"
                            }
                ],
                autoGenerateColumns: false,
                itemsSource: articlegroups,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            articleGroupGrid.trackChanges = true;

            btnFirstPageGridArticleGroup = document.getElementById('btnMoveToFirstPageGridArticleGroup');
            btnPreviousPageGridArticleGroup = document.getElementById('btnMoveToPreviousPageGridArticleGroup');
            btnNextPageGridArticleGroup = document.getElementById('btnMoveToNextPageGridArticleGroup');
            btnLastPageGridArticleGroup = document.getElementById('btnMoveToLastPageGridArticleGroup');
            btnCurrentPageGridArticleGroup = document.getElementById('btnCurrentPageGridArticleGroup');

            updateNavigateButtonsArticleGroup();

            btnFirstPageGridArticleGroup.addEventListener('click', function () {
                articlegroups.moveToFirstPage();
                updateNavigateButtonsArticleGroup();
            });

            btnPreviousPageGridArticleGroup.addEventListener('click', function () {
                articlegroups.moveToPreviousPage();
                updateNavigateButtonsArticleGroup();
            });

            btnNextPageGridArticleGroup.addEventListener('click', function () {
                articlegroups.moveToNextPage();
                updateNavigateButtonsArticleGroup();
            });

            btnLastPageGridArticleGroup.addEventListener('click', function () {
                articlegroups.moveToLastPage();
                updateNavigateButtonsArticleGroup();
            });
        }

        $('#articleGroupDetailTab').click(function () {
            $('#articleGroupDetailTarget').show();
            $('#articleGroupBranchTarget').hide();

            $("#loadingModalArticleGroup").show();
            document.getElementById("loadingModalArticleGroup").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#articleGroupDetailForm").hide();

            setTimeout(function () {
                $('#loadingModalArticleGroup').hide();
                $('#articleGroupDetailForm').show();
            }, 500);
        });

        $('#articleGroupBranchTab').click(function () {
            $('#articleGroupDetailTarget').hide();
            $('#articleGroupBranchTarget').show();

            if (articleGroupId != 0) {
                $("#loadingArticleGroupBranch").show();
                document.getElementById("loadingArticleGroupBranch").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
                $("#articleGroupBranchFlexGridDetail").hide();

                setTimeout(function () {
                    createArticleGroupBranchFlexGrid();
                }, 500);
            } else {
                $("#loadingArticleGroupBranch").hide();
                $("#articleGroupBranchFlexGridDetail").hide();
            }
        });

        // ==========================
        // Get Article Group Branches
        // ==========================
        function getArticleGroupBranches() {
            var articleGroupBranchesObservableArray = new wijmo.collections.ObservableArray;
            if (articleGroupId > 0) {
                $.ajax({
                    url: '/api/articleGroupBranch/list/' + articleGroupId,
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    success: function (results) {
                        if (results.length > 0) {
                            for (i = 0; i < results.length; i++) {
                                var btnEditId = "<button class='btn btn-primary btn-xs btn-block' onclick='btnEditArticleGroupBranch_OnClick()'><i class='fa fa-edit'></i> Edit</button>";
                                var btnDeleteId = "<button class='btn btn-danger btn-xs btn-block' onclick='btnDeleteArticleGroupBranch_OnClick()'><i class='fa fa-trash'></i> Delete</button>";

                                articleGroupBranchesObservableArray.push({
                                    EditId: btnEditId,
                                    DeleteId: btnDeleteId,
                                    Id: results[i]["Id"],
                                    ArticleGroupId: results[i]["ArticleGroupId"],
                                    CompanyId: results[i]["CompanyId"],
                                    BranchId: results[i]["BranchId"],
                                    Branch: results[i]["Branch"],
                                    AccountId: results[i]["AccountId"],
                                    SalesAccountId: results[i]["SalesAccountId"],
                                    CostAccountId: results[i]["CostAccountId"],
                                    AssetAccountId: results[i]["AssetAccountId"],
                                    ExpenseAccountId: results[i]["ExpenseAccountId"],
                                });

                            }
                        }

                        $("#loadingArticleGroupBranch").hide();
                        $("#articleGroupBranchFlexGridDetail").show();
                    }
                });
            }

            return articleGroupBranchesObservableArray;
        }

        // ==============================
        // Article Group Branch Flex Grid
        // ==============================
        function createArticleGroupBranchFlexGrid() {
            articleGroupBranchCollectionView = new wijmo.collections.CollectionView(getArticleGroupBranches());

            articleGroupBranchFlexGrid.dispose();
            articleGroupBranchFlexGrid = new wijmo.grid.FlexGrid('#articleGroupBranchFlexGrid');
            articleGroupBranchFlexGrid.initialize({
                columns: [
                    @{
                        if (canEdit)
                        {
                            <text>
                                {
                                    "header": "Edit",
                                    "binding": "EditId",
                                    "width": 70,
                                    "align": "center",
                                    "allowResizing": false,
                                    "allowSorting": false,
                                    "isContentHtml": true
                                },
                            </text>
                        }
                        if (canDelete)
                        {
                            <text>
                                {
                                    "header": "Delete",
                                    "binding": "DeleteId",
                                    "width": 70,
                                    "align": "center",
                                    "allowResizing": false,
                                    "allowSorting": false,
                                    "isContentHtml": true
                                },
                            </text>
                        }
                    }
                    {
                        "header": "Branch",
                        "binding": "Branch",
                        "allowSorting": true,
                        "width": "*"
                    }
                ],
                autoGenerateColumns: false,
                itemsSource: articleGroupBranchCollectionView,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            articleGroupBranchFlexGrid.trackChanges = true;
        }

        var isArticleGroupCompanyChanged = false;

        // ==============================
        // Article Group Branch Companies
        // ==============================
        function createCboArticleGroupBranchesCompany(companyId, branchId, acccountId, salesAccountId, costAccountId, assetAccountId, expenseAccountId) {
            var companiesObservableArray = new wijmo.collections.ObservableArray;
            $.ajax({
                url: '/api/articleGroupBranch/dropdown/list/company',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            companiesObservableArray.push({
                                Id: results[i]["Id"],
                                Company: results[i]["Company"]
                            });
                        }
                    }

                    var disabled = true;
                    if (results.length > 0) {
                        disabled = false;
                        $('#cmdSaveArticleGroupBranchButton').prop('disabled', false);
                    } else {
                        $('#cmdSaveArticleGroupBranchButton').prop('disabled', true);
                    }

                    cboArticleGroupBranchCompany.dispose();
                    cboArticleGroupBranchCompany = new wijmo.input.ComboBox('#cboArticleGroupBranchCompany', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: companiesObservableArray,
                        displayMemberPath: "Company",
                        selectedValuePath: "Id",
                        selectedValue: companyId,
                        onSelectedIndexChanged: function () {
                            isArticleGroupCompanyChanged = true;
                            createCboArticleGroupBranches(branchId, acccountId, salesAccountId, costAccountId, assetAccountId, expenseAccountId);
                        }
                    });

                    createCboArticleGroupBranches(branchId, acccountId, salesAccountId, costAccountId, assetAccountId, expenseAccountId);
                }
            });
        }

        // ===============================
        // Article Group Branch - Branches
        // ===============================
        function createCboArticleGroupBranches(branchId, acccountId, salesAccountId, costAccountId, assetAccountId, expenseAccountId) {
            var branchesObservableArray = new wijmo.collections.ObservableArray;
            if (cboArticleGroupBranchCompany.selectedValue != null) {
                $.ajax({
                    url: '/api/articleGroupBranch/dropdown/list/branch/' + cboArticleGroupBranchCompany.selectedValue,
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    success: function (results) {
                        if (results.length > 0) {
                            for (i = 0; i < results.length; i++) {
                                branchesObservableArray.push({
                                    Id: results[i]["Id"],
                                    Branch: results[i]["Branch"]
                                });
                            }
                        }

                        var disabled = true;
                        if (results.length > 0) {
                            disabled = false;
                        } else {
                            $('#cmdSaveArticleGroupBranchButton').prop('disabled', true);
                        }

                        cboArticleGroupBranch.dispose();
                        cboArticleGroupBranch = new wijmo.input.ComboBox('#cboArticleGroupBranch', {
                            disabled: disabled,
                            isEditable: false,
                            itemsSource: branchesObservableArray,
                            displayMemberPath: "Branch",
                            selectedValuePath: "Id",
                            selectedValue: branchId
                        });

                        if (!isArticleGroupCompanyChanged) {
                            getArticleGroupBranchAccount(acccountId, salesAccountId, costAccountId, assetAccountId, expenseAccountId);
                        }
                    }
                });
            } else {
                cboArticleGroupBranch.dispose();
                cboArticleGroupBranch = new wijmo.input.ComboBox('#cboArticleGroupBranch', {
                    disabled: true,
                    isEditable: false,
                    itemsSource: branchesObservableArray
                });

                if (!isArticleGroupCompanyChanged) {
                    getArticleGroupBranchAccount(acccountId, salesAccountId, costAccountId, assetAccountId, expenseAccountId);
                }
            }
        }

        // ============================================
        // Get Account list for article group combo box
        // ============================================
        function getArticleGroupBranchAccount(acccountId, salesAccountId, costAccountId, assetAccountId, expenseAccountId) {
            var articleGroupBranchAccountsObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/articleGroupBranch/dropdown/list/account',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            articleGroupBranchAccountsObservableArray.push({
                                Id: results[i]["Id"],
                                AccountCode: results[i]["AccountCode"],
                                Account: results[i]["Account"]
                            });
                        }
                    }

                    var disabled = true;
                    if (results.length > 0) {
                        disabled = false;
                    } else {
                        $('#cmdSaveArticleGroupBranchButton').prop('disabled', true);
                    }

                    // =============
                    // Account Codes
                    // =============
                    cboArticleGroupBranchAccountCode.dispose();
                    cboArticleGroupBranchAccountCode = new wijmo.input.ComboBox('#cboArticleGroupBranchAccountCode', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: articleGroupBranchAccountsObservableArray,
                        displayMemberPath: "AccountCode",
                        selectedValuePath: "Id",
                        selectedValue: acccountId,
                        onSelectedIndexChanged: function () {
                            cboArticleGroupBranchAccount.selectedValue = this.selectedValue;
                        }
                    });

                    cboArticleGroupBranchSalesAccountCode.dispose();
                    cboArticleGroupBranchSalesAccountCode = new wijmo.input.ComboBox('#cboArticleGroupBranchSalesAccountCode', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: articleGroupBranchAccountsObservableArray,
                        displayMemberPath: "AccountCode",
                        selectedValuePath: "Id",
                        selectedValue: salesAccountId,
                        onSelectedIndexChanged: function () {
                            cboArticleGroupBranchSalesAccount.selectedValue = this.selectedValue;
                        }
                    });

                    cboArticleGroupBranchCostAccountCode.dispose();
                    cboArticleGroupBranchCostAccountCode = new wijmo.input.ComboBox('#cboArticleGroupBranchCostAccountCode', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: articleGroupBranchAccountsObservableArray,
                        displayMemberPath: "AccountCode",
                        selectedValuePath: "Id",
                        selectedValue: costAccountId,
                        onSelectedIndexChanged: function () {
                            cboArticleGroupBranchCostAccount.selectedValue = this.selectedValue;
                        }
                    });

                    cboArticleGroupBranchAssetAccountCode.dispose();
                    cboArticleGroupBranchAssetAccountCode = new wijmo.input.ComboBox('#cboArticleGroupBranchAssetAccountCode', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: articleGroupBranchAccountsObservableArray,
                        displayMemberPath: "AccountCode",
                        selectedValuePath: "Id",
                        selectedValue: assetAccountId,
                        onSelectedIndexChanged: function () {
                            cboArticleGroupBranchAssetAccount.selectedValue = this.selectedValue;
                        }
                    });

                    cboArticleGroupBranchExpenseAccountCode.dispose();
                    cboArticleGroupBranchExpenseAccountCode = new wijmo.input.ComboBox('#cboArticleGroupBranchExpenseAccountCode', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: articleGroupBranchAccountsObservableArray,
                        displayMemberPath: "AccountCode",
                        selectedValuePath: "Id",
                        selectedValue: expenseAccountId,
                        onSelectedIndexChanged: function () {
                            cboArticleGroupBranchExpenseAccount.selectedValue = this.selectedValue;
                        }
                    });

                    // =======
                    // Account
                    // =======
                    cboArticleGroupBranchAccount.dispose();
                    cboArticleGroupBranchAccount = new wijmo.input.ComboBox('#cboArticleGroupBranchAccount', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: articleGroupBranchAccountsObservableArray,
                        displayMemberPath: "Account",
                        selectedValuePath: "Id",
                        selectedValue: acccountId,
                        onSelectedIndexChanged: function () {
                            cboArticleGroupBranchAccountCode.selectedValue = this.selectedValue;
                        }
                    });

                    cboArticleGroupBranchSalesAccount.dispose();
                    cboArticleGroupBranchSalesAccount = new wijmo.input.ComboBox('#cboArticleGroupBranchSalesAccount', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: articleGroupBranchAccountsObservableArray,
                        displayMemberPath: "Account",
                        selectedValuePath: "Id",
                        selectedValue: salesAccountId,
                        onSelectedIndexChanged: function () {
                            cboArticleGroupBranchSalesAccountCode.selectedValue = this.selectedValue;
                        }
                    });

                    cboArticleGroupBranchCostAccount.dispose();
                    cboArticleGroupBranchCostAccount = new wijmo.input.ComboBox('#cboArticleGroupBranchCostAccount', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: articleGroupBranchAccountsObservableArray,
                        displayMemberPath: "Account",
                        selectedValuePath: "Id",
                        selectedValue: costAccountId,
                        onSelectedIndexChanged: function () {
                            cboArticleGroupBranchCostAccountCode.selectedValue = this.selectedValue;
                        }
                    });

                    cboArticleGroupBranchAssetAccount.dispose();
                    cboArticleGroupBranchAssetAccount = new wijmo.input.ComboBox('#cboArticleGroupBranchAssetAccount', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: articleGroupBranchAccountsObservableArray,
                        displayMemberPath: "Account",
                        selectedValuePath: "Id",
                        selectedValue: assetAccountId,
                        onSelectedIndexChanged: function () {
                            cboArticleGroupBranchAssetAccountCode.selectedValue = this.selectedValue;
                        }
                    });

                    cboArticleGroupBranchExpenseAccount.dispose();
                    cboArticleGroupBranchExpenseAccount = new wijmo.input.ComboBox('#cboArticleGroupBranchExpenseAccount', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: articleGroupBranchAccountsObservableArray,
                        displayMemberPath: "Account",
                        selectedValuePath: "Id",
                        selectedValue: expenseAccountId,
                        onSelectedIndexChanged: function () {
                            cboArticleGroupBranchExpenseAccountCode.selectedValue = this.selectedValue;
                        }
                    });

                    setTimeout(function () {
                        $("#loadingModalArticleGroupBranch").hide();
                        $("#articleGroupBranchDetailForm").show();

                    }, 500);
                }
            });
        }

        // ========================
        // Add Article Group Branch
        // ========================
        function btnAddArticleGroupBranchOnlick() {
            $('#articleGroupBranchEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $("#loadingModalArticleGroupBranch").show();
            document.getElementById("loadingModalArticleGroupBranch").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#articleGroupBranchDetailForm").hide();

            document.getElementById("cmdSaveArticleGroupBranchButton").innerHTML = '<i class="fa fa-save"></i> Save';
            $('#cmdSaveArticleGroupBranchButton').prop('disabled', true);
            $('#cmdArticleGroupBranchDetailCloseButton').prop('disabled', false);

            articleGroupBranchId = 0;
            createCboArticleGroupBranchesCompany(0, 0, cboArticleGroupAccount.selectedValue, cboArticleGroupSalesAccount.selectedValue, cboArticleGroupCostAccount.selectedValue, cboArticleGroupAssetAccount.selectedValue, cboArticleGroupExpenseAccount.selectedValue);
        }

        // =========================
        // Edit Article Group Branch
        // =========================
        function btnEditArticleGroupBranch_OnClick() {
            $('#articleGroupBranchEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $("#loadingModalArticleGroupBranch").show();
            document.getElementById("loadingModalArticleGroupBranch").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#articleGroupBranchDetailForm").hide();

            document.getElementById("cmdSaveArticleGroupBranchButton").innerHTML = '<i class="fa fa-save"></i> Save';
            $('#cmdSaveArticleGroupBranchButton').prop('disabled', true);
            $('#cmdArticleGroupBranchDetailCloseButton').prop('disabled', false);

            articleGroupBranchCollectionView.editItem(articleGroupBranchCollectionView.currentItem);
            var articleGroupBranch = articleGroupBranchCollectionView.currentEditItem;
            articleGroupBranchId = articleGroupBranch.Id;
            createCboArticleGroupBranchesCompany(articleGroupBranch.CompanyId, articleGroupBranch.BranchId, articleGroupBranch.AccountId, articleGroupBranch.SalesAccountId, articleGroupBranch.CostAccountId, articleGroupBranch.AssetAccountId, articleGroupBranch.ExpenseAccountId);
        }

        // =========================
        // Save Article Group Branch
        // =========================
        function btnArticleGroupBranchSaveButton_OnClick() {
            var articleGroupObject = new Object();
            articleGroupObject.ArticleGroupId = articleGroupId;
            articleGroupObject.BranchId = cboArticleGroupBranch.selectedValue;
            articleGroupObject.AccountId = cboArticleGroupBranchAccount.selectedValue;
            articleGroupObject.SalesAccountId = cboArticleGroupBranchSalesAccount.selectedValue;
            articleGroupObject.CostAccountId = cboArticleGroupBranchCostAccount.selectedValue;
            articleGroupObject.AssetAccountId = cboArticleGroupBranchAssetAccount.selectedValue;
            articleGroupObject.ExpenseAccountId = cboArticleGroupBranchExpenseAccount.selectedValue;
            var articleGroupData = JSON.stringify(articleGroupObject);

            document.getElementById("cmdSaveArticleGroupBranchButton").innerHTML = '<i class="fa fa-spinner fa-spin"></i> Saving';
            $('#cmdSaveArticleGroupBranchButton').prop('disabled', true);
            $('#cmdArticleGroupBranchDetailCloseButton').prop('disabled', true);

            if (articleGroupBranchId == 0) {
                $.ajax({
                    type: "POST",
                    url: '/api/articleGroupBranch/add',
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    data: articleGroupData,
                    statusCode: {
                        200: function () {
                            toastr.success("Save Successful");
                            $('#articleGroupBranchEdit').modal('hide');
                            createArticleGroupBranchFlexGrid();
                        },
                        404: function (message) {
                            toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                            document.getElementById("cmdSaveArticleGroupBranchButton").innerHTML = '<i class="fa fa-save"></i> Save';
                            $('#cmdSaveArticleGroupBranchButton').prop('disabled', false);
                            $('#cmdArticleGroupBranchDetailCloseButton').prop('disabled', false);
                        },
                        400: function (message) {
                            toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                            document.getElementById("cmdSaveArticleGroupBranchButton").innerHTML = '<i class="fa fa-save"></i> Save';
                            $('#cmdSaveArticleGroupBranchButton').prop('disabled', false);
                            $('#cmdArticleGroupBranchDetailCloseButton').prop('disabled', false);
                        },
                        500: function (message) {
                            toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                            document.getElementById("cmdSaveArticleGroupBranchButton").innerHTML = '<i class="fa fa-save"></i> Save';
                            $('#cmdSaveArticleGroupBranchButton').prop('disabled', false);
                            $('#cmdArticleGroupBranchDetailCloseButton').prop('disabled', false);
                        }
                    }
                });
            } else {
                $.ajax({
                    type: "PUT",
                    url: '/api/articleGroupBranch/update/' + articleGroupBranchId,
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    data: articleGroupData,
                    statusCode: {
                        200: function () {
                            toastr.success("Update Successful");
                            $('#articleGroupBranchEdit').modal('hide');
                            createArticleGroupBranchFlexGrid();
                        },
                        404: function (message) {
                            toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                            document.getElementById("cmdSaveArticleGroupBranchButton").innerHTML = '<i class="fa fa-save"></i> Save';
                            $('#cmdSaveArticleGroupBranchButton').prop('disabled', false);
                            $('#cmdArticleGroupBranchDetailCloseButton').prop('disabled', false);
                        },
                        400: function (message) {
                            toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                            document.getElementById("cmdSaveArticleGroupBranchButton").innerHTML = '<i class="fa fa-save"></i> Save';
                            $('#cmdSaveArticleGroupBranchButton').prop('disabled', false);
                            $('#cmdArticleGroupBranchDetailCloseButton').prop('disabled', false);
                        },
                        500: function (message) {
                            toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                            document.getElementById("cmdSaveArticleGroupBranchButton").innerHTML = '<i class="fa fa-save"></i> Save';
                            $('#cmdSaveArticleGroupBranchButton').prop('disabled', false);
                            $('#cmdArticleGroupBranchDetailCloseButton').prop('disabled', false);
                        }
                    }
                });
            }
        }

        // ===========================
        // Delete Article Group Branch
        // ===========================
        function btnDeleteArticleGroupBranch_OnClick() {
            $('#deleteArticleGroupBranchConfirm').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById("cmdConfirmDeleteArticleGroupBranch").innerHTML = '<i class="fa fa-trash"></i> Delete';
            $('#cmdConfirmDeleteArticleGroupBranch').prop('disabled', false);
            $('#cmdConfirmDeleteCloseButtonArticleGroupBranch').prop('disabled', false);
        }

        // ===================================
        // Confirm Delete Article Group Branch
        // ===================================
        function cmdArticleGroupBranchConfirmDeleteButton_OnClick() {
            document.getElementById("cmdConfirmDeleteArticleGroupBranch").innerHTML = '<i class="fa fa-spinner fa-spin"></i> Deleting';
            $('#cmdConfirmDeleteArticleGroupBranch').prop('disabled', true);
            $('#cmdConfirmDeleteCloseButtonArticleGroupBranch').prop('disabled', true);

            articleGroupBranchCollectionView.editItem(articleGroupBranchCollectionView.currentItem);
            var articleGroupBranch = articleGroupBranchCollectionView.currentEditItem;

            $.ajax({
                url: '/api/articleGroupBranch/delete/' + articleGroupBranch.Id,
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Delete Successful");
                        $('#deleteArticleGroupBranchConfirm').modal('hide');
                        createArticleGroupBranchFlexGrid();
                    },
                    404: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                        $('#deleteArticleGroupBranchConfirm').modal('hide');
                        document.getElementById("cmdConfirmDeleteArticleGroupBranch").innerHTML = '<i class="fa fa-trash"></i> Delete';
                        $('#cmdConfirmDeleteArticleGroupBranch').prop('disabled', false);
                        $('#cmdConfirmDeleteCloseButtonArticleGroupBranch').prop('disabled', false);
                    },
                    400: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                        $('#deleteArticleGroupBranchConfirm').modal('hide');
                        document.getElementById("cmdConfirmDeleteArticleGroupBranch").innerHTML = '<i class="fa fa-trash"></i> Delete';
                        $('#cmdConfirmDeleteArticleGroupBranch').prop('disabled', false);
                        $('#cmdConfirmDeleteCloseButtonArticleGroupBranch').prop('disabled', false);
                    },
                    500: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                        $('#deleteArticleGroupBranchConfirm').modal('hide');
                        document.getElementById("cmdConfirmDeleteArticleGroupBranch").innerHTML = '<i class="fa fa-trash"></i> Delete';
                        $('#cmdConfirmDeleteArticleGroupBranch').prop('disabled', false);
                        $('#cmdConfirmDeleteCloseButtonArticleGroupBranch').prop('disabled', false);
                    }
                }
            });
        }
    </script>

    <!-- ================ -->
    <!-- Employee Scripts -->
    <!-- ================ -->
    <script type="text/javascript">
        // =============================
        // Global Variables for Employee
        // =============================
        var employees;
        var employeeGrid;

        var btnFirstPageEmployee;
        var btnPreviousPageGridEmployee;
        var btnNextPageGridEmployee;
        var btnLastPageGridEmployee;
        var btnCurrentPageGridEmployee;

        var employeeId = 0;
        var cboEmployeeGroup = new wijmo.input.ComboBox('#cboEmployeeGroup');
        var cboEmployeeAccountCode = new wijmo.input.ComboBox('#cboEmployeeAccountCode');
        var cboEmployeeAccount = new wijmo.input.ComboBox('#cboEmployeeAccount');

        // =================
        // GET Employee List
        // =================
        function getEmployee() {
            var employees = new wijmo.collections.ObservableArray;
            NProgress.start();
            $.ajax({
                url: '/api/employee/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            employees.push({
                                EditId: "<button class='btn btn-primary btn-xs btn-block' onclick='btnEditEmployee_OnClick()'><i class='fa fa-edit'></i> Edit</button>",
                                DeleteId: "<button class='btn btn-danger btn-xs btn-block' onclick='btnDeleteEmployee_OnClick()'><i class='fa fa-trash'></i> Delete</button>",
                                Id: results[i]["Id"],
                                ManualArticleCode: results[i]["ManualArticleCode"],
                                ArticleCode: results[i]["ArticleCode"],
                                Article: results[i]["Article"],
                                ArticleGroupId: results[i]["ArticleGroupId"],
                                ArticleGroup: results[i]["ArticleGroup"],
                                AccountId: results[i]["AccountId"],
                                Address: results[i]["Address"],
                                ContactNumber: results[i]["ContactNumber"],
                                ContactPerson: results[i]["ContactPerson"],
                                IsLocked: results[i]["IsLocked"],
                                CreatedBy: results[i]["CreatedBy"],
                                CreatedDateTime: results[i]["CreatedDateTime"],
                                UpdatedBy: results[i]["UpdatedBy"],
                                UpdatedDateTime: results[i]["UpdatedDateTime"]
                            });

                        }
                    }

                    NProgress.done();
                }
            });

            return employees;
        }

        // ===============================
        // FlexGrid Selection for Employee
        // ===============================
        function updateDetailsEmployee() {
            var item = employees.currentItem;
            document.getElementById('createdBy').innerHTML = item.CreatedBy;
            document.getElementById('createdDate').innerHTML = item.CreatedDateTime;
            document.getElementById('updatedBy').innerHTML = item.UpdatedBy;
            document.getElementById('updatedDate').innerHTML = item.UpdatedDateTime;
        }

        // ===============================
        // Navigation Buttons for Employee
        // ===============================
        function updateNavigateButtonsEmployee() {
            if (employees.pageSize <= 0) {
                document.getElementById('navigationPageGridEmployee').style.display = 'none';
                return;
            }
            document.getElementById('navigationPageGridEmployee').style.display = 'block';
            if (employees.pageIndex === 0) {
                btnFirstPageGridEmployee.setAttribute('disabled', 'disabled');
                btnPreviousPageGridEmployee.setAttribute('disabled', 'disabled');
                btnNextPageGridEmployee.removeAttribute('disabled');
                btnLastPageGridEmployee.removeAttribute('disabled');
            } else if (employees.pageIndex === (employees.pageCount - 1)) {
                btnFirstPageGridEmployee.removeAttribute('disabled');
                btnPreviousPageGridEmployee.removeAttribute('disabled');
                btnLastPageGridEmployee.setAttribute('disabled', 'disabled');
                btnNextPageGridEmployee.setAttribute('disabled', 'disabled');
            } else {
                btnFirstPageGridEmployee.removeAttribute('disabled');
                btnPreviousPageGridEmployee.removeAttribute('disabled');
                btnNextPageGridEmployee.removeAttribute('disabled');
                btnLastPageGridEmployee.removeAttribute('disabled');
            }
            btnCurrentPageGridEmployee.innerHTML = (employees.pageIndex + 1) + ' / ' + employees.pageCount;
        }

        // =========================
        // Get Artile Employee Group
        // =========================
        function getArticleEmployeeGroupForComboBox(employeeGroupId, accountId) {
            var articleEmployeeGroupsObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/employee/dropdown/list/employeeGroup',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            articleEmployeeGroupsObservableArray.push({
                                Id: results[i]["Id"],
                                ArticleGroup: results[i]["ArticleGroup"],
                                AccountId: results[i]["AccountId"],
                                SalesAccountId: results[i]["SalesAccountId"],
                                CostAccountId: results[i]["CostAccountId"],
                                AssetAccountId: results[i]["AssetAccountId"],
                                ExpenseAccountId: results[i]["ExpenseAccountId"],
                            });
                        }
                    }

                    var disabled = true;
                    if (results.length > 0) {
                        disabled = false;
                        $('#cmdSaveEmployeeButton').prop('disabled', false);
                    } else {
                        $('#cmdSaveEmployeeButton').prop('disabled', true);
                    }

                    cboEmployeeGroup.dispose();
                    cboEmployeeGroup = new wijmo.input.ComboBox('#cboEmployeeGroup', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: articleEmployeeGroupsObservableArray,
                        displayMemberPath: "ArticleGroup",
                        selectedValuePath: "Id",
                        selectedValue: employeeGroupId,
                        onSelectedIndexChanged: function () {
                            cboEmployeeAccountCode.selectedValue = this.selectedItem["AccountId"];
                            cboEmployeeAccount.selectedValue = this.selectedItem["AccountId"];
                        }
                    });

                    getEmployeeAccountForComboBox(accountId);
                }
            });
        }

        // ===========
        // Get Account
        // ===========
        function getEmployeeAccountForComboBox(accountId) {
            var accountsObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/employee/dropdown/list/employeeGroup/account',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            accountsObservableArray.push({
                                Id: results[i]["Id"],
                                AccountCode: results[i]["AccountCode"],
                                Account: results[i]["Account"]
                            });
                        }
                    }

                    var disabled = true;
                    if (results.length > 0) {
                        disabled = false;
                    } else {
                        $('#cmdSaveEmployeeButton').prop('disabled', true);
                    }

                    var accountIdValue = accountId;
                    if (cboEmployeeGroup.selectedValue != null) {
                        if (accountId == 0) {
                            accountIdValue = cboEmployeeGroup.selectedItem["AccountId"];
                        }
                    }

                    cboEmployeeAccountCode.dispose();
                    cboEmployeeAccountCode = new wijmo.input.ComboBox('#cboEmployeeAccountCode', {
                        disabled: true,
                        isEditable: false,
                        itemsSource: accountsObservableArray,
                        displayMemberPath: "AccountCode",
                        selectedValuePath: "Id",
                        selectedValue: accountIdValue,
                        onSelectedIndexChanged: function () {
                            cboEmployeeAccount.selectedValue = this.selectedValue;
                        }
                    });

                    cboEmployeeAccount.dispose();
                    cboEmployeeAccount = new wijmo.input.ComboBox('#cboEmployeeAccount', {
                        disabled: true,
                        isEditable: false,
                        itemsSource: accountsObservableArray,
                        displayMemberPath: "Account",
                        selectedValuePath: "Id",
                        selectedValue: accountIdValue,
                        onSelectedIndexChanged: function () {
                            cboEmployeeAccountCode.selectedValue = this.selectedValue;
                        }
                    });

                    setTimeout(function () {
                        $("#loadingModalEmployee").hide();
                        $("#employeeDetailForm").show();
                    }, 500);
                }
            });
        }

        // ================
        // Add new Employee
        // ================
        function btnEmployeeAdd_OnClick() {
            $('#employeeEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $('.requiredEmployee').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            $("#loadingModalEmployee").show();
            document.getElementById("loadingModalEmployee").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#employeeDetailForm").hide();

            document.getElementById("cmdSaveEmployeeButton").innerHTML = '<i class="fa fa-save"></i> Save';
            $('#cmdSaveEmployeeButton').prop('disabled', true);
            $('#cmdEmployeeDetailCloseButton').prop('disabled', false);

            $('#employee_Code').hide();
            $('#employee_Code_Label').hide();
            $('#employee_Code_Input').hide();

            employeeId = 0;
            document.getElementById('employee_Code').value = "NA";
            document.getElementById('employee_ContactPerson').value = "NA";
            document.getElementById('employee_Employee').value = "NA";
            document.getElementById('inpManualEmployeeCode').value = "NA";
            getArticleEmployeeGroupForComboBox(0, 0);
            document.getElementById('employee_Address').value = "NA";
            document.getElementById('employee_ContactNumber').value = "NA";

            document.getElementById('employee_ContactPerson').disabled = false;
            document.getElementById('employee_Employee').disabled = false;
            document.getElementById('inpManualEmployeeCode').disabled = false;
            document.getElementById('employee_Address').disabled = false;
            document.getElementById('employee_ContactNumber').disabled = false;
        }

        // =============
        // EDIT Employee
        // =============
        function btnEditEmployee_OnClick() {
            $('#employeeEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $('.requiredEmployee').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            $("#loadingModalEmployee").show();
            document.getElementById("loadingModalEmployee").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#employeeDetailForm").hide();

            document.getElementById("cmdSaveEmployeeButton").innerHTML = '<i class="fa fa-save"></i> Save';
            $('#cmdSaveEmployeeButton').prop('disabled', true);
            $('#cmdEmployeeDetailCloseButton').prop('disabled', false);

            $('#employee_Code').show();
            $('#employee_Code_Label').show();
            $('#employee_Code_Input').show();

            employees.editItem(employees.currentItem);
            var employee = employees.currentEditItem;
            employeeId = employee.Id;
            document.getElementById('employee_Code').value = employee.ArticleCode;
            document.getElementById('inpManualEmployeeCode').value = employee.ManualArticleCode;
            document.getElementById('employee_Employee').value = employee.Article;
            getArticleEmployeeGroupForComboBox(employee.ArticleGroupId, employee.AccountId);
            document.getElementById('employee_Address').value = employee.Address ? employee.Address : '';
            document.getElementById('employee_ContactNumber').value = employee.ContactNumber ? employee.ContactNumber : '';
            document.getElementById('employee_ContactPerson').value = employee.ContactPerson;
        }

        // =========================
        // Employee Entry Validation
        // =========================
        function employeeEntryValidation() {
            var isValid = true;
            $('.requiredEmployee').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                }
                else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            return isValid;
        }

        // =========================
        // Refresh employee flexgrid
        // =========================
        function refreshEmployeeFlexgrid() {
            employees = new wijmo.collections.CollectionView(getEmployee());
            employees.canFilter = true;
            employees.pageSize = 15;

            var filterTextEmployee = '';
            $('#InputFilterEmployee').keyup(function () {
                filterTextEmployee = this.value.toLowerCase();
                employees.refresh();
            });
            employees.filter = function (item) {
                return !filterTextEmployee || (item.ArticleCode.toLowerCase().indexOf(filterTextEmployee) > -1)
                    || (item.ManualArticleCode.toLowerCase().indexOf(filterTextEmployee) > -1)
                    || (item.Article.toLowerCase().indexOf(filterTextEmployee) > -1)
                    || (item.ContactNumber.toLowerCase().indexOf(filterTextEmployee) > -1)
                    || (item.ArticleGroup.toLowerCase().indexOf(filterTextEmployee) > -1);
            }
            employees.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsEmployee();
            });
            employees.currentChanged.addHandler(function (sender, args) {
                updateDetailsEmployee();
            });

            employeeGrid.itemsSource = employees;
            employeeGrid.trackChanges = true;
        }

        // =============
        // SAVE Employee
        // =============
        function btnEmployeeSaveButton_OnClick() {
            var employeeObject = new Object();
            employeeObject.ArticleCode = document.getElementById('employee_Code').value;
            employeeObject.ManualArticleCode = document.getElementById('inpManualEmployeeCode').value;
            employeeObject.Article = document.getElementById('employee_Employee').value;
            employeeObject.ArticleGroupId = cboEmployeeGroup.selectedValue;
            employeeObject.AccountId = cboEmployeeAccount.selectedValue;
            employeeObject.SalesAccountId = cboEmployeeGroup.selectedItem["SalesAccountId"];
            employeeObject.CostAccountId = cboEmployeeGroup.selectedItem["CostAccountId"];
            employeeObject.AssetAccountId = cboEmployeeGroup.selectedItem["AssetAccountId"];
            employeeObject.ExpenseAccountId = cboEmployeeGroup.selectedItem["ExpenseAccountId"];
            employeeObject.Address = document.getElementById('employee_Address').value;
            employeeObject.ContactNumber = document.getElementById('employee_ContactNumber').value;
            employeeObject.ContactPerson = document.getElementById('employee_ContactPerson').value;
            var employeeData = JSON.stringify(employeeObject);

            if (employeeEntryValidation()) {
                document.getElementById("cmdSaveEmployeeButton").innerHTML = '<i class="fa fa-spinner fa-spin"></i> Saving';
                $('#cmdSaveEmployeeButton').prop('disabled', true);
                $('#cmdEmployeeDetailCloseButton').prop('disabled', true);

                if (employeeId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/employee/add',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: employeeData,
                        statusCode: {
                            200: function () {
                                toastr.success("Save Successful");
                                $('#employeeEdit').modal('hide');
                                refreshEmployeeFlexgrid();
                            },
                            404: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                                document.getElementById("cmdSaveEmployeeButton").innerHTML = '<i class="fa fa-save"></i> Save';
                                $('#cmdSaveEmployeeButton').prop('disabled', false);
                                $('#cmdEmployeeDetailCloseButton').prop('disabled', false);
                            },
                            400: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                                document.getElementById("cmdSaveEmployeeButton").innerHTML = '<i class="fa fa-save"></i> Save';
                                $('#cmdSaveEmployeeButton').prop('disabled', false);
                                $('#cmdEmployeeDetailCloseButton').prop('disabled', false);
                            },
                            500: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                                document.getElementById("cmdSaveEmployeeButton").innerHTML = '<i class="fa fa-save"></i> Save';
                                $('#cmdSaveEmployeeButton').prop('disabled', false);
                                $('#cmdEmployeeDetailCloseButton').prop('disabled', false);
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/employee/update/' + employeeId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: employeeData,
                        statusCode: {
                            200: function () {
                                toastr.success("Update Successful");
                                $('#employeeEdit').modal('hide');
                                refreshEmployeeFlexgrid();
                            },
                            404: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                                document.getElementById("cmdSaveEmployeeButton").innerHTML = '<i class="fa fa-save"></i> Save';
                                $('#cmdSaveEmployeeButton').prop('disabled', false);
                                $('#cmdEmployeeDetailCloseButton').prop('disabled', false);
                            },
                            400: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                                document.getElementById("cmdSaveEmployeeButton").innerHTML = '<i class="fa fa-save"></i> Save';
                                $('#cmdSaveEmployeeButton').prop('disabled', false);
                                $('#cmdEmployeeDetailCloseButton').prop('disabled', false);
                            },
                            500: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                                document.getElementById("cmdSaveEmployeeButton").innerHTML = '<i class="fa fa-save"></i> Save';
                                $('#cmdSaveEmployeeButton').prop('disabled', false);
                                $('#cmdEmployeeDetailCloseButton').prop('disabled', false);
                            }
                        }
                    });
                }
            } else {
                toastr.error("Invalid entry");
            }
        }

        // ===============
        // DELETE Employee
        // ===============
        function btnDeleteEmployee_OnClick() {
            employees.editItem(employees.currentItem);
            var employee = employees.currentEditItem;

            $('#deleteEmployeeConfirm').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById("cmdConfirmDeleteEmployee").innerHTML = '<i class="fa fa-trash"></i> Delete';
            $('#cmdConfirmDeleteEmployee').prop('disabled', false);
            $('#cmdConfirmDeleteCloseButtonEmployee').prop('disabled', false);
        }

        // Employee Confirm Delete Button
        function cmdEmployeeConfirmDeleteButton_OnClick() {
            document.getElementById("cmdConfirmDeleteEmployee").innerHTML = '<i class="fa fa-spinner fa-spin"></i> Deleting';
            $('#cmdConfirmDeleteEmployee').prop('disabled', true);
            $('#cmdConfirmDeleteCloseButtonEmployee').prop('disabled', true);

            employees.editItem(employees.currentItem);
            var employeeId = employees.currentEditItem.Id;

            $.ajax({
                url: '/api/employee/delete/' + employeeId,
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Delete Successful");
                        $('#deleteEmployeeConfirm').modal('hide');
                        refreshEmployeeFlexgrid();
                    },
                    404: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                        $('#deleteEmployeeConfirm').modal('hide');
                        document.getElementById("cmdConfirmDeleteEmployee").innerHTML = '<i class="fa fa-trash"></i> Delete';
                        $('#cmdConfirmDeleteEmployee').prop('disabled', false);
                        $('#cmdConfirmDeleteCloseButtonEmployee').prop('disabled', false);
                    },
                    400: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                        $('#deleteEmployeeConfirm').modal('hide');
                        document.getElementById("cmdConfirmDeleteEmployee").innerHTML = '<i class="fa fa-trash"></i> Delete';
                        $('#cmdConfirmDeleteEmployee').prop('disabled', false);
                        $('#cmdConfirmDeleteCloseButtonEmployee').prop('disabled', false);
                    },
                    500: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                        $('#deleteEmployeeConfirm').modal('hide');
                        document.getElementById("cmdConfirmDeleteEmployee").innerHTML = '<i class="fa fa-trash"></i> Delete';
                        $('#cmdConfirmDeleteEmployee').prop('disabled', false);
                        $('#cmdConfirmDeleteCloseButtonEmployee').prop('disabled', false);
                    }
                }
            });
        }

        // ========
        // Employee
        // ========
        function employeeTab() {
            document.getElementById('employee_Code').disabled = true;

            employees = new wijmo.collections.CollectionView(getEmployee());
            employees.canFilter = true;
            employees.pageSize = 15;

            var filterTextEmployee = '';
            $('#InputFilterEmployee').keyup(function () {
                filterTextEmployee = this.value.toLowerCase();
                employees.refresh();
            });
            employees.filter = function (item) {
                return !filterTextEmployee || (item.ArticleCode.toLowerCase().indexOf(filterTextEmployee) > -1)
                    || (item.ManualArticleCode.toLowerCase().indexOf(filterTextEmployee) > -1)
                    || (item.Article.toLowerCase().indexOf(filterTextEmployee) > -1)
                    || (item.ContactNumber.toLowerCase().indexOf(filterTextEmployee) > -1)
                    || (item.ArticleGroup.toLowerCase().indexOf(filterTextEmployee) > -1);
            }
            employees.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsEmployee();
            });
            employees.currentChanged.addHandler(function (sender, args) {
                updateDetailsEmployee();
            });

            // Flex Grid for Employee
            employeeGrid = new wijmo.grid.FlexGrid('#EmployeeGrid');
            employeeGrid.initialize({
                columns: [
                            @{
                                if (canEdit)
                                {
                                    <text>
                                        {
                                            "header": "Edit",
                                            "binding": "EditId",
                                            "width": 70,
                                            "align": "center",
                                            "allowResizing": false,
                                            "allowSorting": false,
                                            "isContentHtml": true
                                        },
                                    </text>
                                }
                                if (canDelete)
                                {
                                    <text>
                                        {
                                            "header": "Delete",
                                            "binding": "DeleteId",
                                            "width": 70,
                                            "align": "center",
                                            "allowResizing": false,
                                            "allowSorting": false,
                                            "isContentHtml": true
                                        },
                                    </text>
                                }
                            }
                            {
                                "header": "Code",
                                "binding": "ArticleCode",
                                "allowSorting": true,
                                "width": 100
                            },
                            {
                                "header": "Manual Code",
                                "binding": "ManualArticleCode",
                                "allowSorting": true,
                                "width": 120
                            },
                            {
                                "header": "Employee",
                                "binding": "Article",
                                "allowSorting": true,
                                "width": "4*"
                            },
                            {
                                "header": "Contact No.",
                                "binding": "ContactNumber",
                                "allowSorting": true,
                                "width": "3*"
                            },
                            {
                                "header": "Group",
                                "binding": "ArticleGroup",
                                "allowSorting": true,
                                "width": "3*"
                            }
                ],
                autoGenerateColumns: false,
                itemsSource: employees,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            employeeGrid.trackChanges = true;

            //Navigation button for Employee
            btnFirstPageGridEmployee = document.getElementById('btnMoveToFirstPageGridEmployee');
            btnPreviousPageGridEmployee = document.getElementById('btnMoveToPreviousPageGridEmployee');
            btnNextPageGridEmployee = document.getElementById('btnMoveToNextPageGridEmployee');
            btnLastPageGridEmployee = document.getElementById('btnMoveToLastPageGridEmployee');
            btnCurrentPageGridEmployee = document.getElementById('btnCurrentPageGridEmployee');

            updateNavigateButtonsEmployee();

            btnFirstPageGridEmployee.addEventListener('click', function () {
                employees.moveToFirstPage();
                updateNavigateButtonsEmployee();
            });
            btnPreviousPageGridEmployee.addEventListener('click', function () {
                employees.moveToPreviousPage();
                updateNavigateButtonsEmployee();
            });
            btnNextPageGridEmployee.addEventListener('click', function () {
                employees.moveToNextPage();
                updateNavigateButtonsEmployee();
            });
            btnLastPageGridEmployee.addEventListener('click', function () {
                employees.moveToLastPage();
                updateNavigateButtonsEmployee();
            });
        }
    </script>

    <!-- ===================== -->
    <!-- Other Article Scripts -->
    <!-- ===================== -->
    <script type="text/javascript">
        // =============================
        // Global Variables for OtherArticle
        // =============================
        var otherArticles;
        var otherArticleGrid;

        var btnFirstPageOtherArticle;
        var btnPreviousPageGridOtherArticle;
        var btnNextPageGridOtherArticle;
        var btnLastPageGridOtherArticle;
        var btnCurrentPageGridOtherArticle;

        var otherArticleId = 0;
        var cboOtherArticleGroup = new wijmo.input.ComboBox('#cboOtherArticleGroup');
        var cboOtherArticleAccountCode = new wijmo.input.ComboBox('#cboOtherArticleAccountCode');
        var cboOtherArticleAccount = new wijmo.input.ComboBox('#cboOtherArticleAccount');

        // =================
        // GET OtherArticle List
        // =================
        function getOtherArticle() {
            var otherArticles = new wijmo.collections.ObservableArray;
            NProgress.start();
            $.ajax({
                url: '/api/otherArticle/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            otherArticles.push({
                                EditId: "<button class='btn btn-primary btn-xs btn-block' onclick='btnEditOtherArticle_OnClick()'><i class='fa fa-edit'></i> Edit</button>",
                                DeleteId: "<button class='btn btn-danger btn-xs btn-block' onclick='btnDeleteOtherArticle_OnClick()'><i class='fa fa-trash'></i> Delete</button>",
                                Id: results[i]["Id"],
                                ArticleCode: results[i]["ArticleCode"],
                                ManualArticleCode: results[i]["ManualArticleCode"],
                                Article: results[i]["Article"],
                                ArticleGroupId: results[i]["ArticleGroupId"],
                                ArticleGroup: results[i]["ArticleGroup"],
                                AccountId: results[i]["AccountId"],
                                Address: results[i]["Address"],
                                ContactNumber: results[i]["ContactNumber"],
                                ContactPerson: results[i]["ContactPerson"],
                                IsLocked: results[i]["IsLocked"],
                                CreatedBy: results[i]["CreatedBy"],
                                CreatedDateTime: results[i]["CreatedDateTime"],
                                UpdatedBy: results[i]["UpdatedBy"],
                                UpdatedDateTime: results[i]["UpdatedDateTime"]
                            });

                        }
                    }

                    NProgress.done();
                }
            });

            return otherArticles;
        }

        // ===============================
        // FlexGrid Selection for OtherArticle
        // ===============================
        function updateDetailsOtherArticle() {
            var item = otherArticles.currentItem;
            document.getElementById('createdBy').innerHTML = item.CreatedBy;
            document.getElementById('createdDate').innerHTML = item.CreatedDateTime;
            document.getElementById('updatedBy').innerHTML = item.UpdatedBy;
            document.getElementById('updatedDate').innerHTML = item.UpdatedDateTime;
        }

        // ===============================
        // Navigation Buttons for OtherArticle
        // ===============================
        function updateNavigateButtonsOtherArticle() {
            if (otherArticles.pageSize <= 0) {
                document.getElementById('navigationPageGridOtherArticle').style.display = 'none';
                return;
            }
            document.getElementById('navigationPageGridOtherArticle').style.display = 'block';
            if (otherArticles.pageIndex === 0) {
                btnFirstPageGridOtherArticle.setAttribute('disabled', 'disabled');
                btnPreviousPageGridOtherArticle.setAttribute('disabled', 'disabled');
                btnNextPageGridOtherArticle.removeAttribute('disabled');
                btnLastPageGridOtherArticle.removeAttribute('disabled');
            } else if (otherArticles.pageIndex === (otherArticles.pageCount - 1)) {
                btnFirstPageGridOtherArticle.removeAttribute('disabled');
                btnPreviousPageGridOtherArticle.removeAttribute('disabled');
                btnLastPageGridOtherArticle.setAttribute('disabled', 'disabled');
                btnNextPageGridOtherArticle.setAttribute('disabled', 'disabled');
            } else {
                btnFirstPageGridOtherArticle.removeAttribute('disabled');
                btnPreviousPageGridOtherArticle.removeAttribute('disabled');
                btnNextPageGridOtherArticle.removeAttribute('disabled');
                btnLastPageGridOtherArticle.removeAttribute('disabled');
            }
            btnCurrentPageGridOtherArticle.innerHTML = (otherArticles.pageIndex + 1) + ' / ' + otherArticles.pageCount;
        }


        // =========================
        // Get Artile OtherArticle Group
        // =========================
        function getArticleOtherArticleGroupForComboBox(otherArticleGroupId, accountId) {
            var articleOtherArticleGroupsObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/otherArticle/dropdown/list/otherArticleGroup',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            articleOtherArticleGroupsObservableArray.push({
                                Id: results[i]["Id"],
                                ArticleGroup: results[i]["ArticleGroup"],
                                AccountId: results[i]["AccountId"],
                                SalesAccountId: results[i]["SalesAccountId"],
                                CostAccountId: results[i]["CostAccountId"],
                                AssetAccountId: results[i]["AssetAccountId"],
                                ExpenseAccountId: results[i]["ExpenseAccountId"],
                            });
                        }
                    }

                    var disabled = true;
                    if (results.length > 0) {
                        disabled = false;
                        $('#cmdSaveOtherArticleButton').prop('disabled', false);
                    } else {
                        $('#cmdSaveOtherArticleButton').prop('disabled', true);
                    }

                    cboOtherArticleGroup.dispose();
                    cboOtherArticleGroup = new wijmo.input.ComboBox('#cboOtherArticleGroup', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: articleOtherArticleGroupsObservableArray,
                        displayMemberPath: "ArticleGroup",
                        selectedValuePath: "Id",
                        selectedValue: otherArticleGroupId,
                        onSelectedIndexChanged: function () {
                            cboOtherArticleAccountCode.selectedValue = this.selectedItem["AccountId"];
                            cboOtherArticleAccount.selectedValue = this.selectedItem["AccountId"];
                        }
                    });

                    getOtherArticleAccountForComboBox(accountId);
                }
            });
        }

        // ===========
        // Get Account
        // ===========
        function getOtherArticleAccountForComboBox(accountId) {
            var accountsObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/otherArticle/dropdown/list/otherArticleGroup/account',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            accountsObservableArray.push({
                                Id: results[i]["Id"],
                                AccountCode: results[i]["AccountCode"],
                                Account: results[i]["Account"]
                            });
                        }
                    }

                    var disabled = true;
                    if (results.length > 0) {
                        disabled = false;
                    } else {
                        $('#cmdSaveOtherArticleButton').prop('disabled', true);
                    }

                    var accountIdValue = accountId;
                    if (cboOtherArticleGroup.selectedValue != null) {
                        if (accountId == 0) {
                            accountIdValue = cboOtherArticleGroup.selectedItem["AccountId"];
                        }
                    }

                    cboOtherArticleAccountCode.dispose();
                    cboOtherArticleAccountCode = new wijmo.input.ComboBox('#cboOtherArticleAccountCode', {
                        disabled: true,
                        isEditable: false,
                        itemsSource: accountsObservableArray,
                        displayMemberPath: "AccountCode",
                        selectedValuePath: "Id",
                        selectedValue: accountIdValue,
                        onSelectedIndexChanged: function () {
                            cboOtherArticleAccount.selectedValue = this.selectedValue;
                        }
                    });

                    cboOtherArticleAccount.dispose();
                    cboOtherArticleAccount = new wijmo.input.ComboBox('#cboOtherArticleAccount', {
                        disabled: true,
                        isEditable: false,
                        itemsSource: accountsObservableArray,
                        displayMemberPath: "Account",
                        selectedValuePath: "Id",
                        selectedValue: accountIdValue,
                        onSelectedIndexChanged: function () {
                            cboOtherArticleAccountCode.selectedValue = this.selectedValue;
                        }
                    });

                    setTimeout(function () {
                        $("#loadingModalOtherArticle").hide();
                        $("#otherArticleDetailForm").show();
                    }, 500);
                }
            });
        }

        // ================
        // Add new OtherArticle
        // ================
        function btnOtherArticleAdd_OnClick() {
            $('#otherArticleEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $('.requiredOtherArticle').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            $("#loadingModalOtherArticle").show();
            document.getElementById("loadingModalOtherArticle").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#otherArticleDetailForm").hide();

            document.getElementById("cmdSaveOtherArticleButton").innerHTML = '<i class="fa fa-save"></i> Save';
            $('#cmdSaveOtherArticleButton').prop('disabled', true);
            $('#cmdOtherArticleDetailCloseButton').prop('disabled', false);

            $('#otherArticle_Code').hide();
            $('#otherArticle_Code_Label').hide();
            $('#otherArticle_Code_Input').hide();

            otherArticleId = 0;
            document.getElementById('otherArticle_Code').value = "NA";
            document.getElementById('otherArticle_ContactPerson').value = "NA";
            document.getElementById('inpManualOtherArticleCode').value = "NA";
            document.getElementById('otherArticle_OtherArticle').value = "NA";
            getArticleOtherArticleGroupForComboBox(0, 0, false);
            document.getElementById('otherArticle_Address').value = "NA";
            document.getElementById('otherArticle_ContactNumber').value = "NA";

            document.getElementById('otherArticle_ContactPerson').disabled = false;
            document.getElementById('inpManualOtherArticleCode').disabled = false;
            document.getElementById('otherArticle_OtherArticle').disabled = false;
            document.getElementById('otherArticle_Address').disabled = false;
            document.getElementById('otherArticle_ContactNumber').disabled = false;
        }

        // =============
        // EDIT OtherArticle
        // =============
        function btnEditOtherArticle_OnClick() {
            $('#otherArticleEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $('.requiredOtherArticle').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            $("#loadingModalOtherArticle").show();
            document.getElementById("loadingModalOtherArticle").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#otherArticleDetailForm").hide();

            document.getElementById("cmdSaveOtherArticleButton").innerHTML = '<i class="fa fa-save"></i> Save';
            $('#cmdSaveOtherArticleButton').prop('disabled', true);
            $('#cmdOtherArticleDetailCloseButton').prop('disabled', false);

            $('#otherArticle_Code').show();
            $('#otherArticle_Code_Label').show();
            $('#otherArticle_Code_Input').show();

            otherArticles.editItem(otherArticles.currentItem);
            var otherArticle = otherArticles.currentEditItem;
            otherArticleId = otherArticle.Id;
            document.getElementById('otherArticle_Code').value = otherArticle.ArticleCode;
            document.getElementById('inpManualOtherArticleCode').value = otherArticle.ManualArticleCode;
            document.getElementById('otherArticle_OtherArticle').value = otherArticle.Article;
            getArticleOtherArticleGroupForComboBox(otherArticle.ArticleGroupId, otherArticle.AccountId);
            document.getElementById('otherArticle_Address').value = otherArticle.Address ? otherArticle.Address : '';
            document.getElementById('otherArticle_ContactNumber').value = otherArticle.ContactNumber ? otherArticle.ContactNumber : '';
            document.getElementById('otherArticle_ContactPerson').value = otherArticle.ContactPerson;
        }

        // =========================
        // OtherArticle Entry Validation
        // =========================
        function otherArticleEntryValidation() {
            var isValid = true;
            $('.requiredOtherArticle').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                }
                else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            return isValid;
        }

        // =========================
        // Refresh otherArticle flexgrid
        // =========================
        function refreshOtherArticleFlexgrid() {
            otherArticles = new wijmo.collections.CollectionView(getOtherArticle());
            otherArticles.canFilter = true;
            otherArticles.pageSize = 15;

            var filterTextOtherArticle = '';
            $('#InputFilterOtherArticle').keyup(function () {
                filterTextOtherArticle = this.value.toLowerCase();
                otherArticles.refresh();
            });
            otherArticles.filter = function (item) {
                return !filterTextOtherArticle || (item.ArticleCode.toLowerCase().indexOf(filterTextOtherArticle) > -1)
                    || (item.ManualArticleCode.toLowerCase().indexOf(filterTextOtherArticle) > -1)
                    || (item.Article.toLowerCase().indexOf(filterTextOtherArticle) > -1)
                    || (item.ArticleGroup.toLowerCase().indexOf(filterTextOtherArticle) > -1);
            }
            otherArticles.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsOtherArticle();
            });
            otherArticles.currentChanged.addHandler(function (sender, args) {
                updateDetailsOtherArticle();
            });

            otherArticleGrid.itemsSource = otherArticles;
            otherArticleGrid.trackChanges = true;
        }

        // =============
        // SAVE OtherArticle
        // =============
        function btnOtherArticleSaveButton_OnClick() {
            var otherArticleObject = new Object();
            otherArticleObject.ArticleCode = document.getElementById('otherArticle_Code').value;
            otherArticleObject.ManualArticleCode = document.getElementById('inpManualOtherArticleCode').value;
            otherArticleObject.Article = document.getElementById('otherArticle_OtherArticle').value;
            otherArticleObject.ArticleGroupId = cboOtherArticleGroup.selectedValue;
            otherArticleObject.AccountId = cboOtherArticleAccount.selectedValue;
            otherArticleObject.SalesAccountId = cboOtherArticleGroup.selectedItem["SalesAccountId"];
            otherArticleObject.CostAccountId = cboOtherArticleGroup.selectedItem["CostAccountId"];
            otherArticleObject.AssetAccountId = cboOtherArticleGroup.selectedItem["AssetAccountId"];
            otherArticleObject.ExpenseAccountId = cboOtherArticleGroup.selectedItem["ExpenseAccountId"];
            otherArticleObject.Address = document.getElementById('otherArticle_Address').value;
            otherArticleObject.ContactNumber = document.getElementById('otherArticle_ContactNumber').value;
            otherArticleObject.ContactPerson = document.getElementById('otherArticle_ContactPerson').value;
            var otherArticleData = JSON.stringify(otherArticleObject);

            if (otherArticleEntryValidation()) {
                document.getElementById("cmdSaveOtherArticleButton").innerHTML = '<i class="fa fa-spinner fa-spin"></i> Saving';
                $('#cmdSaveOtherArticleButton').prop('disabled', true);
                $('#cmdOtherArticleDetailCloseButton').prop('disabled', true);

                if (otherArticleId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/otherArticle/add',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: otherArticleData,
                        statusCode: {
                            200: function () {
                                toastr.success("Save Successful");
                                $('#otherArticleEdit').modal('hide');
                                refreshOtherArticleFlexgrid();
                            },
                            404: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                                document.getElementById("cmdSaveOtherArticleButton").innerHTML = '<i class="fa fa-save"></i> Save';
                                $('#cmdSaveOtherArticleButton').prop('disabled', false);
                                $('#cmdOtherArticleDetailCloseButton').prop('disabled', false);
                            },
                            400: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                                document.getElementById("cmdSaveOtherArticleButton").innerHTML = '<i class="fa fa-save"></i> Save';
                                $('#cmdSaveOtherArticleButton').prop('disabled', false);
                                $('#cmdOtherArticleDetailCloseButton').prop('disabled', false);
                            },
                            500: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                                document.getElementById("cmdSaveOtherArticleButton").innerHTML = '<i class="fa fa-save"></i> Save';
                                $('#cmdSaveOtherArticleButton').prop('disabled', false);
                                $('#cmdOtherArticleDetailCloseButton').prop('disabled', false);
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/otherArticle/update/' + otherArticleId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: otherArticleData,
                        statusCode: {
                            200: function () {
                                toastr.success("Update Successful");
                                $('#otherArticleEdit').modal('hide');
                                refreshOtherArticleFlexgrid();
                            },
                            404: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                                document.getElementById("cmdSaveOtherArticleButton").innerHTML = '<i class="fa fa-save"></i> Save';
                                $('#cmdSaveOtherArticleButton').prop('disabled', false);
                                $('#cmdOtherArticleDetailCloseButton').prop('disabled', false);
                            },
                            400: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                                document.getElementById("cmdSaveOtherArticleButton").innerHTML = '<i class="fa fa-save"></i> Save';
                                $('#cmdSaveOtherArticleButton').prop('disabled', false);
                                $('#cmdOtherArticleDetailCloseButton').prop('disabled', false);
                            },
                            500: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                                document.getElementById("cmdSaveOtherArticleButton").innerHTML = '<i class="fa fa-save"></i> Save';
                                $('#cmdSaveOtherArticleButton').prop('disabled', false);
                                $('#cmdOtherArticleDetailCloseButton').prop('disabled', false);
                            }
                        }
                    });
                }
            } else {
                toastr.error("Invalid entry");
            }
        }

        // ===============
        // DELETE OtherArticle
        // ===============
        function btnDeleteOtherArticle_OnClick() {
            otherArticles.editItem(otherArticles.currentItem);
            var otherArticle = otherArticles.currentEditItem;

            $('#deleteOtherArticleConfirm').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById("cmdConfirmDeleteOtherArticle").innerHTML = '<i class="fa fa-trash"></i> Delete';
            $('#cmdConfirmDeleteOtherArticle').prop('disabled', false);
            $('#cmdConfirmDeleteCloseButtonOtherArticle').prop('disabled', false);
        }

        // OtherArticle Confirm Delete Button
        function cmdOtherArticleConfirmDeleteButton_OnClick() {
            document.getElementById("cmdConfirmDeleteOtherArticle").innerHTML = '<i class="fa fa-spinner fa-spin"></i> Deleting';
            $('#cmdConfirmDeleteOtherArticle').prop('disabled', true);
            $('#cmdConfirmDeleteCloseButtonOtherArticle').prop('disabled', true);

            otherArticles.editItem(otherArticles.currentItem);
            var otherArticleId = otherArticles.currentEditItem.Id;

            $.ajax({
                url: '/api/otherArticle/delete/' + otherArticleId,
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Delete Successful");
                        $('#deleteOtherArticleConfirm').modal('hide');
                        refreshOtherArticleFlexgrid();
                    },
                    404: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                        $('#deleteOtherArticleConfirm').modal('hide');
                        document.getElementById("cmdConfirmDeleteOtherArticle").innerHTML = '<i class="fa fa-trash"></i> Delete';
                        $('#cmdConfirmDeleteOtherArticle').prop('disabled', false);
                        $('#cmdConfirmDeleteCloseButtonOtherArticle').prop('disabled', false);
                    },
                    400: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                        $('#deleteOtherArticleConfirm').modal('hide');
                        document.getElementById("cmdConfirmDeleteOtherArticle").innerHTML = '<i class="fa fa-trash"></i> Delete';
                        $('#cmdConfirmDeleteOtherArticle').prop('disabled', false);
                        $('#cmdConfirmDeleteCloseButtonOtherArticle').prop('disabled', false);
                    },
                    500: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                        $('#deleteOtherArticleConfirm').modal('hide');
                        document.getElementById("cmdConfirmDeleteOtherArticle").innerHTML = '<i class="fa fa-trash"></i> Delete';
                        $('#cmdConfirmDeleteOtherArticle').prop('disabled', false);
                        $('#cmdConfirmDeleteCloseButtonOtherArticle').prop('disabled', false);
                    }
                }
            });
        }

        // ========
        // OtherArticle
        // ========
        function otherArticleTab() {
            document.getElementById('otherArticle_Code').disabled = true;

            otherArticles = new wijmo.collections.CollectionView(getOtherArticle());
            otherArticles.canFilter = true;
            otherArticles.pageSize = 15;

            var filterTextOtherArticle = '';
            $('#InputFilterOtherArticle').keyup(function () {
                filterTextOtherArticle = this.value.toLowerCase();
                otherArticles.refresh();
            });
            otherArticles.filter = function (item) {
                return !filterTextOtherArticle || (item.ArticleCode.toLowerCase().indexOf(filterTextOtherArticle) > -1)
                    || (item.ManualArticleCode.toLowerCase().indexOf(filterTextOtherArticle) > -1)
                    || (item.Article.toLowerCase().indexOf(filterTextOtherArticle) > -1)
                    || (item.ArticleGroup.toLowerCase().indexOf(filterTextOtherArticle) > -1);
            }
            otherArticles.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsOtherArticle();
            });
            otherArticles.currentChanged.addHandler(function (sender, args) {
                updateDetailsOtherArticle();
            });

            // Flex Grid for OtherArticle
            otherArticleGrid = new wijmo.grid.FlexGrid('#OtherArticleGrid');
            otherArticleGrid.initialize({
                columns: [
                            @{
                                if (canEdit)
                                {
                                    <text>
                                        {
                                            "header": "Edit",
                                            "binding": "EditId",
                                            "width": 70,
                                            "align": "center",
                                            "allowResizing": false,
                                            "allowSorting": false,
                                            "isContentHtml": true
                                        },
                                    </text>
                                }
                                if (canDelete)
                                {
                                    <text>
                                        {
                                            "header": "Delete",
                                            "binding": "DeleteId",
                                            "width": 70,
                                            "align": "center",
                                            "allowResizing": false,
                                            "allowSorting": false,
                                            "isContentHtml": true
                                        },
                                    </text>
                                }
                            }
                            {
                                "header": "Code",
                                "binding": "ArticleCode",
                                "allowSorting": true,
                                "width": 100
                            },
                            {
                                "header": "Manual Code",
                                "binding": "ManualArticleCode",
                                "allowSorting": true,
                                "width": 120
                            },
                            {
                                "header": "Article",
                                "binding": "Article",
                                "allowSorting": true,
                                "width": "4*"
                            },
                            {
                                "header": "Group",
                                "binding": "ArticleGroup",
                                "allowSorting": true,
                                "width": "3*"
                            }
                ],
                autoGenerateColumns: false,
                itemsSource: otherArticles,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            otherArticleGrid.trackChanges = true;

            //Navigation button for OtherArticle
            btnFirstPageGridOtherArticle = document.getElementById('btnMoveToFirstPageGridOtherArticle');
            btnPreviousPageGridOtherArticle = document.getElementById('btnMoveToPreviousPageGridOtherArticle');
            btnNextPageGridOtherArticle = document.getElementById('btnMoveToNextPageGridOtherArticle');
            btnLastPageGridOtherArticle = document.getElementById('btnMoveToLastPageGridOtherArticle');
            btnCurrentPageGridOtherArticle = document.getElementById('btnCurrentPageGridOtherArticle');

            updateNavigateButtonsOtherArticle();

            btnFirstPageGridOtherArticle.addEventListener('click', function () {
                otherArticles.moveToFirstPage();
                updateNavigateButtonsOtherArticle();
            });
            btnPreviousPageGridOtherArticle.addEventListener('click', function () {
                otherArticles.moveToPreviousPage();
                updateNavigateButtonsOtherArticle();
            });
            btnNextPageGridOtherArticle.addEventListener('click', function () {
                otherArticles.moveToNextPage();
                updateNavigateButtonsOtherArticle();
            });
            btnLastPageGridOtherArticle.addEventListener('click', function () {
                otherArticles.moveToLastPage();
                updateNavigateButtonsOtherArticle();
            });
        }
    </script>

    <!-- ============ -->
    <!-- Status Scripts -->
    <!-- ============ -->
    <script type="text/javascript">
        // =========================
        // Global Variables for Status
        // =========================
        var statuses;
        var statusGrid;
        var btnFirstPageGridStatus;
        var btnPreviousPageGridStatus;
        var btnNextPageGridStatus;
        var btnLastPageGridStatus;
        var btnCurrentPageGridStatus;
        var statusId = 0;

        var cboCategory = new wijmo.input.ComboBox('#cboCategory');

        // =============
        // GET Status List
        // =============
        function getStatus() {
            var statuses = new wijmo.collections.ObservableArray;
            NProgress.start();
            $.ajax({
                url: '/api/status/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            statuses.push({
                                EditId: "<button class='btn btn-primary btn-xs btn-block' onclick='btnEditStatus_OnClick()'><i class='fa fa-edit'></i> Edit</button>",
                                DeleteId: "<button class='btn btn-danger btn-xs btn-block' onclick='btnDeletetStatus_OnClick()'><i class='fa fa-trash'></i> Delete</button>",
                                Id: results[i]["Id"],
                                Status: results[i]["Status"],
                                Category: results[i]["Category"],
                                IsLocked: results[i]["IsLocked"],
                                CreatedBy: results[i]["CreatedBy"],
                                CreatedDateTime: results[i]["CreatedDateTime"],
                                UpdatedBy: results[i]["UpdatedBy"],
                                UpdatedDateTime: results[i]["UpdatedDateTime"]
                            });
                        }
                    }

                    NProgress.done();
                }
            });

            return statuses;
        }

        // ===========================
        // FlexGrid Selection for Status
        // ===========================
        function updateDetailsStatus() {
            var item = statuses.currentItem;
            document.getElementById('createdBy').innerHTML = item.CreatedBy;
            document.getElementById('createdDate').innerHTML = item.CreatedDateTime;
            document.getElementById('updatedBy').innerHTML = item.UpdatedBy;
            document.getElementById('updatedDate').innerHTML = item.UpdatedDateTime;
        }

        // ===========================
        // Navigation Buttons for Status
        // ===========================
        function updateNavigateButtonsStatus() {
            if (statuses.pageSize <= 0) {
                document.getElementById('navigationPageGridStatus').style.display = 'none';
                return;
            }
            document.getElementById('navigationPageGridStatus').style.display = 'block';
            if (statuses.pageIndex === 0) {
                btnFirstPageGridStatus.setAttribute('disabled', 'disabled');
                btnPreviousPageGridStatus.setAttribute('disabled', 'disabled');
                btnNextPageGridStatus.removeAttribute('disabled');
                btnLastPageGridStatus.removeAttribute('disabled');
            } else if (statuses.pageIndex === (statuses.pageCount - 1)) {
                btnFirstPageGridStatus.removeAttribute('disabled');
                btnPreviousPageGridStatus.removeAttribute('disabled');
                btnLastPageGridStatus.setAttribute('disabled', 'disabled');
                btnNextPageGridStatus.setAttribute('disabled', 'disabled');
            } else {
                btnFirstPageGridStatus.removeAttribute('disabled');
                btnPreviousPageGridStatus.removeAttribute('disabled');
                btnNextPageGridStatus.removeAttribute('disabled');
                btnLastPageGridStatus.removeAttribute('disabled');
            }
            btnCurrentPageGridStatus.innerHTML = (statuses.pageIndex + 1) + ' / ' + statuses.pageCount;
        }

        // ======================
        // Create Status Category
        // ======================
        function createComboBoxStatusCategory(category) {
            var categoryObservableArray = [
                "PO",
                "RR",
                "SI",
                "OR",
                "CV",
                "JV",
                "IN",
                "OT",
                "ST",
                "SC",
                "SW",
                "PR",
                "IP"
            ];

            cboCategory.dispose();
            cboCategory = new wijmo.input.ComboBox('#cboCategory', {
                isEditable: false,
                itemsSource: categoryObservableArray,
                selectedValue: category
            });
        }

        // ============
        // Add new Status
        // ============
        function btnStatusAdd_OnClick() {
            $('#statusEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $('.requiredStatus').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            $("#loadingModalStatus").show();
            document.getElementById("loadingModalStatus").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#StatusDetailForm").hide();

            document.getElementById("cmdSaveStatusButton").innerHTML = '<i class="fa fa-save"></i> Save';
            $('#cmdSaveStatusButton').prop('disabled', true);
            $('#cmdStatusDetailCloseButton').prop('disabled', false);

            statusId = 0;
            document.getElementById('status_Status').value = "NA";
            document.getElementById('status_Status').disabled = false;

            createComboBoxStatusCategory("PO");

            setTimeout(function () {
                $("#loadingModalStatus").hide();
                $("#StatusDetailForm").show();
                $('#cmdSaveStatusButton').prop('disabled', false);
            }, 500);
        }

        // =========
        // Edit Status
        // =========
        function btnEditStatus_OnClick() {
            $('#statusEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $('.requiredStatus').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            $("#loadingModalStatus").show();
            document.getElementById("loadingModalStatus").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#StatusDetailForm").hide();

            document.getElementById("cmdSaveStatusButton").innerHTML = '<i class="fa fa-save"></i> Save';
            $('#cmdSaveStatusButton').prop('disabled', true);
            $('#cmdStatusDetailCloseButton').prop('disabled', false);

            statuses.editItem(statuses.currentItem);
            var status = statuses.currentEditItem;
            statusId = status.Id ? status.Id : '';
            document.getElementById('status_Status').value = status.Status ? status.Status : '';

            createComboBoxStatusCategory(status.Category ? status.Category : '');

            setTimeout(function () {
                $("#loadingModalStatus").hide();
                $("#StatusDetailForm").show();
                $('#cmdSaveStatusButton').prop('disabled', false);
            }, 500);
        }

        // =====================
        // Status Entry Validation
        // =====================
        function statusEntryValidation() {
            var isValid = true;
            $('.requiredStatus').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                } else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            return isValid;
        }

        // =====================
        // Refresh Status Flexgrid
        // =====================
        function refreshStatusFlexgrid() {
            statuses = new wijmo.collections.CollectionView(getStatus());
            statuses.canFilter = true;
            statuses.pageSize = 15;

            var filterTextStatus = '';
            $('#InputFilterStatus').keyup(function () {
                filterTextStatus = this.value.toLowerCase();
                statuses.refresh();
            });
            statuses.filter = function (item) {
                return !filterTextStatus || (item.Status.toLowerCase().indexOf(filterTextStatus) > -1)
                    || (item.Category.toLowerCase().indexOf(filterTextStatus) > -1);
            }
            statuses.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsStatus();
            });
            statuses.currentChanged.addHandler(function (sender, args) {
                updateDetailsStatus();
            });

            statusGrid.itemsSource = statuses;
            statusGrid.trackChanges = true;
        }

        // =========
        // SAVE Status
        // =========
        function btnStatusSaveButton_OnClick() {
            var statusObject = new Object();
            statusObject.Status = document.getElementById('status_Status').value;
            statusObject.Category = cboCategory.selectedValue;
            var statusData = JSON.stringify(statusObject);

            if (statusEntryValidation()) {
                document.getElementById("cmdSaveStatusButton").innerHTML = '<i class="fa fa-spinner fa-spin"></i> Saving';
                $('#cmdSaveStatusButton').prop('disabled', true);
                $('#cmdStatusDetailCloseButton').prop('disabled', true);

                if (statusId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/status/add',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: statusData,
                        statusCode: {
                            200: function () {
                                toastr.success("Save Successful");
                                $('#statusEdit').modal('hide');
                                refreshStatusFlexgrid();
                            },
                            404: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                                document.getElementById("cmdSaveStatusButton").innerHTML = '<i class="fa fa-save"></i> Save';
                                $('#cmdSaveStatusButton').prop('disabled', false);
                                $('#cmdStatusDetailCloseButton').prop('disabled', false);
                            },
                            400: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                                document.getElementById("cmdSaveStatusButton").innerHTML = '<i class="fa fa-save"></i> Save';
                                $('#cmdSaveStatusButton').prop('disabled', false);
                                $('#cmdStatusDetailCloseButton').prop('disabled', false);
                            },
                            500: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                                document.getElementById("cmdSaveStatusButton").innerHTML = '<i class="fa fa-save"></i> Save';
                                $('#cmdSaveStatusButton').prop('disabled', false);
                                $('#cmdStatusDetailCloseButton').prop('disabled', false);
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/status/update/' + statusId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: statusData,
                        statusCode: {
                            200: function () {
                                toastr.success("Update Successful");
                                $('#statusEdit').modal('hide');
                                refreshStatusFlexgrid();
                            },
                            404: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                                document.getElementById("cmdSaveStatusButton").innerHTML = '<i class="fa fa-save"></i> Save';
                                $('#cmdSaveStatusButton').prop('disabled', false);
                                $('#cmdStatusDetailCloseButton').prop('disabled', false);
                            },
                            400: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                                document.getElementById("cmdSaveStatusButton").innerHTML = '<i class="fa fa-save"></i> Save';
                                $('#cmdSaveStatusButton').prop('disabled', false);
                                $('#cmdStatusDetailCloseButton').prop('disabled', false);
                            },
                            500: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                                document.getElementById("cmdSaveStatusButton").innerHTML = '<i class="fa fa-save"></i> Save';
                                $('#cmdSaveStatusButton').prop('disabled', false);
                                $('#cmdStatusDetailCloseButton').prop('disabled', false);
                            }
                        }
                    });
                }
            } else {
                toastr.error("Invalid entry");
            }
        }

        // ===========
        // DELETE Status
        // ===========
        function btnDeletetStatus_OnClick() {
            statuses.editItem(statuses.currentItem);
            var status = statuses.currentEditItem;

            $('#deleteStatusConfirm').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById("cmdConfirmDeleteStatus").innerHTML = '<i class="fa fa-trash"></i> Delete';
            $('#cmdConfirmDeleteStatus').prop('disabled', false);
            $('#cmdConfirmDeleteCloseButtonStatus').prop('disabled', false);
        }

        // Status Confirm Delete Button
        function cmdStatusConfirmDeleteButton_OnClick() {
            document.getElementById("cmdConfirmDeleteStatus").innerHTML = '<i class="fa fa-spinner fa-spin"></i> Deleting';
            $('#cmdConfirmDeleteStatus').prop('disabled', true);
            $('#cmdConfirmDeleteCloseButtonStatus').prop('disabled', true);

            statuses.editItem(statuses.currentItem);
            var statusId = statuses.currentEditItem.Id;

            $.ajax({
                url: '/api/status/delete/' + statusId,
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Delete Successful");
                        $('#deleteStatusConfirm').modal('hide');
                        refreshStatusFlexgrid();
                    },
                    404: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                        $('#deleteStatusConfirm').modal('hide');
                        document.getElementById("cmdConfirmDeleteStatus").innerHTML = '<i class="fa fa-trash"></i> Delete';
                        $('#cmdConfirmDeleteStatus').prop('disabled', false);
                        $('#cmdConfirmDeleteCloseButtonStatus').prop('disabled', false);
                    },
                    400: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                        $('#deleteStatusConfirm').modal('hide');
                        document.getElementById("cmdConfirmDeleteStatus").innerHTML = '<i class="fa fa-trash"></i> Delete';
                        $('#cmdConfirmDeleteStatus').prop('disabled', false);
                        $('#cmdConfirmDeleteCloseButtonStatus').prop('disabled', false);
                    },
                    500: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                        $('#deleteStatusConfirm').modal('hide');
                        document.getElementById("cmdConfirmDeleteStatus").innerHTML = '<i class="fa fa-trash"></i> Delete';
                        $('#cmdConfirmDeleteStatus').prop('disabled', false);
                        $('#cmdConfirmDeleteCloseButtonStatus').prop('disabled', false);
                    }
                }
            });
        }

        // ====
        // Status
        // ====
        function statusTab() {
            statuses = new wijmo.collections.CollectionView(getStatus());
            statuses.canFilter = true;
            statuses.pageSize = 15;

            var filterTextStatus = '';
            $('#InputFilterStatus').keyup(function () {
                filterTextStatus = this.value.toLowerCase();
                statuses.refresh();
            });
            statuses.filter = function (item) {
                return !filterTextStatus || (item.Status.toLowerCase().indexOf(filterTextStatus) > -1)
                    || (item.Category.toLowerCase().indexOf(filterTextStatus) > -1);
            }
            statuses.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsStatus();
            });
            statuses.currentChanged.addHandler(function (sender, args) {
                updateDetailsStatus();
            });

            // Flex Grid for Status
            statusGrid = new wijmo.grid.FlexGrid('#StatusGrid');
            statusGrid.initialize({
                columns: [
                           @{
                                if (canEdit)
                                {
                                    <text>
                                        {
                                            "header": "Edit",
                                            "binding": "EditId",
                                            "width": 70,
                                            "align": "center",
                                            "allowResizing": false,
                                            "allowSorting": false,
                                            "isContentHtml": true
                                        },
                                    </text>
                                }
                                if (canDelete)
                                {
                                    <text>
                                        {
                                            "header": "Delete",
                                            "binding": "DeleteId",
                                            "width": 70,
                                            "align": "center",
                                            "allowResizing": false,
                                            "allowSorting": false,
                                            "isContentHtml": true
                                        },
                                    </text>
                                }
                            }
                            {
                                "header": "Status",
                                "binding": "Status",
                                "allowSorting": true,
                                "width": "3*",
                            },

                            {
                                "header": "Category",
                                "binding": "Category",
                                "allowSorting": true,
                                "width": "3*",
                            }
                ],
                autoGenerateColumns: false,
                itemsSource: statuses,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            statusGrid.trackChanges = true;

            btnFirstPageGridStatus = document.getElementById('btnMoveToFirstPageGridStatus');
            btnPreviousPageGridStatus = document.getElementById('btnMoveToPreviousPageGridStatus');
            btnNextPageGridStatus = document.getElementById('btnMoveToNextPageGridStatus');
            btnLastPageGridStatus = document.getElementById('btnMoveToLastPageGridStatus');
            btnCurrentPageGridStatus = document.getElementById('btnCurrentPageGridStatus');

            updateNavigateButtonsStatus();

            btnFirstPageGridStatus.addEventListener('click', function () {
                statuses.moveToFirstPage();
                updateNavigateButtonsStatus();
            });

            btnPreviousPageGridStatus.addEventListener('click', function () {
                statuses.moveToPreviousPage();
                updateNavigateButtonsStatus();
            });

            btnNextPageGridStatus.addEventListener('click', function () {
                statuses.moveToNextPage();
                updateNavigateButtonsStatus();
            });

            btnLastPageGridStatus.addEventListener('click', function () {
                statuses.moveToLastPage();
                updateNavigateButtonsStatus();
            });
        }
    </script>

    <!-- ================================ -->
    <!-- Tab Current Page on Load Scripts -->
    <!-- ================================ -->
    <script type="text/javascript">
        // ============
        // TABS - Event
        // ============
        $('#discountTabId').click(function () {
            $('#Discount').show();
            $('#PayType').hide();
            $('#Tax').hide();
            $('#Unit').hide();
            $('#Term').hide();
            $('#Employee').hide();
            $('#ArticleGroup').hide();
            $('#OtherArticle').hide();
            $('#UserRole').hide();
            $('#Status').hide();
            window.discountTab = function () {
                return true;
            };
            refreshDiscountFlexgrid();
        });

        $('#payTypeTabId').click(function () {
            $('#Discount').hide();
            $('#PayType').show();
            $('#Tax').hide();
            $('#Unit').hide();
            $('#Term').hide();
            $('#Employee').hide();
            $('#ArticleGroup').hide();
            $('#OtherArticle').hide();
            $('#UserRole').hide();
            $('#Status').hide();
            payTypeTab();
            window.payTypeTab = function () {
                return true;
            };
            refreshPayTypeFlexgrid();
        });

        $('#taxTabId').click(function () {
            $('#Discount').hide();
            $('#PayType').hide();
            $('#Tax').show();
            $('#Unit').hide();
            $('#Term').hide();
            $('#Employee').hide();
            $('#ArticleGroup').hide();
            $('#OtherArticle').hide();
            $('#UserRole').hide();
            $('#Status').hide();
            taxTab();
            window.taxTab = function () {
                return true;
            };
            refreshTaxTypeFlexgrid();
        });

        $('#unitTabId').click(function () {
            $('#Discount').hide();
            $('#PayType').hide();
            $('#Tax').hide();
            $('#Unit').show();
            $('#Term').hide();
            $('#Employee').hide();
            $('#ArticleGroup').hide();
            $('#OtherArticle').hide();
            $('#UserRole').hide();
            $('#Status').hide();
            unitTab();
            window.unitTab = function () {
                return true;
            };
            refreshUnitFlexgrid();
        });

        $('#termTabId').click(function () {
            $('#Discount').hide();
            $('#PayType').hide();
            $('#Tax').hide();
            $('#Unit').hide();
            $('#Term').show();
            $('#Employee').hide();
            $('#ArticleGroup').hide();
            $('#OtherArticle').hide();
            $('#UserRole').hide();
            $('#Status').hide();
            termTab();
            window.termTab = function () {
                return true;
            };
            refreshTermFlexgrid();
        });

        $('#articleGroupTabId').click(function () {
            $('#Discount').hide();
            $('#PayType').hide();
            $('#Tax').hide();
            $('#Unit').hide();
            $('#Term').hide();
            $('#Employee').hide();
            $('#ArticleGroup').show();
            $('#OtherArticle').hide();
            $('#UserRole').hide();
            $('#Status').hide();
            articleGroupTab();
            window.articleGroupTab = function () {
                return true;
            };
            refreshArticleGroupFlexgrid();
        });

        $('#employeeTabId').click(function () {
            $('#Discount').hide();
            $('#PayType').hide();
            $('#Tax').hide();
            $('#Unit').hide();
            $('#Term').hide();
            $('#Employee').show();
            $('#ArticleGroup').hide();
            $('#OtherArticle').hide();
            $('#UserRole').hide();
            $('#Status').hide();
            employeeTab();
            window.employeeTab = function () {
                return true;
            };
            refreshEmployeeFlexgrid();
        });

        $('#otherArticleTabId').click(function () {
            $('#Discount').hide();
            $('#PayType').hide();
            $('#Tax').hide();
            $('#Unit').hide();
            $('#Term').hide();
            $('#Employee').hide();
            $('#ArticleGroup').hide();
            $('#OtherArticle').show();
            $('#UserRole').hide();
            $('#Status').hide();
            otherArticleTab();
            window.otherArticleTab = function () {
                return true;
            };
            refreshOtherArticleFlexgrid();
        });

        $('#userRoleTabId').click(function () {
            $('#Discount').hide();
            $('#PayType').hide();
            $('#Tax').hide();
            $('#Unit').hide();
            $('#Term').hide();
            $('#Employee').hide();
            $('#ArticleGroup').hide();
            $('#OtherArticle').hide();
            $('#UserRole').show();
            $('#Status').hide();
            //otherArticleTab();
            //window.otherArticleTab = function () {
            //    return true;
            //};
            //refreshOtherArticleFlexgrid();
        });

        $('#statusTabId').click(function () {
            $('#Discount').hide();
            $('#PayType').hide();
            $('#Tax').hide();
            $('#Unit').hide();
            $('#Term').hide();
            $('#Employee').hide();
            $('#ArticleGroup').hide();
            $('#OtherArticle').hide();
            $('#UserRole').hide();
            $('#Status').show();
            statusTab();
            window.statusTab = function () {
                return true;
            };
            refreshStatusFlexgrid();
        });

        $(document).ready(function () {
            // ==================
            // On load - discount
            // ==================
            $('#Discount').show();
            $('#PayType').hide();
            $('#Tax').hide();
            $('#Unit').hide();
            $('#Term').hide();
            $('#Employee').hide();
            $('#ArticleGroup').hide();
            $('#OtherArticle').hide();
            $('#UserRole').hide();
            $('#Status').hide();

            discountTab();

            $(document).on('show.bs.modal', '.modal', function (event) {
                var zIndex = 1040 + (10 * $('.modal:visible').length);
                $(this).css('z-index', zIndex);
                setTimeout(function () {
                    $('.modal-backdrop').not('.modal-stack').css('z-index', zIndex - 1).addClass('modal-stack');
                }, 0);
            });

            $(document).on('hidden.bs.modal', '.modal', function () {
                $('.modal:visible').length && $(document.body).addClass('modal-open');
            });
        });
    </script>
    <script type="text/javascript">
        var cboUserBranches = new wijmo.input.ComboBox('#cboUserBranches');
        function getUserBranches() {
            $("#loadingUserBranches").show();
            document.getElementById("loadingUserBranches").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#userBranchContent").hide();

            $('#userBranchesModal').modal({ show: true, backdrop: 'static' });

            document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
            $("#updateUserBranch").prop("disabled", false);
            $("#closeUserBranch").prop("disabled", false);

            var userBranchesObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/userBranch/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (userBranchesResults) {
                    if (userBranchesResults.length > 0) {
                        for (i = 0; i < userBranchesResults.length; i++) {
                            userBranchesObservableArray.push({
                                BranchId: userBranchesResults[i]["BranchId"],
                                Branch: userBranchesResults[i]["Branch"]
                            });
                        }
                    }

                    var currentBranch = "@ViewData["BranchId"]";
                    cboUserBranches.dispose();
                    cboUserBranches = new wijmo.input.ComboBox('#cboUserBranches', {
                        isEditable: false,
                        placeholder: "Select Branches",
                        itemsSource: userBranchesObservableArray,
                        displayMemberPath: "Branch",
                        selectedValuePath: "BranchId",
                        selectedValue: currentBranch
                    });

                    setTimeout(function () {
                        $("#loadingUserBranches").hide();
                        $("#userBranchContent").show();
                    }, 500)
                }
            });
        }

        function updateUserBranchOnclick() {
            document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Updating";
            $("#updateUserBranch").prop("disabled", true);
            $("#closeUserBranch").prop("disabled", true);

            var userBranchObject = new Object();
            userBranchObject.BranchId = cboUserBranches.selectedValue;
            var userBranchData = JSON.stringify(userBranchObject);

            $.ajax({
                type: "PUT",
                url: '/api/userBranch/update',
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: userBranchData,
                statusCode: {
                    200: function () {
                        toastr.success("Update Successful");
                        window.setTimeout(function () {
                            location.reload()
                        }, 1000);
                    },
                    404: function () {
                        toastr.error("Not Found");
                        document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
                        $("#updateUserBranch").prop("disabled", false);
                        $("#closeUserBranch").prop("disabled", false);
                    },
                    500: function () {
                        toastr.error("Bad Request");
                        document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
                        $("#updateUserBranch").prop("disabled", false);
                        $("#closeUserBranch").prop("disabled", false);
                    }
                }
            });
        }
    </script>
    <script type="text/javascript">
        var slideLeft = new Menu({
            wrapper: '#o-wrapper',
            type: 'slide-left',
            menuOpenerClass: '.c-button',
            maskId: '#c-mask'
        });

        var slideLeftBtn = document.querySelector('#c-button--slide-left');

        slideLeftBtn.addEventListener('click', function (e) {
            e.preventDefault;
            slideLeft.open();
        });
    </script>
</body>
</html>