<!DOCTYPE html>
<html>
<head>
    <!-- Meta -->
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">

    <!-- Title of the Page -->
    <title>System Tables</title>

    <!-- CSS StyleSheets-->
    @Styles.Render("~/Content/Software-css")
</head>
<body>
    <div id="o-wrapper" class="o-wrapper">
        <!-- Header -->
        @Html.Partial("_SoftwareHeader")

        <!-- Section -->
        <section>
            <div class="sub-nav">
                <div class="container">
                    <h4><i class="fa fa-table"></i> System Tables</h4>
                </div>
                <div class="div_Current_Page">
                    <div class="container">
                        <a href="@Url.Action("Index", "Software")" class="currentPageLinkCustom">Main Menu</a> > System Tables
                    </div>
                </div>
            </div>
            <div class="container">
                <ul class="nav nav-tabs pill-custom" role="tablist" id="myTab">
                    <li role="presentation" class="active"><a data-toggle="tab" href="#Discount" id="discountTabId">Discount</a></li>
                    <li role="presentation"><a data-toggle="tab" href="#PayType" id="payTypeTabId">Pay Type</a></li>
                    <li role="presentation"><a data-toggle="tab" href="#Tax" id="taxTabId">Tax</a></li>
                    <li role="presentation"><a data-toggle="tab" href="#Unit" id="unitTabId">Unit</a></li>
                    <li role="presentation"><a data-toggle="tab" href="#Term" id="termTabId">Terms</a></li>
                    <li role="presentation"><a data-toggle="tab" href="#Employee" id="employeeTabId">Employees</a></li>
                    <li role="presentation"><a data-toggle="tab" href="#ArticleGroup" id="articleGroupTabId">Article Groups</a></li>
                    <li role="presentation"><a data-toggle="tab" href="#OtherArticle" id="otherArticleTabId">Other Articles</a></li>
                </ul>
                <br />
                <!-- Discount -->
                <div id="Discount" class="tab-pane fade in active">
                    <div class="row">
                        <div class="col-lg-12">
                            <h4>Discount</h4>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-lg-4">
                            <div class="input-group input-group-sm">
                                <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                <input type="text" class="form-control input-sm" id="InputFilterDiscount" placeholder="Search">
                            </div>
                        </div>
                        <div class="col-lg-8" align="right">
                            <button class="btn btn-primary btn-sm" onclick="btnDiscountAdd_OnClick()"><i class="fa fa-plus"></i> Add</button>
                            <a href="@Url.Action("Index", "Software")" class="btn btn-danger btn-sm" id="cmdCloseButtonCompany"><i class="fa fa-times"></i> Close</a>
                        </div>
                    </div>
                    <br />
                    <div class="row" align="left">
                        <div class="col-lg-12">
                            <div id="DiscountGrid" class="grid" align="left"></div>
                        </div>
                    </div>
                    <br />
                    <div class="row">
                        <div class="btn-group col-md-7" id="navigationPageGridDiscount">
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToFirstPageGridDiscount">
                                <span class="glyphicon glyphicon-fast-backward"></span>
                            </button>
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToPreviousPageGridDiscount">
                                <span class="glyphicon glyphicon-step-backward"></span>
                            </button>
                            <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnCurrentPageGridDiscount"></button>
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToNextPageGridDiscount">
                                <span class="glyphicon glyphicon-step-forward"></span>
                            </button>
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToLastPageGridDiscount">
                                <span class="glyphicon glyphicon-fast-forward"></span>
                            </button>
                        </div>
                    </div>
                </div>
                <!-- Pay Type -->
                <div id="PayType" class="tab-pane fade">
                    <div class="row">
                        <div class="col-lg-12">
                            <h4>Pay Type</h4>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-lg-4">
                            <div class="input-group input-group-sm">
                                <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                <input type="text" class="form-control input-sm" id="InputFilterPayType" placeholder="Search">
                            </div>
                        </div>
                        <div class="col-lg-8" align="right">
                            <button class="btn btn-primary btn-sm" onclick="btnPayTypeAdd_OnClick()"><i class="fa fa-plus"></i> Add</button>
                            <a href="@Url.Action("Index", "Software")" class="btn btn-danger btn-sm" id="cmdCloseButtonCompany"><i class="fa fa-times"></i> Close</a>
                        </div>
                    </div>
                    <br />
                    <div class="row" align="left">
                        <div class="col-lg-12">
                            <div id="PayTypeGrid" class="grid" align="left"></div>
                        </div>
                    </div>
                    <br />
                    <div class="row">
                        <div class="btn-group col-md-7" id="navigationPageGridPayType">
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToFirstPageGridPayType">
                                <span class="glyphicon glyphicon-fast-backward"></span>
                            </button>
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToPreviousPageGridPayType">
                                <span class="glyphicon glyphicon-step-backward"></span>
                            </button>
                            <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnCurrentPageGridPayType"></button>
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToNextPageGridPayType">
                                <span class="glyphicon glyphicon-step-forward"></span>
                            </button>
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToLastPageGridPayType">
                                <span class="glyphicon glyphicon-fast-forward"></span>
                            </button>
                        </div>
                    </div>
                </div>
                <!-- Tax -->
                <div id="Tax" class="tab-pane fade">
                    <div class="row">
                        <div class="col-lg-12">
                            <h4>Tax</h4>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-lg-4">
                            <div class="input-group input-group-sm">
                                <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                <input type="text" class="form-control input-sm" id="InputFilterTax" placeholder="Search">
                            </div>
                        </div>
                        <div class="col-lg-8" align="right">
                            <button class="btn btn-primary btn-sm" onclick="btnTaxAdd_OnClick()"><i class="fa fa-plus"></i> Add</button>
                            <a href="@Url.Action("Index", "Software")" class="btn btn-danger btn-sm" id="cmdCloseButtonCompany"><i class="fa fa-times"></i> Close</a>
                        </div>
                    </div>
                    <br />
                    <div class="row" align="left">
                        <div class="col-lg-12">
                            <div id="TaxGrid" class="grid" align="left"></div>
                        </div>
                    </div>
                    <br />
                    <div class="row">
                        <div class="btn-group col-md-7" id="navigationPageGridTax">
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToFirstPageGridTax">
                                <span class="glyphicon glyphicon-fast-backward"></span>
                            </button>
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToPreviousPageGridTax">
                                <span class="glyphicon glyphicon-step-backward"></span>
                            </button>
                            <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnCurrentPageGridTax"></button>
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToNextPageGridTax">
                                <span class="glyphicon glyphicon-step-forward"></span>
                            </button>
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToLastPageGridTax">
                                <span class="glyphicon glyphicon-fast-forward"></span>
                            </button>
                        </div>
                    </div>
                </div>
                <!-- Unit -->
                <div id="Unit" class="tab-pane fade">
                    <div class="row">
                        <div class="col-lg-12">
                            <h4>Unit</h4>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-lg-4">
                            <div class="input-group input-group-sm">
                                <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                <input type="text" class="form-control input-sm" id="InputFilterUnit" placeholder="Search">
                            </div>
                        </div>
                        <div class="col-lg-8" align="right">
                            <buton class="btn btn-primary btn-sm" onclick="btnUnitAdd_OnClick()"><i class="fa fa-plus"></i> Add</buton>
                            <a href="@Url.Action("Index", "Software")" class="btn btn-danger btn-sm" id="cmdCloseButtonCompany"><i class="fa fa-times"></i> Close</a>
                        </div>
                    </div>
                    <br />
                    <div class="row" align="left">
                        <div class="col-lg-12">
                            <div id="UnitGrid" class="grid" align="left"></div>
                        </div>
                    </div>
                    <br />
                    <div class="row">
                        <div class="btn-group col-md-7" id="navigationPageGridUnit">
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToFirstPageGridUnit">
                                <span class="glyphicon glyphicon-fast-backward"></span>
                            </button>
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToPreviousPageGridUnit">
                                <span class="glyphicon glyphicon-step-backward"></span>
                            </button>
                            <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnCurrentPageGridUnit"></button>
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToNextPageGridUnit">
                                <span class="glyphicon glyphicon-step-forward"></span>
                            </button>
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToLastPageGridUnit">
                                <span class="glyphicon glyphicon-fast-forward"></span>
                            </button>
                        </div>
                    </div>
                </div>
                <!-- Terms -->
                <div id="Term" class="tab-pane fade">
                    <div class="row">
                        <div class="col-lg-12">
                            <h4>Term</h4>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-lg-4">
                            <div class="input-group input-group-sm">
                                <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                <input type="text" class="form-control input-sm" id="InputFilterTerm" placeholder="Search">
                            </div>
                        </div>
                        <div class="col-lg-8" align="right">
                            <a href="#" class="btn btn-primary btn-sm" onclick="btnTermAdd_OnClick()"><i class="fa fa-plus"></i> Add</a>
                            <a href="@Url.Action("Index", "Software")" class="btn btn-danger btn-sm" id="cmdCloseButtonCompany"><i class="fa fa-times"></i> Close</a>
                        </div>
                    </div>
                    <br />
                    <div class="row" align="left">
                        <div class="col-lg-12">
                            <div id="TermGrid" class="grid" align="left"></div>
                        </div>
                    </div>
                    <br />
                    <div class="row">
                        <div class="btn-group col-md-7" id="navigationPageGridTerm">
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToFirstPageGridTerm">
                                <span class="glyphicon glyphicon-fast-backward"></span>
                            </button>
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToPreviousPageGridTerm">
                                <span class="glyphicon glyphicon-step-backward"></span>
                            </button>
                            <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnCurrentPageGridTerm"></button>
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToNextPageGridTerm">
                                <span class="glyphicon glyphicon-step-forward"></span>
                            </button>
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToLastPageGridTerm">
                                <span class="glyphicon glyphicon-fast-forward"></span>
                            </button>
                        </div>
                    </div>
                </div>
                <!-- Employees -->
                <div id="Employee" class="tab-pane fade">
                    <div class="row">
                        <div class="col-lg-12">
                            <h4>Employee</h4>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-lg-4">
                            <div class="input-group input-group-sm">
                                <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                <input type="text" class="form-control input-sm" id="InputFilterEmployee" placeholder="Search">
                            </div>
                        </div>
                        <div class="col-lg-8" align="right">
                            <button class="btn btn-primary btn-sm" onclick="btnEmployeeAdd_OnClick()"><i class="fa fa-plus"></i> Add</button>
                            <a href="@Url.Action("Index", "Software")" class="btn btn-danger btn-sm" id="cmdCloseButtonCompany"><i class="fa fa-times"></i> Close</a>
                        </div>
                    </div>
                    <br />
                    <div class="row" align="left">
                        <div class="col-lg-12">
                            <div id="EmployeeGrid" class="grid" align="left"></div>
                        </div>
                    </div>
                    <br />
                    <div class="row">
                        <div class="btn-group col-md-7" id="navigationPageGridEmployee">
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToFirstPageGridEmployee">
                                <span class="glyphicon glyphicon-fast-backward"></span>
                            </button>
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToPreviousPageGridEmployee">
                                <span class="glyphicon glyphicon-step-backward"></span>
                            </button>
                            <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnCurrentPageGridEmployee"></button>
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToNextPageGridEmployee">
                                <span class="glyphicon glyphicon-step-forward"></span>
                            </button>
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToLastPageGridEmployee">
                                <span class="glyphicon glyphicon-fast-forward"></span>
                            </button>
                        </div>
                    </div>
                </div>
                <!-- Article Group -->
                <div id="ArticleGroup" class="tab-pane fade">
                    <div class="row">
                        <div class="col-lg-12">
                            <h4>Article Groups</h4>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-lg-4">
                            <div class="input-group input-group-sm">
                                <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                <input type="text" class="form-control input-sm" id="InputFilterArticleGroup" placeholder="Search">
                            </div>
                        </div>
                        <div class="col-lg-8" align="right">
                            <button class="btn btn-primary btn-sm" onclick="btnAddArtileGroup_OnClick()"><i class="fa fa-plus"></i> Add</button>
                            <a href="@Url.Action("Index", "Software")" class="btn btn-danger btn-sm" id="cmdCloseButtonCompany"><i class="fa fa-times"></i> Close</a>
                        </div>
                    </div>
                    <br />
                    <div class="row" align="left">
                        <div class="col-lg-12">
                            <div id="ArticleGroupGrid" class="grid" align="left"></div>
                        </div>
                    </div>
                    <br />
                    <div class="row">
                        <div class="btn-group col-md-7" id="navigationPageGridArticleGroup">
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToFirstPageGridArticleGroup">
                                <span class="glyphicon glyphicon-fast-backward"></span>
                            </button>
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToPreviousPageGridArticleGroup">
                                <span class="glyphicon glyphicon-step-backward"></span>
                            </button>
                            <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnCurrentPageGridArticleGroup"></button>
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToNextPageGridArticleGroup">
                                <span class="glyphicon glyphicon-step-forward"></span>
                            </button>
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToLastPageGridArticleGroup">
                                <span class="glyphicon glyphicon-fast-forward"></span>
                            </button>
                        </div>
                    </div>
                </div>
                <!-- Other Article -->
                <div id="OtherArticle" class="tab-pane fade">
                    <div class="row">
                        <div class="col-lg-12">
                            <h4>Other Article</h4>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-lg-4">
                            <div class="input-group input-group-sm">
                                <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                <input type="text" class="form-control input-sm" id="InputFilterOtherArticle" placeholder="Search">
                            </div>
                        </div>
                        <div class="col-lg-8" align="right">
                            <button class="btn btn-primary btn-sm" onclick="btnAddArticle_OnClick()"><i class="fa fa-plus"></i> Add</button>
                            <a href="@Url.Action("Index", "Software")" class="btn btn-danger btn-sm" id="cmdCloseButtonCompany"><i class="fa fa-times"></i> Close</a>
                        </div>
                    </div>
                    <br />
                    <div class="row" align="left">
                        <div class="col-lg-12">
                            <div id="OtherArticleGrid" class="grid" align="left"></div>
                        </div>
                    </div>
                    <br />
                    <div class="row">
                        <div class="btn-group col-md-7" id="navigationPageGridOtherArticle">
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToFirstPageGridOtherArticle">
                                <span class="glyphicon glyphicon-fast-backward"></span>
                            </button>
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToPreviousPageGridOtherArticle">
                                <span class="glyphicon glyphicon-step-backward"></span>
                            </button>
                            <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnCurrentPageGridOtherArticle"></button>
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToNextPageGridOtherArticle">
                                <span class="glyphicon glyphicon-step-forward"></span>
                            </button>
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToLastPageGridOtherArticle">
                                <span class="glyphicon glyphicon-fast-forward"></span>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </section>

        <!-- ==================== -->
        <!-- Discount Edit Detail -->
        <!-- ==================== -->
        <div class="modal fade" id="discountEdit" role="dialog">
            <div class="modal-dialog">
                <!-- Modal content-->
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                        <h4 class="modal-title" id="discountModalLabel">Discount Detail <span id="discountLockAndUnLock"></span></h4>
                    </div>
                    <div class="modal-body">
                        <form id="DiscountDetailForm">
                            <input type="hidden" id="discount_id" />
                            <dl class="dl-horizontal">
                                <dt>Discount</dt>
                                <dd><input type="text" class="form-control input-sm requiredDiscount" id="discount_Discount" placeholder="Discount" /></dd>
                                <dt>Discount Rate (%)</dt>
                                <dd><input type="text" class="form-control input-sm requiredDiscount input-30" id="discount_DiscountRate" placeholder="Rate (%)" /></dd>
                                <dt>VAT Inclusive</dt>
                                <dd><input type="checkbox" id="discount_VATInclusive" /></dd>
                                <dt>Account</dt>
                                <dd>
                                    <div id="discount_AccountCode" class="input-30"></div>
                                    <div id="discount_Account" class="input-68"></div>

                                    <input type="hidden" class="requiredDiscount" id="discount_Account_data" />
                                    <input type="hidden" id="discount_AccountCode_selectedValue" />
                                    <input type="hidden" id="discount_Account_selectedValue" />
                                </dd>
                                <dt>Lock (Edit)</dt>
                                <dd><input type="checkbox" id="discount_Lock" /></dd>
                            </dl>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-primary btn-sm" id="cmdSaveDiscountButton" onclick="btnDiscountSaveButton_OnClick()"><i class="fa fa-save"></i> Save</button>
                        <button id="cmdDiscountDetailCloseButton" class="btn btn-danger btn-sm" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- =============== -->
        <!-- Discount Delete -->
        <!-- =============== -->
        <div class="modal fade" id="deleteDiscountConfirm" role="dialog">
            <div class="modal-dialog modal-sm">
                <!-- Modal content-->
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                        <h4 class="modal-title">Delete Discount <i class="fa fa-trash"></i></h4>
                    </div>
                    <div class="modal-body">
                        Are you sure you want to delete this?
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-danger btn-sm" id="cmdConfirmDeleteDiscount" onclick="cmdDiscountConfirmDeleteButton_OnClick()"><i class="fa fa-trash"></i> Delete</button>
                        <button id="cmdConfirmDeleteCloseButtonDiscount" class="btn btn-primary btn-sm" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- ==================== -->
        <!-- Pay Type Edit Detail -->
        <!-- ==================== -->
        <div class="modal fade" id="payTypeEdit" role="dialog">
            <div class="modal-dialog">
                <!-- Modal content-->
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                        <h4 class="modal-title" id="PayTypeModalLabel">Pay Type Detail <span id="payTypeLockAndUnLock"></span></h4>
                    </div>
                    <div class="modal-body">
                        <form id="PayTypeDetailForm">
                            <input type="hidden" id="payType_id" />
                            <dl class="dl-horizontal">
                                <dt>Pay Type</dt>
                                <dd><input type="text" class="form-control input-sm requiredPayType" id="payType_PayType" placeholder="Pay type" /></dd>
                                <dt>Account</dt>
                                <dd>
                                    <div id="payType_AccountCode" class="input-30"></div>
                                    <div id="payType_Account" class="input-68"></div>

                                    <input type="hidden" class="requiredPayType" id="payType_Account_data" />
                                    <input type="hidden" id="payType_AccountCode_selectedValue" />
                                    <input type="hidden" id="payType_Account_selectedValue" />
                                </dd>
                                <dt>Lock (Edit)</dt>
                                <dd><input type="checkbox" id="payType_Lock" /></dd>
                            </dl>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-primary btn-sm" id="cmdSavePayTypeButton" onclick="btnPayTypeSaveButton_OnClick()"><i class="fa fa-save"></i> Save</button>
                        <button id="cmdPayTypeDetailCloseButton" class="btn btn-danger btn-sm" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- =============== -->
        <!-- Pay Type Delete -->
        <!-- =============== -->
        <div class="modal fade" id="deletePayTypeConfirm" role="dialog">
            <div class="modal-dialog modal-sm">
                <!-- Modal content-->
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                        <h4 class="modal-title">Delete Pay Type <i class="fa fa-trash"></i></h4>
                    </div>
                    <div class="modal-body">
                        Are you sure you want to delete this?
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-danger btn-sm" id="cmdConfirmDeletePayType" onclick="cmdPayTypeConfirmDeleteButton_OnClick()"><i class="fa fa-trash"></i> Delete</button>
                        <button id="cmdConfirmDeleteCloseButtonPayType" class="btn btn-primary btn-sm" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- =============== -->
        <!-- Tax Edit Detail -->
        <!-- =============== -->
        <div class="modal fade" id="taxEdit" role="dialog">
            <div class="modal-dialog">
                <!-- Modal content-->
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                        <h4 class="modal-title" id="TaxTypeModalLabel">Tax Type Detail <span id="taxTypeLockAndUnLock"></span></h4>
                    </div>
                    <div class="modal-body">
                        <form id="TaxDetailForm">
                            <input type="hidden" id="taxType_id" />
                            <dl class="dl-horizontal">
                                <dt>Tax Type</dt>
                                <dd><input type="text" class="form-control input-sm requiredTaxType" id="taxType_TaxType" placeholder="Tax type" /></dd>
                                <dt>Tax Rate (%)</dt>
                                <dd><input type="text" class="form-control input-sm requiredTaxType input-30" id="taxType_TaxRate" placeholder="Rate (%)" /></dd>
                                <dt>VAT Inclusive</dt>
                                <dd><input type="checkbox" id="taxType_TaxVATInclusive" class="requiredTaxType" /></dd>
                                <dt>Account</dt>
                                <dd>
                                    <div id="taxType_AccountCode" class="input-30"></div>
                                    <div id="taxType_Account" class="input-68"></div>

                                    <input type="hidden" class="requiredTaxType" id="taxType_Account_data" />
                                    <input type="hidden" id="taxType_AccountCode_selectedValue" />
                                    <input type="hidden" id="taxType_Account_selectedValue" />
                                </dd>
                                <dt>Lock (Edit)</dt>
                                <dd><input type="checkbox" id="taxType_Lock" /></dd>
                            </dl>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-primary btn-sm" id="cmdSaveTaxTypeButton" onclick="btnTaxTypeSaveButton_OnClick()"><i class="fa fa-save"></i> Save</button>
                        <button id="cmdTaxTypeDetailCloseButton" class="btn btn-danger btn-sm" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- ========== -->
        <!-- Tax Delete -->
        <!-- ========== -->
        <div class="modal fade" id="deleteTaxTypeConfirm" role="dialog">
            <div class="modal-dialog modal-sm">
                <!-- Modal content-->
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                        <h4 class="modal-title">Delete Tax Type <i class="fa fa-trash"></i></h4>
                    </div>
                    <div class="modal-body">
                        Are you sure you want to delete this?
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-danger btn-sm" id="cmdConfirmDeleteTaxType" onclick="cmdTaxTypeConfirmDeleteButton_OnClick()"><i class="fa fa-trash"></i> Delete</button>
                        <button id="cmdConfirmDeleteCloseButtonTaxType" class="btn btn-primary btn-sm" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- ================ -->
        <!-- Unit Edit Detail -->
        <!-- ================ -->
        <div class="modal fade" id="unitEdit" role="dialog">
            <div class="modal-dialog">
                <!-- Modal content-->
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                        <h4 class="modal-title" id="unitModalLabel">Unit Detail <span id="unitLockAndUnLock"></span></h4>
                    </div>
                    <div class="modal-body">
                        <form id="UnitDetailForm">
                            <input type="hidden" id="unit_id" />
                            <dl class="dl-horizontal">
                                <dt>Unit</dt>
                                <dd><input type="text" class="form-control input-sm requiredUnit" id="unit_Unit" placeholder="Unit" /></dd>
                                <dt>Lock (Edit)</dt>
                                <dd><input type="checkbox" id="unit_Lock" /></dd>
                            </dl>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-primary btn-sm" id="cmdSaveUnitButton" onclick="btnUnitSaveButton_OnClick()"><i class="fa fa-save"></i> Save</button>
                        <button id="cmdUnitDetailCloseButton" class="btn btn-danger btn-sm" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- =========== -->
        <!-- Unit Delete -->
        <!-- =========== -->
        <div class="modal fade" id="deleteUnitConfirm" role="dialog">
            <div class="modal-dialog modal-sm">
                <!-- Modal content-->
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                        <h4 class="modal-title">Delete Unit <i class="fa fa-trash"></i></h4>
                    </div>
                    <div class="modal-body">
                        Are you sure you want to delete this?
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-danger btn-sm" id="cmdConfirmDeleteUnit" onclick="cmdUnitConfirmDeleteButton_OnClick()"><i class="fa fa-trash"></i> Delete</button>
                        <button id="cmdConfirmDeleteCloseButtonUnit" class="btn btn-primary btn-sm" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- ================ -->
        <!-- Term Edit Detail -->
        <!-- ================ -->
        <div class="modal fade" id="termEdit" role="dialog">
            <div class="modal-dialog">
                <!-- Modal content-->
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                        <h4 class="modal-title" id="termModalLabel">Term Detail <span id="termLockAndUnLock"></span></h4>
                    </div>
                    <div class="modal-body">
                        <form id="TermDetailForm">
                            <input type="hidden" id="term_id" />
                            <dl class="dl-horizontal">
                                <dt>Term</dt>
                                <dd><input type="text" class="form-control input-sm requiredTerm" id="term_Term" placeholder="Term" /></dd>
                                <dt>No. of Days</dt>
                                <dd><input type="text" class="form-control input-sm requiredTerm input-30" id="term_NoOfDays" placeholder="No. of days" /></dd>
                                <dt>Lock (Edit)</dt>
                                <dd><input type="checkbox" id="term_Lock" /></dd>
                            </dl>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-primary btn-sm" id="cmdSaveTermButton" onclick="btnTermSaveButton_OnClick()"><i class="fa fa-save"></i> Save</button>
                        <button id="cmdTermDetailCloseButton" class="btn btn-danger btn-sm" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- =========== -->
        <!-- Term Delete -->
        <!-- =========== -->
        <div class="modal fade" id="deleteTermConfirm" role="dialog">
            <div class="modal-dialog modal-sm">
                <!-- Modal content-->
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                        <h4 class="modal-title">Delete Term <i class="fa fa-trash"></i></h4>
                    </div>
                    <div class="modal-body">
                        Are you sure you want to delete this?
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-danger btn-sm" id="cmdConfirmDeleteTerm" onclick="cmdTermConfirmDeleteButton_OnClick()"><i class="fa fa-trash"></i> Delete</button>
                        <button id="cmdConfirmDeleteCloseButtonTerm" class="btn btn-primary btn-sm" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- ==================== -->
        <!-- Employee Edit Detail -->
        <!-- ==================== -->
        <div class="modal fade" id="employeeEdit" role="dialog">
            <div class="modal-dialog">
                <!-- Modal content-->
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                        <h4 class="modal-title" id="employeeModalLabel">Employee Detail <span id="employeeLockAndUnLock"></span></h4>
                    </div>
                    <div class="modal-body">
                        <form id="employeeDetailForm">
                            <input type="hidden" id="employee_id" />
                            <dl class="dl-horizontal">
                                <dt>Code</dt>
                                <dd><input type="text" class="form-control input-sm requiredEmployee" id="employee_Code" placeholder="Code" /></dd>
                                <dt>Employee</dt>
                                <dd><input type="text" class="form-control input-sm requiredEmployee" id="employee_Employee" placeholder="Employee" /></dd>
                                <dt>Account</dt>
                                <dd>
                                    <div id="employee_AccountCode" class="input-30"></div>
                                    <div id="employee_Account" class="input-68"></div>

                                    <input type="hidden" class="requiredEmployee" id="employee_Account_data" />
                                    <input type="hidden" id="employee_AccountCode_selectedValue" />
                                    <input type="hidden" id="employee_Account_selectedValue" />
                                </dd>
                                <dt>Address</dt>
                                <dd><textarea class="form-control input-sm textarea-custom requiredEmployee" id="employee_Address" placeholder="Address"></textarea></dd>
                                <dt>Contact Number</dt>
                                <dd><input type="text" class="form-control input-sm requiredEmployee" id="employee_ContactNumber" placeholder="Contact Number" /></dd>
                                <dt>Lock (Edit)</dt>
                                <dd><input type="checkbox" id="employee_Lock" /></dd>
                            </dl>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-primary btn-sm" id="cmdSaveEmployeeButton" onclick="btnEmployeeSaveButton_OnClick()"><i class="fa fa-save"></i> Save</button>
                        <button id="cmdEmployeeDetailCloseButton" class="btn btn-danger btn-sm" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- =============== -->
        <!-- Employee Delete -->
        <!-- =============== -->
        <div class="modal fade" id="deleteEmployeeConfirm" role="dialog">
            <div class="modal-dialog modal-sm">
                <!-- Modal content-->
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                        <h4 class="modal-title">Delete Employee <i class="fa fa-trash"></i></h4>
                    </div>
                    <div class="modal-body">
                        Are you sure you want to delete this?
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-danger btn-sm" id="cmdConfirmDeleteEmployee" onclick="cmdEmployeeConfirmDeleteButton_OnClick()"><i class="fa fa-trash"></i> Delete</button>
                        <button id="cmdConfirmDeleteCloseButtonEmployee" class="btn btn-primary btn-sm" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- ========================= -->
        <!-- Article Group Edit Detail -->
        <!-- ========================= -->
        <div class="modal fade" id="articleGroupEdit" role="dialog">
            <div class="modal-dialog">
                <!-- Modal content-->
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                        <h4 class="modal-title" id="articleGroupModalLabel">Article Group Detail <span id="articleGroupLockAndUnLock"></span></h4>
                    </div>
                    <div class="modal-body">
                        <form id="articleGroupDetailForm">
                            <input type="hidden" id="articleGroup_id" />
                            <dl class="dl-horizontal">
                                <dt>Article Group</dt>
                                <dd><input type="text" class="form-control input-sm requiredArticleGroup" id="articleGroup_ArticleGroup" placeholder="Article Group" /></dd>
                                <dt>Article Type:</dt>
                                <dd>
                                    <div id="articleGroup_ArticleType" class="comboBox-wide"></div>

                                    <input type="hidden" class="requiredArticleGroup" id="articleGroup_ArticleType_data" />
                                    <input type="hidden" id="articleGroup_ArticleType_selectedValue" />
                                </dd>
                                <dt>Account</dt>
                                <dd>
                                    <div id="articleGroup_AccountCode" class="input-30"></div>
                                    <div id="articleGroup_Account" class="input-68"></div>

                                    <input type="hidden" class="requiredArticleGroup" id="articleGroup_Account_data" />
                                    <input type="hidden" id="articleGroup_AccountCode_selectedValue" />
                                    <input type="hidden" id="articleGroup_Account_selectedValue" />
                                </dd>
                                <dt>Sales Account</dt>
                                <dd>
                                    <div id="articleGroup_SalesAccountCode" class="input-30"></div>
                                    <div id="articleGroup_SalesAccount" class="input-68"></div>

                                    <input type="hidden" class="requiredArticleGroup" id="articleGroup_SalesAccount_data" />
                                    <input type="hidden" id="articleGroup_SalesAccountCode_selectedValue" />
                                    <input type="hidden" id="articleGroup_SalesAccount_selectedValue" />
                                </dd>
                                <dt>Cost Account</dt>
                                <dd>
                                    <div id="articleGroup_CostAccountCode" class="input-30"></div>
                                    <div id="articleGroup_CostAccount" class="input-68"></div>

                                    <input type="hidden" class="requiredArticleGroup" id="articleGroup_CostAccount_data" />
                                    <input type="hidden" id="articleGroup_CostAccountCode_selectedValue" />
                                    <input type="hidden" id="articleGroup_CostAccount_selectedValue" />
                                </dd>
                                <dt>Asset Account</dt>
                                <dd>
                                    <div id="articleGroup_AssetAccountCode" class="input-30"></div>
                                    <div id="articleGroup_AssetAccount" class="input-68"></div>

                                    <input type="hidden" class="requiredArticleGroup" id="articleGroup_AssetAccount_data" />
                                    <input type="hidden" id="articleGroup_AssetAccountCode_selectedValue" />
                                    <input type="hidden" id="articleGroup_AssetAccount_selectedValue" />
                                </dd>
                                <dt>Expense Account</dt>
                                <dd>
                                    <div id="articleGroup_ExpenseAccountCode" class="input-30"></div>
                                    <div id="articleGroup_ExpenseAccount" class="input-68"></div>

                                    <input type="hidden" class="requiredArticleGroup" id="articleGroup_ExpenseAccount_data" />
                                    <input type="hidden" id="articleGroup_ExpenseAccountCode_selectedValue" />
                                    <input type="hidden" id="articleGroup_ExpenseAccount_selectedValue" />
                                </dd>
                                <dt>Lock (Edit)</dt>
                                <dd><input type="checkbox" id="articleGroup_Lock" /></dd>
                            </dl>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-primary btn-sm" id="cmdSaveArticleGroupButton" onclick="btnArticleGroupSaveButton_OnClick()"><i class="fa fa-save"></i> Save</button>
                        <button id="cmdArticleGroupDetailCloseButton" class="btn btn-danger btn-sm" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- ==================== -->
        <!-- Article Group Delete -->
        <!-- ==================== -->
        <div class="modal fade" id="deleteArticleGroupConfirm" role="dialog">
            <div class="modal-dialog modal-sm">
                <!-- Modal content-->
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                        <h4 class="modal-title">Delete Article Group <i class="fa fa-trash"></i></h4>
                    </div>
                    <div class="modal-body">
                        Are you sure you want to delete this?
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-danger btn-sm" id="cmdConfirmDeleteArticleGroup" onclick="cmdArticleGroupConfirmDeleteButton_OnClick()"><i class="fa fa-trash"></i> Delete</button>
                        <button id="cmdConfirmDeleteCloseButtonArticleGroup" class="btn btn-primary btn-sm" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- =================== -->
        <!-- Article Edit Detail -->
        <!-- =================== -->
        <div class="modal fade" id="articleEdit" role="dialog">
            <div class="modal-dialog">
                <!-- Modal content-->
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                        <h4 class="modal-title" id="articleModalLabel"> Article Detail <span id="articleLockAndUnLock"></span></h4>
                    </div>
                    <div class="modal-body">
                        <form id="articleDetailForm">
                            <input type="hidden" id="article_id" />
                            <dl class="dl-horizontal">
                                <dt>Code</dt>
                                <dd><input type="text" class="form-control input-sm requiredArticle" id="article_Code" placeholder="Code" /></dd>
                                <dt>Article</dt>
                                <dd><input type="text" class="form-control input-sm requiredArticle" id="article_Article" placeholder="Article" /></dd>
                                <dt>Account</dt>
                                <dd>
                                    <div id="article_AccountCode" class="input-30"></div>
                                    <div id="article_Account" class="input-68"></div>

                                    <input type="hidden" class="requiredArticle" id="article_Account_data" />
                                    <input type="hidden" id="article_AccountCode_selectedValue" />
                                    <input type="hidden" id="article_Account_selectedValue" />
                                </dd>
                                <dt>Address</dt>
                                <dd><textarea class="form-control input-sm textarea-custom requiredArticle" id="article_Address" placeholder="Address"></textarea></dd>
                                <dt>Contact Number</dt>
                                <dd><input type="text" class="form-control input-sm requiredArticle" id="article_ContactNumber" placeholder="Contact Number" /></dd>
                                <dt>Lock (Edit)</dt>
                                <dd><input type="checkbox" id="article_Lock" /></dd>
                            </dl>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-primary btn-sm" id="cmdSaveArticleButton" onclick="btnArticleSaveButton_OnClick()"><i class="fa fa-save"></i> Save</button>
                        <button id="cmdArticleDetailCloseButton" class="btn btn-danger btn-sm" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- ============== -->
        <!-- Article Delete -->
        <!-- ============== -->
        <div class="modal fade" id="deleteArticleConfirm" role="dialog">
            <div class="modal-dialog modal-sm">
                <!-- Modal content-->
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                        <h4 class="modal-title">Delete Article <i class="fa fa-trash"></i></h4>
                    </div>
                    <div class="modal-body">
                        Are you sure you want to delete this?
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-danger btn-sm" id="cmdConfirmDeleteArticle" onclick="cmdArticleConfirmDeleteButton_OnClick()"><i class="fa fa-trash"></i> Delete</button>
                        <button id="cmdConfirmDeleteCloseButtonArticle" class="btn btn-primary btn-sm" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Delete Lock -->
        <div class="modal fade" id="deleteRecordLock" role="dialog">
            <div class="modal-dialog modal-sm">
                <!-- Modal content-->
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                        <h4 class="modal-title">Record Locked <i class="fa fa-lock"></i></h4>
                    </div>
                    <div class="modal-body">
                        Sorry, the record is lock! It can't be deleted!
                    </div>
                    <div class="modal-footer">
                        <button id="cmdConfirmDeleteCloseButton" class="btn btn-primary btn-sm" data-dismiss="modal"> Okay</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Footer Menu -->
        @Html.Partial("_SoftwareFooter")
    </div>

    <!-- SideBar Menu -->
    @Html.Partial("_SoftwareSideBarMenu")

    <div id="c-mask" class="c-mask"></div><!-- /c-mask -->
    @Scripts.Render("~/Scripts/Software-js")
    <!-- ================ -->
    <!-- Discount Scripts -->
    <!-- ================ -->
    <script type="text/javascript">
        // =============================
        // Global Variables for Discount
        // =============================
        var discounts;
        var discountAccounts;
        var discountGrid;
        var cboDiscountForAccountCode;
        var cboDiscountForAccount;
        var btnFirstPageGridDiscount;
        var btnPreviousPageGridDiscount;
        var btnNextPageGridDiscount;
        var btnLastPageGridDiscount;
        var btnCurrentPageGridDiscount;

        // =================
        // Get discount list
        // =================
        function getDiscount() {
            var discounts = new wijmo.collections.ObservableArray;
            NProgress.start();
            $.ajax({
                url: '/api/listDiscount',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (discountResults) {
                    if (discountResults.length > 0) {
                        for (i = 0; i < discountResults.length; i++) {

                            var btnDeleteId;
                            if (discountResults[i]["IsLocked"] == true) {
                                btnDeleteId = "<button class='btn btn-danger btn-xs btn-block' id='cmdDiscountDelete' onclick='btnDiscountDeleteLock_OnClick()'><i class='fa fa-trash'></i> Delete</button>";
                            } else {
                                btnDeleteId = "<button class='btn btn-danger btn-xs btn-block' id='cmdDiscountDelete' onclick='btnDiscountDelete_OnClick()'><i class='fa fa-trash'></i> Delete</button>";
                            }

                            discounts.push({
                                EditId: "<button class='btn btn-primary btn-xs btn-block' id='cmdDiscountEdit' onclick='btnDiscountEdit_OnClick()'><i class='fa fa-edit'></i> Edit</button>",
                                DeleteId: btnDeleteId,
                                Id: discountResults[i]["Id"],
                                Discount: discountResults[i]["Discount"],
                                DiscountRate: discountResults[i]["DiscountRate"],
                                IsInclusive: discountResults[i]["IsInclusive"],
                                AccountId: discountResults[i]["AccountId"],
                                AccountCode: discountResults[i]["AccountCode"],
                                Account: discountResults[i]["Account"],
                                IsLocked: discountResults[i]["IsLocked"],
                                CreatedById: discountResults[i]["CreatedById"],
                                CreatedBy: discountResults[i]["CreatedBy"],
                                CreatedDateTime: discountResults[i]["CreatedDateTime"],
                                UpdatedById: discountResults[i]["UpdatedById"],
                                UpdatedBy: discountResults[i]["UpdatedBy"],
                                UpdatedDateTime: discountResults[i]["UpdatedDateTime"]
                            });
                        }
                    }
                    NProgress.done();
                }
            }).fail(function (xhr, textStatus, err) {
                alert(err);
            });
            return discounts;
        }

        // ============================
        // Discount delete lock record
        // ===========================
        function btnDiscountDeleteLock_OnClick() {
            $('#deleteRecordLock').modal({
                show: true,
                backdrop: 'static'
            });
        }

        // ===============================
        // FlexGrid Selection for Discount
        // ===============================
        function updateDetailsDiscount() {
            var item = discounts.currentItem;
            document.getElementById('createdBy').innerHTML = item.CreatedBy;
            document.getElementById('createdDate').innerHTML = item.CreatedDateTime;
            document.getElementById('updatedBy').innerHTML = item.UpdatedBy;
            document.getElementById('updatedDate').innerHTML = item.UpdatedDateTime;
        }

        // ===============================
        // Navigation buttons for discount
        // ===============================
        function updateNavigateButtonsDiscount() {
            if (discounts.pageSize <= 0) {
                document.getElementById('navigationPageGridDiscount').style.display = 'none';
                return;
            }
            document.getElementById('navigationPageGridDiscount').style.display = 'block';
            if (discounts.pageIndex === 0) {
                btnFirstPageGridDiscount.setAttribute('disabled', 'disabled');
                btnPreviousPageGridDiscount.setAttribute('disabled', 'disabled');
                btnNextPageGridDiscount.removeAttribute('disabled');
                btnLastPageGridDiscount.removeAttribute('disabled');
            } else if (discounts.pageIndex === (discounts.pageCount - 1)) {
                btnFirstPageGridDiscount.removeAttribute('disabled');
                btnPreviousPageGridDiscount.removeAttribute('disabled');
                btnLastPageGridDiscount.setAttribute('disabled', 'disabled');
                btnNextPageGridDiscount.setAttribute('disabled', 'disabled');
            } else {
                btnFirstPageGridDiscount.removeAttribute('disabled');
                btnPreviousPageGridDiscount.removeAttribute('disabled');
                btnNextPageGridDiscount.removeAttribute('disabled');
                btnLastPageGridDiscount.removeAttribute('disabled');
            }
            btnCurrentPageGridDiscount.innerHTML = (discounts.pageIndex + 1) + ' / ' + discounts.pageCount;
        }

        // =======================================
        // Get account list for discount combo box
        // =======================================
        function getDiscountAccountForComboBox() {
            discountAccounts = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listAccount',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (discountAccountResults) {
                    if (discountAccountResults.length > 0) {
                        for (i = 0; i < discountAccountResults.length; i++) {
                            discountAccounts.push({
                                AccountId: discountAccountResults[i]["Id"],
                                AccountCode: discountAccountResults[i]["AccountCode"],
                                Account: discountAccountResults[i]["Account"]
                            });
                        }
                        createCboForDiscountAccountCode(discountAccounts);
                        createCboForDiscountAccount(discountAccounts);
                    } else {
                        createCboForDiscountAccountCode(discountAccounts);
                        createCboForDiscountAccount(discountAccounts);
                    }
                }
            });
        }

        // ==========================================
        // Create combo box for discount Account Code
        // ==========================================
        function createCboForDiscountAccountCode(discountAccounts) {
            var accountCodeCollection = new wijmo.collections.CollectionView(discountAccounts);
            var accountCodeList = new Array();
            for (var i = 0; i < accountCodeCollection.items.length; i++) {
                accountCodeList.push(accountCodeCollection.items[i].AccountCode);
            }

            var disabled;
            if (discountAccounts == 0) {
                disabled = true;
            } else {
                if (document.getElementById('discount_Lock').checked == true) {
                    disabled = true;
                } else {
                    disabled = false;
                }
            }

            cboDiscountForAccountCode.dispose();
            cboDiscountForAccountCode = new wijmo.input.ComboBox('#discount_AccountCode', {
                disabled: disabled,
                placeholder: "Code",
                itemsSource: accountCodeList,
                isEditable: false,
                selectedValue: document.getElementById('discount_AccountCode_selectedValue').value.toString(),
                onSelectedIndexChanged: function () {
                    $('#discount_Account_data').val(accountCodeCollection.items[this.selectedIndex].AccountId);
                    $('#discount_Account_selectedValue').val(accountCodeCollection.items[this.selectedIndex].Account);
                    $('#discount_AccountCode_selectedValue').val(accountCodeCollection.items[this.selectedIndex].AccountCode);

                    createCboForDiscountAccount(discountAccounts);
                }
            });

            document.getElementById('discount_Account_data').value = accountCodeCollection.items[cboDiscountForAccountCode.selectedIndex].AccountId;
            document.getElementById('discount_Account_selectedValue').value = accountCodeCollection.items[cboDiscountForAccountCode.selectedIndex].Account;
            document.getElementById('discount_AccountCode_selectedValue').value = accountCodeCollection.items[cboDiscountForAccountCode.selectedIndex].AccountCode;
        }

        // =====================================
        // Create combo box for discount Account
        // =====================================
        function createCboForDiscountAccount(discountAccounts) {
            var accountCollection = new wijmo.collections.CollectionView(discountAccounts);
            var accountList = new Array();
            for (var i = 0; i < accountCollection.items.length; i++) {
                accountList.push(accountCollection.items[i].Account);
            }

            var disabled;
            if (discountAccounts == 0) {
                disabled = true;
            } else {
                if (document.getElementById('discount_Lock').checked == true) {
                    disabled = true;
                } else {
                    disabled = false;
                }
            }

            cboDiscountForAccount.dispose();
            cboDiscountForAccount = new wijmo.input.ComboBox('#discount_Account', {
                disabled: disabled,
                placeholder: "Account",
                itemsSource: accountList,
                isEditable: false,
                selectedValue: document.getElementById('discount_Account_selectedValue').value.toString(),
                onSelectedIndexChanged: function () {
                    $('#discount_Account_data').val(accountCollection.items[this.selectedIndex].AccountId);
                    $('#discount_AccountCode_selectedValue').val(accountCollection.items[this.selectedIndex].AccountCode);
                    $('#discount_Account_selectedValue').val(accountCollection.items[this.selectedIndex].Account);

                    createCboForDiscountAccountCode(discountAccounts);
                }
            });

            document.getElementById('discount_Account_data').value = accountCollection.items[cboDiscountForAccount.selectedIndex].AccountId;
            document.getElementById('discount_AccountCode_selectedValue').value = accountCollection.items[cboDiscountForAccount.selectedIndex].AccountCode;
            document.getElementById('discount_Account_selectedValue').value = accountCollection.items[cboDiscountForAccount.selectedIndex].Account;
        }

        // ================
        // Add new discount
        // ================
        function btnDiscountAdd_OnClick() {
            $('#discountEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $('.requiredDiscount').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            $('#cmdSaveDiscountButton').prop('disabled', false);
            $('#cmdDiscountDetailCloseButton').prop('disabled', false);

            document.getElementById('discount_id').value = 0;
            document.getElementById('discount_Discount').value = "";
            document.getElementById('discount_DiscountRate').value = "";
            document.getElementById('discount_VATInclusive').checked = "";
            document.getElementById('discount_Account_data').value = "";
            document.getElementById('discount_AccountCode_selectedValue').value = "";
            document.getElementById('discount_Account_selectedValue').value = "";
            document.getElementById('discount_Lock').checked = false;

            document.getElementById('discount_Discount').disabled = false;
            document.getElementById('discount_DiscountRate').disabled = false;
            document.getElementById('discount_VATInclusive').disabled = false;
            document.getElementById('discountLockAndUnLock').innerHTML = "<i class='fa fa-unlock'></i>";
            getDiscountAccountForComboBox();
        }

        // =============
        // Edit Discount
        // =============
        function btnDiscountEdit_OnClick() {
            discounts.editItem(discounts.currentItem);
            $('#discountEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $('.requiredDiscount').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            $('#cmdSaveDiscountButton').prop("disabled", false);
            $('#cmdDiscountDetailCloseButton').prop("disabled", false);

            var discount = discounts.currentEditItem;
            document.getElementById('discount_id').value = discount.Id ? discount.Id : '';
            document.getElementById('discount_Discount').value = discount.Discount ? discount.Discount : '';
            document.getElementById('discount_DiscountRate').value = discount.DiscountRate;
            document.getElementById('discount_VATInclusive').checked = discount.IsInclusive ? discount.IsInclusive : '';
            document.getElementById('discount_Account_data').value = discount.AccountId ? discount.AccountId : '';
            document.getElementById('discount_AccountCode_selectedValue').value = discount.AccountCode ? discount.AccountCode : '';
            document.getElementById('discount_Account_selectedValue').value = discount.Account ? discount.Account : '';
            document.getElementById('discount_Lock').checked = discount.IsLocked;

            if (document.getElementById('discount_Lock').checked == true) {
                document.getElementById('discount_Discount').disabled = true;
                document.getElementById('discount_DiscountRate').disabled = true;
                document.getElementById('discount_VATInclusive').disabled = true;
                document.getElementById('discountLockAndUnLock').innerHTML = "<i class='fa fa-lock'></i>";

                getDiscountAccountForComboBox();
            } else {
                document.getElementById('discount_Discount').disabled = false;
                document.getElementById('discount_DiscountRate').disabled = false;
                document.getElementById('discount_VATInclusive').disabled = false;
                document.getElementById('discountLockAndUnLock').innerHTML = "<i class='fa fa-unlock'></i>";

                getDiscountAccountForComboBox();
            }
        }

        // =========================
        // Discount Entry Validation
        // =========================
        function discountEntryValidation() {
            var isValid = true;
            $('.requiredDiscount').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                } else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            return isValid;
        }

        // =========================
        // Discount refresh flexgrid
        // =========================
        function refreshDiscountFlexgrid() {
            discounts = new wijmo.collections.CollectionView(getDiscount());
            discounts.canFilter = true;
            discounts.pageSize = 15;

            var filterTextDiscount = '';
            $('#InputFilterDiscount').keyup(function () {
                filterTextDiscount = this.value.toLowerCase();
                discounts.refresh();
            });
            discounts.filter = function (item) {
                return !filterTextDiscount || (item.Discount.toLowerCase().indexOf(filterTextDiscount) > -1);
            }
            discounts.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsDiscount();
            });
            discounts.currentChanged.addHandler(function (sender, args) {
                updateDetailsDiscount();
            });

            discountGrid.itemsSource = discounts;
            discountGrid.trackChanges = true;
        }

        // =============
        // Save Discount
        // =============
        function btnDiscountSaveButton_OnClick() {
            var discountObject = new Object();
            var discountId = document.getElementById('discount_id').value;
            discountObject.Discount = document.getElementById('discount_Discount').value;
            discountObject.DiscountRate = document.getElementById('discount_DiscountRate').value;
            discountObject.IsInclusive = document.getElementById('discount_VATInclusive').checked;
            discountObject.AccountId = document.getElementById('discount_Account_data').value;
            discountObject.IsLocked = document.getElementById('discount_Lock').checked;
            var discountData = JSON.stringify(discountObject);

            if (document.getElementById('discount_Account_data').value == '') {
                document.getElementById('discount_AccountCode').style.border = "1px solid red";
                document.getElementById('discount_Account').style.border = "1px solid red";
            } else {
                document.getElementById('discount_AccountCode').style.border = "1px solid #C8C8C8";
                document.getElementById('discount_Account').style.border = "1px solid #C8C8C8";
            }

            if (discountEntryValidation() == false) {
                toastr.error("Invalid entry");
            } else {
                $('#cmdSaveDiscountButton').prop('disable', true);
                $('#cmdDiscountDetailCloseButton').prop('disabled', true);

                if (discountId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/addDiscount',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: discountData,
                        statusCode: {
                            200: function () {
                                $('#cmdSaveDiscountButton').prop('disable', true);
                                $('#cmdDiscountDetailCloseButton').prop('disabled', true);
                                toastr.success("Successfully saved");

                                $('#discountEdit').modal('hide');

                                refreshDiscountFlexgrid();
                            },
                            404: function () {
                                toastr.error("Save request not found");
                                $('#cmdSaveDiscountButton').prop('disable', false);
                                $('#cmdDiscountDetailCloseButton').prop('disabled', false);
                            },
                            400: function () {
                                toastr.error("Cannot save new record");
                                $('#cmdSaveDiscountButton').prop('disable', false);
                                $('#cmdDiscountDetailCloseButton').prop('disabled', false);
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/updateDiscount/' + discountId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: discountData,
                        statusCode: {
                            200: function () {
                                $('#cmdSaveDiscountButton').prop('disable', true);
                                $('#cmdDiscountDetailCloseButton').prop('disabled', true);
                                toastr.success("Successfully updated");

                                $('#discountEdit').modal('hide');

                                refreshDiscountFlexgrid();
                            },
                            404: function () {
                                toastr.error("Update request not found");
                                $('#cmdSaveDiscountButton').prop('disable', false);
                                $('#cmdDiscountDetailCloseButton').prop('disabled', false);
                            },
                            400: function () {
                                toastr.error("Cannot update record");
                                $('#cmdSaveDiscountButton').prop('disable', false);
                                $('#cmdDiscountDetailCloseButton').prop('disabled', false);
                            }
                        }
                    });
                }
            }
        }

        // ===============
        // Delete Discount
        // ===============
        function btnDiscountDelete_OnClick() {
            $('#deleteDiscountConfirm').modal({
                show: true,
                backdrop: 'static'
            });

            $('#cmdConfirmDeleteDiscount').prop('disabled', false);
            $('#cmdConfirmDeleteCloseButtonDiscount').prop('disabled', false);
        }
        // Discount Confirm Delete Button
        function cmdDiscountConfirmDeleteButton_OnClick() {
            $('#cmdConfirmDeleteDiscount').prop('disabled', true);
            $('#cmdConfirmDeleteCloseButtonDiscount').prop('disabled', true);

            discounts.editItem(discounts.currentItem);
            var discountId = discounts.currentEditItem.Id;
            var discountName = discounts.currentEditItem.Discount;
            $.ajax({
                url: '/api/deleteDiscount/' + discountId,
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        $('#cmdConfirmDeleteDiscount').prop('disabled', true);
                        $('#cmdConfirmDeleteCloseButtonDiscount').prop('disabled', true);
                        toastr.success("Successfully deleted");

                        $('#deleteDiscountConfirm').modal('hide');

                        refreshDiscountFlexgrid()
                    },
                    404: function () {
                        toastr.error("Delete request not found");
                        $('#cmdConfirmDeleteDiscount').prop('disabled', false);
                        $('#cmdConfirmDeleteCloseButtonDiscount').prop('disabled', false);
                        $('#deleteDiscountConfirm').modal('hide');
                    },
                    400: function () {
                        toastr.error("Cannot delete record");
                        $('#cmdConfirmDeleteDiscount').prop('disabled', false);
                        $('#cmdConfirmDeleteCloseButtonDiscount').prop('disabled', false);
                        $('#deleteDiscountConfirm').modal('hide');
                    }
                }
            });
        }

        // ========
        // Discount
        // ========
        function discountTab() {
            cboDiscountForAccount = new wijmo.input.ComboBox('#discount_Account');
            cboDiscountForAccountCode = new wijmo.input.ComboBox('#discount_AccountCode');

            discounts = new wijmo.collections.CollectionView(getDiscount());
            discounts.canFilter = true;
            discounts.pageSize = 15;

            var filterTextDiscount = '';
            $('#InputFilterDiscount').keyup(function () {
                filterTextDiscount = this.value.toLowerCase();
                discounts.refresh();
            });
            discounts.filter = function (item) {
                return !filterTextDiscount || (item.Discount.toLowerCase().indexOf(filterTextDiscount) > -1);
            }
            discounts.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsDiscount();
            });
            discounts.currentChanged.addHandler(function (sender, args) {
                updateDetailsDiscount();
            });

            // Flex Grid for Discount
            discountGrid = new wijmo.grid.FlexGrid('#DiscountGrid');
            discountGrid.initialize({
                columns: [
                            {
                                "header": "Edit",
                                "binding": "EditId",
                                "width": 60,
                                "align": "center",
                                "allowResizing": false,
                                "allowSorting": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Delete",
                                "binding": "DeleteId",
                                "width": 70,
                                "align": "center",
                                "allowResizing": false,
                                "allowSorting": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Discount",
                                "binding": "Discount",
                                "allowSorting": true,
                                "width": "2*",
                            },
                            {
                                "header": "Rate.",
                                "binding": "DiscountRate",
                                "allowSorting": true,
                                "width": "0.7*"
                            },
                            {
                                "header": "Inclusive",
                                "binding": "IsInclusive",
                                "allowSorting": true,
                                "width": "0.5*"
                            },
                            {
                                "header": "Account",
                                "binding": "Account",
                                "allowSorting": true,
                                "width": "2*"
                            },
                            {
                                "header": "Lock",
                                "binding": "IsLocked",
                                "allowSorting": true,
                                "width": "0.5*"
                            }
                ],
                autoGenerateColumns: false,
                itemsSource: discounts,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            discountGrid.trackChanges = true;

            //Navigation button for discount
            btnFirstPageGridDiscount = document.getElementById('btnMoveToFirstPageGridDiscount');
            btnPreviousPageGridDiscount = document.getElementById('btnMoveToPreviousPageGridDiscount');
            btnNextPageGridDiscount = document.getElementById('btnMoveToNextPageGridDiscount');
            btnLastPageGridDiscount = document.getElementById('btnMoveToLastPageGridDiscount');
            btnCurrentPageGridDiscount = document.getElementById('btnCurrentPageGridDiscount');

            updateNavigateButtonsDiscount();

            btnFirstPageGridDiscount.addEventListener('click', function () {
                discounts.moveToFirstPage();
                updateNavigateButtonsDiscount();
            });
            btnPreviousPageGridDiscount.addEventListener('click', function () {
                discounts.moveToPreviousPage();
                updateNavigateButtonsDiscount();
            });
            btnNextPageGridDiscount.addEventListener('click', function () {
                discounts.moveToNextPage();
                updateNavigateButtonsDiscount();
            });
            btnLastPageGridDiscount.addEventListener('click', function () {
                discounts.moveToLastPage();
                updateNavigateButtonsDiscount();
            });
        }
    </script>

    <!-- ================ -->
    <!-- Pay Type Scripts -->
    <!-- ================ -->
    <script type="text/javascript">
        // =============================
        // Global Variables for Pay Type
        // =============================
        var paytypes;
        var payTypeGrid;
        var payTypeAccounts;
        var cboPayTypeForAccountCode;
        var cboPayTypeForAccount;
        var btnFirstPageGridPayType;
        var btnPreviousPageGridPayType;
        var btnNextPageGridPayType;
        var btnLastPageGridPayType;
        var btnCurrentPageGridPayType;

        // =================
        // GET Pay Type List
        // =================
        function getPayType() {
            var paytypes = new wijmo.collections.ObservableArray;
            NProgress.start();
            $.ajax({
                url: '/api/listPayType',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (payTypeResults) {
                    if (payTypeResults.length > 0) {
                        for (i = 0; i < payTypeResults.length; i++) {

                            var btnDeleteId;
                            if (payTypeResults[i]["IsLocked"] == true) {
                                btnDeleteId = "<button class='btn btn-danger btn-xs btn-block' onclick='btnPayTypeDeleteLock_OnClick()'><i class='fa fa-trash'></i> Delete</button>";
                            } else {
                                btnDeleteId = "<button class='btn btn-danger btn-xs btn-block' onclick='btnPayTypeDelete_OnClick()'><i class='fa fa-trash'></i> Delete</button>";
                            }

                            paytypes.push({
                                EditId: "<button class='btn btn-primary btn-xs btn-block' onclick='btnPayTypeEdit_OnClick()'><i class='fa fa-edit'></i> Edit</button>",
                                DeleteId: btnDeleteId,
                                Id: payTypeResults[i]["Id"],
                                PayType: payTypeResults[i]["PayType"],
                                AccountId: payTypeResults[i]["AccountId"],
                                AccountCode: payTypeResults[i]["AccountCode"],
                                Account: payTypeResults[i]["Account"],
                                IsLocked: payTypeResults[i]["IsLocked"],
                                CreatedById: payTypeResults[i]["CreatedById"],
                                CreatedBy: payTypeResults[i]["CreatedBy"],
                                CreatedDateTime: payTypeResults[i]["CreatedDateTime"],
                                UpdatedById: payTypeResults[i]["UpdatedById"],
                                UpdatedBy: payTypeResults[i]["UpdatedBy"],
                                UpdatedDateTime: payTypeResults[i]["UpdatedDateTime"]
                            });

                        }
                    }
                    NProgress.done();
                }
            }).fail(function (xhr, textStatus, err) {
                alert(err);
            });
            return paytypes;
        }

        // ==========================
        // PayType Delete Lock Button
        // ==========================
        function btnPayTypeDeleteLock_OnClick() {
            $('#deleteRecordLock').modal({
                show: true,
                backdrop: 'static'
            });
        }

        // ===============================
        // FlexGrid Selection for Pay Type
        // ===============================
        function updateDetailsPayType() {
            var item = paytypes.currentItem;
            document.getElementById('createdBy').innerHTML = item.CreatedBy;
            document.getElementById('createdDate').innerHTML = item.CreatedDateTime;
            document.getElementById('updatedBy').innerHTML = item.UpdatedBy;
            document.getElementById('updatedDate').innerHTML = item.UpdatedDateTime;
        }

        // ===============================
        // Navigation Buttons for Pay Type
        // ===============================
        function updateNavigateButtonsPayType() {
            if (paytypes.pageSize <= 0) {
                document.getElementById('navigationPageGridPayType').style.display = 'none';
                return;
            }
            document.getElementById('navigationPageGridPayType').style.display = 'block';
            if (paytypes.pageIndex === 0) {
                btnFirstPageGridPayType.setAttribute('disabled', 'disabled');
                btnPreviousPageGridPayType.setAttribute('disabled', 'disabled');
                btnNextPageGridPayType.removeAttribute('disabled');
                btnLastPageGridPayType.removeAttribute('disabled');
            } else if (paytypes.pageIndex === (paytypes.pageCount - 1)) {
                btnFirstPageGridPayType.removeAttribute('disabled');
                btnPreviousPageGridPayType.removeAttribute('disabled');
                btnLastPageGridPayType.setAttribute('disabled', 'disabled');
                btnNextPageGridPayType.setAttribute('disabled', 'disabled');
            } else {
                btnFirstPageGridPayType.removeAttribute('disabled');
                btnPreviousPageGridPayType.removeAttribute('disabled');
                btnNextPageGridPayType.removeAttribute('disabled');
                btnLastPageGridPayType.removeAttribute('disabled');
            }
            btnCurrentPageGridPayType.innerHTML = (paytypes.pageIndex + 1) + ' / ' + paytypes.pageCount;
        }

        // ================================================
        // Get pay type account list for pay type combo box
        // ================================================
        function getPayTypeAccountForComboBox() {
            payTypeAccounts = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listAccount',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (payTypeAccountResults) {
                    if (payTypeAccountResults.length > 0) {
                        for (i = 0; i < payTypeAccountResults.length; i++) {
                            payTypeAccounts.push({
                                AccountId: payTypeAccountResults[i]["Id"],
                                AccountCode: payTypeAccountResults[i]["AccountCode"],
                                Account: payTypeAccountResults[i]["Account"]
                            });
                        }
                        createCboForPayTypeAccountCode(payTypeAccounts);
                        createCboForPayTypeAccount(payTypeAccounts);
                    } else {
                        createCboForPayTypeAccountCode(payTypeAccounts);
                        createCboForPayTypeAccount(payTypeAccounts);
                    }
                }
            });
        }

        // ==========================================
        // Create combo box for pay type Account Code
        // ==========================================
        function createCboForPayTypeAccountCode(payTypeAccounts) {
            var accountCodeCollection = new wijmo.collections.CollectionView(payTypeAccounts);
            var accountCodeList = new Array();
            for (var i = 0; i < accountCodeCollection.items.length; i++) {
                accountCodeList.push(accountCodeCollection.items[i].AccountCode);
            }

            var disabled;
            if (payTypeAccounts == 0) {
                disabled = true;
            } else {
                if (document.getElementById('payType_Lock').checked == true) {
                    disabled = true;
                } else {
                    disabled = false;
                }
            }

            cboPayTypeForAccountCode.dispose();
            cboPayTypeForAccountCode = new wijmo.input.ComboBox('#payType_AccountCode', {
                disabled: disabled,
                placeholder: "Code",
                itemsSource: accountCodeList,
                isEditable: false,
                selectedValue: document.getElementById('payType_AccountCode_selectedValue').value.toString(),
                onSelectedIndexChanged: function () {
                    $('#payType_Account_data').val(accountCodeCollection.items[this.selectedIndex].AccountId);
                    $('#payType_Account_selectedValue').val(accountCodeCollection.items[this.selectedIndex].Account);
                    $('#payType_AccountCode_selectedValue').val(accountCodeCollection.items[this.selectedIndex].AccountCode);

                    createCboForPayTypeAccount(payTypeAccounts);
                }
            });

            document.getElementById('payType_Account_data').value = accountCodeCollection.items[cboPayTypeForAccountCode.selectedIndex].AccountId;
            document.getElementById('payType_Account_selectedValue').value = accountCodeCollection.items[cboPayTypeForAccountCode.selectedIndex].Account;
            document.getElementById('payType_AccountCode_selectedValue').value = accountCodeCollection.items[cboPayTypeForAccountCode.selectedIndex].AccountCode;
        }

        // =====================================
        // Create combo box for pay type Account
        // =====================================
        function createCboForPayTypeAccount(payTypeAccounts) {
            var accountCollection = new wijmo.collections.CollectionView(payTypeAccounts);
            var accountList = new Array();
            for (var i = 0; i < accountCollection.items.length; i++) {
                accountList.push(accountCollection.items[i].Account);
            }

            var disabled;
            if (payTypeAccounts == 0) {
                disabled = true;
            } else {
                if (document.getElementById('payType_Lock').checked == true) {
                    disabled = true;
                } else {
                    disabled = false;
                }
            }

            cboPayTypeForAccount.dispose();
            cboPayTypeForAccount = new wijmo.input.ComboBox('#payType_Account', {
                disabled: disabled,
                placeholder: "Account",
                itemsSource: accountList,
                isEditable: false,
                selectedValue: document.getElementById('payType_Account_selectedValue').value.toString(),
                onSelectedIndexChanged: function () {
                    $('#payType_Account_data').val(accountCollection.items[this.selectedIndex].AccountId);
                    $('#payType_AccountCode_selectedValue').val(accountCollection.items[this.selectedIndex].AccountCode);
                    $('#payType_Account_selectedValue').val(accountCollection.items[this.selectedIndex].Account);

                    createCboForPayTypeAccountCode(payTypeAccounts);
                }
            });

            document.getElementById('payType_Account_data').value = accountCollection.items[cboPayTypeForAccount.selectedIndex].AccountId;
            document.getElementById('payType_AccountCode_selectedValue').value = accountCollection.items[cboPayTypeForAccount.selectedIndex].AccountCode;
            document.getElementById('payType_Account_selectedValue').value = accountCollection.items[cboPayTypeForAccount.selectedIndex].Account;
        }

        // ================
        // Add new Pay Type
        // ================
        function btnPayTypeAdd_OnClick() {
            $('#payTypeEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $('.requiredPayType').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            $('#cmdSavePayTypeButton').prop('disabled', false);
            $('#cmdPayTypeDetailCloseButton').prop('disabled', false);

            document.getElementById('payType_id').value = 0;
            document.getElementById('payType_PayType').value = "";
            document.getElementById('payType_Account_data').value = "";
            document.getElementById('payType_AccountCode_selectedValue').value = "";
            document.getElementById('payType_Account_selectedValue').value = "";
            document.getElementById('payType_Lock').checked = false;

            document.getElementById('payType_PayType').disabled = false;
            document.getElementById('payTypeLockAndUnLock').innerHTML = "<i class='fa fa-unlock'></i>";
            getPayTypeAccountForComboBox();
        }

        // =============
        // Edit Pay Type
        // =============
        function btnPayTypeEdit_OnClick() {
            paytypes.editItem(paytypes.currentItem);
            $('#payTypeEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $('.requiredPayType').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            $('#cmdSavePayTypeButton').prop('disabled', false);
            $('#cmdPayTypeDetailCloseButton').prop('disabled', false);

            var paytype = paytypes.currentEditItem;
            document.getElementById('payType_id').value = paytype.Id ? paytype.Id : '';
            document.getElementById('payType_PayType').value = paytype.PayType ? paytype.PayType : '';
            document.getElementById('payType_Account_data').value = paytype.AccountId ? paytype.AccountId : '';
            document.getElementById('payType_AccountCode_selectedValue').value = paytype.AccountCode ? paytype.AccountCode : '';
            document.getElementById('payType_Account_selectedValue').value = paytype.Account ? paytype.Account : '';
            document.getElementById('payType_Lock').checked = paytype.IsLocked;

            if (document.getElementById('payType_Lock').checked == true) {
                document.getElementById('payType_PayType').disabled = true;
                document.getElementById('payTypeLockAndUnLock').innerHTML = "<i class='fa fa-lock'></i>";

                getPayTypeAccountForComboBox();
            } else {
                document.getElementById('payType_PayType').disabled = false;
                document.getElementById('payTypeLockAndUnLock').innerHTML = "<i class='fa fa-unlock'></i>";

                getPayTypeAccountForComboBox();
            }
        }

        // =========================
        // Pay Type Entry Validation
        // =========================
        function payTypeEntryValidation() {
            var isValid = true;
            $('.requiredPayType').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                }
                else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            return isValid;
        }

        // =========================
        // Refresh Pay Type flexgrid
        // =========================
        function refreshPayTypeFlexgrid() {
            paytypes = new wijmo.collections.CollectionView(getPayType());
            paytypes.canFilter = true;
            paytypes.pageSize = 15;

            var filterTextPayType = '';
            $('#InputFilterPayType').keyup(function () {
                filterTextPayType = this.value.toLowerCase();
                paytypes.refresh();
            });
            paytypes.filter = function (item) {
                return !filterTextPayType || (item.PayType.toLowerCase().indexOf(filterTextPayType) > -1);
            }
            paytypes.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsPayType();
            });
            paytypes.currentChanged.addHandler(function (sender, args) {
                updateDetailsPayType();
            });

            payTypeGrid.itemsSource = paytypes;
            payTypeGrid.trackChanges = true;
        }

        // =============
        // Save Pay Type
        // =============
        function btnPayTypeSaveButton_OnClick() {
            var payTypeObject = new Object();
            var payTypeId = document.getElementById('payType_id').value;
            payTypeObject.PayType = document.getElementById('payType_PayType').value;
            payTypeObject.AccountId = document.getElementById('payType_Account_data').value;
            payTypeObject.IsLocked = document.getElementById('payType_Lock').checked;
            var payTypeData = JSON.stringify(payTypeObject);

            if (document.getElementById('payType_Account_data').value == "") {
                document.getElementById('payType_AccountCode').style.border = "1px solid red";
                document.getElementById('payType_Account').style.border = "1px solid red";
            } else {
                document.getElementById('payType_AccountCode').style.border = "1px solid #C8C8C8";
                document.getElementById('payType_Account').style.border = "1px solid #C8C8C8";
            }

            if (payTypeEntryValidation() == false) {
                toastr.error("Invalid entry");
            } else {
                $('#cmdSavePayTypeButton').prop('disabled', true);
                $('#cmdPayTypeDetailCloseButton').prop('disabled', true);

                if (payTypeId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/addPayType',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: payTypeData,
                        statusCode: {
                            200: function () {
                                $('#cmdSavePayTypeButton').prop('disabled', true);
                                $('#cmdPayTypeDetailCloseButton').prop('disabled', true);
                                toastr.success("Successfully saved");

                                $('#payTypeEdit').modal('hide');

                                refreshPayTypeFlexgrid();
                            },
                            404: function () {
                                toastr.error("Save request not found");
                                $('#cmdSavePayTypeButton').prop('disabled', false);
                                $('#cmdPayTypeDetailCloseButton').prop('disabled', false);
                            },
                            400: function () {
                                toastr.error("Cannot save new record");
                                $('#cmdSavePayTypeButton').prop('disabled', false);
                                $('#cmdPayTypeDetailCloseButton').prop('disabled', false);
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/updatePayType/' + payTypeId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: payTypeData,
                        statusCode: {
                            200: function () {
                                $('#cmdSavePayTypeButton').prop('disabled', true);
                                $('#cmdPayTypeDetailCloseButton').prop('disabled', true);
                                toastr.success("Successfully updated");

                                $('#payTypeEdit').modal('hide');

                                refreshPayTypeFlexgrid();
                            },
                            404: function () {
                                toastr.error("Update request not found");
                                $('#cmdSavePayTypeButton').prop('disabled', false);
                                $('#cmdPayTypeDetailCloseButton').prop('disabled', false);
                            },
                            400: function () {
                                toastr.error("Cannot update record");
                                $('#cmdSavePayTypeButton').prop('disabled', false);
                                $('#cmdPayTypeDetailCloseButton').prop('disabled', false);
                            }
                        }
                    });
                }
            }
        }

        // ===============
        // DELETE Pay Type
        // ===============
        function btnPayTypeDelete_OnClick() {
            $('#deletePayTypeConfirm').modal({
                show: true,
                backdrop: 'static'
            });

            $('#cmdConfirmDeletePayType').prop('disabled', false);
            $('#cmdConfirmDeleteCloseButtonPayType').prop('disabled', false);
        }
        // Pay Type Confirm Delete Button
        function cmdPayTypeConfirmDeleteButton_OnClick() {
            $('#cmdConfirmDeletePayType').prop('disabled', true);
            $('#cmdConfirmDeleteCloseButtonPayType').prop('disabled', true);

            paytypes.editItem(paytypes.currentItem);
            var payTypeId = paytypes.currentEditItem.Id;
            $.ajax({
                url: '/api/deletePayType/' + payTypeId,
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        $('#cmdConfirmDeletePayType').prop('disabled', true);
                        $('#cmdConfirmDeleteCloseButtonPayType').prop('disabled', true);
                        toastr.success("Successfully deleted");

                        $('#deletePayTypeConfirm').modal('hide');

                        refreshPayTypeFlexgrid();
                    },
                    404: function () {
                        toastr.error("Delete request not found");
                        $('#cmdConfirmDeletePayType').prop('disabled', false);
                        $('#cmdConfirmDeleteCloseButtonPayType').prop('disabled', false);
                        $('#deletePayTypeConfirm').modal('hide');
                    },
                    400: function () {
                        toastr.error("Cannot delete record");
                        $('#cmdConfirmDeletePayType').prop('disabled', false);
                        $('#cmdConfirmDeleteCloseButtonPayType').prop('disabled', false);
                        $('#deletePayTypeConfirm').modal('hide');
                    }
                }
            });
        }

        // ========
        // Pay Type
        // ========
        function payTypeTab() {
            cboPayTypeForAccount = new wijmo.input.ComboBox('#payType_Account');
            cboPayTypeForAccountCode = new wijmo.input.ComboBox('#payType_AccountCode');

            paytypes = new wijmo.collections.CollectionView(getPayType());
            paytypes.canFilter = true;
            paytypes.pageSize = 15;

            var filterTextPayType = '';
            $('#InputFilterPayType').keyup(function () {
                filterTextPayType = this.value.toLowerCase();
                paytypes.refresh();
            });
            paytypes.filter = function (item) {
                return !filterTextPayType || (item.PayType.toLowerCase().indexOf(filterTextPayType) > -1);
            }
            paytypes.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsPayType();
            });
            paytypes.currentChanged.addHandler(function (sender, args) {
                updateDetailsPayType();
            });

            // Flex Grid for Pay Type
            payTypeGrid = new wijmo.grid.FlexGrid('#PayTypeGrid');
            payTypeGrid.initialize({
                columns: [
                            {
                                "header": "Edit",
                                "binding": "EditId",
                                "width": 60,
                                "align": "center",
                                "allowResizing": false,
                                "allowSorting": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Delete",
                                "binding": "DeleteId",
                                "width": 70,
                                "align": "center",
                                "allowResizing": false,
                                "allowSorting": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Pay Type",
                                "binding": "PayType",
                                "allowSorting": true,
                                "width": "2*",
                            },
                            {
                                "header": "Account",
                                "binding": "Account",
                                "allowSorting": true,
                                "width": "2*"
                            },
                            {
                                "header": "Lock",
                                "binding": "IsLocked",
                                "allowSorting": true,
                                "width": "0.3*"
                            }
                ],
                autoGenerateColumns: false,
                itemsSource: paytypes,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            payTypeGrid.trackChanges = true;

            //Navigation button for Pay Type
            btnFirstPageGridPayType = document.getElementById('btnMoveToFirstPageGridPayType');
            btnPreviousPageGridPayType = document.getElementById('btnMoveToPreviousPageGridPayType');
            btnNextPageGridPayType = document.getElementById('btnMoveToNextPageGridPayType');
            btnLastPageGridPayType = document.getElementById('btnMoveToLastPageGridPayType');
            btnCurrentPageGridPayType = document.getElementById('btnCurrentPageGridPayType');

            updateNavigateButtonsPayType();

            btnFirstPageGridPayType.addEventListener('click', function () {
                paytypes.moveToFirstPage();
                updateNavigateButtonsPayType();
            });
            btnPreviousPageGridPayType.addEventListener('click', function () {
                paytypes.moveToPreviousPage();
                updateNavigateButtonsPayType();
            });
            btnNextPageGridPayType.addEventListener('click', function () {
                paytypes.moveToNextPage();
                updateNavigateButtonsPayType();
            });
            btnLastPageGridPayType.addEventListener('click', function () {
                paytypes.moveToLastPage();
                updateNavigateButtonsPayType();
            });
        }
    </script>

    <!-- =========== -->
    <!-- Tax Scripts -->
    <!-- =========== -->
    <script type="text/javascript">
        // ========================
        // Global Variables for Tax
        // ========================
        var taxes;
        var taxGrid;
        var taxAccounts;
        var cboTaxForAccountCode;
        var cboTaxForAccount;
        var btnFirstPageGridTax;
        var btnPreviousPageGridTax;
        var btnNextPageGridTax;
        var btnLastPageGridTax;
        var btnCurrentPageGridTax;

        // ============
        // GET Tax List
        // ============
        function getTax() {
            var taxes = new wijmo.collections.ObservableArray;
            NProgress.start();
            $.ajax({
                url: '/api/listTaxType',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (taxResults) {
                    if (taxResults.length > 0) {
                        for (i = 0; i < taxResults.length; i++) {

                            var btnDeleteId;
                            if (taxResults[i]["IsLocked"] == true) {
                                btnDeleteId = "<button class='btn btn-danger btn-xs btn-block' onclick='btnTaxDeleteLock_OnClick()'><i class='fa fa-trash'></i> Delete</button>";
                            } else {
                                btnDeleteId = "<button class='btn btn-danger btn-xs btn-block' onclick='btnTaxDelete_OnClick()'><i class='fa fa-trash'></i> Delete</button>";
                            }

                            taxes.push({
                                EditId: "<button class='btn btn-primary btn-xs btn-block' onclick='btnTaxEdit_OnClick()'><i class='fa fa-edit'></i> Edit</button>",
                                DeleteId: btnDeleteId,
                                Id: taxResults[i]["Id"],
                                TaxType: taxResults[i]["TaxType"],
                                TaxRate: taxResults[i]["TaxRate"],
                                IsInclusive: taxResults[i]["IsInclusive"],
                                AccountId: taxResults[i]["AccountId"],
                                AccountCode: taxResults[i]["AccountCode"],
                                Account: taxResults[i]["Account"],
                                IsLocked: taxResults[i]["IsLocked"],
                                CreatedById: taxResults[i]["CreatedById"],
                                CreatedBy: taxResults[i]["CreatedBy"],
                                CreatedDateTime: taxResults[i]["CreatedDateTime"],
                                UpdatedById: taxResults[i]["UpdatedById"],
                                UpdatedBy: taxResults[i]["UpdatedBy"],
                                UpdatedDateTime: taxResults[i]["UpdatedDateTime"]
                            });
                        }
                    }
                    NProgress.done();
                }
            }).fail(function (xhr, textStatus, err) {
                alert(err);
            });
            return taxes;
        }

        // ======================
        // Tax Delete Lock Button
        // ======================
        function btnTaxDeleteLock_OnClick() {
            $('#deleteRecordLock').modal({
                show: true,
                backdrop: 'static'
            });
        }

        // ==========================
        // FlexGrid Selection for Tax
        // ==========================
        function updateDetailsTax() {
            var item = taxes.currentItem;
            document.getElementById('createdBy').innerHTML = item.CreatedBy;
            document.getElementById('createdDate').innerHTML = item.CreatedDateTime;
            document.getElementById('updatedBy').innerHTML = item.UpdatedBy;
            document.getElementById('updatedDate').innerHTML = item.UpdatedDateTime;
        }

        // ===============================
        // Navigation Buttons for Tax type
        // ===============================
        function updateNavigateButtonsTax() {
            if (taxes.pageSize <= 0) {
                document.getElementById('navigationPageGridTax').style.display = 'none';
                return;
            }
            document.getElementById('navigationPageGridTax').style.display = 'block';
            if (taxes.pageIndex === 0) {
                btnFirstPageGridTax.setAttribute('disabled', 'disabled');
                btnPreviousPageGridTax.setAttribute('disabled', 'disabled');
                btnNextPageGridTax.removeAttribute('disabled');
                btnLastPageGridTax.removeAttribute('disabled');
            } else if (taxes.pageIndex === (taxes.pageCount - 1)) {
                btnFirstPageGridTax.removeAttribute('disabled');
                btnPreviousPageGridTax.removeAttribute('disabled');
                btnLastPageGridTax.setAttribute('disabled', 'disabled');
                btnNextPageGridTax.setAttribute('disabled', 'disabled');
            } else {
                btnFirstPageGridTax.removeAttribute('disabled');
                btnPreviousPageGridTax.removeAttribute('disabled');
                btnNextPageGridTax.removeAttribute('disabled');
                btnLastPageGridTax.removeAttribute('disabled');
            }
            btnCurrentPageGridTax.innerHTML = (taxes.pageIndex + 1) + ' / ' + taxes.pageCount;
        }

        // =======================================
        // Get Account list for tax type combo box
        // =======================================
        function getTaxAccountForComboBox() {
            taxAccounts = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listAccount',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (taxAccountResults) {
                    if (taxAccountResults.length > 0) {
                        for (i = 0; i < taxAccountResults.length; i++) {
                            taxAccounts.push({
                                AccountId: taxAccountResults[i]["Id"],
                                AccountCode: taxAccountResults[i]["AccountCode"],
                                Account: taxAccountResults[i]["Account"]
                            });
                        }
                        createCboForTaxAccountCode(taxAccounts);
                        createCboForTaxAccount(taxAccounts);
                    } else {
                        createCboForTaxAccountCode(taxAccounts);
                        createCboForTaxAccount(taxAccounts);
                    }
                }
            });
        }

        // ==========================================
        // Create combo box for tax type Account Code
        // ==========================================
        function createCboForTaxAccountCode(taxAccounts) {
            var accountCodeCollection = new wijmo.collections.CollectionView(taxAccounts);
            var accountCodeList = new Array();
            for (var i = 0; i < accountCodeCollection.items.length; i++) {
                accountCodeList.push(accountCodeCollection.items[i].AccountCode);
            }

            var disabled;
            if (taxAccounts == 0) {
                disabled = true;
            } else {
                if (document.getElementById('taxType_Lock').checked == true) {
                    disabled = true;
                } else {
                    disabled = false;
                }
            }

            cboTaxForAccountCode.dispose();
            cboTaxForAccountCode = new wijmo.input.ComboBox('#taxType_AccountCode', {
                disabled: disabled,
                placeholder: "Code",
                itemsSource: accountCodeList,
                isEditable: false,
                selectedValue: document.getElementById('taxType_AccountCode_selectedValue').value.toString(),
                onSelectedIndexChanged: function () {
                    $('#taxType_Account_data').val(accountCodeCollection.items[this.selectedIndex].AccountId);
                    $('#taxType_Account_selectedValue').val(accountCodeCollection.items[this.selectedIndex].Account);
                    $('#taxType_AccountCode_selectedValue').val(accountCodeCollection.items[this.selectedIndex].AccountCode);

                    createCboForTaxAccount(taxAccounts);
                }
            });

            document.getElementById('taxType_Account_data').value = accountCodeCollection.items[cboTaxForAccountCode.selectedIndex].AccountId;
            document.getElementById('taxType_Account_selectedValue').value = accountCodeCollection.items[cboTaxForAccountCode.selectedIndex].Account;
            document.getElementById('taxType_AccountCode_selectedValue').value = accountCodeCollection.items[cboTaxForAccountCode.selectedIndex].AccountCode;
        }

        // =====================================
        // Create combo box for tax type Account
        // =====================================
        function createCboForTaxAccount(taxAccounts) {
            var accountCollection = new wijmo.collections.CollectionView(taxAccounts);
            var accountList = new Array();
            for (var i = 0; i < accountCollection.items.length; i++) {
                accountList.push(accountCollection.items[i].Account);
            }

            var disabled;
            if (taxAccounts == 0) {
                disabled = true;
            } else {
                if (document.getElementById('taxType_Lock').checked == true) {
                    disabled = true;
                } else {
                    disabled = false;
                }
            }

            cboTaxForAccount.dispose();
            cboTaxForAccount = new wijmo.input.ComboBox('#taxType_Account', {
                disabled: disabled,
                placeholder: "Account",
                itemsSource: accountList,
                isEditable: false,
                selectedValue: document.getElementById('taxType_Account_selectedValue').value.toString(),
                onSelectedIndexChanged: function () {
                    $('#taxType_Account_data').val(accountCollection.items[this.selectedIndex].AccountId);
                    $('#taxType_AccountCode_selectedValue').val(accountCollection.items[this.selectedIndex].AccountCode);
                    $('#taxType_Account_selectedValue').val(accountCollection.items[this.selectedIndex].Account);

                    createCboForTaxAccountCode(taxAccounts);
                }
            });

            document.getElementById('taxType_Account_data').value = accountCollection.items[cboTaxForAccount.selectedIndex].AccountId;
            document.getElementById('taxType_AccountCode_selectedValue').value = accountCollection.items[cboTaxForAccount.selectedIndex].AccountCode;
            document.getElementById('taxType_Account_selectedValue').value = accountCollection.items[cboTaxForAccount.selectedIndex].Account;
        }

        // ================
        // Add new Tax type
        // ================
        function btnTaxAdd_OnClick() {
            $('#taxEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $('.requiredTaxType').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            $('#cmdSaveTaxTypeButton').prop('disabled', false);
            $('#cmdTaxTypeDetailCloseButton').prop('disabled', false);

            document.getElementById('taxType_id').value = 0;
            document.getElementById('taxType_TaxType').value = "";
            document.getElementById('taxType_TaxRate').value = "";
            document.getElementById('taxType_TaxVATInclusive').checked = "";
            document.getElementById('taxType_Account_data').value = "";
            document.getElementById('taxType_AccountCode_selectedValue').value = "";
            document.getElementById('taxType_Account_selectedValue').value = "";
            document.getElementById('taxType_Lock').checked = false;

            document.getElementById('taxType_TaxType').disabled = false;
            document.getElementById('taxType_TaxRate').disabled = false;
            document.getElementById('taxType_TaxVATInclusive').disabled = false;
            document.getElementById('taxTypeLockAndUnLock').innerHTML = "<i class='fa fa-unlock'></i>";
            getTaxAccountForComboBox();
        }

        // ========
        // EDIT Tax
        // ========
        function btnTaxEdit_OnClick() {
            taxes.editItem(taxes.currentItem);
            $('#taxEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $('.requiredTaxType').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            $('#cmdSaveTaxTypeButton').prop('disabled', false);
            $('#cmdTaxTypeDetailCloseButton').prop('disabled', false);

            var tax = taxes.currentEditItem;
            document.getElementById('taxType_id').value = tax.Id ? tax.Id : '';
            document.getElementById('taxType_TaxType').value = tax.TaxType ? tax.TaxType : '';
            document.getElementById('taxType_TaxRate').value = tax.TaxRate;
            document.getElementById('taxType_TaxVATInclusive').checked = tax.IsInclusive ? tax.IsInclusive : '';
            document.getElementById('taxType_Account_data').value = tax.AccountId ? tax.AccountId : '';
            document.getElementById('taxType_AccountCode_selectedValue').value = tax.AccountCode ? tax.AccountCode : '';
            document.getElementById('taxType_Account_selectedValue').value = tax.Account ? tax.Account : '';
            document.getElementById('taxType_Lock').checked = tax.IsLocked;

            if (document.getElementById('taxType_Lock').checked == true) {
                document.getElementById('taxType_TaxType').disabled = true;
                document.getElementById('taxType_TaxRate').disabled = true;
                document.getElementById('taxType_TaxVATInclusive').disabled = true;
                document.getElementById('taxTypeLockAndUnLock').innerHTML = "<i class='fa fa-lock'></i>";
                getTaxAccountForComboBox();
            } else {
                document.getElementById('taxType_TaxType').disabled = false;
                document.getElementById('taxType_TaxRate').disabled = false;
                document.getElementById('taxType_TaxVATInclusive').disabled = false;
                document.getElementById('taxTypeLockAndUnLock').innerHTML = "<i class='fa fa-unlock'></i>";
                getTaxAccountForComboBox();
            }
        }

        // =========================
        // Tax Type Entry Validation
        // =========================
        function taxTypeEntryValidation() {
            var isValid = true;
            $('.requiredTaxType').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                }
                else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            return isValid;
        }

        // =========================
        // Refresh Tax Type Flexgrid
        // =========================
        function refreshTaxTypeFlexgrid() {
            taxes = new wijmo.collections.CollectionView(getTax());
            taxes.canFilter = true;
            taxes.pageSize = 15;

            var filterTextTax = '';
            $('#InputFilterTax').keyup(function () {
                filterTextTax = this.value.toLowerCase();
                taxes.refresh();
            });
            taxes.filter = function (item) {
                return !filterTextTax || (item.TaxType.toLowerCase().indexOf(filterTextTax) > -1);
            }
            taxes.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsTax();
            });
            taxes.currentChanged.addHandler(function (sender, args) {
                updateDetailsTax();
            });

            taxGrid.itemsSource = taxes;
            taxGrid.trackChanges = true;
        }

        // ========
        // SAVE Tax
        // ========
        function btnTaxTypeSaveButton_OnClick() {
            var taxObject = new Object();
            var taxId = document.getElementById('taxType_id').value;
            taxObject.TaxType = document.getElementById('taxType_TaxType').value;
            taxObject.TaxRate = document.getElementById('taxType_TaxRate').value;
            taxObject.IsInclusive = document.getElementById('taxType_TaxVATInclusive').checked;
            taxObject.AccountId = document.getElementById('taxType_Account_data').value;
            taxObject.IsLocked = document.getElementById('taxType_Lock').checked;
            var taxData = JSON.stringify(taxObject);

            if (document.getElementById('taxType_Account_data').value == '') {
                document.getElementById("taxType_AccountCode").style.border = "1px solid red";
                document.getElementById("taxType_Account").style.border = "1px solid red";
            } else {
                document.getElementById("taxType_AccountCode").style.border = "1px solid #C8C8C8";
                document.getElementById("taxType_Account").style.border = "1px solid #C8C8C8";
            }

            if (taxTypeEntryValidation() == false) {
                toastr.error("Invalid entry");
            } else {
                $('#cmdSaveTaxTypeButton').prop('disabled', true);
                $('#cmdTaxTypeDetailCloseButton').prop('disabled', true);

                if (taxId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/addTaxType',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: taxData,
                        statusCode: {
                            200: function () {
                                $('#cmdSaveTaxTypeButton').prop('disabled', true);
                                $('#cmdTaxTypeDetailCloseButton').prop('disabled', true);
                                toastr.success("Successfully saved");

                                $('#taxEdit').modal('hide');

                                refreshTaxTypeFlexgrid();
                            },
                            404: function () {
                                toastr.error("Save request not found");
                                $('#cmdSaveTaxTypeButton').prop('disabled', false);
                                $('#cmdTaxTypeDetailCloseButton').prop('disabled', false);
                            },
                            400: function () {
                                toastr.error("Cannot save new record");
                                $('#cmdSaveTaxTypeButton').prop('disabled', false);
                                $('#cmdTaxTypeDetailCloseButton').prop('disabled', false);
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/updateTaxType/' + taxId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: taxData,
                        statusCode: {
                            200: function () {
                                $('#cmdSaveTaxTypeButton').prop('disabled', true);
                                $('#cmdTaxTypeDetailCloseButton').prop('disabled', true);
                                toastr.success("Successfully updated");

                                $('#taxEdit').modal('hide');

                                refreshTaxTypeFlexgrid();
                            },
                            404: function () {
                                toastr.error("Update request not found");
                                $('#cmdSaveTaxTypeButton').prop('disabled', false);
                                $('#cmdTaxTypeDetailCloseButton').prop('disabled', false);
                            },
                            400: function () {
                                toastr.error("Cannot update record");
                                $('#cmdSaveTaxTypeButton').prop('disabled', false);
                                $('#cmdTaxTypeDetailCloseButton').prop('disabled', false);
                            }
                        }
                    });
                }
            }
        }

        // ==========
        // DELETE Tax
        // ==========
        function btnTaxDelete_OnClick() {
            $('#deleteTaxTypeConfirm').modal({
                show: true,
                backdrop: 'static'
            });

            $('#cmdConfirmDeleteTaxType').prop('disabled', false);
            $('#cmdConfirmDeleteCloseButtonTaxType').prop('disabled', false);
        }
        // Tax Type Confirm Delete Button
        function cmdTaxTypeConfirmDeleteButton_OnClick() {
            $('#cmdConfirmDeleteTaxType').prop('disabled', true);
            $('#cmdConfirmDeleteCloseButtonTaxType').prop('disabled', true);

            taxes.editItem(taxes.currentItem);
            var taxId = taxes.currentEditItem.Id;
            $.ajax({
                url: '/api/deleteTaxType/' + taxId,
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        $('#cmdConfirmDeleteTaxType').prop('disabled', true);
                        $('#cmdConfirmDeleteCloseButtonTaxType').prop('disabled', true);
                        toastr.success("Successfully deleted");

                        $('#deleteTaxTypeConfirm').modal('hide');

                        refreshTaxTypeFlexgrid();
                    },
                    404: function () {
                        toastr.error("Delete request not found");
                        $('#cmdConfirmDeleteTaxType').prop('disabled', false);
                        $('#cmdConfirmDeleteCloseButtonTaxType').prop('disabled', false);
                        $('#deleteTaxTypeConfirm').modal('hide');

                    },
                    400: function () {
                        toastr.error("Cannot delete record");
                        $('#cmdConfirmDeleteTaxType').prop('disabled', false);
                        $('#cmdConfirmDeleteCloseButtonTaxType').prop('disabled', false);
                        $('#deleteTaxTypeConfirm').modal('hide');
                    }
                }
            });
        }

        // ===
        // Tax
        // ===
        function taxTab() {
            cboTaxForAccountCode = new wijmo.input.ComboBox('#taxType_AccountCode');
            cboTaxForAccount = new wijmo.input.ComboBox('#taxType_Account');

            taxes = new wijmo.collections.CollectionView(getTax());
            taxes.canFilter = true;
            taxes.pageSize = 15;

            var filterTextTax = '';
            $('#InputFilterTax').keyup(function () {
                filterTextTax = this.value.toLowerCase();
                taxes.refresh();
            });
            taxes.filter = function (item) {
                return !filterTextTax || (item.TaxType.toLowerCase().indexOf(filterTextTax) > -1);
            }
            taxes.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsTax();
            });
            taxes.currentChanged.addHandler(function (sender, args) {
                updateDetailsTax();
            });

            // Flex Grid for Tax
            taxGrid = new wijmo.grid.FlexGrid('#TaxGrid');
            taxGrid.initialize({
                columns: [
                            {
                                "header": "Edit",
                                "binding": "EditId",
                                "width": 60,
                                "align": "center",
                                "allowResizing": false,
                                "allowSorting": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Delete",
                                "binding": "DeleteId",
                                "width": 70,
                                "align": "center",
                                "allowResizing": false,
                                "allowSorting": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Tax Type",
                                "binding": "TaxType",
                                "allowSorting": true,
                                "width": "2*",
                            },
                            {
                                "header": "Rate",
                                "binding": "TaxRate",
                                "allowSorting": true,
                                "width": "0.7*"
                            },
                            {
                                "header": "Inclusive",
                                "binding": "IsInclusive",
                                "allowSorting": true,
                                "width": "0.5*"
                            },
                            {
                                "header": "Account",
                                "binding": "Account",
                                "allowSorting": true,
                                "width": "2*"
                            },
                            {
                                "header": "Lock",
                                "binding": "IsLocked",
                                "allowSorting": true,
                                "width": "0.5*"
                            }
                ],
                autoGenerateColumns: false,
                itemsSource: taxes,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            taxGrid.trackChanges = true;

            //Navigation button for Tax
            btnFirstPageGridTax = document.getElementById('btnMoveToFirstPageGridTax');
            btnPreviousPageGridTax = document.getElementById('btnMoveToPreviousPageGridTax');
            btnNextPageGridTax = document.getElementById('btnMoveToNextPageGridTax');
            btnLastPageGridTax = document.getElementById('btnMoveToLastPageGridTax');
            btnCurrentPageGridTax = document.getElementById('btnCurrentPageGridTax');

            updateNavigateButtonsTax();

            btnFirstPageGridTax.addEventListener('click', function () {
                taxes.moveToFirstPage();
                updateNavigateButtonsTax();
            });
            btnPreviousPageGridTax.addEventListener('click', function () {
                taxes.moveToPreviousPage();
                updateNavigateButtonsTax();
            });
            btnNextPageGridTax.addEventListener('click', function () {
                taxes.moveToNextPage();
                updateNavigateButtonsTax();
            });
            btnLastPageGridTax.addEventListener('click', function () {
                taxes.moveToLastPage();
                updateNavigateButtonsTax();
            });
        }
    </script>

    <!-- ============ -->
    <!-- Unit Scripts -->
    <!-- ============ -->
    <script type="text/javascript">
        // =========================
        // Global Variables for Unit
        // =========================
        var units;
        var unitGrid;
        var btnFirstPageGridUnit;
        var btnPreviousPageGridUnit;
        var btnNextPageGridUnit;
        var btnLastPageGridUnit;
        var btnCurrentPageGridUnit;

        // =============
        // GET Unit List
        // =============
        function getUnit() {
            var units = new wijmo.collections.ObservableArray;
            NProgress.start();
            $.ajax({
                url: '/api/listUnit',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (unitResults) {
                    if (unitResults.length > 0) {
                        for (i = 0; i < unitResults.length; i++) {

                            var btnDeleteId;
                            if (unitResults[i]["IsLocked"] == true) {
                                btnDeleteId = "<button class='btn btn-danger btn-xs btn-block' onclick='btnDeletetUnitLock_OnClick()'><i class='fa fa-trash'></i> Delete</button>";
                            } else {
                                btnDeleteId = "<button class='btn btn-danger btn-xs btn-block' onclick='btnDeletetUnit_OnClick()'><i class='fa fa-trash'></i> Delete</button>";
                            }

                            units.push({
                                EditId: "<button class='btn btn-primary btn-xs btn-block' onclick='btnEditUnit_OnClick()'><i class='fa fa-edit'></i> Edit</button>",
                                DeleteId: btnDeleteId,
                                Id: unitResults[i]["Id"],
                                Unit: unitResults[i]["Unit"],
                                IsLocked: unitResults[i]["IsLocked"],
                                CreatedById: unitResults[i]["CreatedById"],
                                CreatedBy: unitResults[i]["CreatedBy"],
                                CreatedDateTime: unitResults[i]["CreatedDateTime"],
                                UpdatedById: unitResults[i]["UpdatedById"],
                                UpdatedBy: unitResults[i]["UpdatedBy"],
                                UpdatedDateTime: unitResults[i]["UpdatedDateTime"]
                            });

                        }
                    }
                    NProgress.done();
                }
            }).fail(function (xhr, textStatus, err) {
                alert(err);
            });
            return units;
        }

        // =======================
        // Unit Delete Lock Button
        // =======================
        function btnDeletetUnitLock_OnClick() {
            $('#deleteRecordLock').modal({
                show: true,
                backdrop: 'static'
            });
        }

        // ===========================
        // FlexGrid Selection for Unit
        // ===========================
        function updateDetailsUnit() {
            var item = units.currentItem;
            document.getElementById('createdBy').innerHTML = item.CreatedBy;
            document.getElementById('createdDate').innerHTML = item.CreatedDateTime;
            document.getElementById('updatedBy').innerHTML = item.UpdatedBy;
            document.getElementById('updatedDate').innerHTML = item.UpdatedDateTime;
        }

        // ===========================
        // Navigation Buttons for Unit
        // ===========================
        function updateNavigateButtonsUnit() {
            if (units.pageSize <= 0) {
                document.getElementById('navigationPageGridUnit').style.display = 'none';
                return;
            }
            document.getElementById('navigationPageGridUnit').style.display = 'block';
            if (units.pageIndex === 0) {
                btnFirstPageGridUnit.setAttribute('disabled', 'disabled');
                btnPreviousPageGridUnit.setAttribute('disabled', 'disabled');
                btnNextPageGridUnit.removeAttribute('disabled');
                btnLastPageGridUnit.removeAttribute('disabled');
            } else if (units.pageIndex === (units.pageCount - 1)) {
                btnFirstPageGridUnit.removeAttribute('disabled');
                btnPreviousPageGridUnit.removeAttribute('disabled');
                btnLastPageGridUnit.setAttribute('disabled', 'disabled');
                btnNextPageGridUnit.setAttribute('disabled', 'disabled');
            } else {
                btnFirstPageGridUnit.removeAttribute('disabled');
                btnPreviousPageGridUnit.removeAttribute('disabled');
                btnNextPageGridUnit.removeAttribute('disabled');
                btnLastPageGridUnit.removeAttribute('disabled');
            }
            btnCurrentPageGridUnit.innerHTML = (units.pageIndex + 1) + ' / ' + units.pageCount;
        }

        // ============
        // Add new Unit
        // ============
        function btnUnitAdd_OnClick() {
            $('#unitEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $('.requiredUnit').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            $('#cmdSaveUnitButton').prop('disabled', false);
            $('#cmdUnitDetailCloseButton').prop('disabled', false);

            document.getElementById('unit_id').value = 0;
            document.getElementById('unit_Unit').value = "";
            document.getElementById('unit_Lock').checked = false;

            document.getElementById('unit_Unit').disabled = false;
        }

        // =========
        // Edit Unit
        // =========
        function btnEditUnit_OnClick() {
            units.editItem(units.currentItem);
            $('#unitEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $('.requiredUnit').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            $('#cmdSaveUnitButton').prop('disabled', false);
            $('#cmdUnitDetailCloseButton').prop('disabled', false);

            var unit = units.currentEditItem;
            document.getElementById('unit_id').value = unit.Id ? unit.Id : '';
            document.getElementById('unit_Unit').value = unit.Unit ? unit.Unit : '';
            document.getElementById('unit_Lock').checked = unit.IsLocked;

            if (document.getElementById('unit_Lock').checked == true) {
                document.getElementById('unit_Unit').disabled = true;
            } else {
                document.getElementById('unit_Unit').disabled = false;
            }
        }

        // =====================
        // Unit Entry Validation
        // =====================
        function unitEntryValidation() {
            var isValid = true;
            $('.requiredUnit').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                }
                else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            return isValid;
        }

        // =====================
        // Refresh Unit Flexgrid
        // =====================
        function refreshUnitFlexgrid() {
            units = new wijmo.collections.CollectionView(getUnit());
            units.canFilter = true;
            units.pageSize = 15;

            var filterTextUnit = '';
            $('#InputFilterUnit').keyup(function () {
                filterTextUnit = this.value.toLowerCase();
                units.refresh();
            });
            units.filter = function (item) {
                return !filterTextUnit || (item.Unit.toLowerCase().indexOf(filterTextUnit) > -1);
            }
            units.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsUnit();
            });
            units.currentChanged.addHandler(function (sender, args) {
                updateDetailsUnit();
            });

            unitGrid.itemsSource = units;
            unitGrid.trackChanges = true;
        }

        // =========
        // SAVE Unit
        // =========
        function btnUnitSaveButton_OnClick() {
            var unitObject = new Object();
            var unitId = document.getElementById('unit_id').value;
            unitObject.Unit = document.getElementById('unit_Unit').value;
            unitObject.IsLocked = document.getElementById('unit_Lock').checked;
            var unitData = JSON.stringify(unitObject);

            if (unitEntryValidation() == false) {
                toastr.error("Invalid entry");
            } else {
                $('#cmdSaveUnitButton').prop('disabled', true);
                $('#cmdUnitDetailCloseButton').prop('disabled', true);

                if (unitId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/addUnit',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: unitData,
                        statusCode: {
                            200: function () {
                                $('#cmdSaveUnitButton').prop('disabled', true);
                                $('#cmdUnitDetailCloseButton').prop('disabled', true);
                                toastr.success("Successfully saved");

                                $('#unitEdit').modal('hide');

                                refreshUnitFlexgrid();
                            },
                            404: function () {
                                toastr.error("Save request not found");
                                $('#cmdSaveUnitButton').prop('disabled', false);
                                $('#cmdUnitDetailCloseButton').prop('disabled', false);
                            },
                            400: function () {
                                toastr.error("Cannot save new record");
                                $('#cmdSaveUnitButton').prop('disabled', false);
                                $('#cmdUnitDetailCloseButton').prop('disabled', false);
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/updateUnit/' + unitId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: unitData,
                        statusCode: {
                            200: function () {
                                $('#cmdSaveUnitButton').prop('disabled', true);
                                $('#cmdUnitDetailCloseButton').prop('disabled', true);
                                toastr.success("Successfully updated");

                                $('#unitEdit').modal('hide');

                                refreshUnitFlexgrid();
                            },
                            404: function () {
                                toastr.error("Update request not found");
                                $('#cmdSaveUnitButton').prop('disabled', false);
                                $('#cmdUnitDetailCloseButton').prop('disabled', false);
                            },
                            400: function () {
                                toastr.error("Cannot update record");
                                $('#cmdSaveUnitButton').prop('disabled', false);
                                $('#cmdUnitDetailCloseButton').prop('disabled', false);
                            }
                        }
                    });
                }
            }
        }

        // ===========
        // DELETE Unit
        // ===========
        function btnDeletetUnit_OnClick() {
            $('#deleteUnitConfirm').modal({
                show: true,
                backdrop: 'static'
            });

            $('#cmdConfirmDeleteUnit').prop('disabled', false);
            $('#cmdConfirmDeleteCloseButtonUnit').prop('disabled', false);
        }
        // Unit Confirm Delete Button
        function cmdUnitConfirmDeleteButton_OnClick() {
            $('#cmdConfirmDeleteUnit').prop('disabled', true);
            $('#cmdConfirmDeleteCloseButtonUnit').prop('disabled', true);

            units.editItem(units.currentItem);
            var unitId = units.currentEditItem.Id;
            $.ajax({
                url: '/api/deleteUnit/' + unitId,
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        $('#cmdConfirmDeleteUnit').prop('disabled', true);
                        $('#cmdConfirmDeleteCloseButtonUnit').prop('disabled', true);
                        toastr.success("Successfully Deleted");

                        $('#deleteUnitConfirm').modal('hide');

                        refreshUnitFlexgrid();
                    },
                    404: function () {
                        toastr.error("Delete request not found");
                        $('#cmdConfirmDeleteUnit').prop('disabled', false);
                        $('#cmdConfirmDeleteCloseButtonUnit').prop('disabled', false);
                        $('#deleteUnitConfirm').modal('hide');
                    },
                    400: function () {
                        toastr.error("Cannot delete record");
                        $('#cmdConfirmDeleteUnit').prop('disabled', false);
                        $('#cmdConfirmDeleteCloseButtonUnit').prop('disabled', false);
                        $('#deleteUnitConfirm').modal('hide');
                    }
                }
            });
        }

        // ====
        // Unit
        // ====
        function unitTab() {
            units = new wijmo.collections.CollectionView(getUnit());
            units.canFilter = true;
            units.pageSize = 15;

            var filterTextUnit = '';
            $('#InputFilterUnit').keyup(function () {
                filterTextUnit = this.value.toLowerCase();
                units.refresh();
            });
            units.filter = function (item) {
                return !filterTextUnit || (item.Unit.toLowerCase().indexOf(filterTextUnit) > -1);
            }
            units.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsUnit();
            });
            units.currentChanged.addHandler(function (sender, args) {
                updateDetailsUnit();
            });

            // Flex Grid for Unit
            unitGrid = new wijmo.grid.FlexGrid('#UnitGrid');
            unitGrid.initialize({
                columns: [
                            {
                                "header": "Edit",
                                "binding": "EditId",
                                "width": 60,
                                "align": "center",
                                "allowResizing": false,
                                "allowSorting": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Delete",
                                "binding": "DeleteId",
                                "width": 70,
                                "align": "center",
                                "allowResizing": false,
                                "allowSorting": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Unit",
                                "binding": "Unit",
                                "allowSorting": true,
                                "width": "1*",
                            },
                            {
                                "header": "Lock",
                                "binding": "IsLocked",
                                "allowSorting": true,
                                "width": "0.1*"
                            }
                ],
                autoGenerateColumns: false,
                itemsSource: units,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            unitGrid.trackChanges = true;

            //Navigation button for Unit
            btnFirstPageGridUnit = document.getElementById('btnMoveToFirstPageGridUnit');
            btnPreviousPageGridUnit = document.getElementById('btnMoveToPreviousPageGridUnit');
            btnNextPageGridUnit = document.getElementById('btnMoveToNextPageGridUnit');
            btnLastPageGridUnit = document.getElementById('btnMoveToLastPageGridUnit');
            btnCurrentPageGridUnit = document.getElementById('btnCurrentPageGridUnit');

            updateNavigateButtonsUnit();

            btnFirstPageGridUnit.addEventListener('click', function () {
                units.moveToFirstPage();
                updateNavigateButtonsUnit();
            });
            btnPreviousPageGridUnit.addEventListener('click', function () {
                units.moveToPreviousPage();
                updateNavigateButtonsUnit();
            });
            btnNextPageGridUnit.addEventListener('click', function () {
                units.moveToNextPage();
                updateNavigateButtonsUnit();
            });
            btnLastPageGridUnit.addEventListener('click', function () {
                units.moveToLastPage();
                updateNavigateButtonsUnit();
            });
        }
    </script>

    <!-- ============ -->
    <!-- Term Scripts -->
    <!-- ============ -->
    <script type="text/javascript">
        // =========================
        // Global Variables for Term
        // =========================
        var terms;
        var termGrid;
        var btnFirstPageGridTerm;
        var btnPreviousPageGridTerm;
        var btnNextPageGridTerm;
        var btnLastPageGridTerm;
        var btnCurrentPageGridTerm;

        // =============
        // GET Term List
        // =============
        function getTerm() {
            var terms = new wijmo.collections.ObservableArray;
            NProgress.start();
            $.ajax({
                url: '/api/listTerm',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (termResults) {
                    if (termResults.length > 0) {
                        for (i = 0; i < termResults.length; i++) {

                            var btnDeleteId;
                            if (termResults[i]["IsLocked"] == true) {
                                btnDeleteId = "<button class='btn btn-danger btn-xs btn-block' onclick='btnDeleteTermLock_OnClick()'><i class='fa fa-trash'></i> Delete</button>";
                            } else {
                                btnDeleteId = "<button class='btn btn-danger btn-xs btn-block' onclick='btnDeleteTerm_OnClick()'><i class='fa fa-trash'></i> Delete</button>";
                            }

                            terms.push({
                                EditId: "<button class='btn btn-primary btn-xs btn-block' onclick='btnEditTerm_OnClick()'><i class='fa fa-edit'></i> Edit</button>",
                                DeleteId: btnDeleteId,
                                Id: termResults[i]["Id"],
                                Term: termResults[i]["Term"],
                                NumberOfDays: termResults[i]["NumberOfDays"],
                                IsLocked: termResults[i]["IsLocked"],
                                CreatedById: termResults[i]["CreatedById"],
                                CreatedBy: termResults[i]["CreatedBy"],
                                CreatedDateTime: termResults[i]["CreatedDateTime"],
                                UpdatedById: termResults[i]["UpdatedById"],
                                UpdatedBy: termResults[i]["UpdatedBy"],
                                UpdatedDateTime: termResults[i]["UpdatedDateTime"]
                            });

                        }
                    }
                    NProgress.done();
                }
            }).fail(function (xhr, textStatus, err) {
                alert(err);
            });
            return terms;
        }

        // =======================
        // Term Delete Lock Button
        // =======================
        function btnDeleteTermLock_OnClick() {
            $('#deleteRecordLock').modal({
                show: true,
                backdrop: 'static'
            });
        }

        // ===========================
        // FlexGrid Selection for Term
        // ===========================
        function updateDetailsTerm() {
            var item = terms.currentItem;
            document.getElementById('createdBy').innerHTML = item.CreatedBy;
            document.getElementById('createdDate').innerHTML = item.CreatedDateTime;
            document.getElementById('updatedBy').innerHTML = item.UpdatedBy;
            document.getElementById('updatedDate').innerHTML = item.UpdatedDateTime;
        }

        // ===========================
        // Navigation Buttons for Term
        // ===========================
        function updateNavigateButtonsTerm() {
            if (terms.pageSize <= 0) {
                document.getElementById('navigationPageGridTerm').style.display = 'none';
                return;
            }
            document.getElementById('navigationPageGridTerm').style.display = 'block';
            if (terms.pageIndex === 0) {
                btnFirstPageGridTerm.setAttribute('disabled', 'disabled');
                btnPreviousPageGridTerm.setAttribute('disabled', 'disabled');
                btnNextPageGridTerm.removeAttribute('disabled');
                btnLastPageGridTerm.removeAttribute('disabled');
            } else if (terms.pageIndex === (terms.pageCount - 1)) {
                btnFirstPageGridTerm.removeAttribute('disabled');
                btnPreviousPageGridTerm.removeAttribute('disabled');
                btnLastPageGridTerm.setAttribute('disabled', 'disabled');
                btnNextPageGridTerm.setAttribute('disabled', 'disabled');
            } else {
                btnFirstPageGridTerm.removeAttribute('disabled');
                btnPreviousPageGridTerm.removeAttribute('disabled');
                btnNextPageGridTerm.removeAttribute('disabled');
                btnLastPageGridTerm.removeAttribute('disabled');
            }
            btnCurrentPageGridTerm.innerHTML = (terms.pageIndex + 1) + ' / ' + terms.pageCount;
        }

        // ============
        // Add new Term
        // ============
        function btnTermAdd_OnClick() {
            $('#termEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $('.requiredTerm').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            $('#cmdSaveTermButton').prop('disabled', false);
            $('#cmdTermDetailCloseButton').prop('disabled', false);

            document.getElementById('term_id').value = 0;
            document.getElementById('term_Term').value = "";
            document.getElementById('term_NoOfDays').value = "";
            document.getElementById('term_Lock').checked = false;

            document.getElementById('term_Term').disabled = false;
            document.getElementById('term_NoOfDays').disabled = false;
            document.getElementById('termLockAndUnLock').innerHTML = "<i class='fa fa-unlock'></i>";
        }

        // =========
        // Edit Term
        // =========
        function btnEditTerm_OnClick() {
            terms.editItem(terms.currentItem);
            $('#termEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $('.requiredTerm').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            $('#cmdSaveTermButton').prop('disabled', false);
            $('#cmdTermDetailCloseButton').prop('disabled', false);

            var term = terms.currentEditItem;
            document.getElementById('term_id').value = term.Id ? term.Id : '';
            document.getElementById('term_Term').value = term.Term ? term.Term : '';
            document.getElementById('term_NoOfDays').value = term.NumberOfDays;
            document.getElementById('term_Lock').checked = term.IsLocked;

            if (document.getElementById('term_Lock').checked == true) {
                document.getElementById('term_Term').disabled = true;
                document.getElementById('term_NoOfDays').disabled = true;

                document.getElementById('termLockAndUnLock').innerHTML = "<i class='fa fa-lock'></i>";
            } else {
                document.getElementById('term_Term').disabled = false;
                document.getElementById('term_NoOfDays').disabled = false;

                document.getElementById('termLockAndUnLock').innerHTML = "<i class='fa fa-unlock'></i>";
            }
        }

        // =====================
        // Term Entry Validation
        // =====================
        function termEntryValidation() {
            var isValid = true;
            $('.requiredTerm').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                }
                else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            return isValid;
        }

        // =====================
        // Refresh Term flexgrid
        // =====================
        function refreshTermFlexgrid() {
            terms = new wijmo.collections.CollectionView(getTerm());
            terms.canFilter = true;
            terms.pageSize = 15;

            var filterTextTerm = '';
            $('#InputFilterTerm').keyup(function () {
                filterTextTerm = this.value.toLowerCase();
                terms.refresh();
            });
            terms.filter = function (item) {
                return !filterTextTerm || (item.Term.toLowerCase().indexOf(filterTextTerm) > -1);
            }
            terms.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsTerm();
            });
            terms.currentChanged.addHandler(function (sender, args) {
                updateDetailsTerm();
            });

            termGrid.itemsSource = terms;
            termGrid.trackChanges = true;
        }

        // =========
        // SAVE Term
        // =========
        function btnTermSaveButton_OnClick() {
            var termObject = new Object();
            var termId = document.getElementById('term_id').value;
            termObject.Term = document.getElementById('term_Term').value;
            termObject.NumberOfDays = document.getElementById('term_NoOfDays').value;
            termObject.IsLocked = document.getElementById('term_Lock').checked;
            var termData = JSON.stringify(termObject);

            if (termEntryValidation() == false) {
                toastr.error("Invalid entry");
            } else {
                $('#cmdSaveTermButton').prop('disabled', true);
                $('#cmdTermDetailCloseButton').prop('disabled', true);

                if (termId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/addTerm',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: termData,
                        statusCode: {
                            200: function () {
                                $('#cmdSaveTermButton').prop('disabled', true);
                                $('#cmdTermDetailCloseButton').prop('disabled', true);
                                toastr.success("Successfully saved");

                                $('#termEdit').modal('hide');

                                refreshTermFlexgrid();
                            },
                            404: function () {
                                toastr.error("Save request not found");
                                $('#cmdSaveTermButton').prop('disabled', false);
                                $('#cmdTermDetailCloseButton').prop('disabled', false);
                            },
                            400: function () {
                                toastr.error("Cannot save new record");
                                $('#cmdSaveTermButton').prop('disabled', false);
                                $('#cmdTermDetailCloseButton').prop('disabled', false);
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/updateTerm/' + termId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: termData,
                        statusCode: {
                            200: function () {
                                $('#cmdSaveTermButton').prop('disabled', true);
                                $('#cmdTermDetailCloseButton').prop('disabled', true);
                                toastr.success("Successfully updated");

                                $('#termEdit').modal('hide');

                                refreshTermFlexgrid();
                            },
                            404: function () {
                                toastr.error("Update request not found");
                                $('#cmdSaveTermButton').prop('disabled', false);
                                $('#cmdTermDetailCloseButton').prop('disabled', false);
                            },
                            400: function () {
                                toastr.error("Cannot update record");
                                $('#cmdSaveTermButton').prop('disabled', false);
                                $('#cmdTermDetailCloseButton').prop('disabled', false);
                            }
                        }
                    });
                }
            }
        }

        // ===========
        // DELETE Term
        // ===========
        function btnDeleteTerm_OnClick() {
            $('#deleteTermConfirm').modal({
                show: true,
                backdrop: 'static'
            });

            $('#cmdConfirmDeleteTerm').prop('disabled', false);
            $('#cmdConfirmDeleteCloseButtonTerm').prop('disabled', false);
        }
        // Term Confirm Delete Button
        function cmdTermConfirmDeleteButton_OnClick() {
            $('#cmdConfirmDeleteTerm').prop('disabled', true);
            $('#cmdConfirmDeleteCloseButtonTerm').prop('disabled', true);

            terms.editItem(terms.currentItem);
            var termId = terms.currentEditItem.Id;
            $.ajax({
                url: '/api/deleteTerm/' + termId,
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        $('#cmdConfirmDeleteTerm').prop('disabled', true);
                        $('#cmdConfirmDeleteCloseButtonTerm').prop('disabled', true);
                        toastr.success("Successfully deleted");

                        $('#deleteTermConfirm').modal('hide');

                        refreshTermFlexgrid();
                    },
                    404: function () {
                        toastr.error("Delete request not found");
                        $('#cmdConfirmDeleteTerm').prop('disabled', false);
                        $('#cmdConfirmDeleteCloseButtonTerm').prop('disabled', false);
                        $('#deleteTermConfirm').modal('hide');
                    },
                    400: function () {
                        toastr.error("Cannot delete record");
                        $('#cmdConfirmDeleteTerm').prop('disabled', false);
                        $('#cmdConfirmDeleteCloseButtonTerm').prop('disabled', false);
                        $('#deleteTermConfirm').modal('hide');
                    }
                }
            });
        }

        // ====
        // Term
        // ====
        function termTab() {
            terms = new wijmo.collections.CollectionView(getTerm());
            terms.canFilter = true;
            terms.pageSize = 15;

            var filterTextTerm = '';
            $('#InputFilterTerm').keyup(function () {
                filterTextTerm = this.value.toLowerCase();
                terms.refresh();
            });
            terms.filter = function (item) {
                return !filterTextTerm || (item.Term.toLowerCase().indexOf(filterTextTerm) > -1);
            }
            terms.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsTerm();
            });
            terms.currentChanged.addHandler(function (sender, args) {
                updateDetailsTerm();
            });

            // Flex Grid for Term
            termGrid = new wijmo.grid.FlexGrid('#TermGrid');
            termGrid.initialize({
                columns: [
                            {
                                "header": "Edit",
                                "binding": "EditId",
                                "width": 60,
                                "align": "center",
                                "allowResizing": false,
                                "allowSorting": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Delete",
                                "binding": "DeleteId",
                                "width": 70,
                                "align": "center",
                                "allowResizing": false,
                                "allowSorting": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Term",
                                "binding": "Term",
                                "allowSorting": true,
                                "width": "1*",
                            },
                            {
                                "header": "Days",
                                "binding": "NumberOfDays",
                                "allowSorting": true,
                                "width": "1*"
                            },
                            {
                                "header": "Lock",
                                "binding": "IsLocked",
                                "allowSorting": true,
                                "width": "0.2*"
                            }
                ],
                autoGenerateColumns: false,
                itemsSource: terms,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            termGrid.trackChanges = true;

            //Navigation button for Term
            btnFirstPageGridTerm = document.getElementById('btnMoveToFirstPageGridTerm');
            btnPreviousPageGridTerm = document.getElementById('btnMoveToPreviousPageGridTerm');
            btnNextPageGridTerm = document.getElementById('btnMoveToNextPageGridTerm');
            btnLastPageGridTerm = document.getElementById('btnMoveToLastPageGridTerm');
            btnCurrentPageGridTerm = document.getElementById('btnCurrentPageGridTerm');

            updateNavigateButtonsTerm();

            btnFirstPageGridTerm.addEventListener('click', function () {
                terms.moveToFirstPage();
                updateNavigateButtonsTerm();
            });
            btnPreviousPageGridTerm.addEventListener('click', function () {
                terms.moveToPreviousPage();
                updateNavigateButtonsTerm();
            });
            btnNextPageGridTerm.addEventListener('click', function () {
                terms.moveToNextPage();
                updateNavigateButtonsTerm();
            });
            btnLastPageGridTerm.addEventListener('click', function () {
                terms.moveToLastPage();
                updateNavigateButtonsTerm();
            });
        }
    </script>

    <!-- ================ -->
    <!-- Employee Scripts -->
    <!-- ================ -->
    <script type="text/javascript">
        // =============================
        // Global Variables for Employee
        // =============================
        var employees;
        var employeeGrid;
        var employeeAccounts;
        var cboEmployeeForAccountCode;
        var cboEmployeeForAccount;
        var btnFirstPageEmployee;
        var btnPreviousPageGridEmployee;
        var btnNextPageGridEmployee;
        var btnLastPageGridEmployee;
        var btnCurrentPageGridEmployee;

        // =================
        // GET Employee List
        // =================
        function getEmployee() {
            var employees = new wijmo.collections.ObservableArray;
            NProgress.start();
            $.ajax({
                url: '/api/listArticleByArticleTypeId/4',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (employeeResults) {
                    if (employeeResults.length > 0) {
                        for (i = 0; i < employeeResults.length; i++) {

                            var btnDeleteId;
                            if (employeeResults[i]["IsLocked"] == true) {
                                btnDeleteId = "<button class='btn btn-danger btn-xs btn-block' onclick='btnDeleteEmployeeLock_OnClick()'><i class='fa fa-trash'></i> Delete</button>";
                            } else {
                                btnDeleteId = "<button class='btn btn-danger btn-xs btn-block' onclick='btnDeleteEmployee_OnClick()'><i class='fa fa-trash'></i> Delete</button>";
                            }

                            employees.push({
                                EditId: "<button class='btn btn-primary btn-xs btn-block' onclick='btnEditEmployee_OnClick()'><i class='fa fa-edit'></i> Edit</button>",
                                DeleteId: btnDeleteId,
                                Id: employeeResults[i]["Id"],
                                ArticleCode: employeeResults[i]["ArticleCode"],
                                ManualArticleCode: employeeResults[i]["ManualArticleCode"],
                                Article: employeeResults[i]["Article"],
                                Category: employeeResults[i]["Category"],
                                ArticleTypeId: employeeResults[i]["ArticleTypeId"],
                                ArticleType: employeeResults[i]["ArticleType"],
                                ArticleGroupId: employeeResults[i]["ArticleGroupId"],
                                ArticleGroup: employeeResults[i]["ArticleGroup"],
                                AccountId: employeeResults[i]["AccountId"],
                                AccountCode: employeeResults[i]["AccountCode"],
                                Account: employeeResults[i]["Account"],
                                SalesAccountId: employeeResults[i]["SalesAccountId"],
                                CostAccountId: employeeResults[i]["CostAccountId"],
                                AssetAccountId: employeeResults[i]["AssetAccountId"],
                                ExpenseAccountId: employeeResults[i]["ExpenseAccountId"],
                                UnitId: employeeResults[i]["UnitId"],
                                Unit: employeeResults[i]["Unit"],
                                OutputTaxId: employeeResults[i]["OutputTaxId"],
                                InputTaxId: employeeResults[i]["InputTaxId"],
                                WTaxTypeId: employeeResults[i]["WTaxTypeId"],
                                Price: employeeResults[i]["Price"],
                                Cost: employeeResults[i]["Cost"],
                                IsInventory: employeeResults[i]["IsInventory"],
                                Particulars: employeeResults[i]["Particulars"],
                                Address: employeeResults[i]["Address"],
                                TermId: employeeResults[i]["TermId"],
                                ContactNumber: employeeResults[i]["ContactNumber"],
                                ContactPerson: employeeResults[i]["ContactPerson"],
                                TaxNumber: employeeResults[i]["TaxNumber"],
                                CreditLimit: employeeResults[i]["CreditLimit"],
                                DateAcquired: employeeResults[i]["DateAcquired"],
                                UsefulLife: employeeResults[i]["UsefulLife"],
                                SalvageValue: employeeResults[i]["SalvageValue"],
                                ManualArticleOldCode: employeeResults[i]["ManualArticleOldCode"],
                                IsLocked: employeeResults[i]["IsLocked"],
                                CreatedById: employeeResults[i]["CreatedById"],
                                CreatedBy: employeeResults[i]["CreatedBy"],
                                CreatedDateTime: employeeResults[i]["CreatedDateTime"],
                                UpdatedById: employeeResults[i]["UpdatedById"],
                                UpdatedBy: employeeResults[i]["UpdatedBy"],
                                UpdatedDateTime: employeeResults[i]["UpdatedDateTime"]
                            });

                        }
                    }
                    NProgress.done();
                }
            }).fail(function (xhr, textStatus, err) {
                alert(err);
            });
            return employees;
        }

        // ===========================
        // Employee Delete Lock Button
        // ===========================
        function btnDeleteEmployeeLock_OnClick() {
            $('#deleteRecordLock').modal({
                show: true,
                backdrop: 'static'
            });
        }

        // ===============================
        // FlexGrid Selection for Employee
        // ===============================
        function updateDetailsEmployee() {
            var item = employees.currentItem;
            document.getElementById('createdBy').innerHTML = item.CreatedBy;
            document.getElementById('createdDate').innerHTML = item.CreatedDateTime;
            document.getElementById('updatedBy').innerHTML = item.UpdatedBy;
            document.getElementById('updatedDate').innerHTML = item.UpdatedDateTime;
        }

        // ===============================
        // Navigation Buttons for Employee
        // ===============================
        function updateNavigateButtonsEmployee() {
            if (employees.pageSize <= 0) {
                document.getElementById('navigationPageGridEmployee').style.display = 'none';
                return;
            }
            document.getElementById('navigationPageGridEmployee').style.display = 'block';
            if (employees.pageIndex === 0) {
                btnFirstPageGridEmployee.setAttribute('disabled', 'disabled');
                btnPreviousPageGridEmployee.setAttribute('disabled', 'disabled');
                btnNextPageGridEmployee.removeAttribute('disabled');
                btnLastPageGridEmployee.removeAttribute('disabled');
            } else if (employees.pageIndex === (employees.pageCount - 1)) {
                btnFirstPageGridEmployee.removeAttribute('disabled');
                btnPreviousPageGridEmployee.removeAttribute('disabled');
                btnLastPageGridEmployee.setAttribute('disabled', 'disabled');
                btnNextPageGridEmployee.setAttribute('disabled', 'disabled');
            } else {
                btnFirstPageGridEmployee.removeAttribute('disabled');
                btnPreviousPageGridEmployee.removeAttribute('disabled');
                btnNextPageGridEmployee.removeAttribute('disabled');
                btnLastPageGridEmployee.removeAttribute('disabled');
            }
            btnCurrentPageGridEmployee.innerHTML = (employees.pageIndex + 1) + ' / ' + employees.pageCount;
        }

        // ===========
        // Get Account
        // ===========
        function getEmployeeAccountForComboBox() {
            employeeAccounts = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listAccount',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (employeeAccountResults) {
                    if (employeeAccountResults.length > 0) {
                        for (i = 0; i < employeeAccountResults.length; i++) {
                            employeeAccounts.push({
                                AccountId: employeeAccountResults[i]["Id"],
                                AccountCode: employeeAccountResults[i]["AccountCode"],
                                Account: employeeAccountResults[i]["Account"]
                            });
                        }
                        createCboForEmployeeAccountCode(employeeAccounts);
                        createCboForEmployeeAccount(employeeAccounts);
                    } else {
                        createCboForEmployeeAccountCode(employeeAccounts);
                        createCboForEmployeeAccount(employeeAccounts);
                    }
                }
            });
        }

        // ==========================================
        // Create combo box for employee Account Code
        // ==========================================
        function createCboForEmployeeAccountCode(employeeAccounts) {
            var accountCodeCollection = new wijmo.collections.CollectionView(employeeAccounts);
            var accountCodeList = new Array();
            for (var i = 0; i < accountCodeCollection.items.length; i++) {
                accountCodeList.push(accountCodeCollection.items[i].AccountCode);
            }

            var disabled;
            if (employeeAccounts == 0) {
                disabled = true;
            } else {
                if (document.getElementById('employee_Lock').checked == true) {
                    disabled = true;
                } else {
                    disabled = false;
                }
            }

            cboEmployeeForAccountCode.dispose();
            cboEmployeeForAccountCode = new wijmo.input.ComboBox('#employee_AccountCode', {
                disabled: disabled,
                placeholder: "Code",
                itemsSource: accountCodeList,
                isEditable: false,
                selectedValue: document.getElementById('employee_AccountCode_selectedValue').value.toString(),
                onSelectedIndexChanged: function () {
                    $('#employee_Account_data').val(accountCodeCollection.items[this.selectedIndex].AccountId);
                    $('#employee_Account_selectedValue').val(accountCodeCollection.items[this.selectedIndex].Account);
                    $('#employee_AccountCode_selectedValue').val(accountCodeCollection.items[this.selectedIndex].AccountCode);

                    createCboForEmployeeAccount(employeeAccounts);
                }
            });

            document.getElementById('employee_Account_data').value = accountCodeCollection.items[cboEmployeeForAccountCode.selectedIndex].AccountId;
            document.getElementById('employee_Account_selectedValue').value = accountCodeCollection.items[cboEmployeeForAccountCode.selectedIndex].Account;
            document.getElementById('employee_AccountCode_selectedValue').value = accountCodeCollection.items[cboEmployeeForAccountCode.selectedIndex].AccountCode;
        }

        // =====================================
        // Create combo box for employee Account
        // =====================================
        function createCboForEmployeeAccount(employeeAccounts) {
            var accountCollection = new wijmo.collections.CollectionView(employeeAccounts);
            var accountList = new Array();
            for (var i = 0; i < accountCollection.items.length; i++) {
                accountList.push(accountCollection.items[i].Account);
            }

            var disabled;
            if (employeeAccounts == 0) {
                disabled = true;
            } else {
                if (document.getElementById('employee_Lock').checked == true) {
                    disabled = true;
                } else {
                    disabled = false;
                }
            }

            cboEmployeeForAccount.dispose();
            cboEmployeeForAccount = new wijmo.input.ComboBox('#employee_Account', {
                disabled: disabled,
                placeholder: "Account",
                itemsSource: accountList,
                isEditable: false,
                selectedValue: document.getElementById('employee_Account_selectedValue').value.toString(),
                onSelectedIndexChanged: function () {
                    $('#employee_Account_data').val(accountCollection.items[this.selectedIndex].AccountId);
                    $('#employee_AccountCode_selectedValue').val(accountCollection.items[this.selectedIndex].AccountCode);
                    $('#employee_Account_selectedValue').val(accountCollection.items[this.selectedIndex].Account);

                    createCboForEmployeeAccountCode(employeeAccounts);
                }
            });

            document.getElementById('employee_Account_data').value = accountCollection.items[cboEmployeeForAccount.selectedIndex].AccountId;
            document.getElementById('employee_AccountCode_selectedValue').value = accountCollection.items[cboEmployeeForAccount.selectedIndex].AccountCode;
            document.getElementById('employee_Account_selectedValue').value = accountCollection.items[cboEmployeeForAccount.selectedIndex].Account;
        }

        // ========================================================
        // Function with leading zeroes to display the article code
        // ========================================================
        function zerofill(number, length) {
            var result = number.toString();
            var pad = length - result.length;
            while (pad > 0) {
                result = '0' + result;
                pad--;
            }
            return result;
        }

        // ================
        // Add new Employee
        // ================
        function btnEmployeeAdd_OnClick() {
            $('#employeeEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $('.requiredEmployee').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            $('#cmdSaveEmployeeButton').prop('disabled', false);
            $('#cmdEmployeeDetailCloseButton').prop('disabled', false);

            document.getElementById('employee_id').value = 0;
            document.getElementById('employee_Code').value = "";
            document.getElementById('employee_Employee').value = "";
            document.getElementById('employee_Account_data').value = "";
            document.getElementById('employee_AccountCode_selectedValue').value = "";
            document.getElementById('employee_Account_selectedValue').value = "";
            document.getElementById('employee_Address').value = "";
            document.getElementById('employee_ContactNumber').value = "";
            document.getElementById('employee_Lock').checked = false;

            document.getElementById('employee_Employee').disabled = false;
            document.getElementById('employee_Address').disabled = false;
            document.getElementById('employee_ContactNumber').disabled = false;
            document.getElementById('employeeLockAndUnLock').innerHTML = "<i class='fa fa-unlock'></i>";

            getEmployeeAccountForComboBox();

            $.ajax({
                url: '/api/articleLastArticleCodeByArticleTypeId/4',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (lastEmployeeResults) {
                    if (lastEmployeeResults != null) {
                        var articleCode = parseInt(lastEmployeeResults.ArticleCode);
                        var articleCodeResults = articleCode + 0000000001;

                        document.getElementById('employee_Code').value = zerofill(articleCodeResults, 10);
                    } else {
                        document.getElementById('employee_Code').value = "0000000001";
                    }
                }
            });
        }

        // =============
        // EDIT Employee
        // =============
        function btnEditEmployee_OnClick() {
            employees.editItem(employees.currentItem);
            $('#employeeEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $('.requiredEmployee').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            $('#cmdSaveEmployeeButton').prop('disabled', false);
            $('#cmdEmployeeDetailCloseButton').prop('disabled', false);

            var employee = employees.currentEditItem;
            document.getElementById('employee_id').value = employee.Id ? employee.Id : '';
            document.getElementById('employee_Code').value = employee.ArticleCode ? employee.ArticleCode : '';
            document.getElementById('employee_Employee').value = employee.Article ? employee.Article : '';
            document.getElementById('employee_Account_data').value = employee.AccountId ? employee.AccountId : '';
            document.getElementById('employee_AccountCode_selectedValue').value = employee.AccountCode ? employee.AccountCode : '';
            document.getElementById('employee_Account_selectedValue').value = employee.Account ? employee.Account : '';
            document.getElementById('employee_Address').value = employee.Address ? employee.Address : '';
            document.getElementById('employee_ContactNumber').value = employee.ContactNumber ? employee.ContactNumber : '';
            document.getElementById('employee_Lock').checked = employee.IsLocked;

            if (document.getElementById('employee_Lock').checked == true) {
                document.getElementById('employee_Employee').disabled = true;
                document.getElementById('employee_Address').disabled = true;
                document.getElementById('employee_ContactNumber').disabled = true;
                getEmployeeAccountForComboBox();
                document.getElementById('employeeLockAndUnLock').innerHTML = "<i class='fa fa-lock'></i>";
            } else {
                document.getElementById('employee_Employee').disabled = false;
                document.getElementById('employee_Address').disabled = false;
                document.getElementById('employee_ContactNumber').disabled = false;
                getEmployeeAccountForComboBox();
                document.getElementById('employeeLockAndUnLock').innerHTML = "<i class='fa fa-unlock'></i>";
            }
        }

        // =========================
        // Employee Entry Validation
        // =========================
        function employeeEntryValidation() {
            var isValid = true;
            $('.requiredEmployee').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                }
                else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            return isValid;
        }

        // =========================
        // Refresh employee flexgrid
        // =========================
        function refreshEmployeeFlexgrid() {
            employees = new wijmo.collections.CollectionView(getEmployee());
            employees.canFilter = true;
            employees.pageSize = 15;

            var filterTextEmployee = '';
            $('#InputFilterTerm').keyup(function () {
                filterTextEmployee = this.value.toLowerCase();
                employees.refresh();
            });
            employees.filter = function (item) {
                return !filterTextEmployee || (item.Article.toLowerCase().indexOf(filterTextEmployee) > -1);
            }
            employees.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsEmployee();
            });
            employees.currentChanged.addHandler(function (sender, args) {
                updateDetailsEmployee();
            });

            employeeGrid.itemsSource = employees;
            employeeGrid.trackChanges = true;
        }

        // =============
        // SAVE Employee
        // =============
        function btnEmployeeSaveButton_OnClick() {
            var employeeObject = new Object();
            var employeeId = document.getElementById('employee_id').value;
            employeeObject.ArticleCode = document.getElementById('employee_Code').value;
            employeeObject.Article = document.getElementById('employee_Employee').value;
            employeeObject.AccountId = document.getElementById('employee_Account_data').value;
            employeeObject.Address = document.getElementById('employee_Address').value;
            employeeObject.ContactNumber = document.getElementById('employee_ContactNumber').value;
            employeeObject.IsLocked = document.getElementById('employee_Lock').checked;
            var employeeData = JSON.stringify(employeeObject);

            if (document.getElementById('employee_Account_data').value == '') {
                document.getElementById("employee_AccountCode").style.border = "1px solid red";
                document.getElementById("employee_Account").style.border = "1px solid red";
            } else {
                document.getElementById("employee_AccountCode").style.border = "1px solid #C8C8C8";
                document.getElementById("employee_Account").style.border = "1px solid #C8C8C8";
            }

            if (employeeEntryValidation() == false) {
                toastr.error("Invalid entry");
            } else {
                $('#cmdSaveEmployeeButton').prop('disabled', true);
                $('#cmdEmployeeDetailCloseButton').prop('disabled', true);

                if (employeeId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/addArticle/4',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: employeeData,
                        statusCode: {
                            200: function () {
                                $('#cmdSaveEmployeeButton').prop('disabled', true);
                                $('#cmdEmployeeDetailCloseButton').prop('disabled', true);
                                toastr.success("Successfully saved");

                                $('#employeeEdit').modal('hide');

                                refreshEmployeeFlexgrid();
                            },
                            404: function () {
                                toastr.error("Save request not found");
                                $('#cmdSaveEmployeeButton').prop('disabled', false);
                                $('#cmdEmployeeDetailCloseButton').prop('disabled', false);
                            },
                            400: function () {
                                toastr.error("Cannot save new record");
                                $('#cmdSaveEmployeeButton').prop('disabled', false);
                                $('#cmdEmployeeDetailCloseButton').prop('disabled', false);
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/updateArticle/' + employeeId + '/4',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: employeeData,
                        statusCode: {
                            200: function () {
                                $('#cmdSaveEmployeeButton').prop('disabled', true);
                                $('#cmdEmployeeDetailCloseButton').prop('disabled', true);
                                toastr.success("Successfully updated");

                                $('#employeeEdit').modal('hide');

                                refreshEmployeeFlexgrid();
                            },
                            404: function () {
                                toastr.error("Update request not found");
                                $('#cmdSaveEmployeeButton').prop('disabled', false);
                                $('#cmdEmployeeDetailCloseButton').prop('disabled', false);
                            },
                            400: function () {
                                toastr.error("Cannot update record");
                                $('#cmdSaveEmployeeButton').prop('disabled', false);
                                $('#cmdEmployeeDetailCloseButton').prop('disabled', false);
                            }
                        }
                    });
                }
            }
        }

        // ===============
        // DELETE Employee
        // ===============
        function btnDeleteEmployee_OnClick() {
            $('#deleteEmployeeConfirm').modal({
                show: true,
                backdrop: 'static'
            });

            $('#cmdConfirmDeleteEmployee').prop('disabled', false);
            $('#cmdConfirmDeleteCloseButtonEmployee').prop('disabled', false);
        }
        // Employee Confirm Delete Button
        function cmdEmployeeConfirmDeleteButton_OnClick() {
            $('#cmdConfirmDeleteEmployee').prop('disabled', true);
            $('#cmdConfirmDeleteCloseButtonEmployee').prop('disabled', true);

            employees.editItem(employees.currentItem);
            var employeeId = employees.currentEditItem.Id;
            $.ajax({
                url: '/api/deleteArticle/' + employeeId,
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        $('#cmdConfirmDeleteEmployee').prop('disabled', true);
                        $('#cmdConfirmDeleteCloseButtonEmployee').prop('disabled', true);
                        toastr.success("Successfully deleted");

                        $('#deleteEmployeeConfirm').modal('hide');

                        refreshEmployeeFlexgrid();
                    },
                    404: function () {
                        toastr.error("Delete request not found");
                        $('#cmdConfirmDeleteEmployee').prop('disabled', false);
                        $('#cmdConfirmDeleteCloseButtonEmployee').prop('disabled', false);
                        $('#deleteEmployeeConfirm').modal('hide');
                    },
                    400: function () {
                        toastr.error("Cannot delete record");
                        $('#cmdConfirmDeleteEmployee').prop('disabled', false);
                        $('#cmdConfirmDeleteCloseButtonEmployee').prop('disabled', false);
                        $('#deleteEmployeeConfirm').modal('hide');
                    }
                }
            });
        }

        // ========
        // Employee
        // ========
        function employeeTab() {
            cboEmployeeForAccountCode = new wijmo.input.ComboBox('#employee_AccountCode');
            cboEmployeeForAccount = new wijmo.input.ComboBox('#employee_Account');
            document.getElementById('employee_Code').disabled = true;

            employees = new wijmo.collections.CollectionView(getEmployee());
            employees.canFilter = true;
            employees.pageSize = 15;

            var filterTextEmployee = '';
            $('#InputFilterEmployee').keyup(function () {
                filterTextEmployee = this.value.toLowerCase();
                employees.refresh();
            });
            employees.filter = function (item) {
                return !filterTextEmployee || (item.Article.toLowerCase().indexOf(filterTextEmployee) > -1);
            }
            employees.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsEmployee();
            });
            employees.currentChanged.addHandler(function (sender, args) {
                updateDetailsEmployee();
            });

            // Flex Grid for Employee
            employeeGrid = new wijmo.grid.FlexGrid('#EmployeeGrid');
            employeeGrid.initialize({
                columns: [
                            {
                                "header": "Edit",
                                "binding": "EditId",
                                "width": 60,
                                "align": "center",
                                "allowResizing": false,
                                "allowSorting": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Delete",
                                "binding": "DeleteId",
                                "width": 70,
                                "align": "center",
                                "allowResizing": false,
                                "allowSorting": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Code",
                                "binding": "ArticleCode",
                                "allowSorting": true,
                                "width": "1*",
                            },
                            {
                                "header": "Employee",
                                "binding": "Article",
                                "allowSorting": true,
                                "width": "3*"
                            },
                            {
                                "header": "Account",
                                "binding": "Account",
                                "allowSorting": true,
                                "width": "3*"
                            },
                            {
                                "header": "Lock",
                                "binding": "IsLocked",
                                "allowSorting": true,
                                "width": "0.5*"
                            }
                ],
                autoGenerateColumns: false,
                itemsSource: employees,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            employeeGrid.trackChanges = true;

            //Navigation button for Employee
            btnFirstPageGridEmployee = document.getElementById('btnMoveToFirstPageGridEmployee');
            btnPreviousPageGridEmployee = document.getElementById('btnMoveToPreviousPageGridEmployee');
            btnNextPageGridEmployee = document.getElementById('btnMoveToNextPageGridEmployee');
            btnLastPageGridEmployee = document.getElementById('btnMoveToLastPageGridEmployee');
            btnCurrentPageGridEmployee = document.getElementById('btnCurrentPageGridEmployee');

            updateNavigateButtonsEmployee();

            btnFirstPageGridEmployee.addEventListener('click', function () {
                employees.moveToFirstPage();
                updateNavigateButtonsEmployee();
            });
            btnPreviousPageGridEmployee.addEventListener('click', function () {
                employees.moveToPreviousPage();
                updateNavigateButtonsEmployee();
            });
            btnNextPageGridEmployee.addEventListener('click', function () {
                employees.moveToNextPage();
                updateNavigateButtonsEmployee();
            });
            btnLastPageGridEmployee.addEventListener('click', function () {
                employees.moveToLastPage();
                updateNavigateButtonsEmployee();
            });
        }
    </script>

    <!-- ===================== -->
    <!-- Article Group Scripts -->
    <!-- ===================== -->
    <script type="text/javascript">
        // ==================================
        // Global Variables for Article Group
        // ==================================
        var articlegroups;
        var articleGroupGrid;
        var articleGroupAccounts;
        var articleTypes;
        var cboArticleType;
        var cboArticleGroupAccountCode;
        var cboArticleGroupAccount;
        var cboArticleGroupSaleAccountCode;
        var cboArticleGroupSaleAccount;
        var cboArticleGroupCostAccountCode;
        var cboArticleGroupCostAccount;
        var cboArticleGroupAssetAccountCode;
        var cboArticleGroupAssetAccount;
        var cboArticleGroupExpenseAccountCode;
        var cboArticleGroupExpenseAccount;
        var btnFirstPageArticleGroup;
        var btnPreviousPageGridArticleGroup;
        var btnNextPageGridArticleGroup;
        var btnLastPageGridArticleGroup;
        var btnCurrentPageGridArticleGroup;

        // ======================
        // GET Article Group List
        // ======================
        function getArticleGroup() {
            var articlegroups = new wijmo.collections.ObservableArray;
            NProgress.start();
            $.ajax({
                url: '/api/listArticleGroup',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (articleGroupResults) {
                    if (articleGroupResults.length > 0) {
                        for (i = 0; i < articleGroupResults.length; i++) {

                            var btnDeleteId;
                            if (articleGroupResults[i]["IsLocked"] == true) {
                                btnDeleteId = "<button class='btn btn-danger btn-xs btn-block' onclick='btnDeleteArticleGroupLock_OnClick()'><i class='fa fa-trash'></i> Delete</button>";
                            } else {
                                btnDeleteId = "<button class='btn btn-danger btn-xs btn-block' onclick='btnDeleteArticleGroup_OnClick()'><i class='fa fa-trash'></i> Delete</button>";
                            }

                            articlegroups.push({
                                EditId: "<button class='btn btn-primary btn-xs btn-block' onclick='btnEditArticleGroup_OnClick()'><i class='fa fa-edit'></i> Edit</button>",
                                DeleteId: btnDeleteId,
                                Id: articleGroupResults[i]["Id"],
                                ArticleGroup: articleGroupResults[i]["ArticleGroup"],
                                ArticleTypeId: articleGroupResults[i]["ArticleTypeId"],
                                ArticleType: articleGroupResults[i]["ArticleType"],
                                AccountId: articleGroupResults[i]["AccountId"],
                                AccountCode: articleGroupResults[i]["AccountCode"],
                                Account: articleGroupResults[i]["Account"],
                                SalesAccountId: articleGroupResults[i]["SalesAccountId"],
                                SalesAccountCode: articleGroupResults[i]["SalesAccountCode"],
                                SalesAccount: articleGroupResults[i]["SalesAccount"],
                                CostAccountId: articleGroupResults[i]["CostAccountId"],
                                CostAccountCode: articleGroupResults[i]["CostAccountCode"],
                                CostAccount: articleGroupResults[i]["CostAccount"],
                                AssetAccountId: articleGroupResults[i]["AssetAccountId"],
                                AssetAccountCode: articleGroupResults[i]["AssetAccountCode"],
                                AssetAccount: articleGroupResults[i]["AssetAccount"],
                                ExpenseAccountId: articleGroupResults[i]["ExpenseAccountId"],
                                ExpenseAccountCode: articleGroupResults[i]["ExpenseAccountCode"],
                                ExpenseAccount: articleGroupResults[i]["ExpenseAccount"],
                                IsLocked: articleGroupResults[i]["IsLocked"],
                                CreatedById: articleGroupResults[i]["CreatedById"],
                                CreatedBy: articleGroupResults[i]["CreatedBy"],
                                CreatedDateTime: articleGroupResults[i]["CreatedDateTime"],
                                UpdatedById: articleGroupResults[i]["UpdatedById"],
                                UpdatedBy: articleGroupResults[i]["UpdatedBy"],
                                UpdatedDateTime: articleGroupResults[i]["UpdatedDateTime"]
                            });

                        }
                    }
                    NProgress.done();
                }
            }).fail(function (xhr, textStatus, err) {
                alert(err);
            });
            return articlegroups;
        }

        // ================================
        // Article Group Delete Lock Button
        // ================================
        function btnDeleteArticleGroupLock_OnClick() {
            $('#deleteRecordLock').modal({
                show: true,
                backdrop: 'static'
            });
        }

        // ====================================
        // FlexGrid Selection for Article Group
        // ====================================
        function updateDetailsArticleGroup() {
            var item = articlegroups.currentItem;
            document.getElementById('createdBy').innerHTML = item.CreatedBy;
            document.getElementById('createdDate').innerHTML = item.CreatedDateTime;
            document.getElementById('updatedBy').innerHTML = item.UpdatedBy;
            document.getElementById('updatedDate').innerHTML = item.UpdatedDateTime;
        }

        // ====================================
        // Navigation Buttons for Article Group
        // ====================================
        function updateNavigateButtonsArticleGroup() {
            if (articlegroups.pageSize <= 0) {
                document.getElementById('navigationPageGridArticleGroup').style.display = 'none';
                return;
            }
            document.getElementById('navigationPageGridArticleGroup').style.display = 'block';
            if (articlegroups.pageIndex === 0) {
                btnFirstPageGridArticleGroup.setAttribute('disabled', 'disabled');
                btnPreviousPageGridArticleGroup.setAttribute('disabled', 'disabled');
                btnNextPageGridArticleGroup.removeAttribute('disabled');
                btnLastPageGridArticleGroup.removeAttribute('disabled');
            } else if (articlegroups.pageIndex === (articlegroups.pageCount - 1)) {
                btnFirstPageGridArticleGroup.removeAttribute('disabled');
                btnPreviousPageGridArticleGroup.removeAttribute('disabled');
                btnLastPageGridArticleGroup.setAttribute('disabled', 'disabled');
                btnNextPageGridArticleGroup.setAttribute('disabled', 'disabled');
            } else {
                btnFirstPageGridArticleGroup.removeAttribute('disabled');
                btnPreviousPageGridArticleGroup.removeAttribute('disabled');
                btnNextPageGridArticleGroup.removeAttribute('disabled');
                btnLastPageGridArticleGroup.removeAttribute('disabled');
            }
            btnCurrentPageGridArticleGroup.innerHTML = (articlegroups.pageIndex + 1) + ' / ' + articlegroups.pageCount;
        }

        // ================
        // Get Article Type
        // ================
        function getArticleType() {
            articleTypes = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listArticleType',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (articleTypeResults) {
                    if (articleTypeResults.length > 0) {
                        for (i = 0; i < articleTypeResults.length; i++) {
                            articleTypes.push({
                                ArticleTypeId: articleTypeResults[i]["Id"],
                                ArticleType: articleTypeResults[i]["ArticleType"]
                            });
                        }
                        createCboForArticleType(articleTypes);
                    } else {
                        createCboForArticleType(articleTypes);
                    }
                }
            });
        }

        // ===================================================
        // Create cbo for article group Article Type combo box
        // ===================================================
        function createCboForArticleType(articleTypes) {
            var articleTypeCollection = new wijmo.collections.CollectionView(articleTypes);
            var aeticleTypeList = new Array();
            for (var i = 0; i < articleTypeCollection.items.length; i++) {
                aeticleTypeList.push(articleTypeCollection.items[i].ArticleType);
            }

            var disabled;
            if (articleTypes == 0) {
                disabled = true;
            } else {
                if (document.getElementById('articleGroup_Lock').checked == true) {
                    disabled = true;
                } else {
                    disabled = false;
                }
            }

            cboArticleType.dispose();
            cboArticleType = new wijmo.input.ComboBox('#articleGroup_ArticleType', {
                disabled: disabled,
                placeholder: "Article Type",
                itemsSource: aeticleTypeList,
                isEditable: false,
                selectedValue: document.getElementById('articleGroup_ArticleType_selectedValue').value.toString(),
                onSelectedIndexChanged: function () {
                    $("#articleGroup_ArticleType_data").val(articleTypeCollection.items[this.selectedIndex].ArticleTypeId);
                    $("#articleGroup_ArticleType_selectedValue").val(articleTypeCollection.items[this.selectedIndex].ArticleType);
                }
            });

            document.getElementById('articleGroup_ArticleType_data').value = articleTypeCollection.items[cboArticleType.selectedIndex].ArticleTypeId;
            document.getElementById('articleGroup_ArticleType_selectedValue').value = articleTypeCollection.items[cboArticleType.selectedIndex].ArticleType;
        }

        // ============================================
        // Get Account list for article group combo box
        // ============================================
        function getArticleGroupAccount() {
            articleGroupAccounts = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listAccount',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (articleGroupAccountResults) {
                    if (articleGroupAccountResults.length > 0) {
                        for (i = 0; i < articleGroupAccountResults.length; i++) {
                            articleGroupAccounts.push({
                                AccountId: articleGroupAccountResults[i]["Id"],
                                AccountCode: articleGroupAccountResults[i]["AccountCode"],
                                Account: articleGroupAccountResults[i]["Account"]
                            });
                        }
                        createCboForArticleGroupAccountCode(articleGroupAccounts);
                        createCboForArticleGroupAccount(articleGroupAccounts);
                    } else {
                        createCboForArticleGroupAccountCode(articleGroupAccounts);
                        createCboForArticleGroupAccount(articleGroupAccounts);
                    }
                }
            });
        }

        // ===============================================
        // Create combo box for article group Account Code
        // ===============================================
        function createCboForArticleGroupAccountCode(articleGroupAccounts) {
            var accountCodeCollection = new wijmo.collections.CollectionView(articleGroupAccounts);
            var accountCodeList = new Array();
            for (var i = 0; i < accountCodeCollection.items.length; i++) {
                accountCodeList.push(accountCodeCollection.items[i].AccountCode);
            }

            var disabled;
            if (articleGroupAccounts == 0) {
                disabled = true;
            } else {
                if (document.getElementById('articleGroup_Lock').checked == true) {
                    disabled = true;
                } else {
                    disabled = false;
                }
            }

            cboArticleGroupAccountCode.dispose();
            cboArticleGroupAccountCode = new wijmo.input.ComboBox('#articleGroup_AccountCode', {
                disabled: disabled,
                placeholder: "Code",
                itemsSource: accountCodeList,
                isEditable: false,
                selectedValue: document.getElementById('articleGroup_AccountCode_selectedValue').value.toString(),
                onSelectedIndexChanged: function () {
                    $('#articleGroup_Account_data').val(accountCodeCollection.items[this.selectedIndex].AccountId);
                    $('#articleGroup_Account_selectedValue').val(accountCodeCollection.items[this.selectedIndex].Account);
                    $('#articleGroup_AccountCode_selectedValue').val(accountCodeCollection.items[this.selectedIndex].AccountCode);

                    createCboForArticleGroupAccount(articleGroupAccounts);
                }
            });

            document.getElementById('articleGroup_Account_data').value = accountCodeCollection.items[cboArticleGroupAccountCode.selectedIndex].AccountId;
            document.getElementById('articleGroup_Account_selectedValue').value = accountCodeCollection.items[cboArticleGroupAccountCode.selectedIndex].Account;
            document.getElementById('articleGroup_AccountCode_selectedValue').value = accountCodeCollection.items[cboArticleGroupAccountCode.selectedIndex].AccountCode;

            cboArticleGroupSaleAccountCode.dispose();
            cboArticleGroupSaleAccountCode = new wijmo.input.ComboBox('#articleGroup_SalesAccountCode', {
                disabled: disabled,
                placeholder: "Code",
                itemsSource: accountCodeList,
                isEditable: false,
                selectedValue: document.getElementById('articleGroup_SalesAccountCode_selectedValue').value.toString(),
                onSelectedIndexChanged: function () {
                    $('#articleGroup_SalesAccount_data').val(accountCodeCollection.items[this.selectedIndex].AccountId);
                    $('#articleGroup_SalesAccount_selectedValue').val(accountCodeCollection.items[this.selectedIndex].Account);
                    $('#articleGroup_SalesAccountCode_selectedValue').val(accountCodeCollection.items[this.selectedIndex].AccountCode);

                    createCboForArticleGroupAccount(articleGroupAccounts);
                }
            });

            document.getElementById('articleGroup_SalesAccount_data').value = accountCodeCollection.items[cboArticleGroupSaleAccountCode.selectedIndex].AccountId;
            document.getElementById('articleGroup_SalesAccount_selectedValue').value = accountCodeCollection.items[cboArticleGroupSaleAccountCode.selectedIndex].Account;
            document.getElementById('articleGroup_SalesAccountCode_selectedValue').value = accountCodeCollection.items[cboArticleGroupSaleAccountCode.selectedIndex].AccountCode;

            cboArticleGroupCostAccountCode.dispose();
            cboArticleGroupCostAccountCode = new wijmo.input.ComboBox('#articleGroup_CostAccountCode', {
                disabled: disabled,
                placeholder: "Code",
                itemsSource: accountCodeList,
                isEditable: false,
                selectedValue: document.getElementById('articleGroup_CostAccountCode_selectedValue').value.toString(),
                onSelectedIndexChanged: function () {
                    $('#articleGroup_CostAccount_data').val(accountCodeCollection.items[this.selectedIndex].AccountId);
                    $('#articleGroup_CostAccount_selectedValue').val(accountCodeCollection.items[this.selectedIndex].Account);
                    $('#articleGroup_CostAccountCode_selectedValue').val(accountCodeCollection.items[this.selectedIndex].AccountCode);

                    createCboForArticleGroupAccount(articleGroupAccounts);
                }
            });

            document.getElementById('articleGroup_CostAccount_data').value = accountCodeCollection.items[cboArticleGroupCostAccountCode.selectedIndex].AccountId;
            document.getElementById('articleGroup_CostAccount_selectedValue').value = accountCodeCollection.items[cboArticleGroupCostAccountCode.selectedIndex].Account;
            document.getElementById('articleGroup_CostAccountCode_selectedValue').value = accountCodeCollection.items[cboArticleGroupCostAccountCode.selectedIndex].AccountCode;

            cboArticleGroupAssetAccountCode.dispose();
            cboArticleGroupAssetAccountCode = new wijmo.input.ComboBox('#articleGroup_AssetAccountCode', {
                disabled: disabled,
                placeholder: "Code",
                itemsSource: accountCodeList,
                isEditable: false,
                selectedValue: document.getElementById('articleGroup_AssetAccountCode_selectedValue').value.toString(),
                onSelectedIndexChanged: function () {
                    $('#articleGroup_AssetAccount_data').val(accountCodeCollection.items[this.selectedIndex].AccountId);
                    $('#articleGroup_AssetAccount_selectedValue').val(accountCodeCollection.items[this.selectedIndex].Account);
                    $('#articleGroup_AssetAccountCode_selectedValue').val(accountCodeCollection.items[this.selectedIndex].AccountCode);

                    createCboForArticleGroupAccount(articleGroupAccounts);
                }
            });

            document.getElementById('articleGroup_AssetAccount_data').value = accountCodeCollection.items[cboArticleGroupAssetAccountCode.selectedIndex].AccountId;
            document.getElementById('articleGroup_AssetAccount_selectedValue').value = accountCodeCollection.items[cboArticleGroupAssetAccountCode.selectedIndex].Account;
            document.getElementById('articleGroup_AssetAccountCode_selectedValue').value = accountCodeCollection.items[cboArticleGroupAssetAccountCode.selectedIndex].AccountCode;

            cboArticleGroupExpenseAccountCode.dispose();
            cboArticleGroupExpenseAccountCode = new wijmo.input.ComboBox('#articleGroup_ExpenseAccountCode', {
                disabled: disabled,
                placeholder: "Code",
                itemsSource: accountCodeList,
                isEditable: false,
                selectedValue: document.getElementById('articleGroup_ExpenseAccountCode_selectedValue').value.toString(),
                onSelectedIndexChanged: function () {
                    $('#articleGroup_ExpenseAccount_data').val(accountCodeCollection.items[this.selectedIndex].AccountId);
                    $('#articleGroup_ExpenseAccount_selectedValue').val(accountCodeCollection.items[this.selectedIndex].Account);
                    $('#articleGroup_ExpenseAccountCode_selectedValue').val(accountCodeCollection.items[this.selectedIndex].AccountCode);

                    createCboForArticleGroupAccount(articleGroupAccounts);
                }
            });

            document.getElementById('articleGroup_ExpenseAccount_data').value = accountCodeCollection.items[cboArticleGroupExpenseAccountCode.selectedIndex].AccountId;
            document.getElementById('articleGroup_ExpenseAccount_selectedValue').value = accountCodeCollection.items[cboArticleGroupExpenseAccountCode.selectedIndex].Account;
            document.getElementById('articleGroup_ExpenseAccountCode_selectedValue').value = accountCodeCollection.items[cboArticleGroupExpenseAccountCode.selectedIndex].AccountCode;
        }

        // ==========================================
        // Create combo box for article group Account
        // ==========================================
        function createCboForArticleGroupAccount(articleGroupAccounts) {
            var accountCollection = new wijmo.collections.CollectionView(articleGroupAccounts);
            var accountList = new Array();
            for (var i = 0; i < accountCollection.items.length; i++) {
                accountList.push(accountCollection.items[i].Account);
            }

            var disabled;
            if (articleGroupAccounts == 0) {
                disabled = true;
            } else {
                if (document.getElementById('articleGroup_Lock').checked == true) {
                    disabled = true;
                } else {
                    disabled = false;
                }
            }

            cboArticleGroupAccount.dispose();
            cboArticleGroupAccount = new wijmo.input.ComboBox('#articleGroup_Account', {
                disabled: disabled,
                placeholder: "Account",
                itemsSource: accountList,
                isEditable: false,
                selectedValue: document.getElementById('articleGroup_Account_selectedValue').value.toString(),
                onSelectedIndexChanged: function () {
                    $('#articleGroup_Account_data').val(accountCollection.items[this.selectedIndex].AccountId);
                    $('#articleGroup_AccountCode_selectedValue').val(accountCollection.items[this.selectedIndex].AccountCode);
                    $('#articleGroup_Account_selectedValue').val(accountCollection.items[this.selectedIndex].Account);

                    createCboForArticleGroupAccountCode(articleGroupAccounts);
                }
            });

            document.getElementById('articleGroup_Account_data').value = accountCollection.items[cboArticleGroupAccount.selectedIndex].AccountId;
            document.getElementById('articleGroup_AccountCode_selectedValue').value = accountCollection.items[cboArticleGroupAccount.selectedIndex].AccountCode;
            document.getElementById('articleGroup_Account_selectedValue').value = accountCollection.items[cboArticleGroupAccount.selectedIndex].Account;

            cboArticleGroupSaleAccount.dispose();
            cboArticleGroupSaleAccount = new wijmo.input.ComboBox('#articleGroup_SalesAccount', {
                disabled: disabled,
                placeholder: "Sales Account",
                itemsSource: accountList,
                isEditable: false,
                selectedValue: document.getElementById('articleGroup_SalesAccount_selectedValue').value.toString(),
                onSelectedIndexChanged: function () {
                    $('#articleGroup_SalesAccount_data').val(accountCollection.items[this.selectedIndex].AccountId);
                    $('#articleGroup_SalesAccountCode_selectedValue').val(accountCollection.items[this.selectedIndex].AccountCode);
                    $('#articleGroup_SalesAccount_selectedValue').val(accountCollection.items[this.selectedIndex].Account);

                    createCboForArticleGroupAccountCode(articleGroupAccounts);
                }
            });

            document.getElementById('articleGroup_SalesAccount_data').value = accountCollection.items[cboArticleGroupSaleAccount.selectedIndex].AccountId;
            document.getElementById('articleGroup_SalesAccountCode_selectedValue').value = accountCollection.items[cboArticleGroupSaleAccount.selectedIndex].AccountCode;
            document.getElementById('articleGroup_SalesAccount_selectedValue').value = accountCollection.items[cboArticleGroupSaleAccount.selectedIndex].Account;

            cboArticleGroupCostAccount.dispose();
            cboArticleGroupCostAccount = new wijmo.input.ComboBox('#articleGroup_CostAccount', {
                disabled: disabled,
                placeholder: "Cost Account",
                itemsSource: accountList,
                isEditable: false,
                selectedValue: document.getElementById('articleGroup_CostAccount_selectedValue').value.toString(),
                onSelectedIndexChanged: function () {
                    $('#articleGroup_CostAccount_data').val(accountCollection.items[this.selectedIndex].AccountId);
                    $('#articleGroup_CostAccountCode_selectedValue').val(accountCollection.items[this.selectedIndex].AccountCode);
                    $('#articleGroup_CostAccount_selectedValue').val(accountCollection.items[this.selectedIndex].Account);

                    createCboForArticleGroupAccountCode(articleGroupAccounts);
                }
            });

            document.getElementById('articleGroup_CostAccount_data').value = accountCollection.items[cboArticleGroupCostAccount.selectedIndex].AccountId;
            document.getElementById('articleGroup_CostAccountCode_selectedValue').value = accountCollection.items[cboArticleGroupCostAccount.selectedIndex].AccountCode;
            document.getElementById('articleGroup_CostAccount_selectedValue').value = accountCollection.items[cboArticleGroupCostAccount.selectedIndex].Account;

            cboArticleGroupAssetAccount.dispose();
            cboArticleGroupAssetAccount = new wijmo.input.ComboBox('#articleGroup_AssetAccount', {
                disabled: disabled,
                placeholder: "Asset Account",
                itemsSource: accountList,
                isEditable: false,
                selectedValue: document.getElementById('articleGroup_AssetAccount_selectedValue').value.toString(),
                onSelectedIndexChanged: function () {
                    $('#articleGroup_AssetAccount_data').val(accountCollection.items[this.selectedIndex].AccountId);
                    $('#articleGroup_AssetAccountCode_selectedValue').val(accountCollection.items[this.selectedIndex].AccountCode);
                    $('#articleGroup_AssetAccount_selectedValue').val(accountCollection.items[this.selectedIndex].Account);

                    createCboForArticleGroupAccountCode(articleGroupAccounts);
                }
            });

            document.getElementById('articleGroup_AssetAccount_data').value = accountCollection.items[cboArticleGroupAssetAccount.selectedIndex].AccountId;
            document.getElementById('articleGroup_AssetAccountCode_selectedValue').value = accountCollection.items[cboArticleGroupAssetAccount.selectedIndex].AccountCode;
            document.getElementById('articleGroup_AssetAccount_selectedValue').value = accountCollection.items[cboArticleGroupAssetAccount.selectedIndex].Account;

            cboArticleGroupExpenseAccount.dispose();
            cboArticleGroupExpenseAccount = new wijmo.input.ComboBox('#articleGroup_ExpenseAccount', {
                disabled: disabled,
                placeholder: "Expense Account",
                itemsSource: accountList,
                isEditable: false,
                selectedValue: document.getElementById('articleGroup_ExpenseAccount_selectedValue').value.toString(),
                onSelectedIndexChanged: function () {
                    $('#articleGroup_ExpenseAccount_data').val(accountCollection.items[this.selectedIndex].AccountId);
                    $('#articleGroup_ExpenseAccountCode_selectedValue').val(accountCollection.items[this.selectedIndex].AccountCode);
                    $('#articleGroup_ExpenseAccount_selectedValue').val(accountCollection.items[this.selectedIndex].Account);

                    createCboForArticleGroupAccountCode(articleGroupAccounts);
                }
            });

            document.getElementById('articleGroup_ExpenseAccount_data').value = accountCollection.items[cboArticleGroupExpenseAccount.selectedIndex].AccountId;
            document.getElementById('articleGroup_ExpenseAccountCode_selectedValue').value = accountCollection.items[cboArticleGroupExpenseAccount.selectedIndex].AccountCode;
            document.getElementById('articleGroup_ExpenseAccount_selectedValue').value = accountCollection.items[cboArticleGroupExpenseAccount.selectedIndex].Account;
        }

        // =================
        // Add Article Group
        // =================
        function btnAddArtileGroup_OnClick() {
            $('#articleGroupEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $('.requiredArticleGroup').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            $('#cmdSaveArticleGroupButton').prop('disabled', false);
            $('#cmdArticleGroupDetailCloseButton').prop('disabled', false);

            document.getElementById('articleGroup_id').value = 0;
            document.getElementById('articleGroup_ArticleGroup').value = "";
            document.getElementById('articleGroup_ArticleType_data').value = "";
            document.getElementById('articleGroup_ArticleType_selectedValue').value = "";
            document.getElementById('articleGroup_Account_data').value = "";
            document.getElementById('articleGroup_AccountCode_selectedValue').value = "";
            document.getElementById('articleGroup_Account_selectedValue').value = "";
            document.getElementById('articleGroup_SalesAccount_data').value = "";
            document.getElementById('articleGroup_SalesAccountCode_selectedValue').value = "";
            document.getElementById('articleGroup_SalesAccount_selectedValue').value = "";
            document.getElementById('articleGroup_CostAccount_data').value = "";
            document.getElementById('articleGroup_CostAccountCode_selectedValue').value = "";
            document.getElementById('articleGroup_CostAccount_selectedValue').value = "";
            document.getElementById('articleGroup_AssetAccount_data').value = "";
            document.getElementById('articleGroup_AssetAccountCode_selectedValue').value = "";
            document.getElementById('articleGroup_AssetAccount_selectedValue').value = "";
            document.getElementById('articleGroup_ExpenseAccount_data').value = "";
            document.getElementById('articleGroup_ExpenseAccountCode_selectedValue').value = "";
            document.getElementById('articleGroup_ExpenseAccount_selectedValue').value = "";
            document.getElementById('articleGroup_Lock').checked = false;

            document.getElementById('articleGroup_ArticleGroup').disabled = false;
            document.getElementById('articleGroupLockAndUnLock').innerHTML = "<i class='fa fa-unlock'></i>";

            getArticleType();
            getArticleGroupAccount();
        }

        // ==================
        // Edit Article Group
        // ==================
        function btnEditArticleGroup_OnClick() {
            articlegroups.editItem(articlegroups.currentItem);
            $('#articleGroupEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $('.requiredArticleGroup').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            $('#cmdSaveArticleGroupButton').prop('disabled', false);
            $('#cmdArticleGroupDetailCloseButton').prop('disabled', false);

            var articlegroup = articlegroups.currentEditItem;
            document.getElementById('articleGroup_id').value = articlegroup.Id ? articlegroup.Id : '';
            document.getElementById('articleGroup_ArticleGroup').value = articlegroup.ArticleGroup ? articlegroup.ArticleGroup : '';
            document.getElementById('articleGroup_ArticleType_data').value = articlegroup.ArticleTypeId ? articlegroup.ArticleTypeId : '';
            document.getElementById('articleGroup_ArticleType_selectedValue').value = articlegroup.ArticleType ? articlegroup.ArticleType : '';
            document.getElementById('articleGroup_Account_data').value = articlegroup.AccountId ? articlegroup.AccountId : '';
            document.getElementById('articleGroup_AccountCode_selectedValue').value = articlegroup.AccountCode ? articlegroup.AccountCode : '';
            document.getElementById('articleGroup_Account_selectedValue').value = articlegroup.Account ? articlegroup.Account : '';
            document.getElementById('articleGroup_SalesAccount_data').value = articlegroup.SalesAccountId ? articlegroup.SalesAccountId : '';
            document.getElementById('articleGroup_SalesAccountCode_selectedValue').value = articlegroup.SalesAccountCode ? articlegroup.SalesAccountCode : '';
            document.getElementById('articleGroup_SalesAccount_selectedValue').value = articlegroup.SalesAccount ? articlegroup.SalesAccount : '';
            document.getElementById('articleGroup_CostAccount_data').value = articlegroup.CostAccountId ? articlegroup.CostAccountId : '';
            document.getElementById('articleGroup_CostAccountCode_selectedValue').value = articlegroup.CostAccountCode ? articlegroup.CostAccountCode : '';
            document.getElementById('articleGroup_CostAccount_selectedValue').value = articlegroup.CostAccount ? articlegroup.CostAccount : '';
            document.getElementById('articleGroup_AssetAccount_data').value = articlegroup.AssetAccountId ? articlegroup.AssetAccountId : '';
            document.getElementById('articleGroup_AssetAccountCode_selectedValue').value = articlegroup.AssetAccountCode ? articlegroup.AssetAccountCode : '';
            document.getElementById('articleGroup_AssetAccount_selectedValue').value = articlegroup.AssetAccount ? articlegroup.AssetAccount : '';
            document.getElementById('articleGroup_ExpenseAccount_data').value = articlegroup.ExpenseAccountId ? articlegroup.ExpenseAccountId : '';
            document.getElementById('articleGroup_ExpenseAccountCode_selectedValue').value = articlegroup.ExpenseAccountCode ? articlegroup.ExpenseAccountCode : '';
            document.getElementById('articleGroup_ExpenseAccount_selectedValue').value = articlegroup.ExpenseAccount ? articlegroup.ExpenseAccount : '';
            document.getElementById('articleGroup_Lock').checked = articlegroup.IsLocked;

            if (document.getElementById('articleGroup_Lock').checked == true) {
                document.getElementById('articleGroup_ArticleGroup').disabled = true;
                document.getElementById('articleGroupLockAndUnLock').innerHTML = "<i class='fa fa-lock'></i>";
                getArticleType();
                getArticleGroupAccount();
            } else {
                document.getElementById('articleGroup_ArticleGroup').disabled = false;
                document.getElementById('articleGroupLockAndUnLock').innerHTML = "<i class='fa fa-unlock'></i>";
                getArticleType();
                getArticleGroupAccount();
            }
        }
        // ==============================
        // Article Group Entry Validation
        // ==============================
        function articleGroupEntryValidation() {
            var isValid = true;
            $('.requiredArticleGroup').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                }
                else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            return isValid;
        }

        // ==============================
        // Refresh Article Group Flexgrid
        // ==============================
        function refreshArticleGroupFlexgrid() {
            articlegroups = new wijmo.collections.CollectionView(getArticleGroup());
            articlegroups.canFilter = true;
            articlegroups.pageSize = 15;

            var filterTextArticleGroup = '';
            $('#InputFilterArticleGroup').keyup(function () {
                filterTextArticleGroup = this.value.toLowerCase();
                articlegroups.refresh();
            });
            articlegroups.filter = function (item) {
                return !filterTextArticleGroup || (item.ArticleGroup.toLowerCase().indexOf(filterTextArticleGroup) > -1);
            }
            articlegroups.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsArticleGroup();
            });
            articlegroups.currentChanged.addHandler(function (sender, args) {
                updateDetailsArticleGroup();
            });

            articleGroupGrid.itemsSource = articlegroups;
            articleGroupGrid.trackChanges = true;
        }

        // ==================
        // SAVE Article Group
        // ==================
        function btnArticleGroupSaveButton_OnClick() {
            var articleGroupObject = new Object();
            var articleGroupId = document.getElementById('articleGroup_id').value;
            articleGroupObject.ArticleGroup = document.getElementById('articleGroup_ArticleGroup').value;
            articleGroupObject.ArticleTypeId = document.getElementById('articleGroup_ArticleType_data').value;
            articleGroupObject.AccountId = document.getElementById('articleGroup_Account_data').value;
            articleGroupObject.SalesAccountId = document.getElementById('articleGroup_SalesAccount_data').value;
            articleGroupObject.CostAccountId = document.getElementById('articleGroup_CostAccount_data').value;
            articleGroupObject.AssetAccountId = document.getElementById('articleGroup_AssetAccount_data').value;
            articleGroupObject.ExpenseAccountId = document.getElementById('articleGroup_ExpenseAccount_data').value;
            articleGroupObject.IsLocked = document.getElementById('articleGroup_Lock').checked;
            var articleGroupData = JSON.stringify(articleGroupObject);

            if (document.getElementById('articleGroup_ArticleType_data').value == '') {
                document.getElementById("articleGroup_ArticleType").style.border = "1px solid red";
            } else {
                document.getElementById("articleGroup_ArticleType").style.border = "1px solid #C8C8C8";
            }

            if (document.getElementById('articleGroup_Account_data').value == '') {
                document.getElementById("articleGroup_AccountCode").style.border = "1px solid red";
                document.getElementById("articleGroup_Account").style.border = "1px solid red";
            } else {
                document.getElementById("articleGroup_AccountCode").style.border = "1px solid #C8C8C8";
                document.getElementById("articleGroup_Account").style.border = "1px solid #C8C8C8";
            }

            if (document.getElementById('articleGroup_SalesAccount_data').value == '') {
                document.getElementById("articleGroup_SalesAccountCode").style.border = "1px solid red";
                document.getElementById("articleGroup_SalesAccount").style.border = "1px solid red";
            } else {
                document.getElementById("articleGroup_SalesAccountCode").style.border = "1px solid #C8C8C8";
                document.getElementById("articleGroup_SalesAccount").style.border = "1px solid #C8C8C8";
            }

            if (document.getElementById('articleGroup_CostAccount_data').value == '') {
                document.getElementById("articleGroup_CostAccountCode").style.border = "1px solid red";
                document.getElementById("articleGroup_CostAccount").style.border = "1px solid red";
            } else {
                document.getElementById("articleGroup_CostAccountCode").style.border = "1px solid #C8C8C8";
                document.getElementById("articleGroup_CostAccount").style.border = "1px solid #C8C8C8";
            }

            if (document.getElementById('articleGroup_AssetAccount_data').value == '') {
                document.getElementById("articleGroup_AssetAccountCode").style.border = "1px solid red";
                document.getElementById("articleGroup_AssetAccount").style.border = "1px solid red";
            } else {
                document.getElementById("articleGroup_AssetAccountCode").style.border = "1px solid #C8C8C8";
                document.getElementById("articleGroup_AssetAccount").style.border = "1px solid #C8C8C8";
            }

            if (document.getElementById('articleGroup_ExpenseAccount_data').value == '') {
                document.getElementById("articleGroup_ExpenseAccountCode").style.border = "1px solid red";
                document.getElementById("articleGroup_ExpenseAccount").style.border = "1px solid red";
            } else {
                document.getElementById("articleGroup_ExpenseAccountCode").style.border = "1px solid #C8C8C8";
                document.getElementById("articleGroup_ExpenseAccount").style.border = "1px solid #C8C8C8";
            }

            if (articleGroupEntryValidation() == false) {
                toastr.error("Invalid entry");
            } else {
                $('#cmdSaveArticleGroupButton').prop('disabled', true);
                $('#cmdArticleGroupDetailCloseButton').prop('disabled', true);

                if (articleGroupId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/addArticleGroup',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: articleGroupData,
                        statusCode: {
                            200: function () {
                                $('#cmdSaveArticleGroupButton').prop('disabled', true);
                                $('#cmdArticleGroupDetailCloseButton').prop('disabled', true);
                                toastr.success("Successfully saved");

                                $('#articleGroupEdit').modal('hide');

                                refreshArticleGroupFlexgrid();
                            },
                            404: function () {
                                toastr.error("Save request not found");
                                $('#cmdSaveArticleGroupButton').prop('disabled', false);
                                $('#cmdArticleGroupDetailCloseButton').prop('disabled', false);
                            },
                            400: function () {
                                toastr.error("Cannot save new record");
                                $('#cmdSaveArticleGroupButton').prop('disabled', false);
                                $('#cmdArticleGroupDetailCloseButton').prop('disabled', false);
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/updateArticleGroup/' + articleGroupId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: articleGroupData,
                        statusCode: {
                            200: function () {
                                $('#cmdSaveArticleGroupButton').prop('disabled', true);
                                $('#cmdArticleGroupDetailCloseButton').prop('disabled', true);
                                toastr.success("Successfully updated");

                                $('#articleGroupEdit').modal('hide');

                                refreshArticleGroupFlexgrid();
                            },
                            404: function () {
                                toastr.error("Update request not found");
                                $('#cmdSaveArticleGroupButton').prop('disabled', false);
                                $('#cmdArticleGroupDetailCloseButton').prop('disabled', false);
                            },
                            400: function () {
                                toastr.error("Cannot update record");
                                $('#cmdSaveArticleGroupButton').prop('disabled', false);
                                $('#cmdArticleGroupDetailCloseButton').prop('disabled', false);
                            }
                        }
                    });
                }
            }
        }

        // ====================
        // DELETE Article Group
        // ====================
        function btnDeleteArticleGroup_OnClick() {
            $('#deleteArticleGroupConfirm').modal({
                show: true,
                backdrop: 'static'
            });

            $('#cmdConfirmDeleteArticleGroup').prop('disabled', false);
            $('#cmdConfirmDeleteCloseButtonArticleGroup').prop('disabled', false);
        }
        // Article Group Confirm Delete Button
        function cmdArticleGroupConfirmDeleteButton_OnClick() {
            $('#cmdConfirmDeleteArticleGroup').prop('disabled', true);
            $('#cmdConfirmDeleteCloseButtonArticleGroup').prop('disabled', true);

            articlegroups.editItem(articlegroups.currentItem);
            var articleGroupId = articlegroups.currentEditItem.Id;
            $.ajax({
                url: '/api/deleteArticleGroup/' + articleGroupId,
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        $('#cmdConfirmDeleteArticleGroup').prop('disabled', true);
                        $('#cmdConfirmDeleteCloseButtonArticleGroup').prop('disabled', true);
                        toastr.success("Successfully deleted");

                        $('#deleteArticleGroupConfirm').modal('hide');

                        refreshArticleGroupFlexgrid();
                    },
                    404: function () {
                        toastr.error("Delete request not found");
                        $('#cmdConfirmDeleteArticleGroup').prop('disabled', false);
                        $('#cmdConfirmDeleteCloseButtonArticleGroup').prop('disabled', false);
                        $('#deleteArticleGroupConfirm').modal('hide');

                    },
                    400: function () {
                        toastr.error("Cannot delete record");
                        $('#cmdConfirmDeleteArticleGroup').prop('disabled', false);
                        $('#cmdConfirmDeleteCloseButtonArticleGroup').prop('disabled', false);
                        $('#deleteArticleGroupConfirm').modal('hide');
                    }
                }
            });
        }

        // =============
        // Article Group
        // =============
        function articleGroupTab() {
            cboArticleType = new wijmo.input.ComboBox('#articleGroup_ArticleType');
            cboArticleGroupAccountCode = new wijmo.input.ComboBox('#articleGroup_AccountCode');
            cboArticleGroupAccount = new wijmo.input.ComboBox('#articleGroup_Account');
            cboArticleGroupSaleAccountCode = new wijmo.input.ComboBox('#articleGroup_SalesAccountCode');
            cboArticleGroupSaleAccount = new wijmo.input.ComboBox('#articleGroup_SalesAccount');
            cboArticleGroupCostAccountCode = new wijmo.input.ComboBox('#articleGroup_CostAccountCode');
            cboArticleGroupCostAccount = new wijmo.input.ComboBox('#articleGroup_CostAccount');
            cboArticleGroupAssetAccountCode = new wijmo.input.ComboBox('#articleGroup_AssetAccountCode');
            cboArticleGroupAssetAccount = new wijmo.input.ComboBox('#articleGroup_AssetAccount');
            cboArticleGroupExpenseAccountCode = new wijmo.input.ComboBox('#articleGroup_ExpenseAccountCode');
            cboArticleGroupExpenseAccount = new wijmo.input.ComboBox('#articleGroup_ExpenseAccount');

            articlegroups = new wijmo.collections.CollectionView(getArticleGroup());
            articlegroups.canFilter = true;
            articlegroups.pageSize = 15;

            var filterTextArticleGroup = '';
            $('#InputFilterArticleGroup').keyup(function () {
                filterTextArticleGroup = this.value.toLowerCase();
                articlegroups.refresh();
            });
            articlegroups.filter = function (item) {
                return !filterTextArticleGroup || (item.ArticleGroup.toLowerCase().indexOf(filterTextArticleGroup) > -1);
            }
            articlegroups.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsArticleGroup();
            });
            articlegroups.currentChanged.addHandler(function (sender, args) {
                updateDetailsArticleGroup();
            });

            // Flex Grid for Article Group
            articleGroupGrid = new wijmo.grid.FlexGrid('#ArticleGroupGrid');
            articleGroupGrid.initialize({
                columns: [
                            {
                                "header": "Edit",
                                "binding": "EditId",
                                "width": 60,
                                "align": "center",
                                "allowResizing": false,
                                "allowSorting": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Delete",
                                "binding": "DeleteId",
                                "width": 70,
                                "align": "center",
                                "allowResizing": false,
                                "allowSorting": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Article Group",
                                "binding": "ArticleGroup",
                                "allowSorting": true,
                                "width": "1*",
                            },
                            {
                                "header": "Type",
                                "binding": "ArticleType",
                                "allowSorting": true,
                                "width": "1*"
                            },
                            {
                                "header": "Lock",
                                "binding": "IsLocked",
                                "allowSorting": true,
                                "width": "0.2*"
                            }
                ],
                autoGenerateColumns: false,
                itemsSource: articlegroups,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            articleGroupGrid.trackChanges = true;

            //Navigation button for Employee
            btnFirstPageGridArticleGroup = document.getElementById('btnMoveToFirstPageGridArticleGroup');
            btnPreviousPageGridArticleGroup = document.getElementById('btnMoveToPreviousPageGridArticleGroup');
            btnNextPageGridArticleGroup = document.getElementById('btnMoveToNextPageGridArticleGroup');
            btnLastPageGridArticleGroup = document.getElementById('btnMoveToLastPageGridArticleGroup');
            btnCurrentPageGridArticleGroup = document.getElementById('btnCurrentPageGridArticleGroup');

            updateNavigateButtonsArticleGroup();

            btnFirstPageGridArticleGroup.addEventListener('click', function () {
                articlegroups.moveToFirstPage();
                updateNavigateButtonsArticleGroup();
            });
            btnPreviousPageGridArticleGroup.addEventListener('click', function () {
                articlegroups.moveToPreviousPage();
                updateNavigateButtonsArticleGroup();
            });
            btnNextPageGridArticleGroup.addEventListener('click', function () {
                articlegroups.moveToNextPage();
                updateNavigateButtonsArticleGroup();
            });
            btnLastPageGridArticleGroup.addEventListener('click', function () {
                articlegroups.moveToLastPage();
                updateNavigateButtonsArticleGroup();
            });
        }
    </script>

    <!-- ===================== -->
    <!-- Other Article Scripts -->
    <!-- ===================== -->
    <script type="text/javascript">
        // ==================================
        // Global Variables for Other Article
        // ==================================
        var otherarticles;
        var otherArticleGrid;
        var articlesAccounts;
        var cboArticleForAccountCode;
        var cboArticleForAccount;
        var btnFirstPageGridOtherArticle;
        var btnPreviousPageGridOtherArticle;
        var btnNextPageGridOtherArticle;
        var btnLastPageGridOtherArticle;
        var btnCurrentPageGridOtherArticle;

        // ======================
        // GET Other Article List
        // ======================
        function getOtherArticle() {
            var otherarticles = new wijmo.collections.ObservableArray;
            NProgress.start();
            $.ajax({
                url: '/api/listArticleByArticleTypeId/6',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (otherArticleResults) {
                    if (otherArticleResults.length > 0) {
                        for (i = 0; i < otherArticleResults.length; i++) {

                            var btnDeleteId;
                            if (otherArticleResults[i]["IsLocked"] == true) {
                                btnDeleteId = "<button class='btn btn-danger btn-xs btn-block' onclick='btnDeleteArticleLock_OnClick()'><i class='fa fa-trash'></i> Delete</button>";
                            } else {
                                btnDeleteId = "<button class='btn btn-danger btn-xs btn-block' onclick='btnDeleteArticle_OnClick()'><i class='fa fa-trash'></i> Delete</button>";
                            }

                            otherarticles.push({
                                EditId: "<button class='btn btn-primary btn-xs btn-block' onclick='btnEditArticle_OnClick()'><i class='fa fa-edit'></i> Edit</button>",
                                DeleteId: btnDeleteId,
                                Id: otherArticleResults[i]["Id"],
                                ArticleCode: otherArticleResults[i]["ArticleCode"],
                                ManualArticleCode: otherArticleResults[i]["ManualArticleCode"],
                                Article: otherArticleResults[i]["Article"],
                                Category: otherArticleResults[i]["Category"],
                                ArticleTypeId: otherArticleResults[i]["ArticleTypeId"],
                                ArticleType: otherArticleResults[i]["ArticleType"],
                                ArticleGroupId: otherArticleResults[i]["ArticleGroupId"],
                                ArticleGroup: otherArticleResults[i]["ArticleGroup"],
                                AccountId: otherArticleResults[i]["AccountId"],
                                AccountCode: otherArticleResults[i]["AccountCode"],
                                Account: otherArticleResults[i]["Account"],
                                SalesAccountId: otherArticleResults[i]["SalesAccountId"],
                                CostAccountId: otherArticleResults[i]["CostAccountId"],
                                AssetAccountId: otherArticleResults[i]["AssetAccountId"],
                                ExpenseAccountId: otherArticleResults[i]["ExpenseAccountId"],
                                UnitId: otherArticleResults[i]["UnitId"],
                                Unit: otherArticleResults[i]["Unit"],
                                OutputTaxId: otherArticleResults[i]["OutputTaxId"],
                                InputTaxId: otherArticleResults[i]["InputTaxId"],
                                WTaxTypeId: otherArticleResults[i]["WTaxTypeId"],
                                Price: otherArticleResults[i]["Price"],
                                Cost: otherArticleResults[i]["Cost"],
                                IsInventory: otherArticleResults[i]["IsInventory"],
                                Particulars: otherArticleResults[i]["Particulars"],
                                Address: otherArticleResults[i]["Address"],
                                TermId: otherArticleResults[i]["TermId"],
                                ContactNumber: otherArticleResults[i]["ContactNumber"],
                                ContactPerson: otherArticleResults[i]["ContactPerson"],
                                TaxNumber: otherArticleResults[i]["TaxNumber"],
                                CreditLimit: otherArticleResults[i]["CreditLimit"],
                                DateAcquired: otherArticleResults[i]["DateAcquired"],
                                UsefulLife: otherArticleResults[i]["UsefulLife"],
                                SalvageValue: otherArticleResults[i]["SalvageValue"],
                                ManualArticleOldCode: otherArticleResults[i]["ManualArticleOldCode"],
                                IsLocked: otherArticleResults[i]["IsLocked"],
                                CreatedById: otherArticleResults[i]["CreatedById"],
                                CreatedBy: otherArticleResults[i]["CreatedBy"],
                                CreatedDateTime: otherArticleResults[i]["CreatedDateTime"],
                                UpdatedById: otherArticleResults[i]["UpdatedById"],
                                UpdatedBy: otherArticleResults[i]["UpdatedBy"],
                                UpdatedDateTime: otherArticleResults[i]["UpdatedDateTime"]
                            });

                        }
                    }
                    NProgress.done();
                }
            }).fail(function (xhr, textStatus, err) {
                alert(err);
            });
            return otherarticles;
        }

        // ================================
        // Other Article Delete Lock Button
        // ================================
        function btnDeleteArticleLock_OnClick() {
            $('#deleteRecordLock').modal({
                show: true,
                backdrop: 'static'
            });
        }

        // ====================================
        // FlexGrid Selection for Other Article
        // ====================================
        function updateDetailsOtherArticle() {
            var item = otherarticles.currentItem;
            document.getElementById('createdBy').innerHTML = item.CreatedBy;
            document.getElementById('createdDate').innerHTML = item.CreatedDateTime;
            document.getElementById('updatedBy').innerHTML = item.UpdatedBy;
            document.getElementById('updatedDate').innerHTML = item.UpdatedDateTime;
        }

        // ====================================
        // Navigation Buttons for Other Article
        // ====================================
        function updateNavigateButtonsOtherArticle() {
            if (otherarticles.pageSize <= 0) {
                document.getElementById('navigationPageGridOtherArticle').style.display = 'none';
                return;
            }
            document.getElementById('navigationPageGridOtherArticle').style.display = 'block';
            if (otherarticles.pageIndex === 0) {
                btnFirstPageGridOtherArticle.setAttribute('disabled', 'disabled');
                btnPreviousPageGridOtherArticle.setAttribute('disabled', 'disabled');
                btnNextPageGridOtherArticle.removeAttribute('disabled');
                btnLastPageGridOtherArticle.removeAttribute('disabled');
            } else if (otherarticles.pageIndex === (otherarticles.pageCount - 1)) {
                btnFirstPageGridOtherArticle.removeAttribute('disabled');
                btnPreviousPageGridOtherArticle.removeAttribute('disabled');
                btnLastPageGridOtherArticle.setAttribute('disabled', 'disabled');
                btnNextPageGridOtherArticle.setAttribute('disabled', 'disabled');
            } else {
                btnFirstPageGridOtherArticle.removeAttribute('disabled');
                btnPreviousPageGridOtherArticle.removeAttribute('disabled');
                btnNextPageGridOtherArticle.removeAttribute('disabled');
                btnLastPageGridOtherArticle.removeAttribute('disabled');
            }
            btnCurrentPageGridOtherArticle.innerHTML = (otherarticles.pageIndex + 1) + ' / ' + otherarticles.pageCount;
        }

        // ========================================================
        // Function with leading zeroes to display the article code
        // ========================================================
        function zerofillArticle(number, length) {
            var result = number.toString();
            var pad = length - result.length;
            while (pad > 0) {
                result = '0' + result;
                pad--;
            }
            return result;
        }

        // =======================================
        // Get Account for other article combo box
        // =======================================
        function getArticleAccountForComboBox() {
            articlesAccounts = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listAccount',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (otherArticleAccountResults) {
                    if (otherArticleAccountResults.length > 0) {
                        for (i = 0; i < otherArticleAccountResults.length; i++) {
                            articlesAccounts.push({
                                AccountId: otherArticleAccountResults[i]["Id"],
                                AccountCode: otherArticleAccountResults[i]["AccountCode"],
                                Account: otherArticleAccountResults[i]["Account"]
                            });
                        }
                        createCboForArticleAccountCode(articlesAccounts);
                        createCboForArticleAccount(articlesAccounts);
                    } else {
                        createCboForArticleAccountCode(articlesAccounts);
                        createCboForArticleAccount(articlesAccounts);
                    }
                }
            });
        }

        // ==============================================
        // Create combo box for other aricle Account Code
        // ==============================================
        function createCboForArticleAccountCode(articlesAccounts) {
            var accountCodeCollection = new wijmo.collections.CollectionView(articlesAccounts);
            var accountCodeList = new Array();
            for (var i = 0; i < accountCodeCollection.items.length; i++) {
                accountCodeList.push(accountCodeCollection.items[i].AccountCode);
            }

            var disabled;
            if (articlesAccounts == 0) {
                disabled = true;
            } else {
                if (document.getElementById('article_Lock').checked == true) {
                    disabled = true;
                } else {
                    disabled = false;
                }
            }

            cboArticleForAccountCode.dispose();
            cboArticleForAccountCode = new wijmo.input.ComboBox('#article_AccountCode', {
                disabled: disabled,
                placeholder: "Select Account",
                itemsSource: accountCodeList,
                isEditable: false,
                selectedValue: document.getElementById('article_AccountCode_selectedValue').value.toString(),
                onSelectedIndexChanged: function () {
                    $('#article_Account_data').val(accountCodeCollection.items[this.selectedIndex].AccountId);
                    $('#article_Account_selectedValue').val(accountCodeCollection.items[this.selectedIndex].Account);
                    $('#article_AccountCode_selectedValue').val(accountCodeCollection.items[this.selectedIndex].AccountCode);

                    createCboForArticleAccount(articlesAccounts);
                }
            });

            document.getElementById('article_Account_data').value = accountCodeCollection.items[cboArticleForAccountCode.selectedIndex].AccountId;
            document.getElementById('article_Account_selectedValue').value = accountCodeCollection.items[cboArticleForAccountCode.selectedIndex].Account;
            document.getElementById('article_AccountCode_selectedValue').value = accountCodeCollection.items[cboArticleForAccountCode.selectedIndex].AccountCode;
        }

        // =========================================
        // Create combo box for other aricle Account
        // =========================================
        function createCboForArticleAccount(articlesAccounts) {
            var accountCollection = new wijmo.collections.CollectionView(articlesAccounts);
            var accountList = new Array();
            for (var i = 0; i < accountCollection.items.length; i++) {
                accountList.push(accountCollection.items[i].Account);
            }

            var disabled;
            if (articlesAccounts == 0) {
                disabled = true;
            } else {
                if (document.getElementById('article_Lock').checked == true) {
                    disabled = true;
                } else {
                    disabled = false;
                }
            }

            cboArticleForAccount.dispose();
            cboArticleForAccount = new wijmo.input.ComboBox('#article_Account', {
                disabled: disabled,
                placeholder: "Select Account",
                itemsSource: accountList,
                isEditable: false,
                selectedValue: document.getElementById('article_Account_selectedValue').value.toString(),
                onSelectedIndexChanged: function () {
                    $('#article_Account_data').val(accountCollection.items[this.selectedIndex].AccountId);
                    $('#article_AccountCode_selectedValue').val(accountCollection.items[this.selectedIndex].AccountCode);
                    $('#article_Account_selectedValue').val(accountCollection.items[this.selectedIndex].Account);

                    createCboForArticleAccountCode(articlesAccounts);
                }
            });

            document.getElementById('article_Account_data').value = accountCollection.items[cboArticleForAccount.selectedIndex].AccountId;
            document.getElementById('article_AccountCode_selectedValue').value = accountCollection.items[cboArticleForAccount.selectedIndex].AccountCode;
            document.getElementById('article_Account_selectedValue').value = accountCollection.items[cboArticleForAccount.selectedIndex].Account;
        }

        // =================
        // Add Other Article
        // =================
        function btnAddArticle_OnClick() {
            $('#articleEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $('.requiredArticle').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            $('#cmdSaveArticleButton').prop('disabled', false);
            $('#cmdArticleDetailCloseButton').prop('disabled', false);

            document.getElementById('article_id').value = 0;
            document.getElementById('article_Code').value = "";
            document.getElementById('article_Article').value = "";
            document.getElementById('article_Account_data').value = "";
            document.getElementById('article_AccountCode_selectedValue').value = "";
            document.getElementById('article_Account_selectedValue').value = "";
            document.getElementById('article_Address').value = "";
            document.getElementById('article_ContactNumber').value = "";
            document.getElementById('article_Lock').checked = false;

            document.getElementById('article_Article').disabled = false;
            document.getElementById('article_Address').disabled = false;
            document.getElementById('article_ContactNumber').disabled = false;
            document.getElementById('articleLockAndUnLock').innerHTML = "<i class='fa fa-unlock'></i>";
            getArticleAccountForComboBox();

            $.ajax({
                url: '/api/articleLastArticleCodeByArticleTypeId/6',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (otherArticleCodeResults) {
                    if (otherArticleCodeResults != null) {
                        var articleCode = parseInt(otherArticleCodeResults.ArticleCode);
                        var articleCodeResults = articleCode + 0000000001;

                        document.getElementById('article_Code').value = zerofillArticle(articleCodeResults, 10);
                    } else {
                        document.getElementById('article_Code').value = "0000000001";
                    }
                }
            });

        }

        // ==================
        // Edit Other Article
        // ==================
        function btnEditArticle_OnClick() {
            otherarticles.editItem(otherarticles.currentItem);
            $('#articleEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $('.requiredArticle').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            $('#cmdSaveArticleButton').prop('disabled', false);
            $('#cmdArticleDetailCloseButton').prop('disabled', false);

            var otherarticle = otherarticles.currentEditItem;
            document.getElementById('article_id').value = otherarticle.Id ? otherarticle.Id : '';
            document.getElementById('article_Code').value = otherarticle.ArticleCode ? otherarticle.ArticleCode : '';
            document.getElementById('article_Article').value = otherarticle.Article ? otherarticle.Article : '';
            document.getElementById('article_Account_data').value = otherarticle.AccountId ? otherarticle.AccountId : '';
            document.getElementById('article_AccountCode_selectedValue').value = otherarticle.AccountCode ? otherarticle.AccountCode : '';
            document.getElementById('article_Account_selectedValue').value = otherarticle.Account ? otherarticle.Account : '';
            document.getElementById('article_Address').value = otherarticle.Address ? otherarticle.Address : '';
            document.getElementById('article_ContactNumber').value = otherarticle.ContactNumber ? otherarticle.ContactNumber : '';
            document.getElementById('article_Lock').checked = otherarticle.IsLocked;

            if (document.getElementById('article_Lock').checked == true) {
                document.getElementById('article_Article').disabled = true;
                document.getElementById('article_Address').disabled = true;
                document.getElementById('article_ContactNumber').disabled = true;
                document.getElementById('articleLockAndUnLock').innerHTML = "<i class='fa fa-lock'></i>";
                getArticleAccountForComboBox();
            } else {
                document.getElementById('article_Article').disabled = false;
                document.getElementById('article_Address').disabled = false;
                document.getElementById('article_ContactNumber').disabled = false;
                document.getElementById('articleLockAndUnLock').innerHTML = "<i class='fa fa-unlock'></i>";
                getArticleAccountForComboBox();
            }
        }

        // ==============================
        // Refresh Other Article Flexgrid
        // ==============================
        function refreshOtherArticleFlexgrid() {
            otherarticles = new wijmo.collections.CollectionView(getOtherArticle());
            otherarticles.canFilter = true;
            otherarticles.pageSize = 15;

            var filterTextOtherArticle = '';
            $('#InputFilterOtherArticle').keyup(function () {
                filterTextOtherArticle = this.value.toLowerCase();
                otherarticles.refresh();
            });
            otherarticles.filter = function (item) {
                return !filterTextOtherArticle || (item.Article.toLowerCase().indexOf(filterTextOtherArticle) > -1);
            }
            otherarticles.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsOtherArticle();
            });
            otherarticles.currentChanged.addHandler(function (sender, args) {
                updateDetailsOtherArticle();
            });

            otherArticleGrid.itemsSource = otherarticles;
            otherArticleGrid.trackChanges = true;
        }

        // ==============================
        // Other Article Entry Validation
        // ==============================
        function otherArticleEntryValidation() {
            var isValid = true;
            $('.requiredArticle').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                }
                else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            return isValid;
        }

        // ==================
        // Save Other Article
        // ==================
        function btnArticleSaveButton_OnClick() {
            var otherArticleObject = new Object();
            var otherArticleId = document.getElementById('article_id').value;
            otherArticleObject.ArticleCode = document.getElementById('article_Code').value;
            otherArticleObject.Article = document.getElementById('article_Article').value;
            otherArticleObject.AccountId = document.getElementById('article_Account_data').value;
            otherArticleObject.Address = document.getElementById('article_Address').value;
            otherArticleObject.ContactNumber = document.getElementById('article_ContactNumber').value;
            otherArticleObject.IsLocked = document.getElementById('article_Lock').checked;

            var otherArticleData = JSON.stringify(otherArticleObject);

            if (document.getElementById('article_Account_data').value == '') {
                document.getElementById("article_AccountCode").style.border = "1px solid red";
                document.getElementById("article_Account").style.border = "1px solid red";
            } else {
                document.getElementById("article_AccountCode").style.border = "1px solid #C8C8C8";
                document.getElementById("article_Account").style.border = "1px solid #C8C8C8";
            }

            if (otherArticleEntryValidation() == false) {
                toastr.error("Invalid entry");
            } else {
                $('#cmdSaveArticleButton').prop('disabled', true);
                $('#cmdArticleDetailCloseButton').prop('disabled', true);

                if (otherArticleId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/addArticle/6',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: otherArticleData,
                        statusCode: {
                            200: function () {
                                $('#cmdSaveArticleButton').prop('disabled', true);
                                $('#cmdArticleDetailCloseButton').prop('disabled', true);
                                toastr.success("Successfully saved");

                                $('#articleEdit').modal('hide');

                                refreshOtherArticleFlexgrid();
                            },
                            404: function () {
                                toastr.error("Save request not found");
                                $('#cmdSaveArticleButton').prop('disabled', false);
                                $('#cmdArticleDetailCloseButton').prop('disabled', false);
                            },
                            400: function () {
                                toastr.error("Cannot save new record");
                                $('#cmdSaveArticleButton').prop('disabled', false);
                                $('#cmdArticleDetailCloseButton').prop('disabled', false);
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/updateArticle/' + otherArticleId + '/6',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: otherArticleData,
                        statusCode: {
                            200: function () {
                                $('#cmdSaveArticleButton').prop('disabled', true);
                                $('#cmdArticleDetailCloseButton').prop('disabled', true);
                                toastr.success("Successfully updated");

                                $('#articleEdit').modal('hide');

                                refreshOtherArticleFlexgrid();
                            },
                            404: function () {
                                toastr.error("Update request not found");
                                $('#cmdSaveArticleButton').prop('disabled', false);
                                $('#cmdArticleDetailCloseButton').prop('disabled', false);
                            },
                            400: function () {
                                toastr.error("Cannot update record");
                                $('#cmdSaveArticleButton').prop('disabled', false);
                                $('#cmdArticleDetailCloseButton').prop('disabled', false);
                            }
                        }
                    });
                }
            }
        }

        // ====================
        // Delete Other Article
        // ====================
        function btnDeleteArticle_OnClick() {
            $('#deleteArticleConfirm').modal({
                show: true,
                backdrop: 'static'
            });

            $('#cmdConfirmDeleteArticle').prop('disabled', false);
            $('#cmdConfirmDeleteCloseButtonArticle').prop('disabled', false);
        }
        // Article Confirm Delete Button
        function cmdArticleConfirmDeleteButton_OnClick() {
            $('#cmdConfirmDeleteArticle').prop('disabled', true);
            $('#cmdConfirmDeleteCloseButtonArticle').prop('disabled', true);

            otherarticles.editItem(otherarticles.currentItem);
            var otherArticleId = otherarticles.currentEditItem.Id;
            $.ajax({
                url: '/api/deleteArticle/' + otherArticleId,
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        $('#cmdConfirmDeleteArticle').prop('disabled', true);
                        $('#cmdConfirmDeleteCloseButtonArticle').prop('disabled', true);
                        toastr.success("Successfully deleted");

                        $('#deleteArticleConfirm').modal('hide');

                        refreshOtherArticleFlexgrid();
                    },
                    404: function () {
                        toastr.error("Delete request not found");
                        $('#cmdConfirmDeleteArticle').prop('disabled', false);
                        $('#cmdConfirmDeleteCloseButtonArticle').prop('disabled', false);
                        $('#deleteArticleConfirm').modal('hide');
                    },
                    400: function () {
                        toastr.error("Cannot delete record");
                        $('#cmdConfirmDeleteArticle').prop('disabled', false);
                        $('#cmdConfirmDeleteCloseButtonArticle').prop('disabled', false);
                        $('#deleteArticleConfirm').modal('hide');
                    }
                }
            });
        }

        // =============
        // Other Article
        // =============
        function otherArticleTab() {
            cboArticleForAccountCode = new wijmo.input.ComboBox('#article_AccountCode');
            cboArticleForAccount = new wijmo.input.ComboBox('#article_Account');
            document.getElementById('article_Code').disabled = true;

            otherarticles = new wijmo.collections.CollectionView(getOtherArticle());
            otherarticles.canFilter = true;
            otherarticles.pageSize = 15;

            var filterTextOtherArticle = '';
            $('#InputFilterOtherArticle').keyup(function () {
                filterTextOtherArticle = this.value.toLowerCase();
                otherarticles.refresh();
            });
            otherarticles.filter = function (item) {
                return !filterTextOtherArticle || (item.Article.toLowerCase().indexOf(filterTextOtherArticle) > -1);
            }
            otherarticles.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsOtherArticle();
            });
            otherarticles.currentChanged.addHandler(function (sender, args) {
                updateDetailsOtherArticle();
            });

            // Flex Grid for Other Article
            otherArticleGrid = new wijmo.grid.FlexGrid('#OtherArticleGrid');
            otherArticleGrid.initialize({
                columns: [
                            {
                                "header": "Edit",
                                "binding": "EditId",
                                "width": 60,
                                "align": "center",
                                "allowResizing": false,
                                "allowSorting": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Delete",
                                "binding": "DeleteId",
                                "width": 70,
                                "align": "center",
                                "allowResizing": false,
                                "allowSorting": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Code",
                                "binding": "ArticleCode",
                                "allowSorting": true,
                                "width": "1*",
                            },
                            {
                                "header": "Article.",
                                "binding": "Article",
                                "allowSorting": true,
                                "width": "3*"
                            },
                            {
                                "header": "Account",
                                "binding": "Account",
                                "allowSorting": true,
                                "width": "3*"
                            },
                            {
                                "header": "Lock",
                                "binding": "IsLocked",
                                "allowSorting": true,
                                "width": "0.5*"
                            }
                ],
                autoGenerateColumns: false,
                itemsSource: otherarticles,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            otherArticleGrid.trackChanges = true;

            //Navigation button for Other Article
            btnFirstPageGridOtherArticle = document.getElementById('btnMoveToFirstPageGridOtherArticle');
            btnPreviousPageGridOtherArticle = document.getElementById('btnMoveToPreviousPageGridOtherArticle');
            btnNextPageGridOtherArticle = document.getElementById('btnMoveToNextPageGridOtherArticle');
            btnLastPageGridOtherArticle = document.getElementById('btnMoveToLastPageGridOtherArticle');
            btnCurrentPageGridOtherArticle = document.getElementById('btnCurrentPageGridOtherArticle');

            updateNavigateButtonsOtherArticle();

            btnFirstPageGridOtherArticle.addEventListener('click', function () {
                otherarticles.moveToFirstPage();
                updateNavigateButtonsOtherArticle();
            });
            btnPreviousPageGridOtherArticle.addEventListener('click', function () {
                otherarticles.moveToPreviousPage();
                updateNavigateButtonsOtherArticle();
            });
            btnNextPageGridOtherArticle.addEventListener('click', function () {
                otherarticles.moveToNextPage();
                updateNavigateButtonsOtherArticle();
            });
            btnLastPageGridOtherArticle.addEventListener('click', function () {
                otherarticles.moveToLastPage();
                updateNavigateButtonsOtherArticle();
            });
        }
    </script>

    <!-- ================================ -->
    <!-- Tab Current Page on Load Scripts -->
    <!-- ================================ -->
    <script type="text/javascript">
        // ====
        // TABS
        // ====
        $('#discountTabId').click(function () {
            $('#Discount').show();
            $('#PayType').hide();
            $('#Tax').hide();
            $('#Unit').hide();
            $('#Term').hide();
            $('#Employee').hide();
            $('#ArticleGroup').hide();
            $('#OtherArticle').hide();
            $('#AccountType').hide();
            window.discountTab = function () {
                return true;
            };
        });
        $('#payTypeTabId').click(function () {
            $('#Discount').hide();
            $('#PayType').show();
            $('#Tax').hide();
            $('#Unit').hide();
            $('#Term').hide();
            $('#Employee').hide();
            $('#ArticleGroup').hide();
            $('#OtherArticle').hide();
            $('#AccountType').hide();
            payTypeTab();
            window.payTypeTab = function () {
                return true;
            };
        });
        $('#taxTabId').click(function () {
            $('#Discount').hide();
            $('#PayType').hide();
            $('#Tax').show();
            $('#Unit').hide();
            $('#Term').hide();
            $('#Employee').hide();
            $('#ArticleGroup').hide();
            $('#OtherArticle').hide();
            $('#AccountType').hide();
            taxTab();
            window.taxTab = function () {
                return true;
            };
        });
        $('#unitTabId').click(function () {
            $('#Discount').hide();
            $('#PayType').hide();
            $('#Tax').hide();
            $('#Unit').show();
            $('#Term').hide();
            $('#Employee').hide();
            $('#ArticleGroup').hide();
            $('#OtherArticle').hide();
            $('#AccountType').hide();
            unitTab();
            window.unitTab = function () {
                return true;
            };
        });
        $('#termTabId').click(function () {
            $('#Discount').hide();
            $('#PayType').hide();
            $('#Tax').hide();
            $('#Unit').hide();
            $('#Term').show();
            $('#Employee').hide();
            $('#ArticleGroup').hide();
            $('#OtherArticle').hide();
            $('#AccountType').hide();
            termTab();
            window.termTab = function () {
                return true;
            };
        });
        $('#employeeTabId').click(function () {
            $('#Discount').hide();
            $('#PayType').hide();
            $('#Tax').hide();
            $('#Unit').hide();
            $('#Term').hide();
            $('#Employee').show();
            $('#ArticleGroup').hide();
            $('#OtherArticle').hide();
            $('#AccountType').hide();
            employeeTab();
            window.employeeTab = function () {
                return true;
            };
        });
        $('#articleGroupTabId').click(function () {
            $('#Discount').hide();
            $('#PayType').hide();
            $('#Tax').hide();
            $('#Unit').hide();
            $('#Term').hide();
            $('#Employee').hide();
            $('#ArticleGroup').show();
            $('#OtherArticle').hide();
            $('#AccountType').hide();
            articleGroupTab();
            window.articleGroupTab = function () {
                return true;
            };
        });
        $('#otherArticleTabId').click(function () {
            $('#Discount').hide();
            $('#PayType').hide();
            $('#Tax').hide();
            $('#Unit').hide();
            $('#Term').hide();
            $('#Employee').hide();
            $('#ArticleGroup').hide();
            $('#OtherArticle').show();
            $('#AccountType').hide();
            otherArticleTab();
            window.otherArticleTab = function () {
                return true;
            };
        });
        $('#accountTypeTabId').click(function () {
            $('#Discount').hide();
            $('#PayType').hide();
            $('#Tax').hide();
            $('#Unit').hide();
            $('#Term').hide();
            $('#Employee').hide();
            $('#ArticleGroup').hide();
            $('#OtherArticle').hide();
            $('#AccountType').show();
            accountTypeTab();
            window.accountTypeTab = function () {
                return true;
            };
        });

        $(document).ready(function () {
            // Discount Lock - IsLocked
            $('#discount_Lock').click(function () {
                if ($(this).is(':checked')) {
                    document.getElementById('discount_Discount').disabled = true;
                    document.getElementById('discount_DiscountRate').disabled = true;
                    document.getElementById('discount_VATInclusive').disabled = true;
                    document.getElementById('discountLockAndUnLock').innerHTML = "<i class='fa fa-lock'></i>";
                    getDiscountAccountForComboBox();
                } else {
                    document.getElementById('discount_Discount').disabled = false;
                    document.getElementById('discount_DiscountRate').disabled = false;
                    document.getElementById('discount_VATInclusive').disabled = false;
                    document.getElementById('discountLockAndUnLock').innerHTML = "<i class='fa fa-unlock'></i>";
                    getDiscountAccountForComboBox();
                }
            });

            // payType Lock - IsLocked
            $('#payType_Lock').click(function () {
                if ($(this).is(':checked')) {
                    document.getElementById('payType_PayType').disabled = true;
                    document.getElementById('payTypeLockAndUnLock').innerHTML = "<i class='fa fa-lock'></i>";
                    getPayTypeAccountForComboBox();
                } else {
                    document.getElementById('payType_PayType').disabled = false;
                    document.getElementById('payTypeLockAndUnLock').innerHTML = "<i class='fa fa-unlock'></i>";
                    getPayTypeAccountForComboBox();
                }
            });

            // taxType Lock - IsLocked
            $('#taxType_Lock').click(function () {
                if ($(this).is(':checked')) {
                    document.getElementById('taxType_TaxType').disabled = true;
                    document.getElementById('taxType_TaxRate').disabled = true;
                    document.getElementById('taxType_TaxVATInclusive').disabled = true;
                    document.getElementById('taxTypeLockAndUnLock').innerHTML = "<i class='fa fa-lock'></i>";
                    getTaxAccountForComboBox();
                } else {
                    document.getElementById('taxType_TaxType').disabled = false;
                    document.getElementById('taxType_TaxRate').disabled = false;
                    document.getElementById('taxType_TaxVATInclusive').disabled = false;
                    document.getElementById('taxTypeLockAndUnLock').innerHTML = "<i class='fa fa-unlock'></i>";
                    getTaxAccountForComboBox();
                }
            });

            // Unit Lock - IsLocked
            $('#unit_Lock').click(function () {
                if ($(this).is(':checked')) {
                    document.getElementById('unit_Unit').disabled = true;
                    document.getElementById('unitLockAndUnLock').innerHTML = "<i class='fa fa-lock'></i>";
                } else {
                    document.getElementById('unit_Unit').disabled = false;
                    document.getElementById('unitLockAndUnLock').innerHTML = "<i class='fa fa-unlock'></i>";
                }
            });

            // term Lock - IsLocked
            $('#term_Lock').click(function () {
                if ($(this).is(':checked')) {
                    document.getElementById('term_Term').disabled = true;
                    document.getElementById('term_NoOfDays').disabled = true;
                    document.getElementById('termLockAndUnLock').innerHTML = "<i class='fa fa-lock'></i>";
                } else {
                    document.getElementById('term_Term').disabled = false;
                    document.getElementById('term_NoOfDays').disabled = false;
                    document.getElementById('termLockAndUnLock').innerHTML = "<i class='fa fa-unlock'></i>";
                }
            });

            // employee Lock - IsLocked
            $('#employee_Lock').click(function () {
                if ($(this).is(':checked')) {
                    document.getElementById('employee_Employee').disabled = true;
                    document.getElementById('employee_Address').disabled = true;
                    document.getElementById('employee_ContactNumber').disabled = true;
                    document.getElementById('employeeLockAndUnLock').innerHTML = "<i class='fa fa-lock'></i>";
                    getEmployeeAccountForComboBox();
                } else {
                    document.getElementById('employee_Employee').disabled = false;
                    document.getElementById('employee_Address').disabled = false;
                    document.getElementById('employee_ContactNumber').disabled = false;
                    document.getElementById('employeeLockAndUnLock').innerHTML = "<i class='fa fa-unlock'></i>";
                    getEmployeeAccountForComboBox();
                }
            });

            // article Group - IsLocked
            $('#articleGroup_Lock').click(function () {
                if ($(this).is(':checked')) {
                    document.getElementById('articleGroup_ArticleGroup').disabled = true;
                    document.getElementById('articleGroupLockAndUnLock').innerHTML = "<i class='fa fa-lock'></i>";
                    getArticleType();
                    getArticleGroupAccount();
                } else {
                    document.getElementById('articleGroup_ArticleGroup').disabled = false;
                    document.getElementById('articleGroupLockAndUnLock').innerHTML = "<i class='fa fa-unlock'></i>";
                    getArticleType();
                    getArticleGroupAccount();
                }
            });

            // article Lock - IsLocked
            $('#article_Lock').click(function () {
                if ($(this).is(':checked')) {
                    document.getElementById('article_Article').disabled = true;
                    document.getElementById('article_Address').disabled = true;
                    document.getElementById('article_ContactNumber').disabled = true;
                    document.getElementById('articleLockAndUnLock').innerHTML = "<i class='fa fa-lock'></i>";
                    getArticleAccountForComboBox();
                } else {
                    document.getElementById('article_Article').disabled = false;
                    document.getElementById('article_Address').disabled = false;
                    document.getElementById('article_ContactNumber').disabled = false;
                    document.getElementById('articleLockAndUnLock').innerHTML = "<i class='fa fa-unlock'></i>";
                    getArticleAccountForComboBox();
                }
            });

            $('#Discount').show();
            $('#PayType').hide();
            $('#Tax').hide();
            $('#Unit').hide();
            $('#Term').hide();
            $('#Employee').hide();
            $('#ArticleGroup').hide();
            $('#OtherArticle').hide();
            $('#AccountType').hide();

            discountTab();
        });
    </script>
</body>
</html>