@model easyfis.Entities.MstUserForm
@{
    // =====================
    // User Rights Variables
    // =====================
    var canAdd = Model.CanAdd;
    var canEdit = Model.CanEdit;
    var canDelete = Model.CanDelete;
    var canLock = Model.CanLock;
    var canUnlock = Model.CanUnlock;
    var canPrint = Model.CanPrint;
}
<!DOCTYPE html>
<html>
<head>
    <!-- Meta -->
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">

    <!-- Title of the Page -->
    <link rel="shortcut icon" href="~/Images/icon/easyfislogomini.ico">
    <title>Collection Detail</title>

    <!-- CSS StyleSheets-->
    @Styles.Render("~/Content/Software-css")
</head>
<body>
    <div id="o-wrapper" class="o-wrapper">
        <main class="o-content">
            @Html.Partial("_SoftwareHeader")
            <section class="content-header">
                <div class="container">
                    <h3>
                        Collection Detail
                    </h3>
                    <p>
                        <i class="fa fa-building-o fa-fw"></i> &nbsp; @ViewData["Company"] <br />
                        <i class="fa fa-home fa-fw"></i> &nbsp; <a href="#" onclick="getUserBranches()" style="color: white;">@ViewData["Branch"]</a>
                    </p>
                </div>
            </section>
            <section class="container">
                <div class="panel panel-default">
                    <div class="panel-heading">
                        <div class="row">
                            <div class="col-md-12" align="right">
                                <button class="btn btn-primary" id="btnJournalCollection" onclick="btnJournalCollectionOnclick()"><i class="fa fa-book"></i> Journal</button>
                                @{
                                    if (canLock)
                                    {
                                        <button class="btn btn-primary" id="btnLockCollection" onclick="btnLockCollectionOnclick()"><i class="fa fa-lock"></i> Lock</button>
                                    }
                                    if (canUnlock)
                                    {
                                        <button class="btn btn-primary" id="btnUnlockCollection" onclick="btnUnlockCollectionOnclick()"><i class="fa fa-unlock"></i> Unlock</button>
                                    }
                                    if (canPrint)
                                    {
                                        <button class="btn btn-primary" id="btnPrintCollection" onclick="btnPrintCollectionOnclick()"><i class="fa fa-print"></i> Print</button>
                                    }
                                }
                                <button class="btn btn-danger" id="btnCloseCollection" onclick="window.location.href = '/Software/Collection'"><i class="fa fa-times"></i> Close</button>
                            </div>
                        </div>
                    </div>
                    <div class="panel-body">
                        <form class="form-horizontal" role="form">
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Branch</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboORBranch"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">OR Number</label>
                                        <div class="col-sm-8">
                                            <input type="text" class="form-control requiredCollection" id="collection_ORNumber" disabled />
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">OR Date</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboORDate"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Manual OR Number</label>
                                        <div class="col-sm-8">
                                            <input type="text" class="form-control requiredCollection" id="collection_ManualORNumber" placeholder="Manual OR Number" />
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Customer</label>
                                        <div class="col-sm-8">
                                            <div class="input-group">
                                                <div class="comboBox-wide" id="cboORCustomer"></div>
                                                <div class="input-group-btn">
                                                    <button type="button" class=" btn btn-primary" id="cmdAR" onclick="collectionAR_OnClick()">AR</button>
                                                    <button type="button" class="btn btn-primary" id="cmdAdvances" onclick="collectionAdvances_OnClick()">Advances</button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Particulars</label>
                                        <div class="col-sm-8">
                                            <textarea rows="5" class="form-control textarea-custom requiredCollection" id="collection_Particulars" placeholder="Particulars"></textarea>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Prepared by</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboORPreparedBy"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Checked by</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboORCheckedBy"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Approved by</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboORApprovedBy"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
                <ul class="nav nav-tabs" role="tablist" id="myTab">
                    <li role="presentation" class="active"><a data-toggle="tab" href="#CollectionLine" id="itemTabId">Collection Line</a></li>
                </ul>
                <br />
                <div class="tab-content">
                    <div id="CollectionLine" class="tab-pane fade in active">
                        <div class="panel panel-default">
                            <div class="panel-heading">
                                <table style="width: 100%" border="0">
                                    <tr>
                                        <td style="width: 49.5%">
                                            <div class="input-group">
                                                <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                                <input type="text" class="form-control " id="CollectionLineInputFilter" placeholder="Search...">
                                            </div>
                                        </td>
                                        <td style="width: 1%"></td>
                                        <td style="width: 24%">
                                            <div class="input-group">
                                                <span class="input-group-addon"><b><i class="fa fa-table"></i></b></span>
                                                <div class="comboBox-wide" id="cboCollectionLineShowNumberOfRows"></div>
                                            </div>
                                        </td>
                                        <td style="width: 1%"></td>
                                        <td style="width: 24.5%" align="right">
                                            @{
                                                if (canAdd)
                                                {
                                                    <button class="btn btn-primary" id="btnAddCollectionLine" onclick="cmdAddCollectionLineButton_OnClick()"><i class="fa fa-plus"></i> Add</button>
                                                }
                                            }
                                        </td>
                                    </tr>
                                </table>
                            </div>
                            <div class="panel-body">
                                <div id="CollectionLineGrid"></div>
                            </div>
                            <div class="panel-footer">
                                <div class="row">
                                    <div class="btn-group col-md-7" id="naviagtionPageGrid">
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToFirstPageGrid">
                                            <span class="glyphicon glyphicon-fast-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToPreviousPageGrid">
                                            <span class="glyphicon glyphicon-step-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnCurrentPageGrid"></button>
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToNextPageGrid">
                                            <span class="glyphicon glyphicon-step-forward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToLastPageGrid">
                                            <span class="glyphicon glyphicon-fast-forward"></span>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="panel panel-default">
                            <div class="panel-body" style="padding-bottom: 0px;">
                                <div class="row">
                                    <div class="col-md-6">

                                    </div>
                                    <div class="col-md-6">
                                        <dl class="dl-horizontal">
                                            <dt>
                                                <b>Total Amount</b>
                                            </dt>
                                            <dd>
                                                <input type="text" class="form-control numberField" id="totalORAmount" placeholder="0.00" disabled />
                                            </dd>
                                        </dl>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="panel panel-default">
                    <div class="panel-heading">
                        User stamp
                    </div>
                    <div class="panel-body">
                        <div class="row">
                            <div class="col-md-6">
                                <p>Created by:</p>
                                <div style="padding-left: 10px;">
                                    <i class="fa fa-key fa-fw"></i> <label id="createdBy">NA</label>
                                    <br />
                                    <small><i class="fa fa-calendar fa-fw"></i> &nbsp;<span id="createdDate">mm/dd/yyyy</span></small>
                                </div>
                                <br />
                            </div>
                            <div class="col-md-6">
                                <p>Updated by:</p>
                                <div style="padding-left: 10px;">
                                    <i class="fa fa-key fa-fw"></i> <label id="updatedBy">NA</label>
                                    <br />
                                    <small><i class="fa fa-calendar fa-fw"></i> &nbsp;<span id="updatedDate">mm/dd/yyyy</span></small>
                                </div>
                                <br />
                            </div>
                        </div>
                    </div>
                </div>
            </section>
            @Html.Partial("_SoftwareFooter")
        </main>
    </div>
    <div id="c-mask" class="c-mask"></div>

    <!-- Collection Line Edit Detail -->
    <div class="modal fade" id="collectionLineEdit" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="collectionLineModalLabel">Collection Line</h4>
                </div>
                <div class="modal-body">
                    <form id="collectionLineDetailForm">
                        <dl class="dl-horizontal">
                            <dt>Branch</dt>
                            <dd><div class="comboBox-wide" id="cboCollectionLineBranch"></div></dd>
                            <dt>Account</dt>
                            <dd>
                                <table style="width: 100%" border="0">
                                    <tr>
                                        <td style="width: 30%">
                                            <div class="comboBox-wide" id="cboCollectionLineAccountCode"></div>
                                        </td>
                                        <td style="width: 1%"></td>
                                        <td style="width: 69%">
                                            <div class="comboBox-wide" id="cboCollectionLineAccount"></div>
                                        </td>
                                    </tr>
                                </table>
                            </dd>
                            <dt>Article</dt>
                            <dd><div class="comboBox-wide" id="cboCollectionLineArticle"></div></dd>
                            <dt>SI No.</dt>
                            <dd><div class="comboBox-wide" id="cboCollectionLineSINumber"></div></dd>
                            <dt>Particulars</dt>
                            <dd><textarea rows="5" class="form-control textarea-custom requiredCollectionLine" id="collectionLine_Particulars" placeholder="Particulars"></textarea></dd>
                            <dt>Amount</dt>
                            <dd><input class="form-control  numberField  requiredCollectionLine" id="collectionLine_amount" placeholder="0.00" /></dd>
                            <dt>Pay Type</dt>
                            <dd><div class="comboBox-wide" id="cboCollectionLinePayType"></div></dd>
                            <dt>Check No.</dt>
                            <dd><input type="text" class="form-control  requiredCollectionLine" id="collectionLine_checkNo" /></dd>
                            <dt>Check Date</dt>
                            <dd><div class="" id="cboCheckDate"></div></dd>
                            <dt>Check Bank</dt>
                            <dd><input type="text" class="form-control  requiredCollectionLine" id="collectionLine_checkBank" placeholder="Check Bank" /></dd>
                            <dt>Depository Bank</dt>
                            <dd><div class="comboBox-wide" id="cboCollectionLineDepositoryBank"></div></dd>
                            <dt>Is Clear</dt>
                            <dd><input type="checkbox" id="collectionLine_Clear" /></dd>
                        </dl>
                    </form>
                </div>
                <div class="modal-footer">
                    <button id="cmdSaveCollectionLineButton" class="btn btn-primary" onclick="cmdCollectionLineSaveButton_OnClick()"><i class="fa fa-save"></i> Save</button>
                    <button id="cmdCollectionLineDetailCloseButton" class="btn btn-danger" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Collection Line Delete Modal Confirmation -->
    <div class="modal fade" id="deleteCollectionLineConfirm" role="dialog">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Delete</h4>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete this collection line?
                </div>
                <div class="modal-footer">
                    <button id="cmdConfirmDeleteCollectionLine" class="btn btn-danger" onclick="cmdCollectionLineConfirmDeleteButton_OnClick()"><i class="fa fa-trash"></i> Delete</button>
                    <button id="cmdConfirmDeleteCollectionLineCloseButton" class="btn btn-primary " data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Journal -->
    <div class="modal fade" id="journalDetail" role="dialog">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="journalModalLabel"> Journal</h4>
                </div>
                <div class="modal-body">
                    <center>
                        <span id="loadingJournalGridList"></span>
                    </center>
                    <div id="journal_Content">
                        <div id="journalFlexGrid" style="max-height: 250px;"></div>
                        <br /><br />
                        <div class="row">
                            <div class="col-md-7"></div>
                            <div class="col-md-5">
                                <dl class="dl-horizontal">
                                    <dt>
                                        <b>Total Debit</b>
                                    </dt>
                                    <dd>
                                        <input type="text" class="form-control  numberField  requiredStockTransferItem" id="totalDebitInJournal" placeholder="0.00" disabled />
                                    </dd>
                                    <dt>
                                        <b>Total Credit</b>
                                    </dt>
                                    <dd>
                                        <input type="text" class="form-control  numberField  requiredStockTransferItem" id="totalCreditInJournal" placeholder="0.00" disabled />
                                    </dd>
                                    <dt>
                                        <b>Variance</b>
                                    </dt>
                                    <dd>
                                        <input type="text" class="form-control  numberField  requiredStockTransferItem" id="variance" placeholder="0.00" disabled />
                                    </dd>
                                </dl>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button id="cmdJournalDetailCloseButton" class="btn btn-danger" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!--SI Status -->
    <div class="modal fade" id="SalesStatus" role="dialog">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="">Sales Invoice Status</h4>
                </div>
                <div class="modal-body">
                    <ul class="nav nav-tabs" role="tablist" id="myTab">
                        <li role="presentation" class="active"><a data-toggle="tab" href="#SIStatussalesInvoice" id="SIStatussalesInvoicetab">Sales Invoice - Customer</a></li>
                        <li role="presentation"><a data-toggle="tab" href="#SIStatussalesInvoiceBranch" id="SIStatussalesInvoiceBranchtab">Sales Invoice - Branch</a></li>
                        <li role="presentation"><a data-toggle="tab" href="#SIStatuspayType" id="SIStatuspayTypestatusTab">Pay Type</a></li>
                    </ul>
                    <br />
                    <div class="tab-content">
                        <div id="SIStatussalesInvoice" class="tab-pane active">
                            <div class="panel panel-default">
                                <div class="panel-heading">
                                    <table style="width: 100%" border="0">
                                        <tr>
                                            <td style="width: 40%">
                                                <div class="input-group">
                                                    <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                                    <input type="text" class="form-control " id="SIStatusFilter" placeholder="Search">
                                                </div>
                                            </td>
                                            <td style="width: 1%"></td>
                                            <td style="width: 29%">
                                                <div class="input-group ">
                                                    <span class="input-group-addon"><b>Start Date</b></span>
                                                    <div id="cboStartDateSIFilter"></div>
                                                </div>
                                            </td>
                                            <td style="width: 1%"></td>
                                            <td style="width: 29%">
                                                <div class="input-group ">
                                                    <span class="input-group-addon"><b>End Date</b></span>
                                                    <div id="cboEndDateSIFilter"></div>
                                                </div>
                                            </td>
                                        </tr>
                                    </table>
                                </div>
                                <div class="panel-body">
                                    <center>
                                        <span id="loadingSIStatus"></span>
                                    </center>
                                    <div id="statusGrid">
                                        <div id="salesInvoiceStatusGrid"></div>
                                    </div>
                                </div>
                                <div class="panel-footer">
                                    <div class="row">
                                        <div class="btn-group col-md-7" id="naviagtionPageGridSIStatus">
                                            <button type="button" class="btn btn-default border-custom" id="btnMoveToFirstPageGridSIStatus">
                                                <span class="glyphicon glyphicon-fast-backward"></span>
                                            </button>
                                            <button type="button" class="btn btn-default border-custom" id="btnMoveToPreviousPageGridSIStatus">
                                                <span class="glyphicon glyphicon-step-backward"></span>
                                            </button>
                                            <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnCurrentPageGridSIStatus"></button>
                                            <button type="button" class="btn btn-default border-custom" id="btnMoveToNextPageGridSIStatus">
                                                <span class="glyphicon glyphicon-step-forward"></span>
                                            </button>
                                            <button type="button" class="btn btn-default border-custom" id="btnMoveToLastPageGridSIStatus">
                                                <span class="glyphicon glyphicon-fast-forward"></span>
                                            </button>
                                        </div>
                                        <div class="col-md-1"></div>
                                        <div class="col-md-4">

                                            <div class="input-group">
                                                <span class="input-group-addon"><b>Total Amount</b></span>
                                                <input type="text" class="form-control numberField" id="totalSIAmount" placeholder="0.00" disabled>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div id="SIStatussalesInvoiceBranch" class="tab-pane">
                            <div class="panel panel-default">
                                <div class="panel-heading">
                                    <table style="width: 100%" border="0">
                                        <tr>
                                            <td style="width: 40%">
                                                <div class="input-group">
                                                    <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                                    <input type="text" class="form-control " id="SIStatusFilterBranch" placeholder="Search">
                                                </div>
                                            </td>
                                            <td style="width: 1%"></td>
                                            <td style="width: 29%">
                                                <div class="input-group ">
                                                    <span class="input-group-addon"><b>Start Date</b></span>
                                                    <div id="cboStartDateSIFilterBranch"></div>
                                                </div>
                                            </td>
                                            <td style="width: 1%"></td>
                                            <td style="width: 29%">
                                                <div class="input-group ">
                                                    <span class="input-group-addon"><b>End Date</b></span>
                                                    <div id="cboEndDateSIFilterBranch"></div>
                                                </div>
                                            </td>
                                        </tr>
                                    </table>
                                </div>
                                <div class="panel-body">
                                    <center>
                                        <span id="loadingSIStatusBranch"></span>
                                    </center>
                                    <div id="statusGridBranch">
                                        <div id="salesInvoiceStatusGridBranch"></div>
                                    </div>
                                </div>
                                <div class="panel-footer">
                                    <div class="row">
                                        <div class="btn-group col-md-7" id="naviagtionPageGridSIStatusBranch">
                                            <button type="button" class="btn btn-default border-custom" id="btnMoveToFirstPageGridSIStatusBranch">
                                                <span class="glyphicon glyphicon-fast-backward"></span>
                                            </button>
                                            <button type="button" class="btn btn-default border-custom" id="btnMoveToPreviousPageGridSIStatusBranch">
                                                <span class="glyphicon glyphicon-step-backward"></span>
                                            </button>
                                            <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnCurrentPageGridSIStatusBranch"></button>
                                            <button type="button" class="btn btn-default border-custom" id="btnMoveToNextPageGridSIStatusBranch">
                                                <span class="glyphicon glyphicon-step-forward"></span>
                                            </button>
                                            <button type="button" class="btn btn-default border-custom" id="btnMoveToLastPageGridSIStatusBranch">
                                                <span class="glyphicon glyphicon-fast-forward"></span>
                                            </button>
                                        </div>
                                        <div class="col-md-1"></div>
                                        <div class="col-md-4">
                                            <div class="input-group">
                                                <span class="input-group-addon"><b>Total Amount</b></span>
                                                <input type="text" class="form-control numberField" id="totalSIAmountBranch" placeholder="0.00" disabled>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div id="SIStatuspayType" class="tab-pane">
                            <div class="row">
                                <div class="col-md-6">
                                    <form id="collectionLineDetailForm">
                                        <dl class="dl-horizontal">
                                            <dt>Pay Type</dt>
                                            <dd><div class="comboBox-wide" id="cboSIStatusPayType"></div></dd>
                                            <dt>Check No.</dt>
                                            <dd><input type="text" class="form-control requiredSIStatus" id="SIStatus_checkNo" /></dd>
                                            <dt>Check Date</dt>
                                            <dd><div class="" id="cboSIStatusCheckDate"></div></dd>
                                            <dt>Check Bank</dt>
                                            <dd><input type="text" class="form-control  requiredSIStatus" id="SIStatus_checkBank" placeholder="Check Bank" /></dd>
                                            <dt>Depository Bank</dt>
                                            <dd><div class="comboBox-wide" id="cboSIStatusDepositoryBank"></div></dd>
                                            <dt>Is Clear</dt>
                                            <dd><input type="checkbox" id="SIStatus_Clear" /></dd>
                                        </dl>
                                    </form>
                                </div>
                                <div class="col-md-6">

                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" id="btnIdApplyAllSI" onclick="btnOnclickApplyAllSI()"><i class="fa fa-check"></i> Apply</button>
                    <button class="btn btn-danger" id="cmdPOStatusCloseButton" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- SI apply all amount -->
    <div class="modal fade" id="applyAllAmount" role="dialog">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Apply</h4>
                </div>
                <div class="modal-body">
                    Are you sure that you want to apply all picked amount?
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" id="cmdConfirmApplyAllAmount" onclick="btnConfrimApplyAllAmount_OnClick()"><i class="fa fa-check"></i> Apply</button>
                    <button class="btn btn-danger" id="cmdCloseButtonApplyAllAmount" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <!-- customer Advances for Collection Modal -->
    <div class="modal fade" id="customerAdvances" role="dialog">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="POStatusModalLabel">Customer Advances</h4>
                </div>
                <div class="modal-body">
                    <center>
                        <span id="loadingSIAdvances"></span>
                    </center>
                    <div id="AdvancesGrid">
                        <div class="panel panel-default">
                            <div class="panel-heading">
                                <div class="input-group  ">
                                    <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                    <input type="text" class="form-control" id="SIAdvancesFilter" placeholder="Search">
                                </div>
                            </div>
                            <div class="panel-body">
                                <div id="SIAdvancesGrid"></div>
                            </div>
                            <div class="panel-footer">
                                <div class="row">
                                    <div class="btn-group col-md-7" id="naviagtionPageGridSIAdvances">
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToFirstPageGridSIAdvances">
                                            <span class="glyphicon glyphicon-fast-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToPreviousPageGridSIAdvances">
                                            <span class="glyphicon glyphicon-step-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnCurrentPageGridSIAdvances"></button>
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToNextPageGridSIAdvances">
                                            <span class="glyphicon glyphicon-step-forward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToLastPageGridSIAdvances">
                                            <span class="glyphicon glyphicon-fast-forward"></span>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" id="cmdPOStatusCloseButton" class="btn btn-danger" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- collection apply advances -->
    <div class="modal fade" id="applyAdvances" role="dialog">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Apply</h4>
                </div>
                <div class="modal-body">
                    Are you sure that you want to apply these advances?
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" id="cmdConfirmApplyAdvances" onclick="btnConfrimApplyAdvances_OnClick()"><i class="fa fa-check-square-o"></i> Apply</button>
                    <button class="btn btn-danger" id="cmdCloseButtonApplyAdvances" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <!-- RR Picked Amount -->
    <div class="modal fade" id="pickBalanceAmountModal" role="dialog">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Pick</h4>
                </div>
                <div class="modal-body">
                    <form id="collectionLineDetailForm">
                        <dl class="">
                            <dt>Amount</dt>
                            <dd><input class="form-control  numberField  requiredPickedAmount" id="pickAmount" placeholder="0.00" /></dd>
                        </dl>
                    </form>
                </div>
                <div class="modal-footer">
                    <button id="savePickAmount" class="btn btn-primary" onclick="btnSavePickAmountOnclick()"><i class="fa fa-arrow-right"></i> Continue</button>
                    <button id="closePickAmountModal" class="btn btn-danger" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- RR Picked Amount -->
    <div class="modal fade" id="pickBalanceAmountModalBranch" role="dialog">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Pick</h4>
                </div>
                <div class="modal-body">
                    <form id="collectionLineDetailForm">
                        <dl class="">
                            <dt>Amount</dt>
                            <dd><input class="form-control  numberField  requiredPickedAmountBranch" id="pickAmountBranch" placeholder="0.00" /></dd>
                        </dl>
                    </form>
                </div>
                <div class="modal-footer">
                    <button id="savePickAmountBranch" class="btn btn-primary" onclick="btnSavePickAmountBranchOnclick()"><i class="fa fa-arrow-right"></i> Continue</button>
                    <button id="closePickAmountModalBranch" class="btn btn-danger" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    @Scripts.Render("~/Scripts/Software-js")
    <script type="text/javascript">
        // ================
        // Global Variables
        // ================
        var cboORBranch = new wijmo.input.ComboBox('#cboORBranch');
        var cboORCustomer = new wijmo.input.ComboBox('#cboORCustomer');
        var cboORDate = new wijmo.input.InputDate('#cboORDate');
        var cboORPreparedBy = new wijmo.input.ComboBox('#cboORPreparedBy');
        var cboORCheckedBy = new wijmo.input.ComboBox('#cboORCheckedBy');
        var cboORApprovedBy = new wijmo.input.ComboBox('#cboORApprovedBy');
        var isLocked = false;
        var collectionLineId = 0;
        var cboCollectionLineBranch = new wijmo.input.ComboBox('#cboCollectionLineBranch');
        var cboCollectionLineAccountCode = new wijmo.input.ComboBox('#cboCollectionLineAccountCode');
        var cboCollectionLineAccount = new wijmo.input.ComboBox('#cboCollectionLineAccount');
        var cboCollectionLineArticle = new wijmo.input.ComboBox('#cboCollectionLineArticle');
        var cboCollectionLineSINumber = new wijmo.input.ComboBox('#cboCollectionLineSINumber');
        var cboCollectionLinePayType = new wijmo.input.ComboBox('#cboCollectionLinePayType');
        var cboCheckDate = new wijmo.input.InputDate('#cboCheckDate');
        var cboCollectionLineDepositoryBank = new wijmo.input.ComboBox('#cboCollectionLineDepositoryBank');
        var IsAccountChanged = false;
        var journalCollectionView;
        var journalFlexGrid = new wijmo.grid.FlexGrid('#journalFlexGrid');
        var saleInvoiceStatus;
        var SIStatusGrid = new wijmo.grid.FlexGrid('#salesInvoiceStatusGrid');
        var SIAdvances;
        var SIAdvancesGrid = new wijmo.grid.FlexGrid('#SIAdvancesGrid');
        var cboCollectionLineShowNumberOfRows = new wijmo.input.ComboBox('#cboCollectionLineShowNumberOfRows');
        var btnFirstPageGrid = document.getElementById('btnMoveToFirstPageGrid');
        var btnPreviousPageGrid = document.getElementById('btnMoveToPreviousPageGrid');
        var btnNextPageGrid = document.getElementById('btnMoveToNextPageGrid');
        var btnLastPageGrid = document.getElementById('btnMoveToLastPageGrid');
        var btnCurrentPageGrid = document.getElementById('btnCurrentPageGrid');
        var btnFirstPageGridSIStatus = document.getElementById('btnMoveToFirstPageGridSIStatus');
        var btnPreviousPageGridSIStatus = document.getElementById('btnMoveToPreviousPageGridSIStatus');
        var btnNextPageGridSIStatus = document.getElementById('btnMoveToNextPageGridSIStatus');
        var btnLastPageGridSIStatus = document.getElementById('btnMoveToLastPageGridSIStatus');
        var btnCurrentPageGridSIStatus = document.getElementById('btnCurrentPageGridSIStatus');
        var btnFirstPageGridSIAdvances = document.getElementById('btnMoveToFirstPageGridSIAdvances');
        var btnPreviousPageGridSIAdvances = document.getElementById('btnMoveToPreviousPageGridSIAdvances');
        var btnNextPageGridSIAdvances = document.getElementById('btnMoveToNextPageGridSIAdvances');
        var btnLastPageGridSIAdvances = document.getElementById('btnMoveToLastPageGridSIAdvances');
        var btnCurrentPageGridSIAdvances = document.getElementById('btnCurrentPageGridSIAdvances');
        var cboStartDateSIFilter = new wijmo.input.InputDate('#cboStartDateSIFilter');
        var cboEndDateSIFilter = new wijmo.input.InputDate('#cboEndDateSIFilter');
        var isStartDateSIFirstSelect = true;
        var isEndDateSIFirstSelect = true;
        var currentSIStatusPageIndex = 0;
        var currentSIStatusPageIndexBranch = 0;
        var cboSIStatusPayType = new wijmo.input.ComboBox('#cboSIStatusPayType');
        var cboSIStatusCheckDate = new wijmo.input.InputDate('#cboSIStatusCheckDate');
        var cboSIStatusDepositoryBank = new wijmo.input.ComboBox('#cboSIStatusDepositoryBank');
        var isARPayTypeClicked = false;
        var cboStartDateSIFilterBranch = new wijmo.input.InputDate('#cboStartDateSIFilterBranch');
        var cboEndDateSIFilterBranch = new wijmo.input.InputDate('#cboEndDateSIFilterBranch');
        var isStartDateSIFirstSelectBranch = true;
        var isEndDateSIFirstSelectBranch = true;
        var isSIStatusCustomerSelected = true;
        var isSIStatusBranchSelected = false;
        var saleInvoiceStatusBranch;
        var SIStatusGridBranch = new wijmo.grid.FlexGrid('#salesInvoiceStatusGridBranch');
        var btnFirstPageGridSIStatusBranch = document.getElementById('btnMoveToFirstPageGridSIStatusBranch');
        var btnPreviousPageGridSIStatusBranch = document.getElementById('btnMoveToPreviousPageGridSIStatusBranch');
        var btnNextPageGridSIStatusBranch = document.getElementById('btnMoveToNextPageGridSIStatusBranch');
        var btnLastPageGridSIStatusBranch = document.getElementById('btnMoveToLastPageGridSIStatusBranch');
        var btnCurrentPageGridSIStatusBranch = document.getElementById('btnCurrentPageGridSIStatusBranch');
        var isARClicked = false;
        var isARClickedBranch = false;

        // =======================
        // Get URL Parameter Value
        // =======================
        function getParam(name) {
            name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");

            var regexS = "[\\?&]" + name + "=([^&#]*)";
            var regex = new RegExp(regexS);

            var results = regex.exec(window.location.href);
            if (results == null) {
                return "";
            } else {
                return results[1];
            }
        }

        // ========================
        // GET Branch for Combo Box
        // ========================
        function getBranchesForComboBox() {
            var branchesObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/collection/dropdown/list/branch',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            branchesObservableArray.push({
                                Id: results[i]["Id"],
                                Branch: results[i]["Branch"]
                            });
                        }
                    }

                    cboORBranch.dispose();
                    cboORBranch = new wijmo.input.ComboBox('#cboORBranch', {
                        disabled: true,
                        isEditable: false,
                        placeholder: "Select Branch",
                        itemsSource: branchesObservableArray,
                        displayMemberPath: "Branch",
                        selectedValuePath: "Id"
                    });

                    getCustomerForComboBox();
                }
            });
        }

        // ==========================
        // GET Customer for Combo Box
        // ==========================
        function getCustomerForComboBox() {
            var customersObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/collection/dropdown/list/customer',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            customersObservableArray.push({
                                Id: results[i]["Id"],
                                Customer: results[i]["Article"]
                            });
                        }
                    }

                    cboORCustomer.dispose();
                    cboORCustomer = new wijmo.input.ComboBox('#cboORCustomer', {
                        isEditable: false,
                        placeholder: "Select Customer",
                        itemsSource: customersObservableArray,
                        displayMemberPath: "Customer",
                        selectedValuePath: "Id"
                    });

                    getUsersForComboBox();
                }
            });
        }

        // =======================
        // GET Users for Combo Box
        // =======================
        function getUsersForComboBox() {
            var usersObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/collection/dropdown/list/users',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            usersObservableArray.push({
                                Id: results[i]["Id"],
                                FullName: results[i]["FullName"]
                            });
                        }
                    }

                    cboORPreparedBy.dispose();
                    cboORPreparedBy = new wijmo.input.ComboBox('#cboORPreparedBy', {
                        disabled: true,
                        isEditable: false,
                        placeholder: "Select User",
                        itemsSource: usersObservableArray,
                        displayMemberPath: "FullName",
                        selectedValuePath: "Id"
                    });

                    cboORCheckedBy.dispose();
                    cboORCheckedBy = new wijmo.input.ComboBox('#cboORCheckedBy', {
                        isEditable: false,
                        placeholder: "Select User",
                        itemsSource: usersObservableArray,
                        displayMemberPath: "FullName",
                        selectedValuePath: "Id"
                    });

                    cboORApprovedBy.dispose();
                    cboORApprovedBy = new wijmo.input.ComboBox('#cboORApprovedBy', {
                        isEditable: false,
                        placeholder: "Select User",
                        itemsSource: usersObservableArray,
                        displayMemberPath: "FullName",
                        selectedValuePath: "Id"
                    });

                    getCollectionById();
                }
            });
        }

        // ====================
        // GET Collection By Id
        // ====================
        function getCollectionById() {
            NProgress.start();
            if (document.location.search.length > 0) {
                var id = getParam("id");

                $.ajax({
                    url: '/api/collection/detail/' + id,
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    success: function (results) {
                        if (results != null) {
                            cboORBranch.selectedValue = results.BranchId;
                            document.getElementById('collection_ORNumber').value = results.ORNumber;
                            cboORDate.dispose();
                            cboORDate = new wijmo.input.InputDate('#cboORDate', {
                                format: 'MM-dd-yyyy',
                                value: new Date(results.ORDate),
                            });
                            document.getElementById('collection_ManualORNumber').value = results.ManualORNumber;
                            cboORCustomer.selectedValue = results.CustomerId;
                            document.getElementById('collection_Particulars').value = results.Particulars;
                            cboORPreparedBy.selectedValue = results.PreparedById;
                            cboORCheckedBy.selectedValue = results.CheckedById;
                            cboORApprovedBy.selectedValue = results.ApprovedById;

                            document.getElementById('createdBy').innerHTML = results.CreatedBy;
                            document.getElementById('createdDate').innerHTML = results.CreatedDateTime;
                            document.getElementById('updatedBy').innerHTML = results.UpdatedBy;
                            document.getElementById('updatedDate').innerHTML = results.UpdatedDateTime;

                            if (results.IsLocked) {
                                cboORDate.disabled = true;
                                document.getElementById('collection_ManualORNumber').disabled = true;
                                cboORCustomer.disabled = true;
                                document.getElementById('collection_Particulars').disabled = true;
                                cboORPreparedBy.disabled = true;
                                cboORCheckedBy.disabled = true;
                                cboORApprovedBy.disabled = true;

                                $("#btnLockCollection").prop("disabled", true);
                                $("#btnAddCollectionLine").prop("disabled", true);
                                $("#cmdAR").prop("disabled", true);
                                $("#cmdAdvances").prop("disabled", true);

                                isLocked = true;
                            } else {
                                $("#btnJournalCollection").prop("disabled", true);
                                $("#btnUnlockCollection").prop("disabled", true);
                                $("#btnPrintCollection").prop("disabled", true);
                                $("#cmdAR").prop("disabled", false);
                                $("#cmdAdvances").prop("disabled", false);
                            }

                            createCboShowRows();
                            createCollectionLineFlexGrid();
                        } else {
                            alert("No Data");
                            window.location = "/Software/Collection";
                        }
                    }
                });
            } else {
                alert("No Id Parameter Value");
                window.location = "/Software/Collection";
            }
        }

        // ======================
        // Colelction Save - Lock
        // ======================
        function btnLockCollectionOnclick() {
            var collectionObject = new Object();
            collectionObject.BranchId = cboORBranch.selectedValue;
            collectionObject.ORNumber = document.getElementById('collection_ORNumber').value;
            collectionObject.ORDate = cboORDate.value.toLocaleDateString();
            collectionObject.CustomerId = cboORCustomer.selectedValue;
            collectionObject.Particulars = document.getElementById('collection_Particulars').value;
            collectionObject.ManualORNumber = document.getElementById('collection_ManualORNumber').value;
            collectionObject.CheckedById = cboORCheckedBy.selectedValue;
            collectionObject.ApprovedById = cboORApprovedBy.selectedValue;
            var data = JSON.stringify(collectionObject);

            var isValid = true;
            $('.requiredCollection').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                } else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            if (isValid) {
                document.getElementById('btnLockCollection').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Locking";
                $("#btnJournalCollection").prop("disabled", true);
                $("#btnLockCollection").prop("disabled", true);
                $("#btnUnlockCollection").prop("disabled", true);
                $("#btnPrintCollection").prop("disabled", true);
                $("#btnCloseCollection").prop("disabled", true);

                var id = getParam("id");

                $.ajax({
                    type: "PUT",
                    url: '/api/collection/lock/' + id,
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    data: data,
                    statusCode: {
                        200: function () {
                            toastr.success("Lock Successful");
                            window.setTimeout(function () {
                                location.reload()
                            }, 1000);
                        },
                        404: function (message) {
                            toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                            document.getElementById('btnLockCollection').innerHTML = "<i class='fa fa-lock'></i> Lock";
                            $("#btnLockCollection").prop("disabled", false);
                            $("#btnCloseCollection").prop("disabled", false);
                        },
                        400: function (message) {
                            toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                            document.getElementById('btnLockCollection').innerHTML = "<i class='fa fa-lock'></i> Lock";
                            $("#btnLockCollection").prop("disabled", false);
                            $("#btnCloseCollection").prop("disabled", false);
                        },
                        500: function (message) {
                            toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                            document.getElementById('btnLockCollection').innerHTML = "<i class='fa fa-lock'></i> Lock";
                            $("#btnLockCollection").prop("disabled", false);
                            $("#btnCloseCollection").prop("disabled", false);
                        }
                    },
                });
            } else {
                toastr.error("Invalid Entry");
            }
        }

        // ========================
        // Edit Collection - Unlock
        // ========================
        function btnUnlockCollectionOnclick() {
            var collectonId = getParam("id");
            document.getElementById('btnUnlockCollection').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Unlocking";
            $("#btnJournalCollection").prop("disabled", true);
            $("#btnLockCollection").prop("disabled", true);
            $("#btnUnlockCollection").prop("disabled", true);
            $("#btnPrintCollection").prop("disabled", true);
            $("#btnCloseCollection").prop("disabled", true);

            var id = getParam("id");

            $.ajax({
                type: "PUT",
                url: '/api/collection/unlock/' + id,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Unlock Successful");
                        window.setTimeout(function () {
                            location.reload()
                        }, 1000);
                    },
                    404: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                        document.getElementById('btnUnlockCollection').innerHTML = "<i class='fa fa-unlock'></i> Unlock";
                        $("#btnJournalCollection").prop("disabled", false);
                        $("#btnUnlockCollection").prop("disabled", false);
                        $("#btnPrintCollection").prop("disabled", false);
                        $("#btnCloseCollection").prop("disabled", false);
                    },
                    400: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                        document.getElementById('btnUnlockCollection').innerHTML = "<i class='fa fa-unlock'></i> Unlock";
                        $("#btnJournalCollection").prop("disabled", false);
                        $("#btnUnlockCollection").prop("disabled", false);
                        $("#btnPrintCollection").prop("disabled", false);
                        $("#btnCloseCollection").prop("disabled", false);
                    },
                    500: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                        document.getElementById('btnUnlockCollection').innerHTML = "<i class='fa fa-unlock'></i> Unlock";
                        $("#btnJournalCollection").prop("disabled", false);
                        $("#btnUnlockCollection").prop("disabled", false);
                        $("#btnPrintCollection").prop("disabled", false);
                        $("#btnCloseCollection").prop("disabled", false);
                    }
                }
            });
        }

        // ========
        // Print OR
        // ========
        function btnPrintCollectionOnclick() {
            var collectonId = getParam("id");
            var pirntLink = "/RepCollection/Collection?CollectonId=" + collectonId;
            window.open(pirntLink, '_blank');
        }

        // ========================
        // GET Collection Line List
        // ========================
        function getCollectionLines() {
            var collectionLinesObservableArray = new wijmo.collections.ObservableArray;
            if (document.location.search.length > 0) {
                var ORId = getParam("id");
                NProgress.start();
                $.ajax({
                    url: '/api/collectionLine/list/' + ORId,
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    success: function (results) {
                        var totalAmount = 0;
                        if (results.length > 0) {
                            var btnEditId = "<button class='btn btn-primary btn-xs btn-block' onclick='btnEditCollectionLine_OnClick()'><i class='fa fa-edit'></i> Edit</button>";
                            var btnDeleteId = "<button class='btn btn-danger btn-xs btn-block' onclick='btnDeleteCollectionLine_OnClick()'><i class='fa fa-trash'></i> Delete</button>";
                            if (isLocked) {
                                btnEditId = "<button class='btn btn-primary btn-xs btn-block' onclick='btnEditCollectionLine_OnClick()' disabled><i class='fa fa-edit'></i> Edit</button>";
                                btnDeleteId =  "<button class='btn btn-danger btn-xs btn-block' onclick='btnDeleteCollectionLine_OnClick()' disabled><i class='fa fa-trash'></i> Delete</button>";
                            }

                            for (i = 0; i < results.length; i++) {
                                var CheckDateResult = new Date(results[i]["CheckDate"])
                                var CheckDate = ('0' + (CheckDateResult.getMonth() + 1)).slice(-2) + '-' + ('0' + CheckDateResult.getDate()).slice(-2) + '-' + CheckDateResult.getFullYear();

                                collectionLinesObservableArray.push({
                                    EditId: btnEditId,
                                    DeleteId: btnDeleteId,
                                    Id: results[i]["Id"],
                                    ORId: results[i]["ORId"],
                                    BranchId: results[i]["BranchId"],
                                    Branch: results[i]["Branch"],
                                    AccountId: results[i]["AccountId"],
                                    Account: results[i]["Account"],
                                    ArticleId: results[i]["ArticleId"],
                                    Article: results[i]["Article"],
                                    SIId: results[i]["SIId"],
                                    SINumber: results[i]["SINumber"],
                                    Particulars: results[i]["Particulars"],
                                    Amount: results[i]["Amount"],
                                    AmountDisplay: parseFloat(results[i]["Amount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                    PayTypeId: results[i]["PayTypeId"],
                                    PayType: results[i]["PayType"],
                                    CheckNumber: results[i]["CheckNumber"],
                                    CheckDate: CheckDate,
                                    CheckBank: results[i]["CheckBank"],
                                    DepositoryBankId: results[i]["DepositoryBankId"],
                                    DepositoryBank: results[i]["DepositoryBank"],
                                    IsClear: results[i]["IsClear"]
                                });

                                totalAmount += results[i]["Amount"];
                            }
                        }

                        document.getElementById('totalORAmount').value = parseFloat(totalAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");

                        NProgress.done();
                    }
                });
            }

            return collectionLinesObservableArray;
        }

        // =========================
        // Update Navigation Buttons
        // =========================
        function updateNavigateButtonsItems() {
            if (collectionLines.pageSize <= 0) {
                document.getElementById('naviagtionPageGrid').style.display = 'none';
                return;
            }
            document.getElementById('naviagtionPageGrid').style.display = 'block';
            if (collectionLines.pageIndex === 0) {
                btnFirstPageGrid.setAttribute('disabled', 'disabled');
                btnPreviousPageGrid.setAttribute('disabled', 'disabled');
                btnNextPageGrid.removeAttribute('disabled');
                btnLastPageGrid.removeAttribute('disabled');
            } else if (collectionLines.pageIndex === (collectionLines.pageCount - 1)) {
                btnFirstPageGrid.removeAttribute('disabled');
                btnPreviousPageGrid.removeAttribute('disabled');
                btnLastPageGrid.setAttribute('disabled', 'disabled');
                btnNextPageGrid.setAttribute('disabled', 'disabled');
            } else {
                btnFirstPageGrid.removeAttribute('disabled');
                btnPreviousPageGrid.removeAttribute('disabled');
                btnNextPageGrid.removeAttribute('disabled');
                btnLastPageGrid.removeAttribute('disabled');
            }
            btnCurrentPageGrid.innerHTML = (collectionLines.pageIndex + 1) + ' / ' + collectionLines.pageCount;
        }

        // ===============
        // Show Rows Table
        // ===============
        function createCboShowRows() {
            var rowsObservableArray = new wijmo.collections.ObservableArray();

            for (var i = 0; i <= 4; i++) {
                var rows = 0;
                var rowsString = "";

                if (i == 0) {
                    rows = 15;
                    rowsString = "Show 15 Rows";
                } else if (i == 1) {
                    rows = 50;
                    rowsString = "Show 50 Rows";
                } else if (i == 2) {
                    rows = 100;
                    rowsString = "Show 100 Rows";
                } else if (i == 3) {
                    rows = 150;
                    rowsString = "Show 150 Rows";
                } else {
                    rows = 200;
                    rowsString = "Show 200 Rows";
                }

                rowsObservableArray.push({
                    rowNumber: rows,
                    rowString: rowsString
                });
            }

            cboCollectionLineShowNumberOfRows.dispose();
            cboCollectionLineShowNumberOfRows = new wijmo.input.ComboBox('#cboCollectionLineShowNumberOfRows', {
                isEditable: false,
                itemsSource: rowsObservableArray,
                displayMemberPath: "rowString",
                selectedValuePath: "rowNumber",
                selectedValue: 50,
                onSelectedIndexChanged: function () {
                    NProgress.start();

                    setTimeout(function () {
                        var numberOfRows = cboCollectionLineShowNumberOfRows.selectedValue;
                        collectionLines.pageSize = parseInt(numberOfRows);
                        collectionLines.refresh();
                        collectionLineGrid.refresh();

                        NProgress.done();
                    }, 300);
                }
            });
        }

        // ================================
        // Refresh Collection Line FlexGrid
        // ================================
        function refreshCollectionLineFlexGrid() {
            collectionLines = new wijmo.collections.CollectionView(getCollectionLines());
            collectionLines.canFilter = true;
            collectionLines.pageSize = cboCollectionLineShowNumberOfRows.selectedValue;

            var filterText = '';
            $('#CollectionLineInputFilter').keyup(function () {
                filterText = this.value.toLowerCase();
                collectionLines.refresh();
            });

            collectionLines.filter = function (item) {
                return !filterText || (item.Branch.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.PayType.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Particulars.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.SINumber.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Account.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Article.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.CheckNumber.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.CheckBank.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.DepositoryBank.toLowerCase().indexOf(filterText) > -1);
            }

            collectionLines.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsItems();
            });

            collectionLineGrid.itemsSource = collectionLines;
            collectionLineGrid.trackChanges = true;
        }

        // ========================
        // Collection Line FlexGrid
        // ========================
        function createCollectionLineFlexGrid() {
            collectionLines = new wijmo.collections.CollectionView(getCollectionLines());
            collectionLines.canFilter = true;
            collectionLines.pageSize = cboCollectionLineShowNumberOfRows.selectedValue;

            var filterText = '';
            $('#CollectionLineInputFilter').keyup(function () {
                filterText = this.value.toLowerCase();
                collectionLines.refresh();
            });

            collectionLines.filter = function (item) {
                return !filterText || (item.Branch.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.PayType.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Particulars.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.SINumber.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Account.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Article.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.CheckNumber.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.CheckBank.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.DepositoryBank.toLowerCase().indexOf(filterText) > -1);
            }

            collectionLines.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsItems();
            });

            collectionLineGrid = new wijmo.grid.FlexGrid('#CollectionLineGrid');
            collectionLineGrid.initialize({
                columns: [
                    @{
                        if (canEdit)
                        {
                            <text>
                                {
                                    "header": "Edit",
                                    "binding": "EditId",
                                    "width": 70,
                                    "align": "center",
                                    "allowResizing": false,
                                    "allowSorting": false,
                                    "isContentHtml": true
                                },
                            </text>
                        }
                        if (canDelete)
                        {
                            <text>
                                {
                                    "header": "Delete",
                                    "binding": "DeleteId",
                                    "width": 70,
                                    "align": "center",
                                    "allowResizing": false,
                                    "allowSorting": false,
                                    "isContentHtml": true
                                },
                            </text>
                        }
                    }
                    {
                        "header": "Branch",
                        "binding": "Branch",
                        "allowSorting": true,
                        "width": 150
                    },
                    {
                        "header": "Pay Type",
                        "binding": "PayType",
                        "allowSorting": true,
                        "width": 150
                    },
                    {
                        "header": "Particulars",
                        "binding": "Particulars",
                        "allowSorting": true,
                        "width": 200
                    },
                    {
                        "header": "SI No.",
                        "binding": "SINumber",
                        "allowSorting": true,
                        "width": 120
                    },
                    {
                        "header": "Amount",
                        "binding": "AmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": 120
                    },
                    {
                        "header": "Account",
                        "binding": "Account",
                        "allowSorting": true,
                        "width": 150
                    },
                    {
                        "header": "Article",
                        "binding": "Article",
                        "allowSorting": true,
                        "width": 150
                    },
                    {
                        "header": "Check No.",
                        "binding": "CheckNumber",
                        "allowSorting": true,
                        "width": 150
                    },
                    {
                        "header": "Check Date",
                        "binding": "CheckDate",
                        "allowSorting": true,
                        "width": 110
                    },
                    {
                        "header": "Check Bank",
                        "binding": "CheckBank",
                        "allowSorting": true,
                        "width": 150
                    },
                    {
                        "header": "Depository Bank",
                        "binding": "DepositoryBank",
                        "allowSorting": true,
                        "width": 150
                    },
                    {
                        "header": "C",
                        "binding": "IsClear",
                        "allowSorting": true,
                        "width": 50
                    }
                ],
                autoGenerateColumns: false,
                itemsSource: collectionLines,
                isReadOnly: true,
                frozenColumns: 2,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            collectionLineGrid.trackChanges = true;

            updateNavigateButtonsItems();

            btnFirstPageGrid.addEventListener('click', function () {
                collectionLines.moveToFirstPage();
                updateNavigateButtonsItems();
            });

            btnPreviousPageGrid.addEventListener('click', function () {
                collectionLines.moveToPreviousPage();
                updateNavigateButtonsItems();
            });

            btnNextPageGrid.addEventListener('click', function () {
                collectionLines.moveToNextPage();
                updateNavigateButtonsItems();
            });

            btnLastPageGrid.addEventListener('click', function () {
                collectionLines.moveToLastPage();
                updateNavigateButtonsItems();
            });
        }

        // ========================================
        // GET Collection Line Branch for Combo Box
        // ========================================
        function getCollectionBranchesForComboBox(branchId, accountId, articleId, SIId, payTypeId, checkDate, depositoryBankId) {
            var collectionLineBranchesObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/collectionLine/dropdown/list/branch',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            collectionLineBranchesObservableArray.push({
                                Id: results[i]["Id"],
                                Branch: results[i]["Branch"]
                            });
                        }
                    }

                    var disabled = true;
                    if (results.length > 0) {
                        disabled = false;
                        $("#cmdSaveCollectionLineButton").prop("disabled", false);
                    } else {
                        $("#cmdSaveCollectionLineButton").prop("disabled", true);
                    }

                    cboCollectionLineBranch.dispose();
                    cboCollectionLineBranch = new wijmo.input.ComboBox('#cboCollectionLineBranch', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: collectionLineBranchesObservableArray,
                        displayMemberPath: "Branch",
                        selectedValuePath: "Id",
                        selectedValue: branchId
                    });

                    getCollectionLineAccountForComboBox(accountId, articleId, SIId, payTypeId, checkDate, depositoryBankId);
                }
            });
        }

        // ===========================
        // Get Collection Line Account
        // ===========================
        function getCollectionLineAccountForComboBox(accountId, articleId, SIId, payTypeId, checkDate, depositoryBankId) {
            var collectionLineAccountsObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/collectionLine/dropdown/list/account',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            collectionLineAccountsObservableArray.push({
                                Id: results[i]["Id"],
                                AccountCode: results[i]["AccountCode"],
                                Account: results[i]["Account"]
                            });
                        }
                    }

                    var disabled = true;
                    if (results.length > 0) {
                        disabled = false;
                    } else {
                        $("#cmdSaveCollectionLineButton").prop("disabled", true);
                    }

                    cboCollectionLineAccountCode.dispose();
                    cboCollectionLineAccountCode = new wijmo.input.ComboBox('#cboCollectionLineAccountCode', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: collectionLineAccountsObservableArray,
                        displayMemberPath: "AccountCode",
                        selectedValuePath: "Id",
                        selectedValue: accountId,
                        onSelectedIndexChanged: function () {
                            cboCollectionLineAccount.selectedValue = this.selectedValue;
                        }
                    });

                    cboCollectionLineAccount.dispose();
                    cboCollectionLineAccount = new wijmo.input.ComboBox('#cboCollectionLineAccount', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: collectionLineAccountsObservableArray,
                        displayMemberPath: "Account",
                        selectedValuePath: "Id",
                        selectedValue: accountId,
                        onSelectedIndexChanged: function () {
                            cboCollectionLineAccountCode.selectedValue = this.selectedValue;
                            cboCollectionLineArticle.disabled = true;
                            IsAccountChanged = true;
                            getCollectionLineArticlesForComboBox(articleId, SIId, payTypeId, checkDate, depositoryBankId);
                        }
                    });

                    getCollectionLineArticlesForComboBox(articleId, SIId, payTypeId, checkDate, depositoryBankId);
                }
            });
        }

        // ==========================================
        // GET Collection Line Articles for Combo Box
        // ==========================================
        function getCollectionLineArticlesForComboBox(articleId, SIId, payTypeId, checkDate,  depositoryBankId) {
            var collectionLineArticlesObservableArray = new wijmo.collections.ObservableArray();
            if (cboCollectionLineAccount.selectedValue != null) {
                $.ajax({
                    url: '/api/collectionLine/dropdown/list/article/' + cboCollectionLineAccount.selectedValue,
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    success: function (results) {
                        if (results.length > 0) {
                            for (i = 0; i < results.length; i++) {
                                collectionLineArticlesObservableArray.push({
                                    Id: results[i]["Id"],
                                    Article: results[i]["Article"]
                                });
                            }
                        }

                        var disabled = true;
                        if (results.length > 0) {
                            disabled = false;
                        } else {
                            $("#cmdSaveCollectionLineButton").prop("disabled", true);
                        }

                        cboCollectionLineArticle.dispose();
                        cboCollectionLineArticle = new wijmo.input.ComboBox('#cboCollectionLineArticle', {
                            disabled: disabled,
                            isEditable: false,
                            itemsSource: collectionLineArticlesObservableArray,
                            displayMemberPath: "Article",
                            selectedValuePath: "Id",
                            selectedValue: articleId
                        });

                        if (!IsAccountChanged) {
                            getSalesForComboBoxInCollectionLine(SIId, payTypeId, checkDate,  depositoryBankId);
                        }
                    }
                });
            } else {
                cboCollectionLineArticle.dispose();
                cboCollectionLineArticle = new wijmo.input.ComboBox('#cboCollectionLineArticle', {
                    disabled: true,
                    isEditable: false,
                    itemsSource: collectionLineArticlesObservableArray,
                });

                if (!IsAccountChanged) {
                    getSalesForComboBoxInCollectionLine(SIId, payTypeId, checkDate,  depositoryBankId);
                }
            }
        }

        // ==============================================
        // GET SI Number for Combo Box in Collection Line
        // ==============================================
        function getSalesForComboBoxInCollectionLine(SIId, payTypeId, checkDate,  depositoryBankId) {
            var collectionLineSalesObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/collectionLine/dropdown/list/salesInvoice/' + cboORCustomer.selectedValue,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            collectionLineSalesObservableArray.push({
                                Id: results[i]["Id"],
                                SINumber: results[i]["SINumber"],
                                SIDetails: results[i]["SINumber"] + " (" + (results[i]["SIDate"]).replace(/\//g, '-') + ")",
                                BalanceAmount: results[i]["BalanceAmount"]
                            });
                        }
                    }

                    var disabled = true;
                    if (results.length > 0) {
                        disabled = false;
                    }

                    cboCollectionLineSINumber.dispose();
                    cboCollectionLineSINumber = new wijmo.input.ComboBox('#cboCollectionLineSINumber', {
                        disabled: disabled,
                        required: false,
                        isEditable: false,
                        itemsSource: collectionLineSalesObservableArray,
                        displayMemberPath: "SIDetails",
                        selectedValuePath: "Id",
                        selectedValue: SIId,
                        onSelectedIndexChanged: function () {
                            if (this.selectedValue != null) {
                                document.getElementById("collectionLine_amount").value = formatDecimalValues(this.selectedItem["BalanceAmount"]);
                            } else {
                                document.getElementById("collectionLine_amount").value = formatDecimalValues(0);
                            }
                        }
                    });

                    if (collectionLineId == 0) {
                        if (cboCollectionLineSINumber.selectedValue != null) {
                            document.getElementById("collectionLine_amount").value = formatDecimalValues(cboCollectionLineSINumber.selectedItem["BalanceAmount"].toLocaleString());
                        } else {
                            document.getElementById("collectionLine_amount").value = formatDecimalValues(0);
                        }
                    }

                    getCollectionPayTypeForComboBox(payTypeId, checkDate,  depositoryBankId);
                }
            });
        }

        // =========================================
        // GET Collection Line PayType for Combo Box
        // =========================================
        function getCollectionPayTypeForComboBox(payTypeId, checkDate,  depositoryBankId) {
            var collectionLinePayTypesObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/collectionLine/dropdown/list/payType',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            collectionLinePayTypesObservableArray.push({
                                Id: results[i]["Id"],
                                PayType: results[i]["PayType"]
                            });
                        }
                    }

                    var disabled = true;
                    if (results.length > 0) {
                        disabled = false;
                    } else {
                        $("#cmdSaveCollectionLineButton").prop("disabled", true);
                    }

                    if (!isARPayTypeClicked) {
                        cboCollectionLinePayType.dispose();
                        cboCollectionLinePayType = new wijmo.input.ComboBox('#cboCollectionLinePayType', {
                            disabled: disabled,
                            isEditable: false,
                            itemsSource: collectionLinePayTypesObservableArray,
                            displayMemberPath: "PayType",
                            selectedValuePath: "Id",
                            selectedValue: payTypeId
                        });
                    }

                    if (isARPayTypeClicked) {
                        cboSIStatusPayType.dispose();
                        cboSIStatusPayType = new wijmo.input.ComboBox('#cboSIStatusPayType', {
                            disabled: disabled,
                            isEditable: false,
                            itemsSource: collectionLinePayTypesObservableArray,
                            displayMemberPath: "PayType",
                            selectedValuePath: "Id"
                        });
                    }

                    getCheckDate(checkDate, depositoryBankId);
                }
            });
        }

        // ==========
        // Check Date
        // ==========
        function getCheckDate(checkDate, depositoryBankId) {
            cboCheckDate.dispose();
            cboCheckDate = new wijmo.input.InputDate('#cboCheckDate', {
                format: 'MM-dd-yyyy',
                value: checkDate,
            });

            cboSIStatusCheckDate.dispose();
            cboSIStatusCheckDate = new wijmo.input.InputDate('#cboSIStatusCheckDate', {
                format: 'MM-dd-yyyy',
                value: new Date(),
            });

            getCollectionArticleBankForComboBox(depositoryBankId);
        }

        // ===============================================
        // GET Collection Line Articles Bank for Combo Box
        // ===============================================
        function getCollectionArticleBankForComboBox(depositoryBankId) {
            var collectionArticleBanksObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/collectionLine/dropdown/list/depositoryBank',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            collectionArticleBanksObservableArray.push({
                                Id: results[i]["Id"],
                                Article: results[i]["Article"]
                            });
                        }
                    }

                    var disabled = true;
                    if (results.length > 0) {
                        disabled = false;
                    } else {
                        $("#cmdSaveCollectionLineButton").prop("disabled", true);
                    }

                    if (!isARPayTypeClicked) {
                        cboCollectionLineDepositoryBank.dispose();
                        cboCollectionLineDepositoryBank = new wijmo.input.ComboBox('#cboCollectionLineDepositoryBank', {
                            disabled: disabled,
                            isEditable: false,
                            itemsSource: collectionArticleBanksObservableArray,
                            displayMemberPath: "Article",
                            selectedValuePath: "Id",
                            selectedValue: depositoryBankId
                        });
                    }

                    if (isARPayTypeClicked) {
                        cboSIStatusDepositoryBank.dispose();
                        cboSIStatusDepositoryBank = new wijmo.input.ComboBox('#cboSIStatusDepositoryBank', {
                            disabled: disabled,
                            isEditable: false,
                            itemsSource: collectionArticleBanksObservableArray,
                            displayMemberPath: "Article",
                            selectedValuePath: "Id"
                        });
                    }
                }
            });
        }

        // ===================
        // ADD Collection Line
        // ===================
        function cmdAddCollectionLineButton_OnClick() {
            isARPayTypeClicked = false;

            $('#collectionLineEdit').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById('cmdSaveCollectionLineButton').innerHTML = "<i class='fa fa-save'></i> Save";
            $("#cmdSaveCollectionLineButton").prop("disabled", true);
            $("#cmdCollectionLineDetailCloseButton").prop("disabled", false);

            $('.requiredCollectionLine').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            var cboORBranchId = cboORBranch.selectedValue;
            getCollectionBranchesForComboBox(cboORBranchId, 0, 0, 0, 0, new Date(), 0);
            collectionLineId = 0;
            document.getElementById('collectionLine_Particulars').value = 'NA';
            document.getElementById('collectionLine_checkNo').value = 'NA';
            document.getElementById('collectionLine_checkBank').value = 'NA';
            document.getElementById('collectionLine_Clear').checked = false;
        }

        // ====================
        // Edit Collection Line
        // ====================
        function btnEditCollectionLine_OnClick() {
            isARPayTypeClicked = false;

            $('#collectionLineEdit').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById('cmdSaveCollectionLineButton').innerHTML = "<i class='fa fa-save'></i> Save";
            $("#cmdSaveCollectionLineButton").prop("disabled", true);
            $("#cmdCollectionLineDetailCloseButton").prop("disabled", false);

            $('.requiredCollectionLine').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            collectionLines.editItem(collectionLines.currentItem);
            var collectionLine = collectionLines.currentEditItem;

            collectionLineId = collectionLine.Id;
            getCollectionBranchesForComboBox(collectionLine.BranchId, collectionLine.AccountId, collectionLine.ArticleId, collectionLine.SIId, collectionLine.PayTypeId, new Date(collectionLine.CheckDate), collectionLine.DepositoryBankId);
            document.getElementById('collectionLine_Particulars').value = collectionLine.Particulars;
            document.getElementById('collectionLine_checkNo').value = collectionLine.CheckNumber;
            document.getElementById('collectionLine_checkBank').value = collectionLine.CheckBank;
            document.getElementById('collectionLine_amount').value = formatDecimalValues(collectionLine.Amount);
            document.getElementById('collectionLine_Clear').checked = collectionLine.IsClear;
        }

        // ======================
        // Delete Collection Line
        // ======================
        function btnDeleteCollectionLine_OnClick() {
            $('#deleteCollectionLineConfirm').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById('cmdConfirmDeleteCollectionLine').innerHTML = "<i class='fa fa-trash'></i> Delete";
            $("#cmdConfirmDeleteCollectionLine").prop("disabled", false);
            $("#cmdConfirmDeleteCollectionLineCloseButton").prop("disabled", false);
        }

        // confirm delete Collection
        function cmdCollectionLineConfirmDeleteButton_OnClick() {
            document.getElementById('cmdConfirmDeleteCollectionLine').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Deleting";
            $("#cmdConfirmDeleteCollectionLine").prop("disabled", true);
            $("#cmdConfirmDeleteCollectionLineCloseButton").prop("disabled", true);

            var ORId = getParam("id");

            collectionLines.editItem(collectionLines.currentItem);
            var collectionLineId = collectionLines.currentEditItem.Id;

            $.ajax({
                url: '/api/collectionLine/delete/' + collectionLineId + '/' + ORId,
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Delete Successful");
                        $('#deleteCollectionLineConfirm').modal('hide');
                        refreshCollectionLineFlexGrid();
                    },
                    404: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                        $('#deleteCollectionLineConfirm').modal('hide');
                        document.getElementById('cmdConfirmDeleteCollectionLine').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $("#cmdConfirmDeleteCollectionLine").prop("disabled", false);
                        $("#cmdConfirmDeleteCollectionLineCloseButton").prop("disabled", false);
                    },
                    400: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                        $('#deleteCollectionLineConfirm').modal('hide');
                        document.getElementById('cmdConfirmDeleteCollectionLine').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $("#cmdConfirmDeleteCollectionLine").prop("disabled", false);
                        $("#cmdConfirmDeleteCollectionLineCloseButton").prop("disabled", false);
                    },
                    500: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                        $('#deleteCollectionLineConfirm').modal('hide');
                        document.getElementById('cmdConfirmDeleteCollectionLine').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $("#cmdConfirmDeleteCollectionLine").prop("disabled", false);
                        $("#cmdConfirmDeleteCollectionLineCloseButton").prop("disabled", false);
                    }
                }
            });
        }

        // ====================
        // SAVE Collection Line
        // ====================
        function cmdCollectionLineSaveButton_OnClick() {
            var collectionObject = new Object();
            collectionObject.BranchId = cboCollectionLineBranch.selectedValue;
            collectionObject.AccountId = cboCollectionLineAccount.selectedValue;
            collectionObject.ArticleId = cboCollectionLineArticle.selectedValue;
            collectionObject.SIId = cboCollectionLineSINumber.selectedValue;
            collectionObject.Particulars = document.getElementById('collectionLine_Particulars').value;
            collectionObject.Amount = document.getElementById('collectionLine_amount').value;
            collectionObject.PayTypeId = cboCollectionLinePayType.selectedValue;
            collectionObject.CheckNumber = document.getElementById('collectionLine_checkNo').value;
            collectionObject.CheckDate = cboCheckDate.value.toLocaleDateString();
            collectionObject.CheckBank = document.getElementById('collectionLine_checkBank').value;
            collectionObject.DepositoryBankId = cboCollectionLineDepositoryBank.selectedValue;
            collectionObject.IsClear = document.getElementById('collectionLine_Clear').checked;
            var collectionData = JSON.stringify(collectionObject);

            var isValid = true;
            $('.requiredCollectionLine').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                } else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            if (isValid) {
                document.getElementById('cmdSaveCollectionLineButton').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Saving";
                $("#cmdSaveCollectionLineButton").prop("disabled", true);
                $("#cmdCollectionLineDetailCloseButton").prop("disabled", true);

                var ORId = getParam("id");

                if (collectionLineId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/collectionLine/add/' + ORId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: collectionData,
                        statusCode: {
                            200: function () {
                                toastr.success("Save Successful");
                                $('#collectionLineEdit').modal('hide');
                                refreshCollectionLineFlexGrid();
                            },
                            404: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                                $('#collectionLineEdit').modal('hide');
                                document.getElementById('cmdSaveCollectionLineButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#cmdSaveCollectionLineButton").prop("disabled", true);
                                $("#cmdCollectionLineDetailCloseButton").prop("disabled", false);
                            },
                            400: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                                $('#collectionLineEdit').modal('hide');
                                document.getElementById('cmdSaveCollectionLineButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#cmdSaveCollectionLineButton").prop("disabled", true);
                                $("#cmdCollectionLineDetailCloseButton").prop("disabled", false);
                            },
                            500: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                                $('#collectionLineEdit').modal('hide');
                                document.getElementById('cmdSaveCollectionLineButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#cmdSaveCollectionLineButton").prop("disabled", true);
                                $("#cmdCollectionLineDetailCloseButton").prop("disabled", false);
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/collectionLine/update/' + collectionLineId + '/' + ORId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: collectionData,
                        statusCode: {
                            200: function () {
                                toastr.success("Update Successful");
                                $('#collectionLineEdit').modal('hide');
                                refreshCollectionLineFlexGrid();
                            },
                            404: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                                $('#collectionLineEdit').modal('hide');
                                document.getElementById('cmdSaveCollectionLineButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#cmdSaveCollectionLineButton").prop("disabled", true);
                                $("#cmdCollectionLineDetailCloseButton").prop("disabled", false);
                            },
                            400: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                                $('#collectionLineEdit').modal('hide');
                                document.getElementById('cmdSaveCollectionLineButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#cmdSaveCollectionLineButton").prop("disabled", true);
                                $("#cmdCollectionLineDetailCloseButton").prop("disabled", false);
                            },
                            500: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                                $('#collectionLineEdit').modal('hide');
                                document.getElementById('cmdSaveCollectionLineButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#cmdSaveCollectionLineButton").prop("disabled", true);
                                $("#cmdCollectionLineDetailCloseButton").prop("disabled", false);
                            }
                        }
                    });
                }
            } else {
                toastr.error("Invalid Entry");
            }
        }

        // ===========
        // Get Journal
        // ===========
        function getJournalListForRR() {
            var journalsObservableArray = new wijmo.collections.ObservableArray;
            var ORId = getParam('id');
            $.ajax({
                url: '/api/jounal/collection/list/' + ORId,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {

                            var journalDateResult = new Date(results[i]["JournalDate"])
                            var journalDate = ('0' + (journalDateResult.getMonth() + 1)).slice(-2) + '-' + ('0' + journalDateResult.getDate()).slice(-2) + '-' + journalDateResult.getFullYear();

                            journalsObservableArray.push({
                                Branch: results[i]["Branch"],
                                JournalDate: journalDate,
                                AccountCode: results[i]["AccountCode"],
                                Account: results[i]["Account"],
                                Article: results[i]["Article"],
                                DebitAmountDisplay: parseFloat(results[i]["DebitAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                CreditAmountDisplay: parseFloat(results[i]["CreditAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")
                            });

                            var debitAmountTotal = 0;
                            var creditAmountTotal = 0;

                            var a = 0;
                            while (a < results.length) {
                                debitAmountTotal += results[a]["DebitAmount"];
                                creditAmountTotal += results[a]["CreditAmount"];
                                a++;
                            }
                        }

                        document.getElementById('totalDebitInJournal').value = debitAmountTotal.toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        document.getElementById('totalCreditInJournal').value = creditAmountTotal.toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        var variance = debitAmountTotal - creditAmountTotal;
                        document.getElementById('variance').value = variance.toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                    }

                    $("#loadingJournalGridList").hide();
                    $("#journal_Content").show();
                }
            });

            return journalsObservableArray;
        }

        // ============
        // Journal List
        // ============
        function btnJournalCollectionOnclick() {
            $('#journalDetail').modal({
                show: true,
                backdrop: 'static'
            });

            $("#loadingJournalGridList").show();
            document.getElementById("loadingJournalGridList").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#journal_Content").hide();

            setTimeout(function () {
                createJournalFlexGrid();
            }, 500)
        }

        function createJournalFlexGrid() {
            journalCollectionView = new wijmo.collections.CollectionView(getJournalListForRR());

            journalFlexGrid.dispose();
            journalFlexGrid = new wijmo.grid.FlexGrid('#journalFlexGrid');
            journalFlexGrid.initialize({
                columns: [
                    {
                        "header": "Branch",
                        "binding": "Branch",
                        "allowSorting": true,
                        "width": "2.5*"
                    },
                    {
                        "header": "Date",
                        "binding": "JournalDate",
                        "allowSorting": true,
                        "width": "1.5*"
                    },
                    {
                        "header": "Code",
                        "binding": "AccountCode",
                        "allowSorting": true,
                        "width": "1.8*"
                    },
                    {
                        "header": "Account",
                        "binding": "Account",
                        "allowSorting": true,
                        "width": "3*"
                    },
                    {
                        "header": "Article",
                        "binding": "Article",
                        "allowSorting": true,
                        "width": "3*"
                    },
                    {
                        "header": "Debit",
                        "binding": "DebitAmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": "2*",
                    },
                    {
                        "header": "Credit",
                        "binding": "CreditAmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": "2*"
                    }
                ],
                autoGenerateColumns: false,
                itemsSource: journalCollectionView,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            journalFlexGrid.trackChanges = true;
        }

        // ===========
        // Date Filter
        // ===========
        function cboDateSIFilters() {
            cboStartDateSIFilter.dispose();
            cboStartDateSIFilter = new wijmo.input.InputDate('#cboStartDateSIFilter', {
                format: 'MM-dd-yyyy',
                value: new Date(),
                onValueChanged: function () {
                    if (!isStartDateSIFirstSelect) {
                        $('#loadingSIStatus').show();
                        document.getElementById("loadingSIStatus").innerHTML = "<b><i class='fa fa-spinner fa-spin'></i></b>";
                        $('#statusGrid').hide();
                        $('#btnIdApplyAllSI').prop("disabled", true);

                        setTimeout(function () {
                            createSalesInvoiceStatusFlexGrid();
                        }, 500);
                    } else {
                        isStartDateSIFirstSelect = false;
                    }
                }
            });

            cboEndDateSIFilter.dispose();
            cboEndDateSIFilter = new wijmo.input.InputDate('#cboEndDateSIFilter', {
                format: 'MM-dd-yyyy',
                value: new Date(),
                onValueChanged: function () {
                    if (!isEndDateSIFirstSelect) {
                        $('#loadingSIStatus').show();
                        document.getElementById("loadingSIStatus").innerHTML = "<b><i class='fa fa-spinner fa-spin'></i></b>";
                        $('#statusGrid').hide();
                        $('#btnIdApplyAllSI').prop("disabled", true);

                        setTimeout(function () {
                            createSalesInvoiceStatusFlexGrid();
                        }, 500);
                    } else {
                        isEndDateSIFirstSelect = false;
                    }
                }
            });

            cboStartDateSIFilterBranch.dispose();
            cboStartDateSIFilterBranch = new wijmo.input.InputDate('#cboStartDateSIFilterBranch', {
                format: 'MM-dd-yyyy',
                value: new Date(),
                onValueChanged: function () {
                    if (!isStartDateSIFirstSelectBranch) {
                        $('#loadingSIStatusBranch').show();
                        document.getElementById("loadingSIStatusBranch").innerHTML = "<b><i class='fa fa-spinner fa-spin'></i></b>";
                        $('#statusGridBranch').hide();
                        $('#btnIdApplyAllSI').prop("disabled", true);

                        setTimeout(function () {
                            createSalesInvoiceStatusFlexGridBranch();
                        }, 500);
                    } else {
                        isStartDateSIFirstSelectBranch = false;
                    }
                }
            });

            cboEndDateSIFilterBranch.dispose();
            cboEndDateSIFilterBranch = new wijmo.input.InputDate('#cboEndDateSIFilterBranch', {
                format: 'MM-dd-yyyy',
                value: new Date(),
                onValueChanged: function () {
                    if (!isEndDateSIFirstSelectBranch) {
                        $('#loadingSIStatusBranch').show();
                        document.getElementById("loadingSIStatusBranch").innerHTML = "<b><i class='fa fa-spinner fa-spin'></i></b>";
                        $('#statusGridBranch').hide();
                        $('#btnIdApplyAllSI').prop("disabled", true);

                        setTimeout(function () {
                            createSalesInvoiceStatusFlexGridBranch();
                        }, 500);
                    } else {
                        isEndDateSIFirstSelectBranch = false;
                    }
                }
            });
        }

        // ==========
        // AR Onclick
        // ==========
        function collectionAR_OnClick() {
            cboDateSIFilters();
            isARPayTypeClicked = true;

            $('#SalesStatus').modal({
                show: true,
                backdrop: 'static'
            });

            if (isSIStatusCustomerSelected) {
                $('#loadingSIStatus').show();
                document.getElementById("loadingSIStatus").innerHTML = "<b><i class='fa fa-spinner fa-spin'></i></b>";
                $('#statusGrid').hide();
                $('#btnIdApplyAllSI').prop("disabled", true);

                setTimeout(function () {
                    createSalesInvoiceStatusFlexGrid();
                }, 500);
            } else {
                if (isSIStatusBranchSelected) {
                    $('#loadingSIStatusBranch').show();
                    document.getElementById("loadingSIStatusBranch").innerHTML = "<b><i class='fa fa-spinner fa-spin'></i></b>";
                    $('#statusGridBranch').hide();
                    $('#btnIdApplyAllSI').prop("disabled", true);

                    setTimeout(function () {
                        createSalesInvoiceStatusFlexGridBranch();
                    }, 500);
                }
            }

            getCollectionPayTypeForComboBox(0, new Date(), 0);

            document.getElementById("SIStatus_checkNo").value = "NA";
            document.getElementById("SIStatus_checkBank").value = "NA";
            document.getElementById("SIStatus_Clear").checked = false;
        }

        function getSalesInvoiceByCustomerByBalanceBranch() {
            var saleInvoiceStatus = new wijmo.collections.ObservableArray;

            var startDate = cboStartDateSIFilterBranch.value.toLocaleDateString().replace(/\//g, '-');
            var endDate = cboEndDateSIFilterBranch.value.toLocaleDateString().replace(/\//g, '-');

            $.ajax({
                url: '/api/collectionLine/popUp/list/salesInvoiceStatus/perCurrentBranch/' + startDate + '/' + endDate,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    $('#btnIdApplyAllSI').prop("disabled", false);
                    var totalSIAmount = 0;
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {

                            var SIDateResult = new Date(results[i]["SIDate"])
                            var SIDate = ('0' + (SIDateResult.getMonth() + 1)).slice(-2) + '-' + ('0' + SIDateResult.getDate()).slice(-2) + '-' + SIDateResult.getFullYear();

                            saleInvoiceStatus.push({
                                Id: results[i]["Id"],
                                BranchId: results[i]["BranchId"],
                                Branch: results[i]["Branch"],
                                SINumber: results[i]["SINumber"],
                                SIDate: SIDate,
                                ManualSINumber: results[i]["ManualSINumber"],
                                Customer: results[i]["Customer"],
                                Amount: results[i]["Amount"],
                                AmountDisplay: parseFloat(results[i]["Amount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                PaidAmount: results[i]["PaidAmount"],
                                PaidAmountDisplay: parseFloat(results[i]["PaidAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                AdjustmentAmount: results[i]["AdjustmentAmount"],
                                AdjustmentAmountDisplay: parseFloat(results[i]["AdjustmentAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                BalanceAmount: results[i]["BalanceAmount"],
                                BalanceAmountDisplay: parseFloat(results[i]["BalanceAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                Balance: results[i]["BalanceAmount"],
                                BalanceDisplay: parseFloat(results[i]["BalanceAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                Pick: "<button class='btn btn-primary btn-xs btn-block' onclick='btnPickBranchAmount()'><i class='fa fa-hand-o-right'></i> Pick</button>",
                                Unpick: "<button class='btn btn-danger btn-xs btn-block' onclick='btnUnpickBranchAmountReverse()'><i class='fa fa-hand-o-left'></i> Unpick</button>"
                            });

                            totalSIAmount += results[i]["BalanceAmount"];
                        }
                    } else {
                        $('#btnIdApplyAllSI').prop("disabled", true);
                    }

                    document.getElementById("totalSIAmountBranch").value = parseFloat(totalSIAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");

                    $('#loadingSIStatusBranch').hide();
                    $('#statusGridBranch').show();
                }
            });

            return saleInvoiceStatus;
        }

        // =========================
        // Update Navigation Buttons
        // =========================
        function updateNavigateButtonsSIStatusBranch() {
            if (saleInvoiceStatusBranch.pageSize <= 0) {
                document.getElementById('naviagtionPageGridSIStatusBranch').style.display = 'none';
                return;
            }
            document.getElementById('naviagtionPageGridSIStatusBranch').style.display = 'block';
            if (saleInvoiceStatusBranch.pageIndex === 0) {
                btnFirstPageGridSIStatusBranch.setAttribute('disabled', 'disabled');
                btnPreviousPageGridSIStatusBranch.setAttribute('disabled', 'disabled');
                btnNextPageGridSIStatusBranch.removeAttribute('disabled');
                btnLastPageGridSIStatusBranch.removeAttribute('disabled');
            } else if (saleInvoiceStatusBranch.pageIndex === (saleInvoiceStatusBranch.pageCount - 1)) {
                btnFirstPageGridSIStatusBranch.removeAttribute('disabled');
                btnPreviousPageGridSIStatusBranch.removeAttribute('disabled');
                btnNextPageGridSIStatusBranch.setAttribute('disabled', 'disabled');
                btnLastPageGridSIStatusBranch.setAttribute('disabled', 'disabled');
            } else {
                btnFirstPageGridSIStatusBranch.removeAttribute('disabled');
                btnPreviousPageGridSIStatusBranch.removeAttribute('disabled');
                btnNextPageGridSIStatusBranch.removeAttribute('disabled');
                btnLastPageGridSIStatusBranch.removeAttribute('disabled');
            }
            btnCurrentPageGridSIStatusBranch.innerHTML = (saleInvoiceStatusBranch.pageIndex + 1) + ' / ' + saleInvoiceStatusBranch.pageCount;
        }

        // =========================
        // Sales Invoice Status Grid
        // =========================
        function createSalesInvoiceStatusFlexGridBranch() {
            saleInvoiceStatusBranch = new wijmo.collections.CollectionView(getSalesInvoiceByCustomerByBalanceBranch());
            saleInvoiceStatusBranch.canFilter = true;
            saleInvoiceStatusBranch.pageSize = 10;

            var filterText = '';
            $('#SIStatusFilterBranch').keyup(function () {
                filterText = this.value.toLowerCase();

                setTimeout(function () {
                    var totalALLSIAmount = 0
                    saleInvoiceStatusBranch.moveToFirstPage();
                    for (var p = 1; p <= saleInvoiceStatusBranch.pageCount; p++) {
                        var totalCurrentPageSIAmount = 0
                        for (var i = 0; i < saleInvoiceStatusBranch.items.length; i++) {
                            totalCurrentPageSIAmount += parseFloat(saleInvoiceStatusBranch.items[i].Balance);
                        }

                        totalALLSIAmount += parseFloat(totalCurrentPageSIAmount);
                        saleInvoiceStatusBranch.moveToNextPage();
                        if (p == saleInvoiceStatusBranch.pageCount) {
                            saleInvoiceStatusBranch.moveToPage(currentSIStatusPageIndexBranch - 1);
                        }
                    }

                    document.getElementById("totalSIAmountBranch").value = parseFloat(totalALLSIAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                    $('#pickBalanceAmountModalBranch').modal('hide');
                }, 300);

                saleInvoiceStatusBranch.refresh();
            });

            saleInvoiceStatusBranch.filter = function (item) {
                return !filterText || (item.SINumber.toLowerCase().indexOf(filterText) > -1)
                    || (item.Customer.toLowerCase().indexOf(filterText) > -1);
            }

            saleInvoiceStatusBranch.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsSIStatusBranch();
            });

            SIStatusGridBranch.dispose();
            SIStatusGridBranch = new wijmo.grid.FlexGrid('#salesInvoiceStatusGridBranch');
            SIStatusGridBranch.initialize({
                columns: [
                    {
                        "header": "SI Number",
                        "binding": "SINumber",
                        "allowSorting": true,
                        "isReadOnly": true,
                        "width": "1.5*"
                    },
                    {
                        "header": "Date",
                        "binding": "SIDate",
                        "allowSorting": true,
                        "isReadOnly": true,
                        "width": "1.5*"
                    },
                    {
                        "header": "Customer",
                        "binding": "Customer",
                        "allowSorting": true,
                        "isReadOnly": true,
                        "width": "3*"
                    },
                    {
                        "header": "SI Amount",
                        "binding": "AmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "isReadOnly": true,
                        "width": "2*"
                    },
                    {
                        "header": "Payments",
                        "binding": "PaidAmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "isReadOnly": true,
                        "width": "2*"
                    },
                    {
                        "header": "Adjustments",
                        "binding": "AdjustmentAmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "isReadOnly": true,
                        "width": "2*"
                    },
                    {
                        "header": "Balance",
                        "binding": "BalanceAmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "isReadOnly": true,
                        "width": "2*"
                    },
                    {
                        "header": "Pick",
                        "binding": "Pick",
                        "allowSorting": true,
                        "isReadOnly": true,
                        "width": 60,
                        "align": "center",
                        "allowResizing": false,
                        "allowSorting": false,
                        "isContentHtml": true
                    },
                    {
                        "header": "Unpick",
                        "binding": "Unpick",
                        "allowSorting": true,
                        "isReadOnly": true,
                        "width": 75,
                        "align": "center",
                        "allowResizing": false,
                        "allowSorting": false,
                        "isContentHtml": true
                    },
                    {
                        "header": "Amount",
                        "binding": "BalanceDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "isReadOnly": true,
                        "width": "2*"
                    },
                ],
                autoGenerateColumns: false,
                itemsSource: saleInvoiceStatusBranch,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            SIStatusGridBranch.trackChanges = true;

            var hr = new wijmo.grid.Row();
            SIStatusGridBranch.allowMerging = wijmo.grid.AllowMerging.AllHeaders;
            SIStatusGridBranch.columnHeaders.rows.push(hr);
            SIStatusGridBranch.columnHeaders.rows[0].allowMerging = true;

            SIStatusGridBranch.columnHeaders.columns[0].allowMerging = true;
            SIStatusGridBranch.columnHeaders.setCellData(0, 0, 'SI Number');

            SIStatusGridBranch.columnHeaders.columns[1].allowMerging = true;
            SIStatusGridBranch.columnHeaders.setCellData(0, 1, 'Date');

            SIStatusGridBranch.columnHeaders.columns[2].allowMerging = true;
            SIStatusGridBranch.columnHeaders.setCellData(0, 2, 'Customer');

            for (var columnQuantityTopAssigned = 3; columnQuantityTopAssigned <= 6; columnQuantityTopAssigned++) {
                SIStatusGridBranch.columnHeaders.setCellData(0, columnQuantityTopAssigned, 'Amount');
            }

            SIStatusGridBranch.columnHeaders.columns[7].allowMerging = true;
            SIStatusGridBranch.columnHeaders.setCellData(0, 7, 'Pick');

            SIStatusGridBranch.columnHeaders.columns[8].allowMerging = true;
            SIStatusGridBranch.columnHeaders.setCellData(0, 8, 'Unpick');

            SIStatusGridBranch.columnHeaders.columns[9].allowMerging = true;
            SIStatusGridBranch.columnHeaders.setCellData(0, 9, 'Amount');

            if (!isARClickedBranch) {
                updateNavigateButtonsSIStatusBranch();

                btnFirstPageGridSIStatusBranch.addEventListener('click', function () {
                    saleInvoiceStatusBranch.moveToFirstPage();
                    currentSIStatusPageIndexBranch = saleInvoiceStatusBranch.pageIndex + 1;
                    updateNavigateButtonsSIStatusBranch();
                });

                btnPreviousPageGridSIStatusBranch.addEventListener('click', function () {
                    saleInvoiceStatusBranch.moveToPreviousPage();
                    currentSIStatusPageIndexBranch = saleInvoiceStatusBranch.pageIndex + 1;
                    updateNavigateButtonsSIStatusBranch();
                });

                btnNextPageGridSIStatusBranch.addEventListener('click', function () {
                    saleInvoiceStatusBranch.moveToNextPage();
                    currentSIStatusPageIndexBranch = saleInvoiceStatusBranch.pageIndex + 1;
                    updateNavigateButtonsSIStatusBranch();
                });

                btnLastPageGridSIStatusBranch.addEventListener('click', function () {
                    saleInvoiceStatusBranch.moveToLastPage();
                    currentSIStatusPageIndexBranch = saleInvoiceStatusBranch.pageIndex + 1;
                    updateNavigateButtonsSIStatusBranch();
                });

                isARClickedBranch = true;
            }
        }

        function getSalesInvoiceByCustomerByBalance() {
            var saleInvoiceStatus = new wijmo.collections.ObservableArray;

            var startDate = cboStartDateSIFilter.value.toLocaleDateString().replace(/\//g, '-');
            var endDate = cboEndDateSIFilter.value.toLocaleDateString().replace(/\//g, '-');

            $.ajax({
                url: '/api/collectionLine/popUp/list/salesInvoiceStatus/' + cboORCustomer.selectedValue + '/' + startDate + '/' + endDate,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    $('#btnIdApplyAllSI').prop("disabled", false);
                    var totalSIAmount = 0;
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {

                            var SIDateResult = new Date(results[i]["SIDate"])
                            var SIDate = ('0' + (SIDateResult.getMonth() + 1)).slice(-2) + '-' + ('0' + SIDateResult.getDate()).slice(-2) + '-' + SIDateResult.getFullYear();

                            saleInvoiceStatus.push({
                                Id: results[i]["Id"],
                                BranchId: results[i]["BranchId"],
                                Branch: results[i]["Branch"],
                                SINumber: results[i]["SINumber"],
                                SIDate: SIDate,
                                ManualSINumber: results[i]["ManualSINumber"],
                                Remarks: results[i]["Remarks"],
                                Amount: results[i]["Amount"],
                                AmountDisplay: parseFloat(results[i]["Amount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                PaidAmount: results[i]["PaidAmount"],
                                PaidAmountDisplay: parseFloat(results[i]["PaidAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                AdjustmentAmount: results[i]["AdjustmentAmount"],
                                AdjustmentAmountDisplay: parseFloat(results[i]["AdjustmentAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                BalanceAmount: results[i]["BalanceAmount"],
                                BalanceAmountDisplay: parseFloat(results[i]["BalanceAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                Balance: results[i]["BalanceAmount"],
                                BalanceDisplay: parseFloat(results[i]["BalanceAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                Pick: "<button class='btn btn-primary btn-xs btn-block' onclick='btnPickAmount()'><i class='fa fa-hand-o-right'></i> Pick</button>",
                                Unpick: "<button class='btn btn-danger btn-xs btn-block' onclick='btnUnpickAmountReverse()'><i class='fa fa-hand-o-left'></i> Unpick</button>"
                            });

                            totalSIAmount += results[i]["BalanceAmount"];
                        }
                    } else {
                        $('#btnIdApplyAllSI').prop("disabled", true);
                    }

                    document.getElementById("totalSIAmount").value = parseFloat(totalSIAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");

                    $('#loadingSIStatus').hide();
                    $('#statusGrid').show();
                }
            });

            return saleInvoiceStatus;
        }

        // =========================
        // Update Navigation Buttons
        // =========================
        function updateNavigateButtonsSIStatus() {
            if (saleInvoiceStatus.pageSize <= 0) {
                document.getElementById('naviagtionPageGridSIStatus').style.display = 'none';
                return;
            }
            document.getElementById('naviagtionPageGridSIStatus').style.display = 'block';
            if (saleInvoiceStatus.pageIndex === 0) {
                btnFirstPageGridSIStatus.setAttribute('disabled', 'disabled');
                btnPreviousPageGridSIStatus.setAttribute('disabled', 'disabled');
                btnNextPageGridSIStatus.removeAttribute('disabled');
                btnLastPageGridSIStatus.removeAttribute('disabled');
            } else if (saleInvoiceStatus.pageIndex === (saleInvoiceStatus.pageCount - 1)) {
                btnFirstPageGridSIStatus.removeAttribute('disabled');
                btnPreviousPageGridSIStatus.removeAttribute('disabled');
                btnNextPageGridSIStatus.setAttribute('disabled', 'disabled');
                btnLastPageGridSIStatus.setAttribute('disabled', 'disabled');
            } else {
                btnFirstPageGridSIStatus.removeAttribute('disabled');
                btnPreviousPageGridSIStatus.removeAttribute('disabled');
                btnNextPageGridSIStatus.removeAttribute('disabled');
                btnLastPageGridSIStatus.removeAttribute('disabled');
            }
            btnCurrentPageGridSIStatus.innerHTML = (saleInvoiceStatus.pageIndex + 1) + ' / ' + saleInvoiceStatus.pageCount;
        }

        // =========================
        // Sales Invoice Status Grid
        // =========================
        function createSalesInvoiceStatusFlexGrid() {
            saleInvoiceStatus = new wijmo.collections.CollectionView(getSalesInvoiceByCustomerByBalance());
            saleInvoiceStatus.canFilter = true;
            saleInvoiceStatus.pageSize = 10;

            var filterText = '';
            $('#SIStatusFilter').keyup(function () {
                filterText = this.value.toLowerCase();

                setTimeout(function () {
                    var totalALLSIAmount = 0
                    saleInvoiceStatus.moveToFirstPage();
                    for (var p = 1; p <= saleInvoiceStatus.pageCount; p++) {
                        var totalCurrentPageSIAmount = 0
                        for (var i = 0; i < saleInvoiceStatus.items.length; i++) {
                            totalCurrentPageSIAmount += parseFloat(saleInvoiceStatus.items[i].Balance);
                        }

                        totalALLSIAmount += parseFloat(totalCurrentPageSIAmount);
                        saleInvoiceStatus.moveToNextPage();
                        if (p == saleInvoiceStatus.pageCount) {
                            saleInvoiceStatus.moveToPage(currentSIStatusPageIndex - 1);
                        }
                    }

                    document.getElementById("totalSIAmount").value = parseFloat(totalALLSIAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                    $('#pickBalanceAmountModal').modal('hide');
                }, 300);

                saleInvoiceStatus.refresh();
            });

            saleInvoiceStatus.filter = function (item) {
                return !filterText || (item.SINumber.toLowerCase().indexOf(filterText) > -1)
                    || (item.Remarks.toLowerCase().indexOf(filterText) > -1);
            }

            saleInvoiceStatus.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsSIStatus();
            });

            SIStatusGrid.dispose();
            SIStatusGrid = new wijmo.grid.FlexGrid('#salesInvoiceStatusGrid');
            SIStatusGrid.initialize({
                columns: [
                    {
                        "header": "SI Number",
                        "binding": "SINumber",
                        "allowSorting": true,
                        "isReadOnly": true,
                        "width": "1.5*"
                    },
                    {
                        "header": "Date",
                        "binding": "SIDate",
                        "allowSorting": true,
                        "isReadOnly": true,
                        "width": "1.5*"
                    },
                    {
                        "header": "Particulars",
                        "binding": "Remarks",
                        "allowSorting": true,
                        "isReadOnly": true,
                        "width": "3*"
                    },
                    {
                        "header": "SI Amount",
                        "binding": "AmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "isReadOnly": true,
                        "width": "2*"
                    },
                    {
                        "header": "Payments",
                        "binding": "PaidAmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "isReadOnly": true,
                        "width": "2*"
                    },
                    {
                        "header": "Adjustments",
                        "binding": "AdjustmentAmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "isReadOnly": true,
                        "width": "2*"
                    },
                    {
                        "header": "Balance",
                        "binding": "BalanceAmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "isReadOnly": true,
                        "width": "2*"
                    },
                    {
                        "header": "Pick",
                        "binding": "Pick",
                        "allowSorting": true,
                        "isReadOnly": true,
                        "width": 60,
                        "align": "center",
                        "allowResizing": false,
                        "allowSorting": false,
                        "isContentHtml": true
                    },
                    {
                        "header": "Unpick",
                        "binding": "Unpick",
                        "allowSorting": true,
                        "isReadOnly": true,
                        "width": 75,
                        "align": "center",
                        "allowResizing": false,
                        "allowSorting": false,
                        "isContentHtml": true
                    },
                    {
                        "header": "Amount",
                        "binding": "BalanceDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "isReadOnly": true,
                        "width": "2*"
                    },
                ],
                autoGenerateColumns: false,
                itemsSource: saleInvoiceStatus,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            SIStatusGrid.trackChanges = true;

            var hr = new wijmo.grid.Row();
            SIStatusGrid.allowMerging = wijmo.grid.AllowMerging.AllHeaders;
            SIStatusGrid.columnHeaders.rows.push(hr);
            SIStatusGrid.columnHeaders.rows[0].allowMerging = true;

            SIStatusGrid.columnHeaders.columns[0].allowMerging = true;
            SIStatusGrid.columnHeaders.setCellData(0, 0, 'SI Number');

            SIStatusGrid.columnHeaders.columns[1].allowMerging = true;
            SIStatusGrid.columnHeaders.setCellData(0, 1, 'Date');

            SIStatusGrid.columnHeaders.columns[2].allowMerging = true;
            SIStatusGrid.columnHeaders.setCellData(0, 2, 'Particulars');

            for (var columnQuantityTopAssigned = 3; columnQuantityTopAssigned <= 6; columnQuantityTopAssigned++) {
                SIStatusGrid.columnHeaders.setCellData(0, columnQuantityTopAssigned, 'Amount');
            }

            SIStatusGrid.columnHeaders.columns[7].allowMerging = true;
            SIStatusGrid.columnHeaders.setCellData(0, 7, 'Pick');

            SIStatusGrid.columnHeaders.columns[8].allowMerging = true;
            SIStatusGrid.columnHeaders.setCellData(0, 8, 'Unpick');

            SIStatusGrid.columnHeaders.columns[9].allowMerging = true;
            SIStatusGrid.columnHeaders.setCellData(0, 9, 'Amount');

            if (!isARClicked) {
                updateNavigateButtonsSIStatus();

                btnFirstPageGridSIStatus.addEventListener('click', function () {
                    saleInvoiceStatus.moveToFirstPage();
                    currentSIStatusPageIndex = saleInvoiceStatus.pageIndex + 1;
                    updateNavigateButtonsSIStatus();
                });

                btnPreviousPageGridSIStatus.addEventListener('click', function () {
                    saleInvoiceStatus.moveToPreviousPage();
                    currentSIStatusPageIndex = saleInvoiceStatus.pageIndex + 1;
                    updateNavigateButtonsSIStatus();
                });

                btnNextPageGridSIStatus.addEventListener('click', function () {
                    saleInvoiceStatus.moveToNextPage();
                    currentSIStatusPageIndex = saleInvoiceStatus.pageIndex + 1;
                    updateNavigateButtonsSIStatus();
                });

                btnLastPageGridSIStatus.addEventListener('click', function () {
                    saleInvoiceStatus.moveToLastPage();
                    currentSIStatusPageIndex = saleInvoiceStatus.pageIndex + 1;
                    updateNavigateButtonsSIStatus();
                });

                isARClicked = true;
            }
        }

        function btnPickBranchAmount() {
            $('#pickBalanceAmountModalBranch').modal({
                show: true,
                backdrop: 'static'
            });

            $("#savePickAmountBranch").prop("disabled", false);
            $("#closePickAmountModalBranch").prop("disabled", false);

            saleInvoiceStatusBranch.editItem(saleInvoiceStatusBranch.currentItem);
            var saleInvoice = saleInvoiceStatusBranch.currentEditItem;
            var balance = saleInvoice.Amount - saleInvoice.PaidAmount;
            document.getElementById("pickAmountBranch").value = parseFloat(balance).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        }

        function btnSavePickAmountBranchOnclick() {
            $("#savePickAmountBranch").prop("disabled", true);
            $("#closePickAmountModalBranch").prop("disabled", true);

            var isValid = true;
            $('.requiredPickedAmountBranch').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                } else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            if (isValid) {
                saleInvoiceStatusBranch.editItem(saleInvoiceStatusBranch.currentItem);
                var saleInvoice = saleInvoiceStatusBranch.currentEditItem;
                var balance = document.getElementById("pickAmountBranch").value.split(",").join("");

                if (isNaN(balance)) {
                    toastr.error("Invalid Entry");

                    $("#savePickAmountBranch").prop("disabled", false);
                    $("#closePickAmountModalBranch").prop("disabled", false);
                } else {
                    saleInvoice.Balance = balance;
                    saleInvoice.BalanceDisplay = parseFloat(balance).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");

                    setTimeout(function () {
                        var totalALLSIAmount = 0
                        saleInvoiceStatusBranch.moveToFirstPage();
                        for (var p = 1; p <= saleInvoiceStatusBranch.pageCount; p++) {
                            var totalCurrentPageSIAmount = 0
                            for (var i = 0; i < saleInvoiceStatusBranch.items.length; i++) {
                                totalCurrentPageSIAmount += parseFloat(saleInvoiceStatusBranch.items[i].Balance);
                            }

                            totalALLSIAmount += parseFloat(totalCurrentPageSIAmount);
                            saleInvoiceStatusBranch.moveToNextPage();
                            if (p == saleInvoiceStatusBranch.pageCount) {
                                saleInvoiceStatusBranch.moveToPage(currentSIStatusPageIndexBranch - 1);
                            }
                        }

                        document.getElementById("totalSIAmountBranch").value = parseFloat(totalALLSIAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        $('#pickBalanceAmountModalBranch').modal('hide');
                    }, 100);

                    saleInvoiceStatusBranch.refresh();
                    SIStatusGridBranch.refresh();
                }
            } else {
                toastr.error("Invalid Entry");
            }
        }

        // ===============
        // REPICK quantity
        // ===============
        function btnUnpickBranchAmountReverse() {
            saleInvoiceStatusBranch.editItem(saleInvoiceStatusBranch.currentItem);
            var saleInvoice = saleInvoiceStatusBranch.currentEditItem;
            saleInvoice.Balance = 0;
            saleInvoice.BalanceDisplay = parseFloat(0).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");

            setTimeout(function () {
                var totalALLSIAmount = 0
                saleInvoiceStatusBranch.moveToFirstPage();
                for (var p = 1; p <= saleInvoiceStatusBranch.pageCount; p++) {
                    var totalCurrentPageSIAmount = 0
                    for (var i = 0; i < saleInvoiceStatusBranch.items.length; i++) {
                        totalCurrentPageSIAmount += parseFloat(saleInvoiceStatusBranch.items[i].Balance);
                    }

                    totalALLSIAmount += parseFloat(totalCurrentPageSIAmount);
                    saleInvoiceStatusBranch.moveToNextPage();
                    if (p == saleInvoiceStatusBranch.pageCount) {
                        saleInvoiceStatusBranch.moveToPage(currentSIStatusPageIndexBranch - 1);
                    }
                }

                document.getElementById("totalSIAmountBranch").value = parseFloat(totalALLSIAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                $('#pickBalanceAmountModal').modal('hide');
            }, 100);

            saleInvoiceStatusBranch.refresh();
            SIStatusGridBranch.refresh();
        }

        // =============
        // PICK quantity
        // =============
        function btnPickAmount() {
            $('#pickBalanceAmountModal').modal({
                show: true,
                backdrop: 'static'
            });

            $("#savePickAmount").prop("disabled", false);
            $("#closePickAmountModal").prop("disabled", false);

            saleInvoiceStatus.editItem(saleInvoiceStatus.currentItem);
            var saleInvoice = saleInvoiceStatus.currentEditItem;
            var balance = saleInvoice.Amount - saleInvoice.PaidAmount;
            document.getElementById("pickAmount").value = parseFloat(balance).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        }

        function btnSavePickAmountOnclick() {
            $("#savePickAmount").prop("disabled", true);
            $("#closePickAmountModal").prop("disabled", true);

            var isValid = true;
            $('.requiredPickedAmount').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                } else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            if (isValid) {
                saleInvoiceStatus.editItem(saleInvoiceStatus.currentItem);
                var saleInvoice = saleInvoiceStatus.currentEditItem;
                var balance = document.getElementById("pickAmount").value.split(",").join("");



                if (isNaN(balance)) {
                    toastr.error("Invalid Entry");

                    $("#savePickAmount").prop("disabled", false);
                    $("#closePickAmountModal").prop("disabled", false);
                } else {
                    saleInvoice.Balance = balance;
                    saleInvoice.BalanceDisplay = parseFloat(balance).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");

                    setTimeout(function () {
                        var totalALLSIAmount = 0
                        saleInvoiceStatus.moveToFirstPage();
                        for (var p = 1; p <= saleInvoiceStatus.pageCount; p++) {
                            var totalCurrentPageSIAmount = 0
                            for (var i = 0; i < saleInvoiceStatus.items.length; i++) {
                                totalCurrentPageSIAmount += parseFloat(saleInvoiceStatus.items[i].Balance);
                            }

                            totalALLSIAmount += parseFloat(totalCurrentPageSIAmount);
                            saleInvoiceStatus.moveToNextPage();
                            if (p == saleInvoiceStatus.pageCount) {
                                saleInvoiceStatus.moveToPage(currentSIStatusPageIndex - 1);
                            }
                        }

                        document.getElementById("totalSIAmount").value = parseFloat(totalALLSIAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        $('#pickBalanceAmountModal').modal('hide');
                    }, 100);

                    saleInvoiceStatus.refresh();
                    SIStatusGrid.refresh();
                }
            } else {
                toastr.error("Invalid Entry");
            }
        }

        // ===============
        // REPICK quantity
        // ===============
        function btnUnpickAmountReverse() {
            saleInvoiceStatus.editItem(saleInvoiceStatus.currentItem);
            var saleInvoice = saleInvoiceStatus.currentEditItem;
            saleInvoice.Balance = 0;
            saleInvoice.BalanceDisplay = parseFloat(0).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");

            setTimeout(function () {
                var totalALLSIAmount = 0
                saleInvoiceStatus.moveToFirstPage();
                for (var p = 1; p <= saleInvoiceStatus.pageCount; p++) {
                    var totalCurrentPageSIAmount = 0
                    for (var i = 0; i < saleInvoiceStatus.items.length; i++) {
                        totalCurrentPageSIAmount += parseFloat(saleInvoiceStatus.items[i].Balance);
                    }

                    totalALLSIAmount += parseFloat(totalCurrentPageSIAmount);
                    saleInvoiceStatus.moveToNextPage();
                    if (p == saleInvoiceStatus.pageCount) {
                        saleInvoiceStatus.moveToPage(currentSIStatusPageIndex - 1);
                    }
                }

                document.getElementById("totalSIAmount").value = parseFloat(totalALLSIAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                $('#pickBalanceAmountModal').modal('hide');
            }, 100);

            saleInvoiceStatus.refresh();
            SIStatusGrid.refresh();
        }

        function btnOnclickApplyAllSI() {
            $('#applyAllAmount').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById('cmdConfirmApplyAllAmount').innerHTML = "<i class='fa fa-check'></i> Apply";
            $("#cmdConfirmApplyAllAmount").prop("disabled", false);
            $("#cmdCloseButtonApplyAllAmount").prop("disabled", false);
        }

        function btnConfrimApplyAllAmount_OnClick() {
            document.getElementById('cmdConfirmApplyAllAmount').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Applying";
            $("#cmdConfirmApplyAllAmount").prop("disabled", true);
            $("#cmdCloseButtonApplyAllAmount").prop("disabled", true);

            var saleInvoiceArrays = new Array();

            if (isSIStatusCustomerSelected) {
                saleInvoiceStatus.moveToFirstPage();

                for (var p = 1; p <= saleInvoiceStatus.pageCount; p++) {
                    for (var i = 0; i < saleInvoiceStatus.items.length; i++) {
                        var item = saleInvoiceStatus.items[i];
                        if (item.Balance > 0) {
                            saleInvoiceArrays.push({
                                SIId: item.Id,
                                Amount: item.Balance,
                                PayTypeId: cboSIStatusPayType.selectedValue,
                                CheckNumber: document.getElementById("SIStatus_checkNo").value,
                                CheckDate: cboSIStatusCheckDate.value,
                                CheckBank: document.getElementById("SIStatus_checkBank").value,
                                DepositoryBankId: cboSIStatusDepositoryBank.selectedValue,
                                IsClear: document.getElementById("SIStatus_Clear").checked
                            });
                        }
                    }

                    saleInvoiceStatus.moveToNextPage();
                    if (p == saleInvoiceStatus.pageCount) {
                        saleInvoiceStatus.moveToPage(currentSIStatusPageIndex - 1);
                    }
                }
            } else {
                if (isSIStatusBranchSelected) {
                    saleInvoiceStatusBranch.moveToFirstPage();

                    for (var p = 1; p <= saleInvoiceStatusBranch.pageCount; p++) {
                        for (var i = 0; i < saleInvoiceStatusBranch.items.length; i++) {
                            var item = saleInvoiceStatusBranch.items[i];
                            if (item.Balance > 0) {
                                saleInvoiceArrays.push({
                                    SIId: item.Id,
                                    Amount: item.Balance,
                                    PayTypeId: cboSIStatusPayType.selectedValue,
                                    CheckNumber: document.getElementById("SIStatus_checkNo").value,
                                    CheckDate: cboSIStatusCheckDate.value,
                                    CheckBank: document.getElementById("SIStatus_checkBank").value,
                                    DepositoryBankId: cboSIStatusDepositoryBank.selectedValue,
                                    IsClear: document.getElementById("SIStatus_Clear").checked
                                });
                            }
                        }

                        saleInvoiceStatusBranch.moveToNextPage();
                        if (p == saleInvoiceStatusBranch.pageCount) {
                            saleInvoiceStatusBranch.moveToPage(currentSIStatusPageIndexBranch - 1);
                        }
                    }
                }
            }

            var saleInvoiceItemsObjects = JSON.stringify(saleInvoiceArrays);
            var ORId = getParam("id");

            $.ajax({
                url: '/api/collectionLine/popUp/apply/salesInvoiceStatus/' + ORId,
                type: "POST",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: saleInvoiceItemsObjects,
                statusCode: {
                    200: function () {
                        toastr.success("Apply Successful");
                        $('#applyAllAmount').modal('hide');
                        $('#SalesStatus').modal('hide');
                        refreshCollectionLineFlexGrid();
                    },
                    404: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                        $('#applyAllAmount').modal('hide');
                        $('#SalesStatus').modal('hide');
                        document.getElementById('cmdConfirmApplyAllAmount').innerHTML = "<i class='fa fa-check'></i> Apply";
                        $("#cmdConfirmApplyAllAmount").prop("disabled", false);
                        $("#cmdCloseButtonApplyAllAmount").prop("disabled", false);
                    },
                    400: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                        $('#applyAllAmount').modal('hide');
                        $('#SalesStatus').modal('hide');
                        document.getElementById('cmdConfirmApplyAllAmount').innerHTML = "<i class='fa fa-check'></i> Apply";
                        $("#cmdConfirmApplyAllAmount").prop("disabled", false);
                        $("#cmdCloseButtonApplyAllAmount").prop("disabled", false);
                    },
                    500: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                        $('#applyAllAmount').modal('hide');
                        $('#SalesStatus').modal('hide');
                        document.getElementById('cmdConfirmApplyAllAmount').innerHTML = "<i class='fa fa-check'></i> Apply";
                        $("#cmdConfirmApplyAllAmount").prop("disabled", false);
                        $("#cmdCloseButtonApplyAllAmount").prop("disabled", false);
                    }
                }
            });
        }

        // ========
        // Advances
        // ========
        function collectionAdvances_OnClick() {
            $('#customerAdvances').modal({
                show: true,
                backdrop: 'static'
            });

            $('#loadingSIAdvances').show();
            document.getElementById("loadingSIAdvances").innerHTML = "<b><i class='fa fa-spinner fa-spin'></i></b>";
            $('#AdvancesGrid').hide();

            setTimeout(function () {
                createSIAdvances();
            }, 500);
        }

        function getJournalByArticleId() {
            var journalAdvances = new wijmo.collections.ObservableArray;
            $.ajax({
                url: '/api/collectionLine/popUp/list/customerAdvances/' + cboORCustomer.selectedValue,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            journalAdvances.push({
                                Id: results[i]["Id"],
                                BranchId: results[i]["BranchId"],
                                Branch: results[i]["Branch"],
                                AccountId: results[i]["AccountId"],
                                AccountCode: results[i]["AccountCode"],
                                Account: results[i]["Account"],
                                ArticleId: results[i]["ArticleId"],
                                Article: results[i]["Article"],
                                DebitAmount: results[i]["DebitAmount"],
                                DebitAmountDisplay: parseFloat(results[i]["DebitAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                CreditAmount: results[i]["CreditAmount"],
                                CreditAmountDisplay: parseFloat(results[i]["CreditAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                Balance: results[i]["Balance"],
                                BalanceDisplay: parseFloat(results[i]["Balance"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                Pick: "<button class='btn btn-primary btn-xs' onclick='btnApplyAdvancesOnclick()'><i class='fa fa-check'></i> Apply </button>"
                            });
                        }
                    }

                    $('#loadingSIAdvances').hide();
                    $('#AdvancesGrid').show();
                }
            });
            return journalAdvances;
        }

        // =========================
        // Update Navigation Buttons
        // =========================
        function updateNavigateButtonsSIAdvances() {
            if (SIAdvances.pageSize <= 0) {
                document.getElementById('naviagtionPageGridSIAdvances').style.display = 'none';
                return;
            }
            document.getElementById('naviagtionPageGridSIAdvances').style.display = 'block';
            if (SIAdvances.pageIndex === 0) {
                btnFirstPageGridSIAdvances.setAttribute('disabled', 'disabled');
                btnPreviousPageGridSIAdvances.setAttribute('disabled', 'disabled');
                btnNextPageGridSIAdvances.removeAttribute('disabled');
                btnLastPageGridSIAdvances.removeAttribute('disabled');
            } else if (SIAdvances.pageIndex === (SIAdvances.pageCount - 1)) {
                btnFirstPageGridSIAdvances.removeAttribute('disabled');
                btnPreviousPageGridSIAdvances.removeAttribute('disabled');
                btnNextPageGridSIAdvances.setAttribute('disabled', 'disabled');
                btnLastPageGridSIAdvances.setAttribute('disabled', 'disabled');
            } else {
                btnFirstPageGridSIAdvances.removeAttribute('disabled');
                btnPreviousPageGridSIAdvances.removeAttribute('disabled');
                btnNextPageGridSIAdvances.removeAttribute('disabled');
                btnLastPageGridSIAdvances.removeAttribute('disabled');
            }
            btnCurrentPageGridSIAdvances.innerHTML = (SIAdvances.pageIndex + 1) + ' / ' + SIAdvances.pageCount;
        }

        var isAdvancesClicked = false;

        // ================
        // SI Advances Grid
        // ================
        function createSIAdvances() {
            SIAdvances = new wijmo.collections.CollectionView(getJournalByArticleId());
            SIAdvances.pageSize = 10;

            var filterText = '';
            $('#SIAdvancesFilter').keyup(function () {
                filterText = this.value.toLowerCase();
                SIAdvances.refresh();
            });

            SIAdvances.filter = function (item) {
                return !filterText || (item.AccountCode.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Account.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Article.toLowerCase().indexOf(filterText) > -1);
            }

            SIAdvances.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsSIAdvances();
            });

            SIAdvancesGrid.dispose();
            SIAdvancesGrid = new wijmo.grid.FlexGrid('#SIAdvancesGrid');
            SIAdvancesGrid.initialize({
                columns: [
                    {
                        "header": "Code",
                        "binding": "AccountCode",
                        "allowSorting": true,
                        "width": "1.5*"
                    },
                    {
                        "header": "Account",
                        "binding": "Account",
                        "allowSorting": true,
                        "width": "3*"
                    },
                    {
                        "header": "Article",
                        "binding": "Article",
                        "allowSorting": true,
                        "width": "3*"
                    },
                    {
                        "header": "Debit",
                        "binding": "DebitAmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": "2*"
                    },
                    {
                        "header": "Credit",
                        "binding": "CreditAmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": "2*"
                    },
                    {
                        "header": "Balance",
                        "binding": "Balance",
                        "allowSorting": true,
                        "width": "2*"
                    },
                    {
                        "header": "Apply",
                        "binding": "Pick",
                        "allowSorting": true,
                        "width": 70,
                        "align": "center",
                        "allowResizing": false,
                        "allowSorting": false,
                        "isContentHtml": true
                    },
                ],
                autoGenerateColumns: false,
                itemsSource: SIAdvances,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            SIAdvancesGrid.trackChanges = true;

            if (!isAdvancesClicked) {
                updateNavigateButtonsSIAdvances();

                btnFirstPageGridSIAdvances.addEventListener('click', function () {
                    SIAdvances.moveToFirstPage();
                    updateNavigateButtonsSIAdvances();
                });

                btnPreviousPageGridSIAdvances.addEventListener('click', function () {
                    SIAdvances.moveToPreviousPage();
                    updateNavigateButtonsSIAdvances();
                });

                btnNextPageGridSIAdvances.addEventListener('click', function () {
                    SIAdvances.moveToNextPage();
                    updateNavigateButtonsSIAdvances();
                });

                btnLastPageGridSIAdvances.addEventListener('click', function () {
                    SIAdvances.moveToLastPage();
                    updateNavigateButtonsSIAdvances();
                });

                isAdvancesClicked = true;
            }
        }

        function btnApplyAdvancesOnclick() {
            $('#applyAdvances').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById('cmdConfirmApplyAdvances').innerHTML = "<i class='fa fa-check'></i> Apply";
            $("#cmdConfirmApplyAdvances").prop("disabled", false);
            $("#cmdCloseButtonApplyAdvances").prop("disabled", false);
        }

        function btnConfrimApplyAdvances_OnClick() {
            document.getElementById('cmdConfirmApplyAdvances').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Applying";
            $("#cmdConfirmApplyAdvances").prop("disabled", true);
            $("#cmdCloseButtonApplyAdvances").prop("disabled", true);

            SIAdvances.editItem(SIAdvances.currentItem);
            var SIAdvancesItem = SIAdvances.currentEditItem;

            var ORId = getParam("id");

            var salesInvoicesAdvancesObject = new Object();
            salesInvoicesAdvancesObject.AccountId = SIAdvancesItem.AccountId;
            salesInvoicesAdvancesObject.ArticleId = SIAdvancesItem.ArticleId;
            var salesInvoicesAdvancesData = JSON.stringify(salesInvoicesAdvancesObject);

            $.ajax({
                url: '/api/collectionLine/popUp/apply/customerAdvances/' + ORId,
                type: "POST",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: salesInvoicesAdvancesData,
                statusCode: {
                    200: function () {
                        toastr.success("Apply Successful");
                        $('#applyAdvances').modal('hide');
                        refreshCollectionLineFlexGrid();
                    },
                    404: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                        $('#applyAdvances').modal('hide');
                        document.getElementById('cmdConfirmApplyAdvances').innerHTML = "<i class='fa fa-check'></i> Apply";
                        $("#cmdConfirmApplyAdvances").prop("disabled", false);
                        $("#cmdCloseButtonApplyAdvances").prop("disabled", false);
                    },
                    400: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                        $('#applyAdvances').modal('hide');
                        document.getElementById('cmdConfirmApplyAdvances').innerHTML = "<i class='fa fa-check'></i> Apply";
                        $("#cmdConfirmApplyAdvances").prop("disabled", false);
                        $("#cmdCloseButtonApplyAdvances").prop("disabled", false);
                    },
                    500: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                        $('#applyAdvances').modal('hide');
                        document.getElementById('cmdConfirmApplyAdvances').innerHTML = "<i class='fa fa-check'></i> Apply";
                        $("#cmdConfirmApplyAdvances").prop("disabled", false);
                        $("#cmdCloseButtonApplyAdvances").prop("disabled", false);
                    }
                }
            });
        }

        $('#SIStatussalesInvoicetab').click(function () {
            isSIStatusCustomerSelected = true;
            isSIStatusBranchSelected = false;

            $('#SIStatussalesInvoice').show();
            $('#SIStatussalesInvoiceBranch').hide();
            $('#SIStatuspayType').hide();

            $('#loadingSIStatus').show();
            document.getElementById("loadingSIStatus").innerHTML = "<b><i class='fa fa-spinner fa-spin'></i></b>";
            $('#statusGrid').hide();
            $('#btnIdApplyAllSI').prop("disabled", true);

            setTimeout(function () {
                createSalesInvoiceStatusFlexGrid();
            }, 500);

            $('#btnIdApplyAllSI').show();
        });

        $('#SIStatussalesInvoiceBranchtab').click(function () {
            isSIStatusCustomerSelected = false;
            isSIStatusBranchSelected = true;

            $('#loadingSIStatusBranch').show();
            document.getElementById("loadingSIStatusBranch").innerHTML = "<b><i class='fa fa-spinner fa-spin'></i></b>";
            $('#statusGridBranch').hide();
            $('#btnIdApplyAllSI').prop("disabled", true);

            setTimeout(function () {
                createSalesInvoiceStatusFlexGridBranch();
            }, 500);

            $('#SIStatussalesInvoice').hide();
            $('#SIStatussalesInvoiceBranch').show();
            $('#SIStatuspayType').hide();

            $('#btnIdApplyAllSI').show();
        });

        $('#SIStatuspayTypestatusTab').click(function () {
            isSIStatusCustomerSelected = false;
            isSIStatusBranchSelected = false;

            $('#SIStatussalesInvoice').hide();
            $('#SIStatussalesInvoiceBranch').hide();
            $('#SIStatuspayType').show();


            $('#btnIdApplyAllSI').hide();
        });

        // ===========
        // OnLoad Page
        // ===========
        $(document).ready(function () {
            getBranchesForComboBox();

            $(document).on('show.bs.modal', '.modal', function (event) {
                var zIndex = 1040 + (10 * $('.modal:visible').length);
                $(this).css('z-index', zIndex);
                setTimeout(function () {
                    $('.modal-backdrop').not('.modal-stack').css('z-index', zIndex - 1).addClass('modal-stack');
                }, 0);
            });

            $(document).on('hidden.bs.modal', '.modal', function () {
                $('.modal:visible').length && $(document.body).addClass('modal-open');
            });
        });
    </script>
    <script type="text/javascript">
        var cboUserBranches = new wijmo.input.ComboBox('#cboUserBranches');
        function getUserBranches() {
            $("#loadingUserBranches").show();
            document.getElementById("loadingUserBranches").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#userBranchContent").hide();

            $('#userBranchesModal').modal({ show: true, backdrop: 'static' });

            document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
            $("#updateUserBranch").prop("disabled", false);
            $("#closeUserBranch").prop("disabled", false);

            var userBranchesObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/userBranch/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (userBranchesresults) {
                    if (userBranchesresults.length > 0) {
                        for (i = 0; i < userBranchesresults.length; i++) {
                            userBranchesObservableArray.push({
                                BranchId: userBranchesresults[i]["BranchId"],
                                Branch: userBranchesresults[i]["Branch"]
                            });
                        }
                    }

                    var currentBranch = "@ViewData["BranchId"]";
                    cboUserBranches.dispose();
                    cboUserBranches = new wijmo.input.ComboBox('#cboUserBranches', {
                        isEditable: false,
                        placeholder: "Select Branches",
                        itemsSource: userBranchesObservableArray,
                        displayMemberPath: "Branch",
                        selectedValuePath: "BranchId",
                        selectedValue: currentBranch
                    });

                    setTimeout(function () {
                        $("#loadingUserBranches").hide();
                        $("#userBranchContent").show();
                    }, 500)
                }
            });
        }

        function updateUserBranchOnclick() {
            document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Updating";
            $("#updateUserBranch").prop("disabled", true);
            $("#closeUserBranch").prop("disabled", true);

            var userBranchObject = new Object();
            userBranchObject.BranchId = cboUserBranches.selectedValue;
            var userBranchData = JSON.stringify(userBranchObject);

            $.ajax({
                type: "PUT",
                url: '/api/userBranch/update',
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: userBranchData,
                statusCode: {
                    200: function () {
                        toastr.success("Update Successful");
                        window.setTimeout(function () {
                            location.reload()
                        }, 1000);
                    },
                    404: function () {
                        toastr.error("Not Found");
                        document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
                        $("#updateUserBranch").prop("disabled", false);
                        $("#closeUserBranch").prop("disabled", false);
                    },
                    500: function () {
                        toastr.error("Bad Request");
                        document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
                        $("#updateUserBranch").prop("disabled", false);
                        $("#closeUserBranch").prop("disabled", false);
                    }
                }
            });
        }
    </script>
    <script type="text/javascript">
        var slideLeft = new Menu({
            wrapper: '#o-wrapper',
            type: 'slide-left',
            menuOpenerClass: '.c-button',
            maskId: '#c-mask'
        });

        var slideLeftBtn = document.querySelector('#c-button--slide-left');

        slideLeftBtn.addEventListener('click', function (e) {
            e.preventDefault;
            slideLeft.open();
        });
    </script>
</body>
</html>