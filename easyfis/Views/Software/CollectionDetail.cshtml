@model easyfis.Entities.MstUserForm
@{
    // =====================
    // User Rights Variables
    // =====================
    var canAdd = Model.CanAdd;
    var canEdit = Model.CanEdit;
    var canDelete = Model.CanDelete;
    var canLock = Model.CanLock;
    var canUnlock = Model.CanUnlock;
    var canCancel = Model.CanCancel;
    var canPrint = Model.CanPrint;
}
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">
    <link rel="shortcut icon" href="~/Images/icon/easyfislogomini.ico">
    <title>Collection Detail</title>

    @Styles.Render("~/Content/Software-css")
</head>
<body>
    <div id="o-wrapper" class="o-wrapper">
        <main class="o-content">
            @Html.Partial("_SoftwareHeader")

            <section class="content-header">
                <div class="container">
                    <h3>
                        Collection Detail
                    </h3>
                    <p>
                        <i class="fa fa-building-o fa-fw"></i> &nbsp; @ViewData["Company"] <br />
                        <i class="fa fa-home fa-fw"></i> &nbsp; <a href="#" onclick="getUserBranches()" style="color: white;">@ViewData["Branch"]</a>
                    </p>
                </div>
            </section>
            <section class="container">
                <div class="panel panel-default">

                    <!--
                        ======================================================
                        Options: Journal, Lock, Unlock, Print and Close Button
                        ======================================================
                    -->
                    <div class="panel-heading">
                        <div class="row">
                            <div class="col-md-2">
                                <button class="btn btn-primary" id="btnCollectionDetailSave" onclick="btnCollectionDetailSaveOnclick()"><i class="fa fa-save"></i> Save</button>
                            </div>
                            <div class="col-md-10" align="right">
                                <button class="btn btn-primary" id="btnCollectionDetailJournal" onclick="btnCollectionDetailJournalOnclick()"><i class="fa fa-book"></i> Journal</button>
                                @{
                                    if (canLock)
                                    {
                                        <button class="btn btn-primary" id="btnCollectionDetailLock" onclick="btnCollectionDetailLockOnclick()"><i class="fa fa-lock"></i> Lock</button>
                                    }
                                    if (canUnlock)
                                    {
                                        <button class="btn btn-primary" id="btnCollectionDetailUnlock" onclick="btnCollectionDetailUnlockOnclick()"><i class="fa fa-unlock"></i> Unlock</button>
                                    }
                                    if (canPrint)
                                    {
                                        <button class="btn btn-primary" id="btnCollectionDetailPrint" onclick="btnCollectionDetailPrintOnclick()"><i class="fa fa-print"></i> Print</button>
                                    }
                                    if (canCancel)
                                    {
                                        <button class="btn btn-warning" id="btnCollectionDetailCancel" onclick="btnCollectionDetailCancelOnclick()"><i class="fa fa-times-circle-o"></i> Cancel</button>
                                    }
                                }
                                <button class="btn btn-danger" id="btnCloseCollection" onclick="window.location.href = '/Software/Collection'"><i class="fa fa-times"></i> Close</button>
                            </div>
                        </div>
                    </div>

                    <!--
                        ======================================
                        Details, Fields and Other Informations
                        ======================================
                    -->
                    <div class="panel-body">
                        <form class="form-horizontal" role="form">
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Branch</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboCollectionDetailBranch"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">OR Number</label>
                                        <div class="col-sm-8">
                                            <input type="text" class="form-control requiredCollection" id="inpCollectionDetailORNumber" disabled />
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">OR Date</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboCollectionDetailORDate"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Manual OR Number</label>
                                        <div class="col-sm-8">
                                            <input type="text" class="form-control requiredCollection" id="inpCollectionDetailManualORNumber" placeholder="Manual OR Number" />
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Customer</label>
                                        <div class="col-sm-8">
                                            <div class="input-group">
                                                <div class="comboBox-wide" id="cboCollectionDetailCustomer"></div>
                                                <div class="input-group-btn">
                                                    <button type="button" class=" btn btn-primary" id="cmdAR" onclick="btnCollectionDetailAROnclick()">AR</button>
                                                    <button type="button" class="btn btn-primary" id="cmdAdvances" onclick="btnCustomerAdvancesOnclick()">Advances</button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Particulars</label>
                                        <div class="col-sm-8">
                                            <textarea rows="5" class="form-control textarea-custom requiredCollection" id="inpCollectionDetailParticulars" placeholder="Particulars"></textarea>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Status</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboCollectionDetailStatus"></div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Prepared by</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboCollectionDetailPreparedBy"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Checked by</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboCollectionDetailCheckedBy"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Approved by</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboCollectionDetailApprovedBy"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>

                <!--
                    ================
                    Collection Lines
                    ================
                -->
                <ul class="nav nav-tabs" role="tablist" id="myTab">
                    <li role="presentation" class="active"><a data-toggle="tab" href="#CollectionLine" id="itemTabId">Lines</a></li>
                </ul>
                <br />
                <div class="tab-content">
                    <div id="CollectionLine" class="tab-pane fade in active">
                        <div class="panel panel-default">

                            <!--
                                =====================================================================
                                Collection Lines: Search, Filter, Display Number of Rows and  Buttons
                                =====================================================================
                            -->
                            <div class="panel-heading">
                                <table style="width: 100%" border="0">
                                    <tr>
                                        <td style="width: 49.5%">
                                            <div class="input-group">
                                                <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                                <input type="text" class="form-control" id="inpCollectionLineSearchFilter" placeholder="Search...">
                                            </div>
                                        </td>
                                        <td style="width: 1%"></td>
                                        <td style="width: 24%">
                                            <div class="input-group">
                                                <span class="input-group-addon"><b><i class="fa fa-table"></i></b></span>
                                                <div class="comboBox-wide" id="cboCollectionLineDisplayNumberOfRows"></div>
                                            </div>
                                        </td>
                                        <td style="width: 1%"></td>
                                        <td style="width: 24.5%" align="right">
                                            @{
                                                if (canAdd)
                                                {
                                                    <button class="btn btn-primary" id="btnCollectionLineAdd" onclick="btnCollectionLineAddOnclick()"><i class="fa fa-plus"></i> Add</button>
                                                }
                                            }
                                        </td>
                                    </tr>
                                </table>
                            </div>

                            <!--
                                ===========================
                                Collection Lines: Flex Grid
                                ===========================
                            -->
                            <div class="panel-body">
                                <div id="collectionLineFlexGrid"></div>
                            </div>

                            <!--
                                ====================================
                                Collection Lines: Navigation Buttons
                                ====================================
                            -->
                            <div class="panel-footer">
                                <div class="row">
                                    <div class="btn-group col-md-7" id="collectionLineCollectionViewNavigationPageGrid">
                                        <button type="button" class="btn btn-default border-custom" id="btnCollectionLineMoveToFirstPageGrid">
                                            <span class="glyphicon glyphicon-fast-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" id="btnCollectionLineMoveToPreviousPageGrid">
                                            <span class="glyphicon glyphicon-step-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnCollectionLineCurrentPageGrid"></button>
                                        <button type="button" class="btn btn-default border-custom" id="btnCollectionLineMoveToNextPageGrid">
                                            <span class="glyphicon glyphicon-step-forward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" id="btnCollectionLineMoveToLastPageGrid">
                                            <span class="glyphicon glyphicon-fast-forward"></span>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!--
                            ========================
                            Collection Lines: Totals
                            ========================
                        -->
                        <div class="panel panel-default">
                            <div class="panel-body" style="padding-bottom: 0px;">
                                <div class="row">
                                    <div class="col-md-6">

                                    </div>
                                    <div class="col-md-6">
                                        <dl class="dl-horizontal">
                                            <dt>
                                                <b>Total Amount</b>
                                            </dt>
                                            <dd>
                                                <input type="text" class="form-control numberField" id="inpCollectionLineTotalAmount" placeholder="0.00" disabled />
                                            </dd>
                                        </dl>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!--
                    ==========
                    User Stamp
                    ==========
                -->
                <div class="panel panel-default">
                    <div class="panel-heading">
                        User stamp
                    </div>
                    <div class="panel-body">
                        <div class="row">
                            <div class="col-md-6">
                                <p>Created by:</p>
                                <div style="padding-left: 10px;">
                                    <i class="fa fa-key fa-fw"></i> <label id="createdBy">NA</label>
                                    <br />
                                    <small><i class="fa fa-calendar fa-fw"></i> &nbsp;<span id="createdDate">mm/dd/yyyy</span></small>
                                </div>
                                <br />
                            </div>
                            <div class="col-md-6">
                                <p>Updated by:</p>
                                <div style="padding-left: 10px;">
                                    <i class="fa fa-key fa-fw"></i> <label id="updatedBy">NA</label>
                                    <br />
                                    <small><i class="fa fa-calendar fa-fw"></i> &nbsp;<span id="updatedDate">mm/dd/yyyy</span></small>
                                </div>
                                <br />
                            </div>
                        </div>
                    </div>
                </div>
            </section>

            @Html.Partial("_SoftwareFooter")
        </main>
    </div>
    <div id="c-mask" class="c-mask"></div>

    <!--
        ==============================
        Collection Lines: Detail Modal
        ==============================
    -->
    <div class="modal fade" id="collectionLineDetailModal" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="collectionLineModalTitle">Collection Line</h4>
                </div>
                <div class="modal-body">
                    <dl class="dl-horizontal">
                        <dt>Branch</dt>
                        <dd>
                            <div class="comboBox-wide" id="cboCollectionLineBranch"></div>
                        </dd>
                        <dt>Account</dt>
                        <dd>
                            <table style="width: 100%" border="0">
                                <tr>
                                    <td style="width: 30%">
                                        <div class="comboBox-wide" id="cboCollectionLineAccountCode"></div>
                                    </td>
                                    <td style="width: 1%"></td>
                                    <td style="width: 69%">
                                        <div class="comboBox-wide" id="cboCollectionLineAccount"></div>
                                    </td>
                                </tr>
                            </table>
                        </dd>
                        <dt>Article</dt>
                        <dd>
                            <div class="comboBox-wide" id="cboCollectionLineArticle"></div>
                        </dd>
                        <dt>SI No.</dt>
                        <dd>
                            <div class="comboBox-wide" id="cboCollectionLineSINumber"></div>
                        </dd>
                        <dt>Particulars</dt>
                        <dd>
                            <textarea rows="5" class="form-control textarea-custom requiredCollectionLine" id="inpCollectionLineParticulars" placeholder="Particulars"></textarea>
                        </dd>
                        <dt>Amount</dt>
                        <dd>
                            <input class="form-control  numberField requiredCollectionLine" id="inpCollectionLineAmount" placeholder="0.00" />
                        </dd>
                        <dt>Pay Type</dt>
                        <dd>
                            <div class="comboBox-wide" id="cboCollectionLinePayType"></div>
                        </dd>
                        <dt>Check No.</dt>
                        <dd>
                            <input type="text" class="form-control requiredCollectionLine" id="inpCollectionLineCheckNo" />
                        </dd>
                        <dt>Check Date</dt>
                        <dd>
                            <div class="" id="cboCollectionLineCheckDate"></div>
                        </dd>
                        <dt>Check Bank</dt>
                        <dd>
                            <input type="text" class="form-control requiredCollectionLine" id="inpCollectionLineCheckBank" placeholder="Check Bank" />
                        </dd>
                        <dt>Depository Bank</dt>
                        <dd>
                            <div class="comboBox-wide" id="cboCollectionLineDepositoryBank"></div>
                        </dd>
                        <dt>Is Clear</dt>
                        <dd>
                            <input type="checkbox" id="inpCollectionLineIsClear" />
                        </dd>
                    </dl>
                </div>
                <div class="modal-footer">
                    <button id="btnCollectionLineSave" class="btn btn-primary" onclick="btnCollectionLineSaveOnclick()"><i class="fa fa-save"></i> Save</button>
                    <button id="btnCollectionLineCloseDetailModal" class="btn btn-danger" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!--
        ==============================
        Collection Lines: Delete Modal
        ==============================
    -->
    <div class="modal fade" id="collectionLineConfirmDeleteModal" role="dialog">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Delete</h4>
                </div>
                <div class="modal-body">
                    Delete Collection Line?
                </div>
                <div class="modal-footer">
                    <button id="collectionLineConfirmDelete" class="btn btn-danger" onclick="collectionLineConfirmDeleteOnclick()"><i class="fa fa-trash"></i> Delete</button>
                    <button id="collectionLineConfirmDeleteCloseModal" class="btn btn-primary" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <!--
        =====================
        Journal Entries Modal
        =====================
    -->
    <div class="modal fade" id="journalEntryModal" role="dialog">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title"> Journal </h4>
                </div>
                <div class="modal-body">
                    <center>
                        <span id="journalLoading"></span>
                    </center>
                    <div id="journalContent">
                        <div id="journalFlexGrid" style="max-height: 250px;"></div>
                        <br /><br />
                        <div class="row">
                            <div class="col-md-7"></div>
                            <div class="col-md-5">
                                <dl class="dl-horizontal">
                                    <dt>
                                        <b>Total Debit</b>
                                    </dt>
                                    <dd>
                                        <input type="text" class="form-control numberField" id="inpJournalTotalDebit" placeholder="0.00" disabled />
                                    </dd>
                                    <dt>
                                        <b>Total Credit</b>
                                    </dt>
                                    <dd>
                                        <input type="text" class="form-control numberField" id="inpJournalTotalCredit" placeholder="0.00" disabled />
                                    </dd>
                                    <dt>
                                        <b>Variance</b>
                                    </dt>
                                    <dd>
                                        <input type="text" class="form-control numberField" id="inpJournalVariance" placeholder="0.00" disabled />
                                    </dd>
                                </dl>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!--
        ==============================
        AR: Sales Invoice Status Modal
        ==============================
    -->
    <div class="modal fade" id="salesInvoiceStatusModal" role="dialog">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Sales Invoice Status</h4>
                </div>
                <div class="modal-body">

                    <!--
                        ====
                        Tabs
                        ====
                    -->
                    <ul class="nav nav-tabs" role="tablist" id="myTab">
                        <li role="presentation" class="active"><a data-toggle="tab" href="#SIStatussalesInvoice" id="SIStatussalesInvoicetab">Sales Invoice - Customer</a></li>
                        <li role="presentation"><a data-toggle="tab" href="#SIStatussalesInvoiceBranch" id="SIStatussalesInvoiceBranchtab">Sales Invoice - Branch</a></li>
                        <li role="presentation"><a data-toggle="tab" href="#SIStatuspayType" id="SIStatuspayTypestatusTab">Pay Type</a></li>
                    </ul>
                    <br />

                    <!--
                        ============
                        Tab Contents
                        ============
                    -->
                    <div class="tab-content">

                        <!--
                            ===============================================================
                            Tab Content: Sales Invoice Status Per Current Selected Customer
                            ===============================================================
                        -->
                        <div id="SIStatussalesInvoice" class="tab-pane active">
                            <div class="panel panel-default">

                                <!--
                                    ===============
                                    Search / Filter
                                    ===============
                                -->
                                <div class="panel-heading">
                                    <table style="width: 100%" border="0">
                                        <tr>
                                            <td style="width: 40%">
                                                <div class="input-group">
                                                    <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                                    <input type="text" class="form-control" id="salesInvoiceStatusPerCustomerSearchFilter" placeholder="Search">
                                                </div>
                                            </td>
                                            <td style="width: 1%"></td>
                                            <td style="width: 29%">
                                                <div class="input-group ">
                                                    <span class="input-group-addon"><b>Start Date</b></span>
                                                    <div id="cboSalesInvoiceStatusPerCustomerStartDateFilter"></div>
                                                </div>
                                            </td>
                                            <td style="width: 1%"></td>
                                            <td style="width: 29%">
                                                <div class="input-group ">
                                                    <span class="input-group-addon"><b>End Date</b></span>
                                                    <div id="cboSalesInvoiceStatusPerCustomerEndDateFilter"></div>
                                                </div>
                                            </td>
                                        </tr>
                                    </table>
                                </div>

                                <!--
                                    =========
                                    Flex Grid
                                    =========
                                -->
                                <div class="panel-body">
                                    <center>
                                        <span id="salesInvoiceStatusPerCustomerLoading"></span>
                                    </center>
                                    <div id="salesInvoiceStatusPerCustomerContent">
                                        <div id="salesInvoiceStatusPerCustomerFlexGrid" style="font-size: 13px;"></div>
                                    </div>
                                </div>

                                <!--
                                    ====================
                                    Navigation Page Grid
                                    ====================
                                -->
                                <div class="panel-footer">
                                    <div class="row">
                                        <div class="btn-group col-md-7" id="salesInvoiceStatusPerCustomerNavigationPageGrid">
                                            <button type="button" class="btn btn-default border-custom" id="salesInvoiceStatusPerCustomerMoveToFirstPageGrid">
                                                <span class="glyphicon glyphicon-fast-backward"></span>
                                            </button>
                                            <button type="button" class="btn btn-default border-custom" id="salesInvoiceStatusPerCustomerMoveToPreviousPageGrid">
                                                <span class="glyphicon glyphicon-step-backward"></span>
                                            </button>
                                            <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="salesInvoiceStatusPerCustomerCurrentPageGrid"></button>
                                            <button type="button" class="btn btn-default border-custom" id="salesInvoiceStatusPerCustomerMoveToNextPageGrid">
                                                <span class="glyphicon glyphicon-step-forward"></span>
                                            </button>
                                            <button type="button" class="btn btn-default border-custom" id="salesInvoiceStatusPerCustomerMoveToLastPageGrid">
                                                <span class="glyphicon glyphicon-fast-forward"></span>
                                            </button>
                                        </div>
                                        <div class="col-md-1"></div>
                                        <div class="col-md-4">
                                            <div class="input-group">
                                                <span class="input-group-addon"><b>Total Amount</b></span>
                                                <input type="text" class="form-control numberField" id="inpSalesInvoiceStatusPerCustomerTotalAmount" placeholder="0.00" disabled>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!--
                            ====================================================
                            Tab Content: Sales Invoice Status Per Current Branch
                            ====================================================
                        -->
                        <div id="SIStatussalesInvoiceBranch" class="tab-pane">
                            <div class="panel panel-default">

                                <!--
                                    ===============
                                    Search / Filter
                                    ===============
                                -->
                                <div class="panel-heading">
                                    <table style="width: 100%" border="0">
                                        <tr>
                                            <td style="width: 40%">
                                                <div class="input-group">
                                                    <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                                    <input type="text" class="form-control" id="inpSalesInvoiceStatusPerBranchSearchFilter" placeholder="Search">
                                                </div>
                                            </td>
                                            <td style="width: 1%"></td>
                                            <td style="width: 29%">
                                                <div class="input-group ">
                                                    <span class="input-group-addon"><b>Start Date</b></span>
                                                    <div id="cboSalesInvoiceStatusPerBranchStartDateFilter"></div>
                                                </div>
                                            </td>
                                            <td style="width: 1%"></td>
                                            <td style="width: 29%">
                                                <div class="input-group ">
                                                    <span class="input-group-addon"><b>End Date</b></span>
                                                    <div id="cboSalesInvoiceStatusPerBranchEndDateFilter"></div>
                                                </div>
                                            </td>
                                        </tr>
                                    </table>
                                </div>

                                <!--
                                    =========
                                    Flex Grid
                                    =========
                                -->
                                <div class="panel-body">
                                    <center>
                                        <span id="salesInvoiceStatusPerBranchLoading"></span>
                                    </center>
                                    <div id="salesInvoiceStatusPerBranchContent">
                                        <div id="salesInvoiceStatusPerBranchFlexGrid" style="font-size: 13px;"></div>
                                    </div>
                                </div>

                                <!--
                                    ====================
                                    Navigation Page Grid
                                    ====================
                                -->
                                <div class="panel-footer">
                                    <div class="row">
                                        <div class="btn-group col-md-7" id="salesInvoiceStatusPerBranchNavigationPageGrid">
                                            <button type="button" class="btn btn-default border-custom" id="salesInvoiceStatusPerBranchMoveToFirstPageGrid">
                                                <span class="glyphicon glyphicon-fast-backward"></span>
                                            </button>
                                            <button type="button" class="btn btn-default border-custom" id="salesInvoiceStatusPerBranchMoveToPreviousPageGrid">
                                                <span class="glyphicon glyphicon-step-backward"></span>
                                            </button>
                                            <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="salesInvoiceStatusPerBranchCurrentPageGrid"></button>
                                            <button type="button" class="btn btn-default border-custom" id="salesInvoiceStatusPerBranchMoveToNextPageGrid">
                                                <span class="glyphicon glyphicon-step-forward"></span>
                                            </button>
                                            <button type="button" class="btn btn-default border-custom" id="salesInvoiceStatusPerBranchMoveToLastPageGrid">
                                                <span class="glyphicon glyphicon-fast-forward"></span>
                                            </button>
                                        </div>
                                        <div class="col-md-1"></div>
                                        <div class="col-md-4">
                                            <div class="input-group">
                                                <span class="input-group-addon"><b>Total Amount</b></span>
                                                <input type="text" class="form-control numberField" id="inpSalesInvoiceStatusPerBranchTotalAmount" placeholder="0.00" disabled>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!--
                            ====================================================
                            Tab Content: Sales Invoice Status Pay Type Selection
                            ====================================================
                        -->
                        <div id="SIStatuspayType" class="tab-pane">
                            <div class="row">
                                <div class="col-md-6">
                                    <dl class="dl-horizontal">
                                        <dt>Pay Type</dt>
                                        <dd>
                                            <div class="comboBox-wide" id="cboSalesInvoiceStatusPayType"></div>
                                        </dd>
                                        <dt>Check No.</dt>
                                        <dd>
                                            <input type="text" class="form-control requiredSIStatus" id="inpSalesInvoiceStatusCheckNumber" />
                                        </dd>
                                        <dt>Check Date</dt>
                                        <dd>
                                            <div class="comboBox-wide" id="cboSalesInvoiceStatusCheckDate"></div>
                                        </dd>
                                        <dt>Check Bank</dt>
                                        <dd>
                                            <input type="text" class="form-control requiredSIStatus" id="inoSalesInvoiceStatusCheckBank" placeholder="Check Bank" />
                                        </dd>
                                        <dt>Depository Bank</dt>
                                        <dd>
                                            <div class="comboBox-wide" id="cboSalesInvoiceStatusDepositoryBank"></div>
                                        </dd>
                                        <dt>Is Clear</dt>
                                        <dd>
                                            <input type="checkbox" id="inpSalesInvoiceStatusIsClear" />
                                        </dd>
                                    </dl>
                                </div>
                                <div class="col-md-6"></div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" id="btnSalesInvoiceStatusApply" onclick="btnSalesInvoiceStatusApplyOnclick()"><i class="fa fa-check"></i> Apply</button>
                    <button class="btn btn-danger" id="btnSalesInvoiceStatusCloseModal" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!--
        =======================================================
        AR: Sales Invoice Status Per Customer Pick Amount Modal
        =======================================================
    -->
    <div class="modal fade" id="salesInvoiceStatusPerCustomerPickAmountModal" role="dialog">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Pick</h4>
                </div>
                <div class="modal-body">
                    <dl>
                        <dt>Amount</dt>
                        <dd>
                            <input class="form-control numberField requiredPickedAmount" id="inpSalesInvoiceStatusPerCustomerPickAmount" placeholder="0.00" />
                        </dd>
                    </dl>
                </div>
                <div class="modal-footer">
                    <button id="btnSalesInvoiceStatusPerCustomerPickAmountContinue" class="btn btn-primary" onclick="btnSalesInvoiceStatusPerCustomerPickAmountContinueOnclick()"><i class="fa fa-arrow-right"></i> Continue</button>
                    <button id="btnSalesInvoiceStatusPerCustomerPickAmountCloseModal" class="btn btn-danger" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!--
        =====================================================
        AR: Sales Invoice Status Per Branch Pick Amount Modal
        =====================================================
    -->
    <div class="modal fade" id="salesInvoiceStatusPerBranchPickAmountModal" role="dialog">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Pick</h4>
                </div>
                <div class="modal-body">
                    <dl>
                        <dt>Amount</dt>
                        <dd><input class="form-control numberField requiredPickedAmountBranch" id="inpSalesInvoiceStatusPerBranchPickAmount" placeholder="0.00" /></dd>
                    </dl>
                </div>
                <div class="modal-footer">
                    <button id="btnSalesInvoiceStatusPerBranchPickAmountContinue" class="btn btn-primary" onclick="btnSalesInvoiceStatusPerBranchPickAmountContinueOnclick()"><i class="fa fa-arrow-right"></i> Continue</button>
                    <button id="btnSalesInvoiceStatusPerBranchPickAmountCloseModal" class="btn btn-danger" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!--
        =========================================================
        AR: Confirm Apply Sales Invoice Status Total Amount Modal
        =========================================================
    -->
    <div class="modal fade" id="salesInvoiceStatusApplyPickAmountModal" role="dialog">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Apply</h4>
                </div>
                <div class="modal-body">
                    Apply All Picked Amount?
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" id="btnSalesInvoiceStatusApplyPickAmount" onclick="btnSalesInvoiceStatusApplyPickAmountOnclick()"><i class="fa fa-check"></i> Apply</button>
                    <button class="btn btn-danger" id="btnSalesInvoiceStatusApplyPickAmountCloseModal" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <!--
        =================================
        Advances: Customer Advances Modal
        =================================
    -->
    <div class="modal fade" id="customerAdvancesModal" role="dialog">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Customer Advances</h4>
                </div>
                <div class="modal-body">
                    <center>
                        <span id="customerAdvancesLoading"></span>
                    </center>
                    <div id="customerAdvancesContent">
                        <div class="panel panel-default">

                            <!--
                                ===============
                                Search / Filter
                                ===============
                            -->
                            <div class="panel-heading">
                                <div class="input-group  ">
                                    <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                    <input type="text" class="form-control" id="inpCustomerAdvancesSearchFilter" placeholder="Search">
                                </div>
                            </div>

                            <!--
                                =========
                                Flex Grid
                                =========
                            -->
                            <div class="panel-body">
                                <div id="customerAdvancesFlexGrid"></div>
                            </div>

                            <!--
                                ==================
                                Navigation Buttons
                                ==================
                            -->
                            <div class="panel-footer">
                                <div class="row">
                                    <div class="btn-group col-md-7" id="customerAdvancesNavigationPageGrid">
                                        <button type="button" class="btn btn-default border-custom" id="btnCustomerAdvancesMoveToFirstPageGrid">
                                            <span class="glyphicon glyphicon-fast-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" id="btnCustomerAdvancesMoveToPreviousPageGrid">
                                            <span class="glyphicon glyphicon-step-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnCustomerAdvancesCurrentPageGrid"></button>
                                        <button type="button" class="btn btn-default border-custom" id="btnCustomerAdvancesMoveToNextPageGrid">
                                            <span class="glyphicon glyphicon-step-forward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" id="btnCustomerAdvancesMoveToLastPageGrid">
                                            <span class="glyphicon glyphicon-fast-forward"></span>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" id="btnCustomerAdvancesCloseModal" class="btn btn-danger" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!--
        ============================================================
        Advances: Confirm Apply Customer Advances Total Amount Modal
        ============================================================
    -->
    <div class="modal fade" id="customerAdvancesApplyModal" role="dialog">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Apply</h4>
                </div>
                <div class="modal-body">
                    Apply Advances?
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" id="btnColelctionCustomerAdvancesApply" onclick="btnCustomerAdvancesConfirmApplyOnclick()"><i class="fa fa-check-square-o"></i> Apply</button>
                    <button class="btn btn-danger" id="btnColelctionCustomerAdvancesApplyCloseModal" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>
    
    <!--
        ================================
        Collection: Cancel Confirm Modal
        ================================
    -->
    <div class="modal fade" id="collectionCancelConfirmModal" role="dialog">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Cancel</h4>
                </div>
                <div class="modal-body">
                    Cancel Collection?
                </div>
                <div class="modal-footer">
                    <button id="btnCollectionCancelConfirm" class="btn btn-warning" onclick="btnCollectionCancelConfirmOnclick()"><i class="fa fa-times-circle-o"></i> Cancel</button>
                    <button id="btnCollectionCancelConfirmCloseModal" class="btn btn-primary" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    @Scripts.Render("~/Scripts/Software-js")
    <script type="text/javascript">
        // =======================================
        // Collection Detail Combo Data and Fields
        // =======================================
        var cboCollectionDetailBranch = new wijmo.input.ComboBox('#cboCollectionDetailBranch');
        var cboCollectionDetailCustomer = new wijmo.input.ComboBox('#cboCollectionDetailCustomer');
        var cboCollectionDetailORDate = new wijmo.input.InputDate('#cboCollectionDetailORDate');
        var cboCollectionDetailPreparedBy = new wijmo.input.ComboBox('#cboCollectionDetailPreparedBy');
        var cboCollectionDetailCheckedBy = new wijmo.input.ComboBox('#cboCollectionDetailCheckedBy');
        var cboCollectionDetailApprovedBy = new wijmo.input.ComboBox('#cboCollectionDetailApprovedBy');
        var cboCollectionDetailStatus = new wijmo.input.ComboBox('#cboCollectionDetailStatus');
        var isLocked = false;

        // ==================================================================
        // Collection Lines Collection View, Flex Grid and Navigation Buttons
        // ==================================================================
        var collectionLineCollectionView;
        var collectionLineFlexGrid;
        var cboCollectionLineDisplayNumberOfRows = new wijmo.input.ComboBox('#cboCollectionLineDisplayNumberOfRows');
        var btnCollectionLineMoveToFirstPageGrid = document.getElementById('btnCollectionLineMoveToFirstPageGrid');
        var btnCollectionLineMoveToPreviousPageGrid = document.getElementById('btnCollectionLineMoveToPreviousPageGrid');
        var btnCollectionLineMoveToNextPageGrid = document.getElementById('btnCollectionLineMoveToNextPageGrid');
        var btnCollectionLineMoveToLastPageGrid = document.getElementById('btnCollectionLineMoveToLastPageGrid');
        var btnCollectionLineCurrentPageGrid = document.getElementById('btnCollectionLineCurrentPageGrid');

        // ======================================
        // Collection Lines Combo Data and Fields
        // ======================================
        var collectionLineId = 0;
        var cboCollectionLineBranch = new wijmo.input.ComboBox('#cboCollectionLineBranch');
        var cboCollectionLineAccountCode = new wijmo.input.ComboBox('#cboCollectionLineAccountCode');
        var cboCollectionLineAccount = new wijmo.input.ComboBox('#cboCollectionLineAccount');
        var isCboAccountChanged = false;
        var cboCollectionLineArticle = new wijmo.input.ComboBox('#cboCollectionLineArticle');
        var cboCollectionLineSINumber = new wijmo.input.ComboBox('#cboCollectionLineSINumber');
        var cboCollectionLinePayType = new wijmo.input.ComboBox('#cboCollectionLinePayType');
        var cboCollectionLineCheckDate = new wijmo.input.InputDate('#cboCollectionLineCheckDate');
        var cboCollectionLineDepositoryBank = new wijmo.input.ComboBox('#cboCollectionLineDepositoryBank');

        // =============================================
        // Journal Entries Collection View and Flex Grid
        // =============================================
        var journalCollectionView;
        var journalFlexGrid = new wijmo.grid.FlexGrid('#journalFlexGrid');

        // ============================================================================================
        // Sales Invoice Status Per Customer Filters, Collection View, Flex Grid and Navigation Buttons
        // ============================================================================================
        var cboSalesInvoiceStatusPerCustomerStartDateFilter = new wijmo.input.InputDate('#cboSalesInvoiceStatusPerCustomerStartDateFilter');
        var cboSalesInvoiceStatusPerCustomerEndDateFilter = new wijmo.input.InputDate('#cboSalesInvoiceStatusPerCustomerEndDateFilter');
        var isCboSalesInvoiceStatusPerCustomerStartDateFilterSelected = true;
        var isCboSalesInvoiceStatusPerCustomerEndDateFilterSelected = true;
        var salesInvoiceStatusPerCustomerCollectionView;
        var salesInvoiceStatusPerCustomerFlexGrid = new wijmo.grid.FlexGrid('#salesInvoiceStatusPerCustomerFlexGrid');
        var salesInvoiceStatusPerCustomerMoveToFirstPageGrid = document.getElementById('salesInvoiceStatusPerCustomerMoveToFirstPageGrid');
        var salesInvoiceStatusPerCustomerMoveToPreviousPageGrid = document.getElementById('salesInvoiceStatusPerCustomerMoveToPreviousPageGrid');
        var salesInvoiceStatusPerCustomerMoveToNextPageGrid = document.getElementById('salesInvoiceStatusPerCustomerMoveToNextPageGrid');
        var salesInvoiceStatusPerCustomerMoveToLastPageGrid = document.getElementById('salesInvoiceStatusPerCustomerMoveToLastPageGrid');
        var salesInvoiceStatusPerCustomerCurrentPageGrid = document.getElementById('salesInvoiceStatusPerCustomerCurrentPageGrid');
        var salesInvoiceStatusPerCustomerCurrentPageIndex = 0;

        // ==========================================================================================
        // Sales Invoice Status Per Branch Filters, Collection View, Flex Grid and Navigation Buttons
        // ==========================================================================================
        var cboSalesInvoiceStatusPerBranchStartDateFilter = new wijmo.input.InputDate('#cboSalesInvoiceStatusPerBranchStartDateFilter');
        var cboSalesInvoiceStatusPerBranchEndDateFilter = new wijmo.input.InputDate('#cboSalesInvoiceStatusPerBranchEndDateFilter');
        var isCboSalesInvoiceStatusPerBranchStartDateFilterSelected = true;
        var isCboSalesInvoiceStatusPerBranchEndDateFilterSelected = true;
        var salesInvoiceStatusPerBranchCollectionView;
        var salesInvoiceStatusPerBranchFlexGrid = new wijmo.grid.FlexGrid('#salesInvoiceStatusPerBranchFlexGrid');
        var salesInvoiceStatusPerBranchMoveToFirstPageGrid = document.getElementById('salesInvoiceStatusPerBranchMoveToFirstPageGrid');
        var salesInvoiceStatusPerBranchMoveToPreviousPageGrid = document.getElementById('salesInvoiceStatusPerBranchMoveToPreviousPageGrid');
        var salesInvoiceStatusPerBranchMoveToNextPageGrid = document.getElementById('salesInvoiceStatusPerBranchMoveToNextPageGrid');
        var salesInvoiceStatusPerBranchMoveToLastPageGrid = document.getElementById('salesInvoiceStatusPerBranchMoveToLastPageGrid');
        var salesInvoiceStatusPerBranchCurrentPageGrid = document.getElementById('salesInvoiceStatusPerBranchCurrentPageGrid');
        var salesInvoiceStatusPerBranchCurrentPageIndex = 0;

        // ====================================================
        // Sales Invoice Status Pay Type Data, Combo and Fields
        // ====================================================
        var cboSalesInvoiceStatusPayType = new wijmo.input.ComboBox('#cboSalesInvoiceStatusPayType');
        var cboSalesInvoiceStatusCheckDate = new wijmo.input.InputDate('#cboSalesInvoiceStatusCheckDate');
        var cboSalesInvoiceStatusDepositoryBank = new wijmo.input.ComboBox('#cboSalesInvoiceStatusDepositoryBank');

        // ===================================================================
        // Customer Advances Collection View, Flex Grid and Navigation Buttons
        // ===================================================================
        var customerAdvancesCollectionView;
        var customerAdvancesFlexGrid = new wijmo.grid.FlexGrid('#customerAdvancesFlexGrid');
        var btnCustomerAdvancesMoveToFirstPageGrid = document.getElementById('btnCustomerAdvancesMoveToFirstPageGrid');
        var btnCustomerAdvancesMoveToPreviousPageGrid = document.getElementById('btnCustomerAdvancesMoveToPreviousPageGrid');
        var btnCustomerAdvancesMoveToNextPageGrid = document.getElementById('btnCustomerAdvancesMoveToNextPageGrid');
        var btnCustomerAdvancesMoveToLastPageGrid = document.getElementById('btnCustomerAdvancesMoveToLastPageGrid');
        var btnCustomerAdvancesCurrentPageGrid = document.getElementById('btnCustomerAdvancesCurrentPageGrid');

        // =====================================
        // Sales Invoice Status Modal Tab Status
        // =====================================
        var isSalesInvoiceStatusPayTypeSelected = false;
        var isSalesInvoiceStatusPerCustomerSelected = true;
        var isSalesInvoiceStatusPerBranchSelected = false;
        var isBtnARSalesInvoiceStatusPerCustomerClicked = false;
        var isBtnARSalesInvoiceStatusPerBranchClicked = false;

        // =================
        // Customer Advances
        // =================
        var isCustomerAdvancesClicked = false;

        // =======================
        // Get URL Parameter Value
        // =======================
        function getURLParameterValue(name) {
            name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");

            var regexS = "[\\?&]" + name + "=([^&#]*)";
            var regex = new RegExp(regexS);

            var results = regex.exec(window.location.href);
            if (results == null) {
                return "";
            } else {
                return results[1];
            }
        }

        // =====================================
        // Create Collection Detail Combo Branch
        // =====================================
        function createCollectionDetailCboBranch() {
            var branchesObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/collection/dropdown/list/branch',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            branchesObservableArray.push({
                                Id: results[i]["Id"],
                                Branch: results[i]["Branch"]
                            });
                        }
                    }

                    cboCollectionDetailBranch.dispose();
                    cboCollectionDetailBranch = new wijmo.input.ComboBox('#cboCollectionDetailBranch', {
                        disabled: true,
                        isEditable: false,
                        placeholder: "Select Branch",
                        itemsSource: branchesObservableArray,
                        displayMemberPath: "Branch",
                        selectedValuePath: "Id"
                    });

                    createCollectionDetailCboCustomer();
                }
            });
        }

        // =======================================
        // Create Collection Detail Combo Customer
        // =======================================
        function createCollectionDetailCboCustomer() {
            var customersObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/collection/dropdown/list/customer',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            customersObservableArray.push({
                                Id: results[i]["Id"],
                                Customer: results[i]["Article"]
                            });
                        }
                    }

                    cboCollectionDetailCustomer.dispose();
                    cboCollectionDetailCustomer = new wijmo.input.ComboBox('#cboCollectionDetailCustomer', {
                        isEditable: false,
                        placeholder: "Select Customer",
                        itemsSource: customersObservableArray,
                        displayMemberPath: "Customer",
                        selectedValuePath: "Id"
                    });

                    createCollectionDetailCboUser();
                }
            });
        }

        // ===================================
        // Create Collection Detail Combo User
        // ===================================
        function createCollectionDetailCboUser() {
            var usersObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/collection/dropdown/list/users',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            usersObservableArray.push({
                                Id: results[i]["Id"],
                                FullName: results[i]["FullName"]
                            });
                        }
                    }

                    cboCollectionDetailPreparedBy.dispose();
                    cboCollectionDetailPreparedBy = new wijmo.input.ComboBox('#cboCollectionDetailPreparedBy', {
                        disabled: true,
                        isEditable: false,
                        placeholder: "Select User",
                        itemsSource: usersObservableArray,
                        displayMemberPath: "FullName",
                        selectedValuePath: "Id"
                    });

                    cboCollectionDetailCheckedBy.dispose();
                    cboCollectionDetailCheckedBy = new wijmo.input.ComboBox('#cboCollectionDetailCheckedBy', {
                        isEditable: false,
                        placeholder: "Select User",
                        itemsSource: usersObservableArray,
                        displayMemberPath: "FullName",
                        selectedValuePath: "Id"
                    });

                    cboCollectionDetailApprovedBy.dispose();
                    cboCollectionDetailApprovedBy = new wijmo.input.ComboBox('#cboCollectionDetailApprovedBy', {
                        isEditable: false,
                        placeholder: "Select User",
                        itemsSource: usersObservableArray,
                        displayMemberPath: "FullName",
                        selectedValuePath: "Id"
                    });

                    createCollectionDetailCboStatus();
                }
            });
        }

        // =====================================
        // Create Collection Detail Combo Status
        // =====================================
        function createCollectionDetailCboStatus() {
            var statusObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/collection/dropdown/list/status',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    var disabled = false;

                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            statusObservableArray.push({
                                Id: results[i]["Id"],
                                Status: results[i]["Status"]
                            });
                        }
                    } else {
                        disabled = true;
                    }

                    cboCollectionDetailStatus.dispose();
                    cboCollectionDetailStatus = new wijmo.input.ComboBox('#cboCollectionDetailStatus', {
                        disabled: disabled,
                        isEditable: false,
                        //placeholder: "Select Status",
                        itemsSource: statusObservableArray,
                        displayMemberPath: "Status",
                        selectedValuePath: "Status"
                    });

                    getCollectionDetailData();
                }
            });
        }


        // ==========================
        // Get Collection Detail Data
        // ==========================
        function getCollectionDetailData() {
            NProgress.start();
            if (document.location.search.length > 0) {

                var id = getURLParameterValue("id");

                $.ajax({
                    url: '/api/collection/detail/' + id,
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    success: function (results) {
                        if (results != null) {
                            cboCollectionDetailBranch.selectedValue = results.BranchId;
                            document.getElementById('inpCollectionDetailORNumber').value = results.ORNumber;
                            cboCollectionDetailORDate.dispose();
                            cboCollectionDetailORDate = new wijmo.input.InputDate('#cboCollectionDetailORDate', {
                                format: 'MM-dd-yyyy',
                                value: new Date(results.ORDate),
                            });
                            document.getElementById('inpCollectionDetailManualORNumber').value = results.ManualORNumber;
                            cboCollectionDetailCustomer.selectedValue = results.CustomerId;
                            document.getElementById('inpCollectionDetailParticulars').value = results.Particulars;
                            cboCollectionDetailPreparedBy.selectedValue = results.PreparedById;
                            cboCollectionDetailCheckedBy.selectedValue = results.CheckedById;
                            cboCollectionDetailApprovedBy.selectedValue = results.ApprovedById;
                            cboCollectionDetailStatus.selectedValue = results.Status;

                            document.getElementById('createdBy').innerHTML = results.CreatedBy;
                            document.getElementById('createdDate').innerHTML = results.CreatedDateTime;
                            document.getElementById('updatedBy').innerHTML = results.UpdatedBy;
                            document.getElementById('updatedDate').innerHTML = results.UpdatedDateTime;

                            if (results.IsLocked) {
                                cboCollectionDetailORDate.disabled = true;
                                document.getElementById('inpCollectionDetailManualORNumber').disabled = true;
                                cboCollectionDetailCustomer.disabled = true;
                                document.getElementById('inpCollectionDetailParticulars').disabled = true;
                                cboCollectionDetailPreparedBy.disabled = true;
                                cboCollectionDetailCheckedBy.disabled = true;
                                cboCollectionDetailApprovedBy.disabled = true;
                                cboCollectionDetailStatus.disabled = true;

                                $("#btnCollectionDetailSave").prop("disabled", true);
                                $("#btnCollectionDetailLock").prop("disabled", true);
                                $("#btnCollectionLineAdd").prop("disabled", true);
                                $("#cmdAR").prop("disabled", true);
                                $("#cmdAdvances").prop("disabled", true);

                                isLocked = true;

                                if (results.IsCancelled) {
                                    $("#btnCollectionDetailUnlock").prop("disabled", true);
                                    $("#btnCollectionDetailCancel").prop("disabled", true);
                                }
                            } else {
                                $("#btnCollectionDetailJournal").prop("disabled", true);
                                $("#btnCollectionDetailUnlock").prop("disabled", true);
                                $("#btnCollectionDetailCancel").prop("disabled", true);
                                $("#btnCollectionDetailPrint").prop("disabled", true);
                                $("#cmdAR").prop("disabled", false);
                                $("#cmdAdvances").prop("disabled", false);
                            }

                            createCboDisplayNumberOfRows();
                            createCollectionLineFlexGrid();
                        } else {
                            alert("No Data");
                            window.location = "/Software/Collection";
                        }
                    }
                });
            } else {
                alert("No Id Parameter Value");
                window.location = "/Software/Collection";
            }
        }

        // ===============
        // Save Collection
        // ===============
        function btnCollectionDetailSaveOnclick() {
            document.getElementById('btnCollectionDetailSave').innerHTML = "<i class='fa fa-save'></i> Saving...";
            $("#btnCollectionDetailSave").prop("disabled", true);
            $("#btnCollectionDetailJournal").prop("disabled", true);
            $("#btnCollectionDetailLock").prop("disabled", true);
            $("#btnCollectionDetailUnlock").prop("disabled", true);
            $("#btnCollectionDetailCancel").prop("disabled", true);
            $("#btnCollectionDetailPrint").prop("disabled", true);
            $("#btnCloseCollection").prop("disabled", true);

            var collectionObject = new Object();
            collectionObject.BranchId = cboCollectionDetailBranch.selectedValue;
            collectionObject.ORNumber = document.getElementById('inpCollectionDetailORNumber').value;
            collectionObject.ORDate = cboCollectionDetailORDate.value.toLocaleDateString();
            collectionObject.CustomerId = cboCollectionDetailCustomer.selectedValue;
            collectionObject.Particulars = document.getElementById('inpCollectionDetailParticulars').value;
            collectionObject.ManualORNumber = document.getElementById('inpCollectionDetailManualORNumber').value;
            collectionObject.CheckedById = cboCollectionDetailCheckedBy.selectedValue;
            collectionObject.ApprovedById = cboCollectionDetailApprovedBy.selectedValue;
            collectionObject.Status = cboCollectionDetailStatus.selectedValue;
            var data = JSON.stringify(collectionObject);

            var isValid = true;
            $('.requiredCollection').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                } else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            if (isValid) {
                var id = getURLParameterValue("id");

                $.ajax({
                    type: "PUT",
                    url: '/api/collection/save/' + id,
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    data: data,
                    statusCode: {
                        200: function () {
                            toastr.success("Save Successful");
                            window.setTimeout(function () {
                                location.reload()
                            }, 1000);
                        },
                        404: function (message) {
                            toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                            document.getElementById('btnCollectionDetailSave').innerHTML = "<i class='fa fa-save'></i> Save";
                            $("#btnCollectionDetailSave").prop("disabled", false);

                            if (isLocked) {
                                $("#btnCollectionDetailJournal").prop("disabled", false);
                                $("#btnCollectionDetailUnlock").prop("disabled", false);
                                $("#btnCollectionDetailCancel").prop("disabled", false);
                                $("#btnCollectionDetailPrint").prop("disabled", false);
                            } else {
                                $("#btnCollectionDetailLock").prop("disabled", false);
                            }

                            $("#btnCloseCollection").prop("disabled", false);
                        },
                        400: function (message) {
                            toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                            document.getElementById('btnCollectionDetailSave').innerHTML = "<i class='fa fa-save'></i> Save";
                            $("#btnCollectionDetailSave").prop("disabled", false);

                            if (isLocked) {
                                $("#btnCollectionDetailJournal").prop("disabled", false);
                                $("#btnCollectionDetailUnlock").prop("disabled", false);
                                $("#btnCollectionDetailCancel").prop("disabled", false);
                                $("#btnCollectionDetailPrint").prop("disabled", false);
                            } else {
                                $("#btnCollectionDetailLock").prop("disabled", false);
                            }

                            $("#btnCloseCollection").prop("disabled", false);
                        },
                        500: function (message) {
                            toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                            document.getElementById('btnCollectionDetailSave').innerHTML = "<i class='fa fa-save'></i> Save";
                            $("#btnCollectionDetailSave").prop("disabled", false);

                            if (isLocked) {
                                $("#btnCollectionDetailJournal").prop("disabled", false);
                                $("#btnCollectionDetailUnlock").prop("disabled", false);
                                $("#btnCollectionDetailCancel").prop("disabled", false);
                                $("#btnCollectionDetailPrint").prop("disabled", false);
                            } else {
                                $("#btnCollectionDetailLock").prop("disabled", false);
                            }

                            $("#btnCloseCollection").prop("disabled", false);
                        }
                    },
                });
            } else {
                toastr.error("Invalid Entry");
            }
        }

        // ===============
        // Lock Collection
        // ===============
        function btnCollectionDetailLockOnclick() {
            document.getElementById('btnCollectionDetailLock').innerHTML = "<i class='fa fa-lock'></i> Locking...";
            $("#btnCollectionDetailSave").prop("disabled", true);
            $("#btnCollectionDetailJournal").prop("disabled", true);
            $("#btnCollectionDetailLock").prop("disabled", true);
            $("#btnCollectionDetailUnlock").prop("disabled", true);
            $("#btnCollectionDetailCancel").prop("disabled", true);
            $("#btnCollectionDetailPrint").prop("disabled", true);
            $("#btnCloseCollection").prop("disabled", true);

            var collectionObject = new Object();
            collectionObject.BranchId = cboCollectionDetailBranch.selectedValue;
            collectionObject.ORNumber = document.getElementById('inpCollectionDetailORNumber').value;
            collectionObject.ORDate = cboCollectionDetailORDate.value.toLocaleDateString();
            collectionObject.CustomerId = cboCollectionDetailCustomer.selectedValue;
            collectionObject.Particulars = document.getElementById('inpCollectionDetailParticulars').value;
            collectionObject.ManualORNumber = document.getElementById('inpCollectionDetailManualORNumber').value;
            collectionObject.CheckedById = cboCollectionDetailCheckedBy.selectedValue;
            collectionObject.ApprovedById = cboCollectionDetailApprovedBy.selectedValue;
            collectionObject.Status = cboCollectionDetailStatus.selectedValue;
            var data = JSON.stringify(collectionObject);

            var isValid = true;
            $('.requiredCollection').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                } else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            if (isValid) {
                var id = getURLParameterValue("id");

                $.ajax({
                    type: "PUT",
                    url: '/api/collection/lock/' + id,
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    data: data,
                    statusCode: {
                        200: function () {
                            toastr.success("Lock Successful");
                            window.setTimeout(function () {
                                location.reload()
                            }, 1000);
                        },
                        404: function (message) {
                            toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                            document.getElementById('btnCollectionDetailLock').innerHTML = "<i class='fa fa-lock'></i> Lock";
                            $("#btnCollectionDetailSave").prop("disabled", false);
                            $("#btnCollectionDetailLock").prop("disabled", false);
                            $("#btnCloseCollection").prop("disabled", false);
                        },
                        400: function (message) {
                            toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                            document.getElementById('btnCollectionDetailLock').innerHTML = "<i class='fa fa-lock'></i> Lock";
                            $("#btnCollectionDetailSave").prop("disabled", false);
                            $("#btnCollectionDetailLock").prop("disabled", false);
                            $("#btnCloseCollection").prop("disabled", false);
                        },
                        500: function (message) {
                            toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                            document.getElementById('btnCollectionDetailLock').innerHTML = "<i class='fa fa-lock'></i> Lock";
                            $("#btnCollectionDetailSave").prop("disabled", false);
                            $("#btnCollectionDetailLock").prop("disabled", false);
                            $("#btnCloseCollection").prop("disabled", false);
                        }
                    },
                });
            } else {
                toastr.error("Invalid Entry");
            }
        }

        // =================
        // Unlock Collection
        // =================
        function btnCollectionDetailUnlockOnclick() {
            var collectonId = getURLParameterValue("id");
            document.getElementById('btnCollectionDetailUnlock').innerHTML = "<i class='fa fa-unlock'></i> Unlocking...";
            $("#btnCollectionDetailJournal").prop("disabled", true);
            $("#btnCollectionDetailLock").prop("disabled", true);
            $("#btnCollectionDetailUnlock").prop("disabled", true);
            $("#btnCollectionDetailCancel").prop("disabled", true);
            $("#btnCollectionDetailPrint").prop("disabled", true);
            $("#btnCloseCollection").prop("disabled", true);

            var id = getURLParameterValue("id");

            $.ajax({
                type: "PUT",
                url: '/api/collection/unlock/' + id,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Unlock Successful");
                        window.setTimeout(function () {
                            location.reload()
                        }, 1000);
                    },
                    404: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                        document.getElementById('btnCollectionDetailUnlock').innerHTML = "<i class='fa fa-unlock'></i> Unlock";
                        $("#btnCollectionDetailJournal").prop("disabled", false);
                        $("#btnCollectionDetailUnlock").prop("disabled", false);
                        $("#btnCollectionDetailCancel").prop("disabled", false);
                        $("#btnCollectionDetailPrint").prop("disabled", false);
                        $("#btnCloseCollection").prop("disabled", false);
                    },
                    400: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                        document.getElementById('btnCollectionDetailUnlock').innerHTML = "<i class='fa fa-unlock'></i> Unlock";
                        $("#btnCollectionDetailJournal").prop("disabled", false);
                        $("#btnCollectionDetailUnlock").prop("disabled", false);
                        $("#btnCollectionDetailCancel").prop("disabled", false);
                        $("#btnCollectionDetailPrint").prop("disabled", false);
                        $("#btnCloseCollection").prop("disabled", false);
                    },
                    500: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                        document.getElementById('btnCollectionDetailUnlock').innerHTML = "<i class='fa fa-unlock'></i> Unlock";
                        $("#btnCollectionDetailJournal").prop("disabled", false);
                        $("#btnCollectionDetailUnlock").prop("disabled", false);
                        $("#btnCollectionDetailCancel").prop("disabled", false);
                        $("#btnCollectionDetailPrint").prop("disabled", false);
                        $("#btnCloseCollection").prop("disabled", false);
                    }
                }
            });
        }

        // =================
        // Cancel Collection
        // =================
        function btnCollectionDetailCancelOnclick() {
            $('#collectionCancelConfirmModal').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById('btnCollectionCancelConfirm').innerHTML = "<i class='fa fa-times-circle-o'></i> Cancel";
            $("#btnCollectionCancelConfirm").prop("disabled", false);
            $("#btnCollectionCancelConfirmCloseModal").prop("disabled", false);
        }

        // =========================
        // Confirm Cancel Collection
        // =========================
        function btnCollectionCancelConfirmOnclick() {
            document.getElementById('btnCollectionCancelConfirm').innerHTML = "<i class='fa fa-times-circle-o'></i> Cancelling...";
            $("#btnCollectionCancelConfirm").prop("disabled", true);
            $("#btnCollectionCancelConfirmCloseModal").prop("disabled", true);

            var collectonId = getURLParameterValue("id");
            document.getElementById('btnCollectionDetailCancel').innerHTML = "<i class='fa fa-times-circle-o'></i> Cancelling...";
            $("#btnCollectionDetailJournal").prop("disabled", true);
            $("#btnCollectionDetailLock").prop("disabled", true);
            $("#btnCollectionDetailUnlock").prop("disabled", true);
            $("#btnCollectionDetailCancel").prop("disabled", true);
            $("#btnCollectionDetailPrint").prop("disabled", true);
            $("#btnCloseCollection").prop("disabled", true);

            var id = getURLParameterValue("id");

            $.ajax({
                type: "PUT",
                url: '/api/collection/cancel/' + id,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Cancel Successful");
                        window.setTimeout(function () {
                            location.reload()
                        }, 1000);
                    },
                    404: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                        document.getElementById('btnCollectionDetailCancel').innerHTML = "<i class='fa fa-times-circle-o'></i> Cancel";
                        $("#btnCollectionDetailJournal").prop("disabled", false);
                        $("#btnCollectionDetailUnlock").prop("disabled", false);
                        $("#btnCollectionDetailCancel").prop("disabled", false);
                        $("#btnCollectionDetailPrint").prop("disabled", false);
                        $("#btnCloseCollection").prop("disabled", false);

                        document.getElementById('btnCollectionCancelConfirm').innerHTML = "<i class='fa fa-times-circle-o'></i> Cancel";
                        $("#btnCollectionCancelConfirm").prop("disabled", false);
                        $("#btnCollectionCancelConfirmCloseModal").prop("disabled", false);
                    },
                    400: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                        document.getElementById('btnCollectionDetailCancel').innerHTML = "<i class='fa fa-times-circle-o'></i> Cancel";
                        $("#btnCollectionDetailJournal").prop("disabled", false);
                        $("#btnCollectionDetailUnlock").prop("disabled", false);
                        $("#btnCollectionDetailCancel").prop("disabled", false);
                        $("#btnCollectionDetailPrint").prop("disabled", false);
                        $("#btnCloseCollection").prop("disabled", false);

                        document.getElementById('btnCollectionCancelConfirm').innerHTML = "<i class='fa fa-times-circle-o'></i> Cancel";
                        $("#btnCollectionCancelConfirm").prop("disabled", false);
                        $("#btnCollectionCancelConfirmCloseModal").prop("disabled", false);
                    },
                    500: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                        document.getElementById('btnCollectionDetailCancel').innerHTML = "<i class='fa fa-times-circle-o'></i> Cancel";
                        $("#btnCollectionDetailJournal").prop("disabled", false);
                        $("#btnCollectionDetailUnlock").prop("disabled", false);
                        $("#btnCollectionDetailCancel").prop("disabled", false);
                        $("#btnCollectionDetailPrint").prop("disabled", false);
                        $("#btnCloseCollection").prop("disabled", false);

                        document.getElementById('btnCollectionCancelConfirm').innerHTML = "<i class='fa fa-times-circle-o'></i> Cancel";
                        $("#btnCollectionCancelConfirm").prop("disabled", false);
                        $("#btnCollectionCancelConfirmCloseModal").prop("disabled", false);
                    }
                }
            });
        }

        // ===================================
        // Print Collection (Official Receipt)
        // ===================================
        function btnCollectionDetailPrintOnclick() {
            var collectonId = getURLParameterValue("id");
            var pirntLink = "/RepCollection/Collection?CollectonId=" + collectonId;
            window.open(pirntLink, '_blank');
        }

        // ========================
        // Get Collection Line Data
        // ========================
        function getCollectionLineData() {
            var collectionLineCollectionViewObservableArray = new wijmo.collections.ObservableArray;
            if (document.location.search.length > 0) {

                var ORId = getURLParameterValue("id");

                NProgress.start();
                $.ajax({
                    url: '/api/collectionLine/list/' + ORId,
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    success: function (results) {
                        var totalAmount = 0;
                        if (results.length > 0) {
                            var btnEditId = "<button class='btn btn-primary btn-xs btn-block' onclick='btnCollectionLineEditOnclick()'><i class='fa fa-edit'></i> Edit</button>";
                            var btnDeleteId = "<button class='btn btn-danger btn-xs btn-block' onclick='btnCollectionLineDeleteOnclick()'><i class='fa fa-trash'></i> Delete</button>";

                            if (isLocked) {
                                btnEditId = "<button class='btn btn-primary btn-xs btn-block' onclick='btnCollectionLineEditOnclick()' disabled><i class='fa fa-edit'></i> Edit</button>";
                                btnDeleteId =  "<button class='btn btn-danger btn-xs btn-block' onclick='btnCollectionLineDeleteOnclick()' disabled><i class='fa fa-trash'></i> Delete</button>";
                            }

                            for (i = 0; i < results.length; i++) {
                                var CheckDateResult = new Date(results[i]["CheckDate"])
                                var CheckDate = ('0' + (CheckDateResult.getMonth() + 1)).slice(-2) + '-' + ('0' + CheckDateResult.getDate()).slice(-2) + '-' + CheckDateResult.getFullYear();

                                collectionLineCollectionViewObservableArray.push({
                                    EditId: btnEditId,
                                    DeleteId: btnDeleteId,
                                    Id: results[i]["Id"],
                                    ORId: results[i]["ORId"],
                                    BranchId: results[i]["BranchId"],
                                    Branch: results[i]["Branch"],
                                    AccountId: results[i]["AccountId"],
                                    Account: results[i]["Account"],
                                    ArticleId: results[i]["ArticleId"],
                                    Article: results[i]["Article"],
                                    SIId: results[i]["SIId"],
                                    SINumber: results[i]["SINumber"],
                                    Particulars: results[i]["Particulars"],
                                    Amount: results[i]["Amount"],
                                    AmountDisplay: parseFloat(results[i]["Amount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                    PayTypeId: results[i]["PayTypeId"],
                                    PayType: results[i]["PayType"],
                                    CheckNumber: results[i]["CheckNumber"],
                                    CheckDate: CheckDate,
                                    CheckBank: results[i]["CheckBank"],
                                    DepositoryBankId: results[i]["DepositoryBankId"],
                                    DepositoryBank: results[i]["DepositoryBank"],
                                    IsClear: results[i]["IsClear"]
                                });

                                totalAmount += results[i]["Amount"];
                            }
                        }

                        document.getElementById('inpCollectionLineTotalAmount').value = parseFloat(totalAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");

                        NProgress.done();
                    }
                });
            }

            return collectionLineCollectionViewObservableArray;
        }

        // ===============================
        // Create Collection Line FlexGrid
        // ===============================
        function createCollectionLineFlexGrid() {
            collectionLineCollectionView = new wijmo.collections.CollectionView(getCollectionLineData());
            collectionLineCollectionView.canFilter = true;
            collectionLineCollectionView.pageSize = cboCollectionLineDisplayNumberOfRows.selectedValue;

            var filterText = '';
            $('#inpCollectionLineSearchFilter').keyup(function () {
                filterText = this.value.toLowerCase();
                collectionLineCollectionView.refresh();
            });

            collectionLineCollectionView.filter = function (item) {
                return !filterText || (item.Branch.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.PayType.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Particulars.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.SINumber.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Account.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Article.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.CheckNumber.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.CheckBank.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.DepositoryBank.toLowerCase().indexOf(filterText) > -1);
            }

            collectionLineCollectionView.collectionChanged.addHandler(function (sender, args) {
                updateCollectionLineNavigationButtons();
            });

            collectionLineFlexGrid = new wijmo.grid.FlexGrid('#collectionLineFlexGrid');
            collectionLineFlexGrid.initialize({
                columns: [
                    @{
                        if (canEdit)
                        {
                            <text>
                                {
                                    "header": "Edit",
                                    "binding": "EditId",
                                    "width": 70,
                                    "align": "center",
                                    "allowResizing": false,
                                    "allowSorting": false,
                                    "isContentHtml": true
                                },
                            </text>
                        }
                        if (canDelete)
                        {
                            <text>
                                {
                                    "header": "Delete",
                                    "binding": "DeleteId",
                                    "width": 70,
                                    "align": "center",
                                    "allowResizing": false,
                                    "allowSorting": false,
                                    "isContentHtml": true
                                },
                            </text>
                        }
                    }
                    {
                        "header": "Branch",
                        "binding": "Branch",
                        "allowSorting": true,
                        "width": 150
                    },
                    {
                        "header": "Pay Type",
                        "binding": "PayType",
                        "allowSorting": true,
                        "width": 150
                    },
                    {
                        "header": "Particulars",
                        "binding": "Particulars",
                        "allowSorting": true,
                        "width": 200
                    },
                    {
                        "header": "SI No.",
                        "binding": "SINumber",
                        "allowSorting": true,
                        "width": 120
                    },
                    {
                        "header": "Amount",
                        "binding": "AmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": 120
                    },
                    {
                        "header": "Account",
                        "binding": "Account",
                        "allowSorting": true,
                        "width": 150
                    },
                    {
                        "header": "Article",
                        "binding": "Article",
                        "allowSorting": true,
                        "width": 150
                    },
                    {
                        "header": "Check No.",
                        "binding": "CheckNumber",
                        "allowSorting": true,
                        "width": 150
                    },
                    {
                        "header": "Check Date",
                        "binding": "CheckDate",
                        "allowSorting": true,
                        "width": 110
                    },
                    {
                        "header": "Check Bank",
                        "binding": "CheckBank",
                        "allowSorting": true,
                        "width": 150
                    },
                    {
                        "header": "Depository Bank",
                        "binding": "DepositoryBank",
                        "allowSorting": true,
                        "width": 150
                    },
                    {
                        "header": "C",
                        "binding": "IsClear",
                        "allowSorting": true,
                        "width": 50
                    }
                ],
                autoGenerateColumns: false,
                itemsSource: collectionLineCollectionView,
                isReadOnly: true,
                frozenColumns: 2,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            collectionLineFlexGrid.trackChanges = true;

            updateCollectionLineNavigationButtons();

            btnCollectionLineMoveToFirstPageGrid.addEventListener('click', function () {
                collectionLineCollectionView.moveToFirstPage();
                updateCollectionLineNavigationButtons();
            });

            btnCollectionLineMoveToPreviousPageGrid.addEventListener('click', function () {
                collectionLineCollectionView.moveToPreviousPage();
                updateCollectionLineNavigationButtons();
            });

            btnCollectionLineMoveToNextPageGrid.addEventListener('click', function () {
                collectionLineCollectionView.moveToNextPage();
                updateCollectionLineNavigationButtons();
            });

            btnCollectionLineMoveToLastPageGrid.addEventListener('click', function () {
                collectionLineCollectionView.moveToLastPage();
                updateCollectionLineNavigationButtons();
            });
        }

        // =========================================
        // Update Collection Line Navigation Buttons
        // =========================================
        function updateCollectionLineNavigationButtons() {
            if (collectionLineCollectionView.pageSize <= 0) {
                document.getElementById('collectionLineCollectionViewNavigationPageGrid').style.display = 'none';
                return;
            }
            document.getElementById('collectionLineCollectionViewNavigationPageGrid').style.display = 'block';
            if (collectionLineCollectionView.pageIndex === 0) {
                btnCollectionLineMoveToFirstPageGrid.setAttribute('disabled', 'disabled');
                btnCollectionLineMoveToPreviousPageGrid.setAttribute('disabled', 'disabled');
                btnCollectionLineMoveToNextPageGrid.removeAttribute('disabled');
                btnCollectionLineMoveToLastPageGrid.removeAttribute('disabled');
            } else if (collectionLineCollectionView.pageIndex === (collectionLineCollectionView.pageCount - 1)) {
                btnCollectionLineMoveToFirstPageGrid.removeAttribute('disabled');
                btnCollectionLineMoveToPreviousPageGrid.removeAttribute('disabled');
                btnCollectionLineMoveToLastPageGrid.setAttribute('disabled', 'disabled');
                btnCollectionLineMoveToNextPageGrid.setAttribute('disabled', 'disabled');
            } else {
                btnCollectionLineMoveToFirstPageGrid.removeAttribute('disabled');
                btnCollectionLineMoveToPreviousPageGrid.removeAttribute('disabled');
                btnCollectionLineMoveToNextPageGrid.removeAttribute('disabled');
                btnCollectionLineMoveToLastPageGrid.removeAttribute('disabled');
            }
            btnCollectionLineCurrentPageGrid.innerHTML = (collectionLineCollectionView.pageIndex + 1) + ' / ' + collectionLineCollectionView.pageCount;
        }

        // ===================================
        // Create Combo Display Number of Rows
        // ===================================
        function createCboDisplayNumberOfRows() {
            var rowsObservableArray = new wijmo.collections.ObservableArray();

            for (var i = 0; i <= 4; i++) {
                var rows = 0;
                var rowsString = "";

                if (i == 0) {
                    rows = 15;
                    rowsString = "Show 15 Rows";
                } else if (i == 1) {
                    rows = 50;
                    rowsString = "Show 50 Rows";
                } else if (i == 2) {
                    rows = 100;
                    rowsString = "Show 100 Rows";
                } else if (i == 3) {
                    rows = 150;
                    rowsString = "Show 150 Rows";
                } else {
                    rows = 200;
                    rowsString = "Show 200 Rows";
                }

                rowsObservableArray.push({
                    rowNumber: rows,
                    rowString: rowsString
                });
            }

            cboCollectionLineDisplayNumberOfRows.dispose();
            cboCollectionLineDisplayNumberOfRows = new wijmo.input.ComboBox('#cboCollectionLineDisplayNumberOfRows', {
                isEditable: false,
                itemsSource: rowsObservableArray,
                displayMemberPath: "rowString",
                selectedValuePath: "rowNumber",
                selectedValue: 50,
                onSelectedIndexChanged: function () {
                    NProgress.start();

                    setTimeout(function () {
                        var numberOfRows = cboCollectionLineDisplayNumberOfRows.selectedValue;
                        collectionLineCollectionView.pageSize = parseInt(numberOfRows);
                        collectionLineCollectionView.refresh();
                        collectionLineFlexGrid.refresh();

                        NProgress.done();
                    }, 300);
                }
            });
        }

        // ================================
        // Refresh Collection Line FlexGrid
        // ================================
        function refreshCollectionLineFlexGrid() {
            collectionLineCollectionView = new wijmo.collections.CollectionView(getCollectionLineData());
            collectionLineCollectionView.canFilter = true;
            collectionLineCollectionView.pageSize = cboCollectionLineDisplayNumberOfRows.selectedValue;

            var filterText = '';
            $('#inpCollectionLineSearchFilter').keyup(function () {
                filterText = this.value.toLowerCase();
                collectionLineCollectionView.refresh();
            });

            collectionLineCollectionView.filter = function (item) {
                return !filterText || (item.Branch.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.PayType.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Particulars.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.SINumber.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Account.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Article.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.CheckNumber.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.CheckBank.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.DepositoryBank.toLowerCase().indexOf(filterText) > -1);
            }

            collectionLineCollectionView.collectionChanged.addHandler(function (sender, args) {
                updateCollectionLineNavigationButtons();
            });

            collectionLineFlexGrid.itemsSource = collectionLineCollectionView;
            collectionLineFlexGrid.trackChanges = true;
        }

        // ===================================
        // Create Collection Line Combo Branch
        // ===================================
        function createCollectionLineCboBranch(branchId, accountId, articleId, SIId, payTypeId, checkDate, depositoryBankId) {
            var collectionLineBranchesObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/collectionLine/dropdown/list/branch',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            collectionLineBranchesObservableArray.push({
                                Id: results[i]["Id"],
                                Branch: results[i]["Branch"]
                            });
                        }
                    }

                    var disabled = true;
                    if (results.length > 0) {
                        disabled = false;
                        $("#btnCollectionLineSave").prop("disabled", false);
                    } else {
                        $("#btnCollectionLineSave").prop("disabled", true);
                    }

                    cboCollectionLineBranch.dispose();
                    cboCollectionLineBranch = new wijmo.input.ComboBox('#cboCollectionLineBranch', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: collectionLineBranchesObservableArray,
                        displayMemberPath: "Branch",
                        selectedValuePath: "Id",
                        selectedValue: branchId
                    });

                    createCollectionLineCboAccount(accountId, articleId, SIId, payTypeId, checkDate, depositoryBankId);
                }
            });
        }

        // ====================================
        // Create Collection Line Combo Account
        // ====================================
        function createCollectionLineCboAccount(accountId, articleId, SIId, payTypeId, checkDate, depositoryBankId) {
            var collectionLineAccountsObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/collectionLine/dropdown/list/account',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            collectionLineAccountsObservableArray.push({
                                Id: results[i]["Id"],
                                AccountCode: results[i]["AccountCode"],
                                Account: results[i]["Account"]
                            });
                        }
                    }

                    var disabled = true;
                    if (results.length > 0) {
                        disabled = false;
                        $("#btnCollectionLineSave").prop("disabled", false);
                    } else {
                        $("#btnCollectionLineSave").prop("disabled", true);
                    }

                    cboCollectionLineAccountCode.dispose();
                    cboCollectionLineAccountCode = new wijmo.input.ComboBox('#cboCollectionLineAccountCode', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: collectionLineAccountsObservableArray,
                        displayMemberPath: "AccountCode",
                        selectedValuePath: "Id",
                        selectedValue: accountId,
                        onSelectedIndexChanged: function () {
                            cboCollectionLineAccount.selectedValue = this.selectedValue;
                        }
                    });

                    cboCollectionLineAccount.dispose();
                    cboCollectionLineAccount = new wijmo.input.ComboBox('#cboCollectionLineAccount', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: collectionLineAccountsObservableArray,
                        displayMemberPath: "Account",
                        selectedValuePath: "Id",
                        selectedValue: accountId,
                        onSelectedIndexChanged: function () {
                            cboCollectionLineAccountCode.selectedValue = this.selectedValue;
                            cboCollectionLineArticle.disabled = true;
                            isCboAccountChanged = true;
                            createCollectionLineCboArticle(articleId, SIId, payTypeId, checkDate, depositoryBankId);
                        }
                    });

                    createCollectionLineCboArticle(articleId, SIId, payTypeId, checkDate, depositoryBankId);
                }
            });
        }

        // ====================================
        // Create Collection Line Combo Article
        // ====================================
        function createCollectionLineCboArticle(articleId, SIId, payTypeId, checkDate,  depositoryBankId) {
            var collectionLineArticlesObservableArray = new wijmo.collections.ObservableArray();
            if (cboCollectionLineAccount.selectedValue != null) {
                $.ajax({
                    url: '/api/collectionLine/dropdown/list/article/' + cboCollectionLineAccount.selectedValue,
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    success: function (results) {
                        if (results.length > 0) {
                            for (i = 0; i < results.length; i++) {
                                collectionLineArticlesObservableArray.push({
                                    Id: results[i]["Id"],
                                    Article: results[i]["Article"]
                                });
                            }
                        }

                        var disabled = true;
                        if (results.length > 0) {
                            disabled = false;
                            $("#btnCollectionLineSave").prop("disabled", false);
                        } else {
                            $("#btnCollectionLineSave").prop("disabled", true);
                        }

                        cboCollectionLineArticle.dispose();
                        cboCollectionLineArticle = new wijmo.input.ComboBox('#cboCollectionLineArticle', {
                            disabled: disabled,
                            isEditable: false,
                            itemsSource: collectionLineArticlesObservableArray,
                            displayMemberPath: "Article",
                            selectedValuePath: "Id",
                            selectedValue: articleId
                        });

                        if (!isCboAccountChanged) {
                            createCollectionLineCboSINumber(SIId, payTypeId, checkDate,  depositoryBankId);
                        }
                    }
                });
            } else {
                cboCollectionLineArticle.dispose();
                cboCollectionLineArticle = new wijmo.input.ComboBox('#cboCollectionLineArticle', {
                    disabled: true,
                    isEditable: false,
                    itemsSource: collectionLineArticlesObservableArray,
                });

                if (!isCboAccountChanged) {
                    createCollectionLineCboSINumber(SIId, payTypeId, checkDate,  depositoryBankId);
                }
            }
        }

        // ======================================
        // Create Collection Line Combo SI Number
        // ======================================
        function createCollectionLineCboSINumber(SIId, payTypeId, checkDate,  depositoryBankId) {
            var collectionLineSalesObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/collectionLine/dropdown/list/salesInvoice/' + cboCollectionDetailCustomer.selectedValue,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            collectionLineSalesObservableArray.push({
                                Id: results[i]["Id"],
                                SINumber: results[i]["SINumber"],
                                SIDetails: results[i]["SINumber"] + " / (" + (results[i]["SIDate"]).replace(/\//g, '-') + ")",
                                BalanceAmount: results[i]["BalanceAmount"]
                            });
                        }
                    }

                    var disabled = true;
                    if (results.length > 0) {
                        disabled = false;
                    }

                    cboCollectionLineSINumber.dispose();
                    cboCollectionLineSINumber = new wijmo.input.ComboBox('#cboCollectionLineSINumber', {
                        disabled: disabled,
                        required: false,
                        isEditable: false,
                        itemsSource: collectionLineSalesObservableArray,
                        displayMemberPath: "SIDetails",
                        selectedValuePath: "Id",
                        selectedValue: SIId,
                        onSelectedIndexChanged: function () {
                            if (this.selectedValue != null) {
                                document.getElementById("inpCollectionLineAmount").value = formatDecimalValues(this.selectedItem["BalanceAmount"]);
                            } else {
                                document.getElementById("inpCollectionLineAmount").value = formatDecimalValues(0);
                            }
                        }
                    });

                    if (collectionLineId == 0) {
                        if (cboCollectionLineSINumber.selectedValue != null) {
                            document.getElementById("inpCollectionLineAmount").value = formatDecimalValues(cboCollectionLineSINumber.selectedItem["BalanceAmount"].toLocaleString());
                        } else {
                            document.getElementById("inpCollectionLineAmount").value = formatDecimalValues(0);
                        }
                    }

                    createCollectionLineCboPayType(payTypeId, checkDate,  depositoryBankId);
                }
            });
        }

        // =====================================
        // Create Collection Line Combo Pay Type
        // =====================================
        function createCollectionLineCboPayType(payTypeId, checkDate,  depositoryBankId) {
            var collectionLinePayTypesObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/collectionLine/dropdown/list/payType',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            collectionLinePayTypesObservableArray.push({
                                Id: results[i]["Id"],
                                PayType: results[i]["PayType"]
                            });
                        }
                    }

                    var disabled = true;
                    if (results.length > 0) {
                        disabled = false;
                    } else {
                        $("#btnCollectionLineSave").prop("disabled", true);
                    }

                    if (!isSalesInvoiceStatusPayTypeSelected) {
                        cboCollectionLinePayType.dispose();
                        cboCollectionLinePayType = new wijmo.input.ComboBox('#cboCollectionLinePayType', {
                            disabled: disabled,
                            isEditable: false,
                            itemsSource: collectionLinePayTypesObservableArray,
                            displayMemberPath: "PayType",
                            selectedValuePath: "Id",
                            selectedValue: payTypeId
                        });
                    }

                    if (isSalesInvoiceStatusPayTypeSelected) {
                        cboSalesInvoiceStatusPayType.dispose();
                        cboSalesInvoiceStatusPayType = new wijmo.input.ComboBox('#cboSalesInvoiceStatusPayType', {
                            disabled: disabled,
                            isEditable: false,
                            itemsSource: collectionLinePayTypesObservableArray,
                            displayMemberPath: "PayType",
                            selectedValuePath: "Id"
                        });
                    }

                    createCollectionLineCboCheckDate(checkDate, depositoryBankId);
                }
            });
        }

        // =======================================
        // Create Collection Line Combo Check Date
        // =======================================
        function createCollectionLineCboCheckDate(checkDate, depositoryBankId) {
            cboCollectionLineCheckDate.dispose();
            cboCollectionLineCheckDate = new wijmo.input.InputDate('#cboCollectionLineCheckDate', {
                format: 'MM-dd-yyyy',
                value: checkDate,
            });

            cboSalesInvoiceStatusCheckDate.dispose();
            cboSalesInvoiceStatusCheckDate = new wijmo.input.InputDate('#cboSalesInvoiceStatusCheckDate', {
                format: 'MM-dd-yyyy',
                value: new Date(),
            });

            createCollectionLineCboDepositoryBank(depositoryBankId);
        }

        // ======================================
        // Create Collection Line Depository Bank
        // ======================================
        function createCollectionLineCboDepositoryBank(depositoryBankId) {
            var collectionArticleBanksObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/collectionLine/dropdown/list/depositoryBank',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            collectionArticleBanksObservableArray.push({
                                Id: results[i]["Id"],
                                Article: results[i]["Article"]
                            });
                        }
                    }

                    var disabled = true;
                    if (results.length > 0) {
                        disabled = false;
                    } else {
                        $("#btnCollectionLineSave").prop("disabled", true);
                    }

                    if (!isSalesInvoiceStatusPayTypeSelected) {
                        cboCollectionLineDepositoryBank.dispose();
                        cboCollectionLineDepositoryBank = new wijmo.input.ComboBox('#cboCollectionLineDepositoryBank', {
                            disabled: disabled,
                            isEditable: false,
                            itemsSource: collectionArticleBanksObservableArray,
                            displayMemberPath: "Article",
                            selectedValuePath: "Id",
                            selectedValue: depositoryBankId
                        });
                    }

                    if (isSalesInvoiceStatusPayTypeSelected) {
                        cboSalesInvoiceStatusDepositoryBank.dispose();
                        cboSalesInvoiceStatusDepositoryBank = new wijmo.input.ComboBox('#cboSalesInvoiceStatusDepositoryBank', {
                            disabled: disabled,
                            isEditable: false,
                            itemsSource: collectionArticleBanksObservableArray,
                            displayMemberPath: "Article",
                            selectedValuePath: "Id"
                        });
                    }
                }
            });
        }

        // ===================
        // Add Collection Line
        // ===================
        function btnCollectionLineAddOnclick() {
            isSalesInvoiceStatusPayTypeSelected = false;

            $('#collectionLineDetailModal').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById('collectionLineModalTitle').innerHTML = "Add Collection Line";
            document.getElementById('btnCollectionLineSave').innerHTML = "<i class='fa fa-save'></i> Save";
            $("#btnCollectionLineSave").prop("disabled", true);
            $("#btnCollectionLineCloseDetailModal").prop("disabled", false);

            $('.requiredCollectionLine').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            var cboCollectionDetailBranchId = cboCollectionDetailBranch.selectedValue;
            createCollectionLineCboBranch(cboCollectionDetailBranchId, 0, 0, 0, 0, new Date(), 0);
            collectionLineId = 0;
            document.getElementById('inpCollectionLineParticulars').value = 'NA';
            document.getElementById('inpCollectionLineCheckNo').value = 'NA';
            document.getElementById('inpCollectionLineCheckBank').value = 'NA';
            document.getElementById('inpCollectionLineIsClear').checked = false;
        }

        // ====================
        // Edit Collection Line
        // ====================
        function btnCollectionLineEditOnclick() {
            isSalesInvoiceStatusPayTypeSelected = false;

            $('#collectionLineDetailModal').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById('collectionLineModalTitle').innerHTML = "Edit Collection Line";
            document.getElementById('btnCollectionLineSave').innerHTML = "<i class='fa fa-save'></i> Save";
            $("#btnCollectionLineSave").prop("disabled", true);
            $("#btnCollectionLineCloseDetailModal").prop("disabled", false);

            $('.requiredCollectionLine').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            collectionLineCollectionView.editItem(collectionLineCollectionView.currentItem);
            var collectionLine = collectionLineCollectionView.currentEditItem;

            collectionLineId = collectionLine.Id;
            createCollectionLineCboBranch(collectionLine.BranchId, collectionLine.AccountId, collectionLine.ArticleId, collectionLine.SIId, collectionLine.PayTypeId, new Date(collectionLine.CheckDate), collectionLine.DepositoryBankId);
            document.getElementById('inpCollectionLineParticulars').value = collectionLine.Particulars;
            document.getElementById('inpCollectionLineCheckNo').value = collectionLine.CheckNumber;
            document.getElementById('inpCollectionLineCheckBank').value = collectionLine.CheckBank;
            document.getElementById('inpCollectionLineAmount').value = formatDecimalValues(collectionLine.Amount);
            document.getElementById('inpCollectionLineIsClear').checked = collectionLine.IsClear;
        }

        // ======================
        // Delete Collection Line
        // ======================
        function btnCollectionLineDeleteOnclick() {
            $('#collectionLineConfirmDeleteModal').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById('collectionLineConfirmDelete').innerHTML = "<i class='fa fa-trash'></i> Delete";
            $("#collectionLineConfirmDelete").prop("disabled", false);
            $("#collectionLineConfirmDeleteCloseModal").prop("disabled", false);
        }

        // ==============================
        // Confirm Delete Collection Line
        // ==============================
        function collectionLineConfirmDeleteOnclick() {
            document.getElementById('collectionLineConfirmDelete').innerHTML = "<i class='fa fa-trash'></i> Deleting...";
            $("#collectionLineConfirmDelete").prop("disabled", true);
            $("#collectionLineConfirmDeleteCloseModal").prop("disabled", true);

            var ORId = getURLParameterValue("id");

            collectionLineCollectionView.editItem(collectionLineCollectionView.currentItem);
            var collectionLineId = collectionLineCollectionView.currentEditItem.Id;

            $.ajax({
                url: '/api/collectionLine/delete/' + collectionLineId + '/' + ORId,
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Delete Successful");
                        $('#collectionLineConfirmDeleteModal').modal('hide');
                        refreshCollectionLineFlexGrid();
                    },
                    404: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                        $('#collectionLineConfirmDeleteModal').modal('hide');
                        document.getElementById('collectionLineConfirmDelete').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $("#collectionLineConfirmDelete").prop("disabled", false);
                        $("#collectionLineConfirmDeleteCloseModal").prop("disabled", false);
                    },
                    400: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                        $('#collectionLineConfirmDeleteModal').modal('hide');
                        document.getElementById('collectionLineConfirmDelete').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $("#collectionLineConfirmDelete").prop("disabled", false);
                        $("#collectionLineConfirmDeleteCloseModal").prop("disabled", false);
                    },
                    500: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                        $('#collectionLineConfirmDeleteModal').modal('hide');
                        document.getElementById('collectionLineConfirmDelete').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $("#collectionLineConfirmDelete").prop("disabled", false);
                        $("#collectionLineConfirmDeleteCloseModal").prop("disabled", false);
                    }
                }
            });
        }

        // ====================
        // Save Collection Line
        // ====================
        function btnCollectionLineSaveOnclick() {
            var collectionObject = new Object();
            collectionObject.BranchId = cboCollectionLineBranch.selectedValue;
            collectionObject.AccountId = cboCollectionLineAccount.selectedValue;
            collectionObject.ArticleId = cboCollectionLineArticle.selectedValue;
            collectionObject.SIId = cboCollectionLineSINumber.selectedValue;
            collectionObject.Particulars = document.getElementById('inpCollectionLineParticulars').value;
            collectionObject.Amount = document.getElementById('inpCollectionLineAmount').value;
            collectionObject.PayTypeId = cboCollectionLinePayType.selectedValue;
            collectionObject.CheckNumber = document.getElementById('inpCollectionLineCheckNo').value;
            collectionObject.CheckDate = cboCollectionLineCheckDate.value.toLocaleDateString();
            collectionObject.CheckBank = document.getElementById('inpCollectionLineCheckBank').value;
            collectionObject.DepositoryBankId = cboCollectionLineDepositoryBank.selectedValue;
            collectionObject.IsClear = document.getElementById('inpCollectionLineIsClear').checked;
            var collectionData = JSON.stringify(collectionObject);

            var isValid = true;
            $('.requiredCollectionLine').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                } else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            if (isValid) {
                document.getElementById('btnCollectionLineSave').innerHTML = "<i class='fa fa-save'></i> Saving...";
                $("#btnCollectionLineSave").prop("disabled", true);
                $("#btnCollectionLineCloseDetailModal").prop("disabled", true);

                var ORId = getURLParameterValue("id");

                if (collectionLineId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/collectionLine/add/' + ORId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: collectionData,
                        statusCode: {
                            200: function () {
                                toastr.success("Save Successful");
                                $('#collectionLineDetailModal').modal('hide');
                                refreshCollectionLineFlexGrid();
                            },
                            404: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                                $('#collectionLineDetailModal').modal('hide');
                                document.getElementById('btnCollectionLineSave').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#btnCollectionLineSave").prop("disabled", true);
                                $("#btnCollectionLineCloseDetailModal").prop("disabled", false);
                            },
                            400: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                                $('#collectionLineDetailModal').modal('hide');
                                document.getElementById('btnCollectionLineSave').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#btnCollectionLineSave").prop("disabled", true);
                                $("#btnCollectionLineCloseDetailModal").prop("disabled", false);
                            },
                            500: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                                $('#collectionLineDetailModal').modal('hide');
                                document.getElementById('btnCollectionLineSave').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#btnCollectionLineSave").prop("disabled", true);
                                $("#btnCollectionLineCloseDetailModal").prop("disabled", false);
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/collectionLine/update/' + collectionLineId + '/' + ORId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: collectionData,
                        statusCode: {
                            200: function () {
                                toastr.success("Update Successful");
                                $('#collectionLineDetailModal').modal('hide');
                                refreshCollectionLineFlexGrid();
                            },
                            404: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                                $('#collectionLineDetailModal').modal('hide');
                                document.getElementById('btnCollectionLineSave').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#btnCollectionLineSave").prop("disabled", true);
                                $("#btnCollectionLineCloseDetailModal").prop("disabled", false);
                            },
                            400: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                                $('#collectionLineDetailModal').modal('hide');
                                document.getElementById('btnCollectionLineSave').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#btnCollectionLineSave").prop("disabled", true);
                                $("#btnCollectionLineCloseDetailModal").prop("disabled", false);
                            },
                            500: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                                $('#collectionLineDetailModal').modal('hide');
                                document.getElementById('btnCollectionLineSave').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#btnCollectionLineSave").prop("disabled", true);
                                $("#btnCollectionLineCloseDetailModal").prop("disabled", false);
                            }
                        }
                    });
                }
            } else {
                toastr.error("Invalid Entry");
            }
        }

        // ================
        // Get Journal Data
        // ================
        function getJournalData() {
            var journalsObservableArray = new wijmo.collections.ObservableArray;
            var ORId = getURLParameterValue('id');

            $.ajax({
                url: '/api/jounal/collection/list/' + ORId,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    var totalDebitAmount = 0;
                    var totalCreditAmount = 0;

                    var variance = 0;

                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {

                            var journalDateResult = new Date(results[i]["JournalDate"])
                            var journalDate = ('0' + (journalDateResult.getMonth() + 1)).slice(-2) + '-' + ('0' + journalDateResult.getDate()).slice(-2) + '-' + journalDateResult.getFullYear();

                            journalsObservableArray.push({
                                Branch: results[i]["Branch"],
                                JournalDate: journalDate,
                                AccountCode: results[i]["AccountCode"],
                                Account: results[i]["Account"],
                                Article: results[i]["Article"],
                                DebitAmountDisplay: parseFloat(results[i]["DebitAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                CreditAmountDisplay: parseFloat(results[i]["CreditAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")
                            });

                            var debit = parseFloat(Math.round(results[i]["DebitAmount"] * 100) / 100);
                            var credit = parseFloat(Math.round(results[i]["CreditAmount"] * 100) / 100);

                            totalDebitAmount += debit;
                            totalCreditAmount += credit;
                        }

                        variance = totalDebitAmount - totalCreditAmount;
                    }

                    document.getElementById('inpJournalTotalDebit').value = parseFloat(Math.round(totalDebitAmount * 100) / 100).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                    document.getElementById('inpJournalTotalCredit').value = parseFloat(Math.round(totalCreditAmount * 100) / 100).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                    document.getElementById('inpJournalVariance').value = parseFloat(Math.round(variance * 100) / 100).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");

                    $("#journalLoading").hide();
                    $("#journalContent").show();
                }
            });

            return journalsObservableArray;
        }

        // ===============
        // Display Journal
        // ===============
        function btnCollectionDetailJournalOnclick() {
            $('#journalEntryModal').modal({
                show: true,
                backdrop: 'static'
            });

            $("#journalLoading").show();
            document.getElementById("journalLoading").innerHTML = 'Loading...';
            $("#journalContent").hide();

            setTimeout(function () {
                createJournalFlexGrid();
            }, 500)
        }

        // ========================
        // Create Journal Flex Grid
        // ========================
        function createJournalFlexGrid() {
            journalCollectionView = new wijmo.collections.CollectionView(getJournalData());

            journalFlexGrid.dispose();
            journalFlexGrid = new wijmo.grid.FlexGrid('#journalFlexGrid');
            journalFlexGrid.initialize({
                columns: [
                    {
                        "header": "Branch",
                        "binding": "Branch",
                        "allowSorting": true,
                        "width": "2.5*"
                    },
                    {
                        "header": "Date",
                        "binding": "JournalDate",
                        "allowSorting": true,
                        "width": "1.5*"
                    },
                    {
                        "header": "Code",
                        "binding": "AccountCode",
                        "allowSorting": true,
                        "width": "1.8*"
                    },
                    {
                        "header": "Account",
                        "binding": "Account",
                        "allowSorting": true,
                        "width": "3*"
                    },
                    {
                        "header": "Article",
                        "binding": "Article",
                        "allowSorting": true,
                        "width": "3*"
                    },
                    {
                        "header": "Debit",
                        "binding": "DebitAmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": "2*",
                    },
                    {
                        "header": "Credit",
                        "binding": "CreditAmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": "2*"
                    }
                ],
                autoGenerateColumns: false,
                itemsSource: journalCollectionView,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            journalFlexGrid.trackChanges = true;
        }

        // ========================================
        // Create Sales Invoice Status Date Filters
        // ========================================
        function createSalesInvoiceStatusDateFilters() {
            cboSalesInvoiceStatusPerCustomerStartDateFilter.dispose();
            cboSalesInvoiceStatusPerCustomerStartDateFilter = new wijmo.input.InputDate('#cboSalesInvoiceStatusPerCustomerStartDateFilter', {
                format: 'MM-dd-yyyy',
                value: new Date(),
                onValueChanged: function () {
                    if (!isCboSalesInvoiceStatusPerCustomerStartDateFilterSelected) {
                        $('#salesInvoiceStatusPerCustomerLoading').show();
                        document.getElementById("salesInvoiceStatusPerCustomerLoading").innerHTML = "Loading...";
                        $('#salesInvoiceStatusPerCustomerContent').hide();
                        $('#btnSalesInvoiceStatusApply').prop("disabled", true);

                        setTimeout(function () {
                            createSalesInvoiceStatusPerCustomerFlexGrid();
                        }, 500);
                    } else {
                        isCboSalesInvoiceStatusPerCustomerStartDateFilterSelected = false;
                    }
                }
            });

            cboSalesInvoiceStatusPerCustomerEndDateFilter.dispose();
            cboSalesInvoiceStatusPerCustomerEndDateFilter = new wijmo.input.InputDate('#cboSalesInvoiceStatusPerCustomerEndDateFilter', {
                format: 'MM-dd-yyyy',
                value: new Date(),
                onValueChanged: function () {
                    if (!isCboSalesInvoiceStatusPerCustomerEndDateFilterSelected) {
                        $('#salesInvoiceStatusPerCustomerLoading').show();
                        document.getElementById("salesInvoiceStatusPerCustomerLoading").innerHTML = "Loading...";
                        $('#salesInvoiceStatusPerCustomerContent').hide();
                        $('#btnSalesInvoiceStatusApply').prop("disabled", true);

                        setTimeout(function () {
                            createSalesInvoiceStatusPerCustomerFlexGrid();
                        }, 500);
                    } else {
                        isCboSalesInvoiceStatusPerCustomerEndDateFilterSelected = false;
                    }
                }
            });

            cboSalesInvoiceStatusPerBranchStartDateFilter.dispose();
            cboSalesInvoiceStatusPerBranchStartDateFilter = new wijmo.input.InputDate('#cboSalesInvoiceStatusPerBranchStartDateFilter', {
                format: 'MM-dd-yyyy',
                value: new Date(),
                onValueChanged: function () {
                    if (!isCboSalesInvoiceStatusPerBranchStartDateFilterSelected) {
                        $('#salesInvoiceStatusPerBranchLoading').show();
                        document.getElementById("salesInvoiceStatusPerBranchLoading").innerHTML = "Loading...";
                        $('#salesInvoiceStatusPerBranchContent').hide();
                        $('#btnSalesInvoiceStatusApply').prop("disabled", true);

                        setTimeout(function () {
                            createSalesInvoiceStatusPerBranchFlexGrid();
                        }, 500);
                    } else {
                        isCboSalesInvoiceStatusPerBranchStartDateFilterSelected = false;
                    }
                }
            });

            cboSalesInvoiceStatusPerBranchEndDateFilter.dispose();
            cboSalesInvoiceStatusPerBranchEndDateFilter = new wijmo.input.InputDate('#cboSalesInvoiceStatusPerBranchEndDateFilter', {
                format: 'MM-dd-yyyy',
                value: new Date(),
                onValueChanged: function () {
                    if (!isCboSalesInvoiceStatusPerBranchEndDateFilterSelected) {
                        $('#salesInvoiceStatusPerBranchLoading').show();
                        document.getElementById("salesInvoiceStatusPerBranchLoading").innerHTML = "Loading...";
                        $('#salesInvoiceStatusPerBranchContent').hide();
                        $('#btnSalesInvoiceStatusApply').prop("disabled", true);

                        setTimeout(function () {
                            createSalesInvoiceStatusPerBranchFlexGrid();
                        }, 500);
                    } else {
                        isCboSalesInvoiceStatusPerBranchEndDateFilterSelected = false;
                    }
                }
            });
        }

        // ============================
        // Display Sales Invoice Status
        // ============================
        function btnCollectionDetailAROnclick() {
            createSalesInvoiceStatusDateFilters();
            isSalesInvoiceStatusPayTypeSelected = true;

            $('#salesInvoiceStatusModal').modal({
                show: true,
                backdrop: 'static'
            });

            if (isSalesInvoiceStatusPerCustomerSelected) {
                $('#salesInvoiceStatusPerCustomerLoading').show();
                document.getElementById("salesInvoiceStatusPerCustomerLoading").innerHTML = "Loading...";
                $('#salesInvoiceStatusPerCustomerContent').hide();
                $('#btnSalesInvoiceStatusApply').prop("disabled", true);

                setTimeout(function () {
                    createSalesInvoiceStatusPerCustomerFlexGrid();
                }, 500);
            } else {
                if (isSalesInvoiceStatusPerBranchSelected) {
                    $('#salesInvoiceStatusPerBranchLoading').show();
                    document.getElementById("salesInvoiceStatusPerBranchLoading").innerHTML = "Loading...";
                    $('#salesInvoiceStatusPerBranchContent').hide();
                    $('#btnSalesInvoiceStatusApply').prop("disabled", true);

                    setTimeout(function () {
                        createSalesInvoiceStatusPerBranchFlexGrid();
                    }, 500);
                }
            }

            createCollectionLineCboPayType(0, new Date(), 0);

            document.getElementById("inpSalesInvoiceStatusCheckNumber").value = "NA";
            document.getElementById("inoSalesInvoiceStatusCheckBank").value = "NA";
            document.getElementById("inpSalesInvoiceStatusIsClear").checked = false;
        }

        // ==========================================
        // Get Sales Invoice Status Per Customer Data
        // ==========================================
        function getSalesInvoiceStatusPerCustomerData() {
            var salesInvoiceStatusPerCustomerCollectionView = new wijmo.collections.ObservableArray;

            var startDate = cboSalesInvoiceStatusPerCustomerStartDateFilter.value.toLocaleDateString().replace(/\//g, '-');
            var endDate = cboSalesInvoiceStatusPerCustomerEndDateFilter.value.toLocaleDateString().replace(/\//g, '-');

            $.ajax({
                url: '/api/collectionLine/popUp/list/salesInvoiceStatus/perCustomer/' + cboCollectionDetailCustomer.selectedValue + '/' + startDate + '/' + endDate,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    $('#btnSalesInvoiceStatusApply').prop("disabled", false);
                    var inpSalesInvoiceStatusPerCustomerTotalAmount = 0;
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {

                            var SIDateResult = new Date(results[i]["SIDate"])
                            var SIDate = ('0' + (SIDateResult.getMonth() + 1)).slice(-2) + '-' + ('0' + SIDateResult.getDate()).slice(-2) + '-' + SIDateResult.getFullYear();

                            salesInvoiceStatusPerCustomerCollectionView.push({
                                Id: results[i]["Id"],
                                BranchId: results[i]["BranchId"],
                                Branch: results[i]["Branch"],
                                SINumber: results[i]["SINumber"],
                                SIDate: SIDate,
                                ManualSINumber: results[i]["ManualSINumber"],
                                Remarks: results[i]["Remarks"],
                                Amount: results[i]["Amount"],
                                AmountDisplay: parseFloat(results[i]["Amount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                PaidAmount: results[i]["PaidAmount"],
                                PaidAmountDisplay: parseFloat(results[i]["PaidAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                AdjustmentAmount: results[i]["AdjustmentAmount"],
                                AdjustmentAmountDisplay: parseFloat(results[i]["AdjustmentAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                BalanceAmount: results[i]["BalanceAmount"],
                                BalanceAmountDisplay: parseFloat(results[i]["BalanceAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                Balance: results[i]["BalanceAmount"],
                                BalanceDisplay: parseFloat(results[i]["BalanceAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                Pick: "<button class='btn btn-primary btn-xs btn-block' onclick='btnSalesInvoiceStatusPerCustomerPickAmount()' style='font-size: 10.5px;'><i class='fa fa-hand-o-right'></i> Pick</button>",
                                Unpick: "<button class='btn btn-danger btn-xs btn-block' onclick='btnSalesInvoiceStatusPerCustomerUnpickAmount()' style='font-size: 10.5px;'><i class='fa fa-hand-o-left'></i> Unpick</button>"
                            });

                            inpSalesInvoiceStatusPerCustomerTotalAmount += results[i]["BalanceAmount"];
                        }
                    } else {
                        $('#btnSalesInvoiceStatusApply').prop("disabled", true);
                    }

                    document.getElementById("inpSalesInvoiceStatusPerCustomerTotalAmount").value = parseFloat(inpSalesInvoiceStatusPerCustomerTotalAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");

                    $('#salesInvoiceStatusPerCustomerLoading').hide();
                    $('#salesInvoiceStatusPerCustomerContent').show();
                }
            });

            return salesInvoiceStatusPerCustomerCollectionView;
        }

        // ==================================================
        // Create Sales Invoice Status Per Customer Flex Grid
        // ==================================================
        function createSalesInvoiceStatusPerCustomerFlexGrid() {
            salesInvoiceStatusPerCustomerCollectionView = new wijmo.collections.CollectionView(getSalesInvoiceStatusPerCustomerData());
            salesInvoiceStatusPerCustomerCollectionView.canFilter = true;
            salesInvoiceStatusPerCustomerCollectionView.pageSize = 10;

            var filterText = '';
            $('#salesInvoiceStatusPerCustomerSearchFilter').keyup(function () {
                filterText = this.value.toLowerCase();

                setTimeout(function () {
                    var totalALLSIAmount = 0
                    salesInvoiceStatusPerCustomerCollectionView.moveToFirstPage();
                    for (var p = 1; p <= salesInvoiceStatusPerCustomerCollectionView.pageCount; p++) {
                        var totalCurrentPageSIAmount = 0
                        for (var i = 0; i < salesInvoiceStatusPerCustomerCollectionView.items.length; i++) {
                            totalCurrentPageSIAmount += parseFloat(salesInvoiceStatusPerCustomerCollectionView.items[i].Balance);
                        }

                        totalALLSIAmount += parseFloat(totalCurrentPageSIAmount);
                        salesInvoiceStatusPerCustomerCollectionView.moveToNextPage();
                        if (p == salesInvoiceStatusPerCustomerCollectionView.pageCount) {
                            salesInvoiceStatusPerCustomerCollectionView.moveToPage(salesInvoiceStatusPerCustomerCurrentPageIndex - 1);
                        }
                    }

                    document.getElementById("inpSalesInvoiceStatusPerCustomerTotalAmount").value = parseFloat(totalALLSIAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                    $('#salesInvoiceStatusPerCustomerPickAmountModal').modal('hide');
                }, 300);

                salesInvoiceStatusPerCustomerCollectionView.refresh();
            });

            salesInvoiceStatusPerCustomerCollectionView.filter = function (item) {
                return !filterText || (item.SINumber.toLowerCase().indexOf(filterText) > -1)
                    || (item.Remarks.toLowerCase().indexOf(filterText) > -1);
            }

            salesInvoiceStatusPerCustomerCollectionView.collectionChanged.addHandler(function (sender, args) {
                updateSalesInvoiceStatusPerCustomerNavigationPageGrid();
            });

            salesInvoiceStatusPerCustomerFlexGrid.dispose();
            salesInvoiceStatusPerCustomerFlexGrid = new wijmo.grid.FlexGrid('#salesInvoiceStatusPerCustomerFlexGrid');
            salesInvoiceStatusPerCustomerFlexGrid.initialize({
                columns: [
                    {
                        "header": "SI Number",
                        "binding": "SINumber",
                        "allowSorting": true,
                        "isReadOnly": true,
                        "width": "1.5*"
                    },
                    {
                        "header": "Date",
                        "binding": "SIDate",
                        "allowSorting": true,
                        "isReadOnly": true,
                        "width": "1.5*"
                    },
                    {
                        "header": "Remarks",
                        "binding": "Remarks",
                        "allowSorting": true,
                        "isReadOnly": true,
                        "width": "4*"
                    },
                    {
                        "header": "SI Amount",
                        "binding": "AmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "isReadOnly": true,
                        "width": "2*"
                    },
                    {
                        "header": "Payments",
                        "binding": "PaidAmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "isReadOnly": true,
                        "width": "2*"
                    },
                    {
                        "header": "Adjustments",
                        "binding": "AdjustmentAmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "isReadOnly": true,
                        "width": "2*"
                    },
                    {
                        "header": "Balance",
                        "binding": "BalanceAmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "isReadOnly": true,
                        "width": "2*"
                    },
                    {
                        "header": "Pick",
                        "binding": "Pick",
                        "allowSorting": true,
                        "isReadOnly": true,
                        "width": 60,
                        "align": "center",
                        "allowResizing": false,
                        "allowSorting": false,
                        "isContentHtml": true
                    },
                    {
                        "header": "Unpick",
                        "binding": "Unpick",
                        "allowSorting": true,
                        "isReadOnly": true,
                        "width": 65,
                        "align": "center",
                        "allowResizing": false,
                        "allowSorting": false,
                        "isContentHtml": true
                    },
                    {
                        "header": "Amount",
                        "binding": "BalanceDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "isReadOnly": true,
                        "width": "2*"
                    }
                ],
                autoGenerateColumns: false,
                itemsSource: salesInvoiceStatusPerCustomerCollectionView,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            salesInvoiceStatusPerCustomerFlexGrid.trackChanges = true;

            var hr = new wijmo.grid.Row();
            salesInvoiceStatusPerCustomerFlexGrid.allowMerging = wijmo.grid.AllowMerging.AllHeaders;
            salesInvoiceStatusPerCustomerFlexGrid.columnHeaders.rows.push(hr);
            salesInvoiceStatusPerCustomerFlexGrid.columnHeaders.rows[0].allowMerging = true;

            salesInvoiceStatusPerCustomerFlexGrid.columnHeaders.columns[0].allowMerging = true;
            salesInvoiceStatusPerCustomerFlexGrid.columnHeaders.setCellData(0, 0, 'SI Number');

            salesInvoiceStatusPerCustomerFlexGrid.columnHeaders.columns[1].allowMerging = true;
            salesInvoiceStatusPerCustomerFlexGrid.columnHeaders.setCellData(0, 1, 'Date');

            salesInvoiceStatusPerCustomerFlexGrid.columnHeaders.columns[2].allowMerging = true;
            salesInvoiceStatusPerCustomerFlexGrid.columnHeaders.setCellData(0, 2, 'Remarks');

            for (var columnQuantityTopAssigned = 3; columnQuantityTopAssigned <= 6; columnQuantityTopAssigned++) {
                salesInvoiceStatusPerCustomerFlexGrid.columnHeaders.setCellData(0, columnQuantityTopAssigned, 'Amount');
            }

            salesInvoiceStatusPerCustomerFlexGrid.columnHeaders.columns[7].allowMerging = true;
            salesInvoiceStatusPerCustomerFlexGrid.columnHeaders.setCellData(0, 7, 'Pick');

            salesInvoiceStatusPerCustomerFlexGrid.columnHeaders.columns[8].allowMerging = true;
            salesInvoiceStatusPerCustomerFlexGrid.columnHeaders.setCellData(0, 8, 'Unpick');

            salesInvoiceStatusPerCustomerFlexGrid.columnHeaders.columns[9].allowMerging = true;
            salesInvoiceStatusPerCustomerFlexGrid.columnHeaders.setCellData(0, 9, 'Amount');

            if (!isBtnARSalesInvoiceStatusPerCustomerClicked) {
                updateSalesInvoiceStatusPerCustomerNavigationPageGrid();

                salesInvoiceStatusPerCustomerMoveToFirstPageGrid.addEventListener('click', function () {
                    salesInvoiceStatusPerCustomerCollectionView.moveToFirstPage();
                    salesInvoiceStatusPerCustomerCurrentPageIndex = salesInvoiceStatusPerCustomerCollectionView.pageIndex + 1;
                    updateSalesInvoiceStatusPerCustomerNavigationPageGrid();
                });

                salesInvoiceStatusPerCustomerMoveToPreviousPageGrid.addEventListener('click', function () {
                    salesInvoiceStatusPerCustomerCollectionView.moveToPreviousPage();
                    salesInvoiceStatusPerCustomerCurrentPageIndex = salesInvoiceStatusPerCustomerCollectionView.pageIndex + 1;
                    updateSalesInvoiceStatusPerCustomerNavigationPageGrid();
                });

                salesInvoiceStatusPerCustomerMoveToNextPageGrid.addEventListener('click', function () {
                    salesInvoiceStatusPerCustomerCollectionView.moveToNextPage();
                    salesInvoiceStatusPerCustomerCurrentPageIndex = salesInvoiceStatusPerCustomerCollectionView.pageIndex + 1;
                    updateSalesInvoiceStatusPerCustomerNavigationPageGrid();
                });

                salesInvoiceStatusPerCustomerMoveToLastPageGrid.addEventListener('click', function () {
                    salesInvoiceStatusPerCustomerCollectionView.moveToLastPage();
                    salesInvoiceStatusPerCustomerCurrentPageIndex = salesInvoiceStatusPerCustomerCollectionView.pageIndex + 1;
                    updateSalesInvoiceStatusPerCustomerNavigationPageGrid();
                });

                isBtnARSalesInvoiceStatusPerCustomerClicked = true;
            }
        }

        // ===========================================================
        // Update Sales Invoice Status Per Customer Navigation Buttons
        // ===========================================================
        function updateSalesInvoiceStatusPerCustomerNavigationPageGrid() {
            if (salesInvoiceStatusPerCustomerCollectionView.pageSize <= 0) {
                document.getElementById('salesInvoiceStatusPerCustomerNavigationPageGrid').style.display = 'none';
                return;
            }
            document.getElementById('salesInvoiceStatusPerCustomerNavigationPageGrid').style.display = 'block';
            if (salesInvoiceStatusPerCustomerCollectionView.pageIndex === 0) {
                salesInvoiceStatusPerCustomerMoveToFirstPageGrid.setAttribute('disabled', 'disabled');
                salesInvoiceStatusPerCustomerMoveToPreviousPageGrid.setAttribute('disabled', 'disabled');
                salesInvoiceStatusPerCustomerMoveToNextPageGrid.removeAttribute('disabled');
                salesInvoiceStatusPerCustomerMoveToLastPageGrid.removeAttribute('disabled');
            } else if (salesInvoiceStatusPerCustomerCollectionView.pageIndex === (salesInvoiceStatusPerCustomerCollectionView.pageCount - 1)) {
                salesInvoiceStatusPerCustomerMoveToFirstPageGrid.removeAttribute('disabled');
                salesInvoiceStatusPerCustomerMoveToPreviousPageGrid.removeAttribute('disabled');
                salesInvoiceStatusPerCustomerMoveToNextPageGrid.setAttribute('disabled', 'disabled');
                salesInvoiceStatusPerCustomerMoveToLastPageGrid.setAttribute('disabled', 'disabled');
            } else {
                salesInvoiceStatusPerCustomerMoveToFirstPageGrid.removeAttribute('disabled');
                salesInvoiceStatusPerCustomerMoveToPreviousPageGrid.removeAttribute('disabled');
                salesInvoiceStatusPerCustomerMoveToNextPageGrid.removeAttribute('disabled');
                salesInvoiceStatusPerCustomerMoveToLastPageGrid.removeAttribute('disabled');
            }
            salesInvoiceStatusPerCustomerCurrentPageGrid.innerHTML = (salesInvoiceStatusPerCustomerCollectionView.pageIndex + 1) + ' / ' + salesInvoiceStatusPerCustomerCollectionView.pageCount;
        }

        // =====================================================
        // Pick Sales Invoice Status Per Customer Amount (Modal)
        // =====================================================
        function btnSalesInvoiceStatusPerCustomerPickAmount() {
            $('#salesInvoiceStatusPerCustomerPickAmountModal').modal({
                show: true,
                backdrop: 'static'
            });

            $("#btnSalesInvoiceStatusPerCustomerPickAmountContinue").prop("disabled", false);
            $("#btnSalesInvoiceStatusPerCustomerPickAmountCloseModal").prop("disabled", false);

            salesInvoiceStatusPerCustomerCollectionView.editItem(salesInvoiceStatusPerCustomerCollectionView.currentItem);
            var saleInvoice = salesInvoiceStatusPerCustomerCollectionView.currentEditItem;
            var balance = saleInvoice.Amount - saleInvoice.PaidAmount;
            document.getElementById("inpSalesInvoiceStatusPerCustomerPickAmount").value = parseFloat(balance).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        }

        // =================================================
        // Sales Invoice Status Per Customer Amount Continue
        // =================================================
        function btnSalesInvoiceStatusPerCustomerPickAmountContinueOnclick() {
            $("#btnSalesInvoiceStatusPerCustomerPickAmountContinue").prop("disabled", true);
            $("#btnSalesInvoiceStatusPerCustomerPickAmountCloseModal").prop("disabled", true);

            var isValid = true;
            $('.requiredPickedAmount').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                } else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            if (isValid) {
                salesInvoiceStatusPerCustomerCollectionView.editItem(salesInvoiceStatusPerCustomerCollectionView.currentItem);
                var saleInvoice = salesInvoiceStatusPerCustomerCollectionView.currentEditItem;
                var balance = document.getElementById("inpSalesInvoiceStatusPerCustomerPickAmount").value.split(",").join("");



                if (isNaN(balance)) {
                    toastr.error("Invalid Entry");

                    $("#btnSalesInvoiceStatusPerCustomerPickAmountContinue").prop("disabled", false);
                    $("#btnSalesInvoiceStatusPerCustomerPickAmountCloseModal").prop("disabled", false);
                } else {
                    saleInvoice.Balance = balance;
                    saleInvoice.BalanceDisplay = parseFloat(balance).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");

                    setTimeout(function () {
                        var totalALLSIAmount = 0
                        salesInvoiceStatusPerCustomerCollectionView.moveToFirstPage();
                        for (var p = 1; p <= salesInvoiceStatusPerCustomerCollectionView.pageCount; p++) {
                            var totalCurrentPageSIAmount = 0
                            for (var i = 0; i < salesInvoiceStatusPerCustomerCollectionView.items.length; i++) {
                                totalCurrentPageSIAmount += parseFloat(salesInvoiceStatusPerCustomerCollectionView.items[i].Balance);
                            }

                            totalALLSIAmount += parseFloat(totalCurrentPageSIAmount);
                            salesInvoiceStatusPerCustomerCollectionView.moveToNextPage();
                            if (p == salesInvoiceStatusPerCustomerCollectionView.pageCount) {
                                salesInvoiceStatusPerCustomerCollectionView.moveToPage(salesInvoiceStatusPerCustomerCurrentPageIndex - 1);
                            }
                        }

                        document.getElementById("inpSalesInvoiceStatusPerCustomerTotalAmount").value = parseFloat(totalALLSIAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        $('#salesInvoiceStatusPerCustomerPickAmountModal').modal('hide');
                    }, 100);

                    salesInvoiceStatusPerCustomerCollectionView.refresh();
                    salesInvoiceStatusPerCustomerFlexGrid.refresh();
                }
            } else {
                toastr.error("Invalid Entry");
            }
        }

        // ===============================================
        // Unpick Sales Invoice Status Per Customer Amount
        // ===============================================
        function btnSalesInvoiceStatusPerCustomerUnpickAmount() {
            salesInvoiceStatusPerCustomerCollectionView.editItem(salesInvoiceStatusPerCustomerCollectionView.currentItem);
            var saleInvoice = salesInvoiceStatusPerCustomerCollectionView.currentEditItem;
            saleInvoice.Balance = 0;
            saleInvoice.BalanceDisplay = parseFloat(0).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");

            setTimeout(function () {
                var totalALLSIAmount = 0
                salesInvoiceStatusPerCustomerCollectionView.moveToFirstPage();
                for (var p = 1; p <= salesInvoiceStatusPerCustomerCollectionView.pageCount; p++) {
                    var totalCurrentPageSIAmount = 0
                    for (var i = 0; i < salesInvoiceStatusPerCustomerCollectionView.items.length; i++) {
                        totalCurrentPageSIAmount += parseFloat(salesInvoiceStatusPerCustomerCollectionView.items[i].Balance);
                    }

                    totalALLSIAmount += parseFloat(totalCurrentPageSIAmount);
                    salesInvoiceStatusPerCustomerCollectionView.moveToNextPage();
                    if (p == salesInvoiceStatusPerCustomerCollectionView.pageCount) {
                        salesInvoiceStatusPerCustomerCollectionView.moveToPage(salesInvoiceStatusPerCustomerCurrentPageIndex - 1);
                    }
                }

                document.getElementById("inpSalesInvoiceStatusPerCustomerTotalAmount").value = parseFloat(totalALLSIAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                $('#salesInvoiceStatusPerCustomerPickAmountModal').modal('hide');
            }, 100);

            salesInvoiceStatusPerCustomerCollectionView.refresh();
            salesInvoiceStatusPerCustomerFlexGrid.refresh();
        }

        // ========================================
        // Get Sales Invoice Status Per Branch Data
        // ========================================
        function getSalesInvoiceStatusPerBranchData() {
            var salesInvoiceStatusPerCustomerCollectionView = new wijmo.collections.ObservableArray;

            var startDate = cboSalesInvoiceStatusPerBranchStartDateFilter.value.toLocaleDateString().replace(/\//g, '-');
            var endDate = cboSalesInvoiceStatusPerBranchEndDateFilter.value.toLocaleDateString().replace(/\//g, '-');

            $.ajax({
                url: '/api/collectionLine/popUp/list/salesInvoiceStatus/perBranch/' + startDate + '/' + endDate,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    $('#btnSalesInvoiceStatusApply').prop("disabled", false);
                    var inpSalesInvoiceStatusPerCustomerTotalAmount = 0;
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {

                            var SIDateResult = new Date(results[i]["SIDate"])
                            var SIDate = ('0' + (SIDateResult.getMonth() + 1)).slice(-2) + '-' + ('0' + SIDateResult.getDate()).slice(-2) + '-' + SIDateResult.getFullYear();

                            salesInvoiceStatusPerCustomerCollectionView.push({
                                Id: results[i]["Id"],
                                BranchId: results[i]["BranchId"],
                                Branch: results[i]["Branch"],
                                SINumber: results[i]["SINumber"],
                                SIDate: SIDate,
                                ManualSINumber: results[i]["ManualSINumber"],
                                Customer: results[i]["Customer"],
                                Remarks: results[i]["Remarks"],
                                Amount: results[i]["Amount"],
                                AmountDisplay: parseFloat(results[i]["Amount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                PaidAmount: results[i]["PaidAmount"],
                                PaidAmountDisplay: parseFloat(results[i]["PaidAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                AdjustmentAmount: results[i]["AdjustmentAmount"],
                                AdjustmentAmountDisplay: parseFloat(results[i]["AdjustmentAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                BalanceAmount: results[i]["BalanceAmount"],
                                BalanceAmountDisplay: parseFloat(results[i]["BalanceAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                Balance: results[i]["BalanceAmount"],
                                BalanceDisplay: parseFloat(results[i]["BalanceAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                Pick: "<button class='btn btn-primary btn-xs btn-block' onclick='btnSalesInvoiceStatusPerBranchPickAmount()' style='font-size: 10.5px;'><i class='fa fa-hand-o-right'></i> Pick</button>",
                                Unpick: "<button class='btn btn-danger btn-xs btn-block' onclick='btnSalesInvoiceStatusPerBranchUnpickAmount()' style='font-size: 10.5px;'><i class='fa fa-hand-o-left'></i> Unpick</button>"
                            });

                            inpSalesInvoiceStatusPerCustomerTotalAmount += results[i]["BalanceAmount"];
                        }
                    } else {
                        $('#btnSalesInvoiceStatusApply').prop("disabled", true);
                    }

                    document.getElementById("inpSalesInvoiceStatusPerBranchTotalAmount").value = parseFloat(inpSalesInvoiceStatusPerCustomerTotalAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");

                    $('#salesInvoiceStatusPerBranchLoading').hide();
                    $('#salesInvoiceStatusPerBranchContent').show();
                }
            });

            return salesInvoiceStatusPerCustomerCollectionView;
        }

        // ================================================
        // Create Sales Invoice Status Per Branch Flex Grid
        // ================================================
        function createSalesInvoiceStatusPerBranchFlexGrid() {
            salesInvoiceStatusPerBranchCollectionView = new wijmo.collections.CollectionView(getSalesInvoiceStatusPerBranchData());
            salesInvoiceStatusPerBranchCollectionView.canFilter = true;
            salesInvoiceStatusPerBranchCollectionView.pageSize = 10;

            var filterText = '';
            $('#inpSalesInvoiceStatusPerBranchSearchFilter').keyup(function () {
                filterText = this.value.toLowerCase();

                setTimeout(function () {
                    var totalALLSIAmount = 0
                    salesInvoiceStatusPerBranchCollectionView.moveToFirstPage();
                    for (var p = 1; p <= salesInvoiceStatusPerBranchCollectionView.pageCount; p++) {
                        var totalCurrentPageSIAmount = 0
                        for (var i = 0; i < salesInvoiceStatusPerBranchCollectionView.items.length; i++) {
                            totalCurrentPageSIAmount += parseFloat(salesInvoiceStatusPerBranchCollectionView.items[i].Balance);
                        }

                        totalALLSIAmount += parseFloat(totalCurrentPageSIAmount);
                        salesInvoiceStatusPerBranchCollectionView.moveToNextPage();
                        if (p == salesInvoiceStatusPerBranchCollectionView.pageCount) {
                            salesInvoiceStatusPerBranchCollectionView.moveToPage(salesInvoiceStatusPerBranchCurrentPageIndex - 1);
                        }
                    }

                    document.getElementById("inpSalesInvoiceStatusPerBranchTotalAmount").value = parseFloat(totalALLSIAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                    $('#salesInvoiceStatusPerBranchPickAmountModal').modal('hide');
                }, 300);

                salesInvoiceStatusPerBranchCollectionView.refresh();
            });

            salesInvoiceStatusPerBranchCollectionView.filter = function (item) {
                return !filterText || (item.SINumber.toLowerCase().indexOf(filterText) > -1)
                    || (item.Customer.toLowerCase().indexOf(filterText) > -1)
                    || (item.Remarks.toLowerCase().indexOf(filterText) > -1);
            }

            salesInvoiceStatusPerBranchCollectionView.collectionChanged.addHandler(function (sender, args) {
                updateSalesInvoiceStatusPerBranchNavigationPageGrid();
            });

            salesInvoiceStatusPerBranchFlexGrid.dispose();
            salesInvoiceStatusPerBranchFlexGrid = new wijmo.grid.FlexGrid('#salesInvoiceStatusPerBranchFlexGrid');
            salesInvoiceStatusPerBranchFlexGrid.initialize({
                columns: [
                    {
                        "header": "SI Number",
                        "binding": "SINumber",
                        "allowSorting": true,
                        "isReadOnly": true,
                        "width": "1.5*"
                    },
                    {
                        "header": "Date",
                        "binding": "SIDate",
                        "allowSorting": true,
                        "isReadOnly": true,
                        "width": "1.5*"
                    },
                    {
                        "header": "Customer",
                        "binding": "Customer",
                        "allowSorting": true,
                        "isReadOnly": true,
                        "width": "2*"
                    },
                    {
                        "header": "Remarks",
                        "binding": "Remarks",
                        "allowSorting": true,
                        "isReadOnly": true,
                        "width": "2*"
                    },
                    {
                        "header": "SI Amount",
                        "binding": "AmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "isReadOnly": true,
                        "width": "1.5*"
                    },
                    {
                        "header": "Payments",
                        "binding": "PaidAmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "isReadOnly": true,
                        "width": "1.5*"
                    },
                    {
                        "header": "Adjustments",
                        "binding": "AdjustmentAmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "isReadOnly": true,
                        "width": "1.5*"
                    },
                    {
                        "header": "Balance",
                        "binding": "BalanceAmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "isReadOnly": true,
                        "width": "1.5*"
                    },
                    {
                        "header": "Pick",
                        "binding": "Pick",
                        "allowSorting": true,
                        "isReadOnly": true,
                        "width": 60,
                        "align": "center",
                        "allowResizing": false,
                        "allowSorting": false,
                        "isContentHtml": true
                    },
                    {
                        "header": "Unpick",
                        "binding": "Unpick",
                        "allowSorting": true,
                        "isReadOnly": true,
                        "width": 65,
                        "align": "center",
                        "allowResizing": false,
                        "allowSorting": false,
                        "isContentHtml": true
                    },
                    {
                        "header": "Amount",
                        "binding": "BalanceDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "isReadOnly": true,
                        "width": "1.5*"
                    },
                ],
                autoGenerateColumns: false,
                itemsSource: salesInvoiceStatusPerBranchCollectionView,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            salesInvoiceStatusPerBranchFlexGrid.trackChanges = true;

            var hr = new wijmo.grid.Row();
            salesInvoiceStatusPerBranchFlexGrid.allowMerging = wijmo.grid.AllowMerging.AllHeaders;
            salesInvoiceStatusPerBranchFlexGrid.columnHeaders.rows.push(hr);
            salesInvoiceStatusPerBranchFlexGrid.columnHeaders.rows[0].allowMerging = true;

            salesInvoiceStatusPerBranchFlexGrid.columnHeaders.columns[0].allowMerging = true;
            salesInvoiceStatusPerBranchFlexGrid.columnHeaders.setCellData(0, 0, 'SI Number');

            salesInvoiceStatusPerBranchFlexGrid.columnHeaders.columns[1].allowMerging = true;
            salesInvoiceStatusPerBranchFlexGrid.columnHeaders.setCellData(0, 1, 'Date');

            salesInvoiceStatusPerBranchFlexGrid.columnHeaders.columns[2].allowMerging = true;
            salesInvoiceStatusPerBranchFlexGrid.columnHeaders.setCellData(0, 2, 'Customer');

            salesInvoiceStatusPerBranchFlexGrid.columnHeaders.columns[3].allowMerging = true;
            salesInvoiceStatusPerBranchFlexGrid.columnHeaders.setCellData(0, 3, 'Remarks');

            for (var columnQuantityTopAssigned = 4; columnQuantityTopAssigned <= 7; columnQuantityTopAssigned++) {
                salesInvoiceStatusPerBranchFlexGrid.columnHeaders.setCellData(0, columnQuantityTopAssigned, 'Amount');
            }

            salesInvoiceStatusPerBranchFlexGrid.columnHeaders.columns[8].allowMerging = true;
            salesInvoiceStatusPerBranchFlexGrid.columnHeaders.setCellData(0, 8, 'Pick');

            salesInvoiceStatusPerBranchFlexGrid.columnHeaders.columns[9].allowMerging = true;
            salesInvoiceStatusPerBranchFlexGrid.columnHeaders.setCellData(0, 9, 'Unpick');

            salesInvoiceStatusPerBranchFlexGrid.columnHeaders.columns[10].allowMerging = true;
            salesInvoiceStatusPerBranchFlexGrid.columnHeaders.setCellData(0, 10, 'Amount');

            if (!isBtnARSalesInvoiceStatusPerBranchClicked) {
                updateSalesInvoiceStatusPerBranchNavigationPageGrid();

                salesInvoiceStatusPerBranchMoveToFirstPageGrid.addEventListener('click', function () {
                    salesInvoiceStatusPerBranchCollectionView.moveToFirstPage();
                    salesInvoiceStatusPerBranchCurrentPageIndex = salesInvoiceStatusPerBranchCollectionView.pageIndex + 1;
                    updateSalesInvoiceStatusPerBranchNavigationPageGrid();
                });

                salesInvoiceStatusPerBranchMoveToPreviousPageGrid.addEventListener('click', function () {
                    salesInvoiceStatusPerBranchCollectionView.moveToPreviousPage();
                    salesInvoiceStatusPerBranchCurrentPageIndex = salesInvoiceStatusPerBranchCollectionView.pageIndex + 1;
                    updateSalesInvoiceStatusPerBranchNavigationPageGrid();
                });

                salesInvoiceStatusPerBranchMoveToNextPageGrid.addEventListener('click', function () {
                    salesInvoiceStatusPerBranchCollectionView.moveToNextPage();
                    salesInvoiceStatusPerBranchCurrentPageIndex = salesInvoiceStatusPerBranchCollectionView.pageIndex + 1;
                    updateSalesInvoiceStatusPerBranchNavigationPageGrid();
                });

                salesInvoiceStatusPerBranchMoveToLastPageGrid.addEventListener('click', function () {
                    salesInvoiceStatusPerBranchCollectionView.moveToLastPage();
                    salesInvoiceStatusPerBranchCurrentPageIndex = salesInvoiceStatusPerBranchCollectionView.pageIndex + 1;
                    updateSalesInvoiceStatusPerBranchNavigationPageGrid();
                });

                isBtnARSalesInvoiceStatusPerBranchClicked = true;
            }
        }

        // =========================================================
        // Update Sales Invoice Status Per Branch Navigation Buttons
        // =========================================================
        function updateSalesInvoiceStatusPerBranchNavigationPageGrid() {
            if (salesInvoiceStatusPerBranchCollectionView.pageSize <= 0) {
                document.getElementById('salesInvoiceStatusPerBranchNavigationPageGrid').style.display = 'none';
                return;
            }
            document.getElementById('salesInvoiceStatusPerBranchNavigationPageGrid').style.display = 'block';
            if (salesInvoiceStatusPerBranchCollectionView.pageIndex === 0) {
                salesInvoiceStatusPerBranchMoveToFirstPageGrid.setAttribute('disabled', 'disabled');
                salesInvoiceStatusPerBranchMoveToPreviousPageGrid.setAttribute('disabled', 'disabled');
                salesInvoiceStatusPerBranchMoveToNextPageGrid.removeAttribute('disabled');
                salesInvoiceStatusPerBranchMoveToLastPageGrid.removeAttribute('disabled');
            } else if (salesInvoiceStatusPerBranchCollectionView.pageIndex === (salesInvoiceStatusPerBranchCollectionView.pageCount - 1)) {
                salesInvoiceStatusPerBranchMoveToFirstPageGrid.removeAttribute('disabled');
                salesInvoiceStatusPerBranchMoveToPreviousPageGrid.removeAttribute('disabled');
                salesInvoiceStatusPerBranchMoveToNextPageGrid.setAttribute('disabled', 'disabled');
                salesInvoiceStatusPerBranchMoveToLastPageGrid.setAttribute('disabled', 'disabled');
            } else {
                salesInvoiceStatusPerBranchMoveToFirstPageGrid.removeAttribute('disabled');
                salesInvoiceStatusPerBranchMoveToPreviousPageGrid.removeAttribute('disabled');
                salesInvoiceStatusPerBranchMoveToNextPageGrid.removeAttribute('disabled');
                salesInvoiceStatusPerBranchMoveToLastPageGrid.removeAttribute('disabled');
            }
            salesInvoiceStatusPerBranchCurrentPageGrid.innerHTML = (salesInvoiceStatusPerBranchCollectionView.pageIndex + 1) + ' / ' + salesInvoiceStatusPerBranchCollectionView.pageCount;
        }

        // ===================================================
        // Pick Sales Invoice Status Per Branch Amount (Modal)
        // ===================================================
        function btnSalesInvoiceStatusPerBranchPickAmount() {
            $('#salesInvoiceStatusPerBranchPickAmountModal').modal({
                show: true,
                backdrop: 'static'
            });

            $("#btnSalesInvoiceStatusPerBranchPickAmountContinue").prop("disabled", false);
            $("#btnSalesInvoiceStatusPerBranchPickAmountCloseModal").prop("disabled", false);

            salesInvoiceStatusPerBranchCollectionView.editItem(salesInvoiceStatusPerBranchCollectionView.currentItem);
            var saleInvoice = salesInvoiceStatusPerBranchCollectionView.currentEditItem;
            var balance = saleInvoice.Amount - saleInvoice.PaidAmount;
            document.getElementById("inpSalesInvoiceStatusPerBranchPickAmount").value = parseFloat(balance).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        }

        // ===============================================
        // Sales Invoice Status Per Branch Amount Continue
        // ===============================================
        function btnSalesInvoiceStatusPerBranchPickAmountContinueOnclick() {
            $("#btnSalesInvoiceStatusPerBranchPickAmountContinue").prop("disabled", true);
            $("#btnSalesInvoiceStatusPerBranchPickAmountCloseModal").prop("disabled", true);

            var isValid = true;
            $('.requiredPickedAmountBranch').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                } else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            if (isValid) {
                salesInvoiceStatusPerBranchCollectionView.editItem(salesInvoiceStatusPerBranchCollectionView.currentItem);
                var saleInvoice = salesInvoiceStatusPerBranchCollectionView.currentEditItem;
                var balance = document.getElementById("inpSalesInvoiceStatusPerBranchPickAmount").value.split(",").join("");

                if (isNaN(balance)) {
                    toastr.error("Invalid Entry");

                    $("#btnSalesInvoiceStatusPerBranchPickAmountContinue").prop("disabled", false);
                    $("#btnSalesInvoiceStatusPerBranchPickAmountCloseModal").prop("disabled", false);
                } else {
                    saleInvoice.Balance = balance;
                    saleInvoice.BalanceDisplay = parseFloat(balance).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");

                    setTimeout(function () {
                        var totalALLSIAmount = 0
                        salesInvoiceStatusPerBranchCollectionView.moveToFirstPage();
                        for (var p = 1; p <= salesInvoiceStatusPerBranchCollectionView.pageCount; p++) {
                            var totalCurrentPageSIAmount = 0
                            for (var i = 0; i < salesInvoiceStatusPerBranchCollectionView.items.length; i++) {
                                totalCurrentPageSIAmount += parseFloat(salesInvoiceStatusPerBranchCollectionView.items[i].Balance);
                            }

                            totalALLSIAmount += parseFloat(totalCurrentPageSIAmount);
                            salesInvoiceStatusPerBranchCollectionView.moveToNextPage();
                            if (p == salesInvoiceStatusPerBranchCollectionView.pageCount) {
                                salesInvoiceStatusPerBranchCollectionView.moveToPage(salesInvoiceStatusPerBranchCurrentPageIndex - 1);
                            }
                        }

                        document.getElementById("inpSalesInvoiceStatusPerBranchTotalAmount").value = parseFloat(totalALLSIAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        $('#salesInvoiceStatusPerBranchPickAmountModal').modal('hide');
                    }, 100);

                    salesInvoiceStatusPerBranchCollectionView.refresh();
                    salesInvoiceStatusPerBranchFlexGrid.refresh();
                }
            } else {
                toastr.error("Invalid Entry");
            }
        }

        // =============================================
        // Unpick Sales Invoice Status Per Branch Amount
        // =============================================
        function btnSalesInvoiceStatusPerBranchUnpickAmount() {
            salesInvoiceStatusPerBranchCollectionView.editItem(salesInvoiceStatusPerBranchCollectionView.currentItem);
            var saleInvoice = salesInvoiceStatusPerBranchCollectionView.currentEditItem;
            saleInvoice.Balance = 0;
            saleInvoice.BalanceDisplay = parseFloat(0).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");

            setTimeout(function () {
                var totalALLSIAmount = 0
                salesInvoiceStatusPerBranchCollectionView.moveToFirstPage();
                for (var p = 1; p <= salesInvoiceStatusPerBranchCollectionView.pageCount; p++) {
                    var totalCurrentPageSIAmount = 0
                    for (var i = 0; i < salesInvoiceStatusPerBranchCollectionView.items.length; i++) {
                        totalCurrentPageSIAmount += parseFloat(salesInvoiceStatusPerBranchCollectionView.items[i].Balance);
                    }

                    totalALLSIAmount += parseFloat(totalCurrentPageSIAmount);
                    salesInvoiceStatusPerBranchCollectionView.moveToNextPage();
                    if (p == salesInvoiceStatusPerBranchCollectionView.pageCount) {
                        salesInvoiceStatusPerBranchCollectionView.moveToPage(salesInvoiceStatusPerBranchCurrentPageIndex - 1);
                    }
                }

                document.getElementById("inpSalesInvoiceStatusPerBranchTotalAmount").value = parseFloat(totalALLSIAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                $('#salesInvoiceStatusPerCustomerPickAmountModal').modal('hide');
            }, 100);

            salesInvoiceStatusPerBranchCollectionView.refresh();
            salesInvoiceStatusPerBranchFlexGrid.refresh();
        }

        // ==========================
        // Apply Sales Invoice Status
        // ==========================
        function btnSalesInvoiceStatusApplyOnclick() {
            $('#salesInvoiceStatusApplyPickAmountModal').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById('btnSalesInvoiceStatusApplyPickAmount').innerHTML = "<i class='fa fa-check'></i> Apply";
            $("#btnSalesInvoiceStatusApplyPickAmount").prop("disabled", false);
            $("#btnSalesInvoiceStatusApplyPickAmountCloseModal").prop("disabled", false);
        }

        // ============================================
        // Apply Sales Invoice Status All Picked Amount
        // ============================================
        function btnSalesInvoiceStatusApplyPickAmountOnclick() {
            document.getElementById('btnSalesInvoiceStatusApplyPickAmount').innerHTML = "<i class='fa fa-check'></i> Applying...";
            $("#btnSalesInvoiceStatusApplyPickAmount").prop("disabled", true);
            $("#btnSalesInvoiceStatusApplyPickAmountCloseModal").prop("disabled", true);

            var saleInvoiceArrays = new Array();

            if (isSalesInvoiceStatusPerCustomerSelected) {
                salesInvoiceStatusPerCustomerCollectionView.moveToFirstPage();

                for (var p = 1; p <= salesInvoiceStatusPerCustomerCollectionView.pageCount; p++) {
                    for (var i = 0; i < salesInvoiceStatusPerCustomerCollectionView.items.length; i++) {
                        var item = salesInvoiceStatusPerCustomerCollectionView.items[i];
                        if (item.Balance > 0) {
                            saleInvoiceArrays.push({
                                SIId: item.Id,
                                Amount: item.Balance,
                                PayTypeId: cboSalesInvoiceStatusPayType.selectedValue,
                                CheckNumber: document.getElementById("inpSalesInvoiceStatusCheckNumber").value,
                                CheckDate: cboSalesInvoiceStatusCheckDate.value,
                                CheckBank: document.getElementById("inoSalesInvoiceStatusCheckBank").value,
                                DepositoryBankId: cboSalesInvoiceStatusDepositoryBank.selectedValue,
                                IsClear: document.getElementById("inpSalesInvoiceStatusIsClear").checked
                            });
                        }
                    }

                    salesInvoiceStatusPerCustomerCollectionView.moveToNextPage();
                    if (p == salesInvoiceStatusPerCustomerCollectionView.pageCount) {
                        salesInvoiceStatusPerCustomerCollectionView.moveToPage(salesInvoiceStatusPerCustomerCurrentPageIndex - 1);
                    }
                }
            } else {
                if (isSalesInvoiceStatusPerBranchSelected) {
                    salesInvoiceStatusPerBranchCollectionView.moveToFirstPage();

                    for (var p = 1; p <= salesInvoiceStatusPerBranchCollectionView.pageCount; p++) {
                        for (var i = 0; i < salesInvoiceStatusPerBranchCollectionView.items.length; i++) {
                            var item = salesInvoiceStatusPerBranchCollectionView.items[i];
                            if (item.Balance > 0) {
                                saleInvoiceArrays.push({
                                    SIId: item.Id,
                                    Amount: item.Balance,
                                    PayTypeId: cboSalesInvoiceStatusPayType.selectedValue,
                                    CheckNumber: document.getElementById("inpSalesInvoiceStatusCheckNumber").value,
                                    CheckDate: cboSalesInvoiceStatusCheckDate.value,
                                    CheckBank: document.getElementById("inoSalesInvoiceStatusCheckBank").value,
                                    DepositoryBankId: cboSalesInvoiceStatusDepositoryBank.selectedValue,
                                    IsClear: document.getElementById("inpSalesInvoiceStatusIsClear").checked
                                });
                            }
                        }

                        salesInvoiceStatusPerBranchCollectionView.moveToNextPage();
                        if (p == salesInvoiceStatusPerBranchCollectionView.pageCount) {
                            salesInvoiceStatusPerBranchCollectionView.moveToPage(salesInvoiceStatusPerBranchCurrentPageIndex - 1);
                        }
                    }
                }
            }

            var saleInvoiceItemsObjects = JSON.stringify(saleInvoiceArrays);
            var ORId = getURLParameterValue("id");

            $.ajax({
                url: '/api/collectionLine/popUp/apply/salesInvoiceStatus/' + ORId,
                type: "POST",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: saleInvoiceItemsObjects,
                statusCode: {
                    200: function () {
                        toastr.success("Apply Successful");
                        $('#salesInvoiceStatusApplyPickAmountModal').modal('hide');
                        $('#salesInvoiceStatusModal').modal('hide');
                        refreshCollectionLineFlexGrid();
                    },
                    404: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                        $('#salesInvoiceStatusApplyPickAmountModal').modal('hide');
                        $('#salesInvoiceStatusModal').modal('hide');
                        document.getElementById('btnSalesInvoiceStatusApplyPickAmount').innerHTML = "<i class='fa fa-check'></i> Apply";
                        $("#btnSalesInvoiceStatusApplyPickAmount").prop("disabled", false);
                        $("#btnSalesInvoiceStatusApplyPickAmountCloseModal").prop("disabled", false);
                    },
                    400: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                        $('#salesInvoiceStatusApplyPickAmountModal').modal('hide');
                        $('#salesInvoiceStatusModal').modal('hide');
                        document.getElementById('btnSalesInvoiceStatusApplyPickAmount').innerHTML = "<i class='fa fa-check'></i> Apply";
                        $("#btnSalesInvoiceStatusApplyPickAmount").prop("disabled", false);
                        $("#btnSalesInvoiceStatusApplyPickAmountCloseModal").prop("disabled", false);
                    },
                    500: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                        $('#salesInvoiceStatusApplyPickAmountModal').modal('hide');
                        $('#salesInvoiceStatusModal').modal('hide');
                        document.getElementById('btnSalesInvoiceStatusApplyPickAmount').innerHTML = "<i class='fa fa-check'></i> Apply";
                        $("#btnSalesInvoiceStatusApplyPickAmount").prop("disabled", false);
                        $("#btnSalesInvoiceStatusApplyPickAmountCloseModal").prop("disabled", false);
                    }
                }
            });
        }

        // =================
        // Customer Advances
        // =================
        function btnCustomerAdvancesOnclick() {
            $('#customerAdvancesModal').modal({
                show: true,
                backdrop: 'static'
            });

            $('#customerAdvancesLoading').show();
            document.getElementById("customerAdvancesLoading").innerHTML = "Loading...";
            $('#customerAdvancesContent').hide();

            setTimeout(function () {
                createCustomerAdvancesFlexGrid();
            }, 500);
        }

        // ==========================
        // Get Customer Advances Data
        // ==========================
        function getCustomerAdvancesData() {
            var journalAdvances = new wijmo.collections.ObservableArray;
            $.ajax({
                url: '/api/collectionLine/popUp/list/customerAdvances/' + cboCollectionDetailCustomer.selectedValue,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            journalAdvances.push({
                                Id: results[i]["Id"],
                                BranchId: results[i]["BranchId"],
                                Branch: results[i]["Branch"],
                                AccountId: results[i]["AccountId"],
                                AccountCode: results[i]["AccountCode"],
                                Account: results[i]["Account"],
                                ArticleId: results[i]["ArticleId"],
                                Article: results[i]["Article"],
                                DebitAmount: results[i]["DebitAmount"],
                                DebitAmountDisplay: parseFloat(results[i]["DebitAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                CreditAmount: results[i]["CreditAmount"],
                                CreditAmountDisplay: parseFloat(results[i]["CreditAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                Balance: results[i]["Balance"],
                                BalanceDisplay: parseFloat(results[i]["Balance"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                Pick: "<button class='btn btn-primary btn-xs' onclick='btnApplyAdvancesOnclick()'><i class='fa fa-check'></i> Apply </button>"
                            });
                        }
                    }

                    $('#customerAdvancesLoading').hide();
                    $('#customerAdvancesContent').show();
                }
            });
            return journalAdvances;
        }

        // ==================================
        // Create Customer Advances Flex Grid
        // ==================================
        function createCustomerAdvancesFlexGrid() {
            customerAdvancesCollectionView = new wijmo.collections.CollectionView(getCustomerAdvancesData());
            customerAdvancesCollectionView.pageSize = 10;

            var filterText = '';
            $('#inpCustomerAdvancesSearchFilter').keyup(function () {
                filterText = this.value.toLowerCase();
                customerAdvancesCollectionView.refresh();
            });

            customerAdvancesCollectionView.filter = function (item) {
                return !filterText || (item.AccountCode.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Account.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Article.toLowerCase().indexOf(filterText) > -1);
            }

            customerAdvancesCollectionView.collectionChanged.addHandler(function (sender, args) {
                updateCustomerAdvancesNavigationButtons();
            });

            customerAdvancesFlexGrid.dispose();
            customerAdvancesFlexGrid = new wijmo.grid.FlexGrid('#customerAdvancesFlexGrid');
            customerAdvancesFlexGrid.initialize({
                columns: [
                    {
                        "header": "Code",
                        "binding": "AccountCode",
                        "allowSorting": true,
                        "width": "1.5*"
                    },
                    {
                        "header": "Account",
                        "binding": "Account",
                        "allowSorting": true,
                        "width": "3*"
                    },
                    {
                        "header": "Article",
                        "binding": "Article",
                        "allowSorting": true,
                        "width": "3*"
                    },
                    {
                        "header": "Debit",
                        "binding": "DebitAmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": "2*"
                    },
                    {
                        "header": "Credit",
                        "binding": "CreditAmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": "2*"
                    },
                    {
                        "header": "Balance",
                        "binding": "Balance",
                        "allowSorting": true,
                        "width": "2*"
                    },
                    {
                        "header": "Apply",
                        "binding": "Pick",
                        "allowSorting": true,
                        "width": 70,
                        "align": "center",
                        "allowResizing": false,
                        "allowSorting": false,
                        "isContentHtml": true
                    },
                ],
                autoGenerateColumns: false,
                itemsSource: customerAdvancesCollectionView,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            customerAdvancesFlexGrid.trackChanges = true;

            if (!isCustomerAdvancesClicked) {
                updateCustomerAdvancesNavigationButtons();

                btnCustomerAdvancesMoveToFirstPageGrid.addEventListener('click', function () {
                    customerAdvancesCollectionView.moveToFirstPage();
                    updateCustomerAdvancesNavigationButtons();
                });

                btnCustomerAdvancesMoveToPreviousPageGrid.addEventListener('click', function () {
                    customerAdvancesCollectionView.moveToPreviousPage();
                    updateCustomerAdvancesNavigationButtons();
                });

                btnCustomerAdvancesMoveToNextPageGrid.addEventListener('click', function () {
                    customerAdvancesCollectionView.moveToNextPage();
                    updateCustomerAdvancesNavigationButtons();
                });

                btnCustomerAdvancesMoveToLastPageGrid.addEventListener('click', function () {
                    customerAdvancesCollectionView.moveToLastPage();
                    updateCustomerAdvancesNavigationButtons();
                });

                isCustomerAdvancesClicked = true;
            }
        }

        // ===========================================
        // Update Customer Advances Navigation Buttons
        // ===========================================
        function updateCustomerAdvancesNavigationButtons() {
            if (customerAdvancesCollectionView.pageSize <= 0) {
                document.getElementById('customerAdvancesNavigationPageGrid').style.display = 'none';
                return;
            }
            document.getElementById('customerAdvancesNavigationPageGrid').style.display = 'block';
            if (customerAdvancesCollectionView.pageIndex === 0) {
                btnCustomerAdvancesMoveToFirstPageGrid.setAttribute('disabled', 'disabled');
                btnCustomerAdvancesMoveToPreviousPageGrid.setAttribute('disabled', 'disabled');
                btnCustomerAdvancesMoveToNextPageGrid.removeAttribute('disabled');
                btnCustomerAdvancesMoveToLastPageGrid.removeAttribute('disabled');
            } else if (customerAdvancesCollectionView.pageIndex === (customerAdvancesCollectionView.pageCount - 1)) {
                btnCustomerAdvancesMoveToFirstPageGrid.removeAttribute('disabled');
                btnCustomerAdvancesMoveToPreviousPageGrid.removeAttribute('disabled');
                btnCustomerAdvancesMoveToNextPageGrid.setAttribute('disabled', 'disabled');
                btnCustomerAdvancesMoveToLastPageGrid.setAttribute('disabled', 'disabled');
            } else {
                btnCustomerAdvancesMoveToFirstPageGrid.removeAttribute('disabled');
                btnCustomerAdvancesMoveToPreviousPageGrid.removeAttribute('disabled');
                btnCustomerAdvancesMoveToNextPageGrid.removeAttribute('disabled');
                btnCustomerAdvancesMoveToLastPageGrid.removeAttribute('disabled');
            }
            btnCustomerAdvancesCurrentPageGrid.innerHTML = (customerAdvancesCollectionView.pageIndex + 1) + ' / ' + customerAdvancesCollectionView.pageCount;
        }

        // =======================
        // Apply Customer Advances
        // =======================
        function btnApplyAdvancesOnclick() {
            $('#customerAdvancesApplyModal').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById('btnColelctionCustomerAdvancesApply').innerHTML = "<i class='fa fa-check'></i> Apply";
            $("#btnColelctionCustomerAdvancesApply").prop("disabled", false);
            $("#btnColelctionCustomerAdvancesApplyCloseModal").prop("disabled", false);
        }

        // ===============================
        // Confirm Apply Customer Advances
        // ===============================
        function btnCustomerAdvancesConfirmApplyOnclick() {
            document.getElementById('btnColelctionCustomerAdvancesApply').innerHTML = "<i class='fa fa-check'></i> Applying...";
            $("#btnColelctionCustomerAdvancesApply").prop("disabled", true);
            $("#btnColelctionCustomerAdvancesApplyCloseModal").prop("disabled", true);

            customerAdvancesCollectionView.editItem(customerAdvancesCollectionView.currentItem);
            var customerAdvancesCollectionViewItem = customerAdvancesCollectionView.currentEditItem;

            var ORId = getURLParameterValue("id");

            var salesInvoicesAdvancesObject = new Object();
            salesInvoicesAdvancesObject.AccountId = customerAdvancesCollectionViewItem.AccountId;
            salesInvoicesAdvancesObject.ArticleId = customerAdvancesCollectionViewItem.ArticleId;
            var salesInvoicesAdvancesData = JSON.stringify(salesInvoicesAdvancesObject);

            $.ajax({
                url: '/api/collectionLine/popUp/apply/customerAdvances/' + ORId,
                type: "POST",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: salesInvoicesAdvancesData,
                statusCode: {
                    200: function () {
                        toastr.success("Apply Successful");
                        $('#customerAdvancesApplyModal').modal('hide');
                        refreshCollectionLineFlexGrid();
                    },
                    404: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                        $('#customerAdvancesApplyModal').modal('hide');
                        document.getElementById('btnColelctionCustomerAdvancesApply').innerHTML = "<i class='fa fa-check'></i> Apply";
                        $("#btnColelctionCustomerAdvancesApply").prop("disabled", false);
                        $("#btnColelctionCustomerAdvancesApplyCloseModal").prop("disabled", false);
                    },
                    400: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                        $('#customerAdvancesApplyModal').modal('hide');
                        document.getElementById('btnColelctionCustomerAdvancesApply').innerHTML = "<i class='fa fa-check'></i> Apply";
                        $("#btnColelctionCustomerAdvancesApply").prop("disabled", false);
                        $("#btnColelctionCustomerAdvancesApplyCloseModal").prop("disabled", false);
                    },
                    500: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                        $('#customerAdvancesApplyModal').modal('hide');
                        document.getElementById('btnColelctionCustomerAdvancesApply').innerHTML = "<i class='fa fa-check'></i> Apply";
                        $("#btnColelctionCustomerAdvancesApply").prop("disabled", false);
                        $("#btnColelctionCustomerAdvancesApplyCloseModal").prop("disabled", false);
                    }
                }
            });
        }

        // ========================
        // Sales Invoice Status Tab
        // ========================
        $('#SIStatussalesInvoicetab').click(function () {
            isSalesInvoiceStatusPerCustomerSelected = true;
            isSalesInvoiceStatusPerBranchSelected = false;

            $('#SIStatussalesInvoice').show();
            $('#SIStatussalesInvoiceBranch').hide();
            $('#SIStatuspayType').hide();

            $('#salesInvoiceStatusPerCustomerLoading').show();
            document.getElementById("salesInvoiceStatusPerCustomerLoading").innerHTML = "Loading...";
            $('#salesInvoiceStatusPerCustomerContent').hide();
            $('#btnSalesInvoiceStatusApply').prop("disabled", true);

            setTimeout(function () {
                createSalesInvoiceStatusPerCustomerFlexGrid();
            }, 500);

            $('#btnSalesInvoiceStatusApply').show();
        });
        $('#SIStatussalesInvoiceBranchtab').click(function () {
            isSalesInvoiceStatusPerCustomerSelected = false;
            isSalesInvoiceStatusPerBranchSelected = true;

            $('#salesInvoiceStatusPerBranchLoading').show();
            document.getElementById("salesInvoiceStatusPerBranchLoading").innerHTML = "Loading...";
            $('#salesInvoiceStatusPerBranchContent').hide();
            $('#btnSalesInvoiceStatusApply').prop("disabled", true);

            setTimeout(function () {
                createSalesInvoiceStatusPerBranchFlexGrid();
            }, 500);

            $('#SIStatussalesInvoice').hide();
            $('#SIStatussalesInvoiceBranch').show();
            $('#SIStatuspayType').hide();

            $('#btnSalesInvoiceStatusApply').show();
        });
        $('#SIStatuspayTypestatusTab').click(function () {
            isSalesInvoiceStatusPerCustomerSelected = false;
            isSalesInvoiceStatusPerBranchSelected = false;

            $('#SIStatussalesInvoice').hide();
            $('#SIStatussalesInvoiceBranch').hide();
            $('#SIStatuspayType').show();


            $('#btnSalesInvoiceStatusApply').hide();
        });

        // =============================
        // Document Ready - On load Page
        // =============================
        $(document).ready(function () {
            createCollectionDetailCboBranch();

            $(document).on('show.bs.modal', '.modal', function (event) {
                var zIndex = 1040 + (10 * $('.modal:visible').length);
                $(this).css('z-index', zIndex);
                setTimeout(function () {
                    $('.modal-backdrop').not('.modal-stack').css('z-index', zIndex - 1).addClass('modal-stack');
                }, 0);
            });

            $(document).on('hidden.bs.modal', '.modal', function () {
                $('.modal:visible').length && $(document.body).addClass('modal-open');
            });
        });
    </script>
    <script type="text/javascript">
        // =================
        // User Branch Combo
        // =================
        var cboUserBranches = new wijmo.input.ComboBox('#cboUserBranches');

        // =========================
        // Get Current User Branches
        // =========================
        function getUserBranches() {
            $("#loadingUserBranches").show();
            document.getElementById("loadingUserBranches").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#userBranchContent").hide();

            $('#userBranchesModal').modal({ show: true, backdrop: 'static' });

            document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
            $("#updateUserBranch").prop("disabled", false);
            $("#closeUserBranch").prop("disabled", false);

            var userBranchesObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/userBranch/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (userBranchesResults) {
                    if (userBranchesResults.length > 0) {
                        for (i = 0; i < userBranchesResults.length; i++) {
                            userBranchesObservableArray.push({
                                BranchId: userBranchesResults[i]["BranchId"],
                                Branch: userBranchesResults[i]["Branch"]
                            });
                        }
                    }

                    var currentBranch = "@ViewData["BranchId"]";
                    cboUserBranches.dispose();
                    cboUserBranches = new wijmo.input.ComboBox('#cboUserBranches', {
                        isEditable: false,
                        placeholder: "Select Branches",
                        itemsSource: userBranchesObservableArray,
                        displayMemberPath: "Branch",
                        selectedValuePath: "BranchId",
                        selectedValue: currentBranch
                    });

                    setTimeout(function () {
                        $("#loadingUserBranches").hide();
                        $("#userBranchContent").show();
                    }, 500)
                }
            });
        }

        // ==========================
        // Update Current User Branch
        // ==========================
        function updateUserBranchOnclick() {
            document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Updating";
            $("#updateUserBranch").prop("disabled", true);
            $("#closeUserBranch").prop("disabled", true);

            var userBranchObject = new Object();
            userBranchObject.BranchId = cboUserBranches.selectedValue;
            var userBranchData = JSON.stringify(userBranchObject);

            $.ajax({
                type: "PUT",
                url: '/api/userBranch/update',
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: userBranchData,
                statusCode: {
                    200: function () {
                        toastr.success("Update Successful");
                        window.setTimeout(function () {
                            location.reload()
                        }, 1000);
                    },
                    404: function () {
                        toastr.error("Not Found");
                        document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
                        $("#updateUserBranch").prop("disabled", false);
                        $("#closeUserBranch").prop("disabled", false);
                    },
                    500: function () {
                        toastr.error("Bad Request");
                        document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
                        $("#updateUserBranch").prop("disabled", false);
                        $("#closeUserBranch").prop("disabled", false);
                    }
                }
            });
        }
    </script>
    <script type="text/javascript">
        // ======================
        // Side Bar Menu Settings
        // ======================
        var slideLeft = new Menu({
            wrapper: '#o-wrapper',
            type: 'slide-left',
            menuOpenerClass: '.c-button',
            maskId: '#c-mask'
        });

        var slideLeftBtn = document.querySelector('#c-button--slide-left');

        slideLeftBtn.addEventListener('click', function (e) {
            e.preventDefault;
            slideLeft.open();
        });
    </script>
</body>
</html>