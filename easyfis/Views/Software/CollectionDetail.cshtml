@{
    var userId = ViewData["UserId"];
}
<!DOCTYPE html>
<html>
<head>
    <!-- Meta -->
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">

    <!-- Title of the Page -->
    <link rel="shortcut icon" href="~/Images/icon/easyfislogomini.ico">
    <title>Collection Detail</title>

    <!-- CSS StyleSheets-->
    @Styles.Render("~/Content/Software-css")
</head>
<body>
    <div id="o-wrapper" class="o-wrapper">
        <main class="o-content">
            @Html.Partial("_SoftwareHeader")
            <section class="content-header">
                <div class="container">
                    <h3>
                        Collection Detail
                    </h3>
                    <p>
                        <i class="fa fa-building-o fa-fw"></i> &nbsp; @ViewData["Company"] <br />
                        <i class="fa fa-home fa-fw"></i> &nbsp; <a href="#" onclick="getUserBranches()" style="color: white;">@ViewData["Branch"]</a>
                    </p>
                </div>
            </section>
            <section class="container">
                <div class="panel panel-default">
                    <div class="panel-heading">
                        <div class="row">
                            <div class="col-md-12" align="right">
                                <button class="btn btn-primary" id="cmdCollectionJournal" onclick="btnJournalDetail_OnClick()"><i class="fa fa-book"></i> Journal</button>
                                <button class="btn btn-primary" id="cmdCollectionSaveLock" onclick="btnCollectionSaveLock_OnClick()"><i class="fa fa-lock"></i> Lock</button>
                                <button class="btn btn-primary" id="cmdCollectionEdit" onclick="btnCollectionEdit_OnClick()"><i class="fa fa-unlock"></i> Unlock</button>
                                <button class="btn btn-primary" id="cmdCollectionPrint" onclick="btnCollectionPrint_OnClick()"><i class="fa fa-print"></i> Print</button>
                                <button onclick="window.location.href = '/Software/Collection'" class="btn btn-danger " id="cmdCollectionClose"><i class="fa fa-times"></i> Close</button>
                            </div>
                        </div>
                    </div>
                    <div class="panel-body">
                        <form class="form-horizontal" role="form">
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Branch</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboORBranch"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">OR Number</label>
                                        <div class="col-sm-8">
                                            <input type="text" class="form-control requiredCollection" id="collection_ORNumber" disabled />
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">OR Date</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboORDate"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Manual OR Number</label>
                                        <div class="col-sm-8">
                                            <input type="text" class="form-control requiredCollection" id="collection_ManualORNumber" placeholder="Manual OR Number" />
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Customer</label>
                                        <div class="col-sm-8">
                                            <div class="input-group">
                                                <div class="comboBox-wide" id="cboORCustomer"></div>
                                                <div class="input-group-btn">
                                                    <button type="button" class=" btn btn-primary" id="cmdAR" onclick="collectionAR_OnClick()">AR</button>
                                                    <button type="button" class="btn btn-primary" id="cmdAdvances" onclick="collectionAdvances_OnClick()">Advances</button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Particulars</label>
                                        <div class="col-sm-8">
                                            <textarea rows="5" class="form-control textarea-custom requiredCollection" id="collection_Particulars" placeholder="Particulars"></textarea>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Prepared by</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboORPreparedBy"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Checked by</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboORCheckedBy"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Approved by</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboORApprovedBy"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
                <ul class="nav nav-tabs" role="tablist" id="myTab">
                    <li role="presentation" class="active"><a data-toggle="tab" href="#CollectionLine" id="itemTabId">Collection Line</a></li>
                </ul>
                <br />
                <div class="tab-content">
                    <div id="CollectionLine" class="tab-pane fade in active">
                        <div class="panel panel-default">
                            <div class="panel-heading">
                                <div class="row">
                                    <div class="col-lg-12" align="right">
                                        <button class="btn btn-primary" id="btnAddCollectionLine" onclick="cmdAddCollectionLineButton_OnClick()"><i class="fa fa-plus"></i> Add</button>
                                    </div>
                                </div>
                            </div>
                            <div class="panel-body">
                                <div id="CollectionLineGrid"></div>
                            </div>
                        </div>
                    </div>
                </div>
            </section>
            @Html.Partial("_SoftwareFooter")
        </main>
    </div>
    <div id="c-mask" class="c-mask"></div>

    <!-- Collection Line Edit Detail -->
    <div class="modal fade" id="collectionLineEdit" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="collectionLineModalLabel">Collection Line</h4>
                </div>
                <div class="modal-body">
                    <form id="collectionLineDetailForm">
                        <input type="hidden" id="collectionLine_Id" />
                        <dl class="dl-horizontal">
                            <dt>Branch</dt>
                            <dd><div class="comboBox-wide" id="cboCollectionLineBranch"></div></dd>
                            <dt>Account</dt>
                            <dd>
                                <table style="width: 100%" border="0">
                                    <tr>
                                        <td style="width: 30%">
                                            <div class="comboBox-wide" id="cboCollectionLineAccountCode"></div>
                                        </td>
                                        <td style="width: 1%"></td>
                                        <td style="width: 69%">
                                            <div class="comboBox-wide" id="cboCollectionLineAccount"></div>
                                        </td>
                                    </tr>
                                </table>
                            </dd>
                            <dt>Article</dt>
                            <dd><div class="comboBox-wide" id="cboCollectionLineArticle"></div></dd>
                            <dt>SI No.</dt>
                            <dd><div class="comboBox-wide" id="cboCollectionLineSINumber"></div></dd>
                            <dt>Particulars</dt>
                            <dd><textarea rows="5" class="form-control textarea-custom requiredCollectionLine" id="collectionLine_Particulars" placeholder="Particulars"></textarea></dd>
                            <dt>Amount</dt>
                            <dd><input class="form-control  numberField  requiredCollectionLine" id="collectionLine_amount" placeholder="0.00" /></dd>
                            <dt>Pay Type</dt>
                            <dd><div class="comboBox-wide" id="cboCollectionLinePayType"></div></dd>
                            <dt>Check No.</dt>
                            <dd><input type="text" class="form-control  requiredCollectionLine" id="collectionLine_checkNo" /></dd>
                            <dt>Check Date</dt>
                            <dd><div class="" id="cboCheckDate"></div></dd>
                            <dt>Check Bank</dt>
                            <dd><input type="text" class="form-control  requiredCollectionLine" id="collectionLine_checkBank" placeholder="Check Bank" /></dd>
                            <dt>Depository Bank</dt>
                            <dd><div class="comboBox-wide" id="cboCollectionLineDepositoryBank"></div></dd>
                            <dt>Is Clear</dt>
                            <dd><input type="checkbox" id="collectionLine_Clear" /></dd>
                        </dl>
                    </form>
                </div>
                <div class="modal-footer">
                    <button id="cmdSaveCollectionLineButton" class="btn btn-primary" onclick="cmdCollectionLineSaveButton_OnClick()"><i class="fa fa-save"></i> Save</button>
                    <button id="cmdCollectionLineDetailCloseButton" class="btn btn-danger" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Collection Line Delete Modal Confirmation -->
    <div class="modal fade" id="deleteCollectionLineConfirm" role="dialog">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Delete</h4>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete this collection line?
                </div>
                <div class="modal-footer">
                    <button id="cmdConfirmDeleteCollectionLine" class="btn btn-danger" onclick="cmdCollectionLineConfirmDeleteButton_OnClick()"><i class="fa fa-trash"></i> Delete</button>
                    <button id="cmdConfirmDeleteCollectionLineCloseButton" class="btn btn-primary " data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Journal -->
    <div class="modal fade" id="journalDetail" role="dialog">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="journalModalLabel"> Journal</h4>
                </div>
                <div class="modal-body">
                    <center>
                        <span id="loadingJournalGridList"></span>
                    </center>
                    <div id="journal_Content">
                        <div id="journalFlexGrid" style="max-height: 250px;"></div>
                        <br /><br />
                        <div class="row">
                            <div class="col-md-7"></div>
                            <div class="col-md-5">
                                <dl class="dl-horizontal">
                                    <dt>
                                        <b>Total Debit</b>
                                    </dt>
                                    <dd>
                                        <input type="text" class="form-control  numberField  requiredStockTransferItem" id="totalDebitInJournal" placeholder="0.00" disabled />
                                    </dd>
                                    <dt>
                                        <b>Total Credit</b>
                                    </dt>
                                    <dd>
                                        <input type="text" class="form-control  numberField  requiredStockTransferItem" id="totalCreditInJournal" placeholder="0.00" disabled />
                                    </dd>
                                    <dt>
                                        <b>Variance</b>
                                    </dt>
                                    <dd>
                                        <input type="text" class="form-control  numberField  requiredStockTransferItem" id="variance" placeholder="0.00" disabled />
                                    </dd>
                                </dl>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button id="cmdJournalDetailCloseButton" class="btn btn-danger" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!--SI Status -->
    <div class="modal fade" id="SalesStatus" role="dialog">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="">Sales Invoice Status</h4>
                </div>
                <div class="modal-body">
                    <center>
                        <span id="loadingSIStatus"></span>
                    </center>
                    <div id="statusGrid">
                        <div class="panel panel-default">
                            <div class="panel-heading">
                                <div class="input-group">
                                    <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                    <input type="text" class="form-control " id="SIStatusFilter" placeholder="Search">
                                </div>
                            </div>
                        </div>
                        <div id="salesInvoiceStatusGrid" style="max-height: 300px"></div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" id="btnIdApplyAllSI" onclick="btnOnclickApplyAllSI()"><i class="fa fa-check"></i> Apply</button>
                    <button class="btn btn-danger" id="cmdPOStatusCloseButton" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- SI apply all amount -->
    <div class="modal fade" id="applyAllAmount" role="dialog">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Apply</h4>
                </div>
                <div class="modal-body">
                    Are you sure that you want to apply all picked amount?
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" id="cmdConfirmApplyAllAmount" onclick="btnConfrimApplyAllAmount_OnClick()"><i class="fa fa-check"></i> Apply</button>
                    <button class="btn btn-danger" id="cmdCloseButtonApplyAllAmount" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <!-- customer Advances for Collection Modal -->
    <div class="modal fade" id="customerAdvances" role="dialog">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="POStatusModalLabel">Customer Advances</h4>
                </div>
                <div class="modal-body">
                    <center>
                        <span id="loadingSIAdvances"></span>
                    </center>
                    <div id="AdvancesGrid">
                        <div id="SIAdvancesGrid" class="grid statusGrid" align="left"></div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" id="cmdPOStatusCloseButton" class="btn btn-danger" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- collection apply advances -->
    <div class="modal fade" id="applyAdvances" role="dialog">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Apply</h4>
                </div>
                <div class="modal-body">                    
                    Are you sure that you want to apply these advances?
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" id="cmdConfirmApplyAdvances" onclick="btnConfrimApplyAdvances_OnClick()"><i class="fa fa-check-square-o"></i> Apply</button>
                    <button class="btn btn-danger" id="cmdCloseButtonApplyAdvances" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>

    @Scripts.Render("~/Scripts/Software-js")
    <script type="text/javascript">
        // ================
        // Global Variables
        // ================
        var cboORBranch = new wijmo.input.ComboBox('#cboORBranch');
        var cboORCustomer = new wijmo.input.ComboBox('#cboORCustomer');
        var cboORDate = new wijmo.input.InputDate('#cboORDate');
        var cboORPreparedBy = new wijmo.input.ComboBox('#cboORPreparedBy');
        var cboORCheckedBy = new wijmo.input.ComboBox('#cboORCheckedBy');
        var cboORApprovedBy = new wijmo.input.ComboBox('#cboORApprovedBy');
        var isLocked = false;
        var collectionLineId = 0;
        var cboCollectionLineBranch = new wijmo.input.ComboBox('#cboCollectionLineBranch');
        var cboCollectionLineAccountCode = new wijmo.input.ComboBox('#cboCollectionLineAccountCode');
        var cboCollectionLineAccount = new wijmo.input.ComboBox('#cboCollectionLineAccount');
        var cboCollectionLineArticle = new wijmo.input.ComboBox('#cboCollectionLineArticle');
        var cboCollectionLineSINumber = new wijmo.input.ComboBox('#cboCollectionLineSINumber');
        var cboCollectionLinePayType = new wijmo.input.ComboBox('#cboCollectionLinePayType');
        var cboCheckDate = new wijmo.input.InputDate('#cboCheckDate');
        var cboCollectionLineDepositoryBank = new wijmo.input.ComboBox('#cboCollectionLineDepositoryBank');
        var IsAccountChanged = false;
        var journalCollectionView;
        var journalFlexGrid = new wijmo.grid.FlexGrid('#journalFlexGrid');
        var saleInvoiceStatus;
        var SIStatusGrid = new wijmo.grid.FlexGrid('#salesInvoiceStatusGrid');
        var SIAdvances;
        var SIAdvancesGrid = new wijmo.grid.FlexGrid('#SIAdvancesGrid');;

        // =======================
        // Get URL Parameter Value
        // =======================
        function getParam(name) {
            name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");

            var regexS = "[\\?&]" + name + "=([^&#]*)";
            var regex = new RegExp(regexS);

            var results = regex.exec(window.location.href);
            if (results == null) {
                return "";
            } else {
                return results[1];
            }
        }

        // ========================
        // GET Branch for Combo Box
        // ========================
        function getBranchesForComboBox() {
            var branchesObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listBranch',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (branchListResult) {
                    if (branchListResult.length > 0) {
                        for (i = 0; i < branchListResult.length; i++) {
                            branchesObservableArray.push({
                                Id: branchListResult[i]["Id"],
                                Branch: branchListResult[i]["Branch"]
                            });
                        }
                    }

                    cboORBranch.dispose();
                    cboORBranch = new wijmo.input.ComboBox('#cboORBranch', {
                        disabled: true,
                        isEditable: false,
                        placeholder: "Select Branch",
                        itemsSource: branchesObservableArray,
                        displayMemberPath: "Branch",
                        selectedValuePath: "Id"
                    });

                    getCustomerForComboBox();
                }
            });
        }

        // ==========================
        // GET Customer for Combo Box
        // ==========================
        function getCustomerForComboBox() {
            var customersObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listArticleByArticleTypeId/2',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (customerListResult) {
                    if (customerListResult.length > 0) {
                        for (i = 0; i < customerListResult.length; i++) {
                            customersObservableArray.push({
                                Id: customerListResult[i]["Id"],
                                Customer: customerListResult[i]["Article"]
                            });
                        }
                    }

                    cboORCustomer.dispose();
                    cboORCustomer = new wijmo.input.ComboBox('#cboORCustomer', {
                        isEditable: false,
                        placeholder: "Select Customer",
                        itemsSource: customersObservableArray,
                        displayMemberPath: "Customer",
                        selectedValuePath: "Id"
                    });

                    getUsersForComboBox();
                }
            });
        }

        // =======================
        // GET Users for Combo Box
        // =======================
        function getUsersForComboBox() {
            var usersObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listUser',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (userListResults) {
                    if (userListResults.length > 0) {
                        for (i = 0; i < userListResults.length; i++) {
                            usersObservableArray.push({
                                Id: userListResults[i]["Id"],
                                FullName: userListResults[i]["FullName"]
                            });
                        }
                    }

                    cboORPreparedBy.dispose();
                    cboORPreparedBy = new wijmo.input.ComboBox('#cboORPreparedBy', {
                        disabled: true,
                        isEditable: false,
                        placeholder: "Select User",
                        itemsSource: usersObservableArray,
                        displayMemberPath: "FullName",
                        selectedValuePath: "Id"
                    });

                    cboORCheckedBy.dispose();
                    cboORCheckedBy = new wijmo.input.ComboBox('#cboORCheckedBy', {
                        isEditable: false,
                        placeholder: "Select User",
                        itemsSource: usersObservableArray,
                        displayMemberPath: "FullName",
                        selectedValuePath: "Id"
                    });

                    cboORApprovedBy.dispose();
                    cboORApprovedBy = new wijmo.input.ComboBox('#cboORApprovedBy', {
                        isEditable: false,
                        placeholder: "Select User",
                        itemsSource: usersObservableArray,
                        displayMemberPath: "FullName",
                        selectedValuePath: "Id"
                    });

                    getCollectionById();
                }
            });
        }

        // ====================
        // GET Collection By Id
        // ====================
        function getCollectionById() {
            NProgress.start();
            if (document.location.search.length > 0) {
                var collectonId = getParam("id");
                $.ajax({
                    url: '/api/collection/' + collectonId,
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    success: function (Results) {
                        if (Results != null) {
                            cboORBranch.selectedValue = Results.BranchId;
                            document.getElementById('collection_ORNumber').value = Results.ORNumber;
                            cboORDate.dispose();
                            cboORDate = new wijmo.input.InputDate('#cboORDate', {
                                format: 'MM-dd-yyyy',
                                value: new Date(Results.ORDate),
                            });
                            document.getElementById('collection_ManualORNumber').value = Results.ManualORNumber;
                            cboORCustomer.selectedValue = Results.CustomerId;
                            document.getElementById('collection_Particulars').value = Results.Particulars;
                            cboORPreparedBy.selectedValue = Results.PreparedById;
                            cboORCheckedBy.selectedValue = Results.CheckedById;
                            cboORApprovedBy.selectedValue = Results.ApprovedById;

                            document.getElementById('createdBy').innerHTML = Results.CreatedBy;
                            document.getElementById('createdDate').innerHTML = Results.CreatedDateTime;
                            document.getElementById('updatedBy').innerHTML = Results.UpdatedBy;
                            document.getElementById('updatedDate').innerHTML = Results.UpdatedDateTime;

                            if (Results.IsLocked) {
                                cboORDate.disabled = true;
                                document.getElementById('collection_ManualORNumber').disabled = true;
                                cboORCustomer.disabled = true;
                                document.getElementById('collection_Particulars').disabled = true;
                                cboORPreparedBy.disabled = true;
                                cboORCheckedBy.disabled = true;
                                cboORApprovedBy.disabled = true;

                                $("#cmdCollectionSaveLock").prop("disabled", true);
                                $("#btnAddCollectionLine").prop("disabled", true);
                                $("#cmdAR").prop("disabled", true);
                                $("#cmdAdvances").prop("disabled", true);

                                var canUnLock = "@ViewData["CanUnlock"]";
                                if (canUnLock == "False") {
                                    $("#cmdCollectionEdit").prop("disabled", true);
                                }

                                var canPrint = "@ViewData["CanPrint"]";
                                if (canPrint == "False") {
                                    $("#cmdCollectionPrint").prop("disabled", true);
                                }

                                isLocked = true;
                            } else {
                                $("#cmdCollectionJournal").prop("disabled", true);
                                $("#cmdCollectionEdit").prop("disabled", true);
                                $("#cmdCollectionPrint").prop("disabled", true);
                                $("#cmdAR").prop("disabled", false);
                                $("#cmdAdvances").prop("disabled", false);

                                var canLock = "@ViewData["CanLock"]";
                                if (canLock == "False") {
                                    $("#cmdCollectionSaveLock").prop("disabled", true);
                                }

                                var canAdd = "@ViewData["CanAdd"]";
                                if (canAdd == "False") {
                                    $("#btnAddCollectionLine").prop("disabled", true);
                                    $("#cmdAR").prop("disabled", true);
                                    $("#cmdAdvances").prop("disabled", true);
                                }
                            }

                            createCollectionLineFlexGrid();
                        }
                    }
                });
            } else {
                alert("No Id Parameter Value");
                window.location = "/Software/Collection";
            }
        }

        // ======================
        // Colelction Save - Lock
        // ======================
        function btnCollectionSaveLock_OnClick() {
            var collectionObject = new Object();
            var collectonId = getParam("id");
            collectionObject.BranchId = cboORBranch.selectedValue;
            collectionObject.ORNumber = document.getElementById('collection_ORNumber').value;
            collectionObject.ORDate = cboORDate.value.toLocaleDateString();
            collectionObject.CustomerId = cboORCustomer.selectedValue;
            collectionObject.Particulars = document.getElementById('collection_Particulars').value;
            collectionObject.ManualORNumber = document.getElementById('collection_ManualORNumber').value;
            collectionObject.PreparedById = cboORPreparedBy.selectedValue;
            collectionObject.CheckedById = cboORCheckedBy.selectedValue;
            collectionObject.ApprovedById = cboORApprovedBy.selectedValue;
            var data = JSON.stringify(collectionObject);

            var isValid = true;
            $('.requiredCollection').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                } else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            if (isValid) {
                document.getElementById('cmdCollectionSaveLock').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Locking";
                $("#cmdCollectionJournal").prop("disabled", true);
                $("#cmdCollectionSaveLock").prop("disabled", true);
                $("#cmdCollectionEdit").prop("disabled", true);
                $("#cmdCollectionPrint").prop("disabled", true);
                $("#cmdCollectionClose").prop("disabled", true);

                $.ajax({
                    type: "PUT",
                    url: '/api/updateCollection/' + collectonId,
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    data: data,
                    statusCode: {
                        200: function () {
                            toastr.success("Lock Successful");
                            window.setTimeout(function () {
                                location.reload()
                            }, 1000);
                        },
                        404: function () {
                            toastr.error("Not Found");
                            document.getElementById('cmdCollectionSaveLock').innerHTML = "<i class='fa fa-lock'></i> Lock";
                            $("#cmdCollectionSaveLock").prop("disabled", false);
                            $("#cmdCollectionClose").prop("disabled", false);
                        },
                        400: function () {
                            toastr.error("Bad Request");
                            document.getElementById('cmdCollectionSaveLock').innerHTML = "<i class='fa fa-lock'></i> Lock";
                            $("#cmdCollectionSaveLock").prop("disabled", false);
                            $("#cmdCollectionClose").prop("disabled", false);
                        }
                    }
                });
            } else {
                toastr.error("Invalid Entry");
            }
        }

        // ========================
        // Edit Collection - Unlock
        // ========================
        function btnCollectionEdit_OnClick() {
            var collectonId = getParam("id");
            document.getElementById('cmdCollectionEdit').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Unlocking";
            $("#cmdCollectionJournal").prop("disabled", true);
            $("#cmdCollectionSaveLock").prop("disabled", true);
            $("#cmdCollectionEdit").prop("disabled", true);
            $("#cmdCollectionPrint").prop("disabled", true);
            $("#cmdCollectionClose").prop("disabled", true);

            $.ajax({
                type: "PUT",
                url: '/api/updateCollectionIsLocked/' + collectonId,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Unlock Successful");
                        window.setTimeout(function () {
                            location.reload()
                        }, 1000);
                    },
                    404: function () {
                        toastr.error("Not Found");
                        document.getElementById('cmdCollectionEdit').innerHTML = "<i class='fa fa-unlock'></i> Unlock";
                        $("#cmdCollectionJournal").prop("disabled", false);
                        $("#cmdCollectionEdit").prop("disabled", false);
                        $("#cmdCollectionPrint").prop("disabled", false);
                        $("#cmdCollectionClose").prop("disabled", false);
                    },
                    400: function () {
                        toastr.error("Bad Request");
                        document.getElementById('cmdCollectionEdit').innerHTML = "<i class='fa fa-unlock'></i> Unlock";
                        $("#cmdCollectionJournal").prop("disabled", false);
                        $("#cmdCollectionEdit").prop("disabled", false);
                        $("#cmdCollectionPrint").prop("disabled", false);
                        $("#cmdCollectionClose").prop("disabled", false);
                    }
                }
            });
        }

        // ========
        // Print OR
        // ========
        function btnCollectionPrint_OnClick() {
            var collectonId = getParam("id");
            window.location = "/RepCollection/Collection?CollectonId=" + collectonId;
        }

        // ========================
        // GET Collection Line List
        // ========================
        function getCollectionLines() {
            var collectionLinesObservableArray = new wijmo.collections.ObservableArray;
            if (document.location.search.length > 0) {
                var collectonId = getParam("id");
                NProgress.start();
                $.ajax({
                    url: '/api/listCollectionLineByORId/' + collectonId,
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    success: function (Results) {
                        if (Results.length > 0) {
                            var canEdit = "@ViewData["CanEdit"]";
                            var editDisabled = "";
                            if (canEdit == "False") {
                                editDisabled = "disabled";
                            }

                            var canDelete = "@ViewData["CanDelete"]";
                            var deleteDisabled = "";
                            if (canDelete == "False") {
                                deleteDisabled = "disabled";
                            }

                            var btnEditId = "<button class='btn btn-primary btn-xs btn-block' onclick='btnEditCollectionLine_OnClick()' " + editDisabled + "><i class='fa fa-edit'></i> Edit</button>";
                            var btnDeleteId = "<button class='btn btn-danger btn-xs btn-block' onclick='btnDeleteCollectionLine_OnClick()'" + deleteDisabled + "><i class='fa fa-trash'></i> Delete</button>";
                            if (isLocked) {
                                btnEditId = "<button class='btn btn-primary btn-xs btn-block' onclick='btnEditCollectionLine_OnClick()' disabled><i class='fa fa-edit'></i> Edit</button>";
                                btnDeleteId =  "<button class='btn btn-danger btn-xs btn-block' onclick='btnDeleteCollectionLine_OnClick()' disabled><i class='fa fa-trash'></i> Delete</button>";
                            }

                            for (i = 0; i < Results.length; i++) {
                                var CheckDateResult = new Date(Results[i]["CheckDate"])
                                var CheckDate = ('0' + (CheckDateResult.getMonth() + 1)).slice(-2) + '-' + ('0' + CheckDateResult.getDate()).slice(-2) + '-' + CheckDateResult.getFullYear();

                                collectionLinesObservableArray.push({
                                    EditId: btnEditId,
                                    DeleteId: btnDeleteId,
                                    Id: Results[i]["Id"],
                                    ORId: Results[i]["ORId"],
                                    OR: Results[i]["OR"],
                                    BranchId: Results[i]["BranchId"],
                                    Branch: Results[i]["Branch"],
                                    AccountId: Results[i]["AccountId"],
                                    Account: Results[i]["Account"],
                                    ArticleId: Results[i]["ArticleId"],
                                    Article: Results[i]["Article"],
                                    SIId: Results[i]["SIId"],
                                    SI: Results[i]["SI"],
                                    Particulars: Results[i]["Particulars"],
                                    Amount: Results[i]["Amount"],
                                    PayTypeId: Results[i]["PayTypeId"],
                                    PayType: Results[i]["PayType"],
                                    CheckNumber: Results[i]["CheckNumber"],
                                    CheckDate: CheckDate,
                                    CheckBank: Results[i]["CheckBank"],
                                    DepositoryBankId: Results[i]["DepositoryBankId"],
                                    DepositoryBank: Results[i]["DepositoryBank"],
                                    IsClear: Results[i]["IsClear"]
                                });
                            }
                        }

                        NProgress.done();
                    }
                });
            }

            return collectionLinesObservableArray;
        }

        // ================================
        // Refresh Collection Line FlexGrid
        // ================================
        function refreshCollectionLineFlexGrid() {
            collectionLines = new wijmo.collections.CollectionView(getCollectionLines());
            collectionLineGrid.itemsSource = collectionLines;
            collectionLineGrid.trackChanges = true;
        }

        // ========================
        // Collection Line FlexGrid
        // ========================
        function createCollectionLineFlexGrid() {
            collectionLines = new wijmo.collections.CollectionView(getCollectionLines());

            collectionLineGrid = new wijmo.grid.FlexGrid('#CollectionLineGrid');
            collectionLineGrid.initialize({
                columns: [
                    {
                        "header": "Edit",
                        "binding": "EditId",
                        "width": 70,
                        "align": "center",
                        "allowResizing": false,
                        "allowSorting": false,
                        "isContentHtml": true
                    },
                    {
                        "header": "Delete",
                        "binding": "DeleteId",
                        "width": 70,
                        "align": "center",
                        "allowResizing": false,
                        "allowSorting": false,
                        "isContentHtml": true
                    },
                    {
                        "header": "Branch",
                        "binding": "Branch",
                        "allowSorting": true,
                        "width": 150
                    },
                    {
                        "header": "Pay Type",
                        "binding": "PayType",
                        "allowSorting": true,
                        "width": 150
                    },
                    {
                        "header": "Particulars",
                        "binding": "Particulars",
                        "allowSorting": true,
                        "width": 200
                    },
                    {
                        "header": "SI No.",
                        "binding": "SI",
                        "allowSorting": true,
                        "width": 120
                    },
                    {
                        "header": "Amount",
                        "binding": "Amount",
                        "allowSorting": true,
                        "width": 120
                    },
                    {
                        "header": "Account",
                        "binding": "Account",
                        "allowSorting": true,
                        "width": 150
                    },
                    {
                        "header": "Article",
                        "binding": "Article",
                        "allowSorting": true,
                        "width": 150
                    },
                    {
                        "header": "Check No.",
                        "binding": "CheckNumber",
                        "allowSorting": true,
                        "width": 150
                    },
                    {
                        "header": "Check Date",
                        "binding": "CheckDate",
                        "allowSorting": true,
                        "width": 110
                    },
                    {
                        "header": "Check Bank",
                        "binding": "CheckBank",
                        "allowSorting": true,
                        "width": 150
                    },
                    {
                        "header": "Depository Bank",
                        "binding": "DepositoryBank",
                        "allowSorting": true,
                        "width": 150
                    },
                    {
                        "header": "C",
                        "binding": "IsClear",
                        "allowSorting": true,
                        "width": 50
                    }
                ],
                autoGenerateColumns: false,
                itemsSource: collectionLines,
                isReadOnly: true,
                frozenColumns: 2,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            collectionLineGrid.trackChanges = true;
        }

        // ========================================
        // GET Collection Line Branch for Combo Box
        // ========================================
        function getDisbursementBranchesForComboBox(branchId, accountId, articleId, SIId, payTypeId, checkDate, depositoryBankId) {
            var collectionLineBranchesObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listBranch',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            collectionLineBranchesObservableArray.push({
                                Id: results[i]["Id"],
                                Branch: results[i]["Branch"]
                            });
                        }
                    }

                    var disabled = true;
                    if (results.length > 0) {
                        disabled = false;
                        $("#cmdSaveCollectionLineButton").prop("disabled", false);
                    } else {
                        $("#cmdSaveCollectionLineButton").prop("disabled", true);
                    }

                    cboCollectionLineBranch.dispose();
                    cboCollectionLineBranch = new wijmo.input.ComboBox('#cboCollectionLineBranch', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: collectionLineBranchesObservableArray,
                        displayMemberPath: "Branch",
                        selectedValuePath: "Id",
                        selectedValue: branchId
                    });

                    getCollectionLineAccountForComboBox(accountId, articleId, SIId, payTypeId, checkDate, depositoryBankId);
                }
            });
        }

        // ===========================
        // Get Collection Line Account
        // ===========================
        function getCollectionLineAccountForComboBox(accountId, articleId, SIId, payTypeId, checkDate, depositoryBankId) {
            var collectionLineAccountsObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listAccount',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            collectionLineAccountsObservableArray.push({
                                Id: results[i]["Id"],
                                AccountCode: results[i]["AccountCode"],
                                Account: results[i]["Account"]
                            });
                        }
                    }

                    var disabled = true;
                    if (results.length > 0) {
                        disabled = false;
                    } else {
                        $("#cmdSaveCollectionLineButton").prop("disabled", true);
                    }

                    cboCollectionLineAccountCode.dispose();
                    cboCollectionLineAccountCode = new wijmo.input.ComboBox('#cboCollectionLineAccountCode', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: collectionLineAccountsObservableArray,
                        displayMemberPath: "AccountCode",
                        selectedValuePath: "Id",
                        selectedValue: accountId,
                        onSelectedIndexChanged: function () {
                            cboCollectionLineAccount.selectedValue = this.selectedValue;
                        }
                    });

                    cboCollectionLineAccount.dispose();
                    cboCollectionLineAccount = new wijmo.input.ComboBox('#cboCollectionLineAccount', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: collectionLineAccountsObservableArray,
                        displayMemberPath: "Account",
                        selectedValuePath: "Id",
                        selectedValue: accountId,
                        onSelectedIndexChanged: function () {
                            cboCollectionLineAccountCode.selectedValue = this.selectedValue;
                            cboCollectionLineArticle.disabled = true;
                            IsAccountChanged = true;
                            getCollectionLineArticlesForComboBox(articleId, SIId, payTypeId, checkDate, depositoryBankId);
                        }
                    });

                    getCollectionLineArticlesForComboBox(articleId, SIId, payTypeId, checkDate, depositoryBankId);
                }
            });
        }

        // ==========================================
        // GET Collection Line Articles for Combo Box
        // ==========================================
        function getCollectionLineArticlesForComboBox(articleId, SIId, payTypeId, checkDate,  depositoryBankId) {
            var collectionLineArticlesObservableArray = new wijmo.collections.ObservableArray();
            if (cboCollectionLineAccount.selectedValue != null) {
                $.ajax({
                    url: '/api/listArticle/byAccount/' + cboCollectionLineAccount.selectedValue,
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    success: function (results) {
                        if (results.length > 0) {
                            for (i = 0; i < results.length; i++) {
                                collectionLineArticlesObservableArray.push({
                                    Id: results[i]["Id"],
                                    Article: results[i]["Article"]
                                });
                            }
                        }

                        var disabled = true;
                        if (results.length > 0) {
                            disabled = false;
                        } else {
                            $("#cmdSaveCollectionLineButton").prop("disabled", true);
                        }

                        cboCollectionLineArticle.dispose();
                        cboCollectionLineArticle = new wijmo.input.ComboBox('#cboCollectionLineArticle', {
                            disabled: disabled,
                            isEditable: false,
                            itemsSource: collectionLineArticlesObservableArray,
                            displayMemberPath: "Article",
                            selectedValuePath: "Id",
                            selectedValue: articleId
                        });

                        if (!IsAccountChanged) {
                            getSalesForComboBoxInCollectionLine(SIId, payTypeId, checkDate,  depositoryBankId);
                        }
                    }
                });
            } else {
                cboCollectionLineArticle.dispose();
                cboCollectionLineArticle = new wijmo.input.ComboBox('#cboCollectionLineArticle', {
                    disabled: true,
                    isEditable: false,
                    itemsSource: collectionLineArticlesObservableArray,
                });

                if (!IsAccountChanged) {
                    getSalesForComboBoxInCollectionLine(SIId, payTypeId, checkDate,  depositoryBankId);
                }
            }
        }

        // ==============================================
        // GET SI Number for Combo Box in Collection Line
        // ==============================================
        function getSalesForComboBoxInCollectionLine(SIId, payTypeId, checkDate,  depositoryBankId) {
            var collectionLineSalesObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/salesInvoiceByCustomerId/' + cboORCustomer.selectedValue,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            collectionLineSalesObservableArray.push({
                                Id: results[i]["Id"],
                                SINumber: results[i]["SINumber"],
                                SIDetails: results[i]["SINumber"] + " (" + (results[i]["SIDate"]).replace(/\//g, '-') + ")",
                                Branch: results[i]["Branch"],
                                Amount: results[i]["Amount"],
                                BalanceAmount: results[i]["BalanceAmount"]
                            });
                        }
                    }

                    var disabled = true;
                    if (results.length > 0) {
                        disabled = false;
                    }

                    cboCollectionLineSINumber.dispose();
                    cboCollectionLineSINumber = new wijmo.input.ComboBox('#cboCollectionLineSINumber', {
                        disabled: disabled,
                        required: false,
                        isEditable: false,
                        itemsSource: collectionLineSalesObservableArray,
                        displayMemberPath: "SIDetails",
                        selectedValuePath: "Id",
                        selectedValue: SIId,
                        onSelectedIndexChanged: function () {
                            if (this.selectedValue != null) {
                                document.getElementById("collectionLine_amount").value = this.selectedItem["BalanceAmount"].toLocaleString();;
                            } else {
                                document.getElementById("collectionLine_amount").value = 0;
                            }
                        }
                    });

                    if (collectionLineId == 0) {
                        if (cboCollectionLineSINumber.selectedValue != null) {
                            document.getElementById("collectionLine_amount").value = cboCollectionLineSINumber.selectedItem["BalanceAmount"].toLocaleString();;
                        } else {
                            document.getElementById("collectionLine_amount").value = 0;
                        }
                    }

                    getDisbursementPayTypeForComboBox(payTypeId, checkDate,  depositoryBankId);
                }
            });
        }

        // =========================================
        // GET Collection Line PayType for Combo Box
        // =========================================
        function getDisbursementPayTypeForComboBox(payTypeId, checkDate,  depositoryBankId) {
            var collectionLinePayTypesObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listPayType',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            collectionLinePayTypesObservableArray.push({
                                Id: results[i]["Id"],
                                PayType: results[i]["PayType"]
                            });
                        }
                    }

                    var disabled = true;
                    if (results.length > 0) {
                        disabled = false;
                    } else {
                        $("#cmdSaveCollectionLineButton").prop("disabled", true);
                    }

                    cboCollectionLinePayType.dispose();
                    cboCollectionLinePayType = new wijmo.input.ComboBox('#cboCollectionLinePayType', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: collectionLinePayTypesObservableArray,
                        displayMemberPath: "PayType",
                        selectedValuePath: "Id",
                        selectedValue: payTypeId
                    });

                    getCheckDate(checkDate, depositoryBankId);
                }
            });
        }

        // ==========
        // Check Date
        // ==========
        function getCheckDate(checkDate, depositoryBankId) {
            cboCheckDate.dispose();
            cboCheckDate = new wijmo.input.InputDate('#cboCheckDate', {
                format: 'MM-dd-yyyy',
                value: checkDate,
            });

            getCollectionArticleBankForComboBox(depositoryBankId);
        }

        // ===============================================
        // GET Collection Line Articles Bank for Combo Box
        // ===============================================
        function getCollectionArticleBankForComboBox(depositoryBankId) {
            var collectionArticleBanksObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listArticleByArticleTypeId/5',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            collectionArticleBanksObservableArray.push({
                                Id: results[i]["Id"],
                                Article: results[i]["Article"]
                            });
                        }
                    }

                    var disabled = true;
                    if (results.length > 0) {
                        disabled = false;
                    } else {
                        $("#cmdSaveCollectionLineButton").prop("disabled", true);
                    }

                    cboCollectionLineDepositoryBank.dispose();
                    cboCollectionLineDepositoryBank = new wijmo.input.ComboBox('#cboCollectionLineDepositoryBank', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: collectionArticleBanksObservableArray,
                        displayMemberPath: "Article",
                        selectedValuePath: "Id",
                        selectedValue: depositoryBankId
                    });
                }
            });
        }

        // ===================
        // ADD Collection Line
        // ===================
        function cmdAddCollectionLineButton_OnClick() {
            $('#collectionLineEdit').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById('cmdSaveCollectionLineButton').innerHTML = "<i class='fa fa-save'></i> Save";
            $("#cmdSaveCollectionLineButton").prop("disabled", true);
            $("#cmdCollectionLineDetailCloseButton").prop("disabled", false);

            $('.requiredCollectionLine').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            getDisbursementBranchesForComboBox(0, 0, 0, 0, 0, new Date(), 0);
            collectionLineId = 0;
            document.getElementById('collectionLine_Particulars').value = 'NA';
            document.getElementById('collectionLine_checkNo').value = 'NA';
            document.getElementById('collectionLine_checkBank').value = 'NA';
            document.getElementById('collectionLine_Clear').checked = false;
        }

        // ====================
        // Edit Collection Line
        // ====================
        function btnEditCollectionLine_OnClick() {
            $('#collectionLineEdit').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById('cmdSaveCollectionLineButton').innerHTML = "<i class='fa fa-save'></i> Save";
            $("#cmdSaveCollectionLineButton").prop("disabled", true);
            $("#cmdCollectionLineDetailCloseButton").prop("disabled", false);

            $('.requiredCollectionLine').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            collectionLines.editItem(collectionLines.currentItem);
            var collectionLine = collectionLines.currentEditItem;

            collectionLineId = collectionLine.Id;
            getDisbursementBranchesForComboBox(collectionLine.BranchId, collectionLine.AccountId, collectionLine.ArticleId, collectionLine.SIId, collectionLine.PayTypeId, new Date(collectionLine.CheckDate), collectionLine.DepositoryBankId);
            document.getElementById('collectionLine_Particulars').value = collectionLine.Particulars;
            document.getElementById('collectionLine_checkNo').value = collectionLine.CheckNumber;
            document.getElementById('collectionLine_checkBank').value = collectionLine.CheckBank;
            document.getElementById('collectionLine_amount').value = collectionLine.Amount.toLocaleString();
            document.getElementById('collectionLine_Clear').checked = collectionLine.IsClear;
        }

        // ======================
        // Delete Collection Line
        // ======================
        function btnDeleteCollectionLine_OnClick() {
            $('#deleteCollectionLineConfirm').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById('cmdConfirmDeleteCollectionLine').innerHTML = "<i class='fa fa-trash'></i> Delete";
            $("#cmdConfirmDeleteCollectionLine").prop("disabled", false);
            $("#cmdConfirmDeleteCollectionLineCloseButton").prop("disabled", false);
        }

        // confirm delete Collection
        function cmdCollectionLineConfirmDeleteButton_OnClick() {
            document.getElementById('cmdConfirmDeleteCollectionLine').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Deleting";
            $("#cmdConfirmDeleteCollectionLine").prop("disabled", true);
            $("#cmdConfirmDeleteCollectionLineCloseButton").prop("disabled", true);

            collectionLines.editItem(collectionLines.currentItem);
            var collectionLineId = collectionLines.currentEditItem.Id;
            $.ajax({
                url: '/api/deleteCollectionLine/' + collectionLineId,
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Successfully Deleted");
                        $('#deleteCollectionLineConfirm').modal('hide');
                        refreshCollectionLineFlexGrid();
                    },
                    404: function () {
                        toastr.error("Request Not Found");
                        $('#deleteCollectionLineConfirm').modal('hide');
                        document.getElementById('cmdConfirmDeleteCollectionLine').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $("#cmdConfirmDeleteCollectionLine").prop("disabled", false);
                        $("#cmdConfirmDeleteCollectionLineCloseButton").prop("disabled", false);
                    },
                    400: function () {
                        toastr.error("Bad Request");
                        $('#deleteCollectionLineConfirm').modal('hide');
                        document.getElementById('cmdConfirmDeleteCollectionLine').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $("#cmdConfirmDeleteCollectionLine").prop("disabled", false);
                        $("#cmdConfirmDeleteCollectionLineCloseButton").prop("disabled", false);
                    }
                }
            });
        }

        // ====================
        // SAVE Collection Line
        // ====================
        function cmdCollectionLineSaveButton_OnClick() {
            var collectionObject = new Object();
            var id = getParam("id");
            collectionObject.ORId = id;
            collectionObject.BranchId = cboCollectionLineBranch.selectedValue;
            collectionObject.AccountId = cboCollectionLineAccount.selectedValue;
            collectionObject.ArticleId = cboCollectionLineArticle.selectedValue;
            collectionObject.SIId = cboCollectionLineSINumber.selectedValue;
            collectionObject.Particulars = document.getElementById('collectionLine_Particulars').value;
            collectionObject.Amount = document.getElementById('collectionLine_amount').value;
            collectionObject.PayTypeId = cboCollectionLinePayType.selectedValue;
            collectionObject.CheckNumber = document.getElementById('collectionLine_checkNo').value;
            collectionObject.CheckDate = cboCheckDate.value.toLocaleDateString();
            collectionObject.CheckBank = document.getElementById('collectionLine_checkBank').value;
            collectionObject.DepositoryBankId = cboCollectionLineDepositoryBank.selectedValue;
            collectionObject.IsClear = document.getElementById('collectionLine_Clear').checked;
            var collectionData = JSON.stringify(collectionObject);
            
            var isValid = true;
            $('.requiredCollectionLine').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                } else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            if (isValid) {
                document.getElementById('cmdSaveCollectionLineButton').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Saving";
                $("#cmdSaveCollectionLineButton").prop("disabled", true);
                $("#cmdCollectionLineDetailCloseButton").prop("disabled", true);
                if (collectionLineId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/addCollectionLine',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: collectionData,
                        success: function (id) {
                            if (id > 0) {
                                toastr.success("Save Successful");
                                $('#collectionLineEdit').modal('hide');
                                refreshCollectionLineFlexGrid();
                            } else {
                                toastr.error("Internal Server Error");
                                document.getElementById('cmdSaveCollectionLineButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#cmdSaveCollectionLineButton").prop("disabled", true);
                                $("#cmdCollectionLineDetailCloseButton").prop("disabled", false);
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/updateCollectionLine/' + collectionLineId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: collectionData,
                        statusCode: {
                            200: function () {
                                toastr.success("Update Successful");
                                $('#collectionLineEdit').modal('hide');
                                refreshCollectionLineFlexGrid();
                            },
                            404: function () {
                                toastr.error("Not Found");
                                $('#collectionLineEdit').modal('hide');
                                document.getElementById('cmdSaveCollectionLineButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#cmdSaveCollectionLineButton").prop("disabled", true);
                                $("#cmdCollectionLineDetailCloseButton").prop("disabled", false);
                            },
                            400: function () {
                                toastr.error("Bad Request");
                                $('#collectionLineEdit').modal('hide');
                                document.getElementById('cmdSaveCollectionLineButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#cmdSaveCollectionLineButton").prop("disabled", true);
                                $("#cmdCollectionLineDetailCloseButton").prop("disabled", false);
                            }
                        }
                    });
                }
            } else {
                toastr.error("Invalid Entry");
            }
        }


        // ===========
        // Get Journal
        // ===========
        function getJournalListForRR() {
            var journalsObservableArray = new wijmo.collections.ObservableArray;
            var id = getParam('id');
            $.ajax({
                url: '/api/listJournalByORId/' + id,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (Results) {
                    if (Results.length > 0) {
                        for (i = 0; i < Results.length; i++) {
                            journalsObservableArray.push({
                                Id: Results[i]["Id"],
                                JournalDate: (Results[i]["JournalDate"]).replace(/\//g, '-'),
                                BranchId: Results[i]["BranchId"],
                                Branch: Results[i]["Branch"],
                                AccountId: Results[i]["AccountId"],
                                AccountCode: Results[i]["AccountCode"],
                                Account: Results[i]["Account"],
                                ArticleId: Results[i]["ArticleId"],
                                Article: Results[i]["Article"],
                                Particulars: Results[i]["Particulars"],
                                DebitAmount: Results[i]["DebitAmount"],
                                CreditAmount: Results[i]["CreditAmount"],
                                ORId: Results[i]["ORId"],
                                CVId: Results[i]["CVId"],
                                JVId: Results[i]["JVId"],
                                RRId: Results[i]["RRId"],
                                SIId: Results[i]["SIId"],
                                INId: Results[i]["INId"],
                                OTId: Results[i]["OTId"],
                                STId: Results[i]["STId"],
                                DocumentReference: Results[i]["DocumentReference"],
                                APRRId: Results[i]["APRRId"],
                                ARSIId: Results[i]["ARSIId"]
                            });

                            var debitAmountTotal = 0;
                            var creditAmountTotal = 0;

                            var a = 0;
                            while (a < Results.length) {
                                debitAmountTotal += Results[a]["DebitAmount"];
                                creditAmountTotal += Results[a]["CreditAmount"];
                                a++;
                            }
                        }

                        document.getElementById('totalDebitInJournal').value = debitAmountTotal.toLocaleString();
                        document.getElementById('totalCreditInJournal').value = creditAmountTotal.toLocaleString();
                        var variance = debitAmountTotal - creditAmountTotal;
                        document.getElementById('variance').value = variance.toLocaleString();
                    }

                    $("#loadingJournalGridList").hide();
                    $("#journal_Content").show();
                }
            });

            return journalsObservableArray;
        }

        // ============
        // Journal List
        // ============
        function btnJournalDetail_OnClick() {
            $('#journalDetail').modal({
                show: true,
                backdrop: 'static'
            });

            $("#loadingJournalGridList").show();
            document.getElementById("loadingJournalGridList").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#journal_Content").hide();

            setTimeout(function () {
                createJournalFlexGrid();
            }, 500)
        }

        function createJournalFlexGrid() {
            journalCollectionView = new wijmo.collections.CollectionView(getJournalListForRR());

            journalFlexGrid.dispose();
            journalFlexGrid = new wijmo.grid.FlexGrid('#journalFlexGrid');
            journalFlexGrid.initialize({
                columns: [
                    {
                        "header": "Branch",
                        "binding": "Branch",
                        "allowSorting": true,
                        "width": "2.5*"
                    },
                    {
                        "header": "Date",
                        "binding": "JournalDate",
                        "allowSorting": true,
                        "width": "1.5*"
                    },
                    {
                        "header": "Code",
                        "binding": "AccountCode",
                        "allowSorting": true,
                        "width": "1.8*"
                    },
                    {
                        "header": "Account",
                        "binding": "Account",
                        "allowSorting": true,
                        "width": "3*"
                    },
                    {
                        "header": "Article",
                        "binding": "Article",
                        "allowSorting": true,
                        "width": "3*"
                    },
                    {
                        "header": "Debit",
                        "binding": "DebitAmount",
                        "allowSorting": true,
                        "width": "2*",
                    },
                    {
                        "header": "Credit",
                        "binding": "CreditAmount",
                        "allowSorting": true,
                        "width": "2*"
                    }
                ],
                autoGenerateColumns: false,
                itemsSource: journalCollectionView,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            journalFlexGrid.trackChanges = true;
        }

        // ==========
        // AR Onclick
        // ==========
        function collectionAR_OnClick() {
            $('#SalesStatus').modal({
                show: true,
                backdrop: 'static'
            });

            $('#loadingSIStatus').show();
            document.getElementById("loadingSIStatus").innerHTML = "<b><i class='fa fa-spinner fa-spin'></i></b>";
            $('#statusGrid').hide();
            $('#btnIdApplyAllSI').prop("disabled", true);

            setTimeout(function () {
                createSalesInvoiceStatusFlexGrid();
            }, 500);
        }

        function getSalesInvoiceByCustomerByBalance() {
            var saleInvoiceStatus = new wijmo.collections.ObservableArray;
            $.ajax({
                url: '/api/salesInvoiceByCustomerIdByBalance/' + cboORCustomer.selectedValue,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (saleInvoiceResults) {
                    $('#btnIdApplyAllSI').prop("disabled", false);
                    if (saleInvoiceResults.length > 0) {
                        for (i = 0; i < saleInvoiceResults.length; i++) {

                            var SIDateResult = new Date(saleInvoiceResults[i]["SIDate"])
                            var SIDate = ('0' + (SIDateResult.getMonth() + 1)).slice(-2) + '-' + ('0' + SIDateResult.getDate()).slice(-2) + '-' + SIDateResult.getFullYear();

                            saleInvoiceStatus.push({
                                Id: saleInvoiceResults[i]["Id"],
                                BranchId: saleInvoiceResults[i]["BranchId"],
                                Branch: saleInvoiceResults[i]["Branch"],
                                SINumber: saleInvoiceResults[i]["SINumber"],
                                SIDate: SIDate,
                                CustomerId: saleInvoiceResults[i]["CustomerId"],
                                Customer: saleInvoiceResults[i]["Customer"],
                                TermId: saleInvoiceResults[i]["TermId"],
                                Term: saleInvoiceResults[i]["Term"],
                                AccountId: saleInvoiceResults[i]["AccountId"],
                                DocumentReference: saleInvoiceResults[i]["DocumentReference"],
                                ManualSINumber: saleInvoiceResults[i]["ManualSINumber"],
                                Remarks: saleInvoiceResults[i]["Remarks"],
                                Amount: saleInvoiceResults[i]["Amount"],
                                PaidAmount: saleInvoiceResults[i]["PaidAmount"],
                                AdjustmentAmount: saleInvoiceResults[i]["AdjustmentAmount"],
                                BalanceAmount: saleInvoiceResults[i]["BalanceAmount"],
                                Balance: saleInvoiceResults[i]["BalanceAmount"],
                                Pick: saleInvoiceResults[i]["BalanceAmount"] == 0 ? "<button class='btn btn-primary btn-xs' onclick='btnPickAmount()'><i class='fa fa-arrow-right'></i></button>" : "<button class='btn btn-warning btn-xs' onclick='btnUnpickAmountReverse()'><i class='fa fa-arrow-left'></i></button>",
                            });
                        }
                    } else {
                        $('#btnIdApplyAllSI').prop("disabled", true);
                    }

                    $('#loadingSIStatus').hide();
                    $('#statusGrid').show();
                }
            });

            return saleInvoiceStatus;
        }

        // =============
        // PICK quantity
        // =============
        function btnPickAmount() {
            saleInvoiceStatus.editItem(saleInvoiceStatus.currentItem);
            var saleInvoice = saleInvoiceStatus.currentEditItem;
            var balance = saleInvoice.Amount - saleInvoice.PaidAmount;
            if (balance > 0) {
                saleInvoice.Balance = balance;
                saleInvoice.Pick = "<button class='btn btn-warning btn-xs' onclick='btnUnpickAmountReverse()'><i class='fa fa-arrow-left'></i></button>";
                saleInvoiceStatus.refresh();
                SIStatusGrid.refresh();
            }
        }

        // ===============
        // REPICK quantity
        // ===============
        function btnUnpickAmountReverse() {
            saleInvoiceStatus.editItem(saleInvoiceStatus.currentItem);
            var saleInvoice = saleInvoiceStatus.currentEditItem;
            saleInvoice.Balance = 0;
            saleInvoice.Pick = "<button class='btn btn-primary btn-xs' onclick='btnPickAmount()'><i class='fa fa-arrow-right'></i></button>";
            saleInvoiceStatus.refresh();
            SIStatusGrid.refresh();
        }

        // =========================
        // Sales Invoice Status Grid
        // =========================
        function createSalesInvoiceStatusFlexGrid() {
            saleInvoiceStatus = new wijmo.collections.CollectionView(getSalesInvoiceByCustomerByBalance());
            saleInvoiceStatus.canFilter = true;

            var filterText = '';
            $('#SIStatusFilter').keyup(function () {
                filterText = this.value.toLowerCase();
                saleInvoiceStatus.refresh();
            });

            saleInvoiceStatus.filter = function (item) {
                return !filterText || (item.SINumber.toLowerCase().indexOf(filterText) > -1)
                    || (item.ManualSINumber.toLowerCase().indexOf(filterText) > -1);
            }

            SIStatusGrid.dispose();
            SIStatusGrid = new wijmo.grid.FlexGrid('#salesInvoiceStatusGrid');
            SIStatusGrid.initialize({
                columns: [
                    {
                        "header": "SI Number",
                        "binding": "SINumber",
                        "allowSorting": true,
                        "isReadOnly": true,
                        "width": "1.5*"
                    },
                    {
                        "header": "Manual SI No",
                        "binding": "ManualSINumber",
                        "allowSorting": true,
                        "isReadOnly": true,
                        "width": "3*"
                    },
                    {
                        "header": "Date",
                        "binding": "SIDate",
                        "allowSorting": true,
                        "isReadOnly": true,
                        "width": "1.5*"
                    },
                    {
                        "header": "SI Amount",
                        "binding": "Amount",
                        "allowSorting": true,
                        "isReadOnly": true,
                        "width": "2*"
                    },
                    {
                        "header": "Payments",
                        "binding": "PaidAmount",
                        "allowSorting": true,
                        "isReadOnly": true,
                        "width": "2*"
                    },
                    {
                        "header": "Adjustments",
                        "binding": "AdjustmentAmount",
                        "allowSorting": true,
                        "isReadOnly": true,
                        "width": "2*"
                    },
                    {
                        "header": "Balance",
                        "binding": "BalanceAmount",
                        "allowSorting": true,
                        "isReadOnly": true,
                        "width": "2*"
                    },
                    {
                        "header": "Pick",
                        "binding": "Pick",
                        "allowSorting": true,
                        "isReadOnly": true,
                        "width": 50,
                        "align": "center",
                        "allowResizing": false,
                        "allowSorting": false,
                        "isContentHtml": true
                    },
                    {
                        "header": "Balance",
                        "binding": "Balance",
                        "allowSorting": true,
                        "isReadOnly": false,
                        "width": "2*"
                    },
                ],
                autoGenerateColumns: false,
                itemsSource: saleInvoiceStatus,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            SIStatusGrid.trackChanges = true;

            var hr = new wijmo.grid.Row();
            SIStatusGrid.allowMerging = wijmo.grid.AllowMerging.AllHeaders;
            SIStatusGrid.columnHeaders.rows.push(hr);
            SIStatusGrid.columnHeaders.rows[0].allowMerging = true;

            SIStatusGrid.columnHeaders.columns[0].allowMerging = true;
            SIStatusGrid.columnHeaders.setCellData(0, 0, 'SI Number');

            SIStatusGrid.columnHeaders.columns[1].allowMerging = true;
            SIStatusGrid.columnHeaders.setCellData(0, 1, 'Manual SI No');

            SIStatusGrid.columnHeaders.columns[2].allowMerging = true;
            SIStatusGrid.columnHeaders.setCellData(0, 2, 'Date');

            for (var columnQuantityTopAssigned = 3; columnQuantityTopAssigned <= 6; columnQuantityTopAssigned++) {
                SIStatusGrid.columnHeaders.setCellData(0, columnQuantityTopAssigned, 'Amount');
            }

            SIStatusGrid.columnHeaders.columns[7].allowMerging = true;
            SIStatusGrid.columnHeaders.setCellData(0, 7, 'Pick');

            SIStatusGrid.columnHeaders.columns[8].allowMerging = true;
            SIStatusGrid.columnHeaders.setCellData(0, 8, 'Balance');
        }

        function btnOnclickApplyAllSI() {
            $('#applyAllAmount').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById('cmdConfirmApplyAllAmount').innerHTML = "<i class='fa fa-check'></i> Apply";
            $("#cmdConfirmApplyAllAmount").prop("disabled", false);
            $("#cmdCloseButtonApplyAllAmount").prop("disabled", false);
        }

        function btnConfrimApplyAllAmount_OnClick() {
            document.getElementById('cmdConfirmApplyAllAmount').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Applying";
            $("#cmdConfirmApplyAllAmount").prop("disabled", true);
            $("#cmdCloseButtonApplyAllAmount").prop("disabled", true);

            for (var i = 0; i < saleInvoiceStatus.items.length; i++) {
                var item = saleInvoiceStatus.items[i];
                if (item.Balance > 0) {
                    var salesInvoiceItemObject = new Object();
                    salesInvoiceItemObject.BranchId = item.BranchId;
                    salesInvoiceItemObject.AccountId = item.AccountId;
                    salesInvoiceItemObject.CustomerId = item.CustomerId;
                    salesInvoiceItemObject.Id = item.Id;
                    salesInvoiceItemObject.DocumentReference = item.DocumentReference;
                    salesInvoiceItemObject.Amount = item.Balance;
                    var salesInvoiceItemObjects = JSON.stringify(salesInvoiceItemObject);

                    $.ajax({
                        type: "POST",
                        url: '/api/collectionLine/applyAR/' + getParam("id"),
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: salesInvoiceItemObjects,
                        statusCode: {
                            200: function () {
                                toastr.success("Apply Successful");
                                $('#applyAllAmount').modal('hide');
                                $('#SalesStatus').modal('hide');
                                refreshCollectionLineFlexGrid();
                            },
                            404: function () {
                                toastr.error("Not Found");
                                $('#applyAllAmount').modal('hide');
                                $('#SalesStatus').modal('hide');
                                document.getElementById('cmdConfirmApplyAllAmount').innerHTML = "<i class='fa fa-check'></i> Apply";
                                $("#cmdConfirmApplyAllAmount").prop("disabled", false);
                                $("#cmdCloseButtonApplyAllAmount").prop("disabled", false);
                            },
                            400: function () {
                                toastr.error("Bad Request");
                                document.getElementById('cmdConfirmApplyAllAmount').innerHTML = "<i class='fa fa-check'></i> Apply";
                                $("#cmdConfirmApplyAllAmount").prop("disabled", false);
                                $("#cmdCloseButtonApplyAllAmount").prop("disabled", false);
                            }
                        }
                    });
                } else {
                    $('#applyAllAmount').modal('hide');
                    document.getElementById('cmdConfirmApplyAllAmount').innerHTML = "<i class='fa fa-check'></i> Apply";
                    $("#cmdConfirmApplyAllAmount").prop("disabled", false);
                    $("#cmdCloseButtonApplyAllAmount").prop("disabled", false);
                }
            }
        }

        // ========
        // Advances
        // ========
        function collectionAdvances_OnClick() {
            $('#customerAdvances').modal({
                show: true,
                backdrop: 'static'
            });

            $('#loadingSIAdvances').show();
            document.getElementById("loadingSIAdvances").innerHTML = "<b><i class='fa fa-spinner fa-spin'></i></b>";
            $('#AdvancesGrid').hide();

            setTimeout(function () {
                createSIAdvances();
            }, 500);
        }

        function getJournalByArticleId() {
            var journalAdvances = new wijmo.collections.ObservableArray;
            $.ajax({
                url: '/api/listJournalByCustomerAdvancesAccountIdByArticleId/' + cboORCustomer.selectedValue,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (journalResults) {
                    if (journalResults.length > 0) {
                        for (i = 0; i < journalResults.length; i++) {
                            journalAdvances.push({
                                Id: journalResults[i]["Id"],
                                JournalDate: journalResults[i]["JournalDate"],
                                BranchId: journalResults[i]["BranchId"],
                                Branch: journalResults[i]["Branch"],
                                AccountId: journalResults[i]["AccountId"],
                                Account: journalResults[i]["Account"],
                                AccountCode: journalResults[i]["AccountCode"],
                                ArticleId: journalResults[i]["ArticleId"],
                                Article: journalResults[i]["Article"],
                                Particulars: journalResults[i]["Particulars"],
                                DebitAmount: journalResults[i]["DebitAmount"],
                                CreditAmount: journalResults[i]["CreditAmount"],
                                Balance: journalResults[i]["DebitAmount"] - journalResults[i]["CreditAmount"],
                                ORId: journalResults[i]["ORId"],
                                CVId: journalResults[i]["CVId"],
                                JVId: journalResults[i]["JVId"],
                                RRId: journalResults[i]["RRId"],
                                SIId: journalResults[i]["SIId"],
                                INId: journalResults[i]["INId"],
                                OTId: journalResults[i]["OTId"],
                                STId: journalResults[i]["STId"],
                                DocumentReference: journalResults[i]["DocumentReference"],
                                APRRId: journalResults[i]["APRRId"],
                                ARSIId: journalResults[i]["ARSIId"],
                                Pick: "<button class='btn btn-primary btn-xs' onclick='btnApplyAdvancesOnclick()'><i class='fa fa-hand-o-right'></i> Pick </button>"
                            });
                        }
                    }

                    $('#loadingSIAdvances').hide();
                    $('#AdvancesGrid').show();
                }
            });
            return journalAdvances;
        }

        // ================
        // SI Advances Grid
        // ================
        function createSIAdvances() {
            SIAdvances = new wijmo.collections.CollectionView(getJournalByArticleId());

            SIAdvancesGrid.dispose();
            SIAdvancesGrid = new wijmo.grid.FlexGrid('#SIAdvancesGrid');
            SIAdvancesGrid.initialize({
                columns: [
                    {
                        "header": "Code",
                        "binding": "AccountCode",
                        "allowSorting": true,
                        "width": "1.5*"
                    },
                    {
                        "header": "Account",
                        "binding": "Account",
                        "allowSorting": true,
                        "width": "3*"
                    },
                    {
                        "header": "Article",
                        "binding": "Article",
                        "allowSorting": true,
                        "width": "3*"
                    },
                    {
                        "header": "Debit",
                        "binding": "DebitAmount",
                        "allowSorting": true,
                        "width": "2*"
                    },
                    {
                        "header": "Credit",
                        "binding": "CreditAmount",
                        "allowSorting": true,
                        "width": "2*"
                    },
                    {
                        "header": "Balance",
                        "binding": "Balance",
                        "allowSorting": true,
                        "width": "2*"
                    },
                    {
                        "header": "Apply",
                        "binding": "Pick",
                        "allowSorting": true,
                        "width": 70,
                        "align": "center",
                        "allowResizing": false,
                        "allowSorting": false,
                        "isContentHtml": true
                    },
                ],
                autoGenerateColumns: false,
                itemsSource: SIAdvances,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            SIAdvancesGrid.trackChanges = true;
        }

        function btnApplyAdvancesOnclick() {
            $('#applyAdvances').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById('cmdConfirmApplyAdvances').innerHTML = "<i class='fa fa-check'></i> Apply";
            $("#cmdConfirmApplyAdvances").prop("disabled", false);
            $("#cmdCloseButtonApplyAdvances").prop("disabled", false);
        }

        function btnConfrimApplyAdvances_OnClick() {
            document.getElementById('cmdConfirmApplyAdvances').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Applying";
            $("#cmdConfirmApplyAdvances").prop("disabled", true);
            $("#cmdCloseButtonApplyAdvances").prop("disabled", true);

            SIAdvances.editItem(SIAdvances.currentItem);
            var ArticleId = SIAdvances.currentEditItem.ArticleId;

            $.ajax({
                type: "POST",
                url: '/api/collectionLine/applyAdvances/ByArticleId/' + ArticleId + '/' + getParam("id"),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Apply Successful");
                        $('#applyAdvances').modal('hide');
                        refreshCollectionLineFlexGrid();
                    },
                    404: function () {
                        toastr.error("Not Found");
                        $('#applyAdvances').modal('hide');
                        document.getElementById('cmdConfirmApplyAdvances').innerHTML = "<i class='fa fa-check'></i> Apply";
                        $("#cmdConfirmApplyAdvances").prop("disabled", false);
                        $("#cmdCloseButtonApplyAdvances").prop("disabled", false);
                    },
                    400: function () {
                        toastr.error("Bad Request");
                        $('#applyAdvances').modal('hide');
                        document.getElementById('cmdConfirmApplyAdvances').innerHTML = "<i class='fa fa-check'></i> Apply";
                        $("#cmdConfirmApplyAdvances").prop("disabled", false);
                        $("#cmdCloseButtonApplyAdvances").prop("disabled", false);
                    }
                }
            });
        }

        // ===========
        // OnLoad Page
        // ===========
        $(document).ready(function () {
            getBranchesForComboBox();

            $(document).on('show.bs.modal', '.modal', function (event) {
                var zIndex = 1040 + (10 * $('.modal:visible').length);
                $(this).css('z-index', zIndex);
                setTimeout(function () {
                    $('.modal-backdrop').not('.modal-stack').css('z-index', zIndex - 1).addClass('modal-stack');
                }, 0);
            });

            $(document).on('hidden.bs.modal', '.modal', function () {
                $('.modal:visible').length && $(document.body).addClass('modal-open');
            });
        });
    </script>
    <script type="text/javascript">
        var cboUserBranches = new wijmo.input.ComboBox('#cboUserBranches');
        function getUserBranches() {
            $("#loadingUserBranches").show();
            document.getElementById("loadingUserBranches").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#userBranchContent").hide();

            $('#userBranchesModal').modal({ show: true, backdrop: 'static' });

            document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
            $("#updateUserBranch").prop("disabled", false);
            $("#closeUserBranch").prop("disabled", false);

            var userBranchesObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/userBranch/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (userBranchesResults) {
                    if (userBranchesResults.length > 0) {
                        for (i = 0; i < userBranchesResults.length; i++) {
                            userBranchesObservableArray.push({
                                BranchId: userBranchesResults[i]["BranchId"],
                                Branch: userBranchesResults[i]["Branch"]
                            });
                        }
                    }

                    var currentBranch = "@ViewData["BranchId"]";
                    cboUserBranches.dispose();
                    cboUserBranches = new wijmo.input.ComboBox('#cboUserBranches', {
                        isEditable: false,
                        placeholder: "Select Branches",
                        itemsSource: userBranchesObservableArray,
                        displayMemberPath: "Branch",
                        selectedValuePath: "BranchId",
                        selectedValue: currentBranch
                    });

                    setTimeout(function () {
                        $("#loadingUserBranches").hide();
                        $("#userBranchContent").show();
                    }, 500)
                }
            });
        }

        function updateUserBranchOnclick() {
            document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Updating";
            $("#updateUserBranch").prop("disabled", true);
            $("#closeUserBranch").prop("disabled", true);

            var userBranchObject = new Object();
            userBranchObject.BranchId = cboUserBranches.selectedValue;
            var userBranchData = JSON.stringify(userBranchObject);

            $.ajax({
                type: "PUT",
                url: '/api/userBranch/update',
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: userBranchData,
                statusCode: {
                    200: function () {
                        toastr.success("Update Successful");
                        window.setTimeout(function () {
                            location.reload()
                        }, 1000);
                    },
                    404: function () {
                        toastr.error("Not Found");
                        document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
                        $("#updateUserBranch").prop("disabled", false);
                        $("#closeUserBranch").prop("disabled", false);
                    },
                    500: function () {
                        toastr.error("Bad Request");
                        document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
                        $("#updateUserBranch").prop("disabled", false);
                        $("#closeUserBranch").prop("disabled", false);
                    }
                }
            });
        }
    </script>
    <script type="text/javascript">
        var slideLeft = new Menu({
            wrapper: '#o-wrapper',
            type: 'slide-left',
            menuOpenerClass: '.c-button',
            maskId: '#c-mask'
        });

        var slideLeftBtn = document.querySelector('#c-button--slide-left');

        slideLeftBtn.addEventListener('click', function (e) {
            e.preventDefault;
            slideLeft.open();
        });
    </script>
</body>
</html>