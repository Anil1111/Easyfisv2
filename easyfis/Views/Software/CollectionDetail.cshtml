@{
    var userId = ViewData["UserId"];
}
<!DOCTYPE html>
<html>
<head>
    <!-- Meta -->
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">

    <!-- Title of the Page -->
    <link rel="shortcut icon" href="~/Images/icon/easyfislogomini.ico">
    <title>Collection Detail</title>

    <!-- CSS StyleSheets-->
    @Styles.Render("~/Content/Software-css")
</head>
<body class="hold-transition skin-blue fixed sidebar-mini">
    <div class="wrapper">
        @Html.Partial("_SoftwareHeader")
        @Html.Partial("_SoftwareSideBarMenu")

        <div class="content-wrapper">
            <section class="content-header">
                <h1>
                    Collection Detail
                    <small><i class="fa fa-building"></i> @ViewData["Company"] / @ViewData["Branch"]</small>
                </h1>
                <ol class="breadcrumb">
                    <li><a href="/Software"> Dashboard</a></li>
                    <li><a href="/Software/Collection"> Collection </a></li>
                    <li> Collection Detail </li>
                </ol>
            </section>

            <section class="content">
                <div class="box box-default">
                    <div class="box-body">
                        <div class="panel panel-default">
                            <div class="panel-heading">
                                <div class="row">
                                    <div class="col-md-12" align="right">
                                        <button class="btn btn-primary btn-sm" id="cmdCollectionJournal" onclick="btnJournalDetail_OnClick()"><i class="fa fa-book"></i> Journal</button>
                                        <button class="btn btn-primary btn-sm" id="cmdCollectionSaveLock" onclick="btnCollectionSaveLock_OnClick()"><i class="fa fa-lock"></i> Lock</button>
                                        <button class="btn btn-primary btn-sm" id="cmdCollectionSave" onclick="btnCollectionSave_OnClick()"><i class="fa fa-save"></i> Save</button>
                                        <button class="btn btn-primary btn-sm" id="cmdCollectionEdit" onclick="btnCollectionEdit_OnClick()"><i class="fa fa-unlock"></i> Unlock</button>
                                        <button class="btn btn-primary btn-sm" id="cmdCollectionPrint" onclick="btnCollectionPrint_OnClick()"><i class="fa fa-print"></i> Print</button>
                                        <button onclick="window.location.href = '/Software/Collection'" class="btn btn-danger btn-sm" id="cmdCollectionClose"><i class="fa fa-times"></i> Close</button>
                                    </div>
                                </div>
                            </div>
                            <div class="panel-body">
                                <div class="well">
                                    <form class="form-horizontal" role="form">
                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="form-group">
                                                    <label class="control-label col-sm-4">Branch</label>
                                                    <div class="col-sm-8">
                                                        <div class="comboBox-wide" id="collection_Branch"></div>

                                                        <input type="hidden" id="collection_Branch_data" class="requiredCollection" />
                                                        <input type="hidden" id="collection_Branch_selectedValue" />
                                                    </div>
                                                </div>
                                                <div class="form-group">
                                                    <label class="control-label col-sm-4">OR Number</label>
                                                    <div class="col-sm-8">
                                                        <input type="text" class="form-control input-30 input-sm requiredCollection" id="collection_ORNumber_Display" />
                                                        <input type="hidden" id="collection_ORNumber" />
                                                    </div>
                                                </div>
                                                <div class="form-group">
                                                    <label class="control-label col-sm-4">OR Date</label>
                                                    <div class="col-sm-8">
                                                        <div class="input-50" id="collection_ORDate"></div>
                                                        <input type="hidden" id="collection_ORDate_data" class="requiredCollection" />
                                                    </div>
                                                </div>
                                                <div class="form-group">
                                                    <label class="control-label col-sm-4">Manual OR Number</label>
                                                    <div class="col-sm-8">
                                                        <input type="text" class="form-control input-sm requiredCollection" id="collection_ManualORNumber" placeholder="Manual OR Number" />
                                                    </div>
                                                </div>
                                                <div class="form-group">
                                                    <label class="control-label col-sm-4">Customer</label>
                                                    <div class="col-sm-8">
                                                        <div class="input-group">
                                                            <div class="comboBox-wide" id="collection_Customer"></div>

                                                            <input type="hidden" id="collection_Customer_data" class="requiredCollection" />
                                                            <input type="hidden" id="collection_Customer_selectedValue" />
                                                            <div class="input-group-btn">
                                                                <button type="button" class=" btn btn-primary btn-sm" id="cmdAR" onclick="collectionAR_OnClick()">AR</button>
                                                                <button type="button" class="btn btn-primary btn-sm" id="cmdAdvances" onclick="collectionAdvances_OnClick()">Advances</button>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="form-group">
                                                    <label class="control-label col-sm-4">Particulars</label>
                                                    <div class="col-sm-8">
                                                        <textarea class="form-control textarea-custom requiredCollection" id="collection_Particulars" placeholder="Particulars"></textarea>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <div class="form-group">
                                                    <label class="control-label col-sm-4">Prepared by</label>
                                                    <div class="col-sm-8">
                                                        <div class="comboBox-wide" id="collection_PreparedBy"></div>

                                                        <input type="hidden" id="collection_PreparedBy_data" class="requiredCollection" />
                                                        <input type="hidden" id="collection_PreparedBy_selectedValue" />
                                                        <input type="hidden" id="userId_data" value="@userId" />
                                                    </div>
                                                </div>
                                                <div class="form-group">
                                                    <label class="control-label col-sm-4">Checked by</label>
                                                    <div class="col-sm-8">
                                                        <div class="comboBox-wide" id="collection_CheckedBy"></div>

                                                        <input type="hidden" id="collection_CheckedBy_data" class="requiredCollection" />
                                                        <input type="hidden" id="collection_CheckedBy_selectedValue" />
                                                    </div>
                                                </div>
                                                <div class="form-group">
                                                    <label class="control-label col-sm-4">Approved by</label>
                                                    <div class="col-sm-8">
                                                        <div class="comboBox-wide" id="collection_ApprovedBy"></div>

                                                        <input type="hidden" id="collection_ApprovedBy_data" class="requiredCollection" />
                                                        <input type="hidden" id="collection_ApprovedBy_selectedValue" />
                                                    </div>
                                                </div>
                                                @*<div class="form-group">
                                                    <label class="control-label col-sm-4">Lock</label>
                                                    <div class="col-sm-8">
                                                        <input type="checkbox" id="collection_Lock">
                                                    </div>
                                                </div>*@
                                                <div class="form-group">
                                                    <div class="col-sm-4"></div>
                                                    <div class="col-sm-8">
                                                        <input type="hidden" id="collection_IsLocked">
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </form>
                                </div>
                            </div>
                        </div>
                        <br />
                        <ul class="nav nav-tabs" role="tablist" id="myTab">
                            <li role="presentation" class="active"><a data-toggle="tab" href="#CollectionLine" id="itemTabId">Collection Line</a></li>
                        </ul>
                        <br />
                        <div class="tab-content">
                            <div id="CollectionLine" class="tab-pane fade in active">
                                <div class="panel panel-default">
                                    <div class="panel-heading">
                                        <div class="row">
                                            <div class="col-lg-12">
                                                <button type="submit" class="btn btn-primary pull-right btn-sm" id="btnAddCollectionLine" onclick="cmdAddCollectionLineButton_OnClick()"><i class="fa fa-plus"></i> Add</button>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="panel-body">
                                        <div class="row" align="left">
                                            <div class="col-lg-12">
                                                <div id="CollectionLineGrid" class="grid" align="left"></div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </section>
        </div>

        @Html.Partial("_SoftwareFooter")
    </div>

    <!-- Sales for Collection Modal -->
    <div class="modal fade" id="SalesStatus" role="dialog">
        <div class="modal-dialog modal-lg">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title" id="POStatusModalLabel">Sales Invoice Status</h4>
                </div>
                <div class="modal-body">
                    <div class="panel panel-default" id="statusGrid">
                        <div class="panel-heading">
                            <div class="input-group input-group-sm input-50">
                                <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                <input type="text" class="form-control input-sm" id="SIStatusFilter" placeholder="Search">
                            </div>
                        </div>
                        <div class="panel-body">
                            <div id="salesInvoiceStatusGrid" class="grid" align="left"></div>
                        </div>
                    </div>
                    <center>
                        <span id="loadingSIStatus"></span>
                    </center>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary btn-sm" id="btnIdApplyAllSI" onclick="btnOnclickApplyAllSI()"><i class="fa fa-check"></i> Apply</button>
                    <button type="button" id="cmdPOStatusCloseButton" class="btn btn-danger btn-sm" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <!-- customer Advances for Collection Modal -->
    <div class="modal fade" id="customerAdvances" role="dialog">
        <div class="modal-dialog modal-lg">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title" id="POStatusModalLabel">Customer Advances</h4>
                </div>
                <div class="modal-body">
                    <div class="panel panel-default" id="AdvancesGrid">
                        <div class="panel-body">
                            <div id="SIAdvancesGrid" class="grid statusGrid" align="left"></div>
                        </div>
                    </div>
                    <center>
                        <span id="loadingSIAdvances"></span>
                    </center>
                </div>
                <div class="modal-footer">
                    <!--tton class="btn btn-primary btn-sm" id="cmdSaveJournalVoucherLineButton" onclick="cmdJournalVoucherLineSaveButton_OnClick()"><i class="fa fa-save"></i> Save</button>-->
                    <button type="button" id="cmdPOStatusCloseButton" class="btn btn-danger btn-sm" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Collection Line Edit Detail -->
    <div class="modal fade" id="collectionLineEdit" role="dialog">
        <div class="modal-dialog">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title" id="collectionLineModalLabel">Collection Line Detail</h4>
                </div>
                <div class="modal-body">
                    <form id="collectionLineDetailForm">
                        <input type="hidden" id="collectionLine_Id" />
                        <dl class="dl-horizontal">
                            <dt>Branch</dt>
                            <dd>
                                <div class="comboBox-wide" id="collectionLine_branch"></div>

                                <input type="hidden" id="collectionLine_branch_data" class="requiredCollectionLine">
                                <input type="hidden" id="collectionLine_branch_selectedValue" />
                            </dd>
                            <dt>Account</dt>
                            <dd>
                                <div class="input-30" id="collectionLine_accountCode"></div>
                                <div class="input-68" id="collectionLine_account"></div>

                                <input type="hidden" id="collectionLine_account_data" class="requiredCollectionLine">
                                <input type="hidden" id="collectionLine_accountCode_selectedValue" />
                                <input type="hidden" id="collectionLine_account_selectedValue" />
                            </dd>
                            <dt>Article</dt>
                            <dd>
                                <div class="comboBox-wide" id="collectionLine_article"></div>

                                <input type="hidden" id="collectionLine_article_data" class="requiredCollectionLine">
                                <input type="hidden" id="collectionLine_article_selectedValue" />
                            </dd>
                            <dt>SI No.</dt>
                            <dd>
                                <div class="comboBox-wide" id="collectionLine_SINo"></div>

                                <input type="hidden" id="collectionLine_SINo_data" />
                                <input type="hidden" id="collectionLine_SINo_selectedValue" />
                            </dd>
                            <dt>Particulars</dt>
                            <dd><textarea class="form-control textarea-custom requiredCollectionLine" id="collectionLine_Particulars" placeholder="Particulars"></textarea></dd>
                            <dt>Amount</dt>
                            <dd><input class="form-control input-50 numberField input-sm requiredCollectionLine" id="collectionLine_amount" placeholder="0.00" /></dd>
                            <dt>Pay Type</dt>
                            <dd>
                                <div class="comboBox-wide" id="collectionLine_payType"></div>

                                <input type="hidden" id="collectionLine_payType_data" class="requiredCollectionLine">
                                <input type="hidden" id="collectionLine_payType_selectedValue" />
                            </dd>
                            <dt>Check No.</dt>
                            <dd><input type="text" class="form-control input-sm requiredCollectionLine" id="collectionLine_checkNo" /></dd>
                            <dt>Check Date</dt>
                            <dd>
                                <div class="input-50" id="collectionLine_checkDate"></div>

                                <input type="hidden" class="requiredCollectionLine" id="collectionLine_checkDate_data" />
                            </dd>
                            <dt>Check Bank</dt>
                            <dd><input type="text" class="form-control input-sm requiredCollectionLine" id="collectionLine_checkBank" placeholder="Check Bank" /></dd>
                            <dt>Depository Bank</dt>
                            <dd>
                                <div class="comboBox-wide" id="collectionLine_depositoryBank"></div>

                                <input type="hidden" id="collectionLine_depositoryBank_data" class="requiredCollectionLine">
                                <input type="hidden" id="collectionLine_depositoryBank_selectedValue" />
                            </dd>
                            <dt>Clear</dt>
                            <dd><input type="checkbox" id="collectionLine_Clear" /></dd>
                        </dl>
                    </form>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary btn-sm" id="cmdSaveCollectionLineButton" onclick="cmdCollectionLineSaveButton_OnClick()"><i class="fa fa-save"></i> Save</button>
                    <button id="cmdCollectionLineDetailCloseButton" class="btn btn-danger btn-sm" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- ============== -->
    <!-- Journal Detail -->
    <!-- ============== -->
    <div class="modal fade" id="journalDetail" role="dialog">
        <div class="modal-dialog modal-lg">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title" id="journalModalLabel"> Journal</h4>
                </div>
                <div class="modal-body">
                    <center>
                        <h4>
                            <span id="loadingJournalGridList"></span>
                        </h4>
                    </center>
                    <div id="journal_Content">
                        <div class="row" align="left">
                            <div class="col-lg-12">
                                <div id="journalListGrid" class="grid" align="left"></div>
                            </div>
                        </div>
                        <hr />
                        <div class="row">
                            <div class="col-md-6"></div>
                            <div class="col-md-6" align="right">
                                <table>
                                    <tr>
                                        <td align="right"> <b>Total Debit:</b> </td>
                                        <td style="padding-left: 35px"></td>
                                        <td> <span id="totalDebitInJournal"></span></td>
                                    </tr>
                                    <tr>
                                        <td align="right"> <b>Total Credit:</b> </td>
                                        <td style="padding-left: 35px"></td>
                                        <td> <span id="totalCreditInJournal"></span></td>
                                    </tr>
                                    <tr>
                                        <td style="padding: 10px"> </td>
                                        <td style="padding: 10px"> </td>
                                        <td style="padding: 10px"> </td>
                                    </tr>
                                    <tr>
                                        <td align="right"> <b>Variance: </b> </td>
                                        <td style="padding-left: 35px"></td>
                                        <td> <span id="variance"></span></td>
                                    </tr>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button id="cmdJournalDetailCloseButton" class="btn btn-danger btn-sm" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Collection Line Delete Modal Confirmation -->
    <div class="modal fade" id="deleteCollectionLineConfirm" role="dialog">
        <div class="modal-dialog modal-sm">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Delete Collection Line <i class="fa fa-trash"></i></h4>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete this?
                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger btn-sm" id="cmdConfirmDeleteCollectionLine" onclick="cmdCollectionLineConfirmDeleteButton_OnClick()"><i class="fa fa-trash"></i> Delete</button>
                    <button id="cmdConfirmDeleteCollectionLineCloseButton" class="btn btn-primary btn-sm" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <!-- collection apply amount -->
    <div class="modal fade" id="applyAmount" role="dialog">
        <div class="modal-dialog modal-sm">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Apply <i class="fa fa-check-square-o"></i></h4>
                </div>
                <div class="modal-body">
                    Apply Amount?
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary btn-sm" id="cmdConfirmApplyAmount" onclick="btnConfrimApplyAmountOnClick()"><i class="fa fa-check"></i> Apply</button>
                    <button class="btn btn-danger btn-sm" id="cmdCloseButtonApplyAmount" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <!-- collection apply all amount -->
    <div class="modal fade" id="applyAllAmount" role="dialog">
        <div class="modal-dialog modal-sm">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Apply <i class="fa fa-check"></i></h4>
                </div>
                <div class="modal-body">
                    Apply?
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary btn-sm" id="cmdConfirmApplyAllAmount" onclick="btnConfrimApplyAllAmount_OnClick()"><i class="fa fa-check"></i> Apply</button>
                    <button class="btn btn-danger btn-sm" id="cmdCloseButtonApplyAllAmount" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <!-- collection apply advances -->
    <div class="modal fade" id="applyAdvances" role="dialog">
        <div class="modal-dialog modal-sm">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Apply <i class="fa fa-check-square-o"></i></h4>
                </div>
                <div class="modal-body">
                    Apply Advances?
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary btn-sm" id="cmdConfirmApplyAdvances" onclick="btnConfrimApplyAdvances_OnClick()"><i class="fa fa-check-square-o"></i> Apply</button>
                    <button class="btn btn-danger btn-sm" id="cmdCloseButtonApplyAdvances" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>


    @Scripts.Render("~/Scripts/Software-js")
    <script type="text/javascript">
        // ================
        // Global Variables
        // ================
        var collections;
        var branches;
        var customers;
        var ORDate;
        var cboBranch;
        var cboCustomer;
        var cboPreparedBy;
        var collectionLines;
        var collectionLineGrid;
        var btnFirstPageGridCollectionGrid;
        var btnPreviousPageGridCollectionGrid;
        var btnNextPageGridCollectionGrid;
        var btnLastPageGridCollectionGrid;
        var btnCurrentPageGridCollectionGrid;
        var collectionLineBranches;
        var cboCollectionBranch;
        var collectionLinePayTypes;
        var cboCollectionLinePayType;
        var collectionLineSales;
        var cboCollectionLineSI;
        var collectionLineAccounts;
        var cboCollectionLineAccountCode;
        var cboCollectionLineAccount;
        var collectionLineArticles;
        var cboCollectionLineArticle;
        var collectionArticleBanks;
        var cboCollectionArticleBank;
        var CheckedDate;
        var SIStatusGrid;
        var SIAdvancesGrid;
        var journalAdvances;
        var saleInvoiceStatus;

        function btnApplyAmountOnclick() {
            $('#applyAmount').modal({
                show: true,
                backdrop: 'static'
            });
        }

        function btnConfrimApplyAmountOnClick() {
            $("#cmdConfirmApplyAmount").prop("disabled", true);
            $("#cmdCloseButtonApplyAmount").prop("disabled", true);

            saleInvoiceStatus.editItem(saleInvoiceStatus.currentItem);
            var saleInvoiceStatusId = saleInvoiceStatus.currentEditItem.Id;

            $.ajax({
                type: "POST",
                url: '/api/collectionLine/applyAR/BySalesId/' + saleInvoiceStatusId + '/' + getParam("CollectonId"),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Applied");
                        $("#cmdConfirmApplyAmount").prop("disabled", false);
                        $("#cmdCloseButtonApplyAmount").prop("disabled", false);

                        collectionLines = new wijmo.collections.CollectionView(getCollectionLines());

                        // Flex Grid for Purchase Collection Line
                        collectionLineGrid.itemsSource = collectionLines;
                        collectionLineGrid.trackChanges = true;

                        $('#applyAmount').modal('hide');

                        saleInvoiceStatus = new wijmo.collections.CollectionView(getSalesInvoiceBySupplierByBalance());

                        // Flex Grid for Purchase Disbursement Line
                        SIStatusGrid.itemsSource = saleInvoiceStatus;
                        SIStatusGrid.trackChanges = true;
                        //setTimeout(function () {
                        //    $('#SalesStatus').modal('hide');
                        //}, 200);
                    },
                    404: function () {
                        toastr.error("Not Found");
                        $("#cmdConfirmApplyAmount").prop("disabled", false);
                        $("#cmdCloseButtonApplyAmount").prop("disabled", false);
                    },
                    400: function () {
                        toastr.error("Bad Request");
                        $("#cmdConfirmApplyAmount").prop("disabled", false);
                        $("#cmdCloseButtonApplyAmount").prop("disabled", false);
                    }
                }
            });
        }

        function btnOnclickApplyAllSI() {
            $('#applyAllAmount').modal({
                show: true,
                backdrop: 'static'
            });

            $("#cmdConfirmApplyAllAmount").prop("disabled", false);
            $("#cmdCloseButtonApplyAllAmount").prop("disabled", false);
        }

        function btnConfrimApplyAllAmount_OnClick() {
            $("#cmdConfirmApplyAllAmount").prop("disabled", true);
            $("#cmdCloseButtonApplyAllAmount").prop("disabled", true);

            for (var i = 0; i < saleInvoiceStatus.items.length; i++) {
                var item = saleInvoiceStatus.items[i];

                if(item.Balance > 0) {
                    var salesInvoiceItemObject = new Object();
                    salesInvoiceItemObject.BranchId = item.BranchId;
                    salesInvoiceItemObject.AccountId = item.AccountId;
                    salesInvoiceItemObject.CustomerId = item.CustomerId;
                    salesInvoiceItemObject.Id = item.Id;
                    salesInvoiceItemObject.DocumentReference = item.DocumentReference;
                    salesInvoiceItemObject.Amount = item.Balance;
                    var salesInvoiceItemObjects = JSON.stringify(salesInvoiceItemObject);

                    $.ajax({
                        type: "POST",
                        url: '/api/collectionLine/applyAR/' + getParam("CollectonId"),
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: salesInvoiceItemObjects,
                        statusCode: {
                            200: function () {
                                toastr.success("Applied");
                                $("#cmdConfirmApplyAllAmount").prop("disabled", false);
                                $("#cmdCloseButtonApplyAllAmount").prop("disabled", false);

                                collectionLines = new wijmo.collections.CollectionView(getCollectionLines());

                                // Flex Grid for Purchase Collection Line
                                collectionLineGrid.itemsSource = collectionLines;
                                collectionLineGrid.trackChanges = true;

                                $('#applyAllAmount').modal('hide');

                                setTimeout(function () {
                                    $('#SalesStatus').modal('hide');
                                }, 200);
                            },
                            404: function () {
                                toastr.error("Not Found");
                                $("#cmdConfirmApplyAllAmount").prop("disabled", false);
                                $("#cmdCloseButtonApplyAllAmount").prop("disabled", false);
                            },
                            400: function () {
                                toastr.error("Bad Request");
                                $("#cmdConfirmApplyAllAmount").prop("disabled", false);
                                $("#cmdCloseButtonApplyAllAmount").prop("disabled", false);
                            }
                        }
                    });
                } else {
                    $('#applyAllAmount').modal('hide');

                    $("#cmdConfirmApplyAllAmount").prop("disabled", false);
                    $("#cmdCloseButtonApplyAllAmount").prop("disabled", false);
                }
            }
        }

        function btnApplyAdvancesOnclick() {
            $('#applyAdvances').modal({
                show: true,
                backdrop: 'static'
            });
        }

        function btnConfrimApplyAdvances_OnClick() {
            $("#cmdConfirmApplyAdvances").prop("disabled", true);
            $("#cmdCloseButtonApplyAdvances").prop("disabled", true);

            journalAdvances.editItem(journalAdvances.currentItem);
            var ArticleId = journalAdvances.currentEditItem.ArticleId;

            $.ajax({
                type: "POST",
                url: '/api/collectionLine/applyAdvances/ByArticleId/' + ArticleId + '/' + getParam("CollectonId"),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Applied");
                        $("#cmdConfirmApplyAdvances").prop("disabled", false);
                        $("#cmdCloseButtonApplyAdvances").prop("disabled", false);

                        collectionLines = new wijmo.collections.CollectionView(getCollectionLines());

                        // Flex Grid for Purchase Collection Line
                        collectionLineGrid.itemsSource = collectionLines;
                        collectionLineGrid.trackChanges = true;

                        $('#applyAdvances').modal('hide');

                        journalAdvances = new wijmo.collections.CollectionView(getJournalByArticleId());

                        // Flex Grid for Purchase Disbursement Line
                        SIAdvancesGrid.itemsSource = journalAdvances;
                        SIAdvancesGrid.trackChanges = true;
                        //setTimeout(function () {
                        //    $('#customerAdvances').modal('hide');
                        //}, 200);
                    },
                    404: function () {
                        toastr.error("Not Found");
                        $("#cmdConfirmApplyAdvances").prop("disabled", false);
                        $("#cmdCloseButtonApplyAdvances").prop("disabled", false);
                    },
                    400: function () {
                        toastr.error("Bad Request");
                        $("#cmdConfirmApplyAdvances").prop("disabled", false);
                        $("#cmdCloseButtonApplyAdvances").prop("disabled", false);
                    }
                }
            });

        }

        var returnBool = false;
        var emptyBalance;

        var index;

        var balance = new Array();
        function getSalesInvoiceBySupplierByBalance() {
            var saleInvoiceStatus = new wijmo.collections.ObservableArray;
            $.ajax({
                url: '/api/salesInvoiceByCustomerIdByBalance/' + document.getElementById("collection_Customer_data").value,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (saleInvoiceResults) {
                    if (saleInvoiceResults.length > 0) {

                        var handbool;
                        var icon;
                        var btnColor;

                        for (i = 0; i < saleInvoiceResults.length; i++) {
                            if(emptyBalance == false) {
                                if(matchIndex() == i) {
                                    if(bool() == true) {
                                        if (balance[index] !== 0) {
                                            balance[i] = balance[index];
                                            returnBool = true;
                                        } else {
                                            balance[i] = saleInvoiceResults[i]["BalanceAmount"];
                                            returnBool = false;
                                        }
                                    } else {
                                        balance[i] = 0;
                                    }
                                }
                            } else {
                                balance[i] = 0;
                            }

                            if (typeof balance[i] !== 'undefined' && balance[i] !== 0) {
                                btnColor = "warning";
                                icon = "<i class='fa fa-hand-o-left'></i>";
                                handbool = false;
                            } else {
                                btnColor = "primary";
                                icon = "<i class='fa fa-hand-o-right'></i>";
                                handbool = true;
                                balance[i] = 0;
                            }

                            saleInvoiceStatus.push({
                                Id: saleInvoiceResults[i]["Id"],
                                BranchId: saleInvoiceResults[i]["BranchId"],
                                Branch: saleInvoiceResults[i]["Branch"],
                                SINumber: saleInvoiceResults[i]["SINumber"],
                                SIDate: saleInvoiceResults[i]["SIDate"],
                                CustomerId: saleInvoiceResults[i]["CustomerId"],
                                Customer: saleInvoiceResults[i]["Customer"],
                                TermId: saleInvoiceResults[i]["TermId"],
                                Term: saleInvoiceResults[i]["Term"],
                                AccountId: saleInvoiceResults[i]["AccountId"],
                                DocumentReference: saleInvoiceResults[i]["DocumentReference"],
                                ManualSINumber: saleInvoiceResults[i]["ManualSINumber"],
                                Remarks: saleInvoiceResults[i]["Remarks"],
                                Amount: saleInvoiceResults[i]["Amount"],
                                PaidAmount: saleInvoiceResults[i]["PaidAmount"],
                                AdjustmentAmount: saleInvoiceResults[i]["AdjustmentAmount"],
                                BalanceAmount: saleInvoiceResults[i]["BalanceAmount"],
                                Balance: balance[i],
                                Pick: "<button class='btn btn-"+ btnColor +" btn-xs' onclick='btnApplySIStatusOnclick("+ i + "," + handbool +")'>" + icon + "</button>"
                            });
                        }
                    }
                }
            });
            return saleInvoiceStatus;
        }

        function bool() {
            return returnBool;
        }

        function matchIndex() {
            return index;
        }

        function btnApplySIStatusOnclick(i, handbool) {
            if(handbool == true) {
                returnBool = true;
            } else {
                returnBool = false;
            }

            index = i;
            emptyBalance = false;

            saleInvoiceStatus = new wijmo.collections.CollectionView(getSalesInvoiceBySupplierByBalance());

            SIStatusGrid.itemsSource = saleInvoiceStatus;
            SIStatusGrid.trackChanges = true;
        }


        // =============================
        // Receiving Receipt Status Grid
        // =============================
        function getReceivingStatusGrid() {
            saleInvoiceStatus = new wijmo.collections.CollectionView(getSalesInvoiceBySupplierByBalance());
            saleInvoiceStatus.canFilter = true;

            var filterText = '';
            $('#SIStatusFilter').keyup(function () {
                filterText = this.value.toLowerCase();
                saleInvoiceStatus.refresh();
            });

            saleInvoiceStatus.filter = function (item) {
                return !filterText || (item.SINumber.toLowerCase().indexOf(filterText) > -1)
                || (item.ManualSINumber.toLowerCase().indexOf(filterText) > -1);
            }

            SIStatusGrid = new wijmo.grid.FlexGrid('#salesInvoiceStatusGrid');
            SIStatusGrid.initialize({
                columns: [
                            {
                                "header": "SI Number",
                                "binding": "SINumber",
                                "allowSorting": true,
                                "isReadOnly": true,
                                "width": "2*"
                            },
                            {
                                "header": "Manual SI No",
                                "binding": "ManualSINumber",
                                "allowSorting": true,
                                "isReadOnly": true,
                                "width": "2.3*"
                            },
                            {
                                "header": "Date",
                                "binding": "SIDate",
                                "allowSorting": true,
                                "isReadOnly": true,
                                "width": "2*",
                            },
                            {
                                "header": "SI Amount",
                                "binding": "Amount",
                                "allowSorting": true,
                                "isReadOnly": true,
                                "width": "2*"
                            },
                            {
                                "header": "Payments",
                                "binding": "PaidAmount",
                                "allowSorting": true,
                                "isReadOnly": true,
                                "width": "2*"
                            },
                            {
                                "header": "Adjustments",
                                "binding": "AdjustmentAmount",
                                "allowSorting": true,
                                "isReadOnly": true,
                                "width": "2.3*"
                            },
                            {
                                "header": "Balance",
                                "binding": "BalanceAmount",
                                "allowSorting": true,
                                "isReadOnly": true,
                                "width": "2*"
                            },
                            {
                                "header": "Pick",
                                "binding": "Pick",
                                "allowSorting": true,
                                "isReadOnly": true,
                                "width": 50,
                                "align": "center",
                                "allowResizing": false,
                                "allowSorting": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Balance",
                                "binding": "Balance",
                                "allowSorting": true,
                                "isReadOnly": false,
                                "width": "2*"
                            },
                ],
                autoGenerateColumns: false,
                itemsSource: saleInvoiceStatus,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            SIStatusGrid.trackChanges = true;

            // Merge column Headers
            var hr = new wijmo.grid.Row();
            SIStatusGrid.allowMerging = wijmo.grid.AllowMerging.AllHeaders;
            SIStatusGrid.columnHeaders.rows.push(hr);
            SIStatusGrid.columnHeaders.rows[0].allowMerging = true;

            SIStatusGrid.columnHeaders.columns[0].allowMerging = true;
            SIStatusGrid.columnHeaders.setCellData(0, 0, 'SI Number');

            SIStatusGrid.columnHeaders.columns[1].allowMerging = true;
            SIStatusGrid.columnHeaders.setCellData(0, 1, 'Manual SI No');

            SIStatusGrid.columnHeaders.columns[2].allowMerging = true;
            SIStatusGrid.columnHeaders.setCellData(0, 2, 'Date');

            for (var columnQuantityTopAssigned = 3; columnQuantityTopAssigned <= 6; columnQuantityTopAssigned++) {
                SIStatusGrid.columnHeaders.setCellData(0, columnQuantityTopAssigned, 'Amount');
            }

            SIStatusGrid.columnHeaders.columns[7].allowMerging = true;
            SIStatusGrid.columnHeaders.setCellData(0, 7, 'Pick');

            SIStatusGrid.columnHeaders.columns[8].allowMerging = true;
            SIStatusGrid.columnHeaders.setCellData(0, 8, 'Balance');
        }

        function getJournalByArticleId() {
            var journalAdvances = new wijmo.collections.ObservableArray;
            $.ajax({
                url: '/api/listJournalByCustomerAdvancesAccountIdByArticleId/' + document.getElementById("collection_Customer_data").value,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (journalResults) {
                    if (journalResults.length > 0) {
                        for (i = 0; i < journalResults.length; i++) {
                            journalAdvances.push({
                                Id: journalResults[i]["Id"],
                                JournalDate: journalResults[i]["JournalDate"],
                                BranchId: journalResults[i]["BranchId"],
                                Branch: journalResults[i]["Branch"],
                                AccountId: journalResults[i]["AccountId"],
                                Account: journalResults[i]["Account"],
                                AccountCode: journalResults[i]["AccountCode"],
                                ArticleId: journalResults[i]["ArticleId"],
                                Article: journalResults[i]["Article"],
                                Particulars: journalResults[i]["Particulars"],
                                DebitAmount: journalResults[i]["DebitAmount"],
                                CreditAmount: journalResults[i]["CreditAmount"],
                                Balance: journalResults[i]["DebitAmount"] - journalResults[i]["CreditAmount"],
                                ORId: journalResults[i]["ORId"],
                                CVId: journalResults[i]["CVId"],
                                JVId: journalResults[i]["JVId"],
                                RRId: journalResults[i]["RRId"],
                                SIId: journalResults[i]["SIId"],
                                INId: journalResults[i]["INId"],
                                OTId: journalResults[i]["OTId"],
                                STId: journalResults[i]["STId"],
                                DocumentReference: journalResults[i]["DocumentReference"],
                                APRRId: journalResults[i]["APRRId"],
                                ARSIId: journalResults[i]["ARSIId"],
                                Pick: "<button class='btn btn-primary btn-xs' onclick='btnApplyAdvancesOnclick()'><i class='fa fa-hand-o-right'></i> Pick </button>"
                            });
                        }
                    }
                }
            });
            return journalAdvances;
        }

        // ================
        // SI Advances Grid
        // ================
        function getSIAdvancesGrid() {
            var journals = new wijmo.collections.CollectionView(getJournalByArticleId());

            // Flex Grid for Purchase Disbursement Line
            SIAdvancesGrid = new wijmo.grid.FlexGrid('#SIAdvancesGrid');
            SIAdvancesGrid.initialize({
                columns: [
                            {
                                "header": "Code",
                                "binding": "AccountCode",
                                "allowSorting": true,
                                "width": "2*",
                            },
                            {
                                "header": "Account",
                                "binding": "Account",
                                "allowSorting": true,
                                "width": "2*"
                            },
                            {
                                "header": "Article",
                                "binding": "Article",
                                "allowSorting": true,
                                "width": "2*"
                            },
                            {
                                "header": "Debit",
                                "binding": "DebitAmount",
                                "allowSorting": true,
                                "width": "2*"
                            },
                            {
                                "header": "Credit",
                                "binding": "CreditAmount",
                                "allowSorting": true,
                                "width": "2*"
                            },
                            {
                                "header": "Balance",
                                "binding": "Balance",
                                "allowSorting": true,
                                "width": "2*"
                            },
                            {
                                "header": "Pick",
                                "binding": "Pick",
                                "allowSorting": true,
                                "width": "2*",
                                "align": "center",
                                "allowResizing": false,
                                "allowSorting": false,
                                "isContentHtml": true
                            },
                ],
                autoGenerateColumns: false,
                itemsSource: journalAdvances,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            SIAdvancesGrid.trackChanges = true;
        }

        // =======================
        // Get URL Parameter Value
        // =======================
        function getParam(name) {
            name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
            var regexS = "[\\?&]" + name + "=([^&#]*)";
            var regex = new RegExp(regexS);
            var results = regex.exec(window.location.href);
            if (results == null)
                return "";
            else
                return results[1];
        }

        // ====================
        // GET Collection By Id
        // ====================
        function getCollectionById() {
            collections = new wijmo.collections.ObservableArray;
            var collectonId = getParam("CollectonId");
            if (document.location.search.length > 0) {
                NProgress.start();
                $.ajax({
                    url: '/api/collection/' + collectonId,
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    data: {},
                    success: function (Results) {
                        document.getElementById('collection_Branch_data').value = Results.BranchId;
                        document.getElementById('collection_Branch_selectedValue').value = Results.Branch;
                        document.getElementById('collection_ORNumber').value = Results.ORNumber;
                        document.getElementById('collection_ORNumber_Display').value = Results.ORNumber;
                        document.getElementById('collection_ORDate_data').value = Results.ORDate;
                        var ORdate_date = Results.ORDate;
                        ORDate.dispose();
                        ORDate = new wijmo.input.InputDate('#collection_ORDate', {
                            format: 'MM/dd/yyyy',
                            value: new Date(ORdate_date),
                            mask: '99/99/9999',
                            onValueChanged: function () {
                                document.getElementById('collection_ORDate_data').value = this.value.toLocaleDateString();
                            }
                        });
                        document.getElementById('collection_ManualORNumber').value = Results.ManualORNumber;
                        document.getElementById('collection_Customer_data').value = Results.CustomerId;
                        document.getElementById('collection_Customer_selectedValue').value = Results.Customer;
                        document.getElementById('collection_Particulars').value = Results.Particulars;
                        document.getElementById('collection_PreparedBy_data').value = Results.PreparedById;
                        document.getElementById('collection_PreparedBy_selectedValue').value = Results.PreparedBy;
                        document.getElementById('collection_CheckedBy_data').value = Results.CheckedById;
                        document.getElementById('collection_CheckedBy_selectedValue').value = Results.CheckedBy;
                        document.getElementById('collection_ApprovedBy_data').value = Results.ApprovedById;
                        document.getElementById('collection_ApprovedBy_selectedValue').value = Results.ApprovedBy;
                        //document.getElementById('collection_Lock').checked = Results.IsLocked;
                        document.getElementById('createdBy').innerHTML = Results.CreatedBy;
                        document.getElementById('createdDate').innerHTML = Results.CreatedDateTime;
                        document.getElementById('updatedBy').innerHTML = Results.UpdatedBy;
                        document.getElementById('updatedDate').innerHTML = Results.UpdatedDateTime;
                        document.getElementById('collection_IsLocked').value = Results.IsLocked;

                        NProgress.done();

                        if (document.getElementById('collection_IsLocked').value == 'true') {
                            document.getElementById('collection_ManualORNumber').disabled = true;
                            document.getElementById('collection_Particulars').disabled = true;

                            var ORdate_date = Results.ORDate;
                            ORDate.dispose();
                            ORDate = new wijmo.input.InputDate('#collection_ORDate', {
                                disabled: true,
                                format: 'MM/dd/yyyy',
                                value: new Date(ORdate_date),
                                mask: '99/99/9999',
                                onValueChanged: function () {
                                    document.getElementById('collection_ORDate_data').value = this.value.toLocaleDateString();
                                }
                            });

                            $("#cmdCollectionJournal").prop("disabled", false);
                            $("#cmdCollectionSaveLock").prop("disabled", true);
                            $("#cmdCollectionSave").prop("disabled", true);
                            $("#cmdCollectionEdit").prop("disabled", false);
                            $("#cmdCollectionPrint").prop("disabled", false);
                            $("#btnAddCollectionLine").prop("disabled", true);
                            $("#cmdAR").prop("disabled", true);
                            $("#cmdAdvances").prop("disabled", true);

                        } else if (document.getElementById('collection_IsLocked').value == 'false') {
                            document.getElementById('collection_ManualORNumber').disabled = false;
                            document.getElementById('collection_Particulars').disabled = false;

                            var ORdate_date = Results.ORDate;
                            ORDate.dispose();
                            ORDate = new wijmo.input.InputDate('#collection_ORDate', {
                                disabled: false,
                                format: 'MM/dd/yyyy',
                                value: new Date(ORdate_date),
                                mask: '99/99/9999',
                                onValueChanged: function () {
                                    document.getElementById('collection_ORDate_data').value = this.value.toLocaleDateString();
                                }
                            });

                            $("#cmdCollectionJournal").prop("disabled", true);
                            $("#cmdCollectionSaveLock").prop("disabled", false);
                            $("#cmdCollectionSave").prop("disabled", false);
                            $("#cmdCollectionEdit").prop("disabled", true);
                            $("#cmdCollectionPrint").prop("disabled", true);
                            $("#btnAddCollectionLine").prop("disabled", false);
                            $("#cmdAR").prop("disabled", false);
                            $("#cmdAdvances").prop("disabled", false);


                        } else {
                            console.log("Invalid IsLocked");
                        }

                        getBranchesForComboBox();
                        getCustomerForComboBox();
                        getUsersForComboBox();
                    }
                }).fail(function (xhr, textStatus, err) {
                    alert(err);
                });
            } else {
                document.getElementById('collection_ManualORNumber').value = "NA";
                document.getElementById('collection_Particulars').value = "NA";

                NProgress.done();
            }
            return collections;
        }

        // ========================
        // GET Branch for Combo Box
        // ========================
        function getBranchesForComboBox() {
            branches = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listBranch',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            branches.push({
                                BranchId: results[i]["Id"],
                                BranchBranch: results[i]["Branch"]
                            });
                        }

                        var collectonId = getParam("CollectonId");
                        var branchId = @ViewData["BranchId"];
                        if (document.location.search.length == 0) {
                            $.ajax({
                                url: '/api/listBranchById/' + branchId,
                                cache: false,
                                type: 'GET',
                                contentType: 'application/json; charset=utf-8',
                                data: {},
                                success: function (results) {
                                    document.getElementById('collection_Branch_data').value = results.Id;
                                    document.getElementById('collection_Branch_selectedValue').value = results.Branch;

                                    createCboBranch(branches);
                                }
                            });
                        } else {
                            createCboBranch(branches);
                        }
                    }
                }
            }).fail(function (xhr, textStatus, err) {
                alert(err);
            }
                    );

            return branches;
        }

        // ======================
        // Combo Box for Branches
        // ======--==============
        function createCboBranch(branches) {
            var branchCollections = new wijmo.collections.CollectionView(branches);
            var branchList = new Array();
            for (var i = 0; i < branchCollections.items.length; i++) {
                branchList.push(branchCollections.items[i].BranchBranch);
            }

            cboBranch.dispose();
            cboBranch = new wijmo.input.ComboBox('#collection_Branch', {
                disabled: true,
                placeholder: "Select Branch",
                itemsSource: branchList,
                isEditable: false,
                required: false,
                selectedValue: document.getElementById('collection_Branch_selectedValue').value.toString(),
                onSelectedIndexChanged: function () {
                    $("#collection_Branch_data").val(branchCollections.items[this.selectedIndex].BranchId);
                }
            });
        }


        // ==========================
        // GET Customer for Combo Box
        // ==========================
        function getCustomerForComboBox() {
            customers = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listArticleByArticleTypeId/2',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            customers.push({
                                CustomerId: results[i]["Id"],
                                Customer: results[i]["Article"]
                            });
                        }
                        createCboCustomer(customers);
                    }
                }
            }).fail(function (xhr, textStatus, err) {
                alert(err);
            }
                );

            return customers;
        }

        // =======================
        // Combo Box for Customer
        // =======================
        function createCboCustomer(customers) {
            var customerCollection = new wijmo.collections.CollectionView(customers);
            var customerList = new Array();
            for (var i = 0; i < customerCollection.items.length; i++) {
                customerList.push(customerCollection.items[i].Customer);
            }

            var disabled;
            if (customers == 0) {
                disabled = true;
            } else {
                if (document.getElementById('collection_IsLocked').value == 'true') {
                    disabled = true;
                } else {
                    disabled = false;
                }
            }

            cboCustomer.dispose();
            cboCustomer = new wijmo.input.ComboBox('#collection_Customer', {
                disabled: disabled,
                placeholder: "Select Customer",
                itemsSource: customerList,
                isEditable: false,
                selectedValue: document.getElementById('collection_Customer_selectedValue').value.toString(),
                onSelectedIndexChanged: function () {
                    $("#collection_Customer_data").val(customerCollection.items[this.selectedIndex].CustomerId);
                    $("#collection_Customer_selectedValue").val(customerCollection.items[this.selectedIndex].Customer);
                }
            });

            document.getElementById('collection_Customer_data').value = customerCollection.items[cboCustomer.selectedIndex].CustomerId;
            document.getElementById('collection_Customer_selectedValue').value = customerCollection.items[cboCustomer.selectedIndex].Customer;
        }

        // =======================
        // GET Users for Combo Box
        // =======================
        function getUsersForComboBox() {
            users = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listUser',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            users.push({
                                UserId: results[i]["Id"],
                                UserFullName: results[i]["FullName"]
                            });
                        }

                        var collectonId = getParam("CollectonId");
                        if (document.location.search.length == 0) {
                            var userId = document.getElementById('userId_data').value;
                            $.ajax({
                                url: '/api/listByMstUserId/' + userId,
                                cache: false,
                                type: 'GET',
                                contentType: 'application/json; charset=utf-8',
                                data: {},
                                success: function (results) {
                                    if (results.length > 0) {
                                        users.push({
                                            UserId: results.Id,
                                            UserFullName: results.FullName
                                        });
                                    }

                                    document.getElementById('collection_PreparedBy_data').value = results.Id;
                                    document.getElementById('collection_CheckedBy_data').value = results.Id;
                                    document.getElementById('collection_ApprovedBy_data').value = results.Id;

                                    document.getElementById('collection_PreparedBy_selectedValue').value = results.FullName;
                                    document.getElementById('collection_CheckedBy_selectedValue').value = results.FullName;
                                    document.getElementById('collection_ApprovedBy_selectedValue').value = results.FullName;

                                    createCboUserPreparedBy(users);
                                    createCboUserCheckedBy(users);
                                    createCboUserApprovedBy(users);
                                }
                            });
                        } else {
                            createCboUserPreparedBy(users);
                            createCboUserCheckedBy(users);
                            createCboUserApprovedBy(users);
                        }
                    }
                }
            }).fail(function (xhr, textStatus, err) {
                alert(err);
            });
            return users;
        }

        // =================================
        // Combo Box for Users - Prepared By
        // =================================
        function createCboUserPreparedBy(users) {
            var usersCollection = new wijmo.collections.CollectionView(users);
            var userList = new Array();
            for (var i = 0; i < usersCollection.items.length; i++) {
                userList.push(usersCollection.items[i].UserFullName);
            }

            cboPreparedBy.dispose();
            cboPreparedBy = new wijmo.input.ComboBox('#collection_PreparedBy', {
                disabled: true,
                placeholder: "Select User",
                itemsSource: userList,
                isEditable: false,
                required: false,
                selectedValue: document.getElementById('collection_PreparedBy_selectedValue').value.toString(),
                onSelectedIndexChanged: function () {
                    $("#collection_PreparedBy_data").val(usersCollection.items[this.selectedIndex].UserId);
                }
            });
        }

        // =================================
        // Combo Box for Users - Checked By
        // =================================
        function createCboUserCheckedBy(users) {
            var usersCollection = new wijmo.collections.CollectionView(users);
            var userList = new Array();
            for (var i = 0; i < usersCollection.items.length; i++) {
                userList.push(usersCollection.items[i].UserFullName);
            }

            if (document.getElementById('collection_IsLocked').value == 'true') {
                cboCheckedBy.dispose();
                cboCheckedBy = new wijmo.input.ComboBox('#collection_CheckedBy', {
                    disabled: true,
                    placeholder: "Select User",
                    itemsSource: userList,
                    isEditable: false,
                    required: false,
                    selectedValue: document.getElementById('collection_CheckedBy_selectedValue').value.toString(),
                    onSelectedIndexChanged: function () {
                        $("#collection_CheckedBy_data").val(usersCollection.items[this.selectedIndex].UserId);
                    }
                });
            } else if (document.getElementById('collection_IsLocked').value == 'false') {
                cboCheckedBy.dispose();
                cboCheckedBy = new wijmo.input.ComboBox('#collection_CheckedBy', {
                    disabled: false,
                    placeholder: "Select User",
                    itemsSource: userList,
                    isEditable: false,
                    required: false,
                    selectedValue: document.getElementById('collection_CheckedBy_selectedValue').value.toString(),
                    onSelectedIndexChanged: function () {
                        $("#collection_CheckedBy_data").val(usersCollection.items[this.selectedIndex].UserId);
                    }
                });
            } else {
                cboCheckedBy.dispose();
                cboCheckedBy = new wijmo.input.ComboBox('#collection_CheckedBy', {
                    placeholder: "Select User",
                    itemsSource: userList,
                    isEditable: false,
                    required: false,
                    selectedValue: document.getElementById('collection_CheckedBy_selectedValue').value.toString(),
                    onSelectedIndexChanged: function () {
                        $("#collection_CheckedBy_data").val(usersCollection.items[this.selectedIndex].UserId);
                    }
                });
            }
        }

        // =================================
        // Combo Box for Users - Approved By
        // =================================
        function createCboUserApprovedBy(users) {
            var usersCollection = new wijmo.collections.CollectionView(users);
            var userList = new Array();
            for (var i = 0; i < usersCollection.items.length; i++) {
                userList.push(usersCollection.items[i].UserFullName);
            }

            if (document.getElementById('collection_IsLocked').value == 'true') {
                cboApprovedBy.dispose();
                cboApprovedBy = new wijmo.input.ComboBox('#collection_ApprovedBy', {
                    disabled: true,
                    placeholder: "Select User",
                    itemsSource: userList,
                    isEditable: false,
                    required: false,
                    selectedValue: document.getElementById('collection_ApprovedBy_selectedValue').value.toString(),
                    onSelectedIndexChanged: function () {
                        $("#collection_ApprovedBy_data").val(usersCollection.items[this.selectedIndex].UserId);
                    }
                });
            } else if (document.getElementById('collection_IsLocked').value == 'false') {
                cboApprovedBy.dispose();
                cboApprovedBy = new wijmo.input.ComboBox('#collection_ApprovedBy', {
                    disabled: false,
                    placeholder: "Select User",
                    itemsSource: userList,
                    isEditable: false,
                    required: false,
                    selectedValue: document.getElementById('collection_ApprovedBy_selectedValue').value.toString(),
                    onSelectedIndexChanged: function () {
                        $("#collection_ApprovedBy_data").val(usersCollection.items[this.selectedIndex].UserId);
                    }
                });
            } else {
                cboApprovedBy.dispose();
                cboApprovedBy = new wijmo.input.ComboBox('#collection_ApprovedBy', {
                    placeholder: "Select User",
                    itemsSource: userList,
                    isEditable: false,
                    required: false,
                    selectedValue: document.getElementById('collection_ApprovedBy_selectedValue').value.toString(),
                    onSelectedIndexChanged: function () {
                        $("#collection_ApprovedBy_data").val(usersCollection.items[this.selectedIndex].UserId);
                    }
                });
            }
        }

        // =====================================================
        // Function with leading zeroes to display the OR Number
        // =====================================================
        function zerofill(number, length) {
            var result = number.toString();
            var pad = length - result.length;
            while (pad > 0) {
                result = '0' + result;
                pad--;
            }
            return result;
        }

        // ==============
        // ADD Collection
        // ==============
        function btnCollectionSave_OnClick() {
            var collectionObject = new Object();
            var collectonId = getParam("CollectonId");
            collectionObject.BranchId = document.getElementById('collection_Branch_data').value;
            collectionObject.ORNumber = document.getElementById('collection_ORNumber_Display').value;
            collectionObject.ORDate = document.getElementById('collection_ORDate_data').value;
            collectionObject.CustomerId = document.getElementById('collection_Customer_data').value;
            collectionObject.Particulars = document.getElementById('collection_Particulars').value;
            collectionObject.ManualORNumber = document.getElementById('collection_ManualORNumber').value;
            collectionObject.PreparedById = document.getElementById('collection_PreparedBy_data').value;
            collectionObject.CheckedById = document.getElementById('collection_CheckedBy_data').value;
            collectionObject.ApprovedById = document.getElementById('collection_ApprovedBy_data').value;
            var data = JSON.stringify(collectionObject);

            if (document.getElementById('collection_Branch_data').value == '') {
                document.getElementById("collection_Branch").style.border = "1px solid red";
            } else {
                document.getElementById("collection_Branch").style.border = "1px solid #C8C8C8";
            }

            if (document.getElementById('collection_ORDate_data').value == '') {
                document.getElementById("collection_ORDate").style.border = "1px solid red";
            } else {
                document.getElementById("collection_ORDate").style.border = "1px solid #C8C8C8";
            }

            if (document.getElementById('collection_Customer_data').value == '') {
                document.getElementById("collection_Customer").style.border = "1px solid red";
            } else {
                document.getElementById("collection_Customer").style.border = "1px solid #C8C8C8";
            }

            if (document.getElementById('collection_PreparedBy_data').value == '') {
                document.getElementById("collection_PreparedBy").style.border = "1px solid red";
            } else {
                document.getElementById("collection_PreparedBy").style.border = "1px solid #C8C8C8";
            }

            if (document.getElementById('collection_CheckedBy_data').value == '') {
                document.getElementById("collection_CheckedBy").style.border = "1px solid red";
            } else {
                document.getElementById("collection_CheckedBy").style.border = "1px solid #C8C8C8";
            }

            if (document.getElementById('collection_ApprovedBy_data').value == '') {
                document.getElementById("collection_ApprovedBy").style.border = "1px solid red";
            } else {
                document.getElementById("collection_ApprovedBy").style.border = "1px solid #C8C8C8";
            }

            var isValid = true;
            $('.requiredCollection').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                }
                else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            if (isValid == false) {
                toastr.error("Invalid Entry");
                e.preventDefault();
            }
            else {
                if (collectonId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/addCollection',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: data,
                        success: function(id){
                            if(id > 0) {
                                $("#cmdCollectionJournal").prop("disabled", true);
                                $("#cmdCollectionSaveLock").prop("disabled", true);
                                $("#cmdCollectionSave").prop("disabled", true);
                                $("#cmdCollectionEdit").prop("disabled", true);
                                $("#cmdCollectionPrint").prop("disabled", true);
                                $("#cmdCollectionClose").prop("disabled", true);
                                toastr.success("Successfully Saved");
                                window.location = '/Software/CollectionDetail?CollectonId=' + id;
                            } else {
                                window.history.back();
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/updateCollection/' + collectonId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: data,
                        statusCode: {
                            200: function () {
                                $("#cmdCollectionJournal").prop("disabled", true);
                                $("#cmdCollectionSaveLock").prop("disabled", true);
                                $("#cmdCollectionSave").prop("disabled", true);
                                $("#cmdCollectionEdit").prop("disabled", true);
                                $("#cmdCollectionPrint").prop("disabled", true);
                                $("#cmdCollectionClose").prop("disabled", true);
                                toastr.success("Successfully Updated");
                                window.setTimeout(function () {
                                    location.reload()
                                }, 1000);
                            },
                            404: function () {
                                toastr.error("Can't Save");
                                $("#cmdCollectionJournal").prop("disabled", false);
                                $("#cmdCollectionSaveLock").prop("disabled", false);
                                $("#cmdCollectionSave").prop("disabled", false);
                                $("#cmdCollectionEdit").prop("disabled", false);
                                $("#cmdCollectionPrint").prop("disabled", false);
                                $("#cmdCollectionClose").prop("disabled", false);
                            },
                            400: function () {
                                toastr.error("Bad Request");
                                $("#cmdCollectionJournal").prop("disabled", false);
                                $("#cmdCollectionSaveLock").prop("disabled", false);
                                $("#cmdCollectionSave").prop("disabled", false);
                                $("#cmdCollectionEdit").prop("disabled", false);
                                $("#cmdCollectionPrint").prop("disabled", false);
                                $("#cmdCollectionClose").prop("disabled", false);
                            }
                        }
                    });
                }
            }
        }

        // ======================
        // Colelction Save - Lock
        // ======================
        function btnCollectionSaveLock_OnClick() {
            var collectionObject = new Object();
            var collectonId = getParam("CollectonId");
            collectionObject.BranchId = document.getElementById('collection_Branch_data').value;
            collectionObject.ORNumber = document.getElementById('collection_ORNumber_Display').value;
            collectionObject.ORDate = document.getElementById('collection_ORDate_data').value;
            collectionObject.CustomerId = document.getElementById('collection_Customer_data').value;
            collectionObject.Particulars = document.getElementById('collection_Particulars').value;
            collectionObject.ManualORNumber = document.getElementById('collection_ManualORNumber').value;
            collectionObject.PreparedById = document.getElementById('collection_PreparedBy_data').value;
            collectionObject.CheckedById = document.getElementById('collection_CheckedBy_data').value;
            collectionObject.ApprovedById = document.getElementById('collection_ApprovedBy_data').value;
            collectionObject.IsLocked = true;
            var data = JSON.stringify(collectionObject);

            if (document.getElementById('collection_Branch_data').value == '') {
                document.getElementById("collection_Branch").style.border = "1px solid red";
            } else {
                document.getElementById("collection_Branch").style.border = "1px solid #C8C8C8";
            }

            if (document.getElementById('collection_ORDate_data').value == '') {
                document.getElementById("collection_ORDate").style.border = "1px solid red";
            } else {
                document.getElementById("collection_ORDate").style.border = "1px solid #C8C8C8";
            }

            if (document.getElementById('collection_Customer_data').value == '') {
                document.getElementById("collection_Customer").style.border = "1px solid red";
            } else {
                document.getElementById("collection_Customer").style.border = "1px solid #C8C8C8";
            }

            if (document.getElementById('collection_PreparedBy_data').value == '') {
                document.getElementById("collection_PreparedBy").style.border = "1px solid red";
            } else {
                document.getElementById("collection_PreparedBy").style.border = "1px solid #C8C8C8";
            }

            if (document.getElementById('collection_CheckedBy_data').value == '') {
                document.getElementById("collection_CheckedBy").style.border = "1px solid red";
            } else {
                document.getElementById("collection_CheckedBy").style.border = "1px solid #C8C8C8";
            }

            if (document.getElementById('collection_ApprovedBy_data').value == '') {
                document.getElementById("collection_ApprovedBy").style.border = "1px solid red";
            } else {
                document.getElementById("collection_ApprovedBy").style.border = "1px solid #C8C8C8";
            }

            var isValid = true;
            $('.requiredCollection').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                }
                else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            if (isValid == false) {
                toastr.error("Invalid Entry");
                e.preventDefault();
            }
            else {
                if (collectonId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/addCollection',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: data,
                        success: function(id){
                            if(id > 0) {
                                $("#cmdCollectionJournal").prop("disabled", true);
                                $("#cmdCollectionSaveLock").prop("disabled", true);
                                $("#cmdCollectionSave").prop("disabled", true);
                                $("#cmdCollectionEdit").prop("disabled", true);
                                $("#cmdCollectionPrint").prop("disabled", true);
                                $("#cmdCollectionClose").prop("disabled", true);
                                toastr.success("Successfully Saved");
                                window.location = '/Software/CollectionDetail?CollectonId=' + id;
                            } else {
                                window.history.back();
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/updateCollection/' + collectonId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: data,
                        statusCode: {
                            200: function () {
                                $("#cmdCollectionJournal").prop("disabled", true);
                                $("#cmdCollectionSaveLock").prop("disabled", true);
                                $("#cmdCollectionSave").prop("disabled", true);
                                $("#cmdCollectionEdit").prop("disabled", true);
                                $("#cmdCollectionPrint").prop("disabled", true);
                                $("#cmdCollectionClose").prop("disabled", true);
                                toastr.success("Successfully Updated");
                                window.setTimeout(function () {
                                    location.reload()
                                }, 1000);
                            },
                            404: function () {
                                toastr.error("Can't Save");
                                $("#cmdCollectionJournal").prop("disabled", false);
                                $("#cmdCollectionSaveLock").prop("disabled", false);
                                $("#cmdCollectionSave").prop("disabled", false);
                                $("#cmdCollectionEdit").prop("disabled", false);
                                $("#cmdCollectionPrint").prop("disabled", false);
                                $("#cmdCollectionClose").prop("disabled", false);
                            },
                            400: function () {
                                toastr.error("Bad Request");
                                $("#cmdCollectionJournal").prop("disabled", false);
                                $("#cmdCollectionSaveLock").prop("disabled", false);
                                $("#cmdCollectionSave").prop("disabled", false);
                                $("#cmdCollectionEdit").prop("disabled", false);
                                $("#cmdCollectionPrint").prop("disabled", false);
                                $("#cmdCollectionClose").prop("disabled", false);
                            }
                        }
                    });
                }
            }
        }

        // ========================
        // Edit Collection - Unlock
        // ========================
        function btnCollectionEdit_OnClick() {
            var collectionObject = new Object();
            var collectonId = getParam("CollectonId");
            collectionObject.IsLocked = false;
            var data = JSON.stringify(collectionObject);
            $.ajax({
                type: "PUT",
                url: '/api/updateCollectionIsLocked/' + collectonId,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: data,
                statusCode: {
                    200: function () {
                        $("#cmdCollectionJournal").prop("disabled", true);
                        $("#cmdCollectionSaveLock").prop("disabled", true);
                        $("#cmdCollectionSave").prop("disabled", true);
                        $("#cmdCollectionEdit").prop("disabled", true);
                        $("#cmdCollectionPrint").prop("disabled", true);
                        $("#cmdCollectionClose").prop("disabled", true);
                        toastr.success("Unlocked");
                        window.setTimeout(function () {
                            location.reload()
                        }, 1000);
                    },
                    404: function () {
                        toastr.error("Can't Save");
                        $("#cmdCollectionJournal").prop("disabled", false);
                        $("#cmdCollectionSaveLock").prop("disabled", false);
                        $("#cmdCollectionSave").prop("disabled", false);
                        $("#cmdCollectionEdit").prop("disabled", false);
                        $("#cmdCollectionPrint").prop("disabled", false);
                        $("#cmdCollectionClose").prop("disabled", false);
                    },
                    400: function () {
                        toastr.error("Bad Request");
                        $("#cmdCollectionJournal").prop("disabled", false);
                        $("#cmdCollectionSaveLock").prop("disabled", false);
                        $("#cmdCollectionSave").prop("disabled", false);
                        $("#cmdCollectionEdit").prop("disabled", false);
                        $("#cmdCollectionPrint").prop("disabled", false);
                        $("#cmdCollectionClose").prop("disabled", false);
                    }
                }
            });
        }

        // ========
        // Print OR
        // ========
        function btnCollectionPrint_OnClick() {
            var collectonId = getParam("CollectonId");
            window.location = "/RepCollection/Collection?CollectonId=" + collectonId;
        }

        // ========================
        // GET Collection Line List
        // ========================
        function getCollectionLines() {
            var collectionLines = new wijmo.collections.ObservableArray;
            var collectonId = getParam("CollectonId");
            if (document.location.search.length > 0) {
                NProgress.start();
                $.ajax({
                    url: '/api/listCollectionLineByORId/' + collectonId,
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    data: {},
                    success: function (Results) {
                        NProgress.done();
                        if (Results.length > 0) {
                            collections = new wijmo.collections.ObservableArray;
                            var collectonId = getParam("CollectonId");
                            $.ajax({
                                url: '/api/collection/' + collectonId,
                                cache: false,
                                type: 'GET',
                                contentType: 'application/json; charset=utf-8',
                                data: {},
                                success: function (CollectionResults) {
                                    if (CollectionResults.length > 0) {
                                        collections.push({
                                            Id: CollectionResults.Id,
                                            IsLocked: CollectionResults.IsLocked
                                        });
                                    }

                                    if (CollectionResults.IsLocked == true) {
                                        for (i = 0; i < Results.length; i++) {
                                            collectionLines.push({
                                                EditId: "<button class='btn btn-primary btn-xs btn-block' onclick='btnEditCollectionLine_OnClick()' disabled><i class='fa fa-edit'></i> Edit</button>",
                                                DeleteId: "<button class='btn btn-danger btn-xs btn-block' onclick='btnDeleteCollectionLine_OnClick()' disabled><i class='fa fa-trash'></i> Delete</button>",
                                                Id: Results[i]["Id"],
                                                ORId: Results[i]["ORId"],
                                                OR: Results[i]["OR"],
                                                BranchId: Results[i]["BranchId"],
                                                Branch: Results[i]["Branch"],
                                                AccountId: Results[i]["AccountId"],
                                                Account: Results[i]["Account"],
                                                ArticleId: Results[i]["ArticleId"],
                                                Article: Results[i]["Article"],
                                                SIId: Results[i]["SIId"],
                                                SI: Results[i]["SI"],
                                                Particulars: Results[i]["Particulars"],
                                                Amount: Results[i]["Amount"],
                                                PayTypeId: Results[i]["PayTypeId"],
                                                PayType: Results[i]["PayType"],
                                                CheckNumber: Results[i]["CheckNumber"],
                                                CheckDate: Results[i]["CheckDate"],
                                                CheckBank: Results[i]["CheckBank"],
                                                DepositoryBankId: Results[i]["DepositoryBankId"],
                                                DepositoryBank: Results[i]["DepositoryBank"],
                                                IsClear: Results[i]["IsClear"]
                                            });
                                        }
                                    } else {
                                        for (i = 0; i < Results.length; i++) {
                                            collectionLines.push({
                                                EditId: "<button class='btn btn-primary btn-xs btn-block' onclick='btnEditCollectionLine_OnClick()'><i class='fa fa-edit'></i> Edit</button>",
                                                DeleteId: "<button class='btn btn-danger btn-xs btn-block' onclick='btnDeleteCollectionLine_OnClick()'><i class='fa fa-trash'></i> Delete</button>",
                                                Id: Results[i]["Id"],
                                                ORId: Results[i]["ORId"],
                                                OR: Results[i]["OR"],
                                                BranchId: Results[i]["BranchId"],
                                                Branch: Results[i]["Branch"],
                                                AccountId: Results[i]["AccountId"],
                                                Account: Results[i]["Account"],
                                                ArticleId: Results[i]["ArticleId"],
                                                Article: Results[i]["Article"],
                                                SIId: Results[i]["SIId"],
                                                SI: Results[i]["SI"],
                                                Particulars: Results[i]["Particulars"],
                                                Amount: Results[i]["Amount"],
                                                PayTypeId: Results[i]["PayTypeId"],
                                                PayType: Results[i]["PayType"],
                                                CheckNumber: Results[i]["CheckNumber"],
                                                CheckDate: Results[i]["CheckDate"],
                                                CheckBank: Results[i]["CheckBank"],
                                                DepositoryBankId: Results[i]["DepositoryBankId"],
                                                DepositoryBank: Results[i]["DepositoryBank"],
                                                IsClear: Results[i]["IsClear"]
                                            });
                                        }
                                    }
                                }
                            });
                        }
                    }
                }).fail(function (xhr, textStatus, err) {
                    alert(err);
                });
            }
            return collectionLines;
        }

        // ========================================
        // GET Collection Line Branch for Combo Box
        // ========================================
        function getDisbursementBranchesForComboBox() {
            collectionLineBranches = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listBranch',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            collectionLineBranches.push({
                                BranchId: results[i]["Id"],
                                BranchBranch: results[i]["Branch"]
                            });
                        }
                        createCboCollectionBranch(collectionLineBranches);
                    }
                }
            });
        }

        // ======================================
        // Combo Box for Collection Line Branches
        // ======================================
        function createCboCollectionBranch(collectionLineBranches) {
            var collectionBranchCollections = new wijmo.collections.CollectionView(collectionLineBranches);
            var collectionBranchList = new Array();
            for (var i = 0; i < collectionBranchCollections.items.length; i++) {
                collectionBranchList.push(collectionBranchCollections.items[i].BranchBranch);
            }

            cboCollectionBranch.dispose();
            cboCollectionBranch = new wijmo.input.ComboBox('#collectionLine_branch', {
                placeholder: "Select Branch",
                itemsSource: collectionBranchList,
                isEditable: false,
                required: false,
                selectedValue: document.getElementById('collectionLine_branch_selectedValue').value.toString(),
                onSelectedIndexChanged: function () {
                    $("#collectionLine_branch_data").val(collectionBranchCollections.items[this.selectedIndex].BranchId);
                }
            });
        }

        // =========================================
        // GET Collection Line PayType for Combo Box
        // =========================================
        function getDisbursementPayTypeForComboBox() {
            collectionLinePayTypes = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listPayType',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            collectionLinePayTypes.push({
                                PayTypeId: results[i]["Id"],
                                PayType: results[i]["PayType"]
                            });
                        }
                        createCboCollectionPayType(collectionLinePayTypes);
                    }
                }
            });
        }

        // ======================================
        // Combo Box for Collection Line PayTypes
        // ======================================
        function createCboCollectionPayType(collectionLinePayTypes) {
            var collectionPayTypeCollections = new wijmo.collections.CollectionView(collectionLinePayTypes);
            var collectionPayTypeList = new Array();
            for (var i = 0; i < collectionPayTypeCollections.items.length; i++) {
                collectionPayTypeList.push(collectionPayTypeCollections.items[i].PayType);
            }

            var disabled = false;
            if (collectionLinePayTypes == 0) {
                disabled = true;
            }

            cboCollectionLinePayType.dispose();
            cboCollectionLinePayType = new wijmo.input.ComboBox('#collectionLine_payType', {
                disabled: disabled,
                placeholder: "Select Pay Type",
                itemsSource: collectionPayTypeList,
                isEditable: false,
                selectedValue: document.getElementById('collectionLine_payType_selectedValue').value.toString(),
                onSelectedIndexChanged: function () {
                    $("#collectionLine_payType_data").val(collectionPayTypeCollections.items[this.selectedIndex].PayTypeId);
                }
            });

            document.getElementById("collectionLine_payType_data").value = collectionPayTypeCollections.items[cboCollectionLinePayType.selectedIndex].PayTypeId
        }

        // ==============================================
        // GET SI Number for Combo Box in Collection Line
        // ==============================================
        function getSalesForComboBoxInCollectionLine() {
            collectionLineSales = new wijmo.collections.ObservableArray();
            var customerId = document.getElementById('collection_Customer_data').value;
            $.ajax({
                url: '/api/salesInvoiceByCustomerId/' + customerId,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            collectionLineSales.push({
                                SIId: results[i]["Id"],
                                SINumber: results[i]["SINumber"],
                                Branch: results[i]["Branch"],
                                Amount: results[i]["Amount"]
                            });
                        }
                        createCboSIForCollectionLine(collectionLineSales);
                    } else {
                        createCboSIForCollectionLine(collectionLineSales);
                    }
                }
            }).fail(function (xhr, textStatus, err) {
                alert(err);
            }
            );
        }

        // ===========================================
        // Combo Box for SI Number in  Collection Line
        // ===========================================
        function createCboSIForCollectionLine(collectionLineSales) {
            var SICollections = new wijmo.collections.CollectionView(collectionLineSales);
            var SIList = new Array();
            for (var i = 0; i < SICollections.items.length; i++) {
                SIList.push(SICollections.items[i].SINumber);
            }

            var disabled = false;
            if (collectionLineSales == 0) {
                document.getElementById('collectionLine_SINo_data').value = "";
                disabled = true;
            }

            cboCollectionLineSI.dispose();
            cboCollectionLineSI = new wijmo.input.ComboBox('#collectionLine_SINo', {
                disabled: disabled,
                placeholder: "Select SI Number",
                itemsSource: SIList,
                isEditable: true,
                required: true,
                selectedValue: document.getElementById('collectionLine_SINo_selectedValue').value.toString(),
                onSelectedIndexChanged: function () {
                    $("#collectionLine_SINo_data").val(SICollections.items[this.selectedIndex].SIId);
                    $("#collectionLine_amount").val(SICollections.items[this.selectedIndex].Amount);
                }
            });

            if(collectionLineSales > 0) {
                document.getElementById("collectionLine_SINo_data").value = SICollections.items[cboCollectionLineSI.selectedIndex].SIId;
                document.getElementById("collectionLine_amount").value = SICollections.items[cboCollectionLineSI.selectedIndex].Amount;
            }
        }

        // ===========================
        // Get Collection Line Account
        // ===========================
        function getCollectionLineAccountForComboBox() {
            collectionLineAccounts = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listAccount',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            collectionLineAccounts.push({
                                AccountId: results[i]["Id"],
                                AccountCode: results[i]["AccountCode"],
                                AccountAccount: results[i]["Account"]
                            });
                        }
                        createCollectionLineCboForAccountCode(collectionLineAccounts);
                        createCollectionLineCboForAccount(collectionLineAccounts);
                    } else {
                        createCollectionLineCboForAccountCode(collectionLineAccounts);
                        createCollectionLineCboForAccount(collectionLineAccounts);
                    }
                }
            }).fail(function (xhr, textStatus, err) {
                alert(err);
            });
        }

        // ====================
        // CBO for Account Code
        // ====================
        function createCollectionLineCboForAccountCode(collectionLineAccounts) {
            var collectionLineAccountCollection = new wijmo.collections.CollectionView(collectionLineAccounts);
            var collectionLineAccountList = new Array();
            for (var i = 0; i < collectionLineAccountCollection.items.length; i++) {
                collectionLineAccountList.push(collectionLineAccountCollection.items[i].AccountCode);
            }

            var disabled = false;
            if (collectionLineAccounts == 0) {
                disabled = true;
            }

            cboCollectionLineAccountCode.dispose();
            cboCollectionLineAccountCode = new wijmo.input.ComboBox('#collectionLine_accountCode', {
                disabled: disabled,
                placeholder: "Select Account Code",
                itemsSource: collectionLineAccountList,
                isEditable: false,
                selectedValue: document.getElementById('collectionLine_accountCode_selectedValue').value.toString(),
                onSelectedIndexChanged: function () {
                    $("#collectionLine_account_data").val(collectionLineAccountCollection.items[this.selectedIndex].AccountId);
                    $("#collectionLine_account_selectedValue").val(collectionLineAccountCollection.items[this.selectedIndex].AccountAccount);
                    getCollectionArticlesForComboBox();
                    createCollectionLineCboForAccount(collectionLineAccounts);
                }
            });

            if (collectionLineAccounts == 0) {
                document.getElementById('collectionLine_account_data').value = collectionLineAccountCollection.items[cboCollectionLineAccountCode.selectedIndex].AccountId;
                document.getElementById('collectionLine_account_selectedValue').value = collectionLineAccountCollection.items[cboCollectionLineAccountCode.selectedIndex].AccountAccount;
            }
        }

        // ===============
        // CBO for Account
        // ===============
        function createCollectionLineCboForAccount(collectionLineAccounts) {
            var collectionLineAccountCollection = new wijmo.collections.CollectionView(collectionLineAccounts);
            var collectionLineAccountList = new Array();
            for (var i = 0; i < collectionLineAccountCollection.items.length; i++) {
                collectionLineAccountList.push(collectionLineAccountCollection.items[i].AccountAccount);
            }

            var disabled = false;
            if (collectionLineAccounts == 0) {
                disabled = true;
            }

            cboCollectionLineAccount.dispose();
            cboCollectionLineAccount = new wijmo.input.ComboBox('#collectionLine_account', {
                disabled: disabled,
                placeholder: "Select Account",
                itemsSource: collectionLineAccountList,
                isEditable: false,
                selectedValue: document.getElementById('collectionLine_account_selectedValue').value.toString(),
                onSelectedIndexChanged: function () {
                    $("#collectionLine_account_data").val(collectionLineAccountCollection.items[this.selectedIndex].AccountId);
                    $("#collectionLine_accountCode_selectedValue").val(collectionLineAccountCollection.items[this.selectedIndex].AccountCode);
                    getCollectionArticlesForComboBox();
                    createCollectionLineCboForAccountCode(collectionLineAccounts);
                }
            });

            document.getElementById('collectionLine_account_data').value = collectionLineAccountCollection.items[cboCollectionLineAccount.selectedIndex].AccountId;
            document.getElementById('collectionLine_accountCode_selectedValue').value = collectionLineAccountCollection.items[cboCollectionLineAccount.selectedIndex].AccountCode;
            getCollectionArticlesForComboBox();
        }

        // ==========================================
        // GET Collection Line Articles for Combo Box
        // ==========================================
        function getCollectionArticlesForComboBox() {
            collectionLineArticles = new wijmo.collections.ObservableArray();

            var accountId;
            if (document.getElementById('collectionLine_account_data').value == "") {
                accountId = 0;
            } else {
                accountId = document.getElementById('collectionLine_account_data').value;
            }

            var collectionLineArticlesArticleTypes = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listAccountArticleTypeByAccountId/' + accountId,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (collectionLineArticlesArticleTypeResults) {
                    if (collectionLineArticlesArticleTypeResults.length > 0) {
                        for (i = 0; i < collectionLineArticlesArticleTypeResults.length; i++) {
                            collectionLineArticlesArticleTypes.push({
                                Id: collectionLineArticlesArticleTypeResults[i]["Id"],
                                ArticleTypeId: collectionLineArticlesArticleTypeResults[i]["ArticleTypeId"]
                            });

                            $.ajax({
                                url: '/api/listArticleByArticleTypeId/' + collectionLineArticlesArticleTypeResults[i]["ArticleTypeId"],
                                cache: false,
                                type: 'GET',
                                contentType: 'application/json; charset=utf-8',
                                data: {},
                                success: function (results) {
                                    if (results.length > 0) {
                                        for (i = 0; i < results.length; i++) {
                                            collectionLineArticles.push({
                                                ArticleId: results[i]["Id"],
                                                ArticleArticle: results[i]["Article"]
                                            });
                                        }
                                        createCboCollectionLineArticles(collectionLineArticles);
                                    } else {
                                        createCboCollectionLineArticles(collectionLineArticles);
                                    }
                                }
                            }).fail(function (xhr, textStatus, err) {
                                alert(err);
                            });
                        }
                    } else {
                        $.ajax({
                            url: '/api/listArticleByArticleTypeId/' + 0,
                            cache: false,
                            type: 'GET',
                            contentType: 'application/json; charset=utf-8',
                            data: {},
                            success: function (results) {
                                if (results.length > 0) {
                                    for (i = 0; i < results.length; i++) {
                                        collectionLineArticles.push({
                                            ArticleId: results[i]["Id"],
                                            ArticleArticle: results[i]["Article"]
                                        });
                                    }
                                    createCboCollectionLineArticles(collectionLineArticles);
                                } else {
                                    createCboCollectionLineArticles(collectionLineArticles);
                                }
                            }
                        }).fail(function (xhr, textStatus, err) {
                            alert(err);
                        });
                    }
                }
            }).fail(function (xhr, textStatus, err) {
                alert(err);
            });
        }

        // ======================================
        // Combo Box for Collection Line Articles
        // ======================================
        function createCboCollectionLineArticles(collectionLineArticles) {
            var collectionLineArticleCollections = new wijmo.collections.CollectionView(collectionLineArticles);
            var collectiontLineArticleList = new Array();
            for (var i = 0; i < collectionLineArticleCollections.items.length; i++) {
                collectiontLineArticleList.push(collectionLineArticleCollections.items[i].ArticleArticle);
            }

            var disabled = false;
            if (collectionLineArticles == 0) {
                document.getElementById('collectionLine_article_data').value = "";
                disabled = true;
            }

            cboCollectionLineArticle.dispose();
            cboCollectionLineArticle = new wijmo.input.ComboBox('#collectionLine_article', {
                disabled: disabled,
                placeholder: "Select Article",
                itemsSource: collectiontLineArticleList,
                isEditable: false,
                selectedValue: document.getElementById('collectionLine_article_selectedValue').value.toString(),
                onSelectedIndexChanged: function () {
                    $("#collectionLine_article_data").val(collectionLineArticleCollections.items[this.selectedIndex].ArticleId);
                }
            });

            document.getElementById("collectionLine_article_data").value = collectionLineArticleCollections.items[cboCollectionLineArticle.selectedIndex].ArticleId
        }

        // ===============================================
        // GET Collection Line Articles Bank for Combo Box
        // ===============================================
        function getCollectionArticleBankForComboBox() {
            collectionArticleBanks = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listArticleByArticleTypeId/5',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            collectionArticleBanks.push({
                                ArticleId: results[i]["Id"],
                                ArticleArticle: results[i]["Article"]
                            });
                        }
                        createCboCollectionLineArticleBank(collectionArticleBanks);
                    }
                }
            }).fail(function (xhr, textStatus, err) {
                alert(err);
            });
        }

        // ===========================================
        // Combo Box for Collection Line Articles Bank
        // ===========================================
        function createCboCollectionLineArticleBank(collectionArticleBanks) {
            var collectionLineArticlBankeCollections = new wijmo.collections.CollectionView(collectionArticleBanks);
            var collectiontLineArticleBankList = new Array();
            for (var i = 0; i < collectionLineArticlBankeCollections.items.length; i++) {
                collectiontLineArticleBankList.push(collectionLineArticlBankeCollections.items[i].ArticleArticle);
            }

            var disabled = false;
            if (collectionArticleBanks == 0) {
                disabled = true;
            }

            cboCollectionArticleBank.dispose();
            cboCollectionArticleBank = new wijmo.input.ComboBox('#collectionLine_depositoryBank', {
                disabled: disabled,
                placeholder: "Select Article",
                itemsSource: collectiontLineArticleBankList,
                isEditable: false,
                selectedValue: document.getElementById('collectionLine_depositoryBank_selectedValue').value.toString(),
                onSelectedIndexChanged: function () {
                    $("#collectionLine_depositoryBank_data").val(collectionLineArticlBankeCollections.items[this.selectedIndex].ArticleId);
                }
            });

            document.getElementById("collectionLine_depositoryBank_data").value = collectionLineArticlBankeCollections.items[cboCollectionArticleBank.selectedIndex].ArticleId;
        }

        // ===================
        // ADD Collection Line
        // ===================
        function cmdAddCollectionLineButton_OnClick() {
            $('#collectionLineEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $("#cmdSaveCollectionLineButton").prop("disabled", false);
            $("#cmdCollectionLineDetailCloseButton").prop("disabled", false);

            $('.requiredCollectionLine').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            var d = new Date();
            document.getElementById("collectionLine_checkDate_data").value = [d.getMonth() + 1, d.getDate(), d.getFullYear()].join('/');
            CheckedDate.dispose();
            CheckedDate = new wijmo.input.InputDate('#collectionLine_checkDate', {
                format: 'MM/dd/yyyy',
                value: new Date(),
                mask: '99/99/9999',
                onValueChanged: function () {
                    document.getElementById('collectionLine_checkDate_data').value = this.value.toLocaleDateString();
                }
            });

            document.getElementById('collectionLine_Id').value = 0;
            document.getElementById('collectionLine_branch_data').value = '@ViewData["BranchId"]';
            document.getElementById('collectionLine_branch_selectedValue').value = '@ViewData["Branch"]';
            document.getElementById('collectionLine_payType_data').value = '';
            document.getElementById('collectionLine_payType_selectedValue').value = '';
            document.getElementById('collectionLine_Particulars').value = 'NA';
            document.getElementById('collectionLine_SINo_data').value = '';
            document.getElementById('collectionLine_SINo_selectedValue').value = '';
            document.getElementById('collectionLine_amount').value = '0';
            document.getElementById('collectionLine_account_data').value = '';
            document.getElementById('collectionLine_account_selectedValue').value = '';
            document.getElementById('collectionLine_article_data').value = '';
            document.getElementById('collectionLine_article_selectedValue').value = '';
            document.getElementById('collectionLine_checkNo').value = 'NA';
            document.getElementById('collectionLine_checkBank').value = 'NA';
            document.getElementById('collectionLine_depositoryBank_data').value = '';
            document.getElementById('collectionLine_depositoryBank_selectedValue').value = '';
            document.getElementById('collectionLine_Clear').checked = false;

            getDisbursementBranchesForComboBox();
            getDisbursementPayTypeForComboBox();
            getSalesForComboBoxInCollectionLine();
            getCollectionLineAccountForComboBox();
            getCollectionArticlesForComboBox();
            getCollectionArticleBankForComboBox();
        }

        // ====================
        // Edit Collection Line
        // ====================
        function btnEditCollectionLine_OnClick() {
            collectionLines.editItem(collectionLines.currentItem);
            $('#collectionLineEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $("#cmdSaveCollectionLineButton").prop("disabled", false);
            $("#cmdCollectionLineDetailCloseButton").prop("disabled", false);

            $('.requiredCollectionLine').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            var collectionLine = collectionLines.currentEditItem;
            document.getElementById('collectionLine_Id').value = collectionLine.Id;
            document.getElementById('collectionLine_branch_data').value = collectionLine.BranchId;
            document.getElementById('collectionLine_branch_selectedValue').value = collectionLine.Branch;
            document.getElementById('collectionLine_payType_data').value = collectionLine.PayTypeId;
            document.getElementById('collectionLine_payType_selectedValue').value = collectionLine.PayType;
            document.getElementById('collectionLine_Particulars').value = collectionLine.Particulars;
            document.getElementById('collectionLine_SINo_data').value = collectionLine.SIId;
            document.getElementById('collectionLine_SINo_selectedValue').value = collectionLine.SI;
            document.getElementById('collectionLine_amount').value = collectionLine.Amount;
            document.getElementById('collectionLine_account_data').value = collectionLine.AccountId;
            document.getElementById('collectionLine_account_selectedValue').value = collectionLine.Account;
            document.getElementById('collectionLine_article_data').value = collectionLine.ArticleId;
            document.getElementById('collectionLine_article_selectedValue').value = collectionLine.Article;
            document.getElementById('collectionLine_checkNo').value = collectionLine.CheckNumber;
            document.getElementById('collectionLine_checkDate_data').value = collectionLine.CheckDate;
            document.getElementById('collectionLine_checkBank').value = collectionLine.CheckBank;

            var CheckDateCollection = collectionLine.CheckDate;
            CheckedDate.dispose();
            CheckedDate = new wijmo.input.InputDate('#collectionLine_checkDate', {
                format: 'MM/dd/yyyy',
                value: new Date(CheckDateCollection),
                mask: '99/99/9999',
                onValueChanged: function () {
                    document.getElementById('collectionLine_checkDate_data').value = this.value.toLocaleDateString();
                }
            });

            document.getElementById('collectionLine_depositoryBank_data').value = collectionLine.DepositoryBankId;
            document.getElementById('collectionLine_depositoryBank_selectedValue').value = collectionLine.DepositoryBank;
            document.getElementById('collectionLine_Clear').checked = collectionLine.IsClear;

            getDisbursementBranchesForComboBox();
            getDisbursementPayTypeForComboBox();
            getSalesForComboBoxInCollectionLine();
            getCollectionLineAccountForComboBox();
            getCollectionArticlesForComboBox();
            getCollectionArticleBankForComboBox();
        }

        // ======================
        // Delete Collection Line
        // ======================
        function btnDeleteCollectionLine_OnClick() {
            $('#deleteCollectionLineConfirm').modal({
                show: true,
                backdrop: 'static'
            });

            $("#cmdConfirmDeleteCollectionLine").prop("disabled", false);
            $("#cmdConfirmDeleteCollectionLineCloseButton").prop("disabled", false);
        }
        // confirm delete Collection
        function cmdCollectionLineConfirmDeleteButton_OnClick() {
            $("#cmdConfirmDeleteCollectionLine").prop("disabled", true);
            $("#cmdConfirmDeleteCollectionLineCloseButton").prop("disabled", true);

            collectionLines.editItem(collectionLines.currentItem);
            var collectionLineId = collectionLines.currentEditItem.Id;
            $.ajax({
                url: '/api/deleteCollectionLine/' + collectionLineId,
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        $("#cmdConfirmDeleteCollectionLine").prop("disabled", true);
                        $("#cmdConfirmDeleteCollectionLineCloseButton").prop("disabled", true);
                        toastr.success("Successfully Deleted");

                        $('#deleteCollectionLineConfirm').modal('hide');

                        collectionLines = new wijmo.collections.CollectionView(getCollectionLines());

                        // Flex Grid for Items
                        collectionLineGrid.itemsSource = collectionLines;
                        collectionLineGrid.trackChanges = true;
                    },
                    404: function () {
                        toastr.error("Request Not Found");
                        $('#deleteCollectionLineConfirm').modal('hide');
                        $("#cmdConfirmDeleteCollectionLine").prop("disabled", false);
                        $("#cmdConfirmDeleteCollectionLineCloseButton").prop("disabled", false);
                    },
                    400: function () {
                        toastr.error("Bad Request");
                        $('#deleteCollectionLineConfirm').modal('hide');
                        $("#cmdConfirmDeleteCollectionLine").prop("disabled", false);
                        $("#cmdConfirmDeleteCollectionLineCloseButton").prop("disabled", false);
                    }
                }
            });
        }

        // ====================
        // SAVE Collection Line
        // ====================
        function cmdCollectionLineSaveButton_OnClick() {
            var collectionObject = new Object();
            var collectonId = getParam("CollectonId");

            var collectionId = document.getElementById('collectionLine_Id').value;
            collectionObject.ORId = collectonId;
            collectionObject.BranchId = document.getElementById('collectionLine_branch_data').value;
            collectionObject.AccountId = document.getElementById('collectionLine_account_data').value;
            collectionObject.ArticleId = document.getElementById('collectionLine_article_data').value;
            collectionObject.SIId = document.getElementById('collectionLine_SINo_data').value;
            collectionObject.Particulars = document.getElementById('collectionLine_Particulars').value;
            collectionObject.Amount = document.getElementById('collectionLine_amount').value;
            collectionObject.PayTypeId = document.getElementById('collectionLine_payType_data').value;
            collectionObject.CheckNumber = document.getElementById('collectionLine_checkNo').value;
            collectionObject.CheckDate = document.getElementById('collectionLine_checkDate_data').value;
            collectionObject.CheckBank = document.getElementById('collectionLine_checkBank').value;
            collectionObject.DepositoryBankId = document.getElementById('collectionLine_depositoryBank_data').value;
            collectionObject.IsClear = document.getElementById('collectionLine_Clear').checked;
            var collectionData = JSON.stringify(collectionObject);

            if (document.getElementById('collectionLine_branch_data').value == '') {
                document.getElementById("collectionLine_branch").style.border = "1px solid red";
            } else {
                document.getElementById("collectionLine_branch").style.border = "1px solid #C8C8C8";
            }

            if (document.getElementById('collectionLine_account_data').value == '') {
                document.getElementById("collectionLine_account").style.border = "1px solid red";
            } else {
                document.getElementById("collectionLine_account").style.border = "1px solid #C8C8C8";
            }

            if (document.getElementById('collectionLine_payType_data').value == '') {
                document.getElementById("collectionLine_payType").style.border = "1px solid red";
            } else {
                document.getElementById("collectionLine_payType").style.border = "1px solid #C8C8C8";
            }

            if (document.getElementById('collectionLine_depositoryBank_data').value == '') {
                document.getElementById("collectionLine_depositoryBank").style.border = "1px solid red";
            } else {
                document.getElementById("collectionLine_depositoryBank").style.border = "1px solid #C8C8C8";
            }

            if (document.getElementById('collectionLine_article_data').value == '') {
                document.getElementById("collectionLine_article").style.border = "1px solid red";
            } else {
                document.getElementById("collectionLine_article").style.border = "1px solid #C8C8C8";
            }

            var isValid = true;
            $('.requiredCollectionLine').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                }
                else {
                    $(this).css({
                        "border": "",
                    });
                }
            });
            if (isValid == false) {
                toastr.error("Invalid Entry");
            }
            else {
                $("#cmdSaveCollectionLineButton").prop("disabled", true);
                $("#cmdCollectionLineDetailCloseButton").prop("disabled", true);
                if (collectionId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/addCollectionLine',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: collectionData,
                        success: function(id){
                            if(id > 0) {
                                $("#cmdSaveCollectionLineButton").prop("disabled", true);
                                $("#cmdCollectionLineDetailCloseButton").prop("disabled", true);
                                toastr.success("Successfully Saved");

                                $('#collectionLineEdit').modal('hide');

                                collectionLines = new wijmo.collections.CollectionView(getCollectionLines());

                                // Flex Grid for Items
                                collectionLineGrid.itemsSource = collectionLines;
                                collectionLineGrid.trackChanges = true;
                            } else {
                                $("#cmdSaveCollectionLineButton").prop("disabled", false);
                                $("#cmdCollectionLineDetailCloseButton").prop("disabled", false);
                                toastr.error("Save unsuccessful");
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/updateCollectionLine/' + collectionId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: collectionData,
                        statusCode: {
                            200: function () {
                                $("#cmdSaveSaleItemsButton").prop("disabled", true);
                                $("#cmdSaleItemsDetailCloseButton").prop("disabled", true);
                                toastr.success("Successfully Updated");

                                $('#collectionLineEdit').modal('hide');

                                collectionLines = new wijmo.collections.CollectionView(getCollectionLines());

                                // Flex Grid for Items
                                collectionLineGrid.itemsSource = collectionLines;
                                collectionLineGrid.trackChanges = true;
                            },
                            404: function () {
                                toastr.error("Can't Update");
                                $('#collectionLineEdit').modal('hide');
                                $("#cmdSaveCollectionLineButton").prop("disabled", false);
                                $("#cmdCollectionLineDetailCloseButton").prop("disabled", false);
                            },
                            400: function () {
                                toastr.error("Bad Request");
                                $('#collectionLineEdit').modal('hide');
                                $("#cmdSaveCollectionLineButton").prop("disabled", false);
                                $("#cmdCollectionLineDetailCloseButton").prop("disabled", false);
                            }
                        }
                    });
                }
            }
        }

        // ===========
        // Get Journal
        // ===========
        function getJournalListForCollection() {
            var journals = new wijmo.collections.ObservableArray;
            var collectonId = getParam("CollectonId");
            //$('#loadingModal').modal('show');
            $.ajax({
                url: '/api/listJournalByORId/' + collectonId,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (Results) {
                    //$('#loadingModal').modal('hide');
                    if (Results.length > 0) {
                        for (i = 0; i < Results.length; i++) {
                            journals.push({
                                //EditId: "<button class='btn btn-primary btn-xs btn-block' onclick='cmdJournalVoucherLineEditButton_OnClick()'><i class='fa fa-edit'></i> Edit</button>",
                                //DeleteId: "<button class='btn btn-danger btn-xs btn-block' onclick='cmdJournalVoucherLineDeleteButton_OnClick()'><i class='fa fa-trash'></i> Delete</button>",
                                Id: Results[i]["Id"],
                                JournalDate: Results[i]["JournalDate"],
                                BranchId: Results[i]["BranchId"],
                                Branch: Results[i]["Branch"],
                                AccountId: Results[i]["AccountId"],
                                AccountCode: Results[i]["AccountCode"],
                                Account: Results[i]["Account"],
                                ArticleId: Results[i]["ArticleId"],
                                Article: Results[i]["Article"],
                                Particulars: Results[i]["Particulars"],
                                DebitAmount: Results[i]["DebitAmount"],
                                CreditAmount: Results[i]["CreditAmount"],
                                ORId: Results[i]["ORId"],
                                CVId: Results[i]["CVId"],
                                JVId: Results[i]["JVId"],
                                RRId: Results[i]["RRId"],
                                SIId: Results[i]["SIId"],
                                INId: Results[i]["INId"],
                                OTId: Results[i]["OTId"],
                                STId: Results[i]["STId"],
                                DocumentReference: Results[i]["DocumentReference"],
                                APRRId: Results[i]["APRRId"],
                                ARSIId: Results[i]["ARSIId"]
                            });

                            var debitAmountTotal = 0;
                            var creditAmountTotal = 0;

                            var a = 0;
                            while (a < Results.length) {
                                debitAmountTotal += Results[a]["DebitAmount"];
                                creditAmountTotal += Results[a]["CreditAmount"];
                                a++;
                            }
                        }

                        document.getElementById('totalDebitInJournal').innerHTML = debitAmountTotal.toLocaleString();
                        document.getElementById('totalCreditInJournal').innerHTML = creditAmountTotal.toLocaleString();
                        var variance = debitAmountTotal - creditAmountTotal;
                        document.getElementById('variance').innerHTML = variance.toLocaleString();
                    }
                }
            }).fail(function (xhr, textStatus, err) {
                alert(err);
            });
            return journals;
        }

        // ============
        // Journal List
        // ============
        function btnJournalDetail_OnClick() {
            journals = new wijmo.collections.CollectionView(getJournalListForCollection());
            journals.pageSize = 10;

            document.getElementById("loadingJournalGridList").innerHTML = '<i class="fa fa-spinner fa-spin"></i> Loading Journal...';

            $("#loadingJournalGridList").show();
            $("#journal_Content").hide();
            setTimeout(function () {
                $("#loadingJournalGridList").hide();
                $("#journal_Content").show();
                // Flex Grid
                journalListGrid = new wijmo.grid.FlexGrid('#journalListGrid');
                journalListGrid.initialize({
                    columns: [
                                {
                                    "header": "Branch",
                                    "binding": "Branch",
                                    "allowSorting": true,
                                    "width": 150
                                },
                                {
                                    "header": "Code",
                                    "binding": "AccountCode",
                                    "allowSorting": true,
                                    "width": 60
                                },
                                {
                                    "header": "Account",
                                    "binding": "Account",
                                    "allowSorting": true,
                                    "width": 200
                                },
                                {
                                    "header": "Article",
                                    "binding": "Article",
                                    "allowSorting": true,
                                    "width": 162
                                },
                                {
                                    "header": "Debit",
                                    "binding": "DebitAmount",
                                    "allowSorting": true,
                                    "width": 130
                                }
                                ,
                                {
                                    "header": "Credit",
                                    "binding": "CreditAmount",
                                    "allowSorting": true,
                                    "width": 130
                                },
                                {
                                    "header": "Date",
                                    "binding": "JournalDate",
                                    "allowSorting": true,
                                    "width": 80,
                                }
                    ],
                    autoGenerateColumns: false,
                    itemsSource: journals,
                    isReadOnly: true,
                    autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                    allowDragging: wijmo.grid.AllowDragging.None,
                    selectionMode: wijmo.grid.SelectionMode.Row
                });

                journalListGrid.trackChanges = true;
            }, 1000);
        }

        $('#cmdCollectionJournal').click(function () {
            $('#journalDetail').modal({
                show: true,
                backdrop: 'static'
            });

            window.btnJournalDetail_OnClick = function () {
                return true;
            };
        });

        // ==
        // AR
        // ==
        function collectionAR_OnClick() {
            $('#SalesStatus').modal({
                show: true,
                backdrop: 'static'
            });

            emptyBalance = true;

            document.getElementById("loadingSIStatus").innerHTML = "<b><i class='fa fa-spinner fa-spin'></i></b>";
            $('#loadingSIStatus').show();
            $('#btnIdApplyAllSI').hide();
            $('#salesInvoiceStatusGrid').hide();
            $('#statusGrid').hide();
            setTimeout(function () {
                $('#loadingSIStatus').hide();
                $('#btnIdApplyAllSI').show();
                $('#salesInvoiceStatusGrid').show();
                $('#statusGrid').show();

                getReceivingStatusGrid();
                window.getReceivingStatusGrid = function () {
                    return true;
                };

                saleInvoiceStatus = new wijmo.collections.CollectionView(getSalesInvoiceBySupplierByBalance());
                saleInvoiceStatus.canFilter = true;

                var filterText = '';
                $('#SIStatusFilter').keyup(function () {
                    filterText = this.value.toLowerCase();
                    saleInvoiceStatus.refresh();
                });

                saleInvoiceStatus.filter = function (item) {
                    return !filterText || (item.SINumber.toLowerCase().indexOf(filterText) > -1)
                    || (item.ManualSINumber.toLowerCase().indexOf(filterText) > -1);
                }

                // Flex Grid for Purchase Disbursement Line
                SIStatusGrid.itemsSource = saleInvoiceStatus;
                SIStatusGrid.trackChanges = true;
            }, 1000);
        }

        // ========
        // Advances
        // ========
        function collectionAdvances_OnClick() {
            $('#customerAdvances').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById("loadingSIAdvances").innerHTML = "<b><i class='fa fa-spinner fa-spin'></i></b>";
            $('#loadingSIAdvances').show();
            $('#SIAdvancesGrid').hide();
            setTimeout(function () {
                $('#loadingSIAdvances').hide();
                $('#SIAdvancesGrid').show();

                getSIAdvancesGrid();
                window.getSIAdvancesGrid = function () {
                    return true;
                };

                journalAdvances = new wijmo.collections.CollectionView(getJournalByArticleId());

                // Flex Grid for Purchase Disbursement Line
                SIAdvancesGrid.itemsSource = journalAdvances;
                SIAdvancesGrid.trackChanges = true;
            }, 1000);

        }

        // ===========
        // OnLoad Page
        // ===========
        $(document).ready(function () {
            var collectonId = getParam("CollectonId");
            if (document.location.search.length == 0) {
                $('#cmdCollectionJournal').hide();
                $('#cmdCollectionSaveLock').hide();
                $('#cmdCollectionSave').show();
                $('#cmdCollectionEdit').hide();
                $("#cmdCollectionPrint").prop("disabled", true);
                $('#btnAddCollectionLine').prop('disabled', true);

            } else {
                $('#cmdCollectionSaveLock').show();
                $('#cmdCollectionSave').hide();
                $('#cmdCollectionEdit').show();
            }

            cboCollectionBranch = new wijmo.input.ComboBox('#collectionLine_branch');
            cboCollectionLinePayType = new wijmo.input.ComboBox('#collectionLine_payType');
            cboCollectionLineSI = new wijmo.input.ComboBox('#collectionLine_SINo');
            cboCollectionLineAccountCode = new wijmo.input.ComboBox('#collectionLine_accountCode');
            cboCollectionLineAccount = new wijmo.input.ComboBox('#collectionLine_account');
            cboCollectionLineArticle = new wijmo.input.ComboBox('#collectionLine_article');
            cboCollectionArticleBank = new wijmo.input.ComboBox('#collectionLine_depositoryBank');

            var d = new Date();
            document.getElementById("collectionLine_checkDate_data").value = [d.getMonth() + 1, d.getDate(), d.getFullYear()].join('/');
            CheckedDate = new wijmo.input.InputDate('#collectionLine_checkDate', {
                format: 'MM/dd/yyyy',
                value: new Date(),
                mask: '99/99/9999',
                onValueChanged: function () {
                    document.getElementById('collectionLine_checkDate_data').value = this.value.toLocaleDateString();
                }
            });

            document.getElementById('collection_ORNumber_Display').disabled = true;
            //document.getElementById('collection_Lock').disabled = true;

            cboBranch = new wijmo.input.ComboBox('#collection_Branch');
            cboCustomer = new wijmo.input.ComboBox('#collection_Customer');
            cboPreparedBy = new wijmo.input.ComboBox('#collection_PreparedBy');
            cboCheckedBy = new wijmo.input.ComboBox('#collection_CheckedBy');
            cboApprovedBy = new wijmo.input.ComboBox('#collection_ApprovedBy');

            var d = new Date();
            document.getElementById("collection_ORDate_data").value = [d.getMonth() + 1, d.getDate(), d.getFullYear()].join('/');
            ORDate = new wijmo.input.InputDate('#collection_ORDate', {
                format: 'MM/dd/yyyy',
                value: new Date(),
                mask: '99/99/9999',
                onValueChanged: function () {
                    document.getElementById('collection_ORDate_data').value = this.value.toLocaleDateString();
                }
            });

            getCollectionById();

            var collectonId = getParam("CollectonId");
            if (document.location.search.length == 0) {

                getBranchesForComboBox();
                getCustomerForComboBox();
                getUsersForComboBox();
                document.getElementById('cmdAR').disabled = true;
                document.getElementById('cmdAdvances').disabled = true;

                if (document.getElementById('collection_ORNumber').value == 0) {
                    document.getElementById('collection_ORNumber_Display').value = "0000000001";
                }

                document.getElementById('collection_ORNumber').value = 0;
                var collections = new wijmo.collections.ObservableArray;
                $.ajax({
                    url: '/api/collectionLastORNumber',
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    data: {},
                    success: function (Results) {
                        if (Results != null) {
                            var OR_Number = parseInt(Results.ORNumber);
                            var OR_Number_PlusOne = 0000000001;
                            var OR_Num_Results = OR_Number + OR_Number_PlusOne;

                            document.getElementById('collection_ORNumber').value = zerofill(OR_Num_Results, 10);
                            document.getElementById('collection_ORNumber_Display').value = zerofill(OR_Num_Results, 10);
                        }
                    }
                });
            }

            collectionLines = new wijmo.collections.CollectionView(getCollectionLines());

            // Flex Grid for Purchase Collection Line
            collectionLineGrid = new wijmo.grid.FlexGrid('#CollectionLineGrid');
            collectionLineGrid.initialize({
                columns: [
                            {
                                "header": "Edit",
                                "binding": "EditId",
                                "width": 60,
                                "align": "center",
                                "allowResizing": false,
                                "allowSorting": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Delete",
                                "binding": "DeleteId",
                                "width": 70,
                                "align": "center",
                                "allowResizing": false,
                                "allowSorting": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Branch",
                                "binding": "Branch",
                                "allowSorting": true,
                                "width": 150
                            },
                            {
                                "header": "Pay Type",
                                "binding": "PayType",
                                "allowSorting": true,
                                "width": 150
                            },
                            {
                                "header": "Particulars",
                                "binding": "Particulars",
                                "allowSorting": true,
                                "width": 170
                            },
                            {
                                "header": "SI No.",
                                "binding": "SI",
                                "allowSorting": true,
                                "width": 110
                            },
                            {
                                "header": "Amount",
                                "binding": "Amount",
                                "allowSorting": true,
                                "width": 100
                            },
                            {
                                "header": "Account",
                                "binding": "Account",
                                "allowSorting": true,
                                "width": 170
                            },
                            {
                                "header": "Article",
                                "binding": "Article",
                                "allowSorting": true,
                                "width": 160
                            },
                            {
                                "header": "Check No.",
                                "binding": "CheckNumber",
                                "allowSorting": true,
                                "width": 100
                            },
                           {
                               "header": "Check Date",
                               "binding": "CheckDate",
                               "allowSorting": true,
                               "width": 100
                           },
                           {
                               "header": "Check Bank",
                               "binding": "CheckBank",
                               "allowSorting": true,
                               "width": 150
                           },
                           {
                               "header": "Depository Bank",
                               "binding": "DepositoryBank",
                               "allowSorting": true,
                               "width": 150
                           },
                           {
                               "header": "Clear",
                               "binding": "IsClear",
                               "allowSorting": true,
                               "width": 50
                           }
                ],
                autoGenerateColumns: false,
                itemsSource: collectionLines,
                isReadOnly: true,
                frozenColumns: 2,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            collectionLineGrid.trackChanges = true;

            $(document).on('show.bs.modal', '.modal', function (event) {
                var zIndex = 1040 + (10 * $('.modal:visible').length);
                $(this).css('z-index', zIndex);
                setTimeout(function () {
                    $('.modal-backdrop').not('.modal-stack').css('z-index', zIndex - 1).addClass('modal-stack');
                }, 0);
            });

            $(document).on('hidden.bs.modal', '.modal', function () {
                $('.modal:visible').length && $(document.body).addClass('modal-open');
            });

            $(document).ajaxStop(function () {
                if (document.location.search.length == 0) {
                    btnCollectionSave_OnClick();
                    window.btnCollectionSave_OnClick = function () {
                        return true;
                    }
                }
            });
        });
    </script>
</body>
</html>