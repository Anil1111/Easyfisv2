<!DOCTYPE html>
<html>
<head>
    <!-- Meta -->
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">

    <!-- Title of the Page -->
    <link rel="shortcut icon" href="~/Images/icon/easyfislogomini.ico">
    <title>Accounts Receivable Report</title>

    <!-- CSS StyleSheets-->
    @Styles.Render("~/Content/Software-css")
</head>
<body class="">

    <div id="o-wrapper" class="o-wrapper">
        <main class="o-content">
            @Html.Partial("_SoftwareHeader")
            <section class="content-header">
                <div class="container">
                    <h3>
                        Accounts Receivable Report 
                    </h3>
                    <p>
                        <i class="fa fa-building-o fa-fw"></i> &nbsp; @ViewData["Company"] <br />
                        <i class="fa fa-home fa-fw"></i> &nbsp; @ViewData["Branch"]
                    </p>
                </div>
            </section>
            <section class="container">
                <div class="panel panel-default">
                    <div class="panel-heading">
                        <table style="width: 100%" border="0">
                            <tr>
                                <td style="width: 59%">
                                    <div class="input-group ">
                                        <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                        <input type="text" class="form-control " id="InputFilter" placeholder="Search">
                                    </div>
                                </td>
                                <td style="width: 1%"></td>
                                <td style="width: 40%" align="right">
                                    <button onclick="accountsReceivableReportCSVOnclick()" class="btn btn-primary "><i class="fa fa-file-excel-o" aria-hidden="true"></i> CSV</button>
                                    <button onclick="accountsReceivableReportPDFOnclick()" class="btn btn-primary "><i class="fa fa-print"></i> Print</button>
                                    <a href="/Software/AccountsReceivable" class="btn btn-danger "><i class="fa fa-close"></i> Close</a>
                                </td>
                            </tr>
                        </table>
                    </div>
                    <div class="panel-heading">
                        <table style="width: 100%" border="0">
                            <tr>
                                <td style="width: 59%">
                                    <div class="input-group ">
                                        <span class="input-group-addon">Filter Company</span>
                                        <input type="text" class="form-control " id="companyname" placeholder="filter company" disabled>
                                    </div>
                                </td>
                                <td style="width: 1%"></td>
                                <td style="width: 20%" align="right">
                                    <div class="input-group ">
                                        <span class="input-group-addon">Date as of</span>
                                        <input type="text" class="form-control " id="dateAsOf" placeholder="Date as of" disabled>
                                    </div>
                                </td>
                                <td style="width: 20%"></td>
                            </tr>
                        </table>
                    </div>
                    <div class="panel-body">
                        <div id="accountsReceivableGrid" class="grid"></div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6"></div>
                    <div class="col-md-6">
                        <table class="table table-responsive table-bordered">
                            <tr>
                                <td align="right">
                                    <b>Total Balance: </b>
                                </td>
                                <td style="padding-left: 10px" align="right">
                                    <span id="totalBalance">NA</span>
                                </td>
                            </tr>
                            <tr>
                                <td align="right">
                                    <b>Total Current Amount: </b>
                                </td>
                                <td style="padding-left: 10px" align="right">
                                    <span id="totalCurrentAmount">NA</span>
                                </td>
                            </tr>
                            <tr>
                                <td align="right">
                                    <b>Total Amount in 30 Days: </b>
                                </td>
                                <td style="padding-left: 10px" align="right">
                                    <span id="totalAmount30Days">NA</span>
                                </td>
                            </tr>
                            <tr>
                                <td align="right">
                                    <b>Total Amount in 60 Days: </b>
                                </td>
                                <td style="padding-left: 10px" align="right">
                                    <span id="totalAmount60Days">NA</span>
                                </td>
                            </tr>
                            <tr>
                                <td align="right">
                                    <b>Total Amount in 90 Days: </b>
                                </td>
                                <td style="padding-left: 10px" align="right">
                                    <span id="totalAmount90Days">NA</span>
                                </td>
                            </tr>
                            <tr>
                                <td align="right">
                                    <b>Total Amount Over 120 Days: </b>
                                </td>
                                <td style="padding-left: 10px" align="right">
                                    <span id="totalAmountOver120Days">NA</span>
                                </td>
                            </tr>
                        </table>
                    </div>
                </div>
            </section>
            @Html.Partial("_SoftwareFooter")
        </main>
    </div>

    <div id="c-mask" class="c-mask"></div><!-- /c-mask -->
    @Scripts.Render("~/Scripts/Software-js")
    <script type="text/javascript">
        var accountsReceivableGrid;

        function getParam(name) {
            name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
            var regexS = "[\\?&]" + name + "=([^&#]*)";
            var regex = new RegExp(regexS);
            var results = regex.exec(window.location.href);
            if (results == null)
                return "";
            else
                return results[1];
        }

        function getAccountsReceivable() {
            NProgress.start();
            var accountsReceivables = new wijmo.collections.ObservableArray;
            document.getElementById("dateAsOf").value = getParam("DateAsOf");
            $.ajax({
                url: '/api/accountsReceivable/list/' + getParam("DateAsOf") + "/" + getParam("CompanyId"),
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (accountsReceivableResults) {
                    if (accountsReceivableResults.length > 0) {
                        var totalBalance = 0;
                        var totalCurrentAmount = 0;
                        var totalAge30Amount = 0;
                        var totalAge60Amount = 0;
                        var totalAge90Amount = 0;
                        var totalAge120Amount = 0;

                        for (i = 0; i < accountsReceivableResults.length; i++) {
                            var docLink = "/Software/SalesDetail?SalesId=" + accountsReceivableResults[i]["Id"];

                            totalBalance = totalBalance + accountsReceivableResults[i]["BalanceAmount"];
                            totalCurrentAmount = totalCurrentAmount + accountsReceivableResults[i]["CurrentAmount"];
                            totalAge30Amount = totalAge30Amount + accountsReceivableResults[i]["Age30Amount"];
                            totalAge60Amount = totalAge60Amount + accountsReceivableResults[i]["Age60Amount"];
                            totalAge90Amount = totalAge90Amount + accountsReceivableResults[i]["Age90Amount"];
                            totalAge120Amount = totalAge120Amount + accountsReceivableResults[i]["Age120Amount"];

                            accountsReceivables.push({
                                Id: accountsReceivableResults[i]["Id"],
                                AccountId: accountsReceivableResults[i]["AccountId"],
                                AccountCode: accountsReceivableResults[i]["AccountCode"],
                                Account: accountsReceivableResults[i]["AccountCode"] + "-" + accountsReceivableResults[i]["Account"],
                                CustomerId: accountsReceivableResults[i]["CustomerId"],
                                Customer: accountsReceivableResults[i]["Customer"],
                                SINumber: "<a href='" + docLink + "' class='btn btn-default btn-xs btn-block' style='text-align: left'>" + accountsReceivableResults[i]["SINumber"] + "</a>",
                                SINumberValue: accountsReceivableResults[i]["SINumber"],
                                SINumberValue: "SI-" + accountsReceivableResults[i]["SINumber"],
                                SIDate: accountsReceivableResults[i]["SIDate"],
                                DocumentReference: accountsReceivableResults[i]["DocumentReference"],
                                BalanceAmount: accountsReceivableResults[i]["BalanceAmount"],
                                DueDate: accountsReceivableResults[i]["DueDate"],
                                NumberOfDaysFromDueDate: accountsReceivableResults[i]["NumberOfDaysFromDueDate"],
                                CurrentAmount: accountsReceivableResults[i]["CurrentAmount"],
                                Age30Amount: accountsReceivableResults[i]["Age30Amount"],
                                Age60Amount: accountsReceivableResults[i]["Age60Amount"],
                                Age90Amount: accountsReceivableResults[i]["Age90Amount"],
                                Age120Amount: accountsReceivableResults[i]["Age120Amount"],
                            });
                        }

                        document.getElementById("totalBalance").innerHTML = (Math.round(totalBalance * 100) / 100).toLocaleString();
                        document.getElementById("totalCurrentAmount").innerHTML = (Math.round(totalCurrentAmount * 100) / 100).toLocaleString();
                        document.getElementById("totalAmount30Days").innerHTML = (Math.round(totalAge30Amount * 100) / 100).toLocaleString();
                        document.getElementById("totalAmount60Days").innerHTML = (Math.round(totalAge60Amount * 100) / 100).toLocaleString();
                        document.getElementById("totalAmount90Days").innerHTML = (Math.round(totalAge90Amount * 100) / 100).toLocaleString();
                        document.getElementById("totalAmountOver120Days").innerHTML = (Math.round(totalAge120Amount * 100) / 100).toLocaleString();
                    }

                    NProgress.done();
                }
            });

            return accountsReceivables;
        }
        var accountsReceivableCollection;

        function accountsReceivableReportCSVOnclick() {


            var CSV = '';
            var accountReceivable = [];
            var fileName = 'AccountReceivableReport.CSV';

            for (i = 0; i < accountsReceivableCollection.items.length; i++) {
                accountReceivable.push({
                    SINumberValue: accountsReceivableCollection.items[i].SINumberValue,
                    Account: accountsReceivableCollection.items[i].Account,
                    Customer: accountsReceivableCollection.items[i].Customer,
                    SIDate: accountsReceivableCollection.items[i].SIDate,
                    DocumentReference: accountsReceivableCollection.items[i].DocumentReference,
                    DueDate: accountsReceivableCollection.items[i].DueDate,
                    BalanceAmount: accountsReceivableCollection.items[i].BalanceAmount,
                    CurrentAmount: accountsReceivableCollection.items[i].CurrentAmount,
                    CurrentAmount: accountsReceivableCollection.items[i].CurrentAmount,
                    Age30Amount: accountsReceivableCollection.items[i].Age30Amount,
                    Age60Amount: accountsReceivableCollection.items[i].Age60Amount,
                    Age90Amount: accountsReceivableCollection.items[i].Age90Amount,
                    Age120Amount: accountsReceivableCollection.items[i].Age120Amount
                });
            }

            //for (var i = 0; i < symbols.length; i++) {
            //    CSV += '"' + symbols[i].AccountCode + '"\r\n';
            //}

            var Headers = [];
            Headers.push({

                SINumberValue: "SI Number",
                Account: "Account",
                Customer: "Customer",
                SIDate: "SI Date",
                DocumentReference: "Document Reference",
                DueDate: "DueDate",
                BalanceAmount: "Balance",
                CurrentAmount: "Current",
                Age30Amount: "30 Days",
                Age60Amount: "60 Days",
                Age90Amount: "90 Days",
                Age120Amount: "120 Days"


            });

            var header = '';
            // Rows
            for (var b in Headers[0]) {
                header += '"' + Headers[0][b] + '",';
            }

            CSV = header + '\r\n';
            for (var i = 0; i < accountReceivable.length; i++) {
                var row = '';
                for (var a in accountReceivable[i]) {
                    row += '"' + accountReceivable[i][a] + '",';
                }
                row.slice(0, row.length - 1);
                CSV += row + '\r\n';
            }

            if (CSV == '') {
                toastr.error("No data.");
            } else {
                var link = document.createElement("a");

                if (link.download !== undefined) {
                    var blob = new Blob([CSV], { type: 'text/csv;charset=utf-8;' });
                    var url = URL.createObjectURL(blob);
                    link.setAttribute("href", url);
                    link.setAttribute("download", fileName);
                    link.style = "visibility:hidden";
                }

                if (navigator.msSaveBlob) {
                    link.addEventListener("click", function (event) {
                        var blob = new Blob([CSV], {
                            "type": "text/csv;charset=utf-8;"
                        });
                        navigator.msSaveBlob(blob, fileName);
                    }, false);
                }

                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);

                toastr.success("Dowload successful.");
            }
        }

        function accountsReceivableReportPDFOnclick() {
            window.location.href = '/RepAccountsReceivable/AccountsReceivable?DateAsOf=' + getParam("DateAsOf") + '&CompanyId=' + getParam("CompanyId");
        }

        $(document).ready(function () {
            $.ajax({
                url: '/api/company/' + getParam("CompanyId"),
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (companyResults) {
                    document.getElementById("companyname").value = companyResults.Company;
                }
            });

            accountsReceivableCollection = new wijmo.collections.CollectionView(getAccountsReceivable());
            accountsReceivableCollection.canFilter = true;

            var filterText = '';
            $('#InputFilter').keyup(function () {
                filterText = this.value.toLowerCase();
                accountsReceivableCollection.refresh();
            });
            accountsReceivableCollection.filter = function (item) {
                return !filterText || (item.Account.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Customer.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.SINumberValue.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.DocumentReference.toLowerCase().indexOf(filterText) > -1);
            }
            // Flex Grid
            accountsReceivableGrid = new wijmo.grid.FlexGrid('#accountsReceivableGrid');
            accountsReceivableGrid.initialize({
                columns: [
                    {
                        "header": "SI Number",
                        "binding": "SINumber",
                        "allowSorting": true,
                        "width": 120,
                        "allowResizing": false,
                        "allowSorting": false,
                        "isContentHtml": true
                    },
                    {
                        "header": "Account",
                        "binding": "Account",
                        "allowSorting": true,
                        "width": 220
                    },
                    {
                        "header": "Customer",
                        "binding": "Customer",
                        "allowSorting": true,
                        "width": 250,

                    },
                    {
                        "header": "SI Date",
                        "binding": "SIDate",
                        "allowSorting": true,
                        "width": 90
                    },
                    {
                        "header": "Document Ref.",
                        "binding": "DocumentReference",
                        "allowSorting": true,
                        "width": 204,
                    },
                    {
                        "header": "Due Date",
                        "binding": "DueDate",
                        "allowSorting": true,
                        "width": 110
                    },
                    {
                        "header": "Balance",
                        "binding": "BalanceAmount",
                        "allowSorting": true,
                        "width": 135
                    },
                    {
                        "header": "Current",
                        "binding": "CurrentAmount",
                        "allowSorting": true,
                        "width": 135
                    },
                    {
                        "header": "30 Days",
                        "binding": "Age30Amount",
                        "allowSorting": true,
                        "width": 120
                    },
                    {
                        "header": "60 Days",
                        "binding": "Age60Amount",
                        "allowSorting": true,
                        "width": 120
                    },
                    {
                        "header": "90 Days",
                        "binding": "Age90Amount",
                        "allowSorting": true,
                        "width": 120
                    },
                    {
                        "header": "Over 120 Days",
                        "binding": "Age120Amount",
                        "allowSorting": true,
                        "width": 120
                    },
                ],
                autoGenerateColumns: false,
                itemsSource: accountsReceivableCollection,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            accountsReceivableGrid.trackChanges = true;
        });
    </script>
    <script type="text/javascript">
        var slideLeft = new Menu({
            wrapper: '#o-wrapper',
            type: 'slide-left',
            menuOpenerClass: '.c-button',
            maskId: '#c-mask'
        });

        var slideLeftBtn = document.querySelector('#c-button--slide-left');

        slideLeftBtn.addEventListener('click', function (e) {
            e.preventDefault;
            slideLeft.open();
        });
    </script>

</body>
</html>