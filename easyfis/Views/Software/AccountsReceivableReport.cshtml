<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">
    <link rel="shortcut icon" href="~/Images/icon/easyfislogomini.ico">
    <title>Accounts Receivable Report</title>

    @Styles.Render("~/Content/Software-css")
</head>
<body>
    <div id="o-wrapper" class="o-wrapper">
        <main class="o-content">
            @Html.Partial("_SoftwareHeader")

            <section class="content-header">
                <div class="container">
                    <h3>
                        Accounts Receivable Report
                    </h3>
                    <p>
                        <i class="fa fa-building-o fa-fw"></i> &nbsp; @ViewData["Company"] <br />
                        <i class="fa fa-home fa-fw"></i> &nbsp; <a href="#" onclick="getUserBranches()" style="color: white;">@ViewData["Branch"]</a>
                    </p>
                </div>
            </section>
            <section class="container">
                <div class="panel panel-default">

                    <!--
                        ========================================
                        Input Filters and Display Number of Rows
                        ========================================
                    -->
                    <div class="panel-heading">
                        <table style="width: 100%" border="0">
                            <tr>
                                <td style="width: 49.5%">
                                    <div class="input-group ">
                                        <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                        <input type="text" class="form-control" id="inpAccountsReceivableReportSeachFilter" placeholder="Search...">
                                    </div>
                                </td>
                                <td style="width: 1%"></td>
                                <td style="width: 24%">
                                    <div class="input-group">
                                        <span class="input-group-addon"><b><i class="fa fa-table"></i></b></span>
                                        <div class="comboBox-wide" id="cboAccountsReceivableReportDisplayNumberOfRows"></div>
                                    </div>
                                </td>
                                <td style="width: 1%"></td>
                                <td style="width: 24.5%" align="right">
                                    <button onclick="btnAccountsReceivableReportDownloadCSVOnclick()" id="btnAccountsReceivableReportDownloadCSV" class="btn btn-success"><i class="fa fa-file-excel-o" aria-hidden="true"></i> CSV</button>
                                    <button onclick="btnAccountsReceivableReportPrintPDFOnclick()" id="btnAccountsReceivableReportPrintPDF" class="btn btn-primary"><i class="fa fa-print"></i> Print</button>
                                    <a href="/Software/AccountsReceivable" class="btn btn-danger"><i class="fa fa-close"></i> Close</a>
                                </td>
                            </tr>
                        </table>
                    </div>

                    <!--
                        =========================================
                        Date, Company, Branch amd Account Filters
                        =========================================
                    -->
                    <div class="panel-heading">
                        <table style="width: 100%" border="0">
                            <tr>
                                <td style="width: 24%">
                                    <div class="input-group ">
                                        <span class="input-group-addon"><b>Date as of</b></span>
                                        <div class="comboBox-wide" id="cboAccountsReceivableReportDateAsOfFilter" style="font-size: 12.5px;"></div>
                                    </div>
                                </td>
                                <td style="width: 1%"></td>
                                <td style="width: 24%" align="right">
                                    <div class="input-group ">
                                        <span class="input-group-addon"><b>Company</b></span>
                                        <div class="comboBox-wide" id="cboAccountsReceivableReportCompanyFilter" style="font-size: 12.5px;"></div>
                                    </div>
                                </td>
                                <td style="width: 1%"></td>
                                <td style="width: 24%">
                                    <div class="input-group ">
                                        <span class="input-group-addon"><b>Branch</b></span>
                                        <div class="comboBox-wide" id="cboAccountsReceivableReportBranchFilter" style="font-size: 12.5px;"></div>
                                    </div>
                                </td>
                                <td style="width: 1%"></td>
                                <td style="width: 24%">
                                    <div class="input-group ">
                                        <span class="input-group-addon"><b>Account</b></span>
                                        <div class="comboBox-wide" id="cboAccountsReceivableReportAccountFilter" style="font-size: 12.5px;"></div>
                                    </div>
                                </td>
                            </tr>
                        </table>
                    </div>

                    <!--
                        =========
                        Flex Grid
                        =========
                    -->
                    <div class="panel-body">
                        <div id="accountsReceivableReportFlexGrid" style="font-size: 11.5px;"></div>
                    </div>

                    <!--
                        ==================
                        Navigation Buttons
                        ==================
                    -->
                    <div class="panel-footer">
                        <div class="row">
                            <div class="btn-group col-md-7" id="accountsReceivableReportNavigationPageGrid">
                                <button type="button" class="btn btn-default border-custom" id="btnAccountsReceivableReportMoveToFirstPageGrid">
                                    <span class="glyphicon glyphicon-fast-backward"></span>
                                </button>
                                <button type="button" class="btn btn-default border-custom" id="btnAccountsReceivableReportMoveToPreviousPageGrid">
                                    <span class="glyphicon glyphicon-step-backward"></span>
                                </button>
                                <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnAccountsReceivableReportCurrentPageGrid"></button>
                                <button type="button" class="btn btn-default border-custom" id="btnAccountsReceivableReportMoveToNextPageGrid">
                                    <span class="glyphicon glyphicon-step-forward"></span>
                                </button>
                                <button type="button" class="btn btn-default border-custom" id="btnAccountsReceivableReportMoveToLastPageGrid">
                                    <span class="glyphicon glyphicon-fast-forward"></span>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                <!--
                    ======================================
                    Accounts Receivable Report Totals (Aging)
                    ======================================
                -->
                <div class="panel panel-default">
                    <div class="panel-body">
                        <div class="row">
                            <div class="col-md-6"></div>
                            <div class="col-md-6">
                                <dl class="dl-horizontal dl-custom">
                                    <dt>
                                        <b>Total Balance</b>
                                    </dt>
                                    <dd>
                                        <input type="text" class="form-control numberField" id="inpTotalBalance" placeholder="0.00" disabled />
                                    </dd>
                                    <dt>
                                        <b>Total Current Amount</b>
                                    </dt>
                                    <dd>
                                        <input type="text" class="form-control numberField" id="inpTotalCurrentAmount" placeholder="0.00" disabled />
                                    </dd>
                                    <dt>
                                        <b>Total Amount in 30 Days</b>
                                    </dt>
                                    <dd>
                                        <input type="text" class="form-control numberField" id="inpTotalAmount30Days" placeholder="0.00" disabled />
                                    </dd>
                                    <dt>
                                        <b>Total Amount in 60 Days</b>
                                    </dt>
                                    <dd>
                                        <input type="text" class="form-control numberField" id="inpTotalAmount60Days" placeholder="0.00" disabled />
                                    </dd>
                                    <dt>
                                        <b>Total Amount in 90 Days</b>
                                    </dt>
                                    <dd>
                                        <input type="text" class="form-control numberField" id="inpTotalAmount90Days" placeholder="0.00" disabled />
                                    </dd>
                                    <dt>
                                        <b>Total Amount Over 120 Days</b>
                                    </dt>
                                    <dd>
                                        <input type="text" class="form-control numberField" id="inpTotalAmountOver120Days" placeholder="0.00" disabled />
                                    </dd>
                                </dl>
                            </div>
                        </div>
                    </div>
                </div>
            </section>

            @Html.Partial("_SoftwareFooter")
        </main>
    </div>
    <div id="c-mask" class="c-mask"></div>

    @Scripts.Render("~/Scripts/Software-js")
    <script type="text/javascript">
        // ===========
        // Filter Date
        // ===========
        var cboAccountsReceivableReportDateAsOfFilter = new wijmo.input.InputDate('#cboAccountsReceivableReportDateAsOfFilter');
        var isCboDateAsOfFilterSelected = true;

        // ==============
        // Filter Company
        // ==============
        var cboAccountsReceivableReportCompanyFilter = new wijmo.input.ComboBox('#cboAccountsReceivableReportCompanyFilter');
        var isCboCompanyFilterSelected = false;

        // =============
        // Filter Branch
        // =============
        var cboAccountsReceivableReportBranchFilter = new wijmo.input.ComboBox('#cboAccountsReceivableReportBranchFilter');

        // ==============
        // Filter Account
        // ==============
        var cboAccountsReceivableReportAccountFilter = new wijmo.input.ComboBox('#cboAccountsReceivableReportAccountFilter');

        // =================================================
        // Accounts Receivable Collection View and Flex Grid
        // =================================================
        var accountsReceivableReportCollectionView;
        var accountsReceivableReportFlexGrid;
        var cboAccountsReceivableReportDisplayNumberOfRows = new wijmo.input.ComboBox('#cboAccountsReceivableReportDisplayNumberOfRows');
        var ifAccountsReceivableReportHasData = false;

        // =================
        // Navigation Button
        // =================
        var btnAccountsReceivableReportMoveToFirstPageGrid = document.getElementById('btnAccountsReceivableReportMoveToFirstPageGrid');
        var btnAccountsReceivableReportMoveToPreviousPageGrid = document.getElementById('btnAccountsReceivableReportMoveToPreviousPageGrid');
        var btnAccountsReceivableReportMoveToNextPageGrid = document.getElementById('btnAccountsReceivableReportMoveToNextPageGrid');
        var btnAccountsReceivableReportMoveToLastPageGrid = document.getElementById('btnAccountsReceivableReportMoveToLastPageGrid');
        var btnAccountsReceivableReportCurrentPageGrid = document.getElementById('btnAccountsReceivableReportCurrentPageGrid');
        var accountsReceivableReportCurrentPageIndex = 0;

        // =======================
        // Get URL Parameter Value
        // =======================
        function getURLParameterValue(name) {
            name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");

            var regexS = "[\\?&]" + name + "=([^&#]*)";
            var regex = new RegExp(regexS);

            var results = regex.exec(window.location.href);

            if (results == null) {
                return "";
            } else {
                return results[1];
            }
        }

        // ==============================
        // Create Combo Date As of Filter
        // ==============================
        function createCboAccountsReceivableReportDateAsOfFilter() {
            NProgress.start();

            cboAccountsReceivableReportDateAsOfFilter.dispose();
            cboAccountsReceivableReportDateAsOfFilter = new wijmo.input.InputDate('#cboAccountsReceivableReportDateAsOfFilter', {
                format: 'MM-dd-yyyy',
                value: new Date(getURLParameterValue("DateAsOf")),
                onValueChanged: function () {
                    if (isCboDateAsOfFilterSelected) {
                        NProgress.start();
                        refreshAccountsReceivableReportFlexGrid();
                    } else {
                        isCboDateAsOfFilterSelected = false;
                    }
                }
            });

            createCboAccountsReceivableReportCompanyFilter();
        }

        // ===========================
        // Create Combo Company Filter
        // ===========================
        function createCboAccountsReceivableReportCompanyFilter() {
            var companyObservableArray = new wijmo.collections.ObservableArray();

            $.ajax({
                url: '/api/accountsReceivable/dropdown/list/company',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            companyObservableArray.push({
                                Id: results[i]["Id"],
                                Company: results[i]["Company"]
                            });
                        }
                    }

                    var disabled = true;
                    if (results.length > 0) {
                        disabled = false;
                    } else {
                        $("#btnAccountsReceivableReportDownloadCSV").prop("disabled", true);
                        $("#btnAccountsReceivableReportPrintPDF").prop("disabled", true);
                    }

                    cboAccountsReceivableReportCompanyFilter.dispose();
                    cboAccountsReceivableReportCompanyFilter = new wijmo.input.ComboBox('#cboAccountsReceivableReportCompanyFilter', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: companyObservableArray,
                        displayMemberPath: "Company",
                        selectedValuePath: "Id",
                        selectedValue: getURLParameterValue("CompanyId"),
                        onSelectedIndexChanged: function () {
                            NProgress.start();

                            if (ifAccountsReceivableReportHasData) {
                                $("#btnAccountsReceivableReportDownloadCSV").prop("disabled", false);
                                $("#btnAccountsReceivableReportPrintPDF").prop("disabled", false);
                            }

                            isCboCompanyFilterSelected = true;
                            createCboAccountsReceivableReportBranchFilter();
                        }
                    });

                    createCboAccountsReceivableReportBranchFilter();
                }
            });
        }

        // ==========================
        // Create Combo Branch Filter
        // ==========================
        function createCboAccountsReceivableReportBranchFilter() {
            var branchObservableArray = new wijmo.collections.ObservableArray();

            if (cboAccountsReceivableReportCompanyFilter.selectedValue != null) {
                var companyId = cboAccountsReceivableReportCompanyFilter.selectedValue;

                $.ajax({
                    url: '/api/accountsReceivable/dropdown/list/branch/' + companyId,
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    success: function (results) {
                        if (results.length > 0) {
                            for (i = 0; i < results.length; i++) {
                                branchObservableArray.push({
                                    Id: results[i]["Id"],
                                    Branch: results[i]["Branch"]
                                });
                            }
                        }

                        var disabled = true;
                        if (results.length > 0) {
                            disabled = false;
                        } else {
                            $("#btnAccountsReceivableReportDownloadCSV").prop("disabled", true);
                            $("#btnAccountsReceivableReportPrintPDF").prop("disabled", true);
                        }

                        cboAccountsReceivableReportBranchFilter.dispose();
                        cboAccountsReceivableReportBranchFilter = new wijmo.input.ComboBox('#cboAccountsReceivableReportBranchFilter', {
                            disabled: disabled,
                            isEditable: false,
                            itemsSource: branchObservableArray,
                            displayMemberPath: "Branch",
                            selectedValuePath: "Id",
                            selectedValue: getURLParameterValue("BranchId"),
                            onSelectedIndexChanged: function () {
                                NProgress.start();
                                refreshAccountsReceivableReportFlexGrid();
                            }
                        });

                        if (!isCboCompanyFilterSelected) {
                            createCboAccountsReceivableReportAccountFilter();
                        } else {
                            refreshAccountsReceivableReportFlexGrid();
                        }
                    }
                });
            } else {
                cboAccountsReceivableReportBranchFilter.dispose();
                cboAccountsReceivableReportBranchFilter = new wijmo.input.ComboBox('#cboAccountsReceivableReportBranchFilter', {
                    disabled: true,
                    itemsSource: branchObservableArray
                });

                refreshAccountsReceivableReportFlexGrid();
            }
        }

        // ===========================
        // Create Combo Account Filter
        // ===========================
        function createCboAccountsReceivableReportAccountFilter() {
            var accountObservableArray = new wijmo.collections.ObservableArray();

            $.ajax({
                url: '/api/accountsPayable/dropdown/list/customerGroup/account',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            accountObservableArray.push({
                                AccountId: results[i]["AccountId"],
                                AccountCode: results[i]["AccountCode"],
                                Account: results[i]["Account"]
                            });
                        }
                    }

                    var disabled = true;
                    if (results.length > 0) {
                        disabled = false;
                        ifAccountsReceivableReportHasData = true;
                    } else {
                        $("#btnAccountsReceivableReportDownloadCSV").prop("disabled", true);
                        $("#btnAccountsReceivableReportPrintPDF").prop("disabled", true);
                    }

                    cboAccountsReceivableReportAccountFilter.dispose();
                    cboAccountsReceivableReportAccountFilter = new wijmo.input.ComboBox('#cboAccountsReceivableReportAccountFilter', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: accountObservableArray,
                        displayMemberPath: "Account",
                        selectedValuePath: "AccountId",
                        selectedValue: getURLParameterValue("AccountId"),
                        onSelectedIndexChanged: function () {
                            NProgress.start();
                            refreshAccountsReceivableReportFlexGrid();
                        }
                    });

                    createCboAccountsReceivableReportDisplayNumberOfRows();
                }
            });
        }

        // =============================
        // Create Display Number of Rows
        // =============================
        function createCboAccountsReceivableReportDisplayNumberOfRows() {
            var rowsObservableArray = new wijmo.collections.ObservableArray();

            for (var i = 0; i <= 4; i++) {
                var rows = 0;
                var rowsString = "";

                if (i == 0) {
                    rows = 15;
                    rowsString = "Show 15 Rows";
                } else if (i == 1) {
                    rows = 50;
                    rowsString = "Show 50 Rows";
                } else if (i == 2) {
                    rows = 100;
                    rowsString = "Show 100 Rows";
                } else if (i == 3) {
                    rows = 150;
                    rowsString = "Show 150 Rows";
                } else {
                    rows = 200;
                    rowsString = "Show 200 Rows";
                }

                rowsObservableArray.push({
                    rowNumber: rows,
                    rowString: rowsString
                });
            }

            cboAccountsReceivableReportDisplayNumberOfRows.dispose();
            cboAccountsReceivableReportDisplayNumberOfRows = new wijmo.input.ComboBox('#cboAccountsReceivableReportDisplayNumberOfRows', {
                isEditable: false,
                itemsSource: rowsObservableArray,
                displayMemberPath: "rowString",
                selectedValuePath: "rowNumber",
                selectedValue: 50,
                onSelectedIndexChanged: function () {
                    NProgress.start();

                    setTimeout(function () {
                        var numberOfRows = cboAccountsReceivableReportDisplayNumberOfRows.selectedValue;
                        accountsReceivableReportCollectionView.pageSize = parseInt(numberOfRows);
                        accountsReceivableReportCollectionView.refresh();
                        accountsReceivableReportFlexGrid.refresh();

                        NProgress.done();
                    }, 300);
                }
            });

            createAccounstReceivableReportFlexGrid();
        }

        // ===================================
        // Get Accounts Receivable Report Data
        // ===================================
        function getAccountsReceivableReportData() {
            var accountsReceivableObservableArray = new wijmo.collections.ObservableArray;

            if (cboAccountsReceivableReportCompanyFilter.selectedValue != null) {
                if (cboAccountsReceivableReportBranchFilter.selectedValue != null) {
                    if (cboAccountsReceivableReportAccountFilter.selectedValue != null) {

                        var dateAsOf = cboAccountsReceivableReportDateAsOfFilter.value.toLocaleDateString().replace(/\//g, '-');
                        var companyId = cboAccountsReceivableReportCompanyFilter.selectedValue;
                        var branchId = cboAccountsReceivableReportBranchFilter.selectedValue;
                        var accountId = cboAccountsReceivableReportAccountFilter.selectedValue;

                        $.ajax({
                            url: '/api/accountsReceivable/list/' + dateAsOf + "/" + companyId + "/" + branchId + "/" + accountId,
                            cache: false,
                            type: 'GET',
                            contentType: 'application/json; charset=utf-8',
                            success: function (results) {
                                var inpTotalBalance = 0;
                                var inpTotalCurrentAmount = 0;
                                var totalAge30Amount = 0;
                                var totalAge60Amount = 0;
                                var totalAge90Amount = 0;
                                var totalAge120Amount = 0;

                                if (results.length > 0) {
                                    for (i = 0; i < results.length; i++) {
                                        var docLink = "/Software/SalesInvoiceDetail?id=" + results[i]["SIId"];

                                        inpTotalBalance = inpTotalBalance + results[i]["BalanceAmount"];
                                        inpTotalCurrentAmount = inpTotalCurrentAmount + results[i]["CurrentAmount"];
                                        totalAge30Amount = totalAge30Amount + results[i]["Age30Amount"];
                                        totalAge60Amount = totalAge60Amount + results[i]["Age60Amount"];
                                        totalAge90Amount = totalAge90Amount + results[i]["Age90Amount"];
                                        totalAge120Amount = totalAge120Amount + results[i]["Age120Amount"];

                                        var SIDateResult = new Date(results[i]["SIDate"])
                                        var SIDate = ('0' + (SIDateResult.getMonth() + 1)).slice(-2) + '-' + ('0' + SIDateResult.getDate()).slice(-2) + '-' + SIDateResult.getFullYear();

                                        var DueDateResult = new Date(results[i]["DueDate"])
                                        var DueDate = ('0' + (DueDateResult.getMonth() + 1)).slice(-2) + '-' + ('0' + DueDateResult.getDate()).slice(-2) + '-' + DueDateResult.getFullYear();

                                        accountsReceivableObservableArray.push({
                                            BtnDetail: "<a href='" + docLink + "' style='font-size: 9px;' class='btn btn-primary btn-xs btn-block'><i class='fa fa-edit'></i> Detail</a>",
                                            SIId: results[i]["SIId"],
                                            Branch: results[i]["Branch"],
                                            Account: results[i]["Account"],
                                            SINumber: results[i]["SINumber"],
                                            Customer: results[i]["Customer"],
                                            SIDate: SIDate,
                                            DocumentReference: results[i]["DocumentReference"],
                                            DueDate: DueDate,
                                            BalanceAmount: results[i]["BalanceAmount"],
                                            BalanceAmountDisplay: parseFloat(results[i]["BalanceAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                            CurrentAmount: results[i]["CurrentAmount"],
                                            CurrentAmountDisplay: parseFloat(results[i]["CurrentAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                            Age30Amount: results[i]["Age30Amount"],
                                            Age30AmountDisplay: parseFloat(results[i]["Age30Amount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                            Age60Amount: results[i]["Age60Amount"],
                                            Age60AmountDisplay: parseFloat(results[i]["Age60Amount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                            Age90Amount: results[i]["Age90Amount"],
                                            Age90AmountDisplay: parseFloat(results[i]["Age90Amount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                            Age120Amount: results[i]["Age120Amount"],
                                            Age120AmountDisplay: parseFloat(results[i]["Age120Amount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                        });
                                    }
                                }

                                document.getElementById("inpTotalBalance").value = parseFloat(inpTotalBalance).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                                document.getElementById("inpTotalCurrentAmount").value = parseFloat(inpTotalCurrentAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                                document.getElementById("inpTotalAmount30Days").value = parseFloat(totalAge30Amount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                                document.getElementById("inpTotalAmount60Days").value = parseFloat(totalAge60Amount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                                document.getElementById("inpTotalAmount90Days").value = parseFloat(totalAge90Amount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                                document.getElementById("inpTotalAmountOver120Days").value = parseFloat(totalAge120Amount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                                NProgress.done();
                            }
                        });
                    } else {
                        document.getElementById("inpTotalBalance").value = parseFloat(0).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        document.getElementById("inpTotalCurrentAmount").value = parseFloat(0).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        document.getElementById("inpTotalAmount30Days").value = parseFloat(0).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        document.getElementById("inpTotalAmount60Days").value = parseFloat(0).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        document.getElementById("inpTotalAmount90Days").value = parseFloat(0).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        document.getElementById("inpTotalAmountOver120Days").value = parseFloat(0).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        NProgress.done();
                    }
                } else {
                    document.getElementById("inpTotalBalance").value = parseFloat(0).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                    document.getElementById("inpTotalCurrentAmount").value = parseFloat(0).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                    document.getElementById("inpTotalAmount30Days").value = parseFloat(0).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                    document.getElementById("inpTotalAmount60Days").value = parseFloat(0).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                    document.getElementById("inpTotalAmount90Days").value = parseFloat(0).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                    document.getElementById("inpTotalAmountOver120Days").value = parseFloat(0).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                    NProgress.done();
                }
            } else {
                document.getElementById("inpTotalBalance").value = parseFloat(0).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                document.getElementById("inpTotalCurrentAmount").value = parseFloat(0).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                document.getElementById("inpTotalAmount30Days").value = parseFloat(0).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                document.getElementById("inpTotalAmount60Days").value = parseFloat(0).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                document.getElementById("inpTotalAmount90Days").value = parseFloat(0).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                document.getElementById("inpTotalAmountOver120Days").value = parseFloat(0).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                NProgress.done();
            }

            return accountsReceivableObservableArray;
        }

        // ===========================================
        // Create Accounts Receivable Report Flex Grid
        // ===========================================
        function createAccounstReceivableReportFlexGrid() {
            accountsReceivableReportCollectionView = new wijmo.collections.CollectionView(getAccountsReceivableReportData());
            accountsReceivableReportCollectionView.canFilter = true;
            accountsReceivableReportCollectionView.pageSize = cboAccountsReceivableReportDisplayNumberOfRows.selectedValue;

            var filterText = '';
            $('#inpAccountsReceivableReportSeachFilter').keyup(function () {
                filterText = this.value.toLowerCase();
                accountsReceivableReportCollectionView.refresh();
            });

            accountsReceivableReportCollectionView.filter = function (item) {
                return !filterText || (item.SINumber.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Customer.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.DocumentReference.toLowerCase().indexOf(filterText) > -1);
            }

            accountsReceivableReportCollectionView.collectionChanged.addHandler(function (sender, args) {
                updateAccountsReceivableReportNavigateButtons();
            });

            accountsReceivableReportFlexGrid = new wijmo.grid.FlexGrid('#accountsReceivableReportFlexGrid');
            accountsReceivableReportFlexGrid.initialize({
                columns: [
                    {
                        "header": "Detail",
                        "binding": "BtnDetail",
                        "width": 70,
                        "isContentHtml": true
                    },
                    {
                        "header": "SI No.",
                        "binding": "SINumber",
                        "allowSorting": true,
                        "width": 80
                    },
                    {
                        "header": "SI Date",
                        "binding": "SIDate",
                        "allowSorting": true,
                        "width": "0.8*"
                    },
                    {
                        "header": "Customer",
                        "binding": "Customer",
                        "allowSorting": true,
                        "width": "1.2*",
                    },
                    {
                        "header": "Doc. Ref.",
                        "binding": "DocumentReference",
                        "allowSorting": true,
                        "width": "1*",
                    },
                    {
                        "header": "Due Date",
                        "binding": "DueDate",
                        "allowSorting": true,
                        "width": "0.8*"
                    },
                    {
                        "header": "Balance",
                        "binding": "BalanceAmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": "1*"
                    },
                    {
                        "header": "Current",
                        "binding": "CurrentAmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": "1*"
                    },
                    {
                        "header": "30 Days",
                        "binding": "Age30AmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": "1*"
                    },
                    {
                        "header": "60 Days",
                        "binding": "Age60AmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": "1*"
                    },
                    {
                        "header": "90 Days",
                        "binding": "Age90AmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": "1*"
                    },
                    {
                        "header": "Over 120 Days",
                        "binding": "Age120AmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": "1*"
                    }
                ],
                autoGenerateColumns: false,
                itemsSource: accountsReceivableReportCollectionView,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            accountsReceivableReportFlexGrid.trackChanges = true;

            updateAccountsReceivableReportNavigateButtons();

            btnAccountsReceivableReportMoveToFirstPageGrid.addEventListener('click', function () {
                accountsReceivableReportCollectionView.moveToFirstPage();
                accountsReceivableReportCurrentPageIndex = accountsReceivableReportCollectionView.pageIndex + 1;
                updateAccountsReceivableReportNavigateButtons();
            });

            btnAccountsReceivableReportMoveToPreviousPageGrid.addEventListener('click', function () {
                accountsReceivableReportCollectionView.moveToPreviousPage();
                accountsReceivableReportCurrentPageIndex = accountsReceivableReportCollectionView.pageIndex + 1;
                updateAccountsReceivableReportNavigateButtons();
            });

            btnAccountsReceivableReportMoveToNextPageGrid.addEventListener('click', function () {
                accountsReceivableReportCollectionView.moveToNextPage();
                accountsReceivableReportCurrentPageIndex = accountsReceivableReportCollectionView.pageIndex + 1;
                updateAccountsReceivableReportNavigateButtons();
            });

            btnAccountsReceivableReportMoveToLastPageGrid.addEventListener('click', function () {
                accountsReceivableReportCollectionView.moveToLastPage();
                accountsReceivableReportCurrentPageIndex = accountsReceivableReportCollectionView.pageIndex + 1;
                updateAccountsReceivableReportNavigateButtons();
            });
        }

        // ============================================
        // Refresh Accounts Receivable Report Flex Grid
        // ============================================
        function refreshAccountsReceivableReportFlexGrid() {
            accountsReceivableReportCollectionView = new wijmo.collections.CollectionView(getAccountsReceivableReportData());
            accountsReceivableReportCollectionView.canFilter = true;
            accountsReceivableReportCollectionView.pageSize = cboAccountsReceivableReportDisplayNumberOfRows.selectedValue;

            var filterText = '';
            $('#inpAccountsReceivableReportSeachFilter').keyup(function () {
                filterText = this.value.toLowerCase();
                accountsReceivableReportCollectionView.refresh();
            });

            accountsReceivableReportCollectionView.filter = function (item) {
                return !filterText || (item.SINumber.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Customer.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.DocumentReference.toLowerCase().indexOf(filterText) > -1);
            }

            accountsReceivableReportCollectionView.collectionChanged.addHandler(function (sender, args) {
                updateAccountsReceivableReportNavigateButtons();
            });

            accountsReceivableReportFlexGrid.itemsSource = accountsReceivableReportCollectionView;
            accountsReceivableReportFlexGrid.trackChanges = true;
        }

        // ====================================================
        // Update Accounst Receivable Report Navigation Buttons
        // ====================================================
        function updateAccountsReceivableReportNavigateButtons() {
            if (accountsReceivableReportCollectionView.pageSize <= 0) {
                document.getElementById('accountsReceivableReportNavigationPageGrid').style.display = 'none';
                return;
            }

            document.getElementById('accountsReceivableReportNavigationPageGrid').style.display = 'block';

            if (accountsReceivableReportCollectionView.pageIndex === 0) {
                btnAccountsReceivableReportMoveToFirstPageGrid.setAttribute('disabled', 'disabled');
                btnAccountsReceivableReportMoveToPreviousPageGrid.setAttribute('disabled', 'disabled');
                btnAccountsReceivableReportMoveToNextPageGrid.removeAttribute('disabled');
                btnAccountsReceivableReportMoveToLastPageGrid.removeAttribute('disabled');
            } else if (accountsReceivableReportCollectionView.pageIndex === (accountsReceivableReportCollectionView.pageCount - 1)) {
                btnAccountsReceivableReportMoveToFirstPageGrid.removeAttribute('disabled');
                btnAccountsReceivableReportMoveToPreviousPageGrid.removeAttribute('disabled');
                btnAccountsReceivableReportMoveToLastPageGrid.setAttribute('disabled', 'disabled');
                btnAccountsReceivableReportMoveToNextPageGrid.setAttribute('disabled', 'disabled');
            } else {
                btnAccountsReceivableReportMoveToFirstPageGrid.removeAttribute('disabled');
                btnAccountsReceivableReportMoveToPreviousPageGrid.removeAttribute('disabled');
                btnAccountsReceivableReportMoveToNextPageGrid.removeAttribute('disabled');
                btnAccountsReceivableReportMoveToLastPageGrid.removeAttribute('disabled');
            }

            btnAccountsReceivableReportCurrentPageGrid.innerHTML = (accountsReceivableReportCollectionView.pageIndex + 1) + ' / ' + accountsReceivableReportCollectionView.pageCount;
        }

        // =======================================
        // Download Accounts Receivable Report CSV
        // =======================================
        function btnAccountsReceivableReportDownloadCSVOnclick() {
            var CSV = '';
            var accountReceivables = [];
            var fileName = 'AccountsReceivableReport.CSV';

            accountsReceivableReportCollectionView.moveToFirstPage();

            for (var p = 1; p <= accountsReceivableReportCollectionView.pageCount; p++) {
                for (i = 0; i < accountsReceivableReportCollectionView.items.length; i++) {
                    accountReceivables.push({
                        Branch: accountsReceivableReportCollectionView.items[i].Branch,
                        Account: accountsReceivableReportCollectionView.items[i].Account,
                        SINumber: accountsReceivableReportCollectionView.items[i].SINumber,
                        SIDate: accountsReceivableReportCollectionView.items[i].SIDate,
                        Customer: accountsReceivableReportCollectionView.items[i].Customer,
                        DocumentReference: accountsReceivableReportCollectionView.items[i].DocumentReference,
                        DueDate: accountsReceivableReportCollectionView.items[i].DueDate,
                        BalanceAmount: accountsReceivableReportCollectionView.items[i].BalanceAmount,
                        CurrentAmount: accountsReceivableReportCollectionView.items[i].CurrentAmount,
                        Age30Amount: accountsReceivableReportCollectionView.items[i].Age30Amount,
                        Age60Amount: accountsReceivableReportCollectionView.items[i].Age60Amount,
                        Age90Amount: accountsReceivableReportCollectionView.items[i].Age90Amount,
                        Age120Amount: accountsReceivableReportCollectionView.items[i].Age120Amount
                    });
                }

                accountsReceivableReportCollectionView.moveToNextPage();
                if (p == accountsReceivableReportCollectionView.pageCount) {
                    accountsReceivableReportCollectionView.moveToPage(accountsReceivableReportCurrentPageIndex - 1);
                }
            }

            var Headers = [];
            Headers.push({
                Branch: "Branch",
                Account: "Account",
                SINumber: "SI Number",
                SIDate: "SI Date",
                Customer: "Customer",
                DocumentReference: "Doc Reference",
                DueDate: "Due Date",
                BalanceAmount: "Balance",
                CurrentAmount: "Current",
                Age30Amount: "30 Days",
                Age60Amount: "60 Days",
                Age90Amount: "90 Days",
                Age120Amount: "120 Days"
            });

            var header = '';
            for (var b in Headers[0]) {
                header += '"' + Headers[0][b] + '",';
            }

            CSV = header + '\r\n';
            for (var i = 0; i < accountReceivables.length; i++) {
                var row = '';
                for (var a in accountReceivables[i]) {
                    row += '"' + accountReceivables[i][a] + '",';
                }

                row.slice(0, row.length - 1);
                CSV += row + '\r\n';
            }

            if (CSV == '') {
                toastr.error("No data.");
            } else {
                var link = document.createElement("a");
                if (link.download !== undefined) {
                    var blob = new Blob([CSV], { type: 'text/csv;charset=utf-8;' });
                    var url = URL.createObjectURL(blob);
                    link.setAttribute("href", url);
                    link.setAttribute("download", fileName);
                    link.style = "visibility:hidden";
                }

                if (navigator.msSaveBlob) {
                    link.addEventListener("click", function (event) {
                        var blob = new Blob([CSV], {
                            "type": "text/csv;charset=utf-8;"
                        });
                        navigator.msSaveBlob(blob, fileName);
                    }, false);
                }

                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
                toastr.success("Dowload successful.");
            }
        }

        // ====================================
        // Print Accounts Receivable Report PDF
        // ====================================
        function btnAccountsReceivableReportPrintPDFOnclick() {
            if (cboAccountsReceivableReportCompanyFilter.selectedValue != null) {
                if (cboAccountsReceivableReportBranchFilter.selectedValue != null) {
                    if (cboAccountsReceivableReportAccountFilter.selectedValue != null) {
                        var dateAsOf = cboAccountsReceivableReportDateAsOfFilter.value.toLocaleDateString().replace(/\//g, '-');
                        var companyId = cboAccountsReceivableReportCompanyFilter.selectedValue;
                        var branchId = cboAccountsReceivableReportBranchFilter.selectedValue;
                        var accountId = cboAccountsReceivableReportAccountFilter.selectedValue;

                        window.location.href = '/RepAccountsReceivable/AccountsReceivableReport?DateAsOf=' + dateAsOf + '&CompanyId=' + companyId + '&BranchId=' + branchId + '&AccountId=' + accountId;
                    } else {
                        toastr.error("Lacking Information");
                    }
                } else {
                    toastr.error("Lacking Information");
                }
            } else {
                toastr.error("Lacking Information");
            }
        }

        // =============================
        // Document Ready - On load Page
        // =============================
        $(document).ready(function () {
            createCboAccountsReceivableReportDateAsOfFilter();
        });
    </script>
    <script type="text/javascript">
        // =================
        // User Branch Combo
        // =================
        var cboUserBranches = new wijmo.input.ComboBox('#cboUserBranches');

        // =========================
        // Get Current User Branches
        // =========================
        function getUserBranches() {
            $("#loadingUserBranches").show();
            document.getElementById("loadingUserBranches").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#userBranchContent").hide();

            $('#userBranchesModal').modal({ show: true, backdrop: 'static' });

            document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
            $("#updateUserBranch").prop("disabled", false);
            $("#closeUserBranch").prop("disabled", false);

            var userBranchesObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/userBranch/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (userBranchesResults) {
                    if (userBranchesResults.length > 0) {
                        for (i = 0; i < userBranchesResults.length; i++) {
                            userBranchesObservableArray.push({
                                BranchId: userBranchesResults[i]["BranchId"],
                                Branch: userBranchesResults[i]["Branch"]
                            });
                        }
                    }

                    var currentBranch = "@ViewData["BranchId"]";
                    cboUserBranches.dispose();
                    cboUserBranches = new wijmo.input.ComboBox('#cboUserBranches', {
                        isEditable: false,
                        placeholder: "Select Branches",
                        itemsSource: userBranchesObservableArray,
                        displayMemberPath: "Branch",
                        selectedValuePath: "BranchId",
                        selectedValue: currentBranch
                    });

                    setTimeout(function () {
                        $("#loadingUserBranches").hide();
                        $("#userBranchContent").show();
                    }, 500)
                }
            });
        }

        // ==========================
        // Update Current User Branch
        // ==========================
        function updateUserBranchOnclick() {
            document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Updating";
            $("#updateUserBranch").prop("disabled", true);
            $("#closeUserBranch").prop("disabled", true);

            var userBranchObject = new Object();
            userBranchObject.BranchId = cboUserBranches.selectedValue;
            var userBranchData = JSON.stringify(userBranchObject);

            $.ajax({
                type: "PUT",
                url: '/api/userBranch/update',
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: userBranchData,
                statusCode: {
                    200: function () {
                        toastr.success("Update Successful");
                        window.setTimeout(function () {
                            location.reload()
                        }, 1000);
                    },
                    404: function () {
                        toastr.error("Not Found");
                        document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
                        $("#updateUserBranch").prop("disabled", false);
                        $("#closeUserBranch").prop("disabled", false);
                    },
                    500: function () {
                        toastr.error("Bad Request");
                        document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
                        $("#updateUserBranch").prop("disabled", false);
                        $("#closeUserBranch").prop("disabled", false);
                    }
                }
            });
        }
    </script>
    <script type="text/javascript">
        // ======================
        // Side Bar Menu Settings
        // ======================
        var slideLeft = new Menu({
            wrapper: '#o-wrapper',
            type: 'slide-left',
            menuOpenerClass: '.c-button',
            maskId: '#c-mask'
        });

        var slideLeftBtn = document.querySelector('#c-button--slide-left');

        slideLeftBtn.addEventListener('click', function (e) {
            e.preventDefault;
            slideLeft.open();
        });
    </script>
</body>
</html>