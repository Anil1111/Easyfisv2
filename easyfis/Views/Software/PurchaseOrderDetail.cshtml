@{
    var userId = ViewData["UserId"];
}
<!DOCTYPE html>
<html>
<head>
    <!-- Meta -->
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">

    <!-- Title of the Page -->
    <link rel="shortcut icon" href="~/Images/icon/easyfislogomini.ico">
    <title>Purchase Order Detail</title>

    <!-- CSS StyleSheets-->
    @Styles.Render("~/Content/Software-css")
</head>
<body class="">
    <div id="o-wrapper" class="o-wrapper">
        <main class="o-content">
            @Html.Partial("_SoftwareHeader")
            <section class="content-header">
                <div class="container">
                    <h3>
                        Purchase Order Detail
                    </h3>
                    <p>
                        <i class="fa fa-building-o fa-fw"></i> &nbsp; @ViewData["Company"] <br />
                        <i class="fa fa-home fa-fw"></i> &nbsp; <a href="#" onclick="getUserBranches()" style="color: white;">@ViewData["Branch"]</a>
                    </p>
                </div>
            </section>
            <section class="container">
                <div class="panel panel-default">
                    <div class="panel-heading">
                        <div class="row">
                            <div class="col-md-12" align="right">
                                <button class="btn btn-primary" id="btnEmailPO" onclick="btnEmailPOOnclick()"><i class="fa fa-envelope"></i> Email</button>
                                <button class="btn btn-primary" id="btnLockPO" onclick="btnLockPOOnclick()"><i class="fa fa-lock"></i> Lock</button>
                                <button class="btn btn-primary" id="btnUnlockPO" onclick="btnUnlockPOOnclick()"><i class="fa fa-unlock"></i> Unlock</button>
                                <button class="btn btn-primary" id="btnPrintPO" onclick="btnPrintPOOnclick()"><i class="fa fa-print"></i> Print</button>
                                <button class="btn btn-danger" id="btnClosePO" onclick="window.location.href = '/Software/PurchaseOrder'"><i class="fa fa-times"></i> Close</button>
                            </div>
                        </div>
                    </div>
                    <div class="panel-body">
                        <div class="form-horizontal">
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Branch</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboPOBranch"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">PO Number</label>
                                        <div class="col-sm-8">
                                            <input type="text" class="form-control requiredPO" id="PONumber" disabled />
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">PO Date</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboPODate"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Manual PO Number</label>
                                        <div class="col-sm-8">
                                            <input type="text" class="form-control requiredPO" id="POManualPONumber" placeholder="Manual PO Number" />
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Supplier</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboPOSupplier"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Term</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboPOTerm"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Remarks</label>
                                        <div class="col-sm-8">
                                            <textarea rows="5" class="form-control textarea-custom requiredPO" id="PORemarks" placeholder="Remarks"></textarea>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Request Number</label>
                                        <div class="col-sm-8">
                                            <input type="text" class="form-control requiredPO" id="PORequestNumber" placeholder="Request Number">
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Date Needed</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboPODateNeeded"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Requested by</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboPORequestedBy"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Prepared by</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboPOPreparedBy"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Checked by</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboPOCheckedBy"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Approved by</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboPOApprovedBy"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Close PO</label>
                                        <div class="col-sm-8">
                                            <input type="checkbox" id="POClosePO">
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <ul class="nav nav-tabs" role="tablist" id="myTab">
                    <li role="presentation" class="active"><a data-toggle="tab" href="#Item" id="itemTabId">Items</a></li>
                </ul>
                <br />
                <div class="tab-content">
                    <div id="Item" class="tab-pane fade in active">
                        <div class="panel panel-default">
                            <div class="panel-heading">
                                <div class="row">
                                    <div class="col-lg-12" align="right">
                                        <button class="btn btn-primary" id="btnAddPOItem" onclick="btnAddPOItemOnclick()"><i class="fa fa-plus"></i> Add</button>
                                        <button class="btn btn-primary" id="btnItemQuery" onclick="btnItemQueryOnclick()"><i class="fa fa-search-plus"></i> Item Query</button>
                                    </div>
                                </div>
                            </div>
                            <div class="panel-body">
                                <div id="POItemGrid"></div>
                            </div>
                        </div>
                    </div>
                </div>
            </section>
            @Html.Partial("_SoftwareFooter")
        </main>
    </div>
    <div id="c-mask" class="c-mask"></div>

    <!-- Modal for POLines -->
    <div class="modal fade" id="POLinesEdit" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title" id="POLinesNameModalLabel">Purchase Order Item</h4>
                </div>
                <div class="modal-body">
                    <center>
                        <span id="loadingModalItem"></span>
                    </center>
                    <div id="POItemContent">
                        <dl class="dl-horizontal">
                            <dt>Item</dt>
                            <dd>
                                <table style="width: 100%" border="0">
                                    <tr>
                                        <td style="width: 30%">
                                            <div class="comboBox-wide" id="cboPOLineItemCode"></div>
                                        </td>
                                        <td style="width: 1%"></td>
                                        <td style="width: 69%">
                                            <div class="comboBox-wide" id="cboPOLineItemDescription"></div>
                                        </td>
                                    </tr>
                                </table>
                            </dd>
                            <dt>Particulars</dt>
                            <dd><textarea rows="5" class="form-control textarea-custom requiredPOLine" id="POLine_Particulars" placeholder="Particulars"></textarea></dd>
                            <dt>Quantity</dt>
                            <dd><input type="text" class="form-control numberField requiredPOLine" id="POLine_Quantity" placeholder="0.00" /></dd>
                            <dt>Unit</dt>
                            <dd>
                                <div class="comboBox-wide" id="cboPOLineUnit"></div>
                            </dd>
                            <dt>Cost</dt>
                            <dd><input type="text" class="form-control numberField requiredPOLine" id="POLine_Cost" placeholder="0.00" /></dd>
                            <dt>Amount</dt>
                            <dd><input type="text" class="form-control numberField requiredPOLine" id="POLine_Amount" placeholder="0.00" disabled /></dd>
                        </dl>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary " id="cmdSavePOLinesButton" onclick="cmdPOLinesSaveButton_OnClick()"><i class="fa fa-save"></i> Save</button>
                    <button id="cmdPOLinesDetailCloseButton" class="btn btn-danger " data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal for Item Query -->
    <div class="modal fade" id="POLinesItemQuery" role="dialog">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Item Query</h4>
                </div>
                <div class="modal-body">
                    <center>
                        <span id="loadingItemQuery"></span>
                    </center>
                    <div id="itemQueryPanel">
                        <div class="panel panel-default">
                            <div class="panel-heading">
                                <div class="input-group  ">
                                    <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                    <input type="text" class="form-control " id="itemQueryFilter" placeholder="Search">
                                </div>
                            </div>
                        </div>
                        <div id="itemQueryGrid" style="max-height: 300px;"></div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger " data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Apply -->
    <div class="modal fade" id="applyItems" role="dialog">
        <div class="modal-dialog modal-sm">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Apply Item <i class="fa fa-check-square-o"></i></h4>
                </div>
                <div class="modal-body">
                    Are you sure that you want to apply?
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary " id="btnConfirmApply" onclick="btnConfrimApplyPOItems_OnClick()"><i class="fa fa-check-square-o"></i> Apply</button>
                    <button id="btnConfirmClose" class="btn btn-danger " data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <!-- POLines Delete Modal Confirmation -->
    <div class="modal fade" id="deletePOLinesConfirm" role="dialog">
        <div class="modal-dialog modal-sm">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Delete PO Item <i class="fa fa-trash"></i></h4>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete this?
                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger " id="cmdConfirmDeletePOLines" onclick="cmdPOLinesConfirmDeleteButton_OnClick()"><i class="fa fa-trash"></i> Delete</button>
                    <button id="cmdConfirmDeleteCloseButton" class="btn btn-primary " data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>

    @Scripts.Render("~/Scripts/Software-js")
    <script type="text/javascript">
        // ================
        // Global Variables
        // ================
        var cboPOBranch = new wijmo.input.ComboBox('#cboPOBranch');
        var cboPODate = new wijmo.input.InputDate('#cboPODate');
        var cboPOSupplier = new wijmo.input.ComboBox('#cboPOSupplier');
        var cboPOTerm = new wijmo.input.ComboBox('#cboPOTerm');
        var cboPODateNeeded = new wijmo.input.InputDate('#cboPODateNeeded');
        var cboPORequestedBy = new wijmo.input.InputDate('#cboPORequestedBy');
        var cboPOPreparedBy = new wijmo.input.InputDate('#cboPOPreparedBy');
        var cboPOCheckedBy = new wijmo.input.InputDate('#cboPOCheckedBy');
        var cboPOApprovedBy = new wijmo.input.InputDate('#cboPOApprovedBy');
        var isLocked = false;
        var purchaseOrderItemCollectionView;
        var purchaseOrderItemFlexGrid;
        var cboPOLineItemCode = new wijmo.input.ComboBox('#cboPOLineItemCode');
        var cboPOLineItemDescription = new wijmo.input.ComboBox('#cboPOLineItemDescription');
        var cboPOLineUnit = new wijmo.input.ComboBox('#cboPOLineUnit');
        var purchaseOrderItemId = 0;
        var itemQueryItemsCollection;
        var itemQueryGrid = new wijmo.grid.FlexGrid('#itemQueryGrid');

        // =======================
        // Get URL Parameter Value
        // =======================
        function getParam(name) {
            name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");

            var regexS = "[\\?&]" + name + "=([^&#]*)";
            var regex = new RegExp(regexS);
            var results = regex.exec(window.location.href);

            if (results == null)
                return "";
            else {
                return results[1];
            }
        }

        // ========================
        // GET Branch for Combo Box
        // ========================
        function getBranchesForComboBox() {
            NProgress.start();
            var branchesObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listBranch',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (branchListResults) {
                    if (branchListResults.length > 0) {
                        for (i = 0; i < branchListResults.length; i++) {
                            branchesObservableArray.push({
                                Id: branchListResults[i]["Id"],
                                Branch: branchListResults[i]["Branch"]
                            });
                        }
                    }

                    cboPOBranch.dispose();
                    cboPOBranch = new wijmo.input.ComboBox('#cboPOBranch', {
                        disabled: true,
                        isEditable: false,
                        placeholder: "Select Branch",
                        itemsSource: branchesObservableArray,
                        displayMemberPath: "Branch",
                        selectedValuePath: "Id"
                    });

                    getSupplierForComboBox();
                }
            });
        }

        // ==========================
        // GET Supplier for Combo Box
        // ==========================
        function getSupplierForComboBox() {
            var suppliersObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listArticleByArticleTypeId/3',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (supplierListResults) {
                    if (supplierListResults.length > 0) {
                        for (i = 0; i < supplierListResults.length; i++) {
                            suppliersObservableArray.push({
                                Id: supplierListResults[i]["Id"],
                                Supplier: supplierListResults[i]["Article"]
                            });
                        }
                    }

                    cboPOSupplier.dispose();
                    cboPOSupplier = new wijmo.input.ComboBox('#cboPOSupplier', {
                        isEditable: false,
                        placeholder: "Select Supplier",
                        itemsSource: suppliersObservableArray,
                        displayMemberPath: "Supplier",
                        selectedValuePath: "Id"
                    });

                    getTermForComboBox();
                }
            });
        }

        // =======================
        // GET Terms for Combo Box
        // =======================
        function getTermForComboBox() {
            var termsObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listTerm',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (termListResults) {
                    if (termListResults.length > 0) {
                        for (i = 0; i < termListResults.length; i++) {
                            termsObservableArray.push({
                                Id: termListResults[i]["Id"],
                                Term: termListResults[i]["Term"]
                            });
                        }
                    }

                    cboPOTerm.dispose();
                    cboPOTerm = new wijmo.input.ComboBox('#cboPOTerm', {
                        isEditable: false,
                        placeholder: "Select Term",
                        itemsSource: termsObservableArray,
                        displayMemberPath: "Term",
                        selectedValuePath: "Id"
                    });

                    getUsersForComboBox();
                }
            });
        }

        // =======================
        // GET Users for Combo Box
        // =======================
        function getUsersForComboBox() {
            var usersObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listUser',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (userListResults) {
                    if (userListResults.length > 0) {
                        for (i = 0; i < userListResults.length; i++) {
                            usersObservableArray.push({
                                Id: userListResults[i]["Id"],
                                FullName: userListResults[i]["FullName"]
                            });
                        }
                    }

                    cboPORequestedBy.dispose();
                    cboPORequestedBy = new wijmo.input.ComboBox('#cboPORequestedBy', {
                        isEditable: false,
                        placeholder: "Select User",
                        itemsSource: usersObservableArray,
                        displayMemberPath: "FullName",
                        selectedValuePath: "Id"
                    });

                    cboPOPreparedBy.dispose();
                    cboPOPreparedBy = new wijmo.input.ComboBox('#cboPOPreparedBy', {
                        disabled: true,
                        isEditable: false,
                        placeholder: "Select User",
                        itemsSource: usersObservableArray,
                        displayMemberPath: "FullName",
                        selectedValuePath: "Id"
                    });

                    cboPOCheckedBy.dispose();
                    cboPOCheckedBy = new wijmo.input.ComboBox('#cboPOCheckedBy', {
                        isEditable: false,
                        placeholder: "Select User",
                        itemsSource: usersObservableArray,
                        displayMemberPath: "FullName",
                        selectedValuePath: "Id"
                    });

                    cboPOApprovedBy.dispose();
                    cboPOApprovedBy = new wijmo.input.ComboBox('#cboPOApprovedBy', {
                        isEditable: false,
                        placeholder: "Select User",
                        itemsSource: usersObservableArray,
                        displayMemberPath: "FullName",
                        selectedValuePath: "Id"
                    });

                    getPurchaseOrderById();
                }
            });
        }

        // ==================
        // GET Purchase by Id
        // ==================
        function getPurchaseOrderById() {
            if (document.location.search.length > 0) {
                var id = getParam('PurchaseOrderId');
                $.ajax({
                    url: '/api/purchaseOrder/' + id,
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    success: function (Results) {
                        if (Results != null) {
                            // header data
                            cboPOBranch.selectedValue = Results.BranchId;
                            document.getElementById('PONumber').value = Results.PONumber;
                            cboPODate.dispose();
                            cboPODate = new wijmo.input.InputDate('#cboPODate', {
                                format: 'MM-dd-yyyy',
                                value: new Date(Results.PODate)
                            });
                            document.getElementById('POManualPONumber').value = Results.ManualPONumber;
                            cboPOSupplier.selectedValue = Results.SupplierId;
                            cboPOTerm.selectedValue = Results.TermId;
                            document.getElementById('PORemarks').value = Results.Remarks;
                            document.getElementById('PORequestNumber').value = Results.ManualRequestNumber;
                            cboPODateNeeded.dispose();
                            cboPODateNeeded = new wijmo.input.InputDate('#cboPODateNeeded', {
                                format: 'MM-dd-yyyy',
                                value: new Date(Results.DateNeeded)
                            });
                            cboPORequestedBy.selectedValue = Results.RequestedById;
                            cboPOPreparedBy.selectedValue = Results.PreparedById;
                            cboPOCheckedBy.selectedValue = Results.CheckedById;
                            cboPOApprovedBy.selectedValue = Results.ApprovedById;
                            document.getElementById('POClosePO').checked = Results.IsClose;

                            // user stamp
                            document.getElementById('createdBy').innerHTML = Results.CreatedBy;
                            document.getElementById('createdDate').innerHTML = Results.CreatedDateTime;
                            document.getElementById('updatedBy').innerHTML = Results.UpdatedBy;
                            document.getElementById('updatedDate').innerHTML = Results.UpdatedDateTime;

                            if (Results.IsLocked) {
                                // fields
                                document.getElementById('PONumber').disabled = true;
                                cboPODate.disabled = true;
                                document.getElementById('POManualPONumber').disabled = true;
                                cboPOSupplier.disabled = true;
                                cboPOTerm.disabled = true;
                                document.getElementById('PORemarks').disabled = true;
                                document.getElementById('PORequestNumber').disabled = true;
                                cboPODateNeeded.disabled = true;
                                cboPORequestedBy.disabled = true;
                                cboPOPreparedBy.disabled = true;
                                cboPOCheckedBy.disabled = true;
                                cboPOApprovedBy.disabled = true;
                                document.getElementById('POClosePO').disabled = true;

                                // buttons
                                $("#btnLockPO").prop("disabled", true);
                                $("#btnAddPOItem").prop("disabled", true);
                                $("#btnItemQuery").prop("disabled", true);

                                var canUnLock = "@ViewData["CanUnlock"]";
                                if (canUnLock == "False") {
                                    $("#btnUnlockPO").prop("disabled", true);
                                }

                                var canPrint = "@ViewData["CanPrint"]";
                                if (canPrint == "False") {
                                    $("#btnPrintPO").prop("disabled", true);
                                }

                                isLocked = true;
                            } else {
                                $("#btnEmailPO").prop("disabled", true);
                                $("#btnUnlockPO").prop("disabled", true);
                                $("#btnPrintPO").prop("disabled", true);

                                var canLock = "@ViewData["CanLock"]";
                                if (canLock == "False") {
                                    $("#btnLockPO").prop("disabled", true);
                                }

                                var canAdd = "@ViewData["CanAdd"]";
                                if (canAdd == "False") {
                                    $("#btnAddPOItem").prop("disabled", true);
                                    $("#btnItemQuery").prop("disabled", true);
                                }
                            }

                            createPurchaseOrderItemFlexGrid();
                        }
                    }
                });
            } else {
                alert("No Id Parameter Value");
                window.location = "/Software/PurchaseOrder";
            }
        }

        // ==============
        // Save PO - Lock
        // ==============
        function btnLockPOOnclick() {
            var purchaseOrderObject = new Object();
            var id = getParam('PurchaseOrderId');
            purchaseOrderObject.BranchId = cboPOBranch.selectedValue;
            purchaseOrderObject.PONumber = document.getElementById('PONumber').value;
            purchaseOrderObject.PODate = cboPODate.value.toLocaleDateString();
            purchaseOrderObject.SupplierId = cboPOSupplier.selectedValue;
            purchaseOrderObject.TermId = cboPOTerm.selectedValue;
            purchaseOrderObject.ManualRequestNumber = document.getElementById('PORequestNumber').value;
            purchaseOrderObject.ManualPONumber = document.getElementById('POManualPONumber').value;
            purchaseOrderObject.DateNeeded = cboPODateNeeded.value.toLocaleDateString();
            purchaseOrderObject.Remarks = document.getElementById('PORemarks').value;
            purchaseOrderObject.IsClose = document.getElementById('POClosePO').checked;
            purchaseOrderObject.RequestedById = cboPORequestedBy.selectedValue;
            purchaseOrderObject.PreparedById = cboPOPreparedBy.selectedValue;
            purchaseOrderObject.CheckedById = cboPOCheckedBy.selectedValue;
            purchaseOrderObject.ApprovedById = cboPOApprovedBy.selectedValue;
            var purchaseOrderData = JSON.stringify(purchaseOrderObject);

            var isValid = true;
            $('.requiredPO').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                }
                else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            if (isValid) {
                document.getElementById('btnLockPO').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Locking";
                $("#btnLockPO").prop("disabled", true);
                $("#btnUnlockPO").prop("disabled", true);
                $("#btnPrintPO").prop("disabled", true);
                $("#btnClosePO").prop("disabled", true);

                $.ajax({
                    type: "PUT",
                    url: '/api/updatePurchaseOrder/' + id,
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    data: purchaseOrderData,
                    statusCode: {
                        200: function () {
                            toastr.success("Lock Successful");
                            window.setTimeout(function () {
                                location.reload()
                            }, 1000);
                        },
                        404: function () {
                            toastr.error("Not Found");
                            document.getElementById('btnLockPO').innerHTML = "<i class='fa fa-lock'></i> Lock";
                            $("#btnLockPO").prop("disabled", false);
                            $("#btnClosePO").prop("disabled", false);
                        },
                        400: function () {
                            toastr.error("Bad Request");
                            document.getElementById('btnLockPO').innerHTML = "<i class='fa fa-lock'></i> Lock";
                            $("#btnLockPO").prop("disabled", false);
                            $("#btnClosePO").prop("disabled", false);
                        }
                    }
                });
            } else {
                toastr.error("Invalid Entry");
            }
        }

        // ================
        // Edit PO - unlock
        // ================
        function btnUnlockPOOnclick() {
            var id = getParam('PurchaseOrderId');

            document.getElementById("btnUnlockPO").innerHTML = "<i class='fa fa-spinner fa-spin'></i> Unlocking";
            $("#btnLockPO").prop("disabled", true);
            $("#btnUnlockPO").prop("disabled", true);
            $("#btnPrintPO").prop("disabled", true);
            $("#btnClosePO").prop("disabled", true);

            $.ajax({
                type: "PUT",
                url: '/api/updatePurchaseOrderIsLocked/' + id,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Unlock Successful");
                        window.setTimeout(function () {
                            location.reload()
                        }, 1000);
                    },
                    404: function () {
                        toastr.error("Not Found");
                        document.getElementById('btnLockPO').innerHTML = "<i class='fa fa-unlock'></i> Unlock";
                        $("#btnUnlockPO").prop("disabled", false);
                        $("#btnPrintPO").prop("disabled", false);
                        $("#btnClosePO").prop("disabled", false);

                    },
                    400: function () {
                        toastr.error("Bad Request");
                        document.getElementById('btnLockPO').innerHTML = "<i class='fa fa-unlock'></i> Unlock";
                        $("#btnUnlockPO").prop("disabled", false);
                        $("#btnPrintPO").prop("disabled", false);
                        $("#btnClosePO").prop("disabled", false);
                    }
                }
            });
        }

        // ========
        // Print PO
        // ========
        function btnPrintPOOnclick() {
            var PurchaseOrderId = getParam('PurchaseOrderId');
            window.location = "/RepPurchaseOrder/PurchaseOrder?POId=" + PurchaseOrderId;
        }

        // ==========================
        // Purchase Order Line / Item
        // ==========================
        function getPurchaseOrderItem() {
            var purchaseOrderItemsObservableArray = new wijmo.collections.ObservableArray;
            if (document.location.search.length > 0) {
                var id = getParam('PurchaseOrderId');
                $.ajax({
                    url: '/api/listPurchaseOrderItemByPOId/' + id,
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    success: function (Results) {
                        if (Results.length > 0) {
                            var canEdit = "@ViewData["CanEdit"]";
                            var editDisabled = "";
                            if (canEdit == "False") {
                                editDisabled = "disabled";
                            }

                            var canDelete = "@ViewData["CanDelete"]";
                            var deleteDisabled = "";
                            if (canDelete == "False") {
                                deleteDisabled = "disabled";
                            }

                            var btnEditId = "<button class='btn btn-primary btn-xs btn-block' onclick='btnEditPOLines_OnClick()' " + editDisabled + "><i class='fa fa-edit'></i> Edit</button>";
                            var btnDeleteId = "<button class='btn btn-danger btn-xs btn-block' onclick='btnDeletePOLines_OnClick()'" + deleteDisabled + "><i class='fa fa-trash'></i> Delete</button>";
                            if (isLocked) {
                                btnEditId = "<button class='btn btn-primary btn-xs btn-block' onclick='btnEditPOLines_OnClick()' disabled><i class='fa fa-edit'></i> Edit</button>";
                                btnDeleteId =  "<button class='btn btn-danger btn-xs btn-block' onclick='btnDeletePOLines_OnClick()' disabled><i class='fa fa-trash'></i> Delete</button>";
                            }

                            for (i = 0; i < Results.length; i++) {
                                purchaseOrderItemsObservableArray.push({
                                    EditId: btnEditId,
                                    DeleteId: btnDeleteId,
                                    Id: Results[i]["Id"],
                                    ItemId: Results[i]["ItemId"],
                                    Item: Results[i]["Item"],
                                    ItemCode: Results[i]["ItemCode"],
                                    POId: Results[i]["POId"],
                                    Quantity: Results[i]["Quantity"],
                                    UnitId: Results[i]["UnitId"],
                                    Unit: Results[i]["Unit"],
                                    Particulars: Results[i]["Particulars"],
                                    Cost: Results[i]["Cost"],
                                    Amount: Results[i]["Amount"],
                                    BaseUnit: Results[i]["BaseUnit"],
                                    BaseQuantity: Results[i]["BaseQuantity"],
                                    BaseCost: Results[i]["BaseCost"]
                                });
                            }
                        }

                        NProgress.done();
                    }
                });
            }

            return purchaseOrderItemsObservableArray;
        }

        // =====================================
        // Purchase Order Line / Item - FlexGrid
        // =====================================
        function createPurchaseOrderItemFlexGrid() {
            purchaseOrderItemCollectionView = new wijmo.collections.CollectionView(getPurchaseOrderItem());

            purchaseOrderItemFlexGrid = new wijmo.grid.FlexGrid('#POItemGrid');
            purchaseOrderItemFlexGrid.initialize({
                columns: [
                    {
                        "header": "Edit",
                        "binding": "EditId",
                        "width": 70,
                        "align": "center",
                        "allowResizing": false,
                        "allowSorting": false,
                        "isContentHtml": true
                    },
                    {
                        "header": "Delete",
                        "binding": "DeleteId",
                        "width": 70,
                        "align": "center",
                        "allowResizing": false,
                        "allowSorting": false,
                        "isContentHtml": true
                    },
                    {
                        "header": "Code",
                        "binding": "ItemCode",
                        "allowSorting": true,
                        "width": 130,
                    },
                    {
                        "header": "Item",
                        "binding": "Item",
                        "allowSorting": true,
                        "width": 200
                    },
                    {
                        "header": "Particulars",
                        "binding": "Particulars",
                        "allowSorting": true,
                        "width": 200
                    },
                    {
                        "header": "Quantity",
                        "binding": "Quantity",
                        "allowSorting": true,
                        "width": 100
                    },
                    {
                        "header": "Unit",
                        "binding": "Unit",
                        "allowSorting": true,
                        "width": 100
                    },
                    {
                        "header": "Cost",
                        "binding": "Cost",
                        "allowSorting": true,
                        "width": 100
                    },
                    {
                        "header": "Amount",
                        "binding": "Amount",
                        "allowSorting": true,
                        "width": 100
                    },
                    {
                        "header": "Unit",
                        "binding": "BaseUnit",
                        "allowSorting": true,
                        "width": 100
                    },
                    {
                        "header": "Quantity",
                        "binding": "BaseQuantity",
                        "allowSorting": true,
                        "width": 100
                    },
                    {
                        "header": "Cost",
                        "binding": "BaseCost",
                        "allowSorting": true,
                        "width": 100
                    }
                ],
                autoGenerateColumns: false,
                itemsSource: purchaseOrderItemCollectionView,
                isReadOnly: true,
                frozenColumns: 2,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            purchaseOrderItemFlexGrid.trackChanges = true;

            var hr = new wijmo.grid.Row();
            purchaseOrderItemFlexGrid.allowMerging = wijmo.grid.AllowMerging.AllHeaders;
            purchaseOrderItemFlexGrid.columnHeaders.rows.push(hr);
            purchaseOrderItemFlexGrid.columnHeaders.rows[0].allowMerging = true;

            purchaseOrderItemFlexGrid.columnHeaders.columns[0].allowMerging = true;
            purchaseOrderItemFlexGrid.columnHeaders.setCellData(0, 0, 'Edit');

            purchaseOrderItemFlexGrid.columnHeaders.columns[1].allowMerging = true;
            purchaseOrderItemFlexGrid.columnHeaders.setCellData(0, 1, 'Delete');

            purchaseOrderItemFlexGrid.columnHeaders.columns[2].allowMerging = true;
            purchaseOrderItemFlexGrid.columnHeaders.setCellData(0, 2, 'Code');

            purchaseOrderItemFlexGrid.columnHeaders.columns[3].allowMerging = true;
            purchaseOrderItemFlexGrid.columnHeaders.setCellData(0, 3, 'Item');

            purchaseOrderItemFlexGrid.columnHeaders.columns[4].allowMerging = true;
            purchaseOrderItemFlexGrid.columnHeaders.setCellData(0, 4, 'Particulars');

            purchaseOrderItemFlexGrid.columnHeaders.columns[5].allowMerging = true;
            purchaseOrderItemFlexGrid.columnHeaders.setCellData(0, 5, 'Quantity');

            purchaseOrderItemFlexGrid.columnHeaders.columns[6].allowMerging = true;
            purchaseOrderItemFlexGrid.columnHeaders.setCellData(0, 6, 'Unit');

            purchaseOrderItemFlexGrid.columnHeaders.columns[7].allowMerging = true;
            purchaseOrderItemFlexGrid.columnHeaders.setCellData(0, 7, 'Cost');

            purchaseOrderItemFlexGrid.columnHeaders.columns[8].allowMerging = true;
            purchaseOrderItemFlexGrid.columnHeaders.setCellData(0, 8, 'Amount');

            for (var columnBasicUnitConversion = 9; columnBasicUnitConversion <= 11; columnBasicUnitConversion++) {
                purchaseOrderItemFlexGrid.columnHeaders.setCellData(0, columnBasicUnitConversion, 'Basic Unit Conversion');
            }
        }

        // ============
        // ADD PO Lines
        // ============
        function btnAddPOItemOnclick() {
            $('#POLinesEdit').modal({ show: true, backdrop: 'static' });

            document.getElementById('cmdSavePOLinesButton').innerHTML = "<i class='fa fa-save'></i> Save";
            $("#cmdSavePOLinesButton").prop("disabled", true);
            $("#cmdPOLinesDetailCloseButton").prop("disabled", false);

            $("#loadingModalItem").show();
            document.getElementById("loadingModalItem").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#POItemContent").hide();

            purchaseOrderItemId = 0;
            getItem(0,0);
            document.getElementById('POLine_Particulars').value = "NA";
            document.getElementById('POLine_Quantity').value = 1;
            document.getElementById('POLine_Cost').value = 0;
            document.getElementById('POLine_Amount').value = 0;
        }

        // =========
        // Get  Item
        // =========
        function getItem(itemIdSelectedValue, articleUnitIdSelectedValue) {
            var itemsObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listArticleByArticleTypeId/1',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (itemListResults) {
                    if (itemListResults.length > 0) {
                        for (i = 0; i < itemListResults.length; i++) {
                            itemsObservableArray.push({
                                Id: itemListResults[i]["Id"],
                                ManualArticleCode: itemListResults[i]["ManualArticleCode"],
                                Article: itemListResults[i]["Article"]
                            });
                        }
                    }

                    cboPOLineItemCode.dispose();
                    cboPOLineItemCode = new wijmo.input.ComboBox('#cboPOLineItemCode', {
                        isEditable: false,
                        placeholder: "Select Item Code",
                        itemsSource: itemsObservableArray,
                        displayMemberPath: "ManualArticleCode",
                        selectedValuePath: "Id",
                        selectedValue: itemIdSelectedValue,
                        onSelectedIndexChanged: function () {
                            cboPOLineItemDescription.selectedValue = this.selectedValue;
                            getItemUnitForComboBox(this.selectedValue);
                        }
                    });

                    cboPOLineItemDescription.dispose();
                    cboPOLineItemDescription = new wijmo.input.ComboBox('#cboPOLineItemDescription', {
                        isEditable: false,
                        placeholder: "Select Item",
                        itemsSource: itemsObservableArray,
                        displayMemberPath: "Article",
                        selectedValuePath: "Id",
                        selectedValue: itemIdSelectedValue,
                        onSelectedIndexChanged: function () {
                            cboPOLineItemCode.selectedValue = this.selectedValue;
                            getItemUnitForComboBox(this.selectedValue);
                        }
                    });

                    getItemUnitForComboBox(cboPOLineItemDescription.selectedValue, articleUnitIdSelectedValue);
                }
            });
        }

        // ==============
        // Get  Item Unit
        // ==============
        function getItemUnitForComboBox(itemId, articleUnitIdSelectedValue) {
            var unitsObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listArticleUnitByArticleId/' + itemId,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (unitListResults) {
                    if (unitListResults.length > 0) {
                        for (i = 0; i < unitListResults.length; i++) {
                            unitsObservableArray.push({
                                Id: unitListResults[i]["Id"],
                                UnitId: unitListResults[i]["UnitId"],
                                Unit: unitListResults[i]["Unit"]
                            });
                        }
                    }

                    cboPOLineUnit.dispose();
                    cboPOLineUnit = new wijmo.input.ComboBox('#cboPOLineUnit', {
                        isEditable: false,
                        placeholder: "Select Unit",
                        itemsSource: unitsObservableArray,
                        displayMemberPath: "Unit",
                        selectedValuePath: "UnitId",
                        selectedValue: articleUnitIdSelectedValue
                    });

                    $("#loadingModalItem").hide();
                    $("#cmdSavePOLinesButton").prop("disabled", false);
                    $("#POItemContent").show();
                }
            });
        }

        // =============
        // Edit PO Lines
        // =============
        function btnEditPOLines_OnClick() {
            $('#POLinesEdit').modal({ show: true, backdrop: 'static' });

            document.getElementById('cmdSavePOLinesButton').innerHTML = "<i class='fa fa-save'></i> Save";
            $("#cmdSavePOLinesButton").prop("disabled", true);
            $("#cmdPOLinesDetailCloseButton").prop("disabled", false);

            $("#loadingModalItem").show();
            document.getElementById("loadingModalItem").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#POItemContent").hide();

            purchaseOrderItemCollectionView.editItem(purchaseOrderItemCollectionView.currentItem);
            var purchaseOrderItem = purchaseOrderItemCollectionView.currentEditItem;
            purchaseOrderItemId = purchaseOrderItem.Id;
            getItem(purchaseOrderItem.ItemId, purchaseOrderItem.UnitId);
            document.getElementById('POLine_Particulars').value = purchaseOrderItem.Particulars;
            document.getElementById('POLine_Quantity').value = purchaseOrderItem.Quantity;
            document.getElementById('POLine_Cost').value = purchaseOrderItem.Cost;
            document.getElementById('POLine_Amount').value = purchaseOrderItem.Amount;
        }

        // ====================
        // Delete PO Lines item
        // ====================
        function btnDeletePOLines_OnClick() {
            $('#deletePOLinesConfirm').modal({ show: true, backdrop: 'static' });

            document.getElementById('cmdConfirmDeletePOLines').innerHTML = "<i class='fa fa-trash'></i> Delete";
            $("#cmdConfirmDeletePOLines").prop("disabled", false);
            $("#cmdConfirmDeleteCloseButton").prop("disabled", false);
        }

        // POItem Confirm Delete
        function cmdPOLinesConfirmDeleteButton_OnClick() {
            document.getElementById('cmdConfirmDeletePOLines').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Deleting";
            $("#cmdConfirmDeletePOLines").prop("disabled", true);
            $("#cmdConfirmDeleteCloseButton").prop("disabled", true);

            purchaseOrderItemCollectionView.editItem(purchaseOrderItemCollectionView.currentItem);
            var purchaseOrderItemId = purchaseOrderItemCollectionView.currentEditItem.Id;
            $.ajax({
                url: '/api/deletePurchaseOrderItem/' + purchaseOrderItemId,
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Delete Successful");

                        $("#cmdConfirmDeletePOLines").prop("disabled", true);
                        $("#cmdConfirmDeleteCloseButton").prop("disabled", true);

                        $('#deletePOLinesConfirm').modal('hide');

                        purchaseOrderItemCollectionView = new wijmo.collections.CollectionView(getPurchaseOrderItem());
                        purchaseOrderItemFlexGrid.itemsSource = purchaseOrderItemCollectionView;
                        purchaseOrderItemFlexGrid.trackChanges = true;
                    },
                    404: function () {
                        toastr.error("Not Found");
                        $('#deletePOLinesConfirm').modal('hide');

                        document.getElementById('cmdConfirmDeletePOLines').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $("#cmdConfirmDeletePOLines").prop("disabled", false);
                        $("#cmdConfirmDeleteCloseButton").prop("disabled", false);
                    },
                    400: function () {
                        toastr.error("Bad Request");
                        $('#deletePOLinesConfirm').modal('hide');

                        document.getElementById('cmdConfirmDeletePOLines').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $("#cmdConfirmDeletePOLines").prop("disabled", false);
                        $("#cmdConfirmDeleteCloseButton").prop("disabled", false);
                    }
                }
            });
        }

        // =============
        // Save PO Lines
        // =============
        function cmdPOLinesSaveButton_OnClick() {
            var id = getParam('PurchaseOrderId');

            var purchaserOrderItemObject = new Object();
            purchaserOrderItemObject.POId = id;
            purchaserOrderItemObject.ItemId = cboPOLineItemDescription.selectedValue;
            purchaserOrderItemObject.Particulars = document.getElementById('POLine_Particulars').value;
            purchaserOrderItemObject.UnitId = cboPOLineUnit.selectedValue;
            purchaserOrderItemObject.Quantity = document.getElementById('POLine_Quantity').value;
            purchaserOrderItemObject.Cost = document.getElementById('POLine_Cost').value;
            purchaserOrderItemObject.Amount = document.getElementById('POLine_Amount').value;
            var purchaserOrderItemData = JSON.stringify(purchaserOrderItemObject);

            var isValid = true;
            $('.requiredPOLine').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                } else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            if (isValid == false) {
                toastr.error("Invalid Entry");
            } else {
                document.getElementById('cmdSavePOLinesButton').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Saving";
                $("#cmdSavePOLinesButton").prop("disabled", true);
                $("#cmdPOLinesDetailCloseButton").prop("disabled", true);

                if (purchaseOrderItemId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/addPurchaseOrderItem',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: purchaserOrderItemData,
                        success: function(id) {
                            if (id > 0) {
                                toastr.success("Save Successful");

                                $('#POLinesEdit').modal('hide');

                                $("#cmdSavePOLinesButton").prop("disabled", true);
                                $("#cmdPOLinesDetailCloseButton").prop("disabled", true);

                                purchaseOrderItemCollectionView = new wijmo.collections.CollectionView(getPurchaseOrderItem());
                                purchaseOrderItemFlexGrid.itemsSource = purchaseOrderItemCollectionView;
                                purchaseOrderItemFlexGrid.trackChanges = true;
                            } else {
                                toastr.error("Internal Server Error");

                                document.getElementById('cmdSavePOLinesButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#cmdSavePOLinesButton").prop("disabled", false);
                                $("#cmdPOLinesDetailCloseButton").prop("disabled", false);
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/updatePurchaseOrderItem/' + purchaseOrderItemId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: purchaserOrderItemData,
                        statusCode: {
                            200: function () {
                                toastr.success("Update Successful");

                                $('#POLinesEdit').modal('hide');

                                $("#cmdSavePOLinesButton").prop("disabled", true);
                                $("#cmdPOLinesDetailCloseButton").prop("disabled", true);

                                purchaseOrderItemCollectionView = new wijmo.collections.CollectionView(getPurchaseOrderItem());
                                purchaseOrderItemFlexGrid.itemsSource = purchaseOrderItemCollectionView;
                                purchaseOrderItemFlexGrid.trackChanges = true;
                            },
                            404: function () {
                                toastr.error("Not Found");

                                document.getElementById('cmdSavePOLinesButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#cmdSavePOLinesButton").prop("disabled", false);
                                $("#cmdPOLinesDetailCloseButton").prop("disabled", false);
                            },
                            400: function () {
                                toastr.error("Bad Request");

                                document.getElementById('cmdSavePOLinesButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#cmdSavePOLinesButton").prop("disabled", false);
                                $("#cmdPOLinesDetailCloseButton").prop("disabled", false);
                            }
                        }
                    });
                }
            }
        }

        $('#POLine_Quantity').keyup(function () {
            var inputQuantity = document.getElementById('POLine_Quantity').value;
            var inputCost = document.getElementById('POLine_Cost').value;

            var replacedCost = inputCost.replace(/\,/g, '');
            var replacedQuantity = inputQuantity.replace(/\,/g, '');

            var amount = replacedCost * replacedQuantity;

            document.getElementById('POLine_Amount').value = amount.toLocaleString();
        });

        $('#POLine_Cost').keyup(function () {
            var inputQuantity = document.getElementById('POLine_Quantity').value;
            var inputCost = document.getElementById('POLine_Cost').value;

            var replacedCost = inputCost.replace(/\,/g, '');
            var replacedQuantity = inputQuantity.replace(/\,/g, '');

            var amount = replacedCost * replacedQuantity;

            document.getElementById('POLine_Amount').value = amount.toLocaleString();
        });

        $(document).on('show.bs.modal', '.modal', function (event) {
            var zIndex = 1040 + (10 * $('.modal:visible').length);
            $(this).css('z-index', zIndex);
            setTimeout(function () {
                $('.modal-backdrop').not('.modal-stack').css('z-index', zIndex - 1).addClass('modal-stack');
            }, 0);
        });

        $(document).on('hidden.bs.modal', '.modal', function () {
            $('.modal:visible').length && $(document.body).addClass('modal-open');
        });

        var itemQueryItemsCollection;
        var itemQueryGrid;

        function btnEmailPOOnclick() {
            $("#btnEmailPO").prop("disabled", true);
            document.getElementById("btnEmailPO").innerHTML = "<i class='fa fa-spinner fa-spin'></i> Sending E-mail";
            $.ajax({
                type: "PUT",
                url: '/api/purchaseOrder/sendEmail/' + getParam("PurchaseOrderId") + "/" + document.getElementById("PO_Supplier_data").value,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        document.getElementById("btnEmailPO").innerHTML = "<i class='fa fa-envelope'></i> Send E-mail";
                        $("#btnEmailPO").prop("disabled", false);
                        toastr.info("Send Email Successful");
                    },
                    404: function () {
                        document.getElementById("btnEmailPO").innerHTML = "<i class='fa fa-envelope'></i> Send E-mail";
                        $("#btnEmailPO").prop("disabled", false);
                        toastr.error("Email Not Found");
                    },
                    400: function () {
                        document.getElementById("btnEmailPO").innerHTML = "<i class='fa fa-envelope'></i> Send E-mail";
                        $("#btnEmailPO").prop("disabled", false);
                        toastr.error("Bad Request");
                    }
                }
            });
        }

        function btnConfrimApplyPOItems_OnClick() {
            $("#btnConfirmApply").prop("disabled", true);
            $("#btnConfirmClose").prop("disabled", true);
        }

        // item query
        function btnItemQueryOnclick() {
            $('#POLinesItemQuery').modal({
                show: true,
                backdrop: 'static'
            });

            $("#itemQueryPanel").hide();
            $("#loadingItemQuery").show();
            document.getElementById("loadingItemQuery").innerHTML = "<b><i class='fa fa-spinner fa-spin'></i></b>";

            setTimeout(function () {
                createItemQueryFlexGrid();
            }, 500);
        }

        // get Items for Item Query
        function getArticleItemForItemQuery() {
            var itemsObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listArticleByArticleTypeIdLocked/POItem/LastPurchasePrice/1',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (articleItemsResult) {
                    for (i = 0; i < articleItemsResult.length; i++) {
                        itemsObservableArray.push({
                            Id: articleItemsResult[i]["Id"],
                            ArticleCode: articleItemsResult[i]["ArticleCode"],
                            ManualArticleCode: articleItemsResult[i]["ManualArticleCode"],
                            Article: articleItemsResult[i]["Article"],
                            Category: articleItemsResult[i]["Category"],
                            ArticleTypeId: articleItemsResult[i]["ArticleTypeId"],
                            ArticleType: articleItemsResult[i]["ArticleType"],
                            ArticleGroupId: articleItemsResult[i]["ArticleGroupId"],
                            ArticleGroup: articleItemsResult[i]["ArticleGroup"],
                            AccountId: articleItemsResult[i]["AccountId"],
                            AccountCode: articleItemsResult[i]["AccountCode"],
                            Account: articleItemsResult[i]["Account"],
                            SalesAccountId: articleItemsResult[i]["SalesAccountId"],
                            SalesAccount: articleItemsResult[i]["SalesAccount"],
                            CostAccountId: articleItemsResult[i]["CostAccountId"],
                            CostAccount: articleItemsResult[i]["CostAccount"],
                            AssetAccountId: articleItemsResult[i]["AssetAccountId"],
                            AssetAccount: articleItemsResult[i]["AssetAccount"],
                            ExpenseAccountId: articleItemsResult[i]["ExpenseAccountId"],
                            ExpenseAccount: articleItemsResult[i]["ExpenseAccount"],
                            UnitId: articleItemsResult[i]["UnitId"],
                            Unit: articleItemsResult[i]["Unit"],
                            InputTaxId: articleItemsResult[i]["InputTaxId"],
                            InputTax: articleItemsResult[i]["InputTax"],
                            OutputTaxId: articleItemsResult[i]["OutputTaxId"],
                            OutputTax: articleItemsResult[i]["OutputTax"],
                            WTaxTypeId: articleItemsResult[i]["WTaxTypeId"],
                            WTaxType: articleItemsResult[i]["WTaxType"],
                            Price: articleItemsResult[i]["LastPurchasePrice"],
                            Cost: articleItemsResult[i]["Cost"],
                            IsInventory: articleItemsResult[i]["IsInventory"],
                            Particulars: articleItemsResult[i]["Particulars"],
                            Address: articleItemsResult[i]["Address"],
                            TermId: articleItemsResult[i]["TermId"],
                            Term: articleItemsResult[i]["Term"],
                            ContactNumber: articleItemsResult[i]["ContactNumber"],
                            ContactPerson: articleItemsResult[i]["ContactPerson"],
                            TaxNumber: articleItemsResult[i]["TaxNumber"],
                            CreditLimit: articleItemsResult[i]["CreditLimit"],
                            DateAcquired: articleItemsResult[i]["DateAcquired"],
                            UsefulLife: articleItemsResult[i]["UsefulLife"],
                            SalvageValue: articleItemsResult[i]["SalvageValue"],
                            ManualArticleOldCode: articleItemsResult[i]["ManualArticleOldCode"],
                            IsLocked: articleItemsResult[i]["IsLocked"],
                            CreatedById: articleItemsResult[i]["CreatedById"],
                            CreatedBy: articleItemsResult[i]["CreatedBy"],
                            CreatedDateTime: articleItemsResult[i]["CreatedDateTime"],
                            UpdatedById: articleItemsResult[i]["UpdatedById"],
                            UpdatedBy: articleItemsResult[i]["UpdatedBy"],
                            UpdatedDateTime: articleItemsResult[i]["UpdatedDateTime"],
                            Pick: "<button class='btn btn-primary btn-xs btn-block' onclick='pickToApplyOnClick()'><i class='fa fa-hand-o-right'></i> Pick</button>",
                        });
                    }

                    $("#itemQueryPanel").show();
                    $("#loadingItemQuery").hide();
                }
            });

            return itemsObservableArray;
        }

        function pickToApplyOnClick() {
            $('#POLinesEdit').modal({ show: true, backdrop: 'static' });

            document.getElementById('cmdSavePOLinesButton').innerHTML = "<i class='fa fa-save'></i> Save";
            $("#cmdSavePOLinesButton").prop("disabled", true);
            $("#cmdPOLinesDetailCloseButton").prop("disabled", false);

            $("#loadingModalItem").show();
            document.getElementById("loadingModalItem").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#POItemContent").hide();

            itemQueryItemsCollection.editItem(itemQueryItemsCollection.currentItem);
            var item = itemQueryItemsCollection.currentEditItem;
            purchaseOrderItemId = 0;
            getItem(item.Id, item.UnitId);
            document.getElementById('POLine_Particulars').value = item.Particulars;
            document.getElementById('POLine_Quantity').value = 1;
            document.getElementById('POLine_Cost').value = item.Price;
            document.getElementById('POLine_Amount').value = item.Price * 1;
        }

        function createItemQueryFlexGrid() {
            itemQueryItemsCollection = new wijmo.collections.CollectionView(getArticleItemForItemQuery());
            itemQueryItemsCollection.canFilter = true;

            var filterText = '';
            $('#itemQueryFilter').keyup(function () {
                filterText = this.value.toLowerCase();
                itemQueryItemsCollection.refresh();
            });

            itemQueryItemsCollection.filter = function (item) {
                return !filterText || (item.ManualArticleCode.toLowerCase().indexOf(filterText) > -1)
                    || (item.Article.toLowerCase().indexOf(filterText) > -1);
            }

            itemQueryGrid.dispose();
            itemQueryGrid = new wijmo.grid.FlexGrid('#itemQueryGrid');
            itemQueryGrid.initialize({
                columns: [
                    {
                        "header": "Code",
                        "binding": "ManualArticleCode",
                        "allowSorting": true,
                        "width": "3*"
                    },
                    {
                        "header": "Item",
                        "binding": "Article",
                        "allowSorting": true,
                        "width": "5*"
                    },
                    {
                        "header": "Last Purchase Price",
                        "binding": "Price",
                        "allowSorting": true,
                        "width": "2*"
                    },
                    {
                        "header": "Pick",
                        "binding": "Pick",
                        "width": "1*",
                        "align": "center",
                        "allowResizing": false,
                        "allowSorting": false,
                        "isContentHtml": true
                    },
                ],
                autoGenerateColumns: false,
                itemsSource: itemQueryItemsCollection,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            itemQueryGrid.trackChanges = true;
        }

        // ===========
        // OnLoad Page
        // ===========
        $(document).ready(function () {
            getBranchesForComboBox();
        });
    </script>
    <script type="text/javascript">
        var cboUserBranches = new wijmo.input.ComboBox('#cboUserBranches');
        function getUserBranches() {
            $("#loadingUserBranches").show();
            document.getElementById("loadingUserBranches").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#userBranchContent").hide();

            $('#userBranchesModal').modal({ show: true, backdrop: 'static' });

            document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
            $("#updateUserBranch").prop("disabled", false);
            $("#closeUserBranch").prop("disabled", false);

            var userBranchesObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/userBranch/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (userBranchesResults) {
                    if (userBranchesResults.length > 0) {
                        for (i = 0; i < userBranchesResults.length; i++) {
                            userBranchesObservableArray.push({
                                BranchId: userBranchesResults[i]["BranchId"],
                                Branch: userBranchesResults[i]["Branch"]
                            });
                        }
                    }

                    var currentBranch = "@ViewData["BranchId"]";
                    cboUserBranches.dispose();
                    cboUserBranches = new wijmo.input.ComboBox('#cboUserBranches', {
                        isEditable: false,
                        placeholder: "Select Branches",
                        itemsSource: userBranchesObservableArray,
                        displayMemberPath: "Branch",
                        selectedValuePath: "BranchId",
                        selectedValue: currentBranch
                    });

                    setTimeout(function () {
                        $("#loadingUserBranches").hide();
                        $("#userBranchContent").show();
                    }, 500)
                }
            });
        }

        function updateUserBranchOnclick() {
            document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Updating";
            $("#updateUserBranch").prop("disabled", true);
            $("#closeUserBranch").prop("disabled", true);

            var userBranchObject = new Object();
            userBranchObject.BranchId = cboUserBranches.selectedValue;
            var userBranchData = JSON.stringify(userBranchObject);

            $.ajax({
                type: "PUT",
                url: '/api/userBranch/update',
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: userBranchData,
                statusCode: {
                    200: function () {
                        toastr.success("Update Successful");
                        window.setTimeout(function () {
                            location.reload()
                        }, 1000);
                    },
                    404: function () {
                        toastr.error("Not Found");
                        document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
                        $("#updateUserBranch").prop("disabled", false);
                        $("#closeUserBranch").prop("disabled", false);
                    },
                    500: function () {
                        toastr.error("Bad Request");
                        document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
                        $("#updateUserBranch").prop("disabled", false);
                        $("#closeUserBranch").prop("disabled", false);
                    }
                }
            });
        }
    </script>
    <script type="text/javascript">
        var slideLeft = new Menu({
            wrapper: '#o-wrapper',
            type: 'slide-left',
            menuOpenerClass: '.c-button',
            maskId: '#c-mask'
        });

        var slideLeftBtn = document.querySelector('#c-button--slide-left');

        slideLeftBtn.addEventListener('click', function (e) {
            e.preventDefault;
            slideLeft.open();
        });
    </script>
</body>
</html>