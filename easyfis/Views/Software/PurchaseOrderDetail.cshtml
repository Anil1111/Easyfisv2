@model easyfis.Entities.MstUserForm
@{
    // =====================
    // User Rights Variables
    // =====================
    var canAdd = Model.CanAdd;
    var canEdit = Model.CanEdit;
    var canDelete = Model.CanDelete;
    var canLock = Model.CanLock;
    var canUnlock = Model.CanUnlock;
    var canCancel = Model.CanCancel;
    var canPrint = Model.CanPrint;
}
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">
    <link rel="shortcut icon" href="~/Images/icon/easyfislogomini.ico">
    <title>Purchase Order Detail</title>

    @Styles.Render("~/Content/Software-css")
</head>
<body class="">
    <div id="o-wrapper" class="o-wrapper">
        <main class="o-content">
            @Html.Partial("_SoftwareHeader")

            <section class="content-header">
                <div class="container">
                    <h3>
                        Purchase Order Detail
                    </h3>
                    <p>
                        <i class="fa fa-building-o fa-fw"></i> &nbsp; @ViewData["Company"] <br />
                        <i class="fa fa-home fa-fw"></i> &nbsp; <a href="#" onclick="getUserBranches()" style="color: white;">@ViewData["Branch"]</a>
                    </p>
                </div>
            </section>
            <section class="container">
                <div class="panel panel-default">

                    <!--
                        =============================================
                        Options: Lock, Unlock, Print and Close Button
                        =============================================
                    -->
                    <div class="panel-heading">
                        <div class="row">
                            <div class="col-md-2">
                                <button class="btn btn-primary" id="btnPurchaseOrderSave" onclick="btnPurchaseOrderSaveOnclick()"><i class="fa fa-save"></i> Save</button>
                            </div>
                            <div class="col-md-10" align="right">
                                @{
                                    if (canLock)
                                    {
                                        <button class="btn btn-primary" id="btnPurchaseOrderLock" onclick="btnPurchaseOrderLockOnclick()"><i class="fa fa-lock"></i> Lock</button>
                                    }
                                    if (canUnlock)
                                    {
                                        <button class="btn btn-primary" id="btnPurchaseOrderUnlock" onclick="btnPurchaseOrderUnlockOnclick()"><i class="fa fa-unlock"></i> Unlock</button>
                                    }
                                    if (canPrint)
                                    {
                                        <button class="btn btn-primary" id="btnPurchaseOrderPrint" onclick="btnPurchaseOrderPrintOnclick()"><i class="fa fa-print"></i> Print</button>
                                    }
                                    if (canCancel)
                                    {
                                        <button class="btn btn-warning" id="btnPurchaseOrderCancel" onclick="btnPurchaseOrderCancelOnclick()"><i class="fa fa-times-circle-o"></i> Cancel</button>
                                    }
                                }
                                <button class="btn btn-danger" id="btnPurchaseOrderClose" onclick="window.location.href = '/Software/PurchaseOrder'"><i class="fa fa-times"></i> Close</button>
                            </div>
                        </div>
                    </div>

                    <!--
                        ======================================
                        Details, Fields and Other Informations
                        ======================================
                    -->
                    <div class="panel-body">
                        <div class="form-horizontal">
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Branch</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboPurchaseOrderBranch"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">PO Number</label>
                                        <div class="col-sm-8">
                                            <input type="text" class="form-control requiredPO" id="inpPurchaseOrderPONumber" disabled />
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">PO Date</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboPurchaseOrderPODate"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Manual PO Number</label>
                                        <div class="col-sm-8">
                                            <input type="text" class="form-control requiredPO" id="inpPurchaseOrderManualPONumber" placeholder="Manual PO Number" />
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Supplier</label>
                                        <div class="col-sm-8">
                                            <div class="input-group">
                                                <div class="comboBox-wide" id="cboPurchaseOrderSupplier"></div>
                                                <div class="input-group-btn">
                                                    <button type="button" class=" btn btn-primary" id="btnPurchaseOrderConsignment" onclick="btnPurchaseOrderConsignmentOnclick()">Consignment</button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Term</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboPurchaseOrderTerm"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Remarks</label>
                                        <div class="col-sm-8">
                                            <textarea rows="5" class="form-control textarea-custom requiredPO" id="inpPurchaseOrderRemarks" placeholder="Remarks"></textarea>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Status</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboPurchaseOrderStatus"></div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Manual Request No.</label>
                                        <div class="col-sm-8">
                                            <div class="input-group">
                                                <input type="text" class="form-control requiredPO" id="inpPurchaseRequestNumber" placeholder="Request Number">
                                                <div class="input-group-btn">
                                                    <button type="button" class=" btn btn-primary" id="btnpurchaseRequestModal" onclick="btnPurchaseRequestNumberOnclick()">PR</button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Date Needed</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboPurchaseOrderDateNeeded"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Requested by</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboPurchaseOrderRequestedBy"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Prepared by</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboPurchaseOrderPreparedBy"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Checked by</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboPurchaseOrderCheckedBy"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Approved by</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboPurchaseOrderApprovedBy"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Is Close</label>
                                        <div class="col-sm-8">
                                            <input type="checkbox" id="inpPurchaseOrderIsClose">
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!--
                    ===================
                    Purchase Order Item
                    ===================
                -->
                <ul class="nav nav-tabs" role="tablist" id="myTab">
                    <li role="presentation" class="active"><a data-toggle="tab" href="#Item" id="itemTabId">Items</a></li>
                </ul>
                <br />
                <div class="tab-content">
                    <div id="Item" class="tab-pane fade in active">
                        <div class="panel panel-default">

                            <!--
                                ========================================================================
                                Purchase Order Item: Search, Filter, Display Number of Rows and  Buttons
                                ========================================================================
                            -->
                            <div class="panel-heading">
                                <table style="width: 100%" border="0">
                                    <tr>
                                        <td style="width: 49.5%">
                                            <div class="input-group">
                                                <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                                <input type="text" class="form-control" id="inpPurchaseOrderItemSearchFilter" placeholder="Search...">
                                            </div>
                                        </td>
                                        <td style="width: 1%"></td>
                                        <td style="width: 24%">
                                            <div class="input-group">
                                                <span class="input-group-addon"><b><i class="fa fa-table"></i></b></span>
                                                <div class="comboBox-wide" id="cboPurchaseOrderItemsShowNumberOfRows"></div>
                                            </div>
                                        </td>
                                        <td style="width: 1%"></td>
                                        <td style="width: 24.5%" align="right">
                                            @{
                                                if (canAdd)
                                                {
                                                    <button class="btn btn-primary" id="btnPurchaseOrderItemAdd" onclick="btnPurchaseOrderItemAddOnclick()"><i class="fa fa-plus"></i> Add</button>
                                                    <button class="btn btn-primary" id="btnPurchaseOrderItemItemQuery" onclick="btnItemQueryOnclick()"><i class="fa fa-search-plus"></i> Item Query</button>
                                                }
                                            }
                                        </td>
                                    </tr>
                                </table>
                            </div>

                            <!--
                                ==============================
                                Purchase Order Item: Flex Grid
                                ==============================
                            -->
                            <div class="panel-body">
                                <div id="purchaseOrderItemFlexGrid"></div>
                            </div>

                            <!--
                                =======================================
                                Purchase Order Item: Navigation Buttons
                                =======================================
                            -->
                            <div class="panel-footer">
                                <div class="row">
                                    <div class="btn-group col-md-7" id="purchaseOrderItemNavigationPageGrid">
                                        <button type="button" class="btn btn-default border-custom" id="btnPurchaseOrderItemMoveToFirstPageGrid">
                                            <span class="glyphicon glyphicon-fast-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" id="btnPurchaseOrderItemMoveToPreviousPageGrid">
                                            <span class="glyphicon glyphicon-step-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnPurchaseOrderItemCurrentPageGrid"></button>
                                        <button type="button" class="btn btn-default border-custom" id="btnPurchaseOrderItemMoveToNextPageGrid">
                                            <span class="glyphicon glyphicon-step-forward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" id="btnPurchaseOrderItemMoveToLastPageGrid">
                                            <span class="glyphicon glyphicon-fast-forward"></span>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!--
                            ===========================
                            Purchase Order Item: Totals
                            ===========================
                        -->
                        <div class="panel panel-default">
                            <div class="panel-body" style="padding-bottom: 0px;">
                                <div class="row">
                                    <div class="col-md-6">

                                    </div>
                                    <div class="col-md-6">
                                        <dl class="dl-horizontal">
                                            <dt>
                                                <b>Total Amount</b>
                                            </dt>
                                            <dd>
                                                <input type="text" class="form-control numberField" id="totalPOAmount" placeholder="0.00" disabled />
                                            </dd>
                                        </dl>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!--
                    ==========
                    User Stamp
                    ==========
                -->
                <div class="panel panel-default">
                    <div class="panel-heading">
                        User stamp
                    </div>
                    <div class="panel-body">
                        <div class="row">
                            <div class="col-md-6">
                                <p>Created by:</p>
                                <div style="padding-left: 10px;">
                                    <i class="fa fa-key fa-fw"></i> <label id="createdBy">NA</label>
                                    <br />
                                    <small><i class="fa fa-calendar fa-fw"></i> &nbsp;<span id="createdDate">mm/dd/yyyy</span></small>
                                </div>
                                <br />
                            </div>
                            <div class="col-md-6">
                                <p>Updated by:</p>
                                <div style="padding-left: 10px;">
                                    <i class="fa fa-key fa-fw"></i> <label id="updatedBy">NA</label>
                                    <br />
                                    <small><i class="fa fa-calendar fa-fw"></i> &nbsp;<span id="updatedDate">mm/dd/yyyy</span></small>
                                </div>
                                <br />
                            </div>
                        </div>
                    </div>
                </div>
            </section>

            @Html.Partial("_SoftwareFooter")
        </main>
    </div>
    <div id="c-mask" class="c-mask"></div>

    <!--
        =================================
        Purchase Order Item: Detail Modal
        =================================
    -->
    <div class="modal fade" id="purchaseOrderItemDetailModal" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="purchaseOrderItemModalTitle">Purchase Order Item</h4>
                </div>
                <div class="modal-body">
                    <center>
                        <span id="purchaseOrderItemLoading"></span>
                    </center>
                    <div id="POItemContent">
                        <dl class="dl-horizontal">
                            <dt>Item</dt>
                            <dd>
                                <table style="width: 100%" border="0">
                                    <tr>
                                        <td style="width: 30%">
                                            <div class="comboBox-wide" id="cboPurchaseOrderItemCode"></div>
                                        </td>
                                        <td style="width: 1%"></td>
                                        <td style="width: 69%">
                                            <div class="comboBox-wide" id="cboPurchaseOrderItemDescription"></div>
                                        </td>
                                    </tr>
                                </table>
                            </dd>
                            <dt>Particulars</dt>
                            <dd>
                                <textarea rows="5" class="form-control textarea-custom requiredPurchaseOrderItem" id="inpPurchaseOrderItemParticulars" placeholder="Particulars"></textarea>
                            </dd>
                            <dt>Quantity</dt>
                            <dd>
                                <input type="text" class="form-control numberField requiredPurchaseOrderItem" id="inpPurchaseOrderItemQuantity" placeholder="0.00" />
                            </dd>
                            <dt>Unit</dt>
                            <dd>
                                <div class="comboBox-wide" id="cboPurchaseOrderItemUnit"></div>
                            </dd>
                            <dt>Cost</dt>
                            <dd>
                                <input type="text" class="form-control numberField requiredPurchaseOrderItem" id="inpPurchaseOrderItemCost" placeholder="0.00" />
                            </dd>
                            <dt>Amount</dt>
                            <dd>
                                <input type="text" class="form-control numberField requiredPurchaseOrderItem" id="inpPurchaseOrderItemAmount" placeholder="0.00" disabled />
                            </dd>
                        </dl>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" id="btnPurchaseOrderItemSave" onclick="btnPurchaseOrderItemSaveOnclick()"><i class="fa fa-save"></i> Save</button>
                    <button id="btnPurchaseOrderItemCloseModal" class="btn btn-danger" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!--
        =================================
        Purchase Order Item: Delete Modal
        =================================
    -->
    <div class="modal fade" id="purchaseOrderItemDeleteModal" role="dialog">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Delete</h4>
                </div>
                <div class="modal-body">
                    Delete Purchase Order Item?
                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger" id="btnPurchaseOrderItemConfirmDelete" onclick="btnPurchaseOrderItemConfirmDeleteOnclick()"><i class="fa fa-trash"></i> Delete</button>
                    <button id="btnPurchaseOrderItemConfirmDeleteCloseModal" class="btn btn-primary " data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <!--
        =====================================
        Purchase Order Item: Item Query Modal
        =====================================
    -->
    <div class="modal fade" id="purchaseOrderItemQueryModal" role="dialog">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Item Query</h4>
                </div>
                <div class="modal-body">
                    <center>
                        <span id="itemQueryLoading"></span>
                    </center>
                    <div id="itemQueryContent">
                        <div class="panel panel-default">

                            <!--
                                ========================================
                                Purchase Order Item Query: Search Filter
                                ========================================
                            -->
                            <div class="panel-heading">
                                <div class="input-group">
                                    <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                    <input type="text" class="form-control" id="inpItemQuerySearchFilter" placeholder="Search...">
                                </div>
                            </div>

                            <!--
                                ====================================
                                Purchase Order Item Query: Flex Grid
                                ====================================
                            -->
                            <div class="panel-body">
                                <div id="itemQueryFlexGrid"></div>
                            </div>

                            <!--
                                =============================================
                                Purchase Order Item Query: Navigation Buttons
                                =============================================
                            -->
                            <div class="panel-footer">
                                <div class="row">
                                    <div class="btn-group col-md-7" id="purchaseOrderItemQueryNavigationPageGrid">
                                        <button type="button" class="btn btn-default border-custom" id="btnItemQueryMoveToFirstPageGrid">
                                            <span class="glyphicon glyphicon-fast-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" id="btnItemQueryMoveToPreviousPageGrid">
                                            <span class="glyphicon glyphicon-step-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnItemQueryCurrentPageGrid"></button>
                                        <button type="button" class="btn btn-default border-custom" id="btnItemQueryMoveToNextPageGrid">
                                            <span class="glyphicon glyphicon-step-forward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" id="btnItemQueryMoveToLastPageGrid">
                                            <span class="glyphicon glyphicon-fast-forward"></span>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!--
        =======================
        Purchase Request: Modal
        =======================
    -->
    <div class="modal fade" id="purchaseRequestModal" role="dialog">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Purchase Request</h4>
                </div>
                <div class="modal-body">
                    <center>
                        <span id="purchaseRequestLoading"></span>
                    </center>
                    <div id="purchaseRequestContent">
                        <div class="panel panel-default">

                            <!--
                                ==============================================
                                Purchase Request: Search Filter and Date Range
                                ==============================================
                            -->
                            <div class="panel-heading">
                                <div class="input-group ">
                                    <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                    <input type="text" class="form-control" id="inpPurchaseRequestSearchFilter" placeholder="Search...">
                                </div>
                            </div>
                            <div class="panel-heading">
                                <table style="width: 100%" border="0">
                                    <tr>
                                        <td style="width: 24%">
                                            <div class="input-group ">
                                                <span class="input-group-addon"><b>Start Date</b></span>
                                                <div class="comboBox-wide" id="cboPurchaseRequestStartDateFilter"></div>
                                            </div>
                                        </td>
                                        <td style="width: 1%"></td>
                                        <td style="width: 24%">
                                            <div class="input-group ">
                                                <span class="input-group-addon"><b>End Date</b></span>
                                                <div class="comboBox-wide" id="cboPurchaseRequestEndDateFilter"></div>
                                            </div>
                                        </td>
                                        <td style="width: 1%"></td>
                                        <td style="width: 50%">
                                            <div class="input-group ">
                                                <span class="input-group-addon"><b>Branch</b></span>
                                                <div class="comboBox-wide" id="cboPurchaseRequestBranchFilter"></div>
                                            </div>
                                        </td>
                                    </tr>
                                </table>
                            </div>

                            <!--
                                ===========================
                                Purchase Request: Flex Grid
                                ===========================
                            -->
                            <div class="panel-body">
                                <div id="purchaseRequestFlexGrid" class="grid" align="left"></div>
                            </div>

                            <!--
                                ======================================
                                Purchase Request: Navigation Page Grid
                                ======================================
                            -->
                            <div class="panel-footer">
                                <div class="row">
                                    <div class="btn-group col-md-7" id="purchaseRequestNavigationPageGrid">
                                        <button type="button" class="btn btn-default border-custom" id="btnPurchaseRequestMoveToFirstPageGrid">
                                            <span class="glyphicon glyphicon-fast-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" id="btnPurchaseRequestMoveToPreviousPageGrid">
                                            <span class="glyphicon glyphicon-step-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnPurchaseRequestCurrentPageGrid"></button>
                                        <button type="button" class="btn btn-default border-custom" id="btnPurchaseRequestMoveToNextPageGrid">
                                            <span class="glyphicon glyphicon-step-forward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" id="btnPurchaseRequestMoveToLastPageGrid">
                                            <span class="glyphicon glyphicon-fast-forward"></span>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!--
        =============================
        Purchase Request: Apply Modal
        =============================
    -->
    <div class="modal fade" id="purchaseRequestApplyModal" role="dialog">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Apply</h4>
                </div>
                <div class="modal-body">
                    Apply Purchase Request?
                </div>
                <div class="modal-footer">
                    <button id="btnPurchaseRequestApply" class="btn btn-primary" onclick="btnPurchaseRequestApplyOnclick()"><i class="fa fa-check"></i> Apply</button>
                    <button id="btnPurchaseRequestApplyCloseModal" class="btn btn-danger" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <!--
        =================================
        Purchase Order Consignment: Modal
        =================================
    -->
    <div class="modal fade" id="purchaseOrderConsignmentModal" role="dialog">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Consignment</h4>
                </div>
                <div class="modal-body">
                    <center>
                        <span id="purchaseOrderConsignmentLoading"></span>
                    </center>
                    <div id="purchaseOrderConsignmentContent">
                        <div class="panel panel-default">

                            <!--
                                ==============================================
                                Purchase Request: Search Filter and Date Range
                                ==============================================
                            -->
                            <div class="panel-heading">
                                <div class="input-group ">
                                    <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                    <input type="text" class="form-control" id="inpPurchaseOrderConsignmentSearchFilter" placeholder="Search...">
                                </div>
                            </div>
                            <div class="panel-heading">
                                <table style="width: 100%" border="0">
                                    <tr>
                                        <td style="width: 24%">
                                            <div class="input-group ">
                                                <span class="input-group-addon"><b>Start Date</b></span>
                                                <div class="comboBox-wide" id="cboPurchaseOrderConsignmentStartDateFilter"></div>
                                            </div>
                                        </td>
                                        <td style="width: 1%"></td>
                                        <td style="width: 24%">
                                            <div class="input-group ">
                                                <span class="input-group-addon"><b>End Date</b></span>
                                                <div class="comboBox-wide" id="cboPurchaseOrderConsignmentEndDateFilter"></div>
                                            </div>
                                        </td>
                                        <td style="width: 1%"></td>
                                        <td style="width: 50%">
                                            <div class="input-group ">
                                                <span class="input-group-addon"><b>Supplier</b></span>
                                                <div class="comboBox-wide" id="cboPurchaseOrderConsignmentSupplierFilter"></div>
                                            </div>
                                        </td>
                                    </tr>
                                </table>
                            </div>

                            <!--
                                ===========================
                                Purchase Request: Flex Grid
                                ===========================
                            -->
                            <div class="panel-body">
                                <div id="purchaseOrderConsignmentFlexGrid" class="grid" align="left"></div>
                            </div>

                            <!--
                                ======================================
                                Purchase Request: Navigation Page Grid
                                ======================================
                            -->
                            <div class="panel-footer">
                                <div class="row">
                                    <div class="btn-group col-md-7" id="purchaseOrderConsignmentNavigationPageGrid">
                                        <button type="button" class="btn btn-default border-custom" id="btnPurchaseOrderConsignmentMoveToFirstPageGrid">
                                            <span class="glyphicon glyphicon-fast-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" id="btnPurchaseOrderConsignmentMoveToPreviousPageGrid">
                                            <span class="glyphicon glyphicon-step-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnPurchaseOrderConsignmentCurrentPageGrid"></button>
                                        <button type="button" class="btn btn-default border-custom" id="btnPurchaseOrderConsignmentMoveToNextPageGrid">
                                            <span class="glyphicon glyphicon-step-forward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" id="btnPurchaseOrderConsignmentMoveToLastPageGrid">
                                            <span class="glyphicon glyphicon-fast-forward"></span>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button id="btnPurchaseOrderConsignmentApply" class="btn btn-primary" onclick="btnPurchaseOrderConsignmentApplyOnclick()"><i class="fa fa-check"></i> Apply</button>
                    <button class="btn btn-danger" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!--
        =======================================
        Purchase Order Consignment: Apply Modal
        =======================================
    -->
    <div class="modal fade" id="applyPurchaseOrderConsignmentModal" role="dialog">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Apply</h4>
                </div>
                <div class="modal-body">
                    Apply Consignment Items?
                </div>
                <div class="modal-footer">
                    <button id="btnPurchaseOrderConsignmentApplyConfirm" class="btn btn-primary" onclick="btnPurchaseOrderConsignmentApplyConfirmOnclick()"><i class="fa fa-check"></i> Apply</button>
                    <button id="btnPurchaseOrderConsignmentApplyConfirmCloseModal" class="btn btn-danger" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <!--
        =======================================
        Purchase Order: Cancel Confirm Modal
        =======================================
    -->
    <div class="modal fade" id="purchaseOrderCancelConfirmModal" role="dialog">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Cancel</h4>
                </div>
                <div class="modal-body">
                    Cancel Purchase Order?
                </div>
                <div class="modal-footer">
                    <button id="btnPurchaseOrderCancelConfirm" class="btn btn-warning" onclick="btnPurchaseOrderCancelConfirmOnclick()"><i class="fa fa-times-circle-o"></i> Cancel</button>
                    <button id="btnPurchaseOrderCancelConfirmCloseModal" class="btn btn-primary" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    @Scripts.Render("~/Scripts/Software-js")
    <script type="text/javascript">
        // ===========================================
        // Purchase Order Detail Combo Data and Fields
        // ===========================================
        var cboPurchaseOrderBranch = new wijmo.input.ComboBox('#cboPurchaseOrderBranch');
        var cboPurchaseOrderPODate = new wijmo.input.InputDate('#cboPurchaseOrderPODate');
        var cboPurchaseOrderSupplier = new wijmo.input.ComboBox('#cboPurchaseOrderSupplier');
        var cboPurchaseOrderTerm = new wijmo.input.ComboBox('#cboPurchaseOrderTerm');
        var cboPurchaseOrderDateNeeded = new wijmo.input.InputDate('#cboPurchaseOrderDateNeeded');
        var cboPurchaseOrderRequestedBy = new wijmo.input.InputDate('#cboPurchaseOrderRequestedBy');
        var cboPurchaseOrderPreparedBy = new wijmo.input.InputDate('#cboPurchaseOrderPreparedBy');
        var cboPurchaseOrderCheckedBy = new wijmo.input.InputDate('#cboPurchaseOrderCheckedBy');
        var cboPurchaseOrderApprovedBy = new wijmo.input.InputDate('#cboPurchaseOrderApprovedBy');
        var cboPurchaseOrderStatus = new wijmo.input.InputDate('#cboPurchaseOrderStatus');
        var isLocked = false;

        // =====================================================================
        // Purchase Order Item Collection View, Flex Grid and Navigation Buttons
        // =====================================================================
        var purchaseOrderItemCollectionView;
        var purchaseOrderItemFlexGrid;
        var cboPurchaseOrderItemsShowNumberOfRows = new wijmo.input.ComboBox('#cboPurchaseOrderItemsShowNumberOfRows');
        var btnPurchaseOrderItemMoveToFirstPageGrid = document.getElementById('btnPurchaseOrderItemMoveToFirstPageGrid');
        var btnPurchaseOrderItemMoveToPreviousPageGrid = document.getElementById('btnPurchaseOrderItemMoveToPreviousPageGrid');
        var btnPurchaseOrderItemMoveToNextPageGrid = document.getElementById('btnPurchaseOrderItemMoveToNextPageGrid');
        var btnPurchaseOrderItemMoveToLastPageGrid = document.getElementById('btnPurchaseOrderItemMoveToLastPageGrid');
        var btnPurchaseOrderItemCurrentPageGrid = document.getElementById('btnPurchaseOrderItemCurrentPageGrid');

        // =========================================
        // Purchase Order Item Combo Data and Fields
        // =========================================
        var purchaseOrderItemId = 0;
        var cboPurchaseOrderItemCode = new wijmo.input.ComboBox('#cboPurchaseOrderItemCode');
        var cboPurchaseOrderItemDescription = new wijmo.input.ComboBox('#cboPurchaseOrderItemDescription');
        var cboPurchaseOrderItemUnit = new wijmo.input.ComboBox('#cboPurchaseOrderItemUnit');

        // ============================================================
        // Item Query Collection View, Flex Grid and Navigation Buttons
        // ============================================================
        var itemQueryItemsCollectionView;
        var itemQueryFlexGrid = new wijmo.grid.FlexGrid('#itemQueryFlexGrid');
        var btnItemQueryMoveToFirstPageGrid = document.getElementById('btnItemQueryMoveToFirstPageGrid');
        var btnItemQueryMoveToPreviousPageGrid = document.getElementById('btnItemQueryMoveToPreviousPageGrid');
        var btnItemQueryMoveToNextPageGrid = document.getElementById('btnItemQueryMoveToNextPageGrid');
        var btnItemQueryMoveToLastPageGrid = document.getElementById('btnItemQueryMoveToLastPageGrid');
        var btnItemQueryCurrentPageGrid = document.getElementById('btnItemQueryCurrentPageGrid');
        var isBtnItemQueryClicked = false;

        // ==============================================================================================
        // Purchase Order Manual Request Search Filter, Collection View, Flex Grid and Navigation Buttons
        // ==============================================================================================
        var cboPurchaseRequestStartDateFilter = new wijmo.input.InputDate('#cboPurchaseRequestStartDateFilter');
        var cboPurchaseRequestEndDateFilter = new wijmo.input.InputDate('#cboPurchaseRequestEndDateFilter');
        var isCboStartDateFilterSelected = true;
        var isCboEndDateFilterSelected = true;
        var cboPurchaseRequestBranchFilter = new wijmo.input.ComboBox('#cboPurchaseRequestBranchFilter');
        var purchaseRequestCollectionView;
        var purchaseRequestFlexGrid = new wijmo.grid.FlexGrid('#purchaseRequestFlexGrid');
        var isPurchaseRequestClicked = false;
        var btnPurchaseRequestMoveToFirstPageGrid = document.getElementById('btnPurchaseRequestMoveToFirstPageGrid');
        var btnPurchaseRequestMoveToPreviousPageGrid = document.getElementById('btnPurchaseRequestMoveToPreviousPageGrid');
        var btnPurchaseRequestMoveToNextPageGrid = document.getElementById('btnPurchaseRequestMoveToNextPageGrid');
        var btnPurchaseRequestMoveToLastPageGrid = document.getElementById('btnPurchaseRequestMoveToLastPageGrid');
        var btnPurchaseRequestCurrentPageGrid = document.getElementById('btnPurchaseRequestCurrentPageGrid');

        // ===========================================================================================
        // Purchase Order Consignment Search Filter, Collection View, Flex Grid and Navigation Buttons
        // ===========================================================================================
        var cboPurchaseOrderConsignmentStartDateFilter = new wijmo.input.InputDate('#cboPurchaseOrderConsignmentStartDateFilter');
        var cboPurchaseOrderConsignmentEndDateFilter = new wijmo.input.InputDate('#cboPurchaseOrderConsignmentEndDateFilter');
        var isConsignmentCboStartDateFilterSelected = true;
        var isConsignmentCboEndDateFilterSelected = true;
        var cboPurchaseOrderConsignmentSupplierFilter = new wijmo.input.ComboBox('#cboPurchaseOrderConsignmentSupplierFilter');
        var purchaseOrderConsignmentCollectionView;
        var purchaseOrderConsignmentFlexGrid = new wijmo.grid.FlexGrid('#purchaseOrderConsignmentFlexGrid');
        var isPurchaseOrderConsignmentClicked = false;
        var btnPurchaseOrderConsignmentMoveToFirstPageGrid = document.getElementById('btnPurchaseOrderConsignmentMoveToFirstPageGrid');
        var btnPurchaseOrderConsignmentMoveToPreviousPageGrid = document.getElementById('btnPurchaseOrderConsignmentMoveToPreviousPageGrid');
        var btnPurchaseOrderConsignmentMoveToNextPageGrid = document.getElementById('btnPurchaseOrderConsignmentMoveToNextPageGrid');
        var btnPurchaseOrderConsignmentMoveToLastPageGrid = document.getElementById('btnPurchaseOrderConsignmentMoveToLastPageGrid');
        var btnPurchaseOrderConsignmentCurrentPageGrid = document.getElementById('btnPurchaseOrderConsignmentCurrentPageGrid');
        var purchaseOrderConsignmentCurrentPageIndex = 0;

        // =======================
        // Get URL Parameter Value
        // =======================
        function getURLParameterValue(name) {
            name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");

            var regexS = "[\\?&]" + name + "=([^&#]*)";
            var regex = new RegExp(regexS);
            var results = regex.exec(window.location.href);

            if (results == null)
                return "";
            else {
                return results[1];
            }
        }

        // =========================================
        // Create Purchase Order Detail Combo Branch
        // =========================================
        function createCboPurchaseOrderDetailBranch() {
            NProgress.start();
            var branchesObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/purchaseOrder/dropdown/list/branch',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            branchesObservableArray.push({
                                Id: results[i]["Id"],
                                Branch: results[i]["Branch"]
                            });
                        }
                    }

                    cboPurchaseOrderBranch.dispose();
                    cboPurchaseOrderBranch = new wijmo.input.ComboBox('#cboPurchaseOrderBranch', {
                        disabled: true,
                        isEditable: false,
                        placeholder: "Select Branch",
                        itemsSource: branchesObservableArray,
                        displayMemberPath: "Branch",
                        selectedValuePath: "Id"
                    });

                    createCboPurchaseOrderDetailSupplier();
                }
            });
        }

        // ===========================================
        // Create Purchase Order Detail Combo Supplier
        // ===========================================
        function createCboPurchaseOrderDetailSupplier() {
            var suppliersObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/purchaseOrder/dropdown/list/supplier',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            suppliersObservableArray.push({
                                Id: results[i]["Id"],
                                Supplier: results[i]["Article"],
                                TermId: results[i]["TermId"],
                            });
                        }
                    }

                    cboPurchaseOrderSupplier.dispose();
                    cboPurchaseOrderSupplier = new wijmo.input.ComboBox('#cboPurchaseOrderSupplier', {
                        isEditable: false,
                        placeholder: "Select Supplier",
                        itemsSource: suppliersObservableArray,
                        displayMemberPath: "Supplier",
                        selectedValuePath: "Id",
                        onSelectedIndexChanged: function () {
                            cboPurchaseOrderConsignmentSupplierFilter.selectedValue = this.selectedValue;
                            if (cboPurchaseOrderTerm.selectedValue != null) {
                                cboPurchaseOrderTerm.selectedValue = cboPurchaseOrderSupplier.selectedItem["TermId"];
                            }
                        }
                    });

                    cboPurchaseOrderConsignmentSupplierFilter.dispose();
                    cboPurchaseOrderConsignmentSupplierFilter = new wijmo.input.ComboBox('#cboPurchaseOrderConsignmentSupplierFilter', {
                        isEditable: false,
                        placeholder: "Select Supplier",
                        itemsSource: suppliersObservableArray,
                        displayMemberPath: "Supplier",
                        selectedValuePath: "Id",
                        onSelectedIndexChanged: function () {
                            cboPurchaseOrderSupplier.selectedValue = this.selectedValue;
                            createPurchaseOrderConsignmentFlexGrid();
                            if (cboPurchaseOrderTerm.selectedValue != null) {
                                cboPurchaseOrderTerm.selectedValue = cboPurchaseOrderSupplier.selectedItem["TermId"];
                            }
                        }
                    });

                    createCboPurchaseOrderDetailTerm();
                }
            });
        }

        // =======================================
        // Create Purchase Order Detail Combo Term
        // =======================================
        function createCboPurchaseOrderDetailTerm() {
            var termsObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/purchaseOrder/dropdown/list/term',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            termsObservableArray.push({
                                Id: results[i]["Id"],
                                Term: results[i]["Term"]
                            });
                        }
                    }

                    cboPurchaseOrderTerm.dispose();
                    cboPurchaseOrderTerm = new wijmo.input.ComboBox('#cboPurchaseOrderTerm', {
                        isEditable: false,
                        placeholder: "Select Term",
                        itemsSource: termsObservableArray,
                        displayMemberPath: "Term",
                        selectedValuePath: "Id"
                    });

                    createCboPurchaseOrderDetailUsers();
                }
            });
        }

        // ========================================
        // Create Purchase Order Detail Combo Users
        // ========================================
        function createCboPurchaseOrderDetailUsers() {
            var usersObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/purchaseOrder/dropdown/list/users',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            usersObservableArray.push({
                                Id: results[i]["Id"],
                                FullName: results[i]["FullName"]
                            });
                        }
                    }

                    cboPurchaseOrderRequestedBy.dispose();
                    cboPurchaseOrderRequestedBy = new wijmo.input.ComboBox('#cboPurchaseOrderRequestedBy', {
                        isEditable: false,
                        placeholder: "Select User",
                        itemsSource: usersObservableArray,
                        displayMemberPath: "FullName",
                        selectedValuePath: "Id"
                    });

                    cboPurchaseOrderPreparedBy.dispose();
                    cboPurchaseOrderPreparedBy = new wijmo.input.ComboBox('#cboPurchaseOrderPreparedBy', {
                        disabled: true,
                        isEditable: false,
                        placeholder: "Select User",
                        itemsSource: usersObservableArray,
                        displayMemberPath: "FullName",
                        selectedValuePath: "Id"
                    });

                    cboPurchaseOrderCheckedBy.dispose();
                    cboPurchaseOrderCheckedBy = new wijmo.input.ComboBox('#cboPurchaseOrderCheckedBy', {
                        isEditable: false,
                        placeholder: "Select User",
                        itemsSource: usersObservableArray,
                        displayMemberPath: "FullName",
                        selectedValuePath: "Id"
                    });

                    cboPurchaseOrderApprovedBy.dispose();
                    cboPurchaseOrderApprovedBy = new wijmo.input.ComboBox('#cboPurchaseOrderApprovedBy', {
                        isEditable: false,
                        placeholder: "Select User",
                        itemsSource: usersObservableArray,
                        displayMemberPath: "FullName",
                        selectedValuePath: "Id"
                    });

                    createCboPurchaseOrderDetailStatus();
                }
            });
        }

        // =========================================
        // Create Purchase Order Detail Combo Status
        // =========================================
        function createCboPurchaseOrderDetailStatus() {
            var statusObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/purchaseOrder/dropdown/list/status',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    var disabled = false;

                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            statusObservableArray.push({
                                Id: results[i]["Id"],
                                Status: results[i]["Status"]
                            });
                        }
                    } else {
                        disabled = true;
                    }

                    cboPurchaseOrderStatus.dispose();
                    cboPurchaseOrderStatus = new wijmo.input.ComboBox('#cboPurchaseOrderStatus', {
                        disabled: disabled,
                        isEditable: false,
                        //placeholder: "Select Status",
                        itemsSource: statusObservableArray,
                        displayMemberPath: "Status",
                        selectedValuePath: "Status"
                    });

                    getPurchaseOrderDetailData();
                }
            });
        }

        // ==============================
        // Get Purchase Order Detail Data
        // ==============================
        function getPurchaseOrderDetailData() {
            if (document.location.search.length > 0) {
                var id = getURLParameterValue('id');
                $.ajax({
                    url: '/api/purchaseOrder/detail/' + id,
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    success: function (results) {
                        if (results != null) {
                            cboPurchaseOrderBranch.selectedValue = results.BranchId;
                            document.getElementById('inpPurchaseOrderPONumber').value = results.PONumber;
                            cboPurchaseOrderPODate.dispose();
                            cboPurchaseOrderPODate = new wijmo.input.InputDate('#cboPurchaseOrderPODate', {
                                format: 'MM-dd-yyyy',
                                value: new Date(results.PODate)
                            });
                            document.getElementById('inpPurchaseOrderManualPONumber').value = results.ManualPONumber;
                            cboPurchaseOrderSupplier.selectedValue = results.SupplierId;
                            cboPurchaseOrderTerm.selectedValue = results.TermId;
                            document.getElementById('inpPurchaseOrderRemarks').value = results.Remarks;
                            document.getElementById('inpPurchaseRequestNumber').value = results.ManualRequestNumber;
                            cboPurchaseOrderDateNeeded.dispose();
                            cboPurchaseOrderDateNeeded = new wijmo.input.InputDate('#cboPurchaseOrderDateNeeded', {
                                format: 'MM-dd-yyyy',
                                value: new Date(results.DateNeeded)
                            });
                            cboPurchaseOrderRequestedBy.selectedValue = results.RequestedById;
                            cboPurchaseOrderPreparedBy.selectedValue = results.PreparedById;
                            cboPurchaseOrderCheckedBy.selectedValue = results.CheckedById;
                            cboPurchaseOrderApprovedBy.selectedValue = results.ApprovedById;
                            cboPurchaseOrderStatus.selectedValue = results.Status;
                            document.getElementById('inpPurchaseOrderIsClose').checked = results.IsClose;

                            document.getElementById('createdBy').innerHTML = results.CreatedBy;
                            document.getElementById('createdDate').innerHTML = results.CreatedDateTime;
                            document.getElementById('updatedBy').innerHTML = results.UpdatedBy;
                            document.getElementById('updatedDate').innerHTML = results.UpdatedDateTime;

                            if (results.IsLocked) {
                                document.getElementById('inpPurchaseOrderPONumber').disabled = true;
                                cboPurchaseOrderPODate.disabled = true;
                                document.getElementById('inpPurchaseOrderManualPONumber').disabled = true;
                                cboPurchaseOrderSupplier.disabled = true;
                                cboPurchaseOrderTerm.disabled = true;
                                document.getElementById('inpPurchaseOrderRemarks').disabled = true;
                                document.getElementById('inpPurchaseRequestNumber').disabled = true;
                                cboPurchaseOrderDateNeeded.disabled = true;
                                cboPurchaseOrderRequestedBy.disabled = true;
                                cboPurchaseOrderPreparedBy.disabled = true;
                                cboPurchaseOrderCheckedBy.disabled = true;
                                cboPurchaseOrderApprovedBy.disabled = true;
                                cboPurchaseOrderStatus.disabled = true;
                                document.getElementById('inpPurchaseOrderIsClose').disabled = true;

                                isLocked = true;

                                $("#btnPurchaseOrderSave").prop("disabled", true);
                                $("#btnPurchaseOrderLock").prop("disabled", true);
                                $("#btnPurchaseOrderConsignment").prop("disabled", true);
                                $("#btnpurchaseRequestModal").prop("disabled", true);
                                $("#btnPurchaseOrderItemAdd").prop("disabled", true);
                                $("#btnPurchaseOrderItemItemQuery").prop("disabled", true);

                                if (results.IsCancelled) {
                                    $("#btnPurchaseOrderUnlock").prop("disabled", true);
                                    $("#btnPurchaseOrderCancel").prop("disabled", true);
                                }
                            } else {
                                $("#btnEmailPO").prop("disabled", true);
                                $("#btnPurchaseOrderUnlock").prop("disabled", true);
                                $("#btnPurchaseOrderCancel").prop("disabled", true);
                                $("#btnPurchaseOrderPrint").prop("disabled", true);
                            }

                            createCboShowRows();
                            createPurchaseOrderItemFlexGrid();
                        } else {
                            alert("No Data");
                            window.location = "/Software/PurchaseOrder";
                        }
                    }
                });
            } else {
                alert("No Id Parameter Value");
                window.location = "/Software/PurchaseOrder";
            }
        }

        // ====================
        // Email Purchase Order
        // ====================
        function btnPurchaseOrderEmailOnclick() {
            $("#btnEmailPO").prop("disabled", true);
            document.getElementById("btnEmailPO").innerHTML = "<i class='fa fa-envelope'></i> Sending...";
            $.ajax({
                type: "PUT",
                url: '/api/purchaseOrder/sendEmail/' + getURLParameterValue("PurchaseOrderId") + "/" + document.getElementById("PO_Supplier_data").value,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        document.getElementById("btnEmailPO").innerHTML = "<i class='fa fa-envelope'></i> Send E-mail";
                        $("#btnEmailPO").prop("disabled", false);
                        toastr.info("Send Email Successful");
                    },
                    404: function () {
                        document.getElementById("btnEmailPO").innerHTML = "<i class='fa fa-envelope'></i> Send E-mail";
                        $("#btnEmailPO").prop("disabled", false);
                        toastr.error("Email Not Found");
                    },
                    400: function () {
                        document.getElementById("btnEmailPO").innerHTML = "<i class='fa fa-envelope'></i> Send E-mail";
                        $("#btnEmailPO").prop("disabled", false);
                        toastr.error("Bad Request");
                    }
                }
            });
        }

        // ===================
        // Save Purchase Order
        // ===================
        function btnPurchaseOrderSaveOnclick() {
            document.getElementById('btnPurchaseOrderSave').innerHTML = "<i class='fa fa-save'></i> Saving...";
            $("#btnPurchaseOrderSave").prop("disabled", true);
            $("#btnPurchaseOrderLock").prop("disabled", true);
            $("#btnPurchaseOrderUnlock").prop("disabled", true);
            $("#btnPurchaseOrderCancel").prop("disabled", true);
            $("#btnPurchaseOrderPrint").prop("disabled", true);
            $("#btnPurchaseOrderClose").prop("disabled", true);

            var purchaseOrderObject = new Object();
            purchaseOrderObject.PODate = cboPurchaseOrderPODate.value.toLocaleDateString();
            purchaseOrderObject.SupplierId = cboPurchaseOrderSupplier.selectedValue;
            purchaseOrderObject.TermId = cboPurchaseOrderTerm.selectedValue;
            purchaseOrderObject.ManualRequestNumber = document.getElementById('inpPurchaseRequestNumber').value;
            purchaseOrderObject.ManualPONumber = document.getElementById('inpPurchaseOrderManualPONumber').value;
            purchaseOrderObject.DateNeeded = cboPurchaseOrderDateNeeded.value.toLocaleDateString();
            purchaseOrderObject.Remarks = document.getElementById('inpPurchaseOrderRemarks').value;
            purchaseOrderObject.IsClose = document.getElementById('inpPurchaseOrderIsClose').checked;
            purchaseOrderObject.RequestedById = cboPurchaseOrderRequestedBy.selectedValue;
            purchaseOrderObject.CheckedById = cboPurchaseOrderCheckedBy.selectedValue;
            purchaseOrderObject.ApprovedById = cboPurchaseOrderApprovedBy.selectedValue;
            purchaseOrderObject.Status = cboPurchaseOrderStatus.selectedValue;
            var purchaseOrderData = JSON.stringify(purchaseOrderObject);

            var isValid = true;
            $('.requiredPO').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                }
                else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            if (isValid) {
                var id = getURLParameterValue('id');

                $.ajax({
                    type: "PUT",
                    url: '/api/purchaseOrder/save/' + id,
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    data: purchaseOrderData,
                    statusCode: {
                        200: function () {
                            toastr.success("Save Successful");
                            window.setTimeout(function () {
                                location.reload()
                            }, 1000);
                        },
                        404: function (message) {
                            toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                            document.getElementById('btnPurchaseOrderSave').innerHTML = "<i class='fa fa-save'></i> Save";
                            $("#btnPurchaseOrderSave").prop("disabled", false);

                            if (isLocked) {
                                $("#btnPurchaseOrderUnlock").prop("disabled", false);
                                $("#btnPurchaseOrderCancel").prop("disabled", false);
                                $("#btnPurchaseOrderPrint").prop("disabled", false);
                            } else {
                                $("#btnPurchaseOrderLock").prop("disabled", false);
                            }

                            $("#btnPurchaseOrderClose").prop("disabled", false);
                        },
                        400: function (message) {
                            toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                            document.getElementById('btnPurchaseOrderSave').innerHTML = "<i class='fa fa-save'></i> Save";
                            $("#btnPurchaseOrderSave").prop("disabled", false);

                            if (isLocked) {
                                $("#btnPurchaseOrderUnlock").prop("disabled", false);
                                $("#btnPurchaseOrderCancel").prop("disabled", false);
                                $("#btnPurchaseOrderPrint").prop("disabled", false);
                            } else {
                                $("#btnPurchaseOrderLock").prop("disabled", false);
                            }

                            $("#btnPurchaseOrderClose").prop("disabled", false);
                        },
                        500: function (message) {
                            toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                            document.getElementById('btnPurchaseOrderSave').innerHTML = "<i class='fa fa-save'></i> Save";
                            $("#btnPurchaseOrderSave").prop("disabled", false);

                            if (isLocked) {
                                $("#btnPurchaseOrderUnlock").prop("disabled", false);
                                $("#btnPurchaseOrderCancel").prop("disabled", false);
                                $("#btnPurchaseOrderPrint").prop("disabled", false);
                            } else {
                                $("#btnPurchaseOrderLock").prop("disabled", false);
                            }

                            $("#btnPurchaseOrderClose").prop("disabled", false);
                        }
                    },
                });
            } else {
                toastr.error("Invalid Entry");

                document.getElementById('btnPurchaseOrderSave').innerHTML = "<i class='fa fa-save'></i> Save";
                $("#btnPurchaseOrderSave").prop("disabled", false);

                if (isLocked) {
                    $("#btnPurchaseOrderUnlock").prop("disabled", false);
                    $("#btnPurchaseOrderCancel").prop("disabled", false);
                    $("#btnPurchaseOrderPrint").prop("disabled", false);
                } else {
                    $("#btnPurchaseOrderLock").prop("disabled", false);
                }

                $("#btnPurchaseOrderClose").prop("disabled", false);
            }
        }

        // ===================
        // Lock Purchase Order
        // ===================
        function btnPurchaseOrderLockOnclick() {
            document.getElementById('btnPurchaseOrderLock').innerHTML = "<i class='fa fa-lock'></i> Locking...";
            $("#btnPurchaseOrderSave").prop("disabled", true);
            $("#btnPurchaseOrderLock").prop("disabled", true);
            $("#btnPurchaseOrderUnlock").prop("disabled", true);
            $("#btnPurchaseOrderCancel").prop("disabled", true);
            $("#btnPurchaseOrderPrint").prop("disabled", true);
            $("#btnPurchaseOrderClose").prop("disabled", true);

            var purchaseOrderObject = new Object();
            purchaseOrderObject.PODate = cboPurchaseOrderPODate.value.toLocaleDateString();
            purchaseOrderObject.SupplierId = cboPurchaseOrderSupplier.selectedValue;
            purchaseOrderObject.TermId = cboPurchaseOrderTerm.selectedValue;
            purchaseOrderObject.ManualRequestNumber = document.getElementById('inpPurchaseRequestNumber').value;
            purchaseOrderObject.ManualPONumber = document.getElementById('inpPurchaseOrderManualPONumber').value;
            purchaseOrderObject.DateNeeded = cboPurchaseOrderDateNeeded.value.toLocaleDateString();
            purchaseOrderObject.Remarks = document.getElementById('inpPurchaseOrderRemarks').value;
            purchaseOrderObject.IsClose = document.getElementById('inpPurchaseOrderIsClose').checked;
            purchaseOrderObject.RequestedById = cboPurchaseOrderRequestedBy.selectedValue;
            purchaseOrderObject.CheckedById = cboPurchaseOrderCheckedBy.selectedValue;
            purchaseOrderObject.ApprovedById = cboPurchaseOrderApprovedBy.selectedValue;
            purchaseOrderObject.Status = cboPurchaseOrderStatus.selectedValue;
            var purchaseOrderData = JSON.stringify(purchaseOrderObject);

            var isValid = true;
            $('.requiredPO').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                }
                else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            if (isValid) {
                var id = getURLParameterValue('id');

                $.ajax({
                    type: "PUT",
                    url: '/api/purchaseOrder/lock/' + id,
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    data: purchaseOrderData,
                    statusCode: {
                        200: function () {
                            toastr.success("Lock Successful");
                            window.setTimeout(function () {
                                location.reload()
                            }, 1000);
                        },
                        404: function (message) {
                            toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                            document.getElementById('btnPurchaseOrderLock').innerHTML = "<i class='fa fa-lock'></i> Lock";
                            $("#btnPurchaseOrderSave").prop("disabled", false);
                            $("#btnPurchaseOrderLock").prop("disabled", false);
                            $("#btnPurchaseOrderClose").prop("disabled", false);
                        },
                        400: function (message) {
                            toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                            document.getElementById('btnPurchaseOrderLock').innerHTML = "<i class='fa fa-lock'></i> Lock";
                            $("#btnPurchaseOrderSave").prop("disabled", false);
                            $("#btnPurchaseOrderLock").prop("disabled", false);
                            $("#btnPurchaseOrderClose").prop("disabled", false);
                        },
                        500: function (message) {
                            toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                            document.getElementById('btnPurchaseOrderLock').innerHTML = "<i class='fa fa-lock'></i> Lock";
                            $("#btnPurchaseOrderSave").prop("disabled", false);
                            $("#btnPurchaseOrderLock").prop("disabled", false);
                            $("#btnPurchaseOrderClose").prop("disabled", false);
                        }
                    },
                });
            } else {
                toastr.error("Invalid Entry");

                document.getElementById('btnPurchaseOrderLock').innerHTML = "<i class='fa fa-lock'></i> Lock";
                $("#btnPurchaseOrderSave").prop("disabled", false);
                $("#btnPurchaseOrderLock").prop("disabled", false);
                $("#btnPurchaseOrderClose").prop("disabled", false);
            }
        }

        // =====================
        // Unlock Purchase Order
        // =====================
        function btnPurchaseOrderUnlockOnclick() {
            document.getElementById('btnPurchaseOrderUnlock').innerHTML = "<i class='fa fa-unlock'></i> Unlocking...";
            $("#btnPurchaseOrderSave").prop("disabled", true);
            $("#btnPurchaseOrderLock").prop("disabled", true);
            $("#btnPurchaseOrderUnlock").prop("disabled", true);
            $("#btnPurchaseOrderCancel").prop("disabled", true);
            $("#btnPurchaseOrderPrint").prop("disabled", true);
            $("#btnPurchaseOrderClose").prop("disabled", true);

            var id = getURLParameterValue('id');

            $.ajax({
                type: "PUT",
                url: '/api/purchaseOrder/unlock/' + id,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Unlock Successful");
                        window.setTimeout(function () {
                            location.reload()
                        }, 1000);
                    },
                    404: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                        document.getElementById('btnPurchaseOrderUnlock').innerHTML = "<i class='fa fa-unlock'></i> Unlock";
                        $("#btnPurchaseOrderSave").prop("disabled", false);
                        $("#btnPurchaseOrderUnlock").prop("disabled", false);
                        $("#btnPurchaseOrderCancel").prop("disabled", false);
                        $("#btnPurchaseOrderPrint").prop("disabled", false);
                        $("#btnPurchaseOrderClose").prop("disabled", false);
                    },
                    400: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                        document.getElementById('btnPurchaseOrderUnlock').innerHTML = "<i class='fa fa-unlock'></i> Unlock";
                        $("#btnPurchaseOrderSave").prop("disabled", false);
                        $("#btnPurchaseOrderUnlock").prop("disabled", false);
                        $("#btnPurchaseOrderCancel").prop("disabled", false);
                        $("#btnPurchaseOrderPrint").prop("disabled", false);
                        $("#btnPurchaseOrderClose").prop("disabled", false);
                    },
                    500: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                        document.getElementById('btnPurchaseOrderUnlock').innerHTML = "<i class='fa fa-unlock'></i> Unlock";
                        $("#btnPurchaseOrderSave").prop("disabled", false);
                        $("#btnPurchaseOrderUnlock").prop("disabled", false);
                        $("#btnPurchaseOrderCancel").prop("disabled", false);
                        $("#btnPurchaseOrderPrint").prop("disabled", false);
                        $("#btnPurchaseOrderClose").prop("disabled", false);
                    }
                }
            });
        }

        // =====================
        // Cancel Purchase Order
        // =====================
        function btnPurchaseOrderCancelOnclick() {
            $('#purchaseOrderCancelConfirmModal').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById('btnPurchaseOrderCancelConfirm').innerHTML = "<i class='fa fa-times-circle-o'></i> Cancel";
            $("#btnPurchaseOrderCancelConfirm").prop("disabled", false);
            $("#btnPurchaseOrderCancelConfirmCloseModal").prop("disabled", false);
        }

        // =============================
        // Confirm Cancel Purchase Order
        // =============================
        function btnPurchaseOrderCancelConfirmOnclick() {
            document.getElementById('btnPurchaseOrderCancelConfirm').innerHTML = "<i class='fa fa-times-circle-o'></i> Cancelling...";
            $("#btnPurchaseOrderCancelConfirm").prop("disabled", true);
            $("#btnPurchaseOrderCancelConfirmCloseModal").prop("disabled", true);

            document.getElementById('btnPurchaseOrderCancel').innerHTML = "<i class='fa fa-times-circle-o'></i> Cancelling...";
            $("#btnPurchaseOrderLock").prop("disabled", true);
            $("#btnPurchaseOrderUnlock").prop("disabled", true);
            $("#btnPurchaseOrderCancel").prop("disabled", true);
            $("#btnPurchaseOrderPrint").prop("disabled", true);
            $("#btnPurchaseOrderClose").prop("disabled", true);

            var id = getURLParameterValue('id');

            $.ajax({
                type: "PUT",
                url: '/api/purchaseOrder/cancel/' + id,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Cancel Successful");
                        window.setTimeout(function () {
                            location.reload()
                        }, 1000);
                    },
                    404: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                        document.getElementById('btnPurchaseOrderCancel').innerHTML = "<i class='fa fa-times-circle-o'></i> Cancel";
                        $("#btnPurchaseOrderUnlock").prop("disabled", false);
                        $("#btnPurchaseOrderCancel").prop("disabled", false);
                        $("#btnPurchaseOrderPrint").prop("disabled", false);
                        $("#btnPurchaseOrderClose").prop("disabled", false);

                        document.getElementById('btnPurchaseOrderCancelConfirm').innerHTML = "<i class='fa fa-times-circle-o'></i> Cancel";
                        $("#btnPurchaseOrderCancelConfirm").prop("disabled", false);
                        $("#btnPurchaseOrderCancelConfirmCloseModal").prop("disabled", false);
                    },
                    400: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                        document.getElementById('btnPurchaseOrderCancel').innerHTML = "<i class='fa fa-times-circle-o'></i> Cancel";
                        $("#btnPurchaseOrderUnlock").prop("disabled", false);
                        $("#btnPurchaseOrderCancel").prop("disabled", false);
                        $("#btnPurchaseOrderPrint").prop("disabled", false);
                        $("#btnPurchaseOrderClose").prop("disabled", false);

                        document.getElementById('btnPurchaseOrderCancelConfirm').innerHTML = "<i class='fa fa-times-circle-o'></i> Cancel";
                        $("#btnPurchaseOrderCancelConfirm").prop("disabled", false);
                        $("#btnPurchaseOrderCancelConfirmCloseModal").prop("disabled", false);
                    },
                    500: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                        document.getElementById('btnPurchaseOrderCancel').innerHTML = "<i class='fa fa-times-circle-o'></i> Cancel";
                        $("#btnPurchaseOrderUnlock").prop("disabled", false);
                        $("#btnPurchaseOrderCancel").prop("disabled", false);
                        $("#btnPurchaseOrderPrint").prop("disabled", false);
                        $("#btnPurchaseOrderClose").prop("disabled", false);

                        document.getElementById('btnPurchaseOrderCancelConfirm').innerHTML = "<i class='fa fa-times-circle-o'></i> Cancel";
                        $("#btnPurchaseOrderCancelConfirm").prop("disabled", false);
                        $("#btnPurchaseOrderCancelConfirmCloseModal").prop("disabled", false);
                    }
                }
            });
        }

        // ====================
        // Print Purchase Order
        // ====================
        function btnPurchaseOrderPrintOnclick() {
            var PurchaseOrderId = getURLParameterValue('id');
            var pirntLink = "/RepPurchaseOrder/PurchaseOrder?POId=" + PurchaseOrderId;

            window.open(pirntLink, '_blank');
        }

        // ============================
        // Get Purchase Order Item Data
        // ============================
        function getPurchaseOrderItemData() {
            var purchaseOrderItemsObservableArray = new wijmo.collections.ObservableArray;
            if (document.location.search.length > 0) {
                var POId = getURLParameterValue('id');
                $.ajax({
                    url: '/api/purchaseOrderItem/list/' + POId,
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    success: function (results) {
                        var totalAmount = 0;
                        if (results.length > 0) {
                            var btnEditId = "<button class='btn btn-primary btn-xs btn-block' onclick='btnPurchaseOrderItemEditOnclick()'><i class='fa fa-edit'></i> Edit</button>";
                            var btnDeleteId = "<button class='btn btn-danger btn-xs btn-block' onclick='btnPurchaseOrderItemDeleteOnclick()'><i class='fa fa-trash'></i> Delete</button>";
                            if (isLocked) {
                                btnEditId = "<button class='btn btn-primary btn-xs btn-block' onclick='btnPurchaseOrderItemEditOnclick()' disabled><i class='fa fa-edit'></i> Edit</button>";
                                btnDeleteId = "<button class='btn btn-danger btn-xs btn-block' onclick='btnPurchaseOrderItemDeleteOnclick()' disabled><i class='fa fa-trash'></i> Delete</button>";
                            }

                            for (i = 0; i < results.length; i++) {
                                purchaseOrderItemsObservableArray.push({
                                    EditId: btnEditId,
                                    DeleteId: btnDeleteId,
                                    Id: results[i]["Id"],
                                    POId: results[i]["POId"],
                                    ItemId: results[i]["ItemId"],
                                    ItemCode: results[i]["ItemCode"],
                                    ItemManualOldCode: results[i]["ItemManualOldCode"],
                                    ItemDescription: results[i]["ItemDescription"],
                                    Particulars: results[i]["Particulars"],
                                    Quantity: results[i]["Quantity"],
                                    QuantityDisplay: parseFloat(results[i]["Quantity"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                    UnitId: results[i]["UnitId"],
                                    Unit: results[i]["Unit"],
                                    Cost: results[i]["Cost"],
                                    CostDisplay: parseFloat(results[i]["Cost"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                    Amount: results[i]["Amount"],
                                    AmountDisplay: parseFloat(results[i]["Amount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                    BaseUnit: results[i]["BaseUnit"],
                                    BaseQuantity: results[i]["BaseQuantity"],
                                    BaseQuantityDisplay: parseFloat(results[i]["BaseQuantity"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                    BaseCost: results[i]["BaseCost"],
                                    BaseCostDisplay: parseFloat(results[i]["BaseCost"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")
                                });

                                totalAmount += results[i]["Amount"];
                            }
                        }

                        document.getElementById('totalPOAmount').value = parseFloat(totalAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        NProgress.done();
                    }
                });
            }

            return purchaseOrderItemsObservableArray;
        }

        // ===================================
        // Create Purchase Order Item FlexGrid
        // ===================================
        function createPurchaseOrderItemFlexGrid() {
            purchaseOrderItemCollectionView = new wijmo.collections.CollectionView(getPurchaseOrderItemData());
            purchaseOrderItemCollectionView.canFilter = true;
            purchaseOrderItemCollectionView.pageSize = cboPurchaseOrderItemsShowNumberOfRows.selectedValue;

            var filterText = '';
            $('#inpPurchaseOrderItemSearchFilter').keyup(function () {
                filterText = this.value.toLowerCase();
                purchaseOrderItemCollectionView.refresh();
            });

            purchaseOrderItemCollectionView.filter = function (item) {
                return !filterText || (item.ItemCode.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.ItemDescription.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Particulars.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Unit.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.BaseUnit.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.ItemManualOldCode.toLowerCase().indexOf(filterText) > -1);
            }

            purchaseOrderItemCollectionView.collectionChanged.addHandler(function (sender, args) {
                updatePurchaseOrderItemNavigationButtons();
            });

            purchaseOrderItemFlexGrid = new wijmo.grid.FlexGrid('#purchaseOrderItemFlexGrid');
            purchaseOrderItemFlexGrid.initialize({
                columns: [
                    @{
                        if (canEdit)
                        {
                            <text>
                                {
                                    "header": "Edit",
                                    "binding": "EditId",
                                    "width": 70,
                                    "align": "center",
                                    "allowResizing": false,
                                    "allowSorting": false,
                                    "isContentHtml": true
                                },
                            </text>
                        }
                        if (canDelete)
                        {
                            <text>
                                {
                                    "header": "Delete",
                                    "binding": "DeleteId",
                                    "width": 70,
                                    "align": "center",
                                    "allowResizing": false,
                                    "allowSorting": false,
                                    "isContentHtml": true
                                },
                            </text>
                        }
                    }
                    {
                        "header": "Barcode",
                        "binding": "ItemCode",
                        "allowSorting": true,
                        "width": 130,
                    },
                    {
                        "header": "SKU Code",
                        "binding": "ItemManualOldCode",
                        "allowSorting": true,
                        "width": 130,
                    },
                    {
                        "header": "Description",
                        "binding": "ItemDescription",
                        "allowSorting": true,
                        "width": 200
                    },
                    {
                        "header": "Particulars",
                        "binding": "Particulars",
                        "allowSorting": true,
                        "width": 200
                    },
                    {
                        "header": "Quantity",
                        "binding": "QuantityDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": 100
                    },
                    {
                        "header": "Unit",
                        "binding": "Unit",
                        "allowSorting": true,
                        "width": 100
                    },
                    {
                        "header": "Cost",
                        "binding": "CostDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": 100
                    },
                    {
                        "header": "Amount",
                        "binding": "AmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": 100
                    },
                    {
                        "header": "Unit",
                        "binding": "BaseUnit",
                        "allowSorting": true,
                        "width": 100
                    },
                    {
                        "header": "Quantity",
                        "binding": "BaseQuantityDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": 100
                    },
                    {
                        "header": "Cost",
                        "binding": "BaseCostDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": 100
                    }
                ],
                autoGenerateColumns: false,
                itemsSource: purchaseOrderItemCollectionView,
                isReadOnly: true,
                @{
                    if (canEdit)
                    {
                        if (canDelete)
                        {
                            <text>
                                frozenColumns: 2,
                            </text>
                        }
                        else
                        {
                            <text>
                                frozenColumns: 1,
                            </text>
                        }
                    }
                    else
                    {
                        if (canDelete)
                        {
                            <text>
                                frozenColumns: 1,
                            </text>
                        }
                        else
                        {
                            <text>
                                frozenColumns: 0,
                            </text>
                        }
                    }
                }
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            purchaseOrderItemFlexGrid.trackChanges = true;

            var hr = new wijmo.grid.Row();
            purchaseOrderItemFlexGrid.allowMerging = wijmo.grid.AllowMerging.AllHeaders;
            purchaseOrderItemFlexGrid.columnHeaders.rows.push(hr);
            purchaseOrderItemFlexGrid.columnHeaders.rows[0].allowMerging = true;

            @{
                if (canEdit)
                {
                    if (canDelete)
                    {
                        <text>
                            var columnName = "";
                            for (var i = 0; i <= 12; i++) {
                                if (i == 0) {
                                    columnName = "Edit";
                                } else if (i == 1) {
                                    columnName = "Delete";
                                } else if (i == 2) {
                                    columnName = "Barcode";
                                } else if (i == 3) {
                                    columnName = "SKU Code";
                                } else if (i == 4) {
                                    columnName = "Description";
                                } else if (i == 5) {
                                    columnName = "Particulars";
                                } else if (i == 6) {
                                    columnName = "Quantity";
                                } else if (i == 7) {
                                    columnName = "Unit";
                                } else if (i == 8) {
                                    columnName = "Cost";
                                } else if (i == 9) {
                                    columnName = "Amount";
                                } else {
                                    columnName = "Basic Unit Conversion";
                                }

                                purchaseOrderItemFlexGrid.columnHeaders.columns[i].allowMerging = true;
                                purchaseOrderItemFlexGrid.columnHeaders.setCellData(0, i, columnName);
                            }
                        </text>
                    }
                    else
                    {
                         <text>
                            var columnName = "";
                            for (var i = 0; i <= 11; i++) {
                                if (i == 0) {
                                    columnName = "Edit";
                                } else if (i == 1) {
                                    columnName = "Barcode";
                                } else if (i == 2) {
                                    columnName = "SKU Code";
                                } else if (i == 3) {
                                    columnName = "Description";
                                } else if (i == 4) {
                                    columnName = "Particulars";
                                } else if (i == 5) {
                                    columnName = "Quantity";
                                } else if (i == 6) {
                                    columnName = "Unit";
                                } else if (i == 7) {
                                    columnName = "Cost";
                                } else if (i == 8) {
                                    columnName = "Amount";
                                } else {
                                    columnName = "Basic Unit Conversion";
                                }

                                purchaseOrderItemFlexGrid.columnHeaders.columns[i].allowMerging = true;
                                purchaseOrderItemFlexGrid.columnHeaders.setCellData(0, i, columnName);
                            }
                        </text>
                    }
                }
                else
                {
                    if (canDelete)
                    {
                        <text>
                            var columnName = "";
                            for (var i = 0; i <= 11; i++) {
                                if (i == 0) {
                                    columnName = "Delete";
                                } else if (i == 1) {
                                    columnName = "Barcode";
                                } else if (i == 2) {
                                    columnName = "SKU Code";
                                } else if (i == 3) {
                                    columnName = "Description";
                                } else if (i == 4) {
                                    columnName = "Particulars";
                                } else if (i == 5) {
                                    columnName = "Quantity";
                                } else if (i == 6) {
                                    columnName = "Unit";
                                } else if (i == 7) {
                                    columnName = "Cost";
                                } else if (i == 8) {
                                    columnName = "Amount";
                                } else {
                                    columnName = "Basic Unit Conversion";
                                }

                                purchaseOrderItemFlexGrid.columnHeaders.columns[i].allowMerging = true;
                                purchaseOrderItemFlexGrid.columnHeaders.setCellData(0, i, columnName);


                            }
                        </text>
                    }
                    else
                    {
                         <text>
                            var columnName = "";
                            for (var i = 0; i <= 10; i++) {
                                if (i == 0) {
                                    columnName = "Barcode";
                                } else if (i == 1) {
                                    columnName = "SKU Code";
                                } else if (i == 2) {
                                    columnName = "Description";
                                } else if (i == 3) {
                                    columnName = "Particulars";
                                } else if (i == 4) {
                                    columnName = "Quantity";
                                } else if (i == 5) {
                                    columnName = "Unit";
                                } else if (i == 6) {
                                    columnName = "Cost";
                                } else if (i == 7) {
                                    columnName = "Amount";
                                } else {
                                    columnName = "Basic Unit Conversion";
                                }

                                purchaseOrderItemFlexGrid.columnHeaders.columns[i].allowMerging = true;
                                purchaseOrderItemFlexGrid.columnHeaders.setCellData(0, i, columnName);
                            }
                        </text>
                    }
                }
            }

            updatePurchaseOrderItemNavigationButtons();

            btnPurchaseOrderItemMoveToFirstPageGrid.addEventListener('click', function () {
                purchaseOrderItemCollectionView.moveToFirstPage();
                updatePurchaseOrderItemNavigationButtons();
            });

            btnPurchaseOrderItemMoveToPreviousPageGrid.addEventListener('click', function () {
                purchaseOrderItemCollectionView.moveToPreviousPage();
                updatePurchaseOrderItemNavigationButtons();
            });

            btnPurchaseOrderItemMoveToNextPageGrid.addEventListener('click', function () {
                purchaseOrderItemCollectionView.moveToNextPage();
                updatePurchaseOrderItemNavigationButtons();
            });

            btnPurchaseOrderItemMoveToLastPageGrid.addEventListener('click', function () {
                purchaseOrderItemCollectionView.moveToLastPage();
                updatePurchaseOrderItemNavigationButtons();
            });
        }

        // =============================================
        // Update Purchase Order Item Navigation Buttons
        // =============================================
        function updatePurchaseOrderItemNavigationButtons() {
            if (purchaseOrderItemCollectionView.pageSize <= 0) {
                document.getElementById('purchaseOrderItemNavigationPageGrid').style.display = 'none';
                return;
            }
            document.getElementById('purchaseOrderItemNavigationPageGrid').style.display = 'block';
            if (purchaseOrderItemCollectionView.pageIndex === 0) {
                btnPurchaseOrderItemMoveToFirstPageGrid.setAttribute('disabled', 'disabled');
                btnPurchaseOrderItemMoveToPreviousPageGrid.setAttribute('disabled', 'disabled');
                btnPurchaseOrderItemMoveToNextPageGrid.removeAttribute('disabled');
                btnPurchaseOrderItemMoveToLastPageGrid.removeAttribute('disabled');
            } else if (purchaseOrderItemCollectionView.pageIndex === (purchaseOrderItemCollectionView.pageCount - 1)) {
                btnPurchaseOrderItemMoveToFirstPageGrid.removeAttribute('disabled');
                btnPurchaseOrderItemMoveToPreviousPageGrid.removeAttribute('disabled');
                btnPurchaseOrderItemMoveToLastPageGrid.setAttribute('disabled', 'disabled');
                btnPurchaseOrderItemMoveToNextPageGrid.setAttribute('disabled', 'disabled');
            } else {
                btnPurchaseOrderItemMoveToFirstPageGrid.removeAttribute('disabled');
                btnPurchaseOrderItemMoveToPreviousPageGrid.removeAttribute('disabled');
                btnPurchaseOrderItemMoveToNextPageGrid.removeAttribute('disabled');
                btnPurchaseOrderItemMoveToLastPageGrid.removeAttribute('disabled');
            }
            btnPurchaseOrderItemCurrentPageGrid.innerHTML = (purchaseOrderItemCollectionView.pageIndex + 1) + ' / ' + purchaseOrderItemCollectionView.pageCount;
        }

        // ===============
        // Show Rows Table
        // ===============
        function createCboShowRows() {
            var rowsObservableArray = new wijmo.collections.ObservableArray();

            for (var i = 0; i <= 4; i++) {
                var rows = 0;
                var rowsString = "";

                if (i == 0) {
                    rows = 15;
                    rowsString = "Show 15 Rows";
                } else if (i == 1) {
                    rows = 50;
                    rowsString = "Show 50 Rows";
                } else if (i == 2) {
                    rows = 100;
                    rowsString = "Show 100 Rows";
                } else if (i == 3) {
                    rows = 150;
                    rowsString = "Show 150 Rows";
                } else {
                    rows = 200;
                    rowsString = "Show 200 Rows";
                }

                rowsObservableArray.push({
                    rowNumber: rows,
                    rowString: rowsString
                });
            }

            cboPurchaseOrderItemsShowNumberOfRows.dispose();
            cboPurchaseOrderItemsShowNumberOfRows = new wijmo.input.ComboBox('#cboPurchaseOrderItemsShowNumberOfRows', {
                isEditable: false,
                itemsSource: rowsObservableArray,
                displayMemberPath: "rowString",
                selectedValuePath: "rowNumber",
                selectedValue: 50,
                onSelectedIndexChanged: function () {
                    NProgress.start();

                    setTimeout(function () {
                        var numberOfRows = cboPurchaseOrderItemsShowNumberOfRows.selectedValue;
                        purchaseOrderItemCollectionView.pageSize = parseInt(numberOfRows);
                        purchaseOrderItemCollectionView.refresh();
                        purchaseOrderItemFlexGrid.refresh();

                        NProgress.done();
                    }, 300);
                }
            });
        }

        // ================================
        // Refresh Purchase Order Item Grid
        // ================================
        function refreshPurchaseOrderItemFlexGrid() {
            purchaseOrderItemCollectionView = new wijmo.collections.CollectionView(getPurchaseOrderItemData());
            purchaseOrderItemCollectionView.canFilter = true;
            purchaseOrderItemCollectionView.pageSize = cboPurchaseOrderItemsShowNumberOfRows.selectedValue;

            var filterText = '';
            $('#inpPurchaseOrderItemSearchFilter').keyup(function () {
                filterText = this.value.toLowerCase();
                purchaseOrderItemCollectionView.refresh();
            });

            purchaseOrderItemCollectionView.filter = function (item) {
                return !filterText || (item.ItemCode.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.ItemDescription.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Particulars.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Unit.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.BaseUnit.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.ItemManualOldCode.toLowerCase().indexOf(filterText) > -1);
            }

            purchaseOrderItemCollectionView.collectionChanged.addHandler(function (sender, args) {
                updatePurchaseOrderItemNavigationButtons();
            });

            purchaseOrderItemFlexGrid.itemsSource = purchaseOrderItemCollectionView;
            purchaseOrderItemFlexGrid.trackChanges = true;
        }

        // =======================================
        // Create Purchase Order Item Combo - Item
        // =======================================
        function createCboPurchaseOrderItem(itemIdSelectedValue, itemUnitIdSelectedValue) {
            var itemsObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/purchaseOrderItem/dropdown/list/item',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    var disabled = true;
                    document.getElementById("btnPurchaseOrderItemSave").disabled = true;

                    if (results.length > 0) {
                        disabled = false;
                        document.getElementById("btnPurchaseOrderItemSave").disabled = false;

                        for (i = 0; i < results.length; i++) {
                            itemsObservableArray.push({
                                Id: results[i]["Id"],
                                ManualArticleCode: results[i]["ManualArticleCode"],
                                Article: results[i]["Article"]
                            });
                        }
                    }

                    cboPurchaseOrderItemCode.dispose();
                    cboPurchaseOrderItemCode = new wijmo.input.ComboBox('#cboPurchaseOrderItemCode', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: itemsObservableArray,
                        displayMemberPath: "ManualArticleCode",
                        selectedValuePath: "Id",
                        selectedValue: itemIdSelectedValue,
                        onSelectedIndexChanged: function () {
                            cboPurchaseOrderItemDescription.selectedValue = this.selectedValue;
                        }
                    });

                    cboPurchaseOrderItemDescription.dispose();
                    cboPurchaseOrderItemDescription = new wijmo.input.ComboBox('#cboPurchaseOrderItemDescription', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: itemsObservableArray,
                        displayMemberPath: "Article",
                        selectedValuePath: "Id",
                        selectedValue: itemIdSelectedValue,
                        onSelectedIndexChanged: function () {
                            cboPurchaseOrderItemCode.selectedValue = this.selectedValue;
                            createCboPurchaseOrderItemUnit(this.selectedValue, itemUnitIdSelectedValue);
                        }
                    });

                    createCboPurchaseOrderItemUnit(cboPurchaseOrderItemDescription.selectedValue, itemUnitIdSelectedValue);
                }
            });
        }

        // =======================================
        // Create Purchase Order Item Combo - Unit
        // =======================================
        function createCboPurchaseOrderItemUnit(itemId, itemUnitIdSelectedValue) {
            var unitsObservableArray = new wijmo.collections.ObservableArray();
            if (itemId != null) {
                $.ajax({
                    url: '/api/purchaseOrderItem/dropdown/list/itemUnit/' + itemId,
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    success: function (results) {
                        var disabled = true;
                        if (results.length > 0) {
                            disabled = false;

                            if (!document.getElementById("btnPurchaseOrderItemSave").disabled) {
                                document.getElementById("btnPurchaseOrderItemSave").disabled = false;
                            }

                            for (i = 0; i < results.length; i++) {
                                unitsObservableArray.push({
                                    Id: results[i]["Id"],
                                    UnitId: results[i]["UnitId"],
                                    Unit: results[i]["Unit"]
                                });
                            }
                        } else {
                            document.getElementById("btnPurchaseOrderItemSave").disabled = true;
                        }

                        cboPurchaseOrderItemUnit.dispose();
                        cboPurchaseOrderItemUnit = new wijmo.input.ComboBox('#cboPurchaseOrderItemUnit', {
                            disabled: disabled,
                            isEditable: false,
                            itemsSource: unitsObservableArray,
                            displayMemberPath: "Unit",
                            selectedValuePath: "UnitId",
                            selectedValue: itemUnitIdSelectedValue
                        });

                        $("#purchaseOrderItemLoading").hide();
                        $("#POItemContent").show();
                    }
                });
            } else {
                document.getElementById("btnPurchaseOrderItemSave").disabled = true;

                cboPurchaseOrderItemUnit.dispose();
                cboPurchaseOrderItemUnit = new wijmo.input.ComboBox('#cboPurchaseOrderItemUnit', {
                    disabled: true,
                    isEditable: false,
                    itemsSource: unitsObservableArray
                });

                $("#purchaseOrderItemLoading").hide();
                $("#POItemContent").show();
            }
        }

        // =======================
        // Add Purchase Order Item
        // =======================
        function btnPurchaseOrderItemAddOnclick() {
            $('#purchaseOrderItemDetailModal').modal({ show: true, backdrop: 'static' });

            document.getElementById('btnPurchaseOrderItemSave').innerHTML = "<i class='fa fa-save'></i> Save";
            $("#btnPurchaseOrderItemSave").prop("disabled", true);
            $("#btnPurchaseOrderItemCloseModal").prop("disabled", false);

            $("#purchaseOrderItemLoading").show();
            document.getElementById("purchaseOrderItemLoading").innerHTML = 'Loading...';
            $("#POItemContent").hide();

            document.getElementById('purchaseOrderItemModalTitle').innerHTML = "Add Purchase Order Item";

            purchaseOrderItemId = 0;
            createCboPurchaseOrderItem(0, 0);
            document.getElementById('inpPurchaseOrderItemParticulars').value = "NA";
            document.getElementById('inpPurchaseOrderItemQuantity').value = formatDecimalValues(1);
            document.getElementById('inpPurchaseOrderItemCost').value = formatDecimalValues(0);
            document.getElementById('inpPurchaseOrderItemAmount').value = formatDecimalValues(0);
        }

        // ========================
        // Edit Purchase Order Item
        // ========================
        function btnPurchaseOrderItemEditOnclick() {
            $('#purchaseOrderItemDetailModal').modal({ show: true, backdrop: 'static' });

            document.getElementById('btnPurchaseOrderItemSave').innerHTML = "<i class='fa fa-save'></i> Save";
            $("#btnPurchaseOrderItemSave").prop("disabled", true);
            $("#btnPurchaseOrderItemCloseModal").prop("disabled", false);

            $("#purchaseOrderItemLoading").show();
            document.getElementById("purchaseOrderItemLoading").innerHTML = 'Loading...';
            $("#POItemContent").hide();

            document.getElementById('purchaseOrderItemModalTitle').innerHTML = "Edit Purchase Order Item";

            purchaseOrderItemCollectionView.editItem(purchaseOrderItemCollectionView.currentItem);
            var purchaseOrderItem = purchaseOrderItemCollectionView.currentEditItem;
            purchaseOrderItemId = purchaseOrderItem.Id;
            createCboPurchaseOrderItem(purchaseOrderItem.ItemId, purchaseOrderItem.UnitId);
            document.getElementById('inpPurchaseOrderItemParticulars').value = purchaseOrderItem.Particulars;
            document.getElementById('inpPurchaseOrderItemQuantity').value = formatDecimalValues(purchaseOrderItem.Quantity);
            document.getElementById('inpPurchaseOrderItemCost').value = formatDecimalValues(purchaseOrderItem.Cost);
            document.getElementById('inpPurchaseOrderItemAmount').value = formatDecimalValues(purchaseOrderItem.Amount);
        }

        // ==========================
        // Delete Purchase Order Item
        // ==========================
        function btnPurchaseOrderItemDeleteOnclick() {
            $('#purchaseOrderItemDeleteModal').modal({ show: true, backdrop: 'static' });

            document.getElementById('btnPurchaseOrderItemConfirmDelete').innerHTML = "<i class='fa fa-trash'></i> Delete";
            $("#btnPurchaseOrderItemConfirmDelete").prop("disabled", false);
            $("#btnPurchaseOrderItemConfirmDeleteCloseModal").prop("disabled", false);
        }

        // ==================================
        // Confirm Delete Purchase Order Item
        // ==================================
        function btnPurchaseOrderItemConfirmDeleteOnclick() {
            document.getElementById('btnPurchaseOrderItemConfirmDelete').innerHTML = "<i class='fa fa-trash'></i> Deleting...";
            $("#btnPurchaseOrderItemConfirmDelete").prop("disabled", true);
            $("#btnPurchaseOrderItemConfirmDeleteCloseModal").prop("disabled", true);

            purchaseOrderItemCollectionView.editItem(purchaseOrderItemCollectionView.currentItem);

            var id = purchaseOrderItemCollectionView.currentEditItem.Id;
            var POId = getURLParameterValue('id');

            $.ajax({
                url: '/api/purchaseOrderItem/delete/' + id + '/' + POId,
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Delete Successful");

                        $("#btnPurchaseOrderItemConfirmDelete").prop("disabled", true);
                        $("#btnPurchaseOrderItemConfirmDeleteCloseModal").prop("disabled", true);

                        $('#purchaseOrderItemDeleteModal').modal('hide');
                        refreshPurchaseOrderItemFlexGrid();
                    },
                    404: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                        $('#purchaseOrderItemDeleteModal').modal('hide');
                        document.getElementById('btnPurchaseOrderItemConfirmDelete').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $("#btnPurchaseOrderItemConfirmDelete").prop("disabled", false);
                        $("#btnPurchaseOrderItemConfirmDeleteCloseModal").prop("disabled", false);
                    },
                    400: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                        $('#purchaseOrderItemDeleteModal').modal('hide');
                        document.getElementById('btnPurchaseOrderItemConfirmDelete').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $("#btnPurchaseOrderItemConfirmDelete").prop("disabled", false);
                        $("#btnPurchaseOrderItemConfirmDeleteCloseModal").prop("disabled", false);
                    },
                    500: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                        $('#purchaseOrderItemDeleteModal').modal('hide');
                        document.getElementById('btnPurchaseOrderItemConfirmDelete').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $("#btnPurchaseOrderItemConfirmDelete").prop("disabled", false);
                        $("#btnPurchaseOrderItemConfirmDeleteCloseModal").prop("disabled", false);
                    }
                }
            });
        }

        // ========================
        // Save Purchase Order Item
        // ========================
        function btnPurchaseOrderItemSaveOnclick() {
            var POId = getURLParameterValue('id');

            var purchaserOrderItemObject = new Object();
            purchaserOrderItemObject.POId = POId;
            purchaserOrderItemObject.ItemId = cboPurchaseOrderItemDescription.selectedValue;
            purchaserOrderItemObject.Particulars = document.getElementById('inpPurchaseOrderItemParticulars').value;
            purchaserOrderItemObject.UnitId = cboPurchaseOrderItemUnit.selectedValue;
            purchaserOrderItemObject.Quantity = document.getElementById('inpPurchaseOrderItemQuantity').value;
            purchaserOrderItemObject.Cost = document.getElementById('inpPurchaseOrderItemCost').value;
            purchaserOrderItemObject.Amount = document.getElementById('inpPurchaseOrderItemAmount').value;
            var purchaserOrderItemData = JSON.stringify(purchaserOrderItemObject);

            var isValid = true;
            $('.requiredPurchaseOrderItem').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                } else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            if (isValid) {
                document.getElementById('btnPurchaseOrderItemSave').innerHTML = "<i class='fa fa-save'></i> Saving...";
                $("#btnPurchaseOrderItemSave").prop("disabled", true);
                $("#btnPurchaseOrderItemCloseModal").prop("disabled", true);

                if (purchaseOrderItemId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/purchaseOrderItem/add/' + POId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: purchaserOrderItemData,
                        statusCode: {
                            200: function () {
                                toastr.success("Save Successful");

                                $('#purchaseOrderItemDetailModal').modal('hide');

                                $("#btnPurchaseOrderItemSave").prop("disabled", true);
                                $("#btnPurchaseOrderItemCloseModal").prop("disabled", true);

                                refreshPurchaseOrderItemFlexGrid();
                            },
                            404: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                                document.getElementById('btnPurchaseOrderItemSave').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#btnPurchaseOrderItemSave").prop("disabled", false);
                                $("#btnPurchaseOrderItemCloseModal").prop("disabled", false);
                            },
                            400: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                                document.getElementById('btnPurchaseOrderItemSave').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#btnPurchaseOrderItemSave").prop("disabled", false);
                                $("#btnPurchaseOrderItemCloseModal").prop("disabled", false);
                            },
                            500: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                                document.getElementById('btnPurchaseOrderItemSave').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#btnPurchaseOrderItemSave").prop("disabled", false);
                                $("#btnPurchaseOrderItemCloseModal").prop("disabled", false);
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/purchaseOrderItem/update/' + purchaseOrderItemId + '/' + POId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: purchaserOrderItemData,
                        statusCode: {
                            200: function () {
                                toastr.success("Update Successful");

                                $('#purchaseOrderItemDetailModal').modal('hide');

                                $("#btnPurchaseOrderItemSave").prop("disabled", true);
                                $("#btnPurchaseOrderItemCloseModal").prop("disabled", true);

                                refreshPurchaseOrderItemFlexGrid();
                            },
                            404: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                                document.getElementById('btnPurchaseOrderItemSave').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#btnPurchaseOrderItemSave").prop("disabled", false);
                                $("#btnPurchaseOrderItemCloseModal").prop("disabled", false);
                            },
                            400: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                                document.getElementById('btnPurchaseOrderItemSave').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#btnPurchaseOrderItemSave").prop("disabled", false);
                                $("#btnPurchaseOrderItemCloseModal").prop("disabled", false);
                            },
                            500: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                                document.getElementById('btnPurchaseOrderItemSave').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#btnPurchaseOrderItemSave").prop("disabled", false);
                                $("#btnPurchaseOrderItemCloseModal").prop("disabled", false);
                            }
                        }
                    });
                }
            } else {
                toastr.error("Invalid Entry");
            }
        }

        // ==============
        // Compute Amount
        // ==============
        $('#inpPurchaseOrderItemQuantity').keyup(function () { computeAmount(); });
        $('#inpPurchaseOrderItemCost').keyup(function () { computeAmount(); });
        function computeAmount() {
            var quantity = parseFloat(document.getElementById('inpPurchaseOrderItemQuantity').value.replace(/\,/g, ''));
            var cost = parseFloat(document.getElementById('inpPurchaseOrderItemCost').value.replace(/\,/g, ''));

            var amount = quantity * cost;
            document.getElementById('inpPurchaseOrderItemAmount').value = formatDecimalValues(amount);
        }

        // ===================
        // Get Item Query Data
        // ===================
        function getItemQueryData() {
            var itemsObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/purchaseOrderItem/popUp/list/itemQuery',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    for (i = 0; i < results.length; i++) {
                        itemsObservableArray.push({
                            Id: results[i]["Id"],
                            ManualArticleCode: results[i]["ManualArticleCode"],
                            ManualArticleOldCode: results[i]["ManualArticleOldCode"],
                            Article: results[i]["Article"],
                            Particulars: results[i]["Particulars"],
                            Cost: results[i]["Cost"],
                            CostDisplay: parseFloat(results[i]["Cost"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                            Pick: "<button class='btn btn-primary btn-xs btn-block' onclick='btnItemQueryPickOnclick()'><i class='fa fa-hand-o-right'></i> Pick</button>",
                        });
                    }

                    $("#itemQueryContent").show();
                    $("#itemQueryLoading").hide();
                }
            });

            return itemsObservableArray;
        }

        // ===========================
        // Create Item Query Flex Grid
        // ===========================
        function createItemQueryFlexGrid() {
            itemQueryItemsCollectionView = new wijmo.collections.CollectionView(getItemQueryData());
            itemQueryItemsCollectionView.canFilter = true;
            itemQueryItemsCollectionView.pageSize = 10;

            var filterText = '';
            $('#inpItemQuerySearchFilter').keyup(function () {
                filterText = this.value.toLowerCase();
                itemQueryItemsCollectionView.refresh();
            });

            itemQueryItemsCollectionView.filter = function (item) {
                return !filterText || (item.ManualArticleCode.toLowerCase().indexOf(filterText) > -1)
                    || (item.Article.toLowerCase().indexOf(filterText) > -1);
            }

            itemQueryItemsCollectionView.collectionChanged.addHandler(function (sender, args) {
                updateItemQueryNavigationButtons();
            });

            itemQueryFlexGrid.dispose();
            itemQueryFlexGrid = new wijmo.grid.FlexGrid('#itemQueryFlexGrid');
            itemQueryFlexGrid.initialize({
                columns: [
                    {
                        "header": "Barcode",
                        "binding": "ManualArticleCode",
                        "allowSorting": true,
                        "width": "2*"
                    },
                    {
                        "header": "SKU Code",
                        "binding": "ManualArticleOldCode",
                        "allowSorting": true,
                        "width": "2*"
                    },
                    {
                        "header": "Description",
                        "binding": "Article",
                        "allowSorting": true,
                        "width": "4*"
                    },
                    {
                        "header": "Last Purchase Price",
                        "binding": "CostDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": "2.5*"
                    },
                    {
                        "header": "Pick",
                        "binding": "Pick",
                        "width": "1*",
                        "align": "center",
                        "allowResizing": false,
                        "allowSorting": false,
                        "isContentHtml": true
                    },
                ],
                autoGenerateColumns: false,
                itemsSource: itemQueryItemsCollectionView,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            itemQueryFlexGrid.trackChanges = true;

            if (!isBtnItemQueryClicked) {
                updateItemQueryNavigationButtons();

                btnItemQueryMoveToFirstPageGrid.addEventListener('click', function () {
                    itemQueryItemsCollectionView.moveToFirstPage();
                    updateItemQueryNavigationButtons();
                });

                btnItemQueryMoveToPreviousPageGrid.addEventListener('click', function () {
                    itemQueryItemsCollectionView.moveToPreviousPage();
                    updateItemQueryNavigationButtons();
                });

                btnItemQueryMoveToNextPageGrid.addEventListener('click', function () {
                    itemQueryItemsCollectionView.moveToNextPage();
                    updateItemQueryNavigationButtons();
                });

                btnItemQueryMoveToLastPageGrid.addEventListener('click', function () {
                    itemQueryItemsCollectionView.moveToLastPage();
                    updateItemQueryNavigationButtons();
                });

                isBtnItemQueryClicked = true;
            }
        }

        // ====================================
        // Update Item Query Navigation Buttons
        // ====================================
        function updateItemQueryNavigationButtons() {
            if (itemQueryItemsCollectionView.pageSize <= 0) {
                document.getElementById('purchaseOrderItemQueryNavigationPageGrid').style.display = 'none';
                return;
            }
            document.getElementById('purchaseOrderItemQueryNavigationPageGrid').style.display = 'block';
            if (itemQueryItemsCollectionView.pageIndex === 0) {
                btnItemQueryMoveToFirstPageGrid.setAttribute('disabled', 'disabled');
                btnItemQueryMoveToPreviousPageGrid.setAttribute('disabled', 'disabled');
                btnItemQueryMoveToNextPageGrid.removeAttribute('disabled');
                btnItemQueryMoveToLastPageGrid.removeAttribute('disabled');
            } else if (itemQueryItemsCollectionView.pageIndex === (itemQueryItemsCollectionView.pageCount - 1)) {
                btnItemQueryMoveToFirstPageGrid.removeAttribute('disabled');
                btnItemQueryMoveToPreviousPageGrid.removeAttribute('disabled');
                btnItemQueryMoveToNextPageGrid.setAttribute('disabled', 'disabled');
                btnItemQueryMoveToLastPageGrid.setAttribute('disabled', 'disabled');
            } else {
                btnItemQueryMoveToFirstPageGrid.removeAttribute('disabled');
                btnItemQueryMoveToPreviousPageGrid.removeAttribute('disabled');
                btnItemQueryMoveToNextPageGrid.removeAttribute('disabled');
                btnItemQueryMoveToLastPageGrid.removeAttribute('disabled');
            }
            btnItemQueryCurrentPageGrid.innerHTML = (itemQueryItemsCollectionView.pageIndex + 1) + ' / ' + itemQueryItemsCollectionView.pageCount;
        }

        // =======================
        // Launch Item Query Modal
        // =======================
        function btnItemQueryOnclick() {
            $('#purchaseOrderItemQueryModal').modal({
                show: true,
                backdrop: 'static'
            });

            $("#itemQueryContent").hide();
            $("#itemQueryLoading").show();
            document.getElementById("itemQueryLoading").innerHTML = "Loading...";

            setTimeout(function () {
                createItemQueryFlexGrid();
            }, 500);
        }

        // ===============
        // Pick Item Query
        // ===============
        function btnItemQueryPickOnclick() {
            $('#purchaseOrderItemDetailModal').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById('btnPurchaseOrderItemSave').innerHTML = "<i class='fa fa-save'></i> Save";
            $("#btnPurchaseOrderItemSave").prop("disabled", true);
            $("#btnPurchaseOrderItemCloseModal").prop("disabled", false);

            $("#purchaseOrderItemLoading").show();
            document.getElementById("purchaseOrderItemLoading").innerHTML = 'Loading...';
            $("#POItemContent").hide();

            document.getElementById('purchaseOrderItemModalTitle').innerHTML = "Add Purchase Order Item";

            itemQueryItemsCollectionView.editItem(itemQueryItemsCollectionView.currentItem);
            var item = itemQueryItemsCollectionView.currentEditItem;
            purchaseOrderItemId = 0;
            createCboPurchaseOrderItem(item.Id, 0);
            document.getElementById('inpPurchaseOrderItemParticulars').value = item.Particulars;
            document.getElementById('inpPurchaseOrderItemQuantity').value = formatDecimalValues(1);
            document.getElementById('inpPurchaseOrderItemCost').value = formatDecimalValues(item.Cost);
            document.getElementById('inpPurchaseOrderItemAmount').value = formatDecimalValues(item.Cost * 1);
        }

        // =========================
        // Get Purchase Request Data
        // =========================
        function getPurchaseRequestData() {
            NProgress.start();
            var startDate = cboPurchaseRequestStartDateFilter.value.toLocaleDateString().replace(/\//g, '-');
            var endDate = cboPurchaseRequestEndDateFilter.value.toLocaleDateString().replace(/\//g, '-');

            var purchaseRequestObservableArray = new wijmo.collections.ObservableArray;
            if (cboPurchaseRequestBranchFilter.selectedValue != null) {
                var branchId = cboPurchaseRequestBranchFilter.selectedValue;
                $.ajax({
                    url: '/api/purchaseOrder/purchaseRequest/list/' + startDate + '/' + endDate + '/' + branchId,
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    success: function (results) {
                        if (results.length > 0) {
                            for (i = 0; i < results.length; i++) {
                                var PRDateResult = new Date(results[i]["PRDate"])
                                var PRDate = ('0' + (PRDateResult.getMonth() + 1)).slice(-2) + '-' + ('0' + PRDateResult.getDate()).slice(-2) + '-' + PRDateResult.getFullYear();

                                purchaseRequestObservableArray.push({
                                    Apply: "<button class='btn btn-primary btn-xs btn-block' onclick='pickToApplyPROnClick()'><i class='fa fa-hand-o-right'></i> Apply</button>",
                                    Id: results[i]["Id"],
                                    PRNumber: results[i]["PRNumber"],
                                    PRDate: PRDate,
                                    ManualPRNumber: results[i]["ManualPRNumber"],
                                    Supplier: results[i]["Supplier"],
                                    Remarks: results[i]["Remarks"],
                                    Amount: results[i]["Amount"],
                                    AmountDisplay: parseFloat(results[i]["Amount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                });
                            }
                        }

                        $("#purchaseRequestLoading").hide();
                        $("#purchaseRequestContent").show();
                        NProgress.done();
                    }
                });
            }

            return purchaseRequestObservableArray;
        }

        // ================================
        // Create Purchase Request FlexGrid
        // ================================
        function createPurchaseRequestFlexGrid() {
            purchaseRequestCollectionView = new wijmo.collections.CollectionView(getPurchaseRequestData());
            purchaseRequestCollectionView.canFilter = true;
            purchaseRequestCollectionView.pageSize = 7;

            var filterText = '';
            $('#inpPurchaseRequestSearchFilter').keyup(function () {
                filterText = this.value.toLowerCase();
                purchaseRequestCollectionView.refresh();
            });

            purchaseRequestCollectionView.filter = function (item) {
                return !filterText || (item.PRNumber.toLowerCase().indexOf(filterText) > -1)
                    || (item.ManualPRNumber.toLowerCase().indexOf(filterText) > -1)
                    || (item.Remarks.toLowerCase().indexOf(filterText) > -1)
                    || (item.Supplier.toLowerCase().indexOf(filterText) > -1);
            }

            purchaseRequestCollectionView.collectionChanged.addHandler(function (sender, args) {
                updatePurchaseRequestNavigationButtons();
            });

            purchaseRequestFlexGrid.dispose();
            purchaseRequestFlexGrid = new wijmo.grid.FlexGrid('#purchaseRequestFlexGrid');
            purchaseRequestFlexGrid.initialize({
                columns: [
                    {
                        "header": "PR Number",
                        "binding": "PRNumber",
                        "allowSorting": true,
                        "width": 100
                    },
                    {
                        "header": "PR Date",
                        "binding": "PRDate",
                        "allowSorting": true,
                        "width": 90
                    },
                    {
                        "header": "Manual PR No.",
                        "binding": "ManualPRNumber",
                        "allowSorting": true,
                        "width": 120
                    },
                    {
                        "header": "Supplier",
                        "binding": "Supplier",
                        "allowSorting": true,
                        "width": "3*"
                    },
                    {
                        "header": "Remarks",
                        "binding": "Remarks",
                        "allowSorting": true,
                        "width": "2.5*"
                    },
                    {
                        "header": "Amount",
                        "binding": "AmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": "2*"
                    },
                    {
                        "header": "Apply",
                        "binding": "Apply",
                        "width": "0.8*",
                        "align": "center",
                        "allowResizing": false,
                        "allowSorting": false,
                        "isContentHtml": true
                    }
                ],
                autoGenerateColumns: false,
                itemsSource: purchaseRequestCollectionView,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            purchaseRequestFlexGrid.trackChanges = true;

            btnPurchaseRequestMoveToFirstPageGrid = document.getElementById('btnPurchaseRequestMoveToFirstPageGrid');
            btnPurchaseRequestMoveToPreviousPageGrid = document.getElementById('btnPurchaseRequestMoveToPreviousPageGrid');
            btnPurchaseRequestMoveToNextPageGrid = document.getElementById('btnPurchaseRequestMoveToNextPageGrid');
            btnPurchaseRequestMoveToLastPageGrid = document.getElementById('btnPurchaseRequestMoveToLastPageGrid');
            btnPurchaseRequestCurrentPageGrid = document.getElementById('btnPurchaseRequestCurrentPageGrid');

            if (!isPurchaseRequestClicked) {
                updatePurchaseRequestNavigationButtons();

                btnPurchaseRequestMoveToFirstPageGrid.addEventListener('click', function () {
                    purchaseRequestCollectionView.moveToFirstPage();
                    updatePurchaseRequestNavigationButtons();
                });

                btnPurchaseRequestMoveToPreviousPageGrid.addEventListener('click', function () {
                    purchaseRequestCollectionView.moveToPreviousPage();
                    updatePurchaseRequestNavigationButtons();
                });

                btnPurchaseRequestMoveToNextPageGrid.addEventListener('click', function () {
                    purchaseRequestCollectionView.moveToNextPage();
                    updatePurchaseRequestNavigationButtons();
                });

                btnPurchaseRequestMoveToLastPageGrid.addEventListener('click', function () {
                    purchaseRequestCollectionView.moveToLastPage();
                    updatePurchaseRequestNavigationButtons();
                });

                isPurchaseRequestClicked = true;
            }
        }

        // ==========================================
        // Update Purchase Request Navigation Buttons
        // ==========================================
        function updatePurchaseRequestNavigationButtons() {
            if (purchaseRequestCollectionView.pageSize <= 0) {
                document.getElementById('purchaseRequestNavigationPageGrid').style.display = 'none';
                return;
            }
            document.getElementById('purchaseRequestNavigationPageGrid').style.display = 'block';
            if (purchaseRequestCollectionView.pageIndex === 0) {
                btnPurchaseRequestMoveToFirstPageGrid.setAttribute('disabled', 'disabled');
                btnPurchaseRequestMoveToPreviousPageGrid.setAttribute('disabled', 'disabled');
                btnPurchaseRequestMoveToNextPageGrid.removeAttribute('disabled');
                btnPurchaseRequestMoveToLastPageGrid.removeAttribute('disabled');
            } else if (purchaseRequestCollectionView.pageIndex === (purchaseRequestCollectionView.pageCount - 1)) {
                btnPurchaseRequestMoveToFirstPageGrid.removeAttribute('disabled');
                btnPurchaseRequestMoveToPreviousPageGrid.removeAttribute('disabled');
                btnPurchaseRequestMoveToLastPageGrid.setAttribute('disabled', 'disabled');
                btnPurchaseRequestMoveToNextPageGrid.setAttribute('disabled', 'disabled');
            } else {
                btnPurchaseRequestMoveToFirstPageGrid.removeAttribute('disabled');
                btnPurchaseRequestMoveToPreviousPageGrid.removeAttribute('disabled');
                btnPurchaseRequestMoveToNextPageGrid.removeAttribute('disabled');
                btnPurchaseRequestMoveToLastPageGrid.removeAttribute('disabled');
            }
            btnPurchaseRequestCurrentPageGrid.innerHTML = (purchaseRequestCollectionView.pageIndex + 1) + ' / ' + purchaseRequestCollectionView.pageCount;
        }

        // =======================
        // Launch Purchase Request
        // =======================
        function btnPurchaseRequestNumberOnclick() {
            $('#purchaseRequestModal').modal({
                show: true,
                backdrop: 'static'
            });

            $("#purchaseRequestContent").hide();
            document.getElementById("purchaseRequestLoading").innerHTML = "Loading...";
            $("#purchaseRequestLoading").show();

            setTimeout(function () {
                createCboPurchaseRequestDateFilters();
            }, 500);
        }

        // ==========================================
        // Create Purchase Request Date Range Filters
        // ==========================================
        function createCboPurchaseRequestDateFilters() {
            cboPurchaseRequestStartDateFilter.dispose();
            cboPurchaseRequestStartDateFilter = new wijmo.input.InputDate('#cboPurchaseRequestStartDateFilter', {
                format: 'MM-dd-yyyy',
                value: new Date(),
                onValueChanged: function () {
                    if (!isCboStartDateFilterSelected) {
                        createPurchaseRequestFlexGrid();
                    } else {
                        isCboStartDateFilterSelected = false;
                    }
                }
            });

            cboPurchaseRequestEndDateFilter.dispose();
            cboPurchaseRequestEndDateFilter = new wijmo.input.InputDate('#cboPurchaseRequestEndDateFilter', {
                format: 'MM-dd-yyyy',
                value: new Date(),
                onValueChanged: function () {
                    if (!isCboStartDateFilterSelected) {
                        createPurchaseRequestFlexGrid();
                    } else {
                        isCboEndDateFilterSelected = false;
                    }
                }
            });

            createCboPurchaseRequestBranchFilter();
        }

        // =====================================
        // Create Purchase Request Branch Filter
        // =====================================
        function createCboPurchaseRequestBranchFilter() {
            var branchesObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/purchaseOrder/purchaseRequest/dropdown/list/branch',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            branchesObservableArray.push({
                                Id: results[i]["Id"],
                                Branch: results[i]["Branch"]
                            });
                        }
                    }

                    cboPurchaseRequestBranchFilter.dispose();
                    cboPurchaseRequestBranchFilter = new wijmo.input.ComboBox('#cboPurchaseRequestBranchFilter', {
                        isEditable: false,
                        placeholder: "Select Branch",
                        itemsSource: branchesObservableArray,
                        displayMemberPath: "Branch",
                        selectedValuePath: "Id",
                        selectedValue: cboPurchaseOrderBranch.selectedValue,
                        onSelectedIndexChanged: function () {
                            createPurchaseRequestFlexGrid();
                        }
                    });

                    createPurchaseRequestFlexGrid();
                }
            });
        }

        // ============================
        // Purchase Request - Pick Item
        // ============================
        function pickToApplyPROnClick() {
            $('#purchaseRequestApplyModal').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById('btnPurchaseRequestApply').innerHTML = "<i class='fa fa-check'></i> Apply";
            $("#btnPurchaseRequestApply").prop("disabled", false);
            $("#btnPurchaseRequestApplyCloseModal").prop("disabled", false);
        }

        // ====================================
        // Purchase Request - Apply Picked Item
        // ====================================
        function btnPurchaseRequestApplyOnclick() {
            document.getElementById('btnPurchaseRequestApply').innerHTML = "<i class='fa fa-check'></i> Applying...";
            $("#btnPurchaseRequestApply").prop("disabled", true);
            $("#btnPurchaseRequestApplyCloseModal").prop("disabled", true);

            purchaseRequestCollectionView.editItem(purchaseRequestCollectionView.currentItem);
            var PRId = purchaseRequestCollectionView.currentEditItem.Id;
            var POId = getURLParameterValue('id');

            $.ajax({
                type: "POST",
                url: '/api/purchaseOrder/load/purchaseRequest/' + POId + '/' + PRId,
                contentType: "application/json; charset=utf-8",
                statusCode: {
                    200: function (id) {
                        toastr.success("Apply Successful");
                        window.setTimeout(function () {
                            location.reload()
                        }, 1000);
                    },
                    404: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                        document.getElementById('btnPurchaseRequestApply').innerHTML = "<i class='fa fa-check'></i> Apply";
                        $("#btnPurchaseRequestApply").prop("disabled", false);
                        $("#btnPurchaseRequestApplyCloseModal").prop("disabled", false);
                    },
                    400: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                        document.getElementById('btnPurchaseRequestApply').innerHTML = "<i class='fa fa-check'></i> Apply";
                        $("#btnPurchaseRequestApply").prop("disabled", false);
                        $("#btnPurchaseRequestApplyCloseModal").prop("disabled", false);
                    },
                    500: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                        document.getElementById('btnPurchaseRequestApply').innerHTML = "<i class='fa fa-check'></i> Apply";
                        $("#btnPurchaseRequestApply").prop("disabled", false);
                        $("#btnPurchaseRequestApplyCloseModal").prop("disabled", false);
                    }
                }
            });
        }

        // ========================
        // Launch Consignment Modal
        // ========================
        function btnPurchaseOrderConsignmentOnclick() {
            $('#purchaseOrderConsignmentModal').modal({
                show: true,
                backdrop: 'static'
            });

            $("#purchaseOrderConsignmentContent").hide();
            document.getElementById("purchaseOrderConsignmentLoading").innerHTML = "Loading...";
            $("#purchaseOrderConsignmentLoading").show();

            setTimeout(function () {
                createCboPurchaseOrderConsignmentDateFilters();
            }, 500);
        }

        // ====================================================
        // Create Purchase Order Consignment Date Range Filters
        // ====================================================
        function createCboPurchaseOrderConsignmentDateFilters() {
            cboPurchaseOrderConsignmentStartDateFilter.dispose();
            cboPurchaseOrderConsignmentStartDateFilter = new wijmo.input.InputDate('#cboPurchaseOrderConsignmentStartDateFilter', {
                format: 'MM-dd-yyyy',
                value: new Date(),
                onValueChanged: function () {
                    if (!isConsignmentCboStartDateFilterSelected) {
                        createPurchaseOrderConsignmentFlexGrid();
                    } else {
                        isConsignmentCboStartDateFilterSelected = false;
                    }
                }
            });

            cboPurchaseOrderConsignmentEndDateFilter.dispose();
            cboPurchaseOrderConsignmentEndDateFilter = new wijmo.input.InputDate('#cboPurchaseOrderConsignmentEndDateFilter', {
                format: 'MM-dd-yyyy',
                value: new Date(),
                onValueChanged: function () {
                    if (!isConsignmentCboEndDateFilterSelected) {
                        createPurchaseOrderConsignmentFlexGrid();
                    } else {
                        isConsignmentCboEndDateFilterSelected = false;
                    }
                }
            });

            createPurchaseOrderConsignmentFlexGrid();
        }

        // ==============================
        // Get Purchase Order Consignment
        // ==============================
        function getPurchaseOrderConsignmentData() {
            NProgress.start();
            var startDate = cboPurchaseOrderConsignmentStartDateFilter.value.toLocaleDateString().replace(/\//g, '-');
            var endDate = cboPurchaseOrderConsignmentEndDateFilter.value.toLocaleDateString().replace(/\//g, '-');

            var purchaseOrderConsignmentObservableArray = new wijmo.collections.ObservableArray;
            if (cboPurchaseOrderConsignmentSupplierFilter.selectedValue != null) {
                var supplierId = cboPurchaseOrderConsignmentSupplierFilter.selectedValue;
                $.ajax({
                    url: '/api/purchaseOrder/consignment/salesInvoiceItem/list/' + startDate + '/' + endDate + '/' + supplierId,
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    success: function (results) {
                        if (results.length > 0) {
                            for (i = 0; i < results.length; i++) {
                                purchaseOrderConsignmentObservableArray.push({
                                    ItemId: results[i]["ItemId"],
                                    ItemManualArticleOldCode: results[i]["ItemManualArticleOldCode"],
                                    ItemCode: results[i]["ItemCode"],
                                    ItemDescription: results[i]["ItemDescription"],
                                    UnitId: results[i]["UnitId"],
                                    Unit: results[i]["Unit"],
                                    Quantity: results[i]["Quantity"],
                                    QuantityDisplay: parseFloat(results[i]["Quantity"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                    Cost: results[i]["Cost"],
                                    CostDisplay: parseFloat(results[i]["Cost"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                    Amount: results[i]["Amount"],
                                    AmountDisplay: parseFloat(results[i]["Amount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                });
                            }
                        }

                        $("#purchaseOrderConsignmentLoading").hide();
                        $("#purchaseOrderConsignmentContent").show();
                        NProgress.done();
                    }
                });
            }

            return purchaseOrderConsignmentObservableArray;
        }

        // ==========================================
        // Create Purchase Order Consignment FlexGrid
        // ==========================================
        function createPurchaseOrderConsignmentFlexGrid() {
            purchaseOrderConsignmentCollectionView = new wijmo.collections.CollectionView(getPurchaseOrderConsignmentData());
            purchaseOrderConsignmentCollectionView.canFilter = true;
            purchaseOrderConsignmentCollectionView.pageSize = 7;

            var filterText = '';
            $('#inpPurchaseOrderConsignmentSearchFilter').keyup(function () {
                filterText = this.value.toLowerCase();
                purchaseOrderConsignmentCollectionView.refresh();
            });

            purchaseOrderConsignmentCollectionView.filter = function (item) {
                return !filterText || (item.ItemManualArticleOldCode.toLowerCase().indexOf(filterText) > -1)
                    || (item.ItemCode.toLowerCase().indexOf(filterText) > -1)
                    || (item.ItemDescription.toLowerCase().indexOf(filterText) > -1);
            }

            purchaseOrderConsignmentCollectionView.collectionChanged.addHandler(function (sender, args) {
                updatePurchaseOrderConsignmentNavigationButtons();
            });

            purchaseOrderConsignmentFlexGrid.dispose();
            purchaseOrderConsignmentFlexGrid = new wijmo.grid.FlexGrid('#purchaseOrderConsignmentFlexGrid');
            purchaseOrderConsignmentFlexGrid.initialize({
                columns: [
                    {
                        "header": "Barcode",
                        "binding": "ItemCode",
                        "allowSorting": true,
                        "width": "2.5*"
                    },
                    {
                        "header": "SKU",
                        "binding": "ItemManualArticleOldCode",
                        "allowSorting": true,
                        "width": "2.5*"
                    },
                    {
                        "header": "Description",
                        "binding": "ItemDescription",
                        "allowSorting": true,
                        "width": "4*"
                    },
                    {
                        "header": "Unit",
                        "binding": "Unit",
                        "allowSorting": true,
                        "width": "1.5*"
                    },
                    {
                        "header": "Quantity",
                        "binding": "QuantityDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": "2*"
                    },
                    {
                        "header": "Cost",
                        "binding": "CostDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": "2*"
                    },
                    {
                        "header": "Amount",
                        "binding": "AmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": "2*"
                    },
                ],
                autoGenerateColumns: false,
                itemsSource: purchaseOrderConsignmentCollectionView,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            purchaseOrderConsignmentFlexGrid.trackChanges = true;

            btnPurchaseOrderConsignmentMoveToFirstPageGrid = document.getElementById('btnPurchaseOrderConsignmentMoveToFirstPageGrid');
            btnPurchaseOrderConsignmentMoveToPreviousPageGrid = document.getElementById('btnPurchaseOrderConsignmentMoveToPreviousPageGrid');
            btnPurchaseOrderConsignmentMoveToNextPageGrid = document.getElementById('btnPurchaseOrderConsignmentMoveToNextPageGrid');
            btnPurchaseOrderConsignmentMoveToLastPageGrid = document.getElementById('btnPurchaseOrderConsignmentMoveToLastPageGrid');
            btnPurchaseOrderConsignmentCurrentPageGrid = document.getElementById('btnPurchaseOrderConsignmentCurrentPageGrid');

            if (!isPurchaseOrderConsignmentClicked) {
                updatePurchaseOrderConsignmentNavigationButtons();

                btnPurchaseOrderConsignmentMoveToFirstPageGrid.addEventListener('click', function () {
                    purchaseOrderConsignmentCollectionView.moveToFirstPage();
                    purchaseOrderConsignmentCurrentPageIndex = purchaseOrderStatusCollectionView.pageIndex + 1;
                    updatePurchaseOrderConsignmentNavigationButtons();
                });

                btnPurchaseOrderConsignmentMoveToPreviousPageGrid.addEventListener('click', function () {
                    purchaseOrderConsignmentCollectionView.moveToPreviousPage();
                    purchaseOrderConsignmentCurrentPageIndex = purchaseOrderStatusCollectionView.pageIndex + 1;
                    updatePurchaseOrderConsignmentNavigationButtons();
                });

                btnPurchaseOrderConsignmentMoveToNextPageGrid.addEventListener('click', function () {
                    purchaseOrderConsignmentCollectionView.moveToNextPage();
                    purchaseOrderConsignmentCurrentPageIndex = purchaseOrderStatusCollectionView.pageIndex + 1;
                    updatePurchaseOrderConsignmentNavigationButtons();
                });

                btnPurchaseOrderConsignmentMoveToLastPageGrid.addEventListener('click', function () {
                    purchaseOrderConsignmentCollectionView.moveToLastPage();
                    purchaseOrderConsignmentCurrentPageIndex = purchaseOrderStatusCollectionView.pageIndex + 1;
                    updatePurchaseOrderConsignmentNavigationButtons();
                });

                isPurchaseOrderConsignmentClicked = true;
            }
        }

        // ====================================================
        // Update Purchase Order Consignment Navigation Buttons
        // ====================================================
        function updatePurchaseOrderConsignmentNavigationButtons() {
            if (purchaseOrderConsignmentCollectionView.pageSize <= 0) {
                document.getElementById('purchaseRequestNavigationPageGrid').style.display = 'none';
                return;
            }
            document.getElementById('purchaseRequestNavigationPageGrid').style.display = 'block';
            if (purchaseOrderConsignmentCollectionView.pageIndex === 0) {
                btnPurchaseOrderConsignmentMoveToFirstPageGrid.setAttribute('disabled', 'disabled');
                btnPurchaseOrderConsignmentMoveToPreviousPageGrid.setAttribute('disabled', 'disabled');
                btnPurchaseOrderConsignmentMoveToNextPageGrid.removeAttribute('disabled');
                btnPurchaseOrderConsignmentCurrentPageGrid.removeAttribute('disabled');
            } else if (purchaseOrderConsignmentCollectionView.pageIndex === (purchaseOrderConsignmentCollectionView.pageCount - 1)) {
                btnPurchaseOrderConsignmentMoveToFirstPageGrid.removeAttribute('disabled');
                btnPurchaseOrderConsignmentMoveToPreviousPageGrid.removeAttribute('disabled');
                btnPurchaseOrderConsignmentCurrentPageGrid.setAttribute('disabled', 'disabled');
                btnPurchaseOrderConsignmentMoveToNextPageGrid.setAttribute('disabled', 'disabled');
            } else {
                btnPurchaseOrderConsignmentMoveToFirstPageGrid.removeAttribute('disabled');
                btnPurchaseOrderConsignmentMoveToPreviousPageGrid.removeAttribute('disabled');
                btnPurchaseOrderConsignmentMoveToNextPageGrid.removeAttribute('disabled');
                btnPurchaseOrderConsignmentCurrentPageGrid.removeAttribute('disabled');
            }
            btnPurchaseOrderConsignmentCurrentPageGrid.innerHTML = (purchaseOrderConsignmentCollectionView.pageIndex + 1) + ' / ' + purchaseOrderConsignmentCollectionView.pageCount;
        }

        // =================
        // Apply Consignment
        // =================
        function btnPurchaseOrderConsignmentApplyOnclick() {
            $('#applyPurchaseOrderConsignmentModal').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById('btnPurchaseOrderConsignmentApplyConfirm').innerHTML = "<i class='fa fa-check'></i> Apply";
            $("#btnPurchaseOrderConsignmentApplyConfirm").prop("disabled", false);
            $("#btnPurchaseOrderConsignmentApplyConfirmCloseModal").prop("disabled", false);
        }

        // ==========================
        // Apply Conofirm Consignment
        // ==========================
        function btnPurchaseOrderConsignmentApplyConfirmOnclick() {
            document.getElementById('btnPurchaseOrderConsignmentApplyConfirm').innerHTML = "<i class='fa fa-check'></i> Applying...";
            $("#btnPurchaseOrderConsignmentApplyConfirm").prop("disabled", true);
            $("#btnPurchaseOrderConsignmentApplyConfirmCloseModal").prop("disabled", true);

            var consignmentDataArray = new Array();

            purchaseOrderConsignmentCollectionView.moveToFirstPage();
            for (var p = 1; p <= purchaseOrderConsignmentCollectionView.pageCount; p++) {
                for (var i = 0; i < purchaseOrderConsignmentCollectionView.items.length; i++) {
                    var item = purchaseOrderConsignmentCollectionView.items[i];
                    if (item.Amount > 0) {
                        consignmentDataArray.push({
                            ItemId: item.ItemId,
                            UnitId: item.UnitId,
                            Quantity: item.Quantity,
                            Cost: item.Cost,
                            Amount: item.Amount
                        });
                    }
                }

                purchaseOrderConsignmentCollectionView.moveToNextPage();
                if (p == purchaseOrderConsignmentCollectionView.pageCount) {
                    purchaseOrderConsignmentCollectionView.moveToPage(purchaseOrderConsignmentCurrentPageIndex - 1);
                }
            }

            var consignmentItemObjectData = JSON.stringify(consignmentDataArray);
            $.ajax({
                url: '/api/purchaseOrder/apply/consignment/' + getURLParameterValue('id'),
                type: "POST",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: consignmentItemObjectData,
                statusCode: {
                    200: function () {
                        toastr.success("Apply Successful");
                        $("#btnPurchaseOrderConsignmentApplyConfirm").prop("disabled", true);
                        $("#btnPurchaseOrderConsignmentApplyConfirmCloseModal").prop("disabled", true);

                        $('#applyPurchaseOrderConsignmentModal').modal('hide');
                        $('#purchaseOrderConsignmentModal').modal('hide');

                        refreshPurchaseOrderItemFlexGrid();
                    },
                    404: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                        $('#applyPurchaseOrderConsignmentModal').modal('hide');
                        $('#purchaseOrderConsignmentModal').modal('hide');
                        document.getElementById('btnPurchaseOrderConsignmentApplyConfirm').innerHTML = "<i class='fa fa-check'></i> Apply";
                        $("#btnPurchaseOrderConsignmentApplyConfirm").prop("disabled", false);
                        $("#btnPurchaseOrderConsignmentApplyConfirmCloseModal").prop("disabled", false);
                    },
                    400: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                        $('#applyPurchaseOrderConsignmentModal').modal('hide');
                        $('#purchaseOrderConsignmentModal').modal('hide');
                        document.getElementById('btnPurchaseOrderConsignmentApplyConfirm').innerHTML = "<i class='fa fa-check'></i> Apply";
                        $("#btnPurchaseOrderConsignmentApplyConfirm").prop("disabled", false);
                        $("#btnPurchaseOrderConsignmentApplyConfirmCloseModal").prop("disabled", false);
                    },
                    500: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                        $('#applyPurchaseOrderConsignmentModal').modal('hide');
                        $('#purchaseOrderConsignmentModal').modal('hide');
                        document.getElementById('btnPurchaseOrderConsignmentApplyConfirm').innerHTML = "<i class='fa fa-check'></i> Apply";
                        $("#btnPurchaseOrderConsignmentApplyConfirm").prop("disabled", false);
                        $("#btnPurchaseOrderConsignmentApplyConfirmCloseModal").prop("disabled", false);
                    }
                }
            });
        }

        // ======================
        // Launch Multiple Modals
        // ======================
        $(document).on('show.bs.modal', '.modal', function (event) {
            var zIndex = 1040 + (10 * $('.modal:visible').length);
            $(this).css('z-index', zIndex);
            setTimeout(function () {
                $('.modal-backdrop').not('.modal-stack').css('z-index', zIndex - 1).addClass('modal-stack');
            }, 0);
        });

        $(document).on('hidden.bs.modal', '.modal', function () {
            $('.modal:visible').length && $(document.body).addClass('modal-open');
        });

        // ============
        // On Load Page
        // ============
        $(document).ready(function () {
            createCboPurchaseOrderDetailBranch();
        });
    </script>
    <script type="text/javascript">
        // =================
        // User Branch Combo
        // =================
        var cboUserBranches = new wijmo.input.ComboBox('#cboUserBranches');

        // =========================
        // Get Current User Branches
        // =========================
        function getUserBranches() {
            $("#loadingUserBranches").show();
            document.getElementById("loadingUserBranches").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#userBranchContent").hide();

            $('#userBranchesModal').modal({ show: true, backdrop: 'static' });

            document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
            $("#updateUserBranch").prop("disabled", false);
            $("#closeUserBranch").prop("disabled", false);

            var userBranchesObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/userBranch/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (userBranchesResults) {
                    if (userBranchesResults.length > 0) {
                        for (i = 0; i < userBranchesResults.length; i++) {
                            userBranchesObservableArray.push({
                                BranchId: userBranchesResults[i]["BranchId"],
                                Branch: userBranchesResults[i]["Branch"]
                            });
                        }
                    }

                    var currentBranch = "@ViewData["BranchId"]";
                    cboUserBranches.dispose();
                    cboUserBranches = new wijmo.input.ComboBox('#cboUserBranches', {
                        isEditable: false,
                        placeholder: "Select Branches",
                        itemsSource: userBranchesObservableArray,
                        displayMemberPath: "Branch",
                        selectedValuePath: "BranchId",
                        selectedValue: currentBranch
                    });

                    setTimeout(function () {
                        $("#loadingUserBranches").hide();
                        $("#userBranchContent").show();
                    }, 500)
                }
            });
        }

        // ==========================
        // Update Current User Branch
        // ==========================
        function updateUserBranchOnclick() {
            document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Updating";
            $("#updateUserBranch").prop("disabled", true);
            $("#closeUserBranch").prop("disabled", true);

            var userBranchObject = new Object();
            userBranchObject.BranchId = cboUserBranches.selectedValue;
            var userBranchData = JSON.stringify(userBranchObject);

            $.ajax({
                type: "PUT",
                url: '/api/userBranch/update',
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: userBranchData,
                statusCode: {
                    200: function () {
                        toastr.success("Update Successful");
                        window.setTimeout(function () {
                            location.reload()
                        }, 1000);
                    },
                    404: function () {
                        toastr.error("Not Found");
                        document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
                        $("#updateUserBranch").prop("disabled", false);
                        $("#closeUserBranch").prop("disabled", false);
                    },
                    500: function () {
                        toastr.error("Bad Request");
                        document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
                        $("#updateUserBranch").prop("disabled", false);
                        $("#closeUserBranch").prop("disabled", false);
                    }
                }
            });
        }
    </script>
    <script type="text/javascript">
        // ======================
        // Side Bar Menu Settings
        // ======================
        var slideLeft = new Menu({
            wrapper: '#o-wrapper',
            type: 'slide-left',
            menuOpenerClass: '.c-button',
            maskId: '#c-mask'
        });

        var slideLeftBtn = document.querySelector('#c-button--slide-left');

        slideLeftBtn.addEventListener('click', function (e) {
            e.preventDefault;
            slideLeft.open();
        });
    </script>
</body>
</html>