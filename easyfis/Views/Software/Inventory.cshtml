<!DOCTYPE html>
<html>
<head>
    <!-- Meta -->
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">

    <!-- Title of the Page -->
    <link rel="shortcut icon" href="~/Images/icon/easyfislogomini.ico">
    <title>Inventory</title>

    <!-- CSS StyleSheets-->
    @Styles.Render("~/Content/Software-css")
</head>
<body class="hold-transition skin-blue fixed sidebar-mini">
    <div class="wrapper">
        @Html.Partial("_SoftwareHeader")
        @Html.Partial("_SoftwareSideBarMenu")

        <div class="content-wrapper">
            <section class="content-header">
                <h1>
                    Inventory
                    <small><i class="fa fa-building"></i> @ViewData["Company"] / @ViewData["Branch"]</small>
                </h1>
                <ol class="breadcrumb">
                    <li><a href="/Software"> Dashboard</a></li>
                    <li> <a href="/Software/InventoryReport"> Inventory Report </a></li>
                    <li> Inventory </li>
                </ol>
            </section>

            <section class="content">
                <div class="box box-default">
                    <div class="box-header">
                        <div class="row">
                            <div class="col-md-6">
                                <h4>
                                    <span id="companyname"></span>
                                    <small>
                                        <i class="fa fa-calendar fa-fw"></i> <span id="inventoryDate"></span>
                                    </small>
                                </h4>
                            </div>
                            <div class="col-md-6" align="right">
                                <button onclick="inventoryReportInventoryPDF_OnClick()" class="btn btn-primary btn-sm"><i class="fa fa-print"></i> Print</button>
                                <a href="/Software/InventoryReport" class="btn btn-danger btn-sm"><i class="fa fa-close"></i> Close</a>
                            </div>
                        </div>
                    </div>
                    <div class="box-body">
                        <div id="inventoryGrid" class="grid"></div>
                        <br /><br /><br />
                        <div align="right">
                            <div class="row">
                                <div class="col-md-8"></div>
                                <div class="col-md-4">
                                    <table class="table table-responsive table-bordered">
                                        <tr>
                                            <td align="right">
                                                <b>Total Amount: </b>
                                            </td>
                                            <td style="padding-left: 10px" align="right">
                                                <span id="totalAmount">NA</span>
                                            </td>
                                        </tr>
                                    </table>
                                    <hr />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </section>
        </div>

        @Html.Partial("_SoftwareFooter")
    </div>

    @Scripts.Render("~/Scripts/Software-js")
    <script type="text/javascript">
        var inventoryGrid;

        function getParam(name) {
            name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
            var regexS = "[\\?&]" + name + "=([^&#]*)";
            var regex = new RegExp(regexS);
            var results = regex.exec(window.location.href);
            if (results == null)
                return "";
            else
                return results[1];
        }

        function getInventory() {
            NProgress.start();
            var inventories = new wijmo.collections.ObservableArray;
            document.getElementById("inventoryDate").innerHTML = "Date from " + getParam("StartDate") + " to " + getParam("EndDate");
            $.ajax({
                url: '/api/inventoryReport/list/' + getParam("StartDate") + "/" + getParam("EndDate") + "/" + getParam("CompanyId"),
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (inventoryResults) {
                    if (inventoryResults.length > 0) {
                        var totalBeg = 0;
                        var totalIn = 0;
                        var totalOut = 0;
                        var totalEnd = 0;
                        var totalAllAmount = 0;
                        var totalVarianceAmount = 0;

                        for (i = 0; i < inventoryResults.length; i++) {
                            var totalAmount = inventoryResults[i]["Cost"] * inventoryResults[i]["EndQuantity"];
                            var quantityVariance = inventoryResults[i]["EndQuantity"] - 0;
                            var varianceAmount = inventoryResults[i]["Cost"] * quantityVariance;

                            var branchId = inventoryResults[i]["BranchId"],

                            articleLink = '/Software/StockCard?StartDate=' + getParam("StartDate") + '&EndDate=' + getParam("EndDate") + '&BranchId=' + branchId + '&ItemId=' + inventoryResults[i]["ArticleId"];

                            totalAllAmount = totalAllAmount + totalAmount;
                            totalVarianceAmount = totalVarianceAmount + varianceAmount;

                            document.getElementById("totalAmount").innerHTML = (Math.round(totalAllAmount * 100) / 100).toLocaleString();

                            inventories.push({
                                Branch: inventoryResults[i]["Branch"],
                                ArticleId: inventoryResults[i]["ArticleId"],
                                Article: "<a href='" + articleLink + "' class='btn btn-default btn-xs btn-block' style='text-align: left;'>" + inventoryResults[i]["Article"] + "</a>",
                                InventoryCode: inventoryResults[i]["InventoryCode"],
                                Cost: inventoryResults[i]["Cost"],
                                UnitId: inventoryResults[i]["UnitId"],
                                Unit: inventoryResults[i]["Unit"],
                                BegQuantity: inventoryResults[i]["BegQuantity"],
                                InQuantity: inventoryResults[i]["InQuantity"],
                                OutQuantity: inventoryResults[i]["OutQuantity"],
                                EndQuantity: inventoryResults[i]["EndQuantity"],
                                Amount: inventoryResults[i]["Amount"],
                                TotalAmount: totalAmount,
                                QuantityVariance: quantityVariance,
                                VarianceAmount: varianceAmount,
                                Count: "0.00"
                            });
                        }

                        NProgress.done();
                    }
                }
            });
            return inventories;
        }

        function inventoryReportInventoryPDF_OnClick() {
            window.location.href = '/RepInventoryReport/InventoryReport?StartDate=' + getParam("StartDate") + '&EndDate=' + getParam("EndDate") + '&CompanyId=' + getParam("CompanyId");
        }

        $(document).ready(function () {
            $.ajax({
                url: '/api/company/' + getParam("CompanyId"),
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (companyResults) {
                    document.getElementById("companyname").innerHTML = companyResults.Company;
                }
            });

            var inventoryCollections = new wijmo.collections.CollectionView(getInventory());

            // Flex Grid
            inventoryGrid = new wijmo.grid.FlexGrid('#inventoryGrid');
            inventoryGrid.initialize({
                columns: [
                            {
                                "header": "Branch",
                                "binding": "Branch",
                                "allowSorting": true,
                                "width": 150
                            },
                            {
                                "header": "Code",
                                "binding": "InventoryCode",
                                "allowSorting": true,
                                "width": 150,
                                "allowResizing": false,
                                "allowSorting": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Item",
                                "binding": "Article",
                                "allowSorting": true,
                                "width": 200,
                                "allowResizing": false,
                                "allowSorting": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Unit",
                                "binding": "Unit",
                                "allowSorting": true,
                                "width": 70
                            },
                            {
                                "header": "Cost",
                                "binding": "Cost",
                                "allowSorting": true,
                                "width": 110
                            },
                            {
                                "header": "Beg",
                                "binding": "BegQuantity",
                                "allowSorting": true,
                                "width": 110
                            },
                            {
                                "header": "In",
                                "binding": "InQuantity",
                                "allowSorting": true,
                                "width": 110
                            },
                            {
                                "header": "Out",
                                "binding": "OutQuantity",
                                "allowSorting": true,
                                "width": 110
                            },
                            {
                                "header": "End",
                                "binding": "EndQuantity",
                                "allowSorting": true,
                                "width": 110
                            },
                            {
                                "header": "Total Amount",
                                "binding": "TotalAmount",
                                "allowSorting": true,
                                "width": 110
                            },
                            {
                                "header": "Count",
                                "binding": "Count",
                                "allowSorting": true,
                                "width": 110
                            },
                            {
                                "header": "Variance",
                                "binding": "QuantityVariance",
                                "allowSorting": true,
                                "width": 110
                            },
                            {
                                "header": "Variance Amount",
                                "binding": "VarianceAmount",
                                "allowSorting": true,
                                "width": 130
                            }
                ],
                autoGenerateColumns: false,
                itemsSource: inventoryCollections,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            inventoryGrid.trackChanges = true;

            var hr = new wijmo.grid.Row();
            inventoryGrid.allowMerging = wijmo.grid.AllowMerging.AllHeaders;
            inventoryGrid.columnHeaders.rows.push(hr);
            inventoryGrid.columnHeaders.rows[0].allowMerging = true;

            inventoryGrid.columnHeaders.columns[0].allowMerging = true;
            inventoryGrid.columnHeaders.setCellData(0, 0, 'Branch');

            inventoryGrid.columnHeaders.columns[1].allowMerging = true;
            inventoryGrid.columnHeaders.setCellData(0, 1, 'Code');

            inventoryGrid.columnHeaders.columns[2].allowMerging = true;
            inventoryGrid.columnHeaders.setCellData(0, 2, 'Item');

            inventoryGrid.columnHeaders.columns[3].allowMerging = true;
            inventoryGrid.columnHeaders.setCellData(0, 3, 'Unit');

            inventoryGrid.columnHeaders.columns[4].allowMerging = true;
            inventoryGrid.columnHeaders.setCellData(0, 4, 'Cost');

            for (var columnBasicUnitConversion = 5; columnBasicUnitConversion <= 8; columnBasicUnitConversion++) {
                inventoryGrid.columnHeaders.setCellData(0, columnBasicUnitConversion, 'Quantity');
            }

            inventoryGrid.columnHeaders.columns[9].allowMerging = true;
            inventoryGrid.columnHeaders.setCellData(0, 9, 'Total Amount');

            for (var columnBasicUnitConversion = 10; columnBasicUnitConversion <= 11; columnBasicUnitConversion++) {
                inventoryGrid.columnHeaders.setCellData(0, columnBasicUnitConversion, 'Quantity');
            }

            inventoryGrid.columnHeaders.columns[12].allowMerging = true;
            inventoryGrid.columnHeaders.setCellData(0, 12, 'Variance Amount');
        });
    </script>
</body>
</html>