<!DOCTYPE html>
<html>
<head>
    <!-- Meta -->
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">

    <!-- Title of the Page -->
    <link rel="shortcut icon" href="~/Images/icon/easyfislogomini.ico">
    <title>Receiving Receipt Summary Report</title>

    <!-- CSS StyleSheets-->
    @Styles.Render("~/Content/Software-css")
</head>
<body>
    <div id="o-wrapper" class="o-wrapper">
        <main class="o-content">
            @Html.Partial("_SoftwareHeader")
            <section class="content-header">
                <div class="container">
                    <h3>
                        Receiving Receipt Summary Report 
                    </h3>
                    <p>
                        <i class="fa fa-building-o fa-fw"></i> &nbsp; @ViewData["Company"] <br />
                        <i class="fa fa-home fa-fw"></i> &nbsp; <a href="#" onclick="getUserBranches()" style="color: white;">@ViewData["Branch"]</a>
                    </p>
                </div>
            </section>
            <section class="container">
                <div class="panel panel-default">
                    <div class="panel-heading">
                        <table style="width: 100%" border="0">
                            <tr>
                                <td style="width: 59%">
                                    <div class="input-group ">
                                        <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                        <input type="text" class="form-control " id="InputFilter" placeholder="Search">
                                    </div>
                                </td>
                                <td style="width: 1%"></td>
                                <td style="width: 40%" align="right">
                                    <button onclick="receivingReceiptSummaryReportCSV_OnClick()" class="btn btn-primary "><i class="fa fa-file-excel-o" aria-hidden="true"></i> CSV</button>
                                    <button onclick="receivingReceiptSummaryReportPDF_OnClick()" class="btn btn-primary "><i class="fa fa-print"></i> Print</button>
                                    <a href="/Software/AccountsPayable" class="btn btn-danger "><i class="fa fa-close"></i> Close</a>
                                </td>
                            </tr>
                        </table>
                    </div>
                    <div class="panel-heading">
                        <table style="width: 100%" border="0">
                            <tr>
                                <td style="width: 59%">
                                    <div class="input-group ">
                                        <span class="input-group-addon">Date:</span>
                                        <input type="text" class="form-control " id="dateFrom" placeholder="filter date" disabled>
                                    </div>
                                </td>
                                <td style="width: 1%"></td>
                                <td style="width: 20%" align="right"></td>
                                <td style="width: 20%"></td>
                            </tr>
                        </table>
                    </div>
                    <div class="panel-body">
                        <div id="receivingReceiptSummaryReportGrid" class="grid"></div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6"></div>
                    <div class="col-md-6">
                        <table class="table table-responsive table-bordered">
                            <tr>
                                <td align="right">
                                    <b>Total: </b>
                                </td>
                                <td style="padding-left: 10px" align="right">
                                    <span id="total">NA</span>
                                </td>
                            </tr>
                        </table>
                    </div>
                </div>
            </section>
            @Html.Partial("_SoftwareFooter")
        </main>
    </div>

    <div id="c-mask" class="c-mask"></div><!-- /c-mask -->
    @Scripts.Render("~/Scripts/Software-js")
    <script type="text/javascript">
        function getParam(name) {
            name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
            var regexS = "[\\?&]" + name + "=([^&#]*)";
            var regex = new RegExp(regexS);
            var results = regex.exec(window.location.href);
            if (results == null)
                return "";
            else
                return results[1];
        }

        function receivingReceiptSummaryReportPDF_OnClick() {
            window.location.href = '/RepReceivingReceiptSummaryReport/ReceivingReceiptSummaryReport?StartDate=' + getParam("StartDate") + '&EndDate=' + getParam("EndDate");
        }

        function getReceivingReceiptSummaryReport() {
            var receivingReceiptSummaryReport = new wijmo.collections.ObservableArray;
            $.ajax({
                url: '/api/ReceivingReceiptSummaryReport/list/' + getParam("StartDate") + '/' + getParam("EndDate"),
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (receivingReceiptSummaryReportResults) {
                    if (receivingReceiptSummaryReportResults.length > 0) {
                        var totalAmount = 0;

                        for (i = 0; i < receivingReceiptSummaryReportResults.length; i++) {
                            var docLink = "/Software/ReceivingReceiptDetail?ReceivingReceiptId=" + receivingReceiptSummaryReportResults[i]["Id"];
                            // Array Push
                            receivingReceiptSummaryReport.push({


                                Id: receivingReceiptSummaryReportResults[i]["Id"],
                                Branch: receivingReceiptSummaryReportResults[i]["Branch"],
                                RRDate: receivingReceiptSummaryReportResults[i]["RRDate"],
                                RRNumber: receivingReceiptSummaryReportResults[i]["RRNumber"],
                                RRNumberForCSV: "RR-" + receivingReceiptSummaryReportResults[i]["RRNumber"],
                                RRNumberButton: "<a href='" + docLink + "' class='btn btn-default btn-xs btn-block' style='text-align: left'>" + receivingReceiptSummaryReportResults[i]["RRNumber"],
                                DocumentReference: receivingReceiptSummaryReportResults[i]["DocumentReference"],
                                Supplier: receivingReceiptSummaryReportResults[i]["Supplier"],
                                Remarks: receivingReceiptSummaryReportResults[i]["Remarks"],
                                Amount: receivingReceiptSummaryReportResults[i]["Amount"]
                            });

                            totalAmount += receivingReceiptSummaryReportResults[i]["Amount"];
                        }

                        document.getElementById("total").innerHTML = totalAmount.toLocaleString();
                    }
                    NProgress.done();
                }
            });

            return receivingReceiptSummaryReport;
        }
        var receivingReceiptSummaryCollection;

        function receivingReceiptSummaryReportCSV_OnClick() {


            var CSV = '';
            var receivingReceiptSummaryReport = [];
            var fileName = 'ReceivingReceiptSummaryReport.CSV';

            for (i = 0; i < receivingReceiptSummaryReportCollection.items.length; i++) {
                receivingReceiptSummaryReport.push({
                    Branch: receivingReceiptSummaryReportCollection.items[i].Branch,
                    RRDate: receivingReceiptSummaryReportCollection.items[i].RRDate,
                    RRNumber: receivingReceiptSummaryReportCollection.items[i].RRNumberForCSV,
                    DocumentReference: receivingReceiptSummaryReportCollection.items[i].DocumentReference,
                    Supplier: receivingReceiptSummaryReportCollection.items[i].Supplier,
                    Remarks: receivingReceiptSummaryReportCollection.items[i].Remarks,
                    Amount: receivingReceiptSummaryReportCollection.items[i].Amount,


                });
            }

            //for (var i = 0; i < symbols.length; i++) {
            //    CSV += '"' + symbols[i].AccountCode + '"\r\n';
            //}
            var Headers = [];
            Headers.push({

                Branch: "Branch",
                RRDate: "RR Date",
                RRNumber: "RR Number",
                DocumentReference: "Document Reference",
                Supplier: "Supplier",
                Remarks: "Remarks",
                Amount: "Amount",

            });

            var header = '';
            // Rows
            for (var b in Headers[0]) {
                header += '"' + Headers[0][b] + '",';
            }

            CSV = header + '\r\n';
            for (var i = 0; i < receivingReceiptSummaryReport.length; i++) {
                var row = '';
                for (var a in receivingReceiptSummaryReport[i]) {
                    row += '"' + receivingReceiptSummaryReport[i][a] + '",';
                }

                row.slice(0, row.length - 1);
                CSV += row + '\r\n';
            }

            if (CSV == '') {
                toastr.error("No data.");
            } else {
                var link = document.createElement("a");

                if (link.download !== undefined) {
                    var blob = new Blob([CSV], { type: 'text/csv;charset=utf-8;' });
                    var url = URL.createObjectURL(blob);
                    link.setAttribute("href", url);
                    link.setAttribute("download", fileName);
                    link.style = "visibility:hidden";
                }

                if (navigator.msSaveBlob) {
                    link.addEventListener("click", function (event) {
                        var blob = new Blob([CSV], {
                            "type": "text/csv;charset=utf-8;"
                        });
                        navigator.msSaveBlob(blob, fileName);
                    }, false);
                }

                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);

                toastr.success("Dowload successful.");
            }
        }
        $(document).ready(function () {
            NProgress.start();
            document.getElementById("dateFrom").value = "Date from " + getParam("StartDate") + " to " + getParam("EndDate");

            receivingReceiptSummaryReportCollection = new wijmo.collections.CollectionView(getReceivingReceiptSummaryReport());
            receivingReceiptSummaryReportCollection.canFilter = true;

            var filterText = '';
            $('#InputFilter').keyup(function () {
                filterText = this.value.toLowerCase();
                receivingReceiptSummaryReportCollection.refresh();
            });
            receivingReceiptSummaryReportCollection.filter = function (item) {
                return !filterText || (item.Branch.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.RRNumber.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Supplier.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.DocumentReference.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Remarks.toLowerCase().indexOf(filterText) > -1)

            }
            // Flex Grid
            var receivingReceiptSummaryReportGrid = new wijmo.grid.FlexGrid('#receivingReceiptSummaryReportGrid');
            receivingReceiptSummaryReportGrid.initialize({
                columns: [
                    {
                        "header": "Branch ",
                        "binding": "Branch",
                        "allowSorting": true,
                        "width": 200,
                    },
                    {
                        "header": "RR Date",
                        "binding": "RRDate",
                        "allowSorting": true,
                        "width": 100
                    },
                    {
                        "header": "RR Number ",
                        "binding": "RRNumberButton",
                        "isContentHtml": true,
                        "allowSorting": true,
                        "width": 110
                    },
                    {
                        "header": "Doc. Ref",
                        "binding": "DocumentReference",
                        "allowSorting": true,
                        "width": 200
                    },
                    {
                        "header": "Supplier",
                        "binding": "Supplier",
                        "allowSorting": true,
                        "width": 300
                    },
                    {
                        "header": "Remarks",
                        "binding": "Remarks",
                        "allowSorting": true,
                        "width": 300
                    },
                    {
                        "header": "Amount",
                        "binding": "Amount",
                        "allowSorting": true,
                        "width": 150
                    }
                ],
                autoGenerateColumns: false,
                itemsSource: receivingReceiptSummaryReportCollection,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            receivingReceiptSummaryReportGrid.trackChanges = true;
        });
    </script>
    <script type="text/javascript">
        var cboUserBranches = new wijmo.input.ComboBox('#cboUserBranches');
        function getUserBranches() {
            $("#loadingUserBranches").show();
            document.getElementById("loadingUserBranches").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#userBranchContent").hide();

            $('#userBranchesModal').modal({ show: true, backdrop: 'static' });

            document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
            $("#updateUserBranch").prop("disabled", false);
            $("#closeUserBranch").prop("disabled", false);

            var userBranchesObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/userBranch/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (userBranchesResults) {
                    if (userBranchesResults.length > 0) {
                        for (i = 0; i < userBranchesResults.length; i++) {
                            userBranchesObservableArray.push({
                                BranchId: userBranchesResults[i]["BranchId"],
                                Branch: userBranchesResults[i]["Branch"]
                            });
                        }
                    }

                    var currentBranch = "@ViewData["BranchId"]";
                    cboUserBranches.dispose();
                    cboUserBranches = new wijmo.input.ComboBox('#cboUserBranches', {
                        isEditable: false,
                        placeholder: "Select Branches",
                        itemsSource: userBranchesObservableArray,
                        displayMemberPath: "Branch",
                        selectedValuePath: "BranchId",
                        selectedValue: currentBranch
                    });

                    setTimeout(function () {
                        $("#loadingUserBranches").hide();
                        $("#userBranchContent").show();
                    }, 500)
                }
            });
        }

        function updateUserBranchOnclick() {
            document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Updating";
            $("#updateUserBranch").prop("disabled", true);
            $("#closeUserBranch").prop("disabled", true);

            var userBranchObject = new Object();
            userBranchObject.BranchId = cboUserBranches.selectedValue;
            var userBranchData = JSON.stringify(userBranchObject);

            $.ajax({
                type: "PUT",
                url: '/api/userBranch/update',
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: userBranchData,
                statusCode: {
                    200: function () {
                        toastr.success("Update Successful");
                        window.setTimeout(function () {
                            location.reload()
                        }, 1000);
                    },
                    404: function () {
                        toastr.error("Not Found");
                        document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
                        $("#updateUserBranch").prop("disabled", false);
                        $("#closeUserBranch").prop("disabled", false);
                    },
                    500: function () {
                        toastr.error("Bad Request");
                        document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
                        $("#updateUserBranch").prop("disabled", false);
                        $("#closeUserBranch").prop("disabled", false);
                    }
                }
            });
        }
    </script>
    <script type="text/javascript">
        var slideLeft = new Menu({
            wrapper: '#o-wrapper',
            type: 'slide-left',
            menuOpenerClass: '.c-button',
            maskId: '#c-mask'
        });

        var slideLeftBtn = document.querySelector('#c-button--slide-left');

        slideLeftBtn.addEventListener('click', function (e) {
            e.preventDefault;
            slideLeft.open();
        });
    </script>
</body>
</html>