@model easyfis.Entities.MstUserForm
@{
    // =====================
    // User Rights Variables
    // =====================
    var canAdd = Model.CanAdd;
    var canEdit = Model.CanEdit;
    var canDelete = Model.CanDelete;
    var canLock = Model.CanLock;
    var canUnlock = Model.CanUnlock;
    var canPrint = Model.CanPrint;
}
<!DOCTYPE html>
<html>
<head>
    <!-- Meta -->
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">

    <!-- Title of the Page -->
    <link rel="shortcut icon" href="~/Images/icon/easyfislogomini.ico">
    <title>Item</title>

    <!-- CSS StyleSheets-->
    @Styles.Render("~/Content/Software-css")
</head>
<body>
    <div id="o-wrapper" class="o-wrapper">
        <main class="o-content">
            @Html.Partial("_SoftwareHeader")
            <section class="content-header">
                <div class="container">
                    <h3>
                        Item
                    </h3>
                    <p>
                        <i class="fa fa-building-o fa-fw"></i> &nbsp; @ViewData["Company"] <br />
                        <i class="fa fa-home fa-fw"></i> &nbsp; <a href="#" onclick="getUserBranches()" style="color: white;">@ViewData["Branch"]</a>
                    </p>
                </div>
            </section>
            <section class="container">
                <div class="panel panel-default">
                    <div class="panel-heading">
                        <table style="width: 100%" border="0">
                            <tr>
                                <td style="width: 59%">
                                    <div class="input-group ">
                                        <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                        <input type="text" class="form-control " id="InputFilter" placeholder="Search...">
                                    </div>
                                </td>
                                <td style="width: 1%"></td>
                                <td style="width: 40%" align="right">
                                    @{
                                        if (canAdd)
                                        {
                                            <button class="btn btn-primary" id="btnAddItem" onclick="btnAddItemOnclick()"><i class="fa fa-plus"></i> Add</button>
                                        }
                                    }
                                    <button class="btn btn-danger" id="btnCloseItem" onclick="btnCloseItemOnclick()"><i class=" fa fa-times"></i> Close</button>
                                </td>
                            </tr>
                        </table>
                    </div>
                    <div class="panel-body">
                        <div id="ItemGrid"></div>
                    </div>
                    <div class="panel-footer">
                        <div class="row">
                            <div class="btn-group col-md-7" id="naviagtionPageGrid">
                                <button type="button" class="btn btn-default border-custom" id="btnMoveToFirstPageGrid">
                                    <span class="glyphicon glyphicon-fast-backward"></span>
                                </button>
                                <button type="button" class="btn btn-default border-custom" id="btnMoveToPreviousPageGrid">
                                    <span class="glyphicon glyphicon-step-backward"></span>
                                </button>
                                <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnCurrentPageGrid"></button>
                                <button type="button" class="btn btn-default border-custom" id="btnMoveToNextPageGrid">
                                    <span class="glyphicon glyphicon-step-forward"></span>
                                </button>
                                <button type="button" class="btn btn-default border-custom" id="btnMoveToLastPageGrid">
                                    <span class="glyphicon glyphicon-fast-forward"></span>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </section>
            @Html.Partial("_SoftwareFooter")
        </main>
    </div>
    <div id="c-mask" class="c-mask"></div>

    <!-- Item Delete Modal -->
    <div class="modal fade" id="deleteItemConfirm" role="dialog">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Delete</h4>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete this item?
                </div>
                <div class="modal-footer">
                    <button id="btnConfirmDelete" class="btn btn-danger" onclick="btnConfirmDeleteOnclick()"><i class="fa fa-trash"></i> Delete</button>
                    <button id="btnCloseConfirmDelete" class="btn btn-primary" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>

    @Scripts.Render("~/Scripts/Software-js")
    <script type="text/javascript">
        // ================
        // Global Variables
        // ================
        var itemCollectionView;
        var itemFlexGrid;
        var btnFirstPageGrid;
        var btnPreviousPageGrid;
        var btnNextPageGrid;
        var btnLastPageGrid;
        var btnCurrentPageGrid;

        // ==============================
        // Get Data from MstArtcile Table
        // ==============================
        function getArtcileForItems() {
            var itemsObservableArray = new wijmo.collections.ObservableArray;
            NProgress.start();
            $.ajax({
                url: '/api/item/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (itemListResults) {
                    if (itemListResults.length > 0) {
                        for (i = 0; i < itemListResults.length; i++) {
                            itemsObservableArray.push({
                                EditId: "<button class='btn btn-primary btn-xs btn-block' id='' onclick='cmdItemEditButton_OnClick()'><i class='fa fa-edit'></i> Edit</button>",
                                DeleteId: "<button class='btn btn-danger btn-xs btn-block' onclick='cmdItemDeleteButton_OnClick()'><i class='fa fa-trash'></i> Delete</button>",
                                Id: itemListResults[i]["Id"],
                                ArticleCode: itemListResults[i]["ArticleCode"],
                                ManualArticleCode: itemListResults[i]["ManualArticleCode"],
                                Article: itemListResults[i]["Article"],
                                Category: itemListResults[i]["Category"],
                                Unit: itemListResults[i]["Unit"],
                                IsInventory: itemListResults[i]["IsInventory"],
                                IsLocked: itemListResults[i]["IsLocked"],
                                CreatedById: itemListResults[i]["CreatedById"],
                                CreatedBy: itemListResults[i]["CreatedBy"],
                                CreatedDateTime: itemListResults[i]["CreatedDateTime"],
                                UpdatedById: itemListResults[i]["UpdatedById"],
                                UpdatedBy: itemListResults[i]["UpdatedBy"],
                                UpdatedDateTime: itemListResults[i]["UpdatedDateTime"]
                            });
                        }
                    }

                    NProgress.done();
                }
            });

            return itemsObservableArray;
        }

        // ===============
        // Item Add Button
        // ===============
        function btnAddItemOnclick() {
            document.getElementById('btnAddItem').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Adding";
            $('#btnAddItem').prop('disabled', true);
            $('#btnCloseItem').prop('disabled', true);

            $.ajax({
                type: "POST",
                url: '/api/item/add',
                contentType: "application/json; charset=utf-8",
                statusCode: {
                    200: function (id) {
                        window.location = '/Software/ItemDetail?id=' + id;
                    },
                    404: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                        document.getElementById('btnAddItem').innerHTML = "<i class='fa fa-plus'></i> Add";
                        $('#btnAddItem').prop('disabled', false);
                        $('#btnCloseItem').prop('disabled', false);
                    },
                    400: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                        document.getElementById('btnAddItem').innerHTML = "<i class='fa fa-plus'></i> Add";
                        $('#btnAddItem').prop('disabled', false);
                        $('#btnCloseItem').prop('disabled', false);
                    },
                    500: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                        document.getElementById('btnAddItem').innerHTML = "<i class='fa fa-plus'></i> Add";
                        $('#btnAddItem').prop('disabled', false);
                        $('#btnCloseItem').prop('disabled', false);
                    }
                }
            });
        }

        // =================
        // Item Close Button
        // =================
        function btnCloseItemOnclick() {
            window.location = '/Software';
        }

        // ================
        // Item Edit Button
        // ================
        function cmdItemEditButton_OnClick() {
            itemCollectionView.editItem(itemCollectionView.currentItem);
            var item = itemCollectionView.currentEditItem;
            var itemId = item.Id;
            window.location = '/Software/ItemDetail?id=' + itemId;
        }

        // =====================
        // Refresh Item Flexgrid
        // =====================
        function refreshItemFlexgrid() {
            itemCollectionView = new wijmo.collections.CollectionView(getArtcileForItems());
            itemCollectionView.canFilter = true;
            itemCollectionView.pageSize = 15;

            var filterText = '';
            $('#InputFilter').keyup(function () {
                filterText = this.value.toLowerCase();
                itemCollectionView.refresh();
            });

            itemCollectionView.filter = function (item) {
                return !filterText || (item.Article.toLowerCase().indexOf(filterText) > -1)
                    || (item.ArticleCode.toLowerCase().indexOf(filterText) > -1)
                    || (item.ManualArticleCode.toLowerCase().indexOf(filterText) > -1)
                    || (item.Category.toLowerCase().indexOf(filterText) > -1)
                    || (item.Unit.toLowerCase().indexOf(filterText) > -1);
            }

            itemCollectionView.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsItems();
            });

            itemCollectionView.currentChanged.addHandler(function (sender, args) {
                updateDetails();
            });

            itemFlexGrid.itemsSource = itemCollectionView;
            itemFlexGrid.trackChanges = true;
        }

        // ==================
        // Item delete Button
        // ==================
        function cmdItemDeleteButton_OnClick() {
            itemCollectionView.editItem(itemCollectionView.currentItem);
            var item = itemCollectionView.currentEditItem;
            if (item.IsLocked) {
                toastr.error("Delete is not allowed when the selected record is locked!");
            } else {
                $('#deleteItemConfirm').modal({
                    show: true,
                    backdrop: 'static'
                });

                document.getElementById('btnConfirmDelete').innerHTML = "<i class='fa fa-trash'></i> Delete";
                $('#btnConfirmDelete').prop('disabled', false);
                $('#btnCloseConfirmDelete').prop('disabled', false);
            }
        }

        // ==========================
        // Item Confirm Delete Button
        // ==========================
        function btnConfirmDeleteOnclick() {
            document.getElementById('btnConfirmDelete').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Deleting";
            $('#btnConfirmDelete').prop('disabled', true);
            $('#btnCloseConfirmDelete').prop('disabled', true);

            itemCollectionView.editItem(itemCollectionView.currentItem);
            var id = itemCollectionView.currentEditItem.Id;
            $.ajax({
                url: '/api/item/delete/' + id,
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Delete Successful");
                        $('#deleteItemConfirm').modal('hide');
                        refreshItemFlexgrid();
                    },
                    404: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                        $('#deleteItemConfirm').modal('hide');
                        document.getElementById('btnConfirmDelete').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $('#btnConfirmDelete').prop('disabled', false);
                        $('#btnCloseConfirmDelete').prop('disabled', false);
                    },
                    400: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                        $('#deleteItemConfirm').modal('hide');
                        document.getElementById('btnConfirmDelete').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $('#btnConfirmDelete').prop('disabled', false);
                        $('#btnCloseConfirmDelete').prop('disabled', false);
                    },
                    500: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                        $('#deleteItemConfirm').modal('hide');
                        document.getElementById('btnConfirmDelete').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $('#btnConfirmDelete').prop('disabled', false);
                        $('#btnCloseConfirmDelete').prop('disabled', false);
                    }
                }
            });
        }

        // ===================
        // FlexGrid Selection
        // ===================
        function updateDetails() {
            itemCollectionView.editItem(itemCollectionView.currentItem);
            var item = itemCollectionView.currentItem;
            document.getElementById('createdBy').innerHTML = item.CreatedBy;
            document.getElementById('createdDate').innerHTML = item.CreatedDateTime;
            document.getElementById('updatedBy').innerHTML = item.UpdatedBy;
            document.getElementById('updatedDate').innerHTML = item.UpdatedDateTime;
        }

        // ===============================
        // Navigation Buttons for Supplier
        // ===============================
        function updateNavigateButtonsItems() {
            if (itemCollectionView.pageSize <= 0) {
                document.getElementById('naviagtionPageGrid').style.display = 'none';
                return;
            }
            document.getElementById('naviagtionPageGrid').style.display = 'block';
            if (itemCollectionView.pageIndex === 0) {
                btnFirstPageGrid.setAttribute('disabled', 'disabled');
                btnPreviousPageGrid.setAttribute('disabled', 'disabled');
                btnNextPageGrid.removeAttribute('disabled');
                btnLastPageGrid.removeAttribute('disabled');
            } else if (itemCollectionView.pageIndex === (itemCollectionView.pageCount - 1)) {
                btnFirstPageGrid.removeAttribute('disabled');
                btnPreviousPageGrid.removeAttribute('disabled');
                btnLastPageGrid.setAttribute('disabled', 'disabled');
                btnNextPageGrid.setAttribute('disabled', 'disabled');
            } else {
                btnFirstPageGrid.removeAttribute('disabled');
                btnPreviousPageGrid.removeAttribute('disabled');
                btnNextPageGrid.removeAttribute('disabled');
                btnLastPageGrid.removeAttribute('disabled');
            }
            btnCurrentPageGrid.innerHTML = (itemCollectionView.pageIndex + 1) + ' / ' + itemCollectionView.pageCount;
        }

        // =============
        // Item FlexGrid
        // =============
        function createItemFlexGrid() {
            itemCollectionView = new wijmo.collections.CollectionView(getArtcileForItems());
            itemCollectionView.canFilter = true;
            itemCollectionView.pageSize = 15;

            var filterText = '';
            $('#InputFilter').keyup(function () {
                filterText = this.value.toLowerCase();
                itemCollectionView.refresh();
            });

            itemCollectionView.filter = function (item) {
                return !filterText || (item.Article.toLowerCase().indexOf(filterText) > -1)
                                   || (item.ArticleCode.toLowerCase().indexOf(filterText) > -1)
                                   || (item.ManualArticleCode.toLowerCase().indexOf(filterText) > -1)
                                   || (item.Category.toLowerCase().indexOf(filterText) > -1)
                                   || (item.Unit.toLowerCase().indexOf(filterText) > -1);
            }

            itemCollectionView.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsItems();
            });

            itemCollectionView.currentChanged.addHandler(function (sender, args) {
                updateDetails();
            });

            itemFlexGrid = new wijmo.grid.FlexGrid('#ItemGrid');
            itemFlexGrid.initialize({
                columns: [
                             @{
                                if (canEdit)
                                {
                                    <text>
                                        {
                                            "header": "Edit",
                                            "binding": "EditId",
                                            "width": 70,
                                            "align": "center",
                                            "allowResizing": false,
                                            "allowSorting": false,
                                            "isContentHtml": true
                                        },
                                    </text>
                                }
                                if (canDelete)
                                {
                                    <text>
                                        {
                                            "header": "Delete",
                                            "binding": "DeleteId",
                                            "width": 70,
                                            "align": "center",
                                            "allowResizing": false,
                                            "allowSorting": false,
                                            "isContentHtml": true
                                        },
                                    </text>
                                }
                            }
                            {
                                "header": "Code",
                                "binding": "ArticleCode",
                                "allowSorting": true,
                                "width": 100
                            },
                            {
                                "header": "Manual Code",
                                "binding": "ManualArticleCode",
                                "allowSorting": true,
                                "width": 120
                            },
                            {
                                "header": "Item",
                                "binding": "Article",
                                "allowSorting": true,
                                "width": "4*"
                            },
                            {
                                "header": "Category",
                                "binding": "Category",
                                "allowSorting": true,
                                "width": "3*"
                            },
                            {
                                "header": "Unit",
                                "binding": "Unit",
                                "allowSorting": true,
                                "width": "1*"
                            },
                            {
                                "header": "I",
                                "binding": "IsInventory",
                                "allowSorting": true,
                                "width": 50
                            },
                            {
                                "header": "L",
                                "binding": "IsLocked",
                                "allowSorting": true,
                                "width": 50
                            }
                ],
                autoGenerateColumns: false,
                itemsSource: itemCollectionView,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            itemFlexGrid.trackChanges = true;

            btnFirstPageGrid = document.getElementById('btnMoveToFirstPageGrid');
            btnPreviousPageGrid = document.getElementById('btnMoveToPreviousPageGrid');
            btnNextPageGrid = document.getElementById('btnMoveToNextPageGrid');
            btnLastPageGrid = document.getElementById('btnMoveToLastPageGrid');
            btnCurrentPageGrid = document.getElementById('btnCurrentPageGrid');

            updateNavigateButtonsItems();

            btnFirstPageGrid.addEventListener('click', function () {
                itemCollectionView.moveToFirstPage();
                updateNavigateButtonsItems();
            });

            btnPreviousPageGrid.addEventListener('click', function () {
                itemCollectionView.moveToPreviousPage();
                updateNavigateButtonsItems();
            });

            btnNextPageGrid.addEventListener('click', function () {
                itemCollectionView.moveToNextPage();
                updateNavigateButtonsItems();
            });

            btnLastPageGrid.addEventListener('click', function () {
                itemCollectionView.moveToLastPage();
                updateNavigateButtonsItems();
            });
        }

        // ============
        // On Load Page
        // ============
        $(document).ready(function () {
            createItemFlexGrid();
        });
    </script>
    <script type="text/javascript">
        var cboUserBranches = new wijmo.input.ComboBox('#cboUserBranches');
        function getUserBranches() {
            $("#loadingUserBranches").show();
            document.getElementById("loadingUserBranches").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#userBranchContent").hide();

            $('#userBranchesModal').modal({ show: true, backdrop: 'static' });

            document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
            $("#updateUserBranch").prop("disabled", false);
            $("#closeUserBranch").prop("disabled", false);

            var userBranchesObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/userBranch/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (userBranchesResults) {
                    if (userBranchesResults.length > 0) {
                        for (i = 0; i < userBranchesResults.length; i++) {
                            userBranchesObservableArray.push({
                                BranchId: userBranchesResults[i]["BranchId"],
                                Branch: userBranchesResults[i]["Branch"]
                            });
                        }
                    }

                    var currentBranch = "@ViewData["BranchId"]";
                    cboUserBranches.dispose();
                    cboUserBranches = new wijmo.input.ComboBox('#cboUserBranches', {
                        isEditable: false,
                        placeholder: "Select Branches",
                        itemsSource: userBranchesObservableArray,
                        displayMemberPath: "Branch",
                        selectedValuePath: "BranchId",
                        selectedValue: currentBranch
                    });

                    setTimeout(function () {
                        $("#loadingUserBranches").hide();
                        $("#userBranchContent").show();
                    }, 500)
                }
            });
        }

        function updateUserBranchOnclick() {
            document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Updating";
            $("#updateUserBranch").prop("disabled", true);
            $("#closeUserBranch").prop("disabled", true);

            var userBranchObject = new Object();
            userBranchObject.BranchId = cboUserBranches.selectedValue;
            var userBranchData = JSON.stringify(userBranchObject);

            $.ajax({
                type: "PUT",
                url: '/api/userBranch/update',
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: userBranchData,
                statusCode: {
                    200: function () {
                        toastr.success("Update Successful");
                        window.setTimeout(function () {
                            location.reload()
                        }, 1000);
                    },
                    404: function () {
                        toastr.error("Not Found");
                        document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
                        $("#updateUserBranch").prop("disabled", false);
                        $("#closeUserBranch").prop("disabled", false);
                    },
                    500: function () {
                        toastr.error("Bad Request");
                        document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
                        $("#updateUserBranch").prop("disabled", false);
                        $("#closeUserBranch").prop("disabled", false);
                    }
                }
            });
        }
    </script>
    <script type="text/javascript">
        var slideLeft = new Menu({
            wrapper: '#o-wrapper',
            type: 'slide-left',
            menuOpenerClass: '.c-button',
            maskId: '#c-mask'
        });

        var slideLeftBtn = document.querySelector('#c-button--slide-left');

        slideLeftBtn.addEventListener('click', function (e) {
            e.preventDefault;
            slideLeft.open();
        });
    </script>
</body>
</html>