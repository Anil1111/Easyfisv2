@model easyfis.Entities.MstUserForm
@{
    // =====================
    // User Rights Variables
    // =====================
    var canAdd = Model.CanAdd;
    var canEdit = Model.CanEdit;
    var canDelete = Model.CanDelete;
    var canLock = Model.CanLock;
    var canUnlock = Model.CanUnlock;
    var canPrint = Model.CanPrint;
}
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">
    <link rel="shortcut icon" href="~/Images/icon/easyfislogomini.ico">
    <title>Disbursement Detail</title>

    @Styles.Render("~/Content/Software-css")
</head>
<body>
    <div id="o-wrapper" class="o-wrapper">
        <main class="o-content">
            @Html.Partial("_SoftwareHeader")

            <section class="content-header">
                <div class="container">
                    <h3>
                        Disbursement Detail
                    </h3>
                    <p>
                        <i class="fa fa-building-o fa-fw"></i> &nbsp; @ViewData["Company"] <br />
                        <i class="fa fa-home fa-fw"></i> &nbsp; <a href="#" onclick="getUserBranches()" style="color: white;">@ViewData["Branch"]</a>
                    </p>
                </div>
            </section>
            <section class="container">
                <div class="panel panel-default">

                    <!--
                        ======================================================
                        Options: Journal, Lock, Unlock, Print and Close Button
                        ======================================================
                    -->
                    <div class="panel-heading">
                        <div class="row">
                            <div class="col-md-12" align="right">
                                <button class="btn btn-primary" id="btnDisbursementDetailJournal" onclick="btnDisbursementDetailJournalOnclick()"><i class="fa fa-book"></i> Journal</button>
                                @{
                                    if (canLock)
                                    {
                                        <button class="btn btn-primary" id="btnDisbursementDetailLock" onclick="btnDisbursementDetailLockOnclick()"><i class="fa fa-lock"></i> Lock</button>
                                    }
                                    if (canUnlock)
                                    {
                                        <button class="btn btn-primary" id="btnDisbursementDetailUnlock" onclick="btnDisbursementDetailUnlockOnclick()"><i class="fa fa-unlock"></i> Unlock</button>
                                    }
                                    if (canPrint)
                                    {
                                        <button class="btn btn-primary" id="btnDisbursementDetailPrint" onclick="btnDisbursementDetailPrintOnclick()"><i class="fa fa-print"></i> Print</button>
                                    }
                                }
                                <button class="btn btn-danger" id="btnDisbursementDetailClose" onclick="window.location.href = '/Software/Disbursement'"><i class="fa fa-times"></i> Close</button>
                            </div>
                        </div>
                    </div>

                    <!--
                        ======================================
                        Details, Fields and Other Informations
                        ======================================
                    -->
                    <div class="panel-body">
                        <form class="form-horizontal" role="form">
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Branch</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboDisbursementDetailBranch"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">CV Number</label>
                                        <div class="col-sm-8">
                                            <input type="text" class="form-control requiredDisbursement" id="inpDisbursementDetailCVNumber" disabled />
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">CV Date</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboDisbursementDetailCVDate"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Manual CV Number</label>
                                        <div class="col-sm-8">
                                            <input type="text" class="form-control requiredDisbursement" id="inpDisbursementDetailManualCVNumber" placeholder="Manual CV Number" />
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Supplier</label>
                                        <div class="col-sm-8">
                                            <div class="input-group">
                                                <div class="comboBox-wide" id="cboDisbursementDetailSupplier"></div>
                                                <div class="input-group-btn">
                                                    <button type="button" class="btn btn-primary" id="btnDisbursementDetailAP" onclick="btnDisbursementDetailAPOnclick()">AP</button>
                                                    <button type="button" class="btn btn-primary" id="btnDisbursementDetailAdvances" onclick="btnDisbursementDetailAdvancesOnclick()">Advances</button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Payee</label>
                                        <div class="col-sm-8">
                                            <input type="text" class="form-control requiredDisbursement" id="inpDisbursementDetailPayee" placeholder="Payee" />
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Pay Type</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboDisbursementDetailPayType"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Particulars</label>
                                        <div class="col-sm-8">
                                            <textarea rows="5" class="form-control textarea-custom requiredDisbursement" id="inpDisbursementDetailParticulars" placeholder="Particulars"></textarea>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Bank</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboDisbursementDetailBank"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Check Number</label>
                                        <div class="col-sm-8">
                                            <input type="text" class="form-control  requiredDisbursement" id="inpDisbursementDetailCheckNumber" placeholder="Check Number" />
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Check Date</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboDisbursementDetailCheckDate"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Amount</label>
                                        <div class="col-sm-8">
                                            <input type="text" class="form-control numberField requiredDisbursement" id="cboDisbursementDetailAmount" placeholder="0.00" disabled />
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Is Cross Check</label>
                                        <div class="col-sm-8">
                                            <input type="checkbox" id="inpDisbursementDetailIsCrossCheck">
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Prepared by</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboDisbursementDetailPreparedBy"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Checked by</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboDisbursementDetailCheckedBy"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Approved by</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboDisbursementDetailApprovedBy"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Is Clear</label>
                                        <div class="col-sm-8">
                                            <input type="checkbox" id="inpDisbursementDetailIsClear">
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>

                <!--
                    ==================
                    Disbursement Lines
                    ==================
                -->
                <ul class="nav nav-tabs" role="tablist" id="myTab">
                    <li role="presentation" class="active"><a data-toggle="tab" href="#DisbursementLine" id="itemTabId">Lines</a></li>
                </ul>
                <br />
                <div class="tab-content">
                    <div id="DisbursementLine" class="tab-pane fade in active">
                        <div class="panel panel-default">

                            <!--
                                =======================================================================
                                Disbursement Lines: Search, Filter, Display Number of Rows and  Buttons
                                =======================================================================
                            -->
                            <div class="panel-heading">
                                <table style="width: 100%" border="0">
                                    <tr>
                                        <td style="width: 49.5%">
                                            <div class="input-group">
                                                <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                                <input type="text" class="form-control" id="inpDisbursementLineSearchFilter" placeholder="Search...">
                                            </div>
                                        </td>
                                        <td style="width: 1%"></td>
                                        <td style="width: 24%">
                                            <div class="input-group">
                                                <span class="input-group-addon"><b><i class="fa fa-table"></i></b></span>
                                                <div class="comboBox-wide" id="cboDisbursementLineDisplayNumberOfRows"></div>
                                            </div>
                                        </td>
                                        <td style="width: 1%"></td>
                                        <td style="width: 24.5%" align="right">
                                            @{
                                                if (canAdd)
                                                {
                                                    <button class="btn btn-primary" id="btnDisbursementLineAdd" onclick="btnDisbursementLineAddOnclick()"><i class="fa fa-plus"></i> Add</button>
                                                }
                                            }
                                        </td>
                                    </tr>
                                </table>
                            </div>

                            <!--
                                =============================
                                Disbursement Lines: Flex Grid
                                =============================
                            -->
                            <div class="panel-body">
                                <div id="disbursementLineFlexGrid"></div>
                            </div>

                            <!--
                                ======================================
                                Disbursement Lines: Navigation Buttons
                                ======================================
                            -->
                            <div class="panel-footer">
                                <div class="row">
                                    <div class="btn-group col-md-7" id="disbursementLineNavigationPageGrid">
                                        <button type="button" class="btn btn-default border-custom" id="btnDisbursementLineMoveToFirstPageGrid">
                                            <span class="glyphicon glyphicon-fast-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" id="btnDisbursementLineMoveToPreviousPageGrid">
                                            <span class="glyphicon glyphicon-step-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnDisbursementLineCurrentPageGrid"></button>
                                        <button type="button" class="btn btn-default border-custom" id="btnDisbursementLineMoveToNextPageGrid">
                                            <span class="glyphicon glyphicon-step-forward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" id="btnDisbursementLineMoveToLastPageGrid">
                                            <span class="glyphicon glyphicon-fast-forward"></span>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!--
                            ==========================
                            Disbursement Lines: Totals
                            ==========================
                        -->
                        <div class="panel panel-default">
                            <div class="panel-body" style="padding-bottom: 0px;">
                                <div class="row">
                                    <div class="col-md-6"></div>
                                    <div class="col-md-6">
                                        <dl class="dl-horizontal">
                                            <dt>
                                                <b>Total Amount</b>
                                            </dt>
                                            <dd>
                                                <input type="text" class="form-control numberField" id="inpDisbursementLineTotalAmount" placeholder="0.00" disabled />
                                            </dd>
                                        </dl>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!--
                    ==========
                    User Stamp
                    ==========
                -->
                <div class="panel panel-default">
                    <div class="panel-heading">
                        User stamp
                    </div>
                    <div class="panel-body">
                        <div class="row">
                            <div class="col-md-6">
                                <p>Created by:</p>
                                <div style="padding-left: 10px;">
                                    <i class="fa fa-key fa-fw"></i> <label id="createdBy">NA</label>
                                    <br />
                                    <small><i class="fa fa-calendar fa-fw"></i> &nbsp;<span id="createdDate">mm/dd/yyyy</span></small>
                                </div>
                                <br />
                            </div>
                            <div class="col-md-6">
                                <p>Updated by:</p>
                                <div style="padding-left: 10px;">
                                    <i class="fa fa-key fa-fw"></i> <label id="updatedBy">NA</label>
                                    <br />
                                    <small><i class="fa fa-calendar fa-fw"></i> &nbsp;<span id="updatedDate">mm/dd/yyyy</span></small>
                                </div>
                                <br />
                            </div>
                        </div>
                    </div>
                </div>
            </section>

            @Html.Partial("_SoftwareFooter")
        </main>
    </div>
    <div id="c-mask" class="c-mask"></div>

    <!--
        ================================
        Disbursement Lines: Detail Modal
        ================================
    -->
    <div class="modal fade" id="disbursementLineDetailModal" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="disbursementLineModalTitle">Disbursement Line</h4>
                </div>
                <div class="modal-body">
                    <center>
                        <span id="disbursementLineLoading"></span>
                    </center>
                    <div id="disbursementLineDetailForm">
                        <dl class="dl-horizontal">
                            <dt>Branch</dt>
                            <dd>
                                <div class="comboBox-wide" id="cboDisbursementLineBranch"></div>
                            </dd>
                            <dt>Account</dt>
                            <dd>
                                <table style="width: 100%" border="0">
                                    <tr>
                                        <td style="width: 30%">
                                            <div class="comboBox-wide" id="cboDisbursementLineAccountCode"></div>
                                        </td>
                                        <td style="width: 1%"></td>
                                        <td style="width: 69%">
                                            <div class="comboBox-wide" id="cboDisbursementLineAccount"></div>
                                        </td>
                                    </tr>
                                </table>
                            </dd>
                            <dt>Article</dt>
                            <dd>
                                <div class="comboBox-wide" id="cboDisbursementLineArticle"></div>
                            </dd>
                            <dt>RR No.</dt>
                            <dd>
                                <div class="comboBox-wide" id="cboDisbursementLineRRNumber"></div>
                            </dd>
                            <dt>Particulars</dt>
                            <dd>
                                <textarea rows="5" class="form-control textarea-custom requiredDisbursementLine" id="inpDisbursementLineParticulars" placeholder="Particulars"></textarea>
                            </dd>
                            <dt>Amount</dt>
                            <dd>
                                <input class="form-control  numberField  requiredDisbursementLine" id="inpDisbursementLineAmount" placeholder="0.00" />
                            </dd>
                        </dl>
                    </div>
                </div>
                <div class="modal-footer">
                    <button id="btnDisbursementLineSave" class="btn btn-primary" onclick="btnDisbursementLineSaveOnclick()"><i class="fa fa-save"></i> Save</button>
                    <button id="btnDisbursementLineCloseDetailModal" class="btn btn-danger" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!--
        ================================
        Disbursement Lines: Delete Modal
        ================================
    -->
    <div class="modal fade" id="disbursementLineConfirmDeleteModal" role="dialog">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Delete</h4>
                </div>
                <div class="modal-body">
                    Delete Disbursement Line?
                </div>
                <div class="modal-footer">
                    <button id="btnDisbursementLineConfirmDelete" class="btn btn-danger" onclick="btnDisbursementLineConfirmDeleteOnclick()"><i class="fa fa-trash"></i> Delete</button>
                    <button id="btnDisbursementLineCloseConfirmDeleteModal" class="btn btn-primary" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <!--
        =====================
        Journal Entries Modal
        =====================
    -->
    <div class="modal fade" id="journalEntryModal" role="dialog">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title"> Journal </h4>
                </div>
                <div class="modal-body">
                    <center>
                        <span id="journalLoading"></span>
                    </center>
                    <div id="journalContent">
                        <div id="journalFlexGrid" style="max-height: 250px;"></div>
                        <br /><br />
                        <div class="row">
                            <div class="col-md-7"></div>
                            <div class="col-md-5">
                                <dl class="dl-horizontal">
                                    <dt>
                                        <b>Total Debit</b>
                                    </dt>
                                    <dd>
                                        <input type="text" class="form-control numberField" id="inpJournalTotalDebit" placeholder="0.00" disabled />
                                    </dd>
                                    <dt>
                                        <b>Total Credit</b>
                                    </dt>
                                    <dd>
                                        <input type="text" class="form-control numberField" id="inpJournalTotalCredit" placeholder="0.00" disabled />
                                    </dd>
                                    <dt>
                                        <b>Variance</b>
                                    </dt>
                                    <dd>
                                        <input type="text" class="form-control numberField" id="inpJournalVariance" placeholder="0.00" disabled />
                                    </dd>
                                </dl>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!--
        ==================================
        AP: Receiving Receipt Status Modal
        ==================================
    -->
    <div class="modal fade" id="receivingReceiptStatusModal" role="dialog">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Receiving Receipt Status</h4>
                </div>
                <div class="modal-body">
                    <div class="panel panel-default">

                        <!--
                            ===============
                            Search / Filter
                            ===============
                        -->
                        <div class="panel-heading">
                            <table style="width: 100%" border="0">
                                <tr>
                                    <td style="width: 40%">
                                        <div class="input-group">
                                            <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                            <input type="text" class="form-control" id="inpReceivingReceiptStatusSearchFilter" placeholder="Search">
                                        </div>
                                    </td>
                                    <td style="width: 1%"></td>
                                    <td style="width: 29%">
                                        <div class="input-group ">
                                            <span class="input-group-addon"><b>Start Date</b></span>
                                            <div id="cboReceivingReceiptStatusStartDateFilter"></div>
                                        </div>
                                    </td>
                                    <td style="width: 1%"></td>
                                    <td style="width: 29%">
                                        <div class="input-group ">
                                            <span class="input-group-addon"><b>End Date</b></span>
                                            <div id="cboReceivingReceiptStatusEndDateFilter"></div>
                                        </div>
                                    </td>
                                </tr>
                            </table>
                        </div>

                        <!--
                            =========
                            Flex Grid
                            =========
                        -->
                        <div class="panel-body">
                            <center>
                                <span id="receivingReceiptStatusLoading"></span>
                            </center>
                            <div id="receivingReceiptStatusContent">
                                <div id="receivingReceiptStatusFlexGrid" style="font-size: 13px;"></div>
                            </div>
                        </div>

                        <!--
                            ====================
                            Navigation Page Grid
                            ====================
                        -->
                        <div class="panel-footer">
                            <div class="row">
                                <div class="btn-group col-md-7" id="receivingStatusNavigationPageGrid">
                                    <button type="button" class="btn btn-default border-custom" id="btnReceivingReceiptStatusMoveToFirstPageGrid">
                                        <span class="glyphicon glyphicon-fast-backward"></span>
                                    </button>
                                    <button type="button" class="btn btn-default border-custom" id="btnReceivingReceiptStatusMoveToPreviousPageGrid">
                                        <span class="glyphicon glyphicon-step-backward"></span>
                                    </button>
                                    <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnReceivingReceiptStatusCurrentPageGrid"></button>
                                    <button type="button" class="btn btn-default border-custom" id="btnReceivingReceiptStatusMoveToNextPageGrid">
                                        <span class="glyphicon glyphicon-step-forward"></span>
                                    </button>
                                    <button type="button" class="btn btn-default border-custom" id="btnReceivingReceiptStatusMoveToLastPageGrid">
                                        <span class="glyphicon glyphicon-fast-forward"></span>
                                    </button>
                                </div>
                                <div class="col-md-1"></div>
                                <div class="col-md-4">
                                    <div class="input-group">
                                        <span class="input-group-addon"><b>Total Amount</b></span>
                                        <input type="text" class="form-control numberField" id="inpReceivingReceiptStatusTotalAmount" placeholder="0.00" disabled>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button id="btnReceivingReceiptStatusApply" class="btn btn-primary" onclick="btnReceivingReceiptStatusApplyOnclick()"><i class="fa fa-check"></i> Apply</button>
                    <button id="btnReceivingReceiptStatusApplyCloseModal" class="btn btn-danger" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!--
        ==============================================
        AP: Receiving Receipt Status Pick Amount Modal
        ==============================================
    -->
    <div class="modal fade" id="receivingReceiptStatusPickAmountModal" role="dialog">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Pick</h4>
                </div>
                <div class="modal-body">
                    <dl>
                        <dt>Amount</dt>
                        <dd>
                            <input class="form-control numberField requiredPickedAmount" id="inpReceivingReceiptStatusPickAmount" placeholder="0.00" />
                        </dd>
                    </dl>
                </div>
                <div class="modal-footer">
                    <button id="btnReceivingReceiptStatusPickAmountContinue" class="btn btn-primary" onclick="btnReceivingReceiptStatusPickAmountContinueOnclick()"><i class="fa fa-arrow-right"></i> Continue</button>
                    <button id="btnReceivingReceiptStatusPickAmountCloseModal" class="btn btn-danger" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!--
        =============================================================
        AP: Confirm Apply Receiving Receipt Status Total Amount Modal
        =============================================================
    -->
    <div class="modal fade" id="receivingReceiptStatusApplyPickAmountModal" role="dialog">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Apply</h4>
                </div>
                <div class="modal-body">
                    Apply All Picked Amount?
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" id="btnReceivingReceiptStatusApplyPickAmount" onclick="btnReceivingReceiptStatusApplyPickAmountOnclick()"><i class="fa fa-check"></i> Apply</button>
                    <button class="btn btn-danger" id="btnReceivingReceiptStatusApplyPickAmountCloseModal" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <!--
        =================================
        Advances: Supplier Advances Modal
        =================================
    -->
    <div class="modal fade" id="supplierAdvancesModal" role="dialog">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Supplier Advances</h4>
                </div>
                <div class="modal-body">
                    <center>
                        <span id="supplierAdvancesLoading"></span>
                    </center>
                    <div id="supplierAdvancesContent">
                        <div class="panel panel-default">

                            <!--
                                ===============
                                Search / Filter
                                ===============
                            -->
                            <div class="panel-heading">
                                <div class="input-group  ">
                                    <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                    <input type="text" class="form-control" id="inpSupplierAdvancesSearchFilter" placeholder="Search">
                                </div>
                            </div>

                            <!--
                                =========
                                Flex Grid
                                =========
                            -->
                            <div class="panel-body">
                                <div id="supplierAdvancesFlexGrid"></div>
                            </div>

                            <!--
                                ====================
                                Navigation Page Grid
                                ====================
                            -->
                            <div class="panel-footer">
                                <div class="row">
                                    <div class="btn-group col-md-7" id="supplierAdvancesNavigationPageGrid">
                                        <button type="button" class="btn btn-default border-custom" id="btnSupplierAdvancesMoveToFirstPageGrid">
                                            <span class="glyphicon glyphicon-fast-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" id="btnSupplierAdvancesMoveToPreviousPageGrid">
                                            <span class="glyphicon glyphicon-step-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnSupplierAdvancesCurrentPageGrid"></button>
                                        <button type="button" class="btn btn-default border-custom" id="btnSupplierAdvancesMoveToNextPageGrid">
                                            <span class="glyphicon glyphicon-step-forward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" id="btnSupplierAdvancesMoveToLastPageGrid">
                                            <span class="glyphicon glyphicon-fast-forward"></span>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button id="btnSupplierAdvancesCloseModal" class="btn btn-danger" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!--
        ============================================================
        Advances: Confirm Apply Supplier Advances Total Amount Modal
        ============================================================
    -->
    <div class="modal fade" id="supplierAdvancesApplyModal" role="dialog">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Apply</h4>
                </div>
                <div class="modal-body">
                    Apply Advances?
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" id="btnSupplierAdvancesConfirmApply" onclick="btnSupplierAdvancesConfirmApplyOnclick()"><i class="fa fa-check"></i> Apply</button>
                    <button class="btn btn-danger" id="btnSupplierAdvancesConfirmApplyCloseModal" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>

    @Scripts.Render("~/Scripts/Software-js")
    <script type="text/javascript">
        // =========================================
        // Disbursement Detail Combo Data and Fields
        // =========================================
        var cboDisbursementDetailBranch = new wijmo.input.ComboBox('#cboDisbursementDetailBranch');
        var cboDisbursementDetailCVDate = new wijmo.input.InputDate('#cboDisbursementDetailCVDate');
        var cboDisbursementDetailSupplier = new wijmo.input.ComboBox('#cboDisbursementDetailSupplier');
        var cboDisbursementDetailPayType = new wijmo.input.ComboBox('#cboDisbursementDetailPayType');
        var cboDisbursementDetailBank = new wijmo.input.ComboBox('#cboDisbursementDetailBank');
        var cboDisbursementDetailCheckDate = new wijmo.input.InputDate('#cboDisbursementDetailCheckDate');
        var cboDisbursementDetailPreparedBy = new wijmo.input.ComboBox('#cboDisbursementDetailPreparedBy');
        var cboDisbursementDetailCheckedBy = new wijmo.input.ComboBox('#cboDisbursementDetailCheckedBy');
        var cboDisbursementDetailApprovedBy = new wijmo.input.ComboBox('#cboDisbursementDetailApprovedBy');
        var isLocked = false;

        // ====================================================================
        // Disbursement Lines Collection View, Flex Grid and Navigation Buttons
        // ====================================================================
        var disbursementLineCollectionView;
        var disbursementFlexGrid;
        var cboDisbursementLineDisplayNumberOfRows = new wijmo.input.ComboBox('#cboDisbursementLineDisplayNumberOfRows');
        var btnDisbursementLineMoveToFirstPageGrid = document.getElementById('btnDisbursementLineMoveToFirstPageGrid');
        var btnDisbursementLineMoveToPreviousPageGrid = document.getElementById('btnDisbursementLineMoveToPreviousPageGrid');
        var btnDisbursementLineMoveToNextPageGrid = document.getElementById('btnDisbursementLineMoveToNextPageGrid');
        var btnDisbursementLineMoveToLastPageGrid = document.getElementById('btnDisbursementLineMoveToLastPageGrid');
        var btnDisbursementLineCurrentPageGrid = document.getElementById('btnDisbursementLineCurrentPageGrid');

        // ========================================
        // Disbursement Lines Combo Data and Fields
        // ========================================
        var disbursementLineId = 0;
        var cboDisbursementLineBranch = new wijmo.input.ComboBox('#cboDisbursementLineBranch');
        var cboDisbursementLineAccountCode = new wijmo.input.ComboBox('#cboDisbursementLineAccountCode');
        var cboDisbursementLineAccount = new wijmo.input.ComboBox('#cboDisbursementLineAccount');
        var IsCboDisbursementLineAccountChanged = false;
        var cboDisbursementLineArticle = new wijmo.input.ComboBox('#cboDisbursementLineArticle');
        var cboDisbursementLineRRNumber = new wijmo.input.ComboBox('#cboDisbursementLineRRNumber');

        // =============================================
        // Journal Entries Collection View and Flex Grid
        // =============================================
        var journalCollectionView;
        var journalFlexGrid = new wijmo.grid.FlexGrid('#journalFlexGrid');

        // ===================================================================================
        // Receiving Receipt Status Filters, Collection View, Flex Grid and Navigation Buttons
        // ===================================================================================
        var cboReceivingReceiptStatusStartDateFilter = new wijmo.input.InputDate('#cboReceivingReceiptStatusStartDateFilter');
        var cboReceivingReceiptStatusEndDateFilter = new wijmo.input.InputDate('#cboReceivingReceiptStatusEndDateFilter');
        var isCboReceivingReceiptStatusStartDateFilterSelected = true;
        var isCboReceivingReceiptStatusEndDateFilterSelected = true;
        var receivingReceiptsSatatusCollectionView;
        var receivingReceiptStatusFlexGrid = new wijmo.grid.FlexGrid('#receivingReceiptStatusFlexGrid');
        var btnReceivingReceiptStatusMoveToFirstPageGrid = document.getElementById('btnReceivingReceiptStatusMoveToFirstPageGrid');
        var btnReceivingReceiptStatusMoveToPreviousPageGrid = document.getElementById('btnReceivingReceiptStatusMoveToPreviousPageGrid');
        var btnReceivingReceiptStatusMoveToNextPageGrid = document.getElementById('btnReceivingReceiptStatusMoveToNextPageGrid');
        var btnReceivingReceiptStatusMoveToLastPageGrid = document.getElementById('btnReceivingReceiptStatusMoveToLastPageGrid');
        var btnReceivingReceiptStatusCurrentPageGrid = document.getElementById('btnReceivingReceiptStatusCurrentPageGrid');
        var receivingReceiptStatusCurrentPageIndex = 0;
        var isBtnReceivingReceiptStatusClicked = false;

        // ===================================================================
        // Supplier Advances Collection View, Flex Grid and Navigation Buttons
        // ===================================================================
        var supplierAdvancesCollectionView;
        var supplierAdvancesFlexGrid = new wijmo.grid.FlexGrid('#supplierAdvancesFlexGrid');
        var btnSupplierAdvancesMoveToFirstPageGrid = document.getElementById('btnSupplierAdvancesMoveToFirstPageGrid');
        var btnSupplierAdvancesMoveToPreviousPageGrid = document.getElementById('btnSupplierAdvancesMoveToPreviousPageGrid');
        var btnSupplierAdvancesMoveToNextPageGrid = document.getElementById('btnSupplierAdvancesMoveToNextPageGrid');
        var btnSupplierAdvancesMoveToLastPageGrid = document.getElementById('btnSupplierAdvancesMoveToLastPageGrid');
        var btnSupplierAdvancesCurrentPageGrid = document.getElementById('btnSupplierAdvancesCurrentPageGrid');
        var isSupplierAdvancesClicked = false;

        // =======================
        // Get URL Parameter Value
        // =======================
        function getURLParameterValue(name) {
            name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");

            var regexS = "[\\?&]" + name + "=([^&#]*)";
            var regex = new RegExp(regexS);

            var results = regex.exec(window.location.href);
            if (results == null) {
                return "";
            } else{
                return results[1];
            }
        }

        // =======================================
        // Create Disbursement Detail Combo Branch
        // =======================================
        function createCboDisbursementDetailBranch() {
            NProgress.start();
            var branchesObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/disbursement/dropdown/list/branch',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            branchesObservableArray.push({
                                Id: results[i]["Id"],
                                Branch: results[i]["Branch"]
                            });
                        }
                    }

                    cboDisbursementDetailBranch.dispose();
                    cboDisbursementDetailBranch = new wijmo.input.ComboBox('#cboDisbursementDetailBranch', {
                        disabled: true,
                        isEditable: false,
                        placeholder: "Select Branch",
                        itemsSource: branchesObservableArray,
                        displayMemberPath: "Branch",
                        selectedValuePath: "Id"
                    });

                    createCboDisbursementDetailSupplier();
                }
            });
        }

        // =========================================
        // Create Disbursement Detail Combo Supplier
        // =========================================
        function createCboDisbursementDetailSupplier() {
            var suppliersObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/disbursement/dropdown/list/supplier',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            suppliersObservableArray.push({
                                Id: results[i]["Id"],
                                Supplier: results[i]["Article"]
                            });
                        }
                    }

                    cboDisbursementDetailSupplier.dispose();
                    cboDisbursementDetailSupplier = new wijmo.input.ComboBox('#cboDisbursementDetailSupplier', {
                        isEditable: false,
                        placeholder: "Select Supplier",
                        itemsSource: suppliersObservableArray,
                        displayMemberPath: "Supplier",
                        selectedValuePath: "Id",
                        onSelectedIndexChanged: function () {
                            document.getElementById("inpDisbursementDetailPayee").value = this.selectedItem["Supplier"];
                        }
                    });

                    createCboDisbursementDetailPayType();
                }
            });
        }

        // =========================================
        // Create Disbursement Detail Combo Pay Type
        // =========================================
        function createCboDisbursementDetailPayType() {
            var payTypesObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/disbursement/dropdown/list/payType',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            payTypesObservableArray.push({
                                Id: results[i]["Id"],
                                PayType: results[i]["PayType"]
                            });
                        }
                    }

                    cboDisbursementDetailPayType.dispose();
                    cboDisbursementDetailPayType = new wijmo.input.ComboBox('#cboDisbursementDetailPayType', {
                        isEditable: false,
                        placeholder: "Select Pay Type",
                        itemsSource: payTypesObservableArray,
                        displayMemberPath: "PayType",
                        selectedValuePath: "Id"
                    });

                    createCboDisbursementDetailBank();
                }
            });
        }

        // =====================================
        // Create Disbursement Detail Combo Bank
        // =====================================
        function createCboDisbursementDetailBank() {
            var banksObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/disbursement/dropdown/list/bank',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            banksObservableArray.push({
                                Id: results[i]["Id"],
                                Bank: results[i]["Article"]
                            });
                        }
                    }

                    cboDisbursementDetailBank.dispose();
                    cboDisbursementDetailBank = new wijmo.input.ComboBox('#cboDisbursementDetailBank', {
                        isEditable: false,
                        placeholder: "Select Bank",
                        itemsSource: banksObservableArray,
                        displayMemberPath: "Bank",
                        selectedValuePath: "Id"
                    });

                    createCboDisbursementDetailUser();
                }
            });
        }

        // =====================================
        // Create Disbursement Detail Combo User
        // =====================================
        function createCboDisbursementDetailUser() {
            var usersObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/disbursement/dropdown/list/users',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            usersObservableArray.push({
                                Id: results[i]["Id"],
                                FullName: results[i]["FullName"]
                            });
                        }
                    }

                    cboDisbursementDetailPreparedBy.dispose();
                    cboDisbursementDetailPreparedBy = new wijmo.input.ComboBox('#cboDisbursementDetailPreparedBy', {
                        disabled: true,
                        isEditable: false,
                        placeholder: "Select User",
                        itemsSource: usersObservableArray,
                        displayMemberPath: "FullName",
                        selectedValuePath: "Id"
                    });

                    cboDisbursementDetailCheckedBy.dispose();
                    cboDisbursementDetailCheckedBy = new wijmo.input.ComboBox('#cboDisbursementDetailCheckedBy', {
                        isEditable: false,
                        placeholder: "Select User",
                        itemsSource: usersObservableArray,
                        displayMemberPath: "FullName",
                        selectedValuePath: "Id"
                    });

                    cboDisbursementDetailApprovedBy.dispose();
                    cboDisbursementDetailApprovedBy = new wijmo.input.ComboBox('#cboDisbursementDetailApprovedBy', {
                        isEditable: false,
                        placeholder: "Select User",
                        itemsSource: usersObservableArray,
                        displayMemberPath: "FullName",
                        selectedValuePath: "Id"
                    });

                    getDisbursementDetailData();
                }
            });
        }

        // ============================
        // Get Disbursement Detail Data
        // ============================
        function getDisbursementDetailData() {
            if (document.location.search.length > 0) {
                var id = getURLParameterValue("id");
                $.ajax({
                    url: '/api/disbursement/detail/' + id,
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    success: function (results) {
                        if (results != null) {
                            cboDisbursementDetailBranch.selectedValue = results.BranchId;
                            document.getElementById('inpDisbursementDetailCVNumber').value = results.CVNumber;
                            cboDisbursementDetailCVDate.dispose();
                            cboDisbursementDetailCVDate = new wijmo.input.InputDate('#cboDisbursementDetailCVDate', {
                                format: 'MM-dd-yyyy',
                                value: new Date(results.CVDate)
                            });
                            document.getElementById('inpDisbursementDetailManualCVNumber').value = results.ManualCVNumber;
                            cboDisbursementDetailSupplier.selectedValue = results.SupplierId;
                            document.getElementById('inpDisbursementDetailPayee').value = results.Payee;
                            cboDisbursementDetailPayType.selectedValue = results.PayTypeId;
                            document.getElementById('inpDisbursementDetailParticulars').value = results.Particulars;
                            cboDisbursementDetailBank.selectedValue = results.BankId;
                            document.getElementById('inpDisbursementDetailCheckNumber').value = results.CheckNumber;
                            cboDisbursementDetailCheckDate.dispose();
                            cboDisbursementDetailCheckDate = new wijmo.input.InputDate('#cboDisbursementDetailCheckDate', {
                                format: 'MM-dd-yyyy',
                                value: new Date(results.CheckDate)
                            });
                            document.getElementById('cboDisbursementDetailAmount').value = formatDecimalValues(results.Amount);
                            document.getElementById('inpDisbursementDetailIsCrossCheck').checked = results.IsCrossCheck;
                            cboDisbursementDetailPreparedBy.selectedValue = results.PreparedById;
                            cboDisbursementDetailCheckedBy.selectedValue = results.CheckedById;
                            cboDisbursementDetailApprovedBy.selectedValue = results.ApprovedById;
                            document.getElementById('inpDisbursementDetailIsClear').checked = results.IsClear;
                            document.getElementById('createdBy').innerHTML = results.CreatedBy;
                            document.getElementById('createdDate').innerHTML = results.CreatedDateTime;
                            document.getElementById('updatedBy').innerHTML = results.UpdatedBy;
                            document.getElementById('updatedDate').innerHTML = results.UpdatedDateTime;

                            if (results.IsLocked) {
                                cboDisbursementDetailCVDate.disabled = true;
                                document.getElementById('inpDisbursementDetailManualCVNumber').disabled = true;
                                cboDisbursementDetailSupplier.disabled = true;
                                document.getElementById('inpDisbursementDetailPayee').disabled = true;
                                cboDisbursementDetailPayType.disabled = true;
                                document.getElementById('inpDisbursementDetailParticulars').disabled = true;
                                cboDisbursementDetailBank.disabled = true;
                                document.getElementById('inpDisbursementDetailCheckNumber').disabled = true;
                                cboDisbursementDetailCheckDate.disabled = true;
                                document.getElementById('inpDisbursementDetailIsCrossCheck').disabled = true;
                                cboDisbursementDetailPreparedBy.disabled = true;
                                cboDisbursementDetailCheckedBy.disabled = true;
                                cboDisbursementDetailApprovedBy.disabled = true;
                                document.getElementById('inpDisbursementDetailIsClear').disabled = true;

                                $("#btnDisbursementDetailLock").prop("disabled", true);
                                $("#btnDisbursementDetailAP").prop("disabled", true);
                                $("#btnDisbursementDetailAdvances").prop("disabled", true);
                                $("#btnDisbursementLineAdd").prop("disabled", true);

                                isLocked = true;
                            } else {
                                $("#btnDisbursementDetailJournal").prop("disabled", true);
                                $("#btnDisbursementDetailUnlock").prop("disabled", true);
                                $("#btnDisbursementDetailPrint").prop("disabled", true);
                            }

                            createCboDisplayNumberOfRows();
                            createDisbursementLineFlexGrid();
                        } else {
                            alert("No Data");
                            window.location = "/Software/Disbursement";
                        }
                    }
                });
            } else {
                alert("No Id Parameter Value");
                window.location = "/Software/Disbursement";
            }
        }

        // =================
        // Lock Disbursement
        // =================
        function btnDisbursementDetailLockOnclick() {
            var disbursementObject = new Object();
            disbursementObject.CVDate = cboDisbursementDetailCVDate.value.toLocaleDateString();
            disbursementObject.SupplierId = cboDisbursementDetailSupplier.selectedValue;
            disbursementObject.Payee = document.getElementById('inpDisbursementDetailPayee').value;
            disbursementObject.PayTypeId = cboDisbursementDetailPayType.selectedValue;
            disbursementObject.BankId = cboDisbursementDetailBank.selectedValue;
            disbursementObject.ManualCVNumber = document.getElementById('inpDisbursementDetailManualCVNumber').value;
            disbursementObject.Particulars = document.getElementById('inpDisbursementDetailParticulars').value;
            disbursementObject.CheckNumber = document.getElementById('inpDisbursementDetailCheckNumber').value;
            disbursementObject.CheckDate = cboDisbursementDetailCheckDate.value.toLocaleDateString();
            disbursementObject.IsCrossCheck = document.getElementById('inpDisbursementDetailIsCrossCheck').checked;
            disbursementObject.CheckedById = cboDisbursementDetailCheckedBy.selectedValue;
            disbursementObject.ApprovedById = cboDisbursementDetailApprovedBy.selectedValue;
            disbursementObject.IsClear = document.getElementById('inpDisbursementDetailIsClear').checked;
            var data = JSON.stringify(disbursementObject);

            var isValid = true;
            $('.requiredDisbursement').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                } else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            if (isValid) {
                document.getElementById('btnDisbursementDetailLock').innerHTML = "<i class='fa fa-lock'></i> Locking...";
                $("#btnDisbursementDetailJournal").prop("disabled", true);
                $("#btnDisbursementDetailLock").prop("disabled", true);
                $("#btnDisbursementDetailUnlock").prop("disabled", true);
                $("#btnDisbursementDetailPrint").prop("disabled", true);
                $("#btnDisbursementDetailClose").prop("disabled", true);

                var id = getURLParameterValue('id');

                $.ajax({
                    type: "PUT",
                    url: '/api/disbursement/lock/' + id,
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    data: data,
                    statusCode: {
                        200: function () {
                            toastr.success("Lock Successful");
                            window.setTimeout(function () {
                                location.reload()
                            }, 1000);
                        },
                        404: function (message) {
                            toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                            document.getElementById('btnDisbursementDetailLock').innerHTML = "<i class='fa fa-lock'></i> Lock";
                            $("#btnDisbursementDetailLock").prop("disabled", false);
                            $("#btnDisbursementDetailClose").prop("disabled", true);
                        },
                        400: function (message) {
                            toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                            document.getElementById('btnDisbursementDetailLock').innerHTML = "<i class='fa fa-lock'></i> Lock";
                            $("#btnDisbursementDetailLock").prop("disabled", false);
                            $("#btnDisbursementDetailClose").prop("disabled", true);
                        },
                        500: function (message) {
                            toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                            document.getElementById('btnDisbursementDetailLock').innerHTML = "<i class='fa fa-lock'></i> Lock";
                            $("#btnDisbursementDetailLock").prop("disabled", false);
                            $("#btnDisbursementDetailClose").prop("disabled", true);
                        }
                    },
                });
            } else {
                toastr.error("Invalid Entry");
            }
        }

        // ==================
        // Unlock Disbursment
        // ==================
        function btnDisbursementDetailUnlockOnclick() {
            document.getElementById('btnDisbursementDetailUnlock').innerHTML = "<i class='fa fa-unlock'></i> Unlocking...";
            $("#btnDisbursementDetailJournal").prop("disabled", true);
            $("#btnDisbursementDetailLock").prop("disabled", true);
            $("#btnDisbursementDetailUnlock").prop("disabled", true);
            $("#btnDisbursementDetailPrint").prop("disabled", true);
            $("#btnDisbursementDetailClose").prop("disabled", true);

            var id = getURLParameterValue("id");

            $.ajax({
                type: "PUT",
                url: '/api/disbursement/unlock/' + id,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Unlock Successful");
                        window.setTimeout(function () {
                            location.reload()
                        }, 1000);
                    },
                    404: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                        document.getElementById('btnDisbursementDetailUnlock').innerHTML = "<i class='fa fa-unlock'></i> Unlock";
                        $("#btnDisbursementDetailJournal").prop("disabled", false);
                        $("#btnDisbursementDetailUnlock").prop("disabled", false);
                        $("#btnDisbursementDetailPrint").prop("disabled", false);
                        $("#btnDisbursementDetailClose").prop("disabled", false);
                    },
                    400: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                        document.getElementById('btnDisbursementDetailUnlock').innerHTML = "<i class='fa fa-unlock'></i> Unlock";
                        $("#btnDisbursementDetailJournal").prop("disabled", false);
                        $("#btnDisbursementDetailUnlock").prop("disabled", false);
                        $("#btnDisbursementDetailPrint").prop("disabled", false);
                        $("#btnDisbursementDetailClose").prop("disabled", false);
                    },
                    500: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                        document.getElementById('btnDisbursementDetailUnlock').innerHTML = "<i class='fa fa-unlock'></i> Unlock";
                        $("#btnDisbursementDetailJournal").prop("disabled", false);
                        $("#btnDisbursementDetailUnlock").prop("disabled", false);
                        $("#btnDisbursementDetailPrint").prop("disabled", false);
                        $("#btnDisbursementDetailClose").prop("disabled", false);
                    }
                }
            });
        }

        // ================================
        // Print Disbursment (Cash Voucher)
        // ================================
        function btnDisbursementDetailPrintOnclick() {
            var disbursementId = getURLParameterValue("id");
            var pirntLink = "/RepDisbursement/Disbursement?DisbursementId=" + disbursementId;
            window.open(pirntLink, '_blank');
        }

        // ==========================
        // Get Disbursement Line Data
        // ==========================
        function getDisbursementLineData() {
            var disbursementLineObservableArray = new wijmo.collections.ObservableArray;
            if (document.location.search.length > 0) {
                var CVId = getURLParameterValue("id");

                $.ajax({
                    url: '/api/disbursementLine/list/' + CVId,
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    success: function (results) {
                        var totalAmount = 0;
                        if (results.length > 0) {
                            var btnEditId = "<button class='btn btn-primary btn-xs btn-block' onclick='btnDisbursementLineEditOnclick()'><i class='fa fa-edit'></i> Edit</button>";
                            var btnDeleteId = "<button class='btn btn-danger btn-xs btn-block' onclick='btnDisbursementLineDeleteOnclick()'><i class='fa fa-trash'></i> Delete</button>";
                            if (isLocked) {
                                btnEditId = "<button class='btn btn-primary btn-xs btn-block' onclick='btnDisbursementLineEditOnclick()' disabled><i class='fa fa-edit'></i> Edit</button>";
                                btnDeleteId =  "<button class='btn btn-danger btn-xs btn-block' onclick='btnDisbursementLineDeleteOnclick()' disabled><i class='fa fa-trash'></i> Delete</button>";
                            }

                            for (i = 0; i < results.length; i++) {
                                disbursementLineObservableArray.push({
                                    EditId: btnEditId,
                                    DeleteId: btnDeleteId,
                                    Id: results[i]["Id"],
                                    CVId: results[i]["CVId"],
                                    BranchId: results[i]["BranchId"],
                                    Branch: results[i]["Branch"],
                                    AccountId: results[i]["AccountId"],
                                    Account: results[i]["Account"],
                                    ArticleId: results[i]["ArticleId"],
                                    Article: results[i]["Article"],
                                    RRId: results[i]["RRId"],
                                    RRNumber: results[i]["RRNumber"],
                                    Particulars: results[i]["Particulars"],
                                    Amount: results[i]["Amount"],
                                    AmountDisplay: parseFloat(results[i]["Amount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                });

                                totalAmount += results[i]["Amount"];
                            }
                        }

                        document.getElementById('inpDisbursementLineTotalAmount').value = parseFloat(totalAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        document.getElementById('cboDisbursementDetailAmount').value = parseFloat(totalAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        NProgress.done();
                    }
                });
            }

            return disbursementLineObservableArray;
        }

        // ==========================
        // Disbursment Line Flex Grid
        // ==========================
        function createDisbursementLineFlexGrid() {
            disbursementLineCollectionView = new wijmo.collections.CollectionView(getDisbursementLineData());
            disbursementLineCollectionView.canFilter = true;
            disbursementLineCollectionView.pageSize = cboDisbursementLineDisplayNumberOfRows.selectedValue;

            var filterText = '';
            $('#inpDisbursementLineSearchFilter').keyup(function () {
                filterText = this.value.toLowerCase();
                disbursementLineCollectionView.refresh();
            });

            disbursementLineCollectionView.filter = function (item) {
                return !filterText || (item.Branch.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Account.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Article.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Particulars.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.RRNumber.toLowerCase().indexOf(filterText) > -1);
            }

            disbursementLineCollectionView.collectionChanged.addHandler(function (sender, args) {
                updateDisbursementLineNavigationButtons();
            });

            disbursementFlexGrid = new wijmo.grid.FlexGrid('#disbursementLineFlexGrid');
            disbursementFlexGrid.initialize({
                columns: [
                    @{
                        if (canEdit)
                        {
                            <text>
                                {
                                    "header": "Edit",
                                    "binding": "EditId",
                                    "width": 70,
                                    "align": "center",
                                    "allowResizing": false,
                                    "allowSorting": false,
                                    "isContentHtml": true
                                },
                            </text>
                        }
                        if (canDelete)
                        {
                            <text>
                                {
                                    "header": "Delete",
                                    "binding": "DeleteId",
                                    "width": 70,
                                    "align": "center",
                                    "allowResizing": false,
                                    "allowSorting": false,
                                    "isContentHtml": true
                                },
                            </text>
                        }
                    }
                    {
                        "header": "Branch",
                        "binding": "Branch",
                        "allowSorting": true,
                        "width": "2*"
                    },
                    {
                        "header": "Account",
                        "binding": "Account",
                        "allowSorting": true,
                        "width": "3*"
                    },
                    {
                        "header": "Article",
                        "binding": "Article",
                        "allowSorting": true,
                        "width": "3*"
                    },
                    {
                        "header": "Particulars",
                        "binding": "Particulars",
                        "allowSorting": true,
                        "width": "3*"
                    },
                    {
                        "header": "RR No.",
                        "binding": "RRNumber",
                        "allowSorting": true,
                        "width": "2*"
                    },
                    {
                        "header": "Amount",
                        "binding": "AmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": "2*"
                    }
                ],
                autoGenerateColumns: false,
                itemsSource: disbursementLineCollectionView,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            disbursementFlexGrid.trackChanges = true;

            updateDisbursementLineNavigationButtons();

            btnDisbursementLineMoveToFirstPageGrid.addEventListener('click', function () {
                disbursementLineCollectionView.moveToFirstPage();
                updateDisbursementLineNavigationButtons();
            });

            btnDisbursementLineMoveToPreviousPageGrid.addEventListener('click', function () {
                disbursementLineCollectionView.moveToPreviousPage();
                updateDisbursementLineNavigationButtons();
            });

            btnDisbursementLineMoveToNextPageGrid.addEventListener('click', function () {
                disbursementLineCollectionView.moveToNextPage();
                updateDisbursementLineNavigationButtons();
            });

            btnDisbursementLineMoveToLastPageGrid.addEventListener('click', function () {
                disbursementLineCollectionView.moveToLastPage();
                updateDisbursementLineNavigationButtons();
            });
        }

        // ===========================================
        // Update Disbursement Line Navigation Buttons
        // ===========================================
        function updateDisbursementLineNavigationButtons() {
            if (disbursementLineCollectionView.pageSize <= 0) {
                document.getElementById('disbursementLineNavigationPageGrid').style.display = 'none';
                return;
            }
            document.getElementById('disbursementLineNavigationPageGrid').style.display = 'block';
            if (disbursementLineCollectionView.pageIndex === 0) {
                btnDisbursementLineMoveToFirstPageGrid.setAttribute('disabled', 'disabled');
                btnDisbursementLineMoveToPreviousPageGrid.setAttribute('disabled', 'disabled');
                btnDisbursementLineMoveToNextPageGrid.removeAttribute('disabled');
                btnDisbursementLineMoveToLastPageGrid.removeAttribute('disabled');
            } else if (disbursementLineCollectionView.pageIndex === (disbursementLineCollectionView.pageCount - 1)) {
                btnDisbursementLineMoveToFirstPageGrid.removeAttribute('disabled');
                btnDisbursementLineMoveToPreviousPageGrid.removeAttribute('disabled');
                btnDisbursementLineMoveToLastPageGrid.setAttribute('disabled', 'disabled');
                btnDisbursementLineMoveToNextPageGrid.setAttribute('disabled', 'disabled');
            } else {
                btnDisbursementLineMoveToFirstPageGrid.removeAttribute('disabled');
                btnDisbursementLineMoveToPreviousPageGrid.removeAttribute('disabled');
                btnDisbursementLineMoveToNextPageGrid.removeAttribute('disabled');
                btnDisbursementLineMoveToLastPageGrid.removeAttribute('disabled');
            }
            btnDisbursementLineCurrentPageGrid.innerHTML = (disbursementLineCollectionView.pageIndex + 1) + ' / ' + disbursementLineCollectionView.pageCount;
        }

        // ===================================
        // Create Combo Display Number of Rows
        // ===================================
        function createCboDisplayNumberOfRows() {
            var rowsObservableArray = new wijmo.collections.ObservableArray();

            for (var i = 0; i <= 4; i++) {
                var rows = 0;
                var rowsString = "";

                if (i == 0) {
                    rows = 15;
                    rowsString = "Show 15 Rows";
                } else if (i == 1) {
                    rows = 50;
                    rowsString = "Show 50 Rows";
                } else if (i == 2) {
                    rows = 100;
                    rowsString = "Show 100 Rows";
                } else if (i == 3) {
                    rows = 150;
                    rowsString = "Show 150 Rows";
                } else {
                    rows = 200;
                    rowsString = "Show 200 Rows";
                }

                rowsObservableArray.push({
                    rowNumber: rows,
                    rowString: rowsString
                });
            }

            cboDisbursementLineDisplayNumberOfRows.dispose();
            cboDisbursementLineDisplayNumberOfRows = new wijmo.input.ComboBox('#cboDisbursementLineDisplayNumberOfRows', {
                isEditable: false,
                itemsSource: rowsObservableArray,
                displayMemberPath: "rowString",
                selectedValuePath: "rowNumber",
                selectedValue: 50,
                onSelectedIndexChanged: function () {
                    NProgress.start();

                    setTimeout(function () {
                        var numberOfRows = cboDisbursementLineDisplayNumberOfRows.selectedValue;
                        disbursementLineCollectionView.pageSize = parseInt(numberOfRows);
                        disbursementLineCollectionView.refresh();
                        disbursementFlexGrid.refresh();

                        NProgress.done();
                    }, 300);
                }
            });
        }

        // =================================
        // Refresh Disbursment Line FlexGrid
        // =================================
        function refreshDisbursementLineFlexGrid() {
            disbursementLineCollectionView = new wijmo.collections.CollectionView(getDisbursementLineData());
            disbursementLineCollectionView.canFilter = true;
            disbursementLineCollectionView.pageSize = cboDisbursementLineDisplayNumberOfRows.selectedValue;

            var filterText = '';
            $('#inpDisbursementLineSearchFilter').keyup(function () {
                filterText = this.value.toLowerCase();
                disbursementLineCollectionView.refresh();
            });

            disbursementLineCollectionView.filter = function (item) {
                return !filterText || (item.Branch.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Account.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Article.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Particulars.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.RRNumber.toLowerCase().indexOf(filterText) > -1);
            }

            disbursementLineCollectionView.collectionChanged.addHandler(function (sender, args) {
                updateDisbursementLineNavigationButtons();
            });

            disbursementFlexGrid.itemsSource = disbursementLineCollectionView;
            disbursementFlexGrid.trackChanges = true;
        }

        // =====================================
        // Create Disbursement Line Combo Branch
        // =====================================
        function createDisbursementLineCboBranch(branchId, accountId, articleId, RRId) {
            var disbursementLineBranchesObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/disbursementLine/dropdown/list/branch',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            disbursementLineBranchesObservableArray.push({
                                Id: results[i]["Id"],
                                Branch: results[i]["Branch"]
                            });
                        }
                    }

                    var disabled = true;
                    if (results.length > 0) {
                        disabled = false;
                        $("#btnDisbursementLineSave").prop("disabled", false);
                    } else {
                        $("#btnDisbursementLineSave").prop("disabled", true);
                    }

                    cboDisbursementLineBranch.dispose();
                    cboDisbursementLineBranch = new wijmo.input.ComboBox('#cboDisbursementLineBranch', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: disbursementLineBranchesObservableArray,
                        displayMemberPath: "Branch",
                        selectedValuePath: "Id",
                        selectedValue: branchId
                    });

                    createCboDisbursementLineAccount(accountId, articleId, RRId)
                }
            });
        }

        // ======================================
        // Create Disbursement Line Combo Account
        // ======================================
        function createCboDisbursementLineAccount(accountId, articleId, RRId) {
            var disbursementLineAccountsObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/disbursementLine/dropdown/list/account',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            disbursementLineAccountsObservableArray.push({
                                Id: results[i]["Id"],
                                AccountCode: results[i]["AccountCode"],
                                Account: results[i]["Account"]
                            });
                        }
                    }

                    var disabled = true;
                    if (results.length > 0) {
                        disabled = false;
                    } else {
                        $("#btnDisbursementLineSave").prop("disabled", true);
                    }

                    cboDisbursementLineAccountCode.dispose();
                    cboDisbursementLineAccountCode = new wijmo.input.ComboBox('#cboDisbursementLineAccountCode', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: disbursementLineAccountsObservableArray,
                        displayMemberPath: "AccountCode",
                        selectedValuePath: "Id",
                        selectedValue: accountId,
                        onSelectedIndexChanged: function () {
                            cboDisbursementLineAccount.selectedValue = this.selectedValue;
                        }
                    });

                    cboDisbursementLineAccount.dispose();
                    cboDisbursementLineAccount = new wijmo.input.ComboBox('#cboDisbursementLineAccount', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: disbursementLineAccountsObservableArray,
                        displayMemberPath: "Account",
                        selectedValuePath: "Id",
                        selectedValue: accountId,
                        onSelectedIndexChanged: function () {
                            cboDisbursementLineAccountCode.selectedValue = this.selectedValue;
                            cboDisbursementLineArticle.disabled = true;
                            IsCboDisbursementLineAccountChanged = true;
                            createCboDisbursementLineArticle(articleId, RRId);
                        }
                    });

                    createCboDisbursementLineArticle(articleId, RRId);
                }
            });
        }

        // ======================================
        // Create Disbursement Line Combo Article
        // ======================================
        function createCboDisbursementLineArticle(articleId, RRId) {
            var disbursementLineArticlesObservableArray = new wijmo.collections.ObservableArray();
            if (cboDisbursementLineAccount.selectedValue != null) {
                $.ajax({
                    url: '/api/disbursementLine/dropdown/list/article/' + cboDisbursementLineAccount.selectedValue,
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    success: function (results) {
                        if (results.length > 0) {
                            for (i = 0; i < results.length; i++) {
                                disbursementLineArticlesObservableArray.push({
                                    Id: results[i]["Id"],
                                    Article: results[i]["Article"]
                                });
                            }
                        }

                        var disabled = true;
                        if (results.length > 0) {
                            disabled = false;
                            $("#btnDisbursementLineSave").prop("disabled", false);
                        } else {
                            $("#btnDisbursementLineSave").prop("disabled", true);
                        }

                        cboDisbursementLineArticle.dispose();
                        cboDisbursementLineArticle = new wijmo.input.ComboBox('#cboDisbursementLineArticle', {
                            disabled: disabled,
                            isEditable: false,
                            itemsSource: disbursementLineArticlesObservableArray,
                            displayMemberPath: "Article",
                            selectedValuePath: "Id",
                            selectedValue: articleId
                        });

                        if (!IsCboDisbursementLineAccountChanged) {
                            createCboDisbursementLineRRNumber(RRId);
                        }
                    }
                });
            } else {
                cboDisbursementLineArticle.dispose();
                cboDisbursementLineArticle = new wijmo.input.ComboBox('#cboDisbursementLineArticle', {
                    disabled: true,
                    isEditable: false,
                    itemsSource: disbursementLineArticlesObservableArray
                });

                if (!IsCboDisbursementLineAccountChanged) {
                    createCboDisbursementLineRRNumber(RRId);
                }
            }
        }

        // ========================================
        // Create Disbursement Line Combo RR Number
        // ========================================
        function createCboDisbursementLineRRNumber(RRId) {
            var disbursementLineReceivingReceiptsObservableArray = new wijmo.collections.ObservableArray();
            var supplierId = cboDisbursementDetailSupplier.selectedValue;
            $.ajax({
                url: '/api/disbursementLine/dropdown/list/receivingReceipt/' + supplierId,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            disbursementLineReceivingReceiptsObservableArray.push({
                                Id: results[i]["Id"],
                                RRNumber: results[i]["RRNumber"],
                                RRDate: results[i]["RRDate"],
                                RRDetails: results[i]["RRNumber"] + " (" + (results[i]["RRDate"]).replace(/\//g, '-') + ")",
                                BalanceAmount: results[i]["BalanceAmount"],
                            });
                        }
                    }

                    var disabled = true;
                    if (results.length > 0) {
                        disabled = false;
                    }

                    cboDisbursementLineRRNumber.dispose();
                    cboDisbursementLineRRNumber = new wijmo.input.ComboBox('#cboDisbursementLineRRNumber', {
                        disabled: disabled,
                        required: false,
                        isEditable: false,
                        itemsSource: disbursementLineReceivingReceiptsObservableArray,
                        displayMemberPath: "RRDetails",
                        selectedValuePath: "Id",
                        selectedValue: RRId,
                        onSelectedIndexChanged: function () {
                            if (this.selectedValue != null) {
                                document.getElementById("inpDisbursementLineAmount").value = formatDecimalValues(this.selectedItem["BalanceAmount"]);
                            } else {
                                document.getElementById("inpDisbursementLineAmount").value = formatDecimalValues(0);
                            }
                        }
                    });

                    if (disbursementLineId == 0) {
                        if (cboDisbursementLineRRNumber.selectedValue != null) {
                            document.getElementById("inpDisbursementLineAmount").value = formatDecimalValues(cboDisbursementLineRRNumber.selectedItem["BalanceAmount"]);
                        } else {
                            document.getElementById("inpDisbursementLineAmount").value = formatDecimalValues(0);
                        }
                    }

                    $("#disbursementLineLoading").hide();
                    $("#disbursementLineDetailForm").show();
                }
            });
        }

        // =====================
        // Add Disbursement Line
        // =====================
        function btnDisbursementLineAddOnclick() {
            $('#disbursementLineDetailModal').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById('disbursementLineModalTitle').innerHTML = "Add Disbursement Line";
            $("#disbursementLineLoading").show();
            document.getElementById("disbursementLineLoading").innerHTML = 'Loading...';
            $("#disbursementLineDetailForm").hide();

            document.getElementById('btnDisbursementLineSave').innerHTML = "<i class='fa fa-save'></i> Save";
            $("#btnDisbursementLineSave").prop("disabled", true);
            $("#btnDisbursementLineCloseDetailModal").prop("disabled", false);

            $('.requiredDisbursementLine').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            IsCboDisbursementLineAccountChanged = false;
            disbursementLineId = 0;

            var cboDisbursementDetailBranchId = cboDisbursementDetailBranch.selectedValue;
            createDisbursementLineCboBranch(cboDisbursementDetailBranchId, 0, 0, 0);
            var headerParticulars = document.getElementById("inpDisbursementDetailParticulars").value;
            document.getElementById('inpDisbursementLineParticulars').value = headerParticulars;
        }

        // ======================
        // Edit Disbursement Line
        // ======================
        function btnDisbursementLineEditOnclick() {
            $('#disbursementLineDetailModal').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById('disbursementLineModalTitle').innerHTML = "Edit Disbursement Line";
            $("#disbursementLineLoading").show();
            document.getElementById("disbursementLineLoading").innerHTML = 'Loading...';
            $("#disbursementLineDetailForm").hide();

            document.getElementById('btnDisbursementLineSave').innerHTML = "<i class='fa fa-save'></i> Save";
            $("#btnDisbursementLineSave").prop("disabled", true);
            $("#btnDisbursementLineCloseDetailModal").prop("disabled", false);

            $('.requiredDisbursementLine').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            IsCboDisbursementLineAccountChanged = false;
            disbursementLineCollectionView.editItem(disbursementLineCollectionView.currentItem);
            var disbursementLine = disbursementLineCollectionView.currentEditItem;
            disbursementLineId = disbursementLine.Id;
            createDisbursementLineCboBranch(disbursementLine.BranchId, disbursementLine.AccountId, disbursementLine.ArticleId, disbursementLine.RRId);
            document.getElementById('inpDisbursementLineParticulars').value = disbursementLine.Particulars;
            document.getElementById('inpDisbursementLineAmount').value = formatDecimalValues(disbursementLine.Amount);
        }

        // ======================
        // Save Disbursement Line
        // ======================
        function btnDisbursementLineSaveOnclick() {
            var disbursementLineObject = new Object();
            disbursementLineObject.BranchId = cboDisbursementLineBranch.selectedValue;
            disbursementLineObject.AccountId = cboDisbursementLineAccount.selectedValue;
            disbursementLineObject.ArticleId = cboDisbursementLineArticle.selectedValue;
            disbursementLineObject.RRId = cboDisbursementLineRRNumber.selectedValue;
            disbursementLineObject.Particulars = document.getElementById('inpDisbursementLineParticulars').value;
            disbursementLineObject.Amount = document.getElementById('inpDisbursementLineAmount').value;
            var disbursementLineData = JSON.stringify(disbursementLineObject);

            var isValid = true;
            $('.requiredDisbursementLine').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                } else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            if (isValid) {
                document.getElementById('btnDisbursementLineSave').innerHTML = "<i class='fa fa-save'></i> Saving...";
                $("#btnDisbursementLineSave").prop("disabled", true);
                $("#btnDisbursementLineCloseDetailModal").prop("disabled", true);

                var CVId = getURLParameterValue("id");

                if (disbursementLineId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/disbursementLine/add/' + CVId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: disbursementLineData,
                        statusCode: {
                            200: function () {
                                toastr.success("Save Successful");
                                $('#disbursementLineDetailModal').modal('hide');
                                refreshDisbursementLineFlexGrid();
                            },
                            404: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                                $('#disbursementLineDetailModal').modal('hide');
                                document.getElementById('btnDisbursementLineSave').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#btnDisbursementLineSave").prop("disabled", false);
                                $("#btnDisbursementLineCloseDetailModal").prop("disabled", false);
                            },
                            400: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                                $('#disbursementLineDetailModal').modal('hide');
                                document.getElementById('btnDisbursementLineSave').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#btnDisbursementLineSave").prop("disabled", false);
                                $("#btnDisbursementLineCloseDetailModal").prop("disabled", false);
                            },
                            500: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                                $('#disbursementLineDetailModal').modal('hide');
                                document.getElementById('btnDisbursementLineSave').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#btnDisbursementLineSave").prop("disabled", false);
                                $("#btnDisbursementLineCloseDetailModal").prop("disabled", false);
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/disbursementLine/update/' + disbursementLineId + '/' + CVId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: disbursementLineData,
                        statusCode: {
                            200: function () {
                                toastr.success("Update Successful");
                                $('#disbursementLineDetailModal').modal('hide');
                                refreshDisbursementLineFlexGrid();
                            },
                            404: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                                $('#disbursementLineDetailModal').modal('hide');
                                document.getElementById('btnDisbursementLineSave').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#btnDisbursementLineSave").prop("disabled", false);
                                $("#btnDisbursementLineCloseDetailModal").prop("disabled", false);
                            },
                            400: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                                $('#disbursementLineDetailModal').modal('hide');
                                document.getElementById('btnDisbursementLineSave').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#btnDisbursementLineSave").prop("disabled", false);
                                $("#btnDisbursementLineCloseDetailModal").prop("disabled", false);
                            },
                            500: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                                $('#disbursementLineDetailModal').modal('hide');
                                document.getElementById('btnDisbursementLineSave').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#btnDisbursementLineSave").prop("disabled", false);
                                $("#btnDisbursementLineCloseDetailModal").prop("disabled", false);
                            }
                        }
                    });
                }
            } else {
                toastr.error("Invalid Entry");
            }
        }

        // ========================
        // Delete Disbursement Line
        // ========================
        function btnDisbursementLineDeleteOnclick() {
            $('#disbursementLineConfirmDeleteModal').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById('btnDisbursementLineConfirmDelete').innerHTML = "<i class='fa fa-trash'></i> Delete";
            $("#btnDisbursementLineConfirmDelete").prop("disabled", false);
            $("#btnDisbursementLineCloseDetailModal").prop("disabled", false);
        }

        // ================================
        // Confirm Delete Disbursement Line
        // ================================
        function btnDisbursementLineConfirmDeleteOnclick() {
            document.getElementById('btnDisbursementLineConfirmDelete').innerHTML = "<i class='fa fa-trash'></i> Deleting...";
            $("#btnDisbursementLineConfirmDelete").prop("disabled", true);
            $("#btnDisbursementLineCloseDetailModal").prop("disabled", true);

            var CVId = getURLParameterValue("id");

            disbursementLineCollectionView.editItem(disbursementLineCollectionView.currentItem);
            var disbursementLineId = disbursementLineCollectionView.currentEditItem.Id;

            $.ajax({
                url: '/api/disbursementLine/delete/' + disbursementLineId + '/' + CVId,
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Delete Successful");
                        $('#disbursementLineConfirmDeleteModal').modal('hide');
                        refreshDisbursementLineFlexGrid();
                    },
                    404: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                        document.getElementById('btnDisbursementLineConfirmDelete').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $("#btnDisbursementLineConfirmDelete").prop("disabled", false);
                        $("#btnDisbursementLineCloseDetailModal").prop("disabled", false);
                    },
                    400: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                        document.getElementById('btnDisbursementLineConfirmDelete').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $("#btnDisbursementLineConfirmDelete").prop("disabled", false);
                        $("#btnDisbursementLineCloseDetailModal").prop("disabled", false);
                    },
                    500: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                        document.getElementById('btnDisbursementLineConfirmDelete').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $("#btnDisbursementLineConfirmDelete").prop("disabled", false);
                        $("#btnDisbursementLineCloseDetailModal").prop("disabled", false);
                    }
                }
            });
        }

        // ================
        // Get Journal Data
        // ================
        function getJournalData() {
            var journalsObservableArray = new wijmo.collections.ObservableArray;
            var CVId = getURLParameterValue('id');

            $.ajax({
                url: '/api/jounal/disbursement/list/' + CVId,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {

                            var journalDateResult = new Date(results[i]["JournalDate"])
                            var journalDate = ('0' + (journalDateResult.getMonth() + 1)).slice(-2) + '-' + ('0' + journalDateResult.getDate()).slice(-2) + '-' + journalDateResult.getFullYear();

                            journalsObservableArray.push({
                                Branch: results[i]["Branch"],
                                JournalDate: journalDate,
                                AccountCode: results[i]["AccountCode"],
                                Account: results[i]["Account"],
                                Article: results[i]["Article"],
                                DebitAmountDisplay: parseFloat(results[i]["DebitAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                CreditAmountDisplay: parseFloat(results[i]["CreditAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")
                            });

                            var debitAmountTotal = 0;
                            var creditAmountTotal = 0;

                            var a = 0;
                            while (a < results.length) {
                                debitAmountTotal += results[a]["DebitAmount"];
                                creditAmountTotal += results[a]["CreditAmount"];
                                a++;
                            }
                        }

                        document.getElementById('inpJournalTotalDebit').value = debitAmountTotal.toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        document.getElementById('inpJournalTotalCredit').value = creditAmountTotal.toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        var inpJournalVariance = debitAmountTotal - creditAmountTotal;
                        document.getElementById('inpJournalVariance').value = inpJournalVariance.toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                    }

                    $("#journalLoading").hide();
                    $("#journalContent").show();
                }
            });

            return journalsObservableArray;
        }

        // ===============
        // Display Journal
        // ===============
        function btnDisbursementDetailJournalOnclick() {
            $('#journalEntryModal').modal({
                show: true,
                backdrop: 'static'
            });

            $("#journalLoading").show();
            document.getElementById("journalLoading").innerHTML = 'Loading...';
            $("#journalContent").hide();

            setTimeout(function () {
                createJournalFlexGrid();
            }, 500)
        }

        // ========================
        // Create Journal Flex Grid
        // ========================
        function createJournalFlexGrid() {
            journalCollectionView = new wijmo.collections.CollectionView(getJournalData());

            journalFlexGrid.dispose();
            journalFlexGrid = new wijmo.grid.FlexGrid('#journalFlexGrid');
            journalFlexGrid.initialize({
                columns: [
                    {
                        "header": "Branch",
                        "binding": "Branch",
                        "allowSorting": true,
                        "width": "2.5*"
                    },
                    {
                        "header": "Date",
                        "binding": "JournalDate",
                        "allowSorting": true,
                        "width": "1.5*"
                    },
                    {
                        "header": "Code",
                        "binding": "AccountCode",
                        "allowSorting": true,
                        "width": "1.8*"
                    },
                    {
                        "header": "Account",
                        "binding": "Account",
                        "allowSorting": true,
                        "width": "3*"
                    },
                    {
                        "header": "Article",
                        "binding": "Article",
                        "allowSorting": true,
                        "width": "3*"
                    },
                    {
                        "header": "Debit",
                        "binding": "DebitAmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": "2*",
                    },
                    {
                        "header": "Credit",
                        "binding": "CreditAmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": "2*"
                    }
                ],
                autoGenerateColumns: false,
                itemsSource: journalCollectionView,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            journalFlexGrid.trackChanges = true;
        }

        // ============================================
        // Create Receiving Receipt Status Date Filters
        // ============================================
        function createReceivingReceiptStatusDateFilters() {
            cboReceivingReceiptStatusStartDateFilter.dispose();
            cboReceivingReceiptStatusStartDateFilter = new wijmo.input.InputDate('#cboReceivingReceiptStatusStartDateFilter', {
                format: 'MM-dd-yyyy',
                value: new Date(),
                onValueChanged: function () {
                    if (!isCboReceivingReceiptStatusStartDateFilterSelected) {
                        $('#receivingReceiptStatusLoading').show();
                        document.getElementById("receivingReceiptStatusLoading").innerHTML = "Loading...";
                        $('#receivingReceiptStatusContent').hide();
                        $('#btnReceivingReceiptStatusApply').prop("disabled", true);

                        setTimeout(function () {
                            createReceivingReceiptStatusFlexGrid();
                        }, 500);
                    } else {
                        isCboReceivingReceiptStatusStartDateFilterSelected = false;
                    }
                }
            });

            cboReceivingReceiptStatusEndDateFilter.dispose();
            cboReceivingReceiptStatusEndDateFilter = new wijmo.input.InputDate('#cboReceivingReceiptStatusEndDateFilter', {
                format: 'MM-dd-yyyy',
                value: new Date(),
                onValueChanged: function () {
                    if (!isCboReceivingReceiptStatusEndDateFilterSelected) {
                        $('#receivingReceiptStatusLoading').show();
                        document.getElementById("receivingReceiptStatusLoading").innerHTML = "Loading...";
                        $('#receivingReceiptStatusContent').hide();
                        $('#btnReceivingReceiptStatusApply').prop("disabled", true);

                        setTimeout(function () {
                            createReceivingReceiptStatusFlexGrid();
                        }, 500);
                    } else {
                        isCboReceivingReceiptStatusEndDateFilterSelected = false;
                    }
                }
            });
        }

        // ================================
        // Display Receiving Receipt Status
        // ================================
        function btnDisbursementDetailAPOnclick() {
            createReceivingReceiptStatusDateFilters();
            $('#receivingReceiptStatusModal').modal({
                show: true,
                backdrop: 'static'
            });

            $('#receivingReceiptStatusLoading').show();
            document.getElementById("receivingReceiptStatusLoading").innerHTML = "Loading...";
            $('#receivingReceiptStatusContent').hide();
            $('#btnReceivingReceiptStatusApply').prop("disabled", true);

            setTimeout(function () {
                createReceivingReceiptStatusFlexGrid();
            }, 500);
        }

        // =================================
        // Get Receiving Receipt Status Data
        // =================================
        function getReceivingReceiptStatusData() {
            var receivingReceiptsSatatusObservableArray = new wijmo.collections.ObservableArray;

            var startDate = cboReceivingReceiptStatusStartDateFilter.value.toLocaleDateString().replace(/\//g, '-');
            var endDate = cboReceivingReceiptStatusEndDateFilter.value.toLocaleDateString().replace(/\//g, '-');

            $.ajax({
                url: '/api/disbursementLine/popUp/list/receivingReceiptStatus/' + cboDisbursementDetailSupplier.selectedValue + '/' + startDate + '/' + endDate,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    $('#btnReceivingReceiptStatusApply').prop("disabled", false);
                    var inpReceivingReceiptStatusTotalAmount = 0;
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {

                            var RRDateResult = new Date(results[i]["RRDate"])
                            var RRDate = ('0' + (RRDateResult.getMonth() + 1)).slice(-2) + '-' + ('0' + RRDateResult.getDate()).slice(-2) + '-' + RRDateResult.getFullYear();

                            receivingReceiptsSatatusObservableArray.push({
                                Id: results[i]["Id"],
                                RRNumber: results[i]["RRNumber"],
                                RRDate: RRDate,
                                DocumentReference: results[i]["DocumentReference"],
                                Amount: results[i]["Amount"],
                                AmountDisplay: parseFloat(results[i]["Amount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                PaidAmount: results[i]["PaidAmount"],
                                PaidAmountDisplay: parseFloat(results[i]["PaidAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                AdjustmentAmount: results[i]["AdjustmentAmount"],
                                AdjustmentAmountDisplay: parseFloat(results[i]["AdjustmentAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                BalanceAmount: results[i]["BalanceAmount"],
                                BalanceAmountDisplay: parseFloat(results[i]["BalanceAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                Balance: results[i]["BalanceAmount"],
                                BalanceDisplay: parseFloat(results[i]["BalanceAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                Pick: "<button class='btn btn-primary btn-xs btn-block' onclick='btnReceivingReceiptStatusPickAmount()' style='font-size: 10.5px;'><i class='fa fa-hand-o-right'></i> Pick</button>",
                                Unpick: "<button class='btn btn-danger btn-xs btn-block' onclick='btnReceivingReceiptStatusUnpickAmount()' style='font-size: 10.5px;'><i class='fa fa-hand-o-left'></i> Unpick</button>",
                            });

                            inpReceivingReceiptStatusTotalAmount += results[i]["BalanceAmount"];
                        }
                    } else {
                        $('#btnReceivingReceiptStatusApply').prop("disabled", true);
                    }

                    document.getElementById("inpReceivingReceiptStatusTotalAmount").value = parseFloat(inpReceivingReceiptStatusTotalAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");

                    $('#receivingReceiptStatusLoading').hide();
                    $('#receivingReceiptStatusContent').show();
                }
            });

            return receivingReceiptsSatatusObservableArray;
        }

        // ============================================
        // Pick Receiving Receipt Status Amount (Modal)
        // ============================================
        function btnReceivingReceiptStatusPickAmount() {
            $('#receivingReceiptStatusPickAmountModal').modal({
                show: true,
                backdrop: 'static'
            });

            $("#btnReceivingReceiptStatusPickAmountContinue").prop("disabled", false);
            $("#btnReceivingReceiptStatusPickAmountCloseModal").prop("disabled", false);

            receivingReceiptsSatatusCollectionView.editItem(receivingReceiptsSatatusCollectionView.currentItem);
            var saleInvoice = receivingReceiptsSatatusCollectionView.currentEditItem;
            var balance = saleInvoice.Amount - saleInvoice.PaidAmount;
            document.getElementById("inpReceivingReceiptStatusPickAmount").value = parseFloat(balance).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        }

        // ========================================
        // Receiving Receipt Status Amount Continue
        // ========================================
        function btnReceivingReceiptStatusPickAmountContinueOnclick() {
            $("#btnReceivingReceiptStatusPickAmountContinue").prop("disabled", true);
            $("#btnReceivingReceiptStatusPickAmountCloseModal").prop("disabled", true);

            var isValid = true;
            $('.requiredPickedAmount').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                } else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            if (isValid) {
                receivingReceiptsSatatusCollectionView.editItem(receivingReceiptsSatatusCollectionView.currentItem);
                var saleInvoice = receivingReceiptsSatatusCollectionView.currentEditItem;
                var balance = document.getElementById("inpReceivingReceiptStatusPickAmount").value.split(",").join("");

                if (isNaN(balance)) {
                    toastr.error("Invalid Entry");

                    $("#btnReceivingReceiptStatusPickAmountContinue").prop("disabled", false);
                    $("#btnReceivingReceiptStatusPickAmountCloseModal").prop("disabled", false);
                } else {
                    saleInvoice.Balance = balance;
                    saleInvoice.BalanceDisplay = parseFloat(balance).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");

                    setTimeout(function () {
                        var totalALLRRAmount = 0
                        receivingReceiptsSatatusCollectionView.moveToFirstPage();
                        for (var p = 1; p <= receivingReceiptsSatatusCollectionView.pageCount; p++) {
                            var totalCurrentPageRRAmount = 0
                            for (var i = 0; i < receivingReceiptsSatatusCollectionView.items.length; i++) {
                                totalCurrentPageRRAmount += parseFloat(receivingReceiptsSatatusCollectionView.items[i].Balance);
                            }

                            totalALLRRAmount += parseFloat(totalCurrentPageRRAmount);
                            receivingReceiptsSatatusCollectionView.moveToNextPage();
                            if (p == receivingReceiptsSatatusCollectionView.pageCount) {
                                receivingReceiptsSatatusCollectionView.moveToPage(receivingReceiptStatusCurrentPageIndex - 1);
                            }
                        }

                        document.getElementById("inpReceivingReceiptStatusTotalAmount").value = parseFloat(totalALLRRAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        $('#receivingReceiptStatusPickAmountModal').modal('hide');
                    }, 100);

                    receivingReceiptsSatatusCollectionView.refresh();
                    receivingReceiptStatusFlexGrid.refresh();
                }
            } else {
                toastr.error("Invalid Entry");
            }
        }

        // ======================================
        // Unpick Receiving Receipt Status Amount
        // ======================================
        function btnReceivingReceiptStatusUnpickAmount() {
            receivingReceiptsSatatusCollectionView.editItem(receivingReceiptsSatatusCollectionView.currentItem);
            var saleInvoice = receivingReceiptsSatatusCollectionView.currentEditItem;
            saleInvoice.Balance = 0;
            saleInvoice.BalanceDisplay = parseFloat(0).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");

            setTimeout(function () {
                var totalALLRRAmount = 0
                receivingReceiptsSatatusCollectionView.moveToFirstPage();
                for (var p = 1; p <= receivingReceiptsSatatusCollectionView.pageCount; p++) {
                    var totalCurrentPageRRAmount = 0
                    for (var i = 0; i < receivingReceiptsSatatusCollectionView.items.length; i++) {
                        totalCurrentPageRRAmount += parseFloat(receivingReceiptsSatatusCollectionView.items[i].Balance);
                    }

                    totalALLRRAmount += parseFloat(totalCurrentPageRRAmount);
                    receivingReceiptsSatatusCollectionView.moveToNextPage();
                    if (p == receivingReceiptsSatatusCollectionView.pageCount) {
                        receivingReceiptsSatatusCollectionView.moveToPage(receivingReceiptStatusCurrentPageIndex - 1);
                    }
                }

                document.getElementById("inpReceivingReceiptStatusTotalAmount").value = parseFloat(totalALLRRAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                $('#salesInvoiceStatusPickAmountModal').modal('hide');
            }, 100);

            receivingReceiptsSatatusCollectionView.refresh();
            receivingReceiptStatusFlexGrid.refresh();
        }

        // ==============================
        // Apply Receiving Receipt Status
        // ==============================
        function btnReceivingReceiptStatusApplyOnclick() {
            $('#receivingReceiptStatusApplyPickAmountModal').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById('btnReceivingReceiptStatusApplyPickAmount').innerHTML = "<i class='fa fa-check'></i> Apply";
            $("#btnReceivingReceiptStatusApplyPickAmount").prop("disabled", false);
            $("#btnReceivingReceiptStatusApplyPickAmountCloseModal").prop("disabled", false);
        }

        // ================================================
        // Apply Receiving Receipt Status All Picked Amount
        // ================================================
        function btnReceivingReceiptStatusApplyPickAmountOnclick() {
            document.getElementById('btnReceivingReceiptStatusApplyPickAmount').innerHTML = "<i class='fa fa-check'></i> Applying...";
            $("#btnReceivingReceiptStatusApplyPickAmount").prop("disabled", true);
            $("#btnReceivingReceiptStatusApplyPickAmountCloseModal").prop("disabled", true);

            var receivingReceiptArrays = new Array();

            for (var i = 0; i < receivingReceiptsSatatusCollectionView.items.length; i++) {
                var item = receivingReceiptsSatatusCollectionView.items[i];
                if (item.Balance > 0) {
                    receivingReceiptArrays.push({
                        RRId: item.Id,
                        Amount: item.Balance,
                    });
                }
            }

            var receivingReceitItemsObjects = JSON.stringify(receivingReceiptArrays);
            var CVId = getURLParameterValue("id");

            $.ajax({
                url: '/api/disbursementLine/popUp/apply/receivingReceiptStatus/' + CVId,
                type: "POST",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: receivingReceitItemsObjects,
                statusCode: {
                    200: function () {
                        toastr.success("Apply Successful");
                        $('#receivingReceiptStatusApplyPickAmountModal').modal('hide');
                        $('#receivingReceiptStatusModal').modal('hide');
                        refreshDisbursementLineFlexGrid();
                    },
                    404: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                        $('#receivingReceiptStatusApplyPickAmountModal').modal('hide');
                        $('#receivingReceiptStatusModal').modal('hide');
                        document.getElementById('btnReceivingReceiptStatusApplyPickAmount').innerHTML = "<i class='fa fa-check'></i> Apply";
                        $("#btnReceivingReceiptStatusApplyPickAmount").prop("disabled", false);
                        $("#btnReceivingReceiptStatusApplyPickAmountCloseModal").prop("disabled", false);
                    },
                    400: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                        $('#receivingReceiptStatusApplyPickAmountModal').modal('hide');
                        $('#receivingReceiptStatusModal').modal('hide');
                        document.getElementById('btnReceivingReceiptStatusApplyPickAmount').innerHTML = "<i class='fa fa-check'></i> Apply";
                        $("#btnReceivingReceiptStatusApplyPickAmount").prop("disabled", false);
                        $("#btnReceivingReceiptStatusApplyPickAmountCloseModal").prop("disabled", false);
                    },
                    500: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                        $('#receivingReceiptStatusApplyPickAmountModal').modal('hide');
                        $('#receivingReceiptStatusModal').modal('hide');
                        document.getElementById('btnReceivingReceiptStatusApplyPickAmount').innerHTML = "<i class='fa fa-check'></i> Apply";
                        $("#btnReceivingReceiptStatusApplyPickAmount").prop("disabled", false);
                        $("#btnReceivingReceiptStatusApplyPickAmountCloseModal").prop("disabled", false);
                    }
                }
            });
        }

        // ==================================================
        // Update Receiving Receipt Status Navigation Buttons
        // ==================================================
        function updateReceivingReceiptStatusNavigateButtons() {
            if (receivingReceiptsSatatusCollectionView.pageSize <= 0) {
                document.getElementById('receivingStatusNavigationPageGrid').style.display = 'none';
                return;
            }
            document.getElementById('receivingStatusNavigationPageGrid').style.display = 'block';
            if (receivingReceiptsSatatusCollectionView.pageIndex === 0) {
                btnReceivingReceiptStatusMoveToFirstPageGrid.setAttribute('disabled', 'disabled');
                btnReceivingReceiptStatusMoveToPreviousPageGrid.setAttribute('disabled', 'disabled');
                btnReceivingReceiptStatusMoveToNextPageGrid.removeAttribute('disabled');
                btnReceivingReceiptStatusMoveToLastPageGrid.removeAttribute('disabled');
            } else if (receivingReceiptsSatatusCollectionView.pageIndex === (receivingReceiptsSatatusCollectionView.pageCount - 1)) {
                btnReceivingReceiptStatusMoveToFirstPageGrid.removeAttribute('disabled');
                btnReceivingReceiptStatusMoveToPreviousPageGrid.removeAttribute('disabled');
                btnReceivingReceiptStatusMoveToNextPageGrid.setAttribute('disabled', 'disabled');
                btnReceivingReceiptStatusMoveToLastPageGrid.setAttribute('disabled', 'disabled');
            } else {
                btnReceivingReceiptStatusMoveToFirstPageGrid.removeAttribute('disabled');
                btnReceivingReceiptStatusMoveToPreviousPageGrid.removeAttribute('disabled');
                btnReceivingReceiptStatusMoveToNextPageGrid.removeAttribute('disabled');
                btnReceivingReceiptStatusMoveToLastPageGrid.removeAttribute('disabled');
            }
            btnReceivingReceiptStatusCurrentPageGrid.innerHTML = (receivingReceiptsSatatusCollectionView.pageIndex + 1) + ' / ' + receivingReceiptsSatatusCollectionView.pageCount;
        }

        // ==================================
        // Receiving Receipt Status Flex Grid
        // ==================================
        function createReceivingReceiptStatusFlexGrid() {
            receivingReceiptsSatatusCollectionView = new wijmo.collections.CollectionView(getReceivingReceiptStatusData());
            receivingReceiptsSatatusCollectionView.canFilter = true;
            receivingReceiptsSatatusCollectionView.pageSize = 10;

            var filterText = '';
            $('#inpReceivingReceiptStatusSearchFilter').keyup(function () {
                filterText = this.value.toLowerCase();
                receivingReceiptsSatatusCollectionView.refresh();
            });

            receivingReceiptsSatatusCollectionView.filter = function (item) {
                return !filterText || (item.DocumentReference.toLowerCase().indexOf(filterText) > -1)
                || (item.RRNumber.toLowerCase().indexOf(filterText) > -1);
            }

            receivingReceiptsSatatusCollectionView.collectionChanged.addHandler(function (sender, args) {
                updateReceivingReceiptStatusNavigateButtons();
            });

            receivingReceiptStatusFlexGrid.dispose();
            receivingReceiptStatusFlexGrid = new wijmo.grid.FlexGrid('#receivingReceiptStatusFlexGrid');
            receivingReceiptStatusFlexGrid.initialize({
                columns: [
                    {
                        "header": "RR No.",
                        "binding": "RRNumber",
                        "allowSorting": true,
                        "isReadOnly": true,
                        "width": "1.5*"
                    },
                    {
                        "header": "Date",
                        "binding": "RRDate",
                        "allowSorting": true,
                        "isReadOnly": true,
                        "width": "1.5*"
                    },
                    {
                        "header": "Doc Ref",
                        "binding": "DocumentReference",
                        "allowSorting": true,
                        "isReadOnly": true,
                        "width": "4*"
                    },
                    {
                        "header": "RR Amount",
                        "binding": "AmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "isReadOnly": true,
                        "width": "1.5*"
                    },
                    {
                        "header": "Payments",
                        "binding": "PaidAmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "isReadOnly": true,
                        "width": "1.5*"
                    },
                    {
                        "header": "Adjustments",
                        "binding": "AdjustmentAmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "isReadOnly": true,
                        "width": "1.5*"
                    },
                    {
                        "header": "Balance",
                        "binding": "BalanceAmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "isReadOnly": true,
                        "width": "1.5*"
                    },
                    {
                        "header": "Pick",
                        "binding": "Pick",
                        "allowSorting": true,
                        "isReadOnly": true,
                        "width": 60,
                        "align": "center",
                        "allowResizing": false,
                        "allowSorting": false,
                        "isContentHtml": true
                    },
                    {
                        "header": "Unpick",
                        "binding": "Unpick",
                        "allowSorting": true,
                        "isReadOnly": true,
                        "width": 65,
                        "align": "center",
                        "allowResizing": false,
                        "allowSorting": false,
                        "isContentHtml": true
                    },
                    {
                        "header": "Amount",
                        "binding": "BalanceDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "isReadOnly": true,
                        "width": "1.5*"
                    },
                ],
                autoGenerateColumns: false,
                itemsSource: receivingReceiptsSatatusCollectionView,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            receivingReceiptStatusFlexGrid.trackChanges = true;

            var hr = new wijmo.grid.Row();
            receivingReceiptStatusFlexGrid.allowMerging = wijmo.grid.AllowMerging.AllHeaders;
            receivingReceiptStatusFlexGrid.columnHeaders.rows.push(hr);
            receivingReceiptStatusFlexGrid.columnHeaders.rows[0].allowMerging = true;

            receivingReceiptStatusFlexGrid.columnHeaders.columns[0].allowMerging = true;
            receivingReceiptStatusFlexGrid.columnHeaders.setCellData(0, 0, 'RR No.');

            receivingReceiptStatusFlexGrid.columnHeaders.columns[1].allowMerging = true;
            receivingReceiptStatusFlexGrid.columnHeaders.setCellData(0, 1, 'Date');

            receivingReceiptStatusFlexGrid.columnHeaders.columns[2].allowMerging = true;
            receivingReceiptStatusFlexGrid.columnHeaders.setCellData(0, 2, 'Doc Ref');

            for (var columnQuantityTopAssigned = 3; columnQuantityTopAssigned <= 6; columnQuantityTopAssigned++) {
                receivingReceiptStatusFlexGrid.columnHeaders.setCellData(0, columnQuantityTopAssigned, 'Amount');
            }

            receivingReceiptStatusFlexGrid.columnHeaders.columns[7].allowMerging = true;
            receivingReceiptStatusFlexGrid.columnHeaders.setCellData(0, 7, 'Pick')

            receivingReceiptStatusFlexGrid.columnHeaders.columns[8].allowMerging = true;
            receivingReceiptStatusFlexGrid.columnHeaders.setCellData(0, 8, 'Unpick')

            receivingReceiptStatusFlexGrid.columnHeaders.columns[9].allowMerging = true;
            receivingReceiptStatusFlexGrid.columnHeaders.setCellData(0, 9, 'Amount');

            if (!isBtnReceivingReceiptStatusClicked) {
                updateReceivingReceiptStatusNavigateButtons();

                btnReceivingReceiptStatusMoveToFirstPageGrid.addEventListener('click', function () {
                    receivingReceiptsSatatusCollectionView.moveToFirstPage();
                    updateReceivingReceiptStatusNavigateButtons();
                });

                btnReceivingReceiptStatusMoveToPreviousPageGrid.addEventListener('click', function () {
                    receivingReceiptsSatatusCollectionView.moveToPreviousPage();
                    updateReceivingReceiptStatusNavigateButtons();
                });

                btnReceivingReceiptStatusMoveToNextPageGrid.addEventListener('click', function () {
                    receivingReceiptsSatatusCollectionView.moveToNextPage();
                    updateReceivingReceiptStatusNavigateButtons();
                });

                btnReceivingReceiptStatusMoveToLastPageGrid.addEventListener('click', function () {
                    receivingReceiptsSatatusCollectionView.moveToLastPage();
                    updateReceivingReceiptStatusNavigateButtons();
                });

                isBtnReceivingReceiptStatusClicked = true;
            }
        }

        // =================
        // Supplier Advances
        // =================
        function btnDisbursementDetailAdvancesOnclick() {
            $('#supplierAdvancesModal').modal({
                show: true,
                backdrop: 'static'
            });

            $('#supplierAdvancesLoading').show();
            document.getElementById("supplierAdvancesLoading").innerHTML = "Loading...";
            $('#supplierAdvancesContent').hide();

            setTimeout(function () {
                createSupplierAdvancesFlexGrid();
            }, 500);
        }

        // ==========================
        // Get Supplier Advances Data
        // ==========================
        function getSupplierAdvancesData() {
            var supplierAdvancesCollectionViewObservableArray = new wijmo.collections.ObservableArray;
            $.ajax({
                url: '/api/disbursementLine/popUp/list/supplierAdvances/' + cboDisbursementDetailSupplier.selectedValue,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            supplierAdvancesCollectionViewObservableArray.push({
                                BranchId: results[i]["BranchId"],
                                Branch: results[i]["Branch"],
                                AccountId: results[i]["AccountId"],
                                Account: results[i]["Account"],
                                AccountCode: results[i]["AccountCode"],
                                ArticleId: results[i]["ArticleId"],
                                Article: results[i]["Article"],
                                DebitAmount: results[i]["DebitAmount"],
                                DebitAmountDisplay: parseFloat(results[i]["DebitAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                CreditAmount: results[i]["CreditAmount"],
                                CreditAmountDisplay: parseFloat(results[i]["CreditAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                Balance: results[i]["Balance"],
                                BalanceDisplay: parseFloat(results[i]["Balance"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                Pick: "<button class='btn btn-primary btn-xs' onclick='btnApplyAdvancesOnclick()'><i class='fa fa-check'></i> Apply </button>"
                            });
                        }
                    }

                    $('#supplierAdvancesLoading').hide();
                    $('#supplierAdvancesContent').show();
                }
            });

            return supplierAdvancesCollectionViewObservableArray;
        }

        // ==================================
        // Create Supplier Advances Flex Grid
        // ==================================
        function createSupplierAdvancesFlexGrid() {
            supplierAdvancesCollectionView = new wijmo.collections.CollectionView(getSupplierAdvancesData());
            supplierAdvancesCollectionView.canFilter = true;
            supplierAdvancesCollectionView.pageSize = 10;

            var filterText = '';
            $('#inpSupplierAdvancesSearchFilter').keyup(function () {
                filterText = this.value.toLowerCase();
                supplierAdvancesCollectionView.refresh();
            });

            supplierAdvancesCollectionView.filter = function (item) {
                return !filterText || (item.AccountCode.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Account.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Article.toLowerCase().indexOf(filterText) > -1);
            }

            supplierAdvancesCollectionView.collectionChanged.addHandler(function (sender, args) {
                updateSupplierdvancesNavigationButtons();
            });

            supplierAdvancesFlexGrid.dispose();
            supplierAdvancesFlexGrid = new wijmo.grid.FlexGrid('#supplierAdvancesFlexGrid');
            supplierAdvancesFlexGrid.initialize({
                columns: [
                    {
                        "header": "Code",
                        "binding": "AccountCode",
                        "allowSorting": true,
                        "width": "1.5*"
                    },
                    {
                        "header": "Account",
                        "binding": "Account",
                        "allowSorting": true,
                        "width": "3*"
                    },
                    {
                        "header": "Article",
                        "binding": "Article",
                        "allowSorting": true,
                        "width": "3*"
                    },
                    {
                        "header": "Debit",
                        "binding": "DebitAmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": "2*"
                    },
                    {
                        "header": "Credit",
                        "binding": "CreditAmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": "2*"
                    },
                    {
                        "header": "Balance",
                        "binding": "BalanceDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": "2*"
                    },
                    {
                        "header": "Apply",
                        "binding": "Pick",
                        "allowSorting": true,
                        "width": 70,
                        "align": "center",
                        "allowResizing": false,
                        "allowSorting": false,
                        "isContentHtml": true
                    },
                ],
                autoGenerateColumns: false,
                itemsSource: supplierAdvancesCollectionView,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            supplierAdvancesFlexGrid.trackChanges = true;

            if (!isSupplierAdvancesClicked) {
                updateSupplierdvancesNavigationButtons();

                btnSupplierAdvancesMoveToFirstPageGrid.addEventListener('click', function () {
                    supplierAdvancesCollectionView.moveToFirstPage();
                    updateSupplierdvancesNavigationButtons();
                });

                btnSupplierAdvancesMoveToPreviousPageGrid.addEventListener('click', function () {
                    supplierAdvancesCollectionView.moveToPreviousPage();
                    updateSupplierdvancesNavigationButtons();
                });

                btnSupplierAdvancesMoveToNextPageGrid.addEventListener('click', function () {
                    supplierAdvancesCollectionView.moveToNextPage();
                    updateSupplierdvancesNavigationButtons();
                });

                btnSupplierAdvancesMoveToLastPageGrid.addEventListener('click', function () {
                    supplierAdvancesCollectionView.moveToLastPage();
                    updateSupplierdvancesNavigationButtons();
                });

                isSupplierAdvancesClicked = true;
            }
        }

        // ===========================================
        // Update Supplier Advances Navigation Buttons
        // ===========================================
        function updateSupplierdvancesNavigationButtons() {
            if (supplierAdvancesCollectionView.pageSize <= 0) {
                document.getElementById('supplierAdvancesNavigationPageGrid').style.display = 'none';
                return;
            }
            document.getElementById('supplierAdvancesNavigationPageGrid').style.display = 'block';
            if (supplierAdvancesCollectionView.pageIndex === 0) {
                btnSupplierAdvancesMoveToFirstPageGrid.setAttribute('disabled', 'disabled');
                btnSupplierAdvancesMoveToPreviousPageGrid.setAttribute('disabled', 'disabled');
                btnSupplierAdvancesMoveToNextPageGrid.removeAttribute('disabled');
                btnSupplierAdvancesMoveToLastPageGrid.removeAttribute('disabled');
            } else if (supplierAdvancesCollectionView.pageIndex === (supplierAdvancesCollectionView.pageCount - 1)) {
                btnSupplierAdvancesMoveToFirstPageGrid.removeAttribute('disabled');
                btnSupplierAdvancesMoveToPreviousPageGrid.removeAttribute('disabled');
                btnSupplierAdvancesMoveToNextPageGrid.setAttribute('disabled', 'disabled');
                btnSupplierAdvancesMoveToLastPageGrid.setAttribute('disabled', 'disabled');
            } else {
                btnSupplierAdvancesMoveToFirstPageGrid.removeAttribute('disabled');
                btnSupplierAdvancesMoveToPreviousPageGrid.removeAttribute('disabled');
                btnSupplierAdvancesMoveToNextPageGrid.removeAttribute('disabled');
                btnSupplierAdvancesMoveToLastPageGrid.removeAttribute('disabled');
            }
            btnSupplierAdvancesCurrentPageGrid.innerHTML = (supplierAdvancesCollectionView.pageIndex + 1) + ' / ' + supplierAdvancesCollectionView.pageCount;
        }

        // =======================
        // Apply Supplier Advances
        // =======================
        function btnApplyAdvancesOnclick() {
            $('#supplierAdvancesApplyModal').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById('btnSupplierAdvancesConfirmApply').innerHTML = "<i class='fa fa-check'></i> Apply";
            $("#btnSupplierAdvancesConfirmApply").prop("disabled", false);
            $("#btnSupplierAdvancesConfirmApplyCloseModal").prop("disabled", false);
        }

        // ===============================
        // Confirm Apply Supplier Advances
        // ===============================
        function btnSupplierAdvancesConfirmApplyOnclick() {
            document.getElementById('btnSupplierAdvancesConfirmApply').innerHTML = "<i class='fa fa-check'></i> Applying...";
            $("#btnSupplierAdvancesConfirmApply").prop("disabled", true);
            $("#btnSupplierAdvancesConfirmApplyCloseModal").prop("disabled", true);

            supplierAdvancesCollectionView.editItem(supplierAdvancesCollectionView.currentItem);
            var supplierAdvancesCollectionViewItem = supplierAdvancesCollectionView.currentEditItem;

            var CVId = getURLParameterValue("id");

            var receivingReceiptAdvancesObject = new Object();
            receivingReceiptAdvancesObject.AccountId = supplierAdvancesCollectionViewItem.AccountId;
            receivingReceiptAdvancesObject.ArticleId = supplierAdvancesCollectionViewItem.ArticleId;
            var receivingReceiptAdvancesData = JSON.stringify(receivingReceiptAdvancesObject);

            $.ajax({
                url: '/api/disbursementLine/popUp/apply/supplierAdvances/' + CVId,
                type: "POST",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: receivingReceiptAdvancesData,
                statusCode: {
                    200: function () {
                        toastr.success("Apply Successful");
                        $('#supplierAdvancesApplyModal').modal('hide');
                        refreshDisbursementLineFlexGrid();
                    },
                    404: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                        $('#supplierAdvancesApplyModal').modal('hide');
                        document.getElementById('btnSupplierAdvancesConfirmApply').innerHTML = "<i class='fa fa-check'></i> Apply";
                        $("#btnSupplierAdvancesConfirmApply").prop("disabled", false);
                        $("#btnSupplierAdvancesConfirmApplyCloseModal").prop("disabled", false);
                    },
                    400: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                        $('#supplierAdvancesApplyModal').modal('hide');
                        document.getElementById('btnSupplierAdvancesConfirmApply').innerHTML = "<i class='fa fa-check'></i> Apply";
                        $("#btnSupplierAdvancesConfirmApply").prop("disabled", false);
                        $("#btnSupplierAdvancesConfirmApplyCloseModal").prop("disabled", false);
                    },
                    500: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                        $('#supplierAdvancesApplyModal').modal('hide');
                        document.getElementById('btnSupplierAdvancesConfirmApply').innerHTML = "<i class='fa fa-check'></i> Apply";
                        $("#btnSupplierAdvancesConfirmApply").prop("disabled", false);
                        $("#btnSupplierAdvancesConfirmApplyCloseModal").prop("disabled", false);
                    }
                }
            });
        }

        // =============================
        // Document Ready - On load Page
        // =============================
        $(document).ready(function () {
            createCboDisbursementDetailBranch();

            $(document).on('show.bs.modal', '.modal', function (event) {
                var zIndex = 1040 + (10 * $('.modal:visible').length);
                $(this).css('z-index', zIndex);
                setTimeout(function () {
                    $('.modal-backdrop').not('.modal-stack').css('z-index', zIndex - 1).addClass('modal-stack');
                }, 0);
            });

            $(document).on('hidden.bs.modal', '.modal', function () {
                $('.modal:visible').length && $(document.body).addClass('modal-open');
            });
        });
    </script>
    <script type="text/javascript">
        // =================
        // User Branch Combo
        // =================
        var cboUserBranches = new wijmo.input.ComboBox('#cboUserBranches');

        // =========================
        // Get Current User Branches
        // =========================
        function getUserBranches() {
            $("#loadingUserBranches").show();
            document.getElementById("loadingUserBranches").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#userBranchContent").hide();

            $('#userBranchesModal').modal({ show: true, backdrop: 'static' });

            document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
            $("#updateUserBranch").prop("disabled", false);
            $("#closeUserBranch").prop("disabled", false);

            var userBranchesObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/userBranch/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (userBranchesResults) {
                    if (userBranchesResults.length > 0) {
                        for (i = 0; i < userBranchesResults.length; i++) {
                            userBranchesObservableArray.push({
                                BranchId: userBranchesResults[i]["BranchId"],
                                Branch: userBranchesResults[i]["Branch"]
                            });
                        }
                    }

                    var currentBranch = "@ViewData["BranchId"]";
                    cboUserBranches.dispose();
                    cboUserBranches = new wijmo.input.ComboBox('#cboUserBranches', {
                        isEditable: false,
                        placeholder: "Select Branches",
                        itemsSource: userBranchesObservableArray,
                        displayMemberPath: "Branch",
                        selectedValuePath: "BranchId",
                        selectedValue: currentBranch
                    });

                    setTimeout(function () {
                        $("#loadingUserBranches").hide();
                        $("#userBranchContent").show();
                    }, 500)
                }
            });
        }

        // ==========================
        // Update Current User Branch
        // ==========================
        function updateUserBranchOnclick() {
            document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Updating";
            $("#updateUserBranch").prop("disabled", true);
            $("#closeUserBranch").prop("disabled", true);

            var userBranchObject = new Object();
            userBranchObject.BranchId = cboUserBranches.selectedValue;
            var userBranchData = JSON.stringify(userBranchObject);

            $.ajax({
                type: "PUT",
                url: '/api/userBranch/update',
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: userBranchData,
                statusCode: {
                    200: function () {
                        toastr.success("Update Successful");
                        window.setTimeout(function () {
                            location.reload()
                        }, 1000);
                    },
                    404: function () {
                        toastr.error("Not Found");
                        document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
                        $("#updateUserBranch").prop("disabled", false);
                        $("#closeUserBranch").prop("disabled", false);
                    },
                    500: function () {
                        toastr.error("Bad Request");
                        document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
                        $("#updateUserBranch").prop("disabled", false);
                        $("#closeUserBranch").prop("disabled", false);
                    }
                }
            });
        }
    </script>
    <script type="text/javascript">
        // ======================
        // Side Bar Menu Settings
        // ======================
        var slideLeft = new Menu({
            wrapper: '#o-wrapper',
            type: 'slide-left',
            menuOpenerClass: '.c-button',
            maskId: '#c-mask'
        });

        var slideLeftBtn = document.querySelector('#c-button--slide-left');

        slideLeftBtn.addEventListener('click', function (e) {
            e.preventDefault;
            slideLeft.open();
        });
    </script>
</body>
</html>