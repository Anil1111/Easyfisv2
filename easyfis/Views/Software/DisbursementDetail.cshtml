@{
    var userId = ViewData["UserId"];
}
<!DOCTYPE html>
<html>
<head>
    <!-- Meta -->
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">
    <meta name="description" content="Some slide and push menu demos using CSS3 transitions.">

    <!-- Title of the Page -->
    <title>Disbursement Detail</title>

    <!-- CSS StyleSheets-->
    @Styles.Render("~/Content/Software-css")
</head>
<body>
    <div id="o-wrapper" class="o-wrapper">
        <!-- Header -->
        @Html.Partial("_SoftwareHeader")

        <!-- Section -->
        <section>
            <div class="sub-nav">
                <div class="container">
                    <h4><i class="fa fa-credit-card"></i> Disbursement Detail</h4>
                </div>
                <div class="div_Current_Page">
                    <div class="container">
                        <a href="@Url.Action("Index", "Software")" class="currentPageLinkCustom">Main Menu</a> > <a href="@Url.Action("Disbursement", "Software")" class="currentPageLinkCustom">Disbursement</a> > Disbursement Detail
                    </div>
                </div>
            </div>
            <div class="container">
                <div class="row">
                    <div class="col-md-6">
                        <h4 id=""></h4>
                    </div>
                    <div class="col-md-6" align="right">
                        <button class="btn btn-primary btn-sm" id="cmdDisbursementJournal" onclick="btnJournalDetail_OnClick()"><i class="fa fa-book"></i> Journal</button>
                        <button class="btn btn-primary btn-sm" id="cmdDisbursementSaveLock" onclick="btnDisbursementSaveLock_OnClick()"><i class="fa fa-save"></i> Save (Lock)</button>
                        <button class="btn btn-primary btn-sm" id="cmdDisbursementSave" onclick="btnDisbursementSave_OnClick()"><i class="fa fa-save"></i> Save</button>
                        <button class="btn btn-primary btn-sm" id="cmdDisbursementEdit" onclick="btnDisbursementEdit_OnClick()"><i class="fa fa-edit"></i> Edit (Unlock)</button>
                        <button class="btn btn-primary btn-sm" id="cmdDisbursementPrint" onclick="window.location.href ='@Url.Action("DisbursementPDF", "Software")'"><i class="fa fa-print"></i> Print</button>
                        <button id="cmdDisbursementClose" onclick="window.location.href = '@Url.Action("Disbursement", "Software")'" class="btn btn-danger btn-sm"><i class="fa fa-times"></i> Close</button>
                    </div>
                </div>
                @*<hr />*@
                <div class="well">
                    <form class="form-horizontal" role="form">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="control-label col-sm-4">Branch</label>
                                    <div class="col-sm-8">
                                        <div class="comboBox-wide" id="disbursement_Branch"></div>

                                        <input type="hidden" id="disbursement_Branch_data" class="requiredDisbursement" />
                                        <input type="hidden" id="disbursement_Branch_selectedValue" />
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label class="control-label col-sm-4">CV Number</label>
                                    <div class="col-sm-8">
                                        <input type="text" class="form-control input-sm requiredDisbursement" id="disbursement_CVNumber_Display" />
                                        <input type="hidden" id="disbursement_CVNumber" />
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label class="control-label col-sm-4">CV Date</label>
                                    <div class="col-sm-8">
                                        <div class="comboBox-wide" id="disbursement_CVDate"></div>
                                        <input type="hidden" id="disbursement_CVDate_data" class="requiredDisbursement" />
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label class="control-label col-sm-4">Manual CV Number</label>
                                    <div class="col-sm-8">
                                        <input type="text" class="form-control input-sm requiredDisbursement" id="disbursement_ManualCVNumber">
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label class="control-label col-sm-4">Supplier</label>
                                    <div class="col-sm-8">
                                        <div class="input-group">
                                            <div class="comboBox-wide" id="disbursement_Supplier"></div>

                                            <input type="hidden" id="disbursement_Supplier_data" class="requiredDisbursement" />
                                            <input type="hidden" id="disbursement_Supplier_selectedValue" />
                                            <div class="input-group-btn">
                                                <button type="button" class="btn btn-primary btn-sm" id="cmdAP" onclick="AP_OnClick()">AP</button>
                                                @*<button type="button" class="btn btn-primary btn-sm" id="cmdAdvances" onclick="Advances_OnClick()">Advances</button>*@
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label class="control-label col-sm-4">Payee</label>
                                    <div class="col-sm-8">
                                        <input type="text" class="form-control input-sm requiredDisbursement" id="disbursement_Payee">
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label class="control-label col-sm-4">Pay Type</label>
                                    <div class="col-sm-8">
                                        <div class="comboBox-wide" id="disbursement_PayType"></div>

                                        <input type="hidden" id="disbursement_PayType_data" class="requiredDisbursement" />
                                        <input type="hidden" id="disbursement_PayType_selectedValue" />
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label class="control-label col-sm-4">Particulars</label>
                                    <div class="col-sm-8">
                                        <textarea class="form-control textarea-custom requiredDisbursement" id="disbursement_Particulars"></textarea>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="control-label col-sm-4">Bank</label>
                                    <div class="col-sm-8">
                                        <div class="comboBox-wide" id="disbursement_Bank"></div>

                                        <input type="hidden" id="disbursement_Bank_data" class="requiredDisbursement" />
                                        <input type="hidden" id="disbursement_Bank_selectedValue" />
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label class="control-label col-sm-4">Check Number</label>
                                    <div class="col-sm-8">
                                        <input type="text" class="form-control input-sm requiredDisbursement" id="disbursement_CheckNumber">
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label class="control-label col-sm-4">Check Date</label>
                                    <div class="col-sm-8">
                                        <div class="comboBox-wide" id="disbursement_CheckDate"></div>
                                        <input type="hidden" id="disbursement_CheckDate_data" class="requiredDisbursement" />
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label class="control-label col-sm-4">Amount</label>
                                    <div class="col-sm-8">
                                        <input type="text" class="form-control input-sm requiredDisbursement" id="disbursement_Amount">
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label class="control-label col-sm-4">Cross Check</label>
                                    <div class="col-sm-8">
                                        <input type="checkbox" id="disbursement_CrossCheck">
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label class="control-label col-sm-4">Prepared by</label>
                                    <div class="col-sm-8">
                                        <div class="comboBox-wide" id="disbursement_PreparedBy"></div>

                                        <input type="hidden" id="disbursement_PreparedBy_data" class="requiredDisbursement" />
                                        <input type="hidden" id="disbursement_PreparedBy_selectedValue" />
                                        <input type="hidden" id="userId_data" value="@userId" />
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label class="control-label col-sm-4">Checked by</label>
                                    <div class="col-sm-8">
                                        <div class="comboBox-wide" id="disbursement_CheckedBy"></div>

                                        <input type="hidden" id="disbursement_CheckedBy_data" class="requiredDisbursement" />
                                        <input type="hidden" id="disbursement_CheckedBy_selectedValue" />
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label class="control-label col-sm-4">Approved by</label>
                                    <div class="col-sm-8">
                                        <div class="comboBox-wide" id="disbursement_ApprovedBy"></div>

                                        <input type="hidden" id="disbursement_ApprovedBy_data" class="requiredDisbursement" />
                                        <input type="hidden" id="disbursement_ApprovedBy_selectedValue" />
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label class="control-label col-sm-4">Lock</label>
                                    <div class="col-sm-8">
                                        <input type="checkbox" id="disbursement_Lock">
                                    </div>
                                </div>
                                <div class="form-group">
                                    <div class="col-sm-4"></div>
                                    <div class="col-sm-8">
                                        <input type="hidden" id="disbursement_IsLocked">
                                        <input type="hidden" id="disbursement_IsLocked_defaultTrue">
                                        <input type="hidden" id="disbursement_IsLocked_defaultFalse">
                                    </div>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
                <ul class="nav nav-tabs" role="tablist" id="myTab">
                    <li role="presentation" class="active"><a data-toggle="tab" href="#DisbursementLine" id="itemTabId">Disbursement Line</a></li>
                </ul>
                <br />
                <div class="tab-content">
                    <div id="DisbursementLine" class="tab-pane fade in active">
                        <div class="row">
                            <div class="col-lg-12" align="right">
                                <button type="submit" class="btn btn-primary btn-sm" id="btnAddDisbursementLine" onclick="cmdAddDisbursementLineButton_OnClick()"><i class="fa fa-plus"></i> Add</button>
                            </div>
                        </div>
                        <br />
                        <div class="row">
                            <div class="col-lg-12">
                                <div id="DisbursementLineGrid" class="grid"></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </section>

        <!-- RR status -->
        <div class="modal fade" id="RRStatus" role="dialog">
            <div class="modal-dialog">
                <!-- Modal content-->
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                        <h4 class="modal-title" id="RRStatusModalLabel">Receiving Receipt Status</h4>
                    </div>
                    <div class="modal-body">

                    </div>
                    <div class="modal-footer">
                        <!--tton class="btn btn-primary btn-sm" id="cmdSaveJournalVoucherLineButton" onclick="cmdJournalVoucherLineSaveButton_OnClick()"><i class="fa fa-save"></i> Save</button>-->
                        <button type="button" id="cmdPOStatusCloseButton" class="btn btn-danger btn-sm" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Spplier Advances -->
        <div class="modal fade" id="SupplierAdvances" role="dialog">
            <div class="modal-dialog">
                <!-- Modal content-->
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                        <h4 class="modal-title" id="SupplierAdvancesModalLabel">Spplier Advances</h4>
                    </div>
                    <div class="modal-body">

                    </div>
                    <div class="modal-footer">
                        <!--tton class="btn btn-primary btn-sm" id="cmdSaveJournalVoucherLineButton" onclick="cmdJournalVoucherLineSaveButton_OnClick()"><i class="fa fa-save"></i> Save</button>-->
                        <button type="button" id="cmdPOStatusCloseButton" class="btn btn-danger btn-sm" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Disbursement Edit Detail -->
        <div class="modal fade" id="disbursementLineEdit" role="dialog">
            <div class="modal-dialog">
                <!-- Modal content-->
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                        <h4 class="modal-title" id="disbursementLineModalLabel">Disbursement Line Detail</h4>
                    </div>
                    <div class="modal-body">
                        <form id="disbursementLineDetailForm">
                            <input type="hidden" id="disbursementLine_Id" />
                            <dl class="dl-horizontal">
                                <dt>Branch</dt>
                                <dd>
                                    <div class="comboBox-wide" id="disbursementLine_branch"></div>

                                    <input type="hidden" id="disbursementLine_branch_data" class="requiredDisbursementLine">
                                    <input type="hidden" id="disbursementLine_branch_selectedValue" />
                                </dd>
                                <dt>Account</dt>
                                <dd>
                                    <div class="comboBox-wide" id="disbursementLine_account"></div>

                                    <input type="hidden" id="disbursementLine_account_data" class="requiredDisbursementLine">
                                    <input type="hidden" id="disbursementLine_account_selectedValue" />
                                </dd>
                                <dt>Article</dt>
                                <dd>
                                    <div class="comboBox-wide" id="disbursementLine_article"></div>

                                    <input type="hidden" id="disbursementLine_article_data" class="requiredDisbursementLine">
                                    <input type="hidden" id="disbursementLine_article_selectedValue" />
                                </dd>
                                <dt>Particulars</dt>
                                <dd><textarea class="form-control textarea-custom requiredDisbursementLine" id="disbursementLine_Particulars"></textarea></dd>
                                <dt>RR No.</dt>
                                <dd>
                                    <div class="comboBox-wide" id="disbursementLine_RRNo"></div>

                                    <input type="hidden" id="disbursementLine_RRNo_data" class="requiredDisbursementLine">
                                    <input type="hidden" id="disbursementLine_RRNo_selectedValue" />
                                </dd>
                                <dt>Amount</dt>
                                <dd><input class="form-control input-sm requiredDisbursementLine" id="disbursementLine_Amount" /></dd>
                            </dl>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-primary btn-sm" id="cmdSaveDisbursementLineButton" onclick="cmdDisbursementLineSaveButton_OnClick()"><i class="fa fa-save"></i> Save</button>
                        <button id="cmdDisbursementLineDetailCloseButton" class="btn btn-danger btn-sm" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- ============== -->
        <!-- Journal Detail -->
        <!-- ============== -->
        <div class="modal fade" id="journalDetail" role="dialog">
            <div class="modal-dialog modal-lg">
                <!-- Modal content-->
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                        <h4 class="modal-title" id="journalModalLabel"> Journal</h4>
                    </div>
                    <div class="modal-body">
                        <center>
                            <h4>
                                <span id="loadingJournalGridList"></span>
                            </h4>
                        </center>
                        <div id="journal_Content">
                            <div class="row" align="left">
                                <div class="col-lg-12">
                                    <div id="journalListGrid" class="grid" align="left"></div>
                                </div>
                            </div>
                            <hr />
                            <div class="row">
                                <div class="col-md-6"></div>
                                <div class="col-md-6" align="right">
                                    <table>
                                        <tr>
                                            <td align="right"> <b>Total Debit:</b> </td>
                                            <td style="padding-left: 35px"></td>
                                            <td> <span id="totalDebitInJournal"></span></td>
                                        </tr>
                                        <tr>
                                            <td align="right"> <b>Total Credit:</b> </td>
                                            <td style="padding-left: 35px"></td>
                                            <td> <span id="totalCreditInJournal"></span></td>
                                        </tr>
                                        <tr>
                                            <td style="padding: 10px"> </td>
                                            <td style="padding: 10px"> </td>
                                            <td style="padding: 10px"> </td>
                                        </tr>
                                        <tr>
                                            <td align="right"> <b>Variance: </b> </td>
                                            <td style="padding-left: 35px"></td>
                                            <td> <span id="variance"></span></td>
                                        </tr>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button id="cmdJournalDetailCloseButton" class="btn btn-danger btn-sm" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- disbursement Line Delete Modal Confirmation -->
        <div class="modal fade" id="deleteDisbursementLineConfirm" role="dialog">
            <div class="modal-dialog modal-sm">
                <!-- Modal content-->
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                        <h4 class="modal-title">Delete Disbursement Line <i class="fa fa-trash"></i></h4>
                    </div>
                    <div class="modal-body">
                        Are you sure you want to delete this?
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-danger btn-sm" id="cmdConfirmDeleteDisbursementLine" onclick="cmdDisbursementLineConfirmDeleteButton_OnClick()"><i class="fa fa-trash"></i> Delete</button>
                        <button id="cmdConfirmDeleteDisbursementLineCloseButton" class="btn btn-primary btn-sm" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Loading Modal -->
        <div class="modal fade" id="loadingModal" tabindex="-1" role="dialog" aria-labelledby="Loading..." aria-hidden="true" data-backdrop="static" data-keyboard="false">
            <div class=" modal-dialog modal-sm">
                <!-- Modal content-->
                <div class="modal-content">
                    <div class="modal-body">
                        <h4>Loading ...</h4>
                    </div>
                    <div class="modal-footer">
                        <img class="img-thumbnail img-responsive center-block img-custom" src='~/images/loading/progress_bar.gif'>
                    </div>
                </div>
            </div>
        </div>

        <!-- Footer -->
        @Html.Partial("_SoftwareFooter")
    </div>

    <!-- SideBar Menu -->
    @Html.Partial("_SoftwareSideBarMenu")

    <div id="c-mask" class="c-mask"></div><!-- /c-mask -->
    <!-- Scripts JavaScripts -->
    @Scripts.Render("~/Scripts/Software-js")
    <script type="text/javascript">
        // ================
        // Global Variables
        // ================
        var disbursements;
        var branches;
        var suppliers;
        var payTypes;
        var banks
        var users;
        var CVDate;
        var CheckDate;
        var cboBranch;
        var cboSupplier;
        var cboPayType;
        var cboBank;
        var cboPreparedBy;
        var cboCheckedBy;
        var cboApprovedBy;

        var disbursementLines;
        var disbursementGrid;
        var btnFirstPageGridDisbursementLine;
        var btnPreviousPageGridDisbursementLine;
        var btnNextPageGridDisbursementLine;
        var btnLastPageGridDisbursementLine;
        var btnCurrentPageGridDisbursementLine;

        var disbursementBranches;
        var cboDisbursementBranch;

        var disbursementLineAccounts;
        var cboDisbursementLineAccount;

        var disbursementLineArticles;
        var cboDisbursementLineArticle;

        var disbursementReceivingReceipts;
        var cboDisbursementLineRR;

        // =======================
        // Get URL Parameter Value
        // =======================
        function getParam(name) {
            name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
            var regexS = "[\\?&]" + name + "=([^&#]*)";
            var regex = new RegExp(regexS);
            var results = regex.exec(window.location.href);
            if (results == null)
                return "";
            else
                return results[1];
        }

        // ===========
        // read Cookie
        // ===========
        function readCookie(name) {
            var nameEQ = name + "=";
            var ca = document.cookie.split(';');
            for (var i = 0; i < ca.length; i++) {
                var c = ca[i];
                while (c.charAt(0) == ' ') {
                    c = c.substring(1, c.length);
                    if (c.indexOf(nameEQ) == 0) {
                        return c.substring(nameEQ.length, c.length);
                    }
                }
            }
            return null;
        }

        // ======================
        // GET Disbursement By Id
        // ======================
        function getDisbursementById() {
            disbursements = new wijmo.collections.ObservableArray;
            var disbursementId = getParam("DisbursementId");
            $('#loadingModal').modal('show');
            if(document.location.search.length == 0) {
                $('#loadingModal').modal('hide');
            } else {
                $.ajax({
                    url: '/api/disbursement/' + disbursementId,
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    data: {},
                    success: function (Results) {
                        $('#loadingModal').modal('hide');
                        document.getElementById('disbursement_Branch_data').value = Results.BranchId;
                        document.getElementById('disbursement_Branch_selectedValue').value = Results.Branch;
                        document.getElementById('disbursement_CVNumber').value = Results.CVNumber;
                        document.getElementById('disbursement_CVNumber_Display').value = Results.CVNumber;
                        document.getElementById('disbursement_CVDate_data').value = Results.CVDate;
                        var CVDate_date = Results.CVDate;
                        CVDate.dispose();
                        CVDate = new wijmo.input.InputDate('#disbursement_CVDate', {
                            format: 'MM/dd/yyyy',
                            value: new Date(CVDate_date),
                            mask: '99/99/9999',
                            onValueChanged: function () {
                                document.getElementById('disbursement_CVDate_data').value = this.value.toLocaleDateString();
                            }
                        });
                        document.getElementById('disbursement_ManualCVNumber').value = Results.ManualCVNumber
                        document.getElementById('disbursement_Supplier_data').value = Results.SupplierId;
                        document.getElementById('disbursement_Supplier_selectedValue').value = Results.Supplier;
                        document.getElementById('disbursement_Payee').value = Results.Payee;
                        document.getElementById('disbursement_PayType_data').value = Results.PayTypeId;
                        document.getElementById('disbursement_PayType_selectedValue').value = Results.PayType;
                        document.getElementById('disbursement_Particulars').value = Results.Particulars;
                        document.getElementById('disbursement_Bank_data').value = Results.BankId;
                        document.getElementById('disbursement_Bank_selectedValue').value = Results.Bank;
                        document.getElementById('disbursement_CheckNumber').value = Results.CheckNumber;
                        document.getElementById('disbursement_CheckDate_data').value = Results.CheckDate;
                        var CheckDate_date = Results.CheckDate;
                        CheckDate.dispose();
                        CheckDate = new wijmo.input.InputDate('#disbursement_CheckDate', {
                            format: 'MM/dd/yyyy',
                            value: new Date(CheckDate_date),
                            mask: '99/99/9999',
                            onValueChanged: function () {
                                document.getElementById('disbursement_CheckDate_data').value = this.value.toLocaleDateString();
                            }
                        });
                        document.getElementById('disbursement_Amount').value = Results.Amount;
                        document.getElementById('disbursement_CrossCheck').checked = Results.IsCrossCheck;
                        document.getElementById('disbursement_PreparedBy_data').value = Results.PreparedById;
                        document.getElementById('disbursement_PreparedBy_selectedValue').value = Results.PreparedBy;
                        document.getElementById('disbursement_CheckedBy_data').value = Results.CheckedById;
                        document.getElementById('disbursement_CheckedBy_selectedValue').value = Results.CheckedBy;
                        document.getElementById('disbursement_ApprovedBy_data').value = Results.ApprovedById;
                        document.getElementById('disbursement_ApprovedBy_selectedValue').value = Results.ApprovedBy;
                        document.getElementById('disbursement_Lock').checked = Results.IsLocked;
                        document.getElementById('createdBy').innerHTML = Results.CreatedBy;
                        document.getElementById('createdDate').innerHTML = Results.CreatedDateTime;
                        document.getElementById('updatedBy').innerHTML = Results.UpdatedBy;
                        document.getElementById('updatedDate').innerHTML = Results.UpdatedDateTime;

                        document.getElementById('disbursement_IsLocked').value = Results.IsLocked;

                        if(document.getElementById('disbursement_IsLocked').value == 'true') {

                            var CVDate_date = Results.CVDate;
                            CVDate.dispose();
                            CVDate = new wijmo.input.InputDate('#disbursement_CVDate', {
                                disabled: true,
                                format: 'MM/dd/yyyy',
                                value: new Date(CVDate_date),
                                mask: '99/99/9999',
                                onValueChanged: function () {
                                    document.getElementById('disbursement_CVDate_data').value = this.value.toLocaleDateString();
                                }
                            });

                            var CheckDate_date = Results.CheckDate;
                            CheckDate.dispose();
                            CheckDate = new wijmo.input.InputDate('#disbursement_CheckDate', {
                                disabled: true,
                                format: 'MM/dd/yyyy',
                                value: new Date(CheckDate_date),
                                mask: '99/99/9999',
                                onValueChanged: function () {
                                    document.getElementById('disbursement_CheckDate_data').value = this.value.toLocaleDateString();
                                }
                            });
                            document.getElementById('disbursement_ManualCVNumber').disabled = true;
                            document.getElementById('disbursement_Particulars').disabled = true
                            document.getElementById('disbursement_Payee').disabled = true;
                            document.getElementById('disbursement_CheckNumber').disabled = true;
                            document.getElementById('disbursement_Amount').disabled = true;


                            $("#cmdDisbursementJournal").prop("disabled", false);
                            $("#cmdDisbursementSaveLock").prop("disabled", true);
                            $("#cmdDisbursementSave").prop("disabled", true);
                            $("#cmdDisbursementEdit").prop("disabled", false);
                            $("#cmdDisbursementPrint").prop("disabled", false);

                            $("#cmdAP").prop("disabled", true);
                            $("#cmdAdvances").prop("disabled", true);
                            $("#btnAddDisbursementLine").prop("disabled", true);

                        } else if(document.getElementById('disbursement_IsLocked').value == 'false') {

                            var CVDate_date = Results.CVDate;
                            CVDate.dispose();
                            CVDate = new wijmo.input.InputDate('#disbursement_CVDate', {
                                disabled: false,
                                format: 'MM/dd/yyyy',
                                value: new Date(CVDate_date),
                                mask: '99/99/9999',
                                onValueChanged: function () {
                                    document.getElementById('disbursement_CVDate_data').value = this.value.toLocaleDateString();
                                }
                            });

                            var CheckDate_date = Results.CheckDate;
                            CheckDate.dispose();
                            CheckDate = new wijmo.input.InputDate('#disbursement_CheckDate', {
                                disabled: false,
                                format: 'MM/dd/yyyy',
                                value: new Date(CheckDate_date),
                                mask: '99/99/9999',
                                onValueChanged: function () {
                                    document.getElementById('disbursement_CheckDate_data').value = this.value.toLocaleDateString();
                                }
                            });
                            document.getElementById('disbursement_ManualCVNumber').disabled = false;
                            document.getElementById('disbursement_Particulars').disabled = false;
                            document.getElementById('disbursement_Payee').disabled = false;
                            document.getElementById('disbursement_CheckNumber').disabled = false;
                            //document.getElementById('disbursement_Amount').disabled = false;

                            $("#cmdDisbursementJournal").prop("disabled", true);
                            $("#cmdDisbursementSaveLock").prop("disabled", false);
                            $("#cmdDisbursementSave").prop("disabled", true);
                            $("#cmdDisbursementEdit").prop("disabled", true);
                            $("#cmdDisbursementPrint").prop("disabled", true);

                            $("#cmdAP").prop("disabled", false);
                            $("#cmdAdvances").prop("disabled", false);
                            $("#btnAddDisbursementLine").prop("disabled", false);

                        } else {
                            console.log("Invalid IsLocked");
                        }

                        getBranchesForComboBox();
                        getSupplierForComboBox();
                        getPaytypeForComboBox();
                        getBankForComboBox();
                        getUsersForComboBox();
                    }
                }).fail(function (xhr, textStatus, err) {
                    alert(err);
                });
            }
        }

        // =========================
        // GET Disbursements Last Id
        // =========================
        function getDisbursementLastInsertedId() {
            var disbursements = new wijmo.collections.ObservableArray;
            $.ajax({
                url: '/api/disbursementLastId',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (Results) {
                    window.location = '/Software/DisbursementDetail?DisbursementId=' + Results.Id;
                    window.setTimeout(function () { location.reload() }, 1000);
                }
            });
            return disbursements;
        }

        // ========================
        // GET Branch for Combo Box
        // ========================
        function getBranchesForComboBox() {
            branches = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listBranch',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            branches.push({
                                BranchId: results[i]["Id"],
                                BranchBranch: results[i]["Branch"]
                            });
                        }
                        
                        var disbursementId = getParam("DisbursementId");
                        var branchId = readCookie("branchId");
                        if(document.location.search.length == 0) {
                            $.ajax({
                                url: '/api/listBranchById/' + branchId,
                                cache: false,
                                type: 'GET',
                                contentType: 'application/json; charset=utf-8',
                                data: {},
                                success: function (results) {
                                    if (results.length > 0) {
                                        branches.push({
                                            BranchId: results.Id,
                                            Branch: results.Branch
                                        });
                                    }
                                    document.getElementById('disbursement_Branch_data').value = results.Id;
                                    document.getElementById('disbursement_Branch_selectedValue').value = results.Branch;

                                    createCboBranch(branches);
                                }
                            });
                        } else {
                            createCboBranch(branches);
                        }
                    }
                }
            });
            return branches;
        }

        // ======================
        // Combo Box for Branches
        // ======================
        function createCboBranch(branches) {
            var branchCollections = new wijmo.collections.CollectionView(branches);
            var branchList = new Array();
            for (var i = 0; i < branchCollections.items.length; i++) {
                branchList.push(branchCollections.items[i].BranchBranch);
            }

            cboBranch.dispose();
            cboBranch = new wijmo.input.ComboBox('#disbursement_Branch', {
                disabled: true,
                placeholder: "Select Branch",
                itemsSource: branchList,
                isEditable: false,
                required: false,
                selectedValue: document.getElementById('disbursement_Branch_selectedValue').value.toString(),
                onSelectedIndexChanged: function () {
                    $("#disbursement_Branch_data").val(branchCollections.items[this.selectedIndex].BranchId);
                }
            });
        }

        // ==========================
        // GET Supplier for Combo Box
        // ==========================
        function getSupplierForComboBox() {
            suppliers = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listArticleByArticleTypeId/3',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            suppliers.push({
                                SupplierId: results[i]["Id"],
                                Supplier: results[i]["Article"]
                            });
                        }
                        createCbosupplier(suppliers);
                    }
                }
            });
            return suppliers;
        }

        // =======================
        // Combo Box for Suppliers
        // =======================
        function createCbosupplier(suppliers) {
            var supplierCollection = new wijmo.collections.CollectionView(suppliers);
            var supplierList = new Array();
            for (var i = 0; i < supplierCollection.items.length; i++) {
                supplierList.push(supplierCollection.items[i].Supplier);
            }

            if(document.getElementById('disbursement_IsLocked').value == 'true') {
                cboSupplier.dispose();
                cboSupplier = new wijmo.input.ComboBox('#disbursement_Supplier', {
                    disabled: true,
                    placeholder: "Select Supplier",
                    itemsSource: supplierList,
                    isEditable: false,
                    required: false,
                    selectedValue: document.getElementById('disbursement_Supplier_selectedValue').value.toString(),
                    onSelectedIndexChanged: function () {
                        $("#disbursement_Supplier_data").val(supplierCollection.items[this.selectedIndex].SupplierId);
                    }
                });
            } else if(document.getElementById('disbursement_IsLocked').value == 'false') {
                cboSupplier.dispose();
                cboSupplier = new wijmo.input.ComboBox('#disbursement_Supplier', {
                    disabled: false,
                    placeholder: "Select Supplier",
                    itemsSource: supplierList,
                    isEditable: false,
                    required: false,
                    selectedValue: document.getElementById('disbursement_Supplier_selectedValue').value.toString(),
                    onSelectedIndexChanged: function () {
                        $("#disbursement_Supplier_data").val(supplierCollection.items[this.selectedIndex].SupplierId);
                    }
                });
            } else {
                cboSupplier.dispose();
                cboSupplier = new wijmo.input.ComboBox('#disbursement_Supplier', {
                    placeholder: "Select Supplier",
                    itemsSource: supplierList,
                    isEditable: false,
                    required: false,
                    selectedValue: document.getElementById('disbursement_Supplier_selectedValue').value.toString(),
                    onSelectedIndexChanged: function () {
                        $("#disbursement_Supplier_data").val(supplierCollection.items[this.selectedIndex].SupplierId);
                    }
                });
            }
        }

        // =========================
        // GET Paytype for Combo Box
        // =========================
        function getPaytypeForComboBox() {
            payTypes = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listPayType',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            payTypes.push({
                                PayTypeId: results[i]["Id"],
                                PayType: results[i]["PayType"]
                            });
                        }
                        createCboPaytype(payTypes);
                    }
                }
            });
            return payTypes;
        }

        // =====================
        // Combo Box for Paytype
        // =====================
        function createCboPaytype(payTypes) {
            var payTypeCollection = new wijmo.collections.CollectionView(payTypes);
            var payTypeList = new Array();
            for (var i = 0; i < payTypeCollection.items.length; i++) {
                payTypeList.push(payTypeCollection.items[i].PayType);
            }

            if(document.getElementById('disbursement_IsLocked').value == 'true') {
                cboPayType.dispose();
                cboPayType = new wijmo.input.ComboBox('#disbursement_PayType', {
                    disabled: true,
                    placeholder: "Select Pay Type",
                    itemsSource: payTypeList,
                    isEditable: false,
                    required: false,
                    selectedValue: document.getElementById('disbursement_PayType_selectedValue').value.toString(),
                    onSelectedIndexChanged: function () {
                        $("#disbursement_PayType_data").val(payTypeCollection.items[this.selectedIndex].PayTypeId);
                    }
                });
            } else if(document.getElementById('disbursement_IsLocked').value == 'false') {
                cboPayType.dispose();
                cboPayType = new wijmo.input.ComboBox('#disbursement_PayType', {
                    disabled: false,
                    placeholder: "Select Pay Type",
                    itemsSource: payTypeList,
                    isEditable: false,
                    required: false,
                    selectedValue: document.getElementById('disbursement_PayType_selectedValue').value.toString(),
                    onSelectedIndexChanged: function () {
                        $("#disbursement_PayType_data").val(payTypeCollection.items[this.selectedIndex].PayTypeId);
                    }
                });
            } else {
                cboPayType.dispose();
                cboPayType = new wijmo.input.ComboBox('#disbursement_PayType', {
                    placeholder: "Select Pay Type",
                    itemsSource: payTypeList,
                    isEditable: false,
                    required: false,
                    selectedValue: document.getElementById('disbursement_PayType_selectedValue').value.toString(),
                    onSelectedIndexChanged: function () {
                        $("#disbursement_PayType_data").val(payTypeCollection.items[this.selectedIndex].PayTypeId);
                    }
                });
            }
        }

        // ======================
        // GET Bank for Combo Box
        // ======================
        function getBankForComboBox() {
            banks = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listArticleByArticleTypeId/5',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            banks.push({
                                BankId: results[i]["Id"],
                                Bank: results[i]["Article"]
                            });
                        }
                        createCboBank(banks);
                    }
                }
            });
            return banks;
        }

        // ==================
        // Combo Box for Bank
        // ==================
        function createCboBank(banks) {
            var bankCollection = new wijmo.collections.CollectionView(banks);
            var bankList = new Array();
            for (var i = 0; i < bankCollection.items.length; i++) {
                bankList.push(bankCollection.items[i].Bank);
            }

            if(document.getElementById('disbursement_IsLocked').value == 'true') {
                cboBank.dispose();
                cboBank = new wijmo.input.ComboBox('#disbursement_Bank', {
                    disabled: true,
                    placeholder: "Select Bank",
                    itemsSource: bankList,
                    isEditable: false,
                    required: false,
                    selectedValue: document.getElementById('disbursement_Bank_selectedValue').value.toString(),
                    onSelectedIndexChanged: function () {
                        $("#disbursement_Bank_data").val(bankCollection.items[this.selectedIndex].BankId);
                    }
                });
            } else if(document.getElementById('disbursement_IsLocked').value == 'false') {
                cboBank.dispose();
                cboBank = new wijmo.input.ComboBox('#disbursement_Bank', {
                    disabled: false,
                    placeholder: "Select Bank",
                    itemsSource: bankList,
                    isEditable: false,
                    required: false,
                    selectedValue: document.getElementById('disbursement_Bank_selectedValue').value.toString(),
                    onSelectedIndexChanged: function () {
                        $("#disbursement_Bank_data").val(bankCollection.items[this.selectedIndex].BankId);
                    }
                });
            } else {
                cboBank.dispose();
                cboBank = new wijmo.input.ComboBox('#disbursement_Bank', {
                    placeholder: "Select Bank",
                    itemsSource: bankList,
                    isEditable: false,
                    required: false,
                    selectedValue: document.getElementById('disbursement_Bank_selectedValue').value.toString(),
                    onSelectedIndexChanged: function () {
                        $("#disbursement_Bank_data").val(bankCollection.items[this.selectedIndex].BankId);
                    }
                });
            }
        }

        // =======================
        // GET Users for Combo Box
        // =======================
        function getUsersForComboBox() {
            users = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listUser',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            users.push({
                                UserId: results[i]["Id"],
                                UserFullName: results[i]["FullName"]
                            });
                        }
                        
                        var disbursementId = getParam("DisbursementId");
                        var branchId = readCookie("branchId");
                        if(document.location.search.length == 0) {
                            var userId = document.getElementById('userId_data').value;
                            $.ajax({
                                url: '/api/listByMstUserId/' + userId,
                                cache: false,
                                type: 'GET',
                                contentType: 'application/json; charset=utf-8',
                                data: {},
                                success: function (results) {
                                    if (results.length > 0) {
                                        users.push({
                                            UserId: results.Id,
                                            UserFullName: results.FullName
                                        });
                                    }

                                    document.getElementById('disbursement_PreparedBy_data').value = results.Id;
                                    document.getElementById('disbursement_PreparedBy_selectedValue').value =  results.FullName;

                                    createCboUserPreparedBy(users);
                                    createCboUserCheckedBy(users);
                                    createCboUserApprovedBy(users);
                                }
                            });
                        } else {
                            createCboUserPreparedBy(users);
                            createCboUserCheckedBy(users);
                            createCboUserApprovedBy(users);
                        }
                    }
                }
            });
            return users;
        }

        // ==================================
        // Combo Box for Users - Prepared By
        // ==================================
        function createCboUserPreparedBy(users) {
            var usersCollection = new wijmo.collections.CollectionView(users);
            var userList = new Array();
            for (var i = 0; i < usersCollection.items.length; i++) {
                userList.push(usersCollection.items[i].UserFullName);
            }

            cboPreparedBy.dispose();
            cboPreparedBy = new wijmo.input.ComboBox('#disbursement_PreparedBy', {
                disabled: true,
                placeholder: "Select User",
                itemsSource: userList,
                isEditable: false,
                required: false,
                selectedValue: document.getElementById('disbursement_PreparedBy_selectedValue').value.toString(),
                onSelectedIndexChanged: function () {
                    $("#disbursement_PreparedBy_data").val(usersCollection.items[this.selectedIndex].UserId);
                }
            });
        }

        // ==================================
        // Combo Box for Users - Checked By
        // ==================================
        function createCboUserCheckedBy(users) {
            var usersCollection = new wijmo.collections.CollectionView(users);
            var userList = new Array();
            for (var i = 0; i < usersCollection.items.length; i++) {
                userList.push(usersCollection.items[i].UserFullName);
            }

            if(document.getElementById('disbursement_IsLocked').value == 'true') {
                cboCheckedBy.dispose();
                cboCheckedBy = new wijmo.input.ComboBox('#disbursement_CheckedBy', {
                    disabled: true,
                    placeholder: "Select User",
                    itemsSource: userList,
                    isEditable: false,
                    required: false,
                    selectedValue: document.getElementById('disbursement_CheckedBy_selectedValue').value.toString(),
                    onSelectedIndexChanged: function () {
                        $("#disbursement_CheckedBy_data").val(usersCollection.items[this.selectedIndex].UserId);
                    }
                });
            } else if(document.getElementById('disbursement_IsLocked').value == 'false') {
                cboCheckedBy.dispose();
                cboCheckedBy = new wijmo.input.ComboBox('#disbursement_CheckedBy', {
                    disabled: false,
                    placeholder: "Select User",
                    itemsSource: userList,
                    isEditable: false,
                    required: false,
                    selectedValue: document.getElementById('disbursement_CheckedBy_selectedValue').value.toString(),
                    onSelectedIndexChanged: function () {
                        $("#disbursement_CheckedBy_data").val(usersCollection.items[this.selectedIndex].UserId);
                    }
                });
            } else {
                cboCheckedBy.dispose();
                cboCheckedBy = new wijmo.input.ComboBox('#disbursement_CheckedBy', {
                    placeholder: "Select User",
                    itemsSource: userList,
                    isEditable: false,
                    required: false,
                    selectedValue: document.getElementById('disbursement_CheckedBy_selectedValue').value.toString(),
                    onSelectedIndexChanged: function () {
                        $("#disbursement_CheckedBy_data").val(usersCollection.items[this.selectedIndex].UserId);
                    }
                });
            }
        }

        // ==================================
        // Combo Box for Users - Approved By
        // ==================================
        function createCboUserApprovedBy(users) {
            var usersCollection = new wijmo.collections.CollectionView(users);
            var userList = new Array();
            for (var i = 0; i < usersCollection.items.length; i++) {
                userList.push(usersCollection.items[i].UserFullName);
            }

            if(document.getElementById('disbursement_IsLocked').value == 'true') {
                cboApprovedBy.dispose();
                cboApprovedBy = new wijmo.input.ComboBox('#disbursement_ApprovedBy', {
                    disabled: true,
                    placeholder: "Select User",
                    itemsSource: userList,
                    isEditable: false,
                    required: false,
                    selectedValue: document.getElementById('disbursement_ApprovedBy_selectedValue').value.toString(),
                    onSelectedIndexChanged: function () {
                        $("#disbursement_ApprovedBy_data").val(usersCollection.items[this.selectedIndex].UserId);
                    }
                });
            } else if(document.getElementById('disbursement_IsLocked').value == 'false') {
                cboApprovedBy.dispose();
                cboApprovedBy = new wijmo.input.ComboBox('#disbursement_ApprovedBy', {
                    disabled: false,
                    placeholder: "Select User",
                    itemsSource: userList,
                    isEditable: false,
                    required: false,
                    selectedValue: document.getElementById('disbursement_ApprovedBy_selectedValue').value.toString(),
                    onSelectedIndexChanged: function () {
                        $("#disbursement_ApprovedBy_data").val(usersCollection.items[this.selectedIndex].UserId);
                    }
                });
            } else {
                cboApprovedBy.dispose();
                cboApprovedBy = new wijmo.input.ComboBox('#disbursement_ApprovedBy', {
                    placeholder: "Select User",
                    itemsSource: userList,
                    isEditable: false,
                    required: false,
                    selectedValue: document.getElementById('disbursement_ApprovedBy_selectedValue').value.toString(),
                    onSelectedIndexChanged: function () {
                        $("#disbursement_ApprovedBy_data").val(usersCollection.items[this.selectedIndex].UserId);
                    }
                });
            }
        }

        // =====================================================
        // Function with leading zeroes to display the CV Number
        // =====================================================
        function zerofill(number, length) {
            var result = number.toString();
            var pad = length - result.length;
            while(pad > 0) {
                result = '0' + result;
                pad--;
            }
            return result;
        }

        // ================
        // ADD Disbursement
        // ================
        function btnDisbursementSave_OnClick() {
            var disbursementObject = new Object();
            var disbursementId = getParam("DisbursementId");
            disbursementObject.BranchId = document.getElementById('disbursement_Branch_data').value;
            disbursementObject.CVNumber = document.getElementById('disbursement_CVNumber_Display').value;
            disbursementObject.CVDate = document.getElementById('disbursement_CVDate_data').value;
            disbursementObject.SupplierId = document.getElementById('disbursement_Supplier_data').value;
            disbursementObject.Payee = document.getElementById('disbursement_Payee').value;
            disbursementObject.PayTypeId = document.getElementById('disbursement_PayType_data').value;
            disbursementObject.BankId = document.getElementById('disbursement_Bank_data').value;
            disbursementObject.ManualCVNumber = document.getElementById('disbursement_ManualCVNumber').value;
            disbursementObject.Particulars = document.getElementById('disbursement_Particulars').value;
            disbursementObject.CheckNumber = document.getElementById('disbursement_CheckNumber').value;
            disbursementObject.CheckDate = document.getElementById('disbursement_CheckDate_data').value;
            disbursementObject.Amount = document.getElementById('disbursement_Amount').value;
            disbursementObject.IsCrossCheck = document.getElementById('disbursement_CrossCheck').checked;
            disbursementObject.IsClear = false;
            disbursementObject.PreparedById = document.getElementById('disbursement_PreparedBy_data').value;
            disbursementObject.CheckedById = document.getElementById('disbursement_CheckedBy_data').value;
            disbursementObject.ApprovedById = document.getElementById('disbursement_ApprovedBy_data').value;
            var data = JSON.stringify(disbursementObject);

            if( document.getElementById('disbursement_Branch_data').value == '') {
                document.getElementById("disbursement_Branch").style.border = "1px solid red";
            } else {
                document.getElementById("disbursement_Branch").style.border = "1px solid #C8C8C8   ";
            }

            if( document.getElementById('disbursement_CVDate_data').value == '') {
                document.getElementById("disbursement_CVDate").style.border = "1px solid red";
            } else {
                document.getElementById("disbursement_CVDate").style.border = "1px solid #C8C8C8   ";
            }

            if( document.getElementById('disbursement_Supplier_data').value == '') {
                document.getElementById("disbursement_Supplier").style.border = "1px solid red";
            } else {
                document.getElementById("disbursement_Supplier").style.border = "1px solid #C8C8C8   ";
            }

            if( document.getElementById('disbursement_PayType_data').value == '') {
                document.getElementById("disbursement_PayType").style.border = "1px solid red";
            } else {
                document.getElementById("disbursement_PayType").style.border = "1px solid #C8C8C8   ";
            }

            if( document.getElementById('disbursement_Bank_data').value == '') {
                document.getElementById("disbursement_Bank").style.border = "1px solid red";
            } else {
                document.getElementById("disbursement_Bank").style.border = "1px solid #C8C8C8   ";
            }

            if( document.getElementById('disbursement_CheckDate_data').value == '') {
                document.getElementById("disbursement_CheckDate").style.border = "1px solid red";
            } else {
                document.getElementById("disbursement_CheckDate").style.border = "1px solid #C8C8C8   ";
            }

            if( document.getElementById('disbursement_PreparedBy_data').value == '') {
                document.getElementById("disbursement_PreparedBy").style.border = "1px solid red";
            } else {
                document.getElementById("disbursement_PreparedBy").style.border = "1px solid #C8C8C8   ";
            }

            if( document.getElementById('disbursement_CheckedBy_data').value == '') {
                document.getElementById("disbursement_CheckedBy").style.border = "1px solid red";
            } else {
                document.getElementById("disbursement_CheckedBy").style.border = "1px solid #C8C8C8   ";
            }

            if( document.getElementById('disbursement_ApprovedBy_data').value == '') {
                document.getElementById("disbursement_ApprovedBy").style.border = "1px solid red";
            } else {
                document.getElementById("disbursement_ApprovedBy").style.border = "1px solid #C8C8C8   ";
            }

            var isValid = true;
            $('.requiredDisbursement').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                }
                else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            if (isValid == false) {
                toastr.error("Invalid Entry");
                e.preventDefault();
            }
            else {
                if (document.location.search.length == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/addDisbursement',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: data,
                        statusCode: {
                            200: function () {
                                $("#cmdDisbursementJournal").prop("disabled", true);
                                $("#cmdDisbursementSaveLock").prop("disabled", true);
                                $("#cmdDisbursementSave").prop("disabled", true);
                                $("#cmdDisbursementEdit").prop("disabled", true);
                                $("#cmdDisbursementPrint").prop("disabled", true);
                                $("#cmdDisbursementClose").prop("disabled", true);
                                toastr.success("Successfully Saved");
                                setTimeout(getDisbursementLastInsertedId, 1000)
                            },
                            404: function () {
                                toastr.error("Can't Save");
                                $("#cmdDisbursementJournal").prop("disabled", false);
                                $("#cmdDisbursementSaveLock").prop("disabled", false);
                                $("#cmdDisbursementSave").prop("disabled", false);
                                $("#cmdDisbursementEdit").prop("disabled", false);
                                $("#cmdDisbursementPrint").prop("disabled", false);
                                $("#cmdDisbursementClose").prop("disabled", false);
                            },
                            400: function () {
                                toastr.error("Bad Request");
                                $("#cmdDisbursementJournal").prop("disabled", false);
                                $("#cmdDisbursementSaveLock").prop("disabled", false);
                                $("#cmdDisbursementSave").prop("disabled", false);
                                $("#cmdDisbursementEdit").prop("disabled", false);
                                $("#cmdDisbursementPrint").prop("disabled", false);
                                $("#cmdDisbursementClose").prop("disabled", false);
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/updateDisbursement/' + disbursementId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: data,
                        statusCode: {
                            200: function () {
                                $("#cmdDisbursementJournal").prop("disabled", true);
                                $("#cmdDisbursementSaveLock").prop("disabled", true);
                                $("#cmdDisbursementSave").prop("disabled", true);
                                $("#cmdDisbursementEdit").prop("disabled", true);
                                $("#cmdDisbursementPrint").prop("disabled", true);
                                $("#cmdDisbursementClose").prop("disabled", true);
                                toastr.success("Successfully Updated");
                                window.setTimeout(function () {
                                    location.reload()
                                }, 1000);
                            },
                            404: function () {
                                toastr.error("Can't Save");
                                $("#cmdDisbursementJournal").prop("disabled", false);
                                $("#cmdDisbursementSaveLock").prop("disabled", false);
                                $("#cmdDisbursementSave").prop("disabled", false);
                                $("#cmdDisbursementEdit").prop("disabled", false);
                                $("#cmdDisbursementPrint").prop("disabled", false);
                                $("#cmdDisbursementClose").prop("disabled", false);
                            },
                            400: function () {
                                toastr.error("Bad Request");
                                $("#cmdDisbursementJournal").prop("disabled", false);
                                $("#cmdDisbursementSaveLock").prop("disabled", false);
                                $("#cmdDisbursementSave").prop("disabled", false);
                                $("#cmdDisbursementEdit").prop("disabled", false);
                                $("#cmdDisbursementPrint").prop("disabled", false);
                                $("#cmdDisbursementClose").prop("disabled", false);
                            }
                        }
                    });
                }
            }
        }

        // =============================
        // Save Lock Disbursement - lock
        // =============================
        function btnDisbursementSaveLock_OnClick() {
            var disbursementObject = new Object();
            var disbursementId = getParam("DisbursementId");
            disbursementObject.BranchId = document.getElementById('disbursement_Branch_data').value;
            disbursementObject.CVNumber = document.getElementById('disbursement_CVNumber_Display').value;
            disbursementObject.CVDate = document.getElementById('disbursement_CVDate_data').value;
            disbursementObject.SupplierId = document.getElementById('disbursement_Supplier_data').value;
            disbursementObject.Payee = document.getElementById('disbursement_Payee').value;
            disbursementObject.PayTypeId = document.getElementById('disbursement_PayType_data').value;
            disbursementObject.BankId = document.getElementById('disbursement_Bank_data').value;
            disbursementObject.ManualCVNumber = document.getElementById('disbursement_ManualCVNumber').value;
            disbursementObject.Particulars = document.getElementById('disbursement_Particulars').value;
            disbursementObject.CheckNumber = document.getElementById('disbursement_CheckNumber').value;
            disbursementObject.CheckDate = document.getElementById('disbursement_CheckDate_data').value;
            //disbursementObject.Amount = document.getElementById('disbursement_Amount').value;
            disbursementObject.IsCrossCheck = document.getElementById('disbursement_CrossCheck').checked;
            disbursementObject.IsClear = false;
            disbursementObject.PreparedById = document.getElementById('disbursement_PreparedBy_data').value;
            disbursementObject.CheckedById = document.getElementById('disbursement_CheckedBy_data').value;
            disbursementObject.ApprovedById = document.getElementById('disbursement_ApprovedBy_data').value;
            disbursementObject.IsLocked = true;
            var data = JSON.stringify(disbursementObject);

            if( document.getElementById('disbursement_Branch_data').value == '') {
                document.getElementById("disbursement_Branch").style.border = "1px solid red";
            } else {
                document.getElementById("disbursement_Branch").style.border = "1px solid #C8C8C8   ";
            }

            if( document.getElementById('disbursement_CVDate_data').value == '') {
                document.getElementById("disbursement_CVDate").style.border = "1px solid red";
            } else {
                document.getElementById("disbursement_CVDate").style.border = "1px solid #C8C8C8   ";
            }

            if( document.getElementById('disbursement_Supplier_data').value == '') {
                document.getElementById("disbursement_Supplier").style.border = "1px solid red";
            } else {
                document.getElementById("disbursement_Supplier").style.border = "1px solid #C8C8C8   ";
            }

            if( document.getElementById('disbursement_PayType_data').value == '') {
                document.getElementById("disbursement_PayType").style.border = "1px solid red";
            } else {
                document.getElementById("disbursement_PayType").style.border = "1px solid #C8C8C8   ";
            }

            if( document.getElementById('disbursement_Bank_data').value == '') {
                document.getElementById("disbursement_Bank").style.border = "1px solid red";
            } else {
                document.getElementById("disbursement_Bank").style.border = "1px solid #C8C8C8   ";
            }

            if( document.getElementById('disbursement_CheckDate_data').value == '') {
                document.getElementById("disbursement_CheckDate").style.border = "1px solid red";
            } else {
                document.getElementById("disbursement_CheckDate").style.border = "1px solid #C8C8C8   ";
            }

            if( document.getElementById('disbursement_PreparedBy_data').value == '') {
                document.getElementById("disbursement_PreparedBy").style.border = "1px solid red";
            } else {
                document.getElementById("disbursement_PreparedBy").style.border = "1px solid #C8C8C8   ";
            }

            if( document.getElementById('disbursement_CheckedBy_data').value == '') {
                document.getElementById("disbursement_CheckedBy").style.border = "1px solid red";
            } else {
                document.getElementById("disbursement_CheckedBy").style.border = "1px solid #C8C8C8   ";
            }

            if( document.getElementById('disbursement_ApprovedBy_data').value == '') {
                document.getElementById("disbursement_ApprovedBy").style.border = "1px solid red";
            } else {
                document.getElementById("disbursement_ApprovedBy").style.border = "1px solid #C8C8C8   ";
            }

            var isValid = true;
            $('.requiredDisbursement').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                }
                else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            if (isValid == false) {
                toastr.error("Invalid Entry");
                e.preventDefault();
            }
            else {
                if (document.location.search.length == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/addDisbursement',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: data,
                        statusCode: {
                            200: function () {
                                $("#cmdDisbursementJournal").prop("disabled", true);
                                $("#cmdDisbursementSaveLock").prop("disabled", true);
                                $("#cmdDisbursementSave").prop("disabled", true);
                                $("#cmdDisbursementEdit").prop("disabled", true);
                                $("#cmdDisbursementPrint").prop("disabled", true);
                                $("#cmdDisbursementClose").prop("disabled", true);
                                toastr.success("Successfully Saved");
                                setTimeout(getDisbursementLastInsertedId, 1000)
                            },
                            404: function () {
                                toastr.error("Can't Save");
                                $("#cmdDisbursementJournal").prop("disabled", false);
                                $("#cmdDisbursementSaveLock").prop("disabled", false);
                                $("#cmdDisbursementSave").prop("disabled", false);
                                $("#cmdDisbursementEdit").prop("disabled", false);
                                $("#cmdDisbursementPrint").prop("disabled", false);
                                $("#cmdDisbursementClose").prop("disabled", false);
                            },
                            400: function () {
                                toastr.error("Bad Request");
                                $("#cmdDisbursementJournal").prop("disabled", false);
                                $("#cmdDisbursementSaveLock").prop("disabled", false);
                                $("#cmdDisbursementSave").prop("disabled", false);
                                $("#cmdDisbursementEdit").prop("disabled", false);
                                $("#cmdDisbursementPrint").prop("disabled", false);
                                $("#cmdDisbursementClose").prop("disabled", false);
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/updateDisbursement/' + disbursementId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: data,
                        statusCode: {
                            200: function () {
                                $("#cmdDisbursementJournal").prop("disabled", true);
                                $("#cmdDisbursementSaveLock").prop("disabled", true);
                                $("#cmdDisbursementSave").prop("disabled", true);
                                $("#cmdDisbursementEdit").prop("disabled", true);
                                $("#cmdDisbursementPrint").prop("disabled", true);
                                $("#cmdDisbursementClose").prop("disabled", true);
                                toastr.success("Successfully Updated");
                                window.setTimeout(function () {
                                    location.reload()
                                }, 1000);
                            },
                            404: function () {
                                toastr.error("Can't Save");
                                $("#cmdDisbursementJournal").prop("disabled", false);
                                $("#cmdDisbursementSaveLock").prop("disabled", false);
                                $("#cmdDisbursementSave").prop("disabled", false);
                                $("#cmdDisbursementEdit").prop("disabled", false);
                                $("#cmdDisbursementPrint").prop("disabled", false);
                                $("#cmdDisbursementClose").prop("disabled", false);
                            },
                            400: function () {
                                toastr.error("Bad Request");
                                $("#cmdDisbursementJournal").prop("disabled", false);
                                $("#cmdDisbursementSaveLock").prop("disabled", false);
                                $("#cmdDisbursementSave").prop("disabled", false);
                                $("#cmdDisbursementEdit").prop("disabled", false);
                                $("#cmdDisbursementPrint").prop("disabled", false);
                                $("#cmdDisbursementClose").prop("disabled", false);
                            }
                        }
                    });
                }
            }
        }

        // ================
        // Edit Disbursment
        // ================
        function btnDisbursementEdit_OnClick() {
            var disbursementObject = new Object();
            var disbursementId = getParam("DisbursementId");
            disbursementObject.IsLocked = false;
            var data = JSON.stringify(disbursementObject);
            $.ajax({
                type: "PUT",
                url: '/api/updateDisbursementIsLocked/' + disbursementId,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: data,
                statusCode: {
                    200: function () {
                        $("#cmdDisbursementJournal").prop("disabled", true);
                        $("#cmdDisbursementSaveLock").prop("disabled", true);
                        $("#cmdDisbursementSave").prop("disabled", true);
                        $("#cmdDisbursementEdit").prop("disabled", true);
                        $("#cmdDisbursementPrint").prop("disabled", true);
                        $("#cmdDisbursementClose").prop("disabled", true);
                        toastr.success("Unlocked");
                        window.setTimeout(function () {
                            location.reload()
                        }, 1000);
                    },
                    404: function () {
                        toastr.error("Can't Save");
                        $("#cmdDisbursementJournal").prop("disabled", false);
                        $("#cmdDisbursementSaveLock").prop("disabled", false);
                        $("#cmdDisbursementSave").prop("disabled", false);
                        $("#cmdDisbursementEdit").prop("disabled", false);
                        $("#cmdDisbursementPrint").prop("disabled", false);
                        $("#cmdDisbursementClose").prop("disabled", false);
                    },
                    400: function () {
                        toastr.error("Bad Request");
                        $("#cmdDisbursementJournal").prop("disabled", false);
                        $("#cmdDisbursementSaveLock").prop("disabled", false);
                        $("#cmdDisbursementSave").prop("disabled", false);
                        $("#cmdDisbursementEdit").prop("disabled", false);
                        $("#cmdDisbursementPrint").prop("disabled", false);
                        $("#cmdDisbursementClose").prop("disabled", false);
                    }
                }
            });
        }

        // ==========================
        // GET Disbursement Line List
        // ==========================
        function getDisbursementLines() {
            var disbursementLines = new wijmo.collections.ObservableArray;
            var disbursementId = getParam("DisbursementId");
            if(document.location.search.length > 0) {
                $.ajax({
                    url: '/api/listDisbursementLineByCVId/' + disbursementId,
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    data: {},
                    success: function (Results) {
                        $('#loadingModal').modal('hide');
                        if (Results.length > 0) {
                            var disbursements = new wijmo.collections.ObservableArray;
                            var disbursementId = getParam("DisbursementId");
                            $.ajax({
                                url: '/api/disbursement/' + disbursementId,
                                cache: false,
                                type: 'GET',
                                contentType: 'application/json; charset=utf-8',
                                data: {},
                                success: function (DisbursementResults) {
                                    if (DisbursementResults.length > 0) {
                                        disbursements.push({
                                            Id: DisbursementResults.Id,
                                            IsLocked: DisbursementResults.IsLocked
                                        });
                                    }

                                    if (DisbursementResults.IsLocked == true) {
                                        for (i = 0; i < Results.length; i++) {
                                            disbursementLines.push({
                                                EditId: "<button class='btn btn-primary btn-xs btn-block' onclick='btnEditDisbursementLine_OnClick()' disabled><i class='fa fa-edit'></i> Edit</button>",
                                                DeleteId: "<button class='btn btn-danger btn-xs btn-block' onclick='btnDeleteDisbursementLine_OnClick()' disabled><i class='fa fa-trash'></i> Delete</button>",
                                                Id: Results[i]["Id"],
                                                CVId: Results[i]["CVId"],
                                                CV: Results[i]["CV"],
                                                BranchId: Results[i]["BranchId"],
                                                Branch: Results[i]["Branch"],
                                                AccountId: Results[i]["AccountId"],
                                                Account: Results[i]["Account"],
                                                ArticleId: Results[i]["ArticleId"],
                                                Article: Results[i]["Article"],
                                                RRId: Results[i]["RRId"],
                                                RR: Results[i]["RR"],
                                                Particulars: Results[i]["Particulars"],
                                                Amount: Results[i]["Amount"]
                                            });
                                        }
                                    } else {
                                        for (i = 0; i < Results.length; i++) {
                                            disbursementLines.push({
                                                EditId: "<button class='btn btn-primary btn-xs btn-block' onclick='btnEditDisbursementLine_OnClick()'><i class='fa fa-edit'></i> Edit</button>",
                                                DeleteId: "<button class='btn btn-danger btn-xs btn-block' onclick='btnDeleteDisbursementLine_OnClick()'><i class='fa fa-trash'></i> Delete</button>",
                                                Id: Results[i]["Id"],
                                                CVId: Results[i]["CVId"],
                                                CV: Results[i]["CV"],
                                                BranchId: Results[i]["BranchId"],
                                                Branch: Results[i]["Branch"],
                                                AccountId: Results[i]["AccountId"],
                                                Account: Results[i]["Account"],
                                                ArticleId: Results[i]["ArticleId"],
                                                Article: Results[i]["Article"],
                                                RRId: Results[i]["RRId"],
                                                RR: Results[i]["RR"],
                                                Particulars: Results[i]["Particulars"],
                                                Amount: Results[i]["Amount"]
                                            });
                                        }
                                    }
                                }
                            });
                        }
                    }
                }).fail(function (xhr, textStatus, err) {
                    alert(err);
                });
            }
            return disbursementLines;
        }

        // ==========================================
        // GET Disbursement Line Branch for Combo Box
        // ==========================================
        function getDisbursementBranchesForComboBox() {
            disbursementBranches = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listBranch',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            disbursementBranches.push({
                                BranchId: results[i]["Id"],
                                BranchBranch: results[i]["Branch"]
                            });
                        }
                        createCboDisbursmentBranch(disbursementBranches);
                    }
                }
            });
        }

        // ========================================
        // Combo Box for Disbursement Line Branches
        // ========================================
        function createCboDisbursmentBranch(disbursementBranches) {
            var disbursementBranchCollections = new wijmo.collections.CollectionView(disbursementBranches);
            var disbursementBranchList = new Array();
            for (var i = 0; i < disbursementBranchCollections.items.length; i++) {
                disbursementBranchList.push(disbursementBranchCollections.items[i].BranchBranch);
            }

            cboDisbursementBranch.dispose();
            cboDisbursementBranch = new wijmo.input.ComboBox('#disbursementLine_branch', {
                placeholder: "Select Branch",
                itemsSource: disbursementBranchList,
                isEditable: false,
                required: false,
                selectedValue: document.getElementById('disbursementLine_branch_selectedValue').value.toString(),
                onSelectedIndexChanged: function () {
                    $("#disbursementLine_branch_data").val(disbursementBranchCollections.items[this.selectedIndex].BranchId);
                }
            });
        }

        // =============================
        // Get Disbursement Line Account
        // =============================
        function getDisbursementLineAccountForComboBox() {
            disbursementLineAccounts = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listAccount',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            disbursementLineAccounts.push({
                                AccountId: results[i]["Id"],
                                AccountAccount: results[i]["Account"]
                            });
                        }
                        createDisbursementLineCboForAccount(disbursementLineAccounts);
                    }
                }
            }).fail(function (xhr, textStatus, err) {
                alert(err);
            });
        }

        // ===============
        // CBO for Account
        // ===============
        function  createDisbursementLineCboForAccount(disbursementLineAccounts) {
            var disbursementLineAccountCollection = new wijmo.collections.CollectionView(disbursementLineAccounts);
            var disbursementLineAccountList = new Array();
            for (var i = 0; i < disbursementLineAccountCollection.items.length; i++) {
                disbursementLineAccountList.push(disbursementLineAccountCollection.items[i].AccountAccount);
            }

            cboDisbursementLineAccount.dispose();
            cboDisbursementLineAccount = new wijmo.input.ComboBox('#disbursementLine_account', {
                disabled: false,
                placeholder: "Select Account",
                itemsSource: disbursementLineAccountList,
                isEditable: false,
                required: false,
                selectedValue: document.getElementById('disbursementLine_account_selectedValue').value.toString(),
                onSelectedIndexChanged: function () {
                    $("#disbursementLine_account_data").val(disbursementLineAccountCollection.items[this.selectedIndex].AccountId);
                    getDisbursementArticlesForComboBox();
                }
            });
        }

        // ============================================
        // GET Disbursement Line Articles for Combo Box
        // ============================================
        function getDisbursementArticlesForComboBox() {
            disbursementLineArticles = new wijmo.collections.ObservableArray();

            var accountId;
            if(document.getElementById('disbursementLine_account_data').value == "") {
                accountId = 0;
            } else {
                accountId = document.getElementById('disbursementLine_account_data').value;
            }

            var disbursementLineArticlesArticleTypes = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listAccountArticleTypeByAccountId/' + accountId,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (disbursementLineArticlesArticleTypeResults) {
                    if (disbursementLineArticlesArticleTypeResults.length > 0) {
                        for (i = 0; i < disbursementLineArticlesArticleTypeResults.length; i++) {
                            disbursementLineArticlesArticleTypes.push({
                                Id: disbursementLineArticlesArticleTypeResults[i]["Id"],
                                ArticleTypeId: disbursementLineArticlesArticleTypeResults[i]["ArticleTypeId"]
                            });

                            $.ajax({
                                url: '/api/listArticleByArticleTypeId/' + disbursementLineArticlesArticleTypeResults[i]["ArticleTypeId"],
                                cache: false,
                                type: 'GET',
                                contentType: 'application/json; charset=utf-8',
                                data: {},
                                success: function (results) {
                                    if (results.length > 0) {
                                        for (i = 0; i < results.length; i++) {
                                            disbursementLineArticles.push({
                                                ArticleId: results[i]["Id"],
                                                ArticleArticle: results[i]["Article"]
                                            });
                                        }
                                        createCboDisbursementLineArticles(disbursementLineArticles);
                                    } else {
                                        createCboDisbursementLineArticles(disbursementLineArticles);
                                    }
                                }
                            }).fail(function (xhr, textStatus, err) {
                                alert(err);
                            });
                        }
                    } else {
                        $.ajax({
                            url: '/api/listArticleByArticleTypeId/' + 0,
                            cache: false,
                            type: 'GET',
                            contentType: 'application/json; charset=utf-8',
                            data: {},
                            success: function (results) {
                                if (results.length > 0) {
                                    for (i = 0; i < results.length; i++) {
                                        disbursementLineArticles.push({
                                            ArticleId: results[i]["Id"],
                                            ArticleArticle: results[i]["Article"]
                                        });
                                    }
                                    createCboDisbursementLineArticles(disbursementLineArticles);
                                } else {
                                    createCboDisbursementLineArticles(disbursementLineArticles);
                                }
                            }
                        }).fail(function (xhr, textStatus, err) {
                            alert(err);
                        });
                    }
                }
            }).fail(function (xhr, textStatus, err) {
                alert(err);
            });
        }

        // ========================================
        // Combo Box for Disbursement Line Articles
        // ========================================
        function createCboDisbursementLineArticles(disbursementLineArticles) {
            var disbursementLineArticleCollections = new wijmo.collections.CollectionView(disbursementLineArticles);
            var disbursementLineArticleList = new Array();
            for (var i = 0; i < disbursementLineArticleCollections.items.length; i++) {
                disbursementLineArticleList.push(disbursementLineArticleCollections.items[i].ArticleArticle);
            }

            if(disbursementLineArticles == 0) {
                document.getElementById('disbursementLine_article_data').value = "";

                cboDisbursementLineArticle.dispose();
                cboDisbursementLineArticle = new wijmo.input.ComboBox('#disbursementLine_article', {
                    disabled: true,
                    placeholder: "Select Article",
                    itemsSource: disbursementLineArticleList,
                    isEditable: false,
                    required: false,
                    selectedValue: document.getElementById('disbursementLine_article_selectedValue').value.toString(),
                    onSelectedIndexChanged: function () {
                        $("#disbursementLine_article_data").val(disbursementLineArticleCollections.items[this.selectedIndex].ArticleId);
                    }
                });
            } else {
                cboDisbursementLineArticle.dispose();
                cboDisbursementLineArticle = new wijmo.input.ComboBox('#disbursementLine_article', {
                    disabled: false,
                    placeholder: "Select Article",
                    itemsSource: disbursementLineArticleList,
                    isEditable: false,
                    required: false,
                    selectedValue: document.getElementById('disbursementLine_article_selectedValue').value.toString(),
                    onSelectedIndexChanged: function () {
                        $("#disbursementLine_article_data").val(disbursementLineArticleCollections.items[this.selectedIndex].ArticleId);
                    }
                });
            }
        }

        // ================================================
        // GET RR Number for Combo Box in Disbursement Line
        // ================================================
        function getReceivingReceiptForComboBoxInDisbursementLine() {
            disbursementReceivingReceipts = new wijmo.collections.ObservableArray();
            var supplierId = document.getElementById('disbursement_Supplier_data').value;

            $.ajax({
                url: '/api/receivingReceiptBySupplierId/' + supplierId,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            disbursementReceivingReceipts.push({
                                RRId: results[i]["Id"],
                                RRNumber: results[i]["RRNumber"],
                                Branch: results[i]["Branch"],
                                Amount: results[i]["Amount"]
                            });
                        }
                        createCboReceivingReceiptForDisbursementLine(disbursementReceivingReceipts);
                    } else {
                        createCboReceivingReceiptForDisbursementLine(disbursementReceivingReceipts);
                    }
                }
            }).fail(function (xhr, textStatus, err) {
                alert(err);
            }
            );
        }

        // =============================================
        // Combo Box for RR Number in  Disbursement Line
        // =============================================
        function createCboReceivingReceiptForDisbursementLine(disbursementReceivingReceipts) {
            var RRCollections = new wijmo.collections.CollectionView(disbursementReceivingReceipts);
            var RRList = new Array();
            for (var i = 0; i < RRCollections.items.length; i++) {
                RRList.push(RRCollections.items[i].RRNumber);
            }

            if(disbursementReceivingReceipts == 0) {
                document.getElementById('disbursementLine_RRNo_data').value = "";

                cboDisbursementLineRR.dispose();
                cboDisbursementLineRR = new wijmo.input.ComboBox('#disbursementLine_RRNo', {
                    disabled: true,
                    placeholder: "Select RR Number",
                    itemsSource: RRList,
                    isEditable: false,
                    required: false,
                    selectedValue: document.getElementById('disbursementLine_RRNo_selectedValue').value.toString(),
                    onSelectedIndexChanged: function () {
                        $("#disbursementLine_RRNo_data").val(RRCollections.items[this.selectedIndex].RRId);
                        $("#disbursementLine_Amount").val(RRCollections.items[this.selectedIndex].Amount);
                    }
                });
            } else {
                cboDisbursementLineRR.dispose();
                cboDisbursementLineRR = new wijmo.input.ComboBox('#disbursementLine_RRNo', {
                    disabled: false,
                    placeholder: "Select RR Number",
                    itemsSource: RRList,
                    isEditable: false,
                    required: false,
                    selectedValue: document.getElementById('disbursementLine_RRNo_selectedValue').value.toString(),
                    onSelectedIndexChanged: function () {
                        $("#disbursementLine_RRNo_data").val(RRCollections.items[this.selectedIndex].RRId);
                        $("#disbursementLine_Amount").val(RRCollections.items[this.selectedIndex].Amount);
                    }
                });
            }
        }


        // =====================
        // ADD Disbursement Line
        // =====================
        function cmdAddDisbursementLineButton_OnClick() {
            $('#disbursementLineEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $("#cmdSaveDisbursementLineButton").prop("disabled", false);
            $("#cmdDisbursementLineDetailCloseButton").prop("disabled", false);

            $('.requiredDisbursementLine').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            document.getElementById('disbursementLine_Id').value = 0;
            document.getElementById('disbursementLine_branch_data').value = '';
            document.getElementById('disbursementLine_branch_selectedValue').value = '';
            document.getElementById('disbursementLine_account_data').value = '';
            document.getElementById('disbursementLine_account_selectedValue').value = '';
            document.getElementById('disbursementLine_article_data').value = '';
            document.getElementById('disbursementLine_article_selectedValue').value = '';
            document.getElementById('disbursementLine_Particulars').value = '';
            document.getElementById('disbursementLine_RRNo_data').value = '';
            document.getElementById('disbursementLine_RRNo_selectedValue').value = '';
            document.getElementById('disbursementLine_Amount').value = '';

            getDisbursementBranchesForComboBox();
            getDisbursementLineAccountForComboBox();
            getDisbursementArticlesForComboBox();
            getReceivingReceiptForComboBoxInDisbursementLine();

        }

        // ======================
        // Edit Disbursement Line
        // ======================
        function btnEditDisbursementLine_OnClick() {
            disbursementLines.editItem(disbursementLines.currentItem);
            $('#disbursementLineEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $("#cmdSaveDisbursementLineButton").prop("disabled", false);
            $("#cmdDisbursementLineDetailCloseButton").prop("disabled", false);

            $('.requiredDisbursementLine').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            var disbursementLine = disbursementLines.currentEditItem;
            document.getElementById('disbursementLine_Id').value = disbursementLine.Id;
            document.getElementById('disbursementLine_branch_data').value = disbursementLine.BranchId;
            document.getElementById('disbursementLine_branch_selectedValue').value = disbursementLine.Branch;
            document.getElementById('disbursementLine_account_data').value = disbursementLine.AccountId;
            document.getElementById('disbursementLine_account_selectedValue').value = disbursementLine.Account;
            document.getElementById('disbursementLine_article_data').value = disbursementLine.ArticleId;
            document.getElementById('disbursementLine_article_selectedValue').value = disbursementLine.Article;
            document.getElementById('disbursementLine_Particulars').value = disbursementLine.Particulars;
            document.getElementById('disbursementLine_RRNo_data').value = disbursementLine.RRId;
            document.getElementById('disbursementLine_RRNo_selectedValue').value = disbursementLine.RR;
            document.getElementById('disbursementLine_Amount').value = disbursementLine.Amount;

            getDisbursementBranchesForComboBox();
            getDisbursementLineAccountForComboBox();
            getDisbursementArticlesForComboBox();
            getReceivingReceiptForComboBoxInDisbursementLine();

        }

        // ========================
        // Delete Disbursement Line
        // ========================
        function btnDeleteDisbursementLine_OnClick() {
            $('#deleteDisbursementLineConfirm').modal({
                show: true,
                backdrop: 'static'
            });

            $("#cmdSaveDisbursementLineButton").prop("disabled", false);
            $("#cmdDisbursementLineDetailCloseButton").prop("disabled", false);
        }
        // Confirm Delete Disbursement Line
        function cmdDisbursementLineConfirmDeleteButton_OnClick() {
            $("#cmdSaveDisbursementLineButton").prop("disabled", true);
            $("#cmdDisbursementLineDetailCloseButton").prop("disabled", true);

            disbursementLines.editItem(disbursementLines.currentItem);
            var disbursementLineId = disbursementLines.currentEditItem.Id;
            $.ajax({
                url: '/api/deleteDisbursementLine/' + disbursementLineId,
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        $("#cmdSaveDisbursementLineButton").prop("disabled", true);
                        $("#cmdDisbursementLineDetailCloseButton").prop("disabled", true);
                        toastr.success("Successfully Deleted");

                        $('#deleteDisbursementLineConfirm').modal('hide');

                        disbursementLines = new wijmo.collections.CollectionView(getDisbursementLines());

                        // Flex Grid for disbursement Line
                        disbursementGrid.itemsSource = disbursementLines;
                        disbursementGrid.trackChanges = true;
                    },
                    404: function () {
                        toastr.error("Request Not Found");
                        $('#deleteDisbursementLineConfirm').modal('hide');
                        $("#cmdSaveDisbursementLineButton").prop("disabled", false);
                        $("#cmdDisbursementLineDetailCloseButton").prop("disabled", false);
                    },
                    400: function () {
                        toastr.error("Bad Request");
                        $('#deleteDisbursementLineConfirm').modal('hide');
                        $("#cmdSaveDisbursementLineButton").prop("disabled", false);
                        $("#cmdDisbursementLineDetailCloseButton").prop("disabled", false);
                    }
                }
            });
        }

        // ======================
        // SAVE Disbursement Line
        // ======================
        function cmdDisbursementLineSaveButton_OnClick() {
            var disbursementLineObject = new Object();
            var disbursementId = getParam("DisbursementId");

            var disbursementLineId = document.getElementById('disbursementLine_Id').value;
            disbursementLineObject.CVId = disbursementId;
            disbursementLineObject.BranchId = document.getElementById('disbursementLine_branch_data').value;
            disbursementLineObject.AccountId = document.getElementById('disbursementLine_account_data').value;
            disbursementLineObject.ArticleId = document.getElementById('disbursementLine_article_data').value;
            disbursementLineObject.RRId = document.getElementById('disbursementLine_RRNo_data').value;
            disbursementLineObject.Particulars = document.getElementById('disbursementLine_Particulars').value;
            disbursementLineObject.Amount = document.getElementById('disbursementLine_Amount').value;
            var disbursementLineData = JSON.stringify(disbursementLineObject);

            if( document.getElementById('disbursementLine_branch_data').value == '') {
                document.getElementById("disbursementLine_branch").style.border = "1px solid red";
            } else {
                document.getElementById("disbursementLine_branch").style.border = "1px solid #C8C8C8";
            }

            if( document.getElementById('disbursementLine_account_data').value == '') {
                document.getElementById("disbursementLine_account").style.border = "1px solid red";
            } else {
                document.getElementById("disbursementLine_account").style.border = "1px solid #C8C8C8";
            }

            if( document.getElementById('disbursementLine_article_data').value == '') {
                document.getElementById("disbursementLine_article").style.border = "1px solid red";
            } else {
                document.getElementById("disbursementLine_article").style.border = "1px solid #C8C8C8";
            }

            if( document.getElementById('disbursementLine_RRNo_data').value == '') {
                document.getElementById("disbursementLine_RRNo").style.border = "1px solid red";
            } else {
                document.getElementById("disbursementLine_RRNo").style.border = "1px solid #C8C8C8";
            }


            var isValid = true;
            $('.requiredDisbursementLine').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                }
                else {
                    $(this).css({
                        "border": "",
                    });
                }
            });
            if (isValid == false) {
                toastr.error("Invalid Entry");
            }
            else {
                $("#cmdSaveDisbursementLineButton").prop("disabled", true);
                $("#cmdDisbursementLineDetailCloseButton").prop("disabled", true);
                if (disbursementLineId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/addDisbursementLine',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: disbursementLineData,
                        statusCode: {
                            200: function () {
                                $("#cmdSaveDisbursementLineButton").prop("disabled", true);
                                $("#cmdDisbursementLineDetailCloseButton").prop("disabled", true);
                                toastr.success("Successfully Saved");

                                $('#disbursementLineEdit').modal('hide');

                                disbursementLines = new wijmo.collections.CollectionView(getDisbursementLines());

                                // Flex Grid for disbursement Line
                                disbursementGrid.itemsSource = disbursementLines;
                                disbursementGrid.trackChanges = true;
                            },
                            404: function () {
                                toastr.error("Can't Save");
                                $('#disbursementLineEdit').modal('hide');
                                $("#cmdSaveDisbursementLineButton").prop("disabled", false);
                                $("#cmdDisbursementLineDetailCloseButton").prop("disabled", false);
                            },
                            400: function () {
                                toastr.error("Bad Request");
                                $('#disbursementLineEdit').modal('hide');
                                $("#cmdSaveDisbursementLineButton").prop("disabled", false);
                                $("#cmdDisbursementLineDetailCloseButton").prop("disabled", false);
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/updateDisbursementLine/' + disbursementLineId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: disbursementLineData,
                        statusCode: {
                            200: function () {
                                $("#cmdSaveDisbursementLineButton").prop("disabled", true);
                                $("#cmdDisbursementLineDetailCloseButton").prop("disabled", true);
                                toastr.success("Successfully Updated");

                                $('#disbursementLineEdit').modal('hide');

                                disbursementLines = new wijmo.collections.CollectionView(getDisbursementLines());

                                // Flex Grid for disbursement Line
                                disbursementGrid.itemsSource = disbursementLines;
                                disbursementGrid.trackChanges = true;
                            },
                            404: function () {
                                toastr.error("Can't Update");
                                $('#disbursementLineEdit').modal('hide');
                                $("#cmdSaveDisbursementLineButton").prop("disabled", false);
                                $("#cmdDisbursementLineDetailCloseButton").prop("disabled", false);
                            },
                            400: function () {
                                toastr.error("Bad Request");
                                $('#disbursementLineEdit').modal('hide');
                                $("#cmdSaveDisbursementLineButton").prop("disabled", false);
                                $("#cmdDisbursementLineDetailCloseButton").prop("disabled", false);
                            }
                        }
                    });
                }
            }
        }

        // ===========
        // Get Journal
        // ===========
        function getJournalListForDisbursement() {
            var journals = new wijmo.collections.ObservableArray;
            var disbursementId = getParam("DisbursementId");
            //$('#loadingModal').modal('show');
            $.ajax({
                url: '/api/listJournalByCVId/' + disbursementId,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (Results) {
                    //$('#loadingModal').modal('hide');
                    if (Results.length > 0) {
                        for (i = 0; i < Results.length; i++) {
                            journals.push({
                                //EditId: "<button class='btn btn-primary btn-xs btn-block' onclick='cmdJournalVoucherLineEditButton_OnClick()'><i class='fa fa-edit'></i> Edit</button>",
                                //DeleteId: "<button class='btn btn-danger btn-xs btn-block' onclick='cmdJournalVoucherLineDeleteButton_OnClick()'><i class='fa fa-trash'></i> Delete</button>",
                                Id: Results[i]["Id"],
                                JournalDate: Results[i]["JournalDate"],
                                BranchId: Results[i]["BranchId"],
                                Branch: Results[i]["Branch"],
                                AccountId: Results[i]["AccountId"],
                                AccountCode: Results[i]["AccountCode"],
                                Account: Results[i]["Account"],
                                ArticleId: Results[i]["ArticleId"],
                                Article: Results[i]["Article"],
                                Particulars: Results[i]["Particulars"],
                                DebitAmount: Results[i]["DebitAmount"],
                                CreditAmount: Results[i]["CreditAmount"],
                                ORId: Results[i]["ORId"],
                                CVId: Results[i]["CVId"],
                                JVId: Results[i]["JVId"],
                                RRId: Results[i]["RRId"],
                                SIId: Results[i]["SIId"],
                                INId: Results[i]["INId"],
                                OTId: Results[i]["OTId"],
                                STId: Results[i]["STId"],
                                DocumentReference: Results[i]["DocumentReference"],
                                APRRId: Results[i]["APRRId"],
                                ARSIId: Results[i]["ARSIId"]
                            });

                            var debitAmountTotal = 0;
                            var creditAmountTotal = 0;

                            var a = 0;
                            while (a < Results.length) {
                                debitAmountTotal += Results[a]["DebitAmount"];
                                creditAmountTotal += Results[a]["CreditAmount"];
                                a++;
                            }
                        }

                        document.getElementById('totalDebitInJournal').innerHTML = debitAmountTotal.toLocaleString();
                        document.getElementById('totalCreditInJournal').innerHTML = creditAmountTotal.toLocaleString();
                        var variance = debitAmountTotal - creditAmountTotal;
                        document.getElementById('variance').innerHTML = variance.toLocaleString();
                    }
                }
            }).fail(function (xhr, textStatus, err) {
                alert(err);
            });
            return journals;
        }

        // ============
        // Journal List
        // ============
        function btnJournalDetail_OnClick() {
            journals = new wijmo.collections.CollectionView(getJournalListForDisbursement());
            journals.pageSize = 10;

            document.getElementById("loadingJournalGridList").innerHTML = '<i class="fa fa-spinner fa-spin"></i> Loading Journal...';

            $("#loadingJournalGridList").show();
            $("#journal_Content").hide();
            setTimeout(function() {
                $("#loadingJournalGridList").hide();
                $("#journal_Content").show();
                // Flex Grid
                journalListGrid = new wijmo.grid.FlexGrid('#journalListGrid');
                journalListGrid.initialize({
                    columns: [
                               {
                                   "header": "Branch",
                                   "binding": "Branch",
                                   "allowSorting": true,
                                   "width": 150
                               },
                                {
                                    "header": "Code",
                                    "binding": "AccountCode",
                                    "allowSorting": true,
                                    "width": 60
                                },
                                {
                                    "header": "Account",
                                    "binding": "Account",
                                    "allowSorting": true,
                                    "width": 200
                                },
                                {
                                    "header": "Article",
                                    "binding": "Article",
                                    "allowSorting": true,
                                    "width": 162
                                },
                                {
                                    "header": "Debit",
                                    "binding": "DebitAmount",
                                    "allowSorting": true,
                                    "width": 130
                                }
                                ,
                                {
                                    "header": "Credit",
                                    "binding": "CreditAmount",
                                    "allowSorting": true,
                                    "width": 130
                                },
                                {
                                    "header": "Date",
                                    "binding": "JournalDate",
                                    "allowSorting": true,
                                    "width": 80,
                                }
                    ],
                    autoGenerateColumns: false,
                    itemsSource: journals,
                    isReadOnly: true,
                    autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                    allowDragging: wijmo.grid.AllowDragging.None,
                    selectionMode: wijmo.grid.SelectionMode.Row
                });

                journalListGrid.trackChanges = true;
            }, 1000);
        }

        $('#cmdDisbursementJournal').click(function () {
            $('#journalDetail').modal({
                show: true,
                backdrop: 'static'
            });

            window.btnJournalDetail_OnClick = function () {
                return true;
            };
        });


        // ===========
        // OnLoad Page
        // ===========
        $(document).ready(function () {
            var disbursementId = getParam("DisbursementId");
            if(document.location.search.length == 0) {
                $('#cmdDisbursementJournal').hide();
                $('#cmdDisbursementSaveLock').hide();
                $('#cmdDisbursementSave').show();
                $('#cmdDisbursementEdit').hide();
                $("#cmdDisbursementPrint").prop("disabled", true);
                $('#btnAddDisbursementLine').prop('disabled', true);
                $("#cmdAP").prop("disabled", true);
                $("#cmdAdvances").prop("disabled", true);
                document.getElementById('disbursement_Amount').value = 0;
            } else {
                $('#cmdDisbursementSaveLock').show();
                $('#cmdDisbursementSave').hide();
                $('#cmdDisbursementEdit').show();
            }

            document.getElementById('disbursement_Amount').disabled = true;

            cboDisbursementBranch = new wijmo.input.ComboBox('#disbursementLine_branch');
            cboDisbursementLineAccount = new wijmo.input.ComboBox('#disbursementLine_account');
            cboDisbursementLineArticle = new wijmo.input.ComboBox('#disbursementLine_article');
            cboDisbursementLineRR = new wijmo.input.ComboBox('#disbursementLine_RRNo');

            document.getElementById('disbursement_CVNumber_Display').disabled = true;
            document.getElementById('disbursement_Lock').disabled = true;

            $('#cmdAP').click(function () {
                $('#RRStatus').modal({
                    show: true,
                    backdrop: 'static'
                });
            });

            $('#cmdAdvances').click(function () {
                $('#SupplierAdvances').modal({
                    show: true,
                    backdrop: 'static'
                });
            });

            cboBranch = new wijmo.input.ComboBox('#disbursement_Branch');

            var d = new Date();
            document.getElementById("disbursement_CVDate_data").value = [ d.getMonth()+1, d.getDate(), d.getFullYear()].join('/');
            CVDate = new wijmo.input.InputDate('#disbursement_CVDate', {
                format: 'MM/dd/yyyy',
                value: new Date(),
                mask: '99/99/9999',
                onValueChanged: function () {
                    document.getElementById('disbursement_CVDate_data').value = this.value.toLocaleDateString();
                }
            });

            document.getElementById("disbursement_CheckDate_data").value = [ d.getMonth()+1, d.getDate(), d.getFullYear()].join('/');
            CheckDate = new wijmo.input.InputDate('#disbursement_CheckDate', {
                format: 'MM/dd/yyyy',
                value: new Date(),
                mask: '99/99/9999',
                onValueChanged: function () {
                    document.getElementById('disbursement_CheckDate_data').value = this.value.toLocaleDateString();
                }
            });

            cboSupplier = new wijmo.input.ComboBox('#disbursement_Supplier');
            cboPayType = new wijmo.input.ComboBox('#disbursement_PayType');
            cboBank = new wijmo.input.ComboBox('#disbursement_Bank');
            cboPreparedBy = new wijmo.input.ComboBox('#disbursement_PreparedBy');
            cboCheckedBy = new wijmo.input.ComboBox('#disbursement_CheckedBy');
            cboApprovedBy = new wijmo.input.ComboBox('#disbursement_ApprovedBy');

            getDisbursementById();

            var disbursementId = getParam("DisbursementId");
            if (document.location.search.length == 0) {
                getBranchesForComboBox();
                getSupplierForComboBox();
                getPaytypeForComboBox();
                getBankForComboBox();
                getUsersForComboBox();

                if(document.getElementById('disbursement_CVNumber').value == 0) {
                    document.getElementById('disbursement_CVNumber_Display').value = "0000000001";
                }

                document.getElementById('disbursement_CVNumber').value = 0;
                //document.getElementById('journalVoucher_No_Display').value = "000-000000";
                var disbursements = new wijmo.collections.ObservableArray;
                $.ajax({
                    url: '/api/disbursementLastCVNumber',
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    data: {},
                    success: function (Results) {
                        if (Results.length > 0) {
                            disbursements.push({
                                Id: Results.Id,
                                CVNumber: Results.CVNumber
                            });
                        }
                        var CV_Number = parseInt(Results.CVNumber);
                        var CV_Number_PlusOne = 0000000001;
                        var CV_Num_Results = CV_Number + CV_Number_PlusOne;
                        //var JV_Number_Display = JV_Num_Results.toString().replace(/(\d{3})(\d+)/, '$1-$2');

                        document.getElementById('disbursement_CVNumber').value = zerofill(CV_Num_Results, 10);
                        document.getElementById('disbursement_CVNumber_Display').value = zerofill(CV_Num_Results, 10);
                    }
                });
            }

            disbursementLines = new wijmo.collections.CollectionView(getDisbursementLines());

            // Flex Grid for Purchase Disbursement Line
            disbursementGrid = new wijmo.grid.FlexGrid('#DisbursementLineGrid');
            disbursementGrid.initialize({
                columns: [
                            {
                                "header": "Edit",
                                "binding": "EditId",
                                "width": 60,
                                "align": "center",
                                "allowResizing": false,
                                "allowSorting": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Delete",
                                "binding": "DeleteId",
                                "width": 70,
                                "align": "center",
                                "allowResizing": false,
                                "allowSorting": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Branch",
                                "binding": "Branch",
                                "allowSorting": true,
                                "width": "2*",
                            },
                            {
                                "header": "Account",
                                "binding": "Account",
                                "allowSorting": true,
                                "width": "4*"
                            },
                            {
                                "header": "Article",
                                "binding": "Article",
                                "allowSorting": true,
                                "width": "4*"
                            },
                            {
                                "header": "Particulars",
                                "binding": "Particulars",
                                "allowSorting": true,
                                "width": "3*"
                            },
                            {
                                "header": "RR No.",
                                "binding": "RR",
                                "allowSorting": true,
                                "width": "2*"
                            },
                            {
                                "header": "Amount",
                                "binding": "Amount",
                                "allowSorting": true,
                                "width": "2*"
                            }
                ],
                autoGenerateColumns: false,
                itemsSource: disbursementLines,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            disbursementGrid.trackChanges = true;
        });
    </script>
</body>
</html>