@model easyfis.Entities.MstUserForm
@{
    // =====================
    // User Rights Variables
    // =====================
    var canAdd = Model.CanAdd;
    var canEdit = Model.CanEdit;
    var canDelete = Model.CanDelete;
    var canLock = Model.CanLock;
    var canUnlock = Model.CanUnlock;
    var canPrint = Model.CanPrint;
}
<!DOCTYPE html>
<html>
<head>
    <!-- Meta -->
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">

    <!-- Title of the Page -->
    <link rel="shortcut icon" href="~/Images/icon/easyfislogomini.ico">
    <title>Disbursement Detail</title>

    <!-- CSS StyleSheets-->
    @Styles.Render("~/Content/Software-css")
</head>
<body>
    <div id="o-wrapper" class="o-wrapper">
        <main class="o-content">
            @Html.Partial("_SoftwareHeader")
            <section class="content-header">
                <div class="container">
                    <h3>
                        Disbursement Detail
                    </h3>
                    <p>
                        <i class="fa fa-building-o fa-fw"></i> &nbsp; @ViewData["Company"] <br />
                        <i class="fa fa-home fa-fw"></i> &nbsp; <a href="#" onclick="getUserBranches()" style="color: white;">@ViewData["Branch"]</a>
                    </p>
                </div>
            </section>
            <section class="container">
                <div class="panel panel-default">
                    <div class="panel-heading">
                        <div class="row">
                            <div class="col-md-12" align="right">
                                <button class="btn btn-primary" id="btnJournalDisbursement" onclick="btnJournalDisbursementOnclick()"><i class="fa fa-book"></i> Journal</button>
                                @{
                                    if (canLock)
                                    {
                                        <button class="btn btn-primary" id="btnLockDisbursement" onclick="btnLockDisbursementOnclick()"><i class="fa fa-lock"></i> Lock</button>
                                    }
                                    if (canUnlock)
                                    {
                                        <button class="btn btn-primary" id="btnUnlockDisbursement" onclick="btnUnlockDisbursementOnclick()"><i class="fa fa-unlock"></i> Unlock</button>
                                    }
                                    if (canPrint)
                                    {
                                        <button class="btn btn-primary" id="btnPrintDisbursement" onclick="btnPrintDisbursementOnclick()"><i class="fa fa-print"></i> Print</button>
                                    }
                                }
                                <button class="btn btn-danger" id="btnCloseDisbursement" onclick="window.location.href = '/Software/Disbursement'"><i class="fa fa-times"></i> Close</button>
                            </div>
                        </div>
                    </div>
                    <div class="panel-body">
                        <form class="form-horizontal" role="form">
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Branch</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboCVBranch"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">CV Number</label>
                                        <div class="col-sm-8">
                                            <input type="text" class="form-control requiredDisbursement" id="disbursement_CVNumber" disabled />
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">CV Date</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboCVDate"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Manual CV Number</label>
                                        <div class="col-sm-8">
                                            <input type="text" class="form-control requiredDisbursement" id="disbursement_ManualCVNumber" placeholder="Manual CV Number" />
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Supplier</label>
                                        <div class="col-sm-8">
                                            <div class="input-group">
                                                <div class="comboBox-wide" id="cboCVSupplier"></div>
                                                <div class="input-group-btn">
                                                    <button type="button" class="btn btn-primary" id="cmdAP" onclick="btnnOclickAP()">AP</button>
                                                    <button type="button" class="btn btn-primary" id="cmdAdvances" onclick="btnnOclickAdvances()">Advances</button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Payee</label>
                                        <div class="col-sm-8">
                                            <input type="text" class="form-control requiredDisbursement" id="disbursement_Payee" placeholder="Payee" />
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Pay Type</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboCVPayType"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Particulars</label>
                                        <div class="col-sm-8">
                                            <textarea rows="5" class="form-control textarea-custom requiredDisbursement" id="disbursement_Particulars" placeholder="Particulars"></textarea>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Bank</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboCVBank"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Check Number</label>
                                        <div class="col-sm-8">
                                            <input type="text" class="form-control  requiredDisbursement" id="disbursement_CheckNumber" placeholder="Check Number" />
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Check Date</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboCVCheckDate"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Amount</label>
                                        <div class="col-sm-8">
                                            <input type="text" class="form-control numberField requiredDisbursement" id="disbursement_Amount" placeholder="0.00" disabled />
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Is Cross Check</label>
                                        <div class="col-sm-8">
                                            <input type="checkbox" id="disbursement_CrossCheck">
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Prepared by</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboCVPreparedBy"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Checked by</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboCVCheckedBy"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Approved by</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboCVApprovedBy"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Is Clear</label>
                                        <div class="col-sm-8">
                                            <input type="checkbox" id="disbursement_IsClear">
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
                <ul class="nav nav-tabs" role="tablist" id="myTab">
                    <li role="presentation" class="active"><a data-toggle="tab" href="#DisbursementLine" id="itemTabId">Disbursement Line</a></li>
                </ul>
                <br />
                <div class="tab-content">
                    <div id="DisbursementLine" class="tab-pane fade in active">
                        <div class="panel panel-default">
                            <div class="panel-heading">
                                <table style="width: 100%" border="0">
                                    <tr>
                                        <td style="width: 49.5%">
                                            <div class="input-group">
                                                <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                                <input type="text" class="form-control " id="DisbursementLineInputFilter" placeholder="Search...">
                                            </div>
                                        </td>
                                        <td style="width: 1%"></td>
                                        <td style="width: 24%">
                                            <div class="input-group">
                                                <span class="input-group-addon"><b><i class="fa fa-table"></i></b></span>
                                                <div class="comboBox-wide" id="cboDisbursementLineShowNumberOfRows"></div>
                                            </div>
                                        </td>
                                        <td style="width: 1%"></td>
                                        <td style="width: 24.5%" align="right">
                                            @{
                                                if (canAdd)
                                                {
                                                    <button class="btn btn-primary" id="btnAddDisbursementLine" onclick="cmdAddDisbursementLineButton_OnClick()"><i class="fa fa-plus"></i> Add</button>
                                                }
                                            }
                                        </td>
                                    </tr>
                                </table>
                            </div>
                            <div class="panel-body">
                                <div id="DisbursementLineGrid"></div>
                            </div>
                            <div class="panel-footer">
                                <div class="row">
                                    <div class="btn-group col-md-7" id="naviagtionPageGrid">
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToFirstPageGrid">
                                            <span class="glyphicon glyphicon-fast-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToPreviousPageGrid">
                                            <span class="glyphicon glyphicon-step-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnCurrentPageGrid"></button>
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToNextPageGrid">
                                            <span class="glyphicon glyphicon-step-forward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToLastPageGrid">
                                            <span class="glyphicon glyphicon-fast-forward"></span>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="panel panel-default">
                            <div class="panel-body" style="padding-bottom: 0px;">
                                <div class="row">
                                    <div class="col-md-6"></div>
                                    <div class="col-md-6">
                                        <dl class="dl-horizontal">
                                            <dt>
                                                <b>Total Amount</b>
                                            </dt>
                                            <dd>
                                                <input type="text" class="form-control numberField" id="totalCVAmount" placeholder="0.00" disabled />
                                            </dd>
                                        </dl>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="panel panel-default">
                    <div class="panel-heading">
                        User stamp
                    </div>
                    <div class="panel-body">
                        <div class="row">
                            <div class="col-md-6">
                                <p>Created by:</p>
                                <div style="padding-left: 10px;">
                                    <i class="fa fa-key fa-fw"></i> <label id="createdBy">NA</label>
                                    <br />
                                    <small><i class="fa fa-calendar fa-fw"></i> &nbsp;<span id="createdDate">mm/dd/yyyy</span></small>
                                </div>
                                <br />
                            </div>
                            <div class="col-md-6">
                                <p>Updated by:</p>
                                <div style="padding-left: 10px;">
                                    <i class="fa fa-key fa-fw"></i> <label id="updatedBy">NA</label>
                                    <br />
                                    <small><i class="fa fa-calendar fa-fw"></i> &nbsp;<span id="updatedDate">mm/dd/yyyy</span></small>
                                </div>
                                <br />
                            </div>
                        </div>
                    </div>
                </div>
            </section>
            @Html.Partial("_SoftwareFooter")
        </main>
    </div>
    <div id="c-mask" class="c-mask"></div>

    <!-- Disbursement Edit Detail -->
    <div class="modal fade" id="disbursementLineEdit" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="disbursementLineModalLabel">Disbursement Line</h4>
                </div>
                <div class="modal-body">
                    <center>
                        <span id="loadingLines"></span>
                    </center>
                    <div id="disbursementLineDetailForm">
                        <dl class="dl-horizontal">
                            <dt>Branch</dt>
                            <dd><div class="comboBox-wide" id="cboDisbursementLineBranch"></div></dd>
                            <dt>Account</dt>
                            <dd>
                                <table style="width: 100%" border="0">
                                    <tr>
                                        <td style="width: 30%">
                                            <div class="comboBox-wide" id="cboDisbursementLineAccountCode"></div>
                                        </td>
                                        <td style="width: 1%"></td>
                                        <td style="width: 69%">
                                            <div class="comboBox-wide" id="cboDisbursementLineAccount"></div>
                                        </td>
                                    </tr>
                                </table>
                            </dd>
                            <dt>Article</dt>
                            <dd><div class="comboBox-wide" id="cboDisbursementLineArticle"></div></dd>
                            <dt>RR No.</dt>
                            <dd><div class="comboBox-wide" id="cboDisbursementLineRRNo"></div></dd>
                            <dt>Particulars</dt>
                            <dd><textarea rows="5" class="form-control textarea-custom requiredDisbursementLine" id="disbursementLine_Particulars" placeholder="Particulars"></textarea></dd>
                            <dt>Amount</dt>
                            <dd><input class="form-control  numberField  requiredDisbursementLine" id="disbursementLine_Amount" placeholder="0.00" /></dd>
                        </dl>
                    </div>
                </div>
                <div class="modal-footer">
                    <button id="cmdSaveDisbursementLineButton" class="btn btn-primary" onclick="cmdDisbursementLineSaveButton_OnClick()"><i class="fa fa-save"></i> Save</button>
                    <button id="cmdDisbursementLineDetailCloseButton" class="btn btn-danger" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- disbursement Line Delete Modal Confirmation -->
    <div class="modal fade" id="deleteDisbursementLineConfirm" role="dialog">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Delete</h4>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete this disbursement line?
                </div>
                <div class="modal-footer">
                    <button id="cmdConfirmDeleteDisbursementLine" class="btn btn-danger" onclick="cmdDisbursementLineConfirmDeleteButton_OnClick()"><i class="fa fa-trash"></i> Delete</button>
                    <button id="cmdConfirmDeleteDisbursementLineCloseButton" class="btn btn-primary" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Journal -->
    <div class="modal fade" id="journalDetail" role="dialog">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="journalModalLabel"> Journal</h4>
                </div>
                <div class="modal-body">
                    <center>
                        <span id="loadingJournalGridList"></span>
                    </center>
                    <div id="journal_Content">
                        <div id="journalFlexGrid" style="max-height: 250px;"></div>
                        <br /><br />
                        <div class="row">
                            <div class="col-md-7"></div>
                            <div class="col-md-5">
                                <dl class="dl-horizontal">
                                    <dt>
                                        <b>Total Debit</b>
                                    </dt>
                                    <dd>
                                        <input type="text" class="form-control  numberField  requiredStockTransferItem" id="totalDebitInJournal" placeholder="0.00" disabled />
                                    </dd>
                                    <dt>
                                        <b>Total Credit</b>
                                    </dt>
                                    <dd>
                                        <input type="text" class="form-control  numberField  requiredStockTransferItem" id="totalCreditInJournal" placeholder="0.00" disabled />
                                    </dd>
                                    <dt>
                                        <b>Variance</b>
                                    </dt>
                                    <dd>
                                        <input type="text" class="form-control  numberField  requiredStockTransferItem" id="variance" placeholder="0.00" disabled />
                                    </dd>
                                </dl>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button id="cmdJournalDetailCloseButton" class="btn btn-danger" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- RR status -->
    <div class="modal fade" id="RRStatus" role="dialog">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="RRStatusModalLabel">Receiving Receipt Status</h4>
                </div>
                <div class="modal-body">
                    <center>
                        <span id="loadingRRStatus"></span>
                    </center>
                    <div id="statusGrid">
                        <div class="panel panel-default">
                            <div class="panel-heading">
                                <div class="input-group  ">
                                    <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                    <input type="text" class="form-control" id="RRStatusFilter" placeholder="Search">
                                </div>
                            </div>
                            <div class="panel-body">
                                <div id="receivingStatusGrid"></div>
                            </div>
                            <div class="panel-footer">
                                <div class="row">
                                    <div class="btn-group col-md-7" id="naviagtionPageGridRRStatus">
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToFirstPageGridRRStatus">
                                            <span class="glyphicon glyphicon-fast-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToPreviousPageGridRRStatus">
                                            <span class="glyphicon glyphicon-step-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnCurrentPageGridRRStatus"></button>
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToNextPageGridRRStatus">
                                            <span class="glyphicon glyphicon-step-forward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToLastPageGridRRStatus">
                                            <span class="glyphicon glyphicon-fast-forward"></span>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button id="btnIdApplyAllRR" class="btn btn-primary" onclick="btnOnclickApplyAllRR()"><i class="fa fa-check"></i> Apply</button>
                    <button id="cmdPOStatusCloseButton" class="btn btn-danger" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Spplier Advances -->
    <div class="modal fade" id="SupplierAdvances" role="dialog">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="SupplierAdvancesModalLabel">Spplier Advances</h4>
                </div>
                <div class="modal-body">
                    <center>
                        <span id="loadingRRAdvances"></span>
                    </center>
                    <div id="AdvancesGrid">
                        <div class="panel panel-default">
                            <div class="panel-heading">
                                <div class="input-group  ">
                                    <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                    <input type="text" class="form-control" id="RRAdvancesFilter" placeholder="Search">
                                </div>
                            </div>
                            <div class="panel-body">
                                <div id="RRAdvancesGrid"></div>
                            </div>
                            <div class="panel-footer">
                                <div class="row">
                                    <div class="btn-group col-md-7" id="naviagtionPageGridRRAdvances">
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToFirstPageGridRRAdvances">
                                            <span class="glyphicon glyphicon-fast-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToPreviousPageGridRRAdvances">
                                            <span class="glyphicon glyphicon-step-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnCurrentPageGridRRAdvances"></button>
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToNextPageGridRRAdvances">
                                            <span class="glyphicon glyphicon-step-forward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToLastPageGridRRAdvances">
                                            <span class="glyphicon glyphicon-fast-forward"></span>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button id="cmdPOStatusCloseButton" class="btn btn-danger" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- disbursement apply -->
    <div class="modal fade" id="applyAmount" role="dialog">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Apply</h4>
                </div>
                <div class="modal-body">
                    Are you sure that you want to apply all picked amount?
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" id="cmdConfirmApplyAmount" onclick="btnConfrimApplyAmountOnClick()"><i class="fa fa-check"></i> Apply</button>
                    <button class="btn btn-danger" id="cmdCloseButtonApplyAmount" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <!-- disbursement apply -->
    <div class="modal fade" id="applyConfirm" role="dialog">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Apply</h4>
                </div>
                <div class="modal-body">
                    Are you sure that you want to apply these advances?
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" id="cmdConfirmApplyAdvances" onclick="btnConfrimApplyAdvances_OnClick()"><i class="fa fa-check"></i> Apply</button>
                    <button class="btn btn-danger" id="cmdCloseButtonApplyAdvances" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>

    @Scripts.Render("~/Scripts/Software-js")
    <script type="text/javascript">
        // ================
        // Global Variables
        // ================
        var cboCVBranch = new wijmo.input.ComboBox('#cboCVBranch');
        var cboCVSupplier = new wijmo.input.ComboBox('#cboCVSupplier');
        var cboCVPayType = new wijmo.input.ComboBox('#cboCVPayType');
        var cboCVBank = new wijmo.input.ComboBox('#cboCVBank');
        var cboCVPreparedBy = new wijmo.input.ComboBox('#cboCVPreparedBy');
        var cboCVCheckedBy = new wijmo.input.ComboBox('#cboCVCheckedBy');
        var cboCVApprovedBy = new wijmo.input.ComboBox('#cboCVApprovedBy');
        var cboCVDate = new wijmo.input.InputDate('#cboCVDate');
        var cboCVCheckDate = new wijmo.input.InputDate('#cboCVCheckDate');
        var disbursementLines;
        var disbursementGrid;
        var isLocked = false;
        var cboDisbursementLineBranch = new wijmo.input.ComboBox('#cboDisbursementLineBranch');
        var cboDisbursementLineAccountCode = new wijmo.input.ComboBox('#cboDisbursementLineAccountCode');
        var cboDisbursementLineAccount = new wijmo.input.ComboBox('#cboDisbursementLineAccount');
        var cboDisbursementLineArticle = new wijmo.input.ComboBox('#cboDisbursementLineArticle');
        var cboDisbursementLineRRNo = new wijmo.input.ComboBox('#cboDisbursementLineRRNo');
        var disbursementLineId = 0;
        var IsAccountChanged = false;
        var journalCollectionView;
        var journalFlexGrid = new wijmo.grid.FlexGrid('#journalFlexGrid');
        var receivingReceipts;
        var receivingStatusGrid = new wijmo.grid.FlexGrid('#receivingStatusGrid');
        var RRAdvances;
        var RRAdvancesGrid = new wijmo.grid.FlexGrid('#RRAdvancesGrid');
        var cboDisbursementLineShowNumberOfRows = new wijmo.input.ComboBox('#cboDisbursementLineShowNumberOfRows');
        var btnFirstPageGrid = document.getElementById('btnMoveToFirstPageGrid');
        var btnPreviousPageGrid = document.getElementById('btnMoveToPreviousPageGrid');
        var btnNextPageGrid = document.getElementById('btnMoveToNextPageGrid');
        var btnLastPageGrid = document.getElementById('btnMoveToLastPageGrid');
        var btnCurrentPageGrid = document.getElementById('btnCurrentPageGrid');
        var btnFirstPageGridRRStatus = document.getElementById('btnMoveToFirstPageGridRRStatus');
        var btnPreviousPageGridRRStatus = document.getElementById('btnMoveToPreviousPageGridRRStatus');
        var btnNextPageGridRRStatus = document.getElementById('btnMoveToNextPageGridRRStatus');
        var btnLastPageGridRRStatus = document.getElementById('btnMoveToLastPageGridRRStatus');
        var btnCurrentPageGridRRStatus = document.getElementById('btnCurrentPageGridRRStatus');
        var btnFirstPageGridRRAdvances = document.getElementById('btnMoveToFirstPageGridRRAdvances');
        var btnPreviousPageGridRRAdvances = document.getElementById('btnMoveToPreviousPageGridRRAdvances');
        var btnNextPageGridRRAdvances = document.getElementById('btnMoveToNextPageGridRRAdvances');
        var btnLastPageGridRRAdvances = document.getElementById('btnMoveToLastPageGridRRAdvances');
        var btnCurrentPageGridRRAdvances = document.getElementById('btnCurrentPageGridRRAdvances');

        // =======================
        // Get URL Parameter Value
        // =======================
        function getParam(name) {
            name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");

            var regexS = "[\\?&]" + name + "=([^&#]*)";
            var regex = new RegExp(regexS);

            var results = regex.exec(window.location.href);
            if (results == null) {
                return "";
            } else{
                return results[1];
            }
        }

        // ========================
        // GET Branch for Combo Box
        // ========================
        function getBranchesForComboBox() {
            NProgress.start();
            var branchesObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/disbursement/dropdown/list/branch',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            branchesObservableArray.push({
                                Id: results[i]["Id"],
                                Branch: results[i]["Branch"]
                            });
                        }
                    }

                    cboCVBranch.dispose();
                    cboCVBranch = new wijmo.input.ComboBox('#cboCVBranch', {
                        disabled: true,
                        isEditable: false,
                        placeholder: "Select Branch",
                        itemsSource: branchesObservableArray,
                        displayMemberPath: "Branch",
                        selectedValuePath: "Id"
                    });

                    getSupplierForComboBox();
                }
            });
        }

        // ==========================
        // GET Supplier for Combo Box
        // ==========================
        function getSupplierForComboBox() {
            var suppliersObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/disbursement/dropdown/list/supplier',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            suppliersObservableArray.push({
                                Id: results[i]["Id"],
                                Supplier: results[i]["Article"]
                            });
                        }
                    }

                    cboCVSupplier.dispose();
                    cboCVSupplier = new wijmo.input.ComboBox('#cboCVSupplier', {
                        isEditable: false,
                        placeholder: "Select Supplier",
                        itemsSource: suppliersObservableArray,
                        displayMemberPath: "Supplier",
                        selectedValuePath: "Id",
                        onSelectedIndexChanged: function () {
                            document.getElementById("disbursement_Payee").value = this.selectedItem["Supplier"];
                        }
                    });

                    getPaytypeForComboBox();
                }
            });
        }

        // =========================
        // GET Paytype for Combo Box
        // =========================
        function getPaytypeForComboBox() {
            var payTypesObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/disbursement/dropdown/list/payType',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            payTypesObservableArray.push({
                                Id: results[i]["Id"],
                                PayType: results[i]["PayType"]
                            });
                        }
                    }

                    cboCVPayType.dispose();
                    cboCVPayType = new wijmo.input.ComboBox('#cboCVPayType', {
                        isEditable: false,
                        placeholder: "Select Pay Type",
                        itemsSource: payTypesObservableArray,
                        displayMemberPath: "PayType",
                        selectedValuePath: "Id"
                    });

                    getBankForComboBox();
                }
            });
        }

        // ======================
        // GET Bank for Combo Box
        // ======================
        function getBankForComboBox() {
            var banksObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/disbursement/dropdown/list/bank',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            banksObservableArray.push({
                                Id: results[i]["Id"],
                                Bank: results[i]["Article"]
                            });
                        }
                    }

                    cboCVBank.dispose();
                    cboCVBank = new wijmo.input.ComboBox('#cboCVBank', {
                        isEditable: false,
                        placeholder: "Select Bank",
                        itemsSource: banksObservableArray,
                        displayMemberPath: "Bank",
                        selectedValuePath: "Id"
                    });

                    getUsersForComboBox();
                }
            });
        }

        // =======================
        // GET Users for Combo Box
        // =======================
        function getUsersForComboBox() {
            var usersObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/disbursement/dropdown/list/users',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            usersObservableArray.push({
                                Id: results[i]["Id"],
                                FullName: results[i]["FullName"]
                            });
                        }
                    }

                    cboCVPreparedBy.dispose();
                    cboCVPreparedBy = new wijmo.input.ComboBox('#cboCVPreparedBy', {
                        disabled: true,
                        isEditable: false,
                        placeholder: "Select User",
                        itemsSource: usersObservableArray,
                        displayMemberPath: "FullName",
                        selectedValuePath: "Id"
                    });

                    cboCVCheckedBy.dispose();
                    cboCVCheckedBy = new wijmo.input.ComboBox('#cboCVCheckedBy', {
                        isEditable: false,
                        placeholder: "Select User",
                        itemsSource: usersObservableArray,
                        displayMemberPath: "FullName",
                        selectedValuePath: "Id"
                    });

                    cboCVApprovedBy.dispose();
                    cboCVApprovedBy = new wijmo.input.ComboBox('#cboCVApprovedBy', {
                        isEditable: false,
                        placeholder: "Select User",
                        itemsSource: usersObservableArray,
                        displayMemberPath: "FullName",
                        selectedValuePath: "Id"
                    });

                    getDisbursementById();
                }
            });
        }

        // ======================
        // GET Disbursement By Id
        // ======================
        function getDisbursementById() {
            if (document.location.search.length > 0) {
                var id = getParam("id");
                $.ajax({
                    url: '/api/disbursement/detail/' + id,
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    success: function (results) {
                        if (results != null) {
                            cboCVBranch.selectedValue = results.BranchId;
                            document.getElementById('disbursement_CVNumber').value = results.CVNumber;
                            cboCVDate.dispose();
                            cboCVDate = new wijmo.input.InputDate('#cboCVDate', {
                                format: 'MM-dd-yyyy',
                                value: new Date(results.CVDate)
                            });
                            document.getElementById('disbursement_ManualCVNumber').value = results.ManualCVNumber;
                            cboCVSupplier.selectedValue = results.SupplierId;
                            document.getElementById('disbursement_Payee').value = results.Payee;
                            cboCVPayType.selectedValue = results.PayTypeId;
                            document.getElementById('disbursement_Particulars').value = results.Particulars;
                            cboCVBank.selectedValue = results.BankId;
                            document.getElementById('disbursement_CheckNumber').value = results.CheckNumber;
                            cboCVCheckDate.dispose();
                            cboCVCheckDate = new wijmo.input.InputDate('#cboCVCheckDate', {
                                format: 'MM-dd-yyyy',
                                value: new Date(results.CheckDate)
                            });
                            document.getElementById('disbursement_Amount').value = formatDecimalValues(results.Amount);
                            document.getElementById('disbursement_CrossCheck').checked = results.IsCrossCheck;
                            cboCVPreparedBy.selectedValue = results.PreparedById;
                            cboCVCheckedBy.selectedValue = results.CheckedById;
                            cboCVApprovedBy.selectedValue = results.ApprovedById;
                            document.getElementById('disbursement_IsClear').checked = results.IsClear;
                            document.getElementById('createdBy').innerHTML = results.CreatedBy;
                            document.getElementById('createdDate').innerHTML = results.CreatedDateTime;
                            document.getElementById('updatedBy').innerHTML = results.UpdatedBy;
                            document.getElementById('updatedDate').innerHTML = results.UpdatedDateTime;

                            if (results.IsLocked) {
                                cboCVDate.disabled = true;
                                document.getElementById('disbursement_ManualCVNumber').disabled = true;
                                cboCVSupplier.disabled = true;
                                document.getElementById('disbursement_Payee').disabled = true;
                                cboCVPayType.disabled = true;
                                document.getElementById('disbursement_Particulars').disabled = true;
                                cboCVBank.disabled = true;
                                document.getElementById('disbursement_CheckNumber').disabled = true;
                                cboCVCheckDate.disabled = true;
                                document.getElementById('disbursement_CrossCheck').disabled = true;
                                cboCVPreparedBy.disabled = true;
                                cboCVCheckedBy.disabled = true;
                                cboCVApprovedBy.disabled = true;
                                document.getElementById('disbursement_IsClear').disabled = true;

                                $("#btnLockDisbursement").prop("disabled", true);
                                $("#cmdAP").prop("disabled", true);
                                $("#cmdAdvances").prop("disabled", true);
                                $("#btnAddDisbursementLine").prop("disabled", true);

                                isLocked = true;
                            } else {
                                $("#btnJournalDisbursement").prop("disabled", true);
                                $("#btnUnlockDisbursement").prop("disabled", true);
                                $("#btnPrintDisbursement").prop("disabled", true);
                            }

                            createCboShowRows();
                            createDisbursementLineFlexGrid();
                        } else {
                            alert("No Data");
                            window.location = "/Software/Disbursement";
                        }
                    }
                });
            } else {
                alert("No Id Parameter Value");
                window.location = "/Software/Disbursement";
            }
        }

        // =================
        // Lock Disbursement
        // =================
        function btnLockDisbursementOnclick() {
            var disbursementObject = new Object();
            disbursementObject.CVDate = cboCVDate.value.toLocaleDateString();
            disbursementObject.SupplierId = cboCVSupplier.selectedValue;
            disbursementObject.Payee = document.getElementById('disbursement_Payee').value;
            disbursementObject.PayTypeId = cboCVPayType.selectedValue;
            disbursementObject.BankId = cboCVBank.selectedValue;
            disbursementObject.ManualCVNumber = document.getElementById('disbursement_ManualCVNumber').value;
            disbursementObject.Particulars = document.getElementById('disbursement_Particulars').value;
            disbursementObject.CheckNumber = document.getElementById('disbursement_CheckNumber').value;
            disbursementObject.CheckDate = cboCVCheckDate.value.toLocaleDateString();
            disbursementObject.IsCrossCheck = document.getElementById('disbursement_CrossCheck').checked;
            disbursementObject.CheckedById = cboCVCheckedBy.selectedValue;
            disbursementObject.ApprovedById = cboCVApprovedBy.selectedValue;
            disbursementObject.IsClear = document.getElementById('disbursement_IsClear').checked;
            var data = JSON.stringify(disbursementObject);

            var isValid = true;
            $('.requiredDisbursement').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                } else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            if (isValid) {
                document.getElementById('btnLockDisbursement').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Locking";
                $("#btnJournalDisbursement").prop("disabled", true);
                $("#btnLockDisbursement").prop("disabled", true);
                $("#btnUnlockDisbursement").prop("disabled", true);
                $("#btnPrintDisbursement").prop("disabled", true);
                $("#btnCloseDisbursement").prop("disabled", true);

                var id = getParam('id');

                $.ajax({
                    type: "PUT",
                    url: '/api/disbursement/lock/' + id,
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    data: data,
                    statusCode: {
                        200: function () {
                            toastr.success("Lock Successful");
                            window.setTimeout(function () {
                                location.reload()
                            }, 1000);
                        },
                        404: function (message) {
                            toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                            document.getElementById('btnLockDisbursement').innerHTML = "<i class='fa fa-lock'></i> Lock";
                            $("#btnLockDisbursement").prop("disabled", false);
                            $("#btnCloseDisbursement").prop("disabled", true);
                        },
                        400: function (message) {
                            toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                            document.getElementById('btnLockDisbursement').innerHTML = "<i class='fa fa-lock'></i> Lock";
                            $("#btnLockDisbursement").prop("disabled", false);
                            $("#btnCloseDisbursement").prop("disabled", true);
                        },
                        500: function (message) {
                            toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                            document.getElementById('btnLockDisbursement').innerHTML = "<i class='fa fa-lock'></i> Lock";
                            $("#btnLockDisbursement").prop("disabled", false);
                            $("#btnCloseDisbursement").prop("disabled", true);
                        }
                    },
                });
            } else {
                toastr.error("Invalid Entry");
            }
        }

        // ================
        // Edit Disbursment
        // ================
        function btnUnlockDisbursementOnclick() {
            document.getElementById('btnUnlockDisbursement').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Unlocking";
            $("#btnJournalDisbursement").prop("disabled", true);
            $("#btnLockDisbursement").prop("disabled", true);
            $("#btnUnlockDisbursement").prop("disabled", true);
            $("#btnPrintDisbursement").prop("disabled", true);
            $("#btnCloseDisbursement").prop("disabled", true);

            var id = getParam("id");

            $.ajax({
                type: "PUT",
                url: '/api/disbursement/unlock/' + id,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Unlock Successful");
                        window.setTimeout(function () {
                            location.reload()
                        }, 1000);
                    },
                    404: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                        document.getElementById('btnUnlockDisbursement').innerHTML = "<i class='fa fa-unlock'></i> Unlock";
                        $("#btnJournalDisbursement").prop("disabled", false);
                        $("#btnUnlockDisbursement").prop("disabled", false);
                        $("#btnPrintDisbursement").prop("disabled", false);
                        $("#btnCloseDisbursement").prop("disabled", false);
                    },
                    400: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                        document.getElementById('btnUnlockDisbursement').innerHTML = "<i class='fa fa-unlock'></i> Unlock";
                        $("#btnJournalDisbursement").prop("disabled", false);
                        $("#btnUnlockDisbursement").prop("disabled", false);
                        $("#btnPrintDisbursement").prop("disabled", false);
                        $("#btnCloseDisbursement").prop("disabled", false);
                    },
                    500: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                        document.getElementById('btnUnlockDisbursement').innerHTML = "<i class='fa fa-unlock'></i> Unlock";
                        $("#btnJournalDisbursement").prop("disabled", false);
                        $("#btnUnlockDisbursement").prop("disabled", false);
                        $("#btnPrintDisbursement").prop("disabled", false);
                        $("#btnCloseDisbursement").prop("disabled", false);
                    }
                }
            });
        }

        // ========
        // Print CV
        // ========
        function btnPrintDisbursementOnclick() {
            var disbursementId = getParam("id");
            var pirntLink = "/RepDisbursement/Disbursement?DisbursementId=" + disbursementId;
            window.open(pirntLink, '_blank');
        }

        // ==========================
        // GET Disbursement Line List
        // ==========================
        function getDisbursementLines() {
            var disbursementLinesObservableArray = new wijmo.collections.ObservableArray;
            if (document.location.search.length > 0) {
                var CVId = getParam("id");

                $.ajax({
                    url: '/api/disbursementLine/list/' + CVId,
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    success: function (results) {
                        var totalAmount = 0;
                        if (results.length > 0) {
                            var btnEditId = "<button class='btn btn-primary btn-xs btn-block' onclick='btnEditDisbursementLine_OnClick()'><i class='fa fa-edit'></i> Edit</button>";
                            var btnDeleteId = "<button class='btn btn-danger btn-xs btn-block' onclick='btnDeleteDisbursementLine_OnClick()'><i class='fa fa-trash'></i> Delete</button>";
                            if (isLocked) {
                                btnEditId = "<button class='btn btn-primary btn-xs btn-block' onclick='btnEditDisbursementLine_OnClick()' disabled><i class='fa fa-edit'></i> Edit</button>";
                                btnDeleteId =  "<button class='btn btn-danger btn-xs btn-block' onclick='btnDeleteDisbursementLine_OnClick()' disabled><i class='fa fa-trash'></i> Delete</button>";
                            }

                            for (i = 0; i < results.length; i++) {
                                disbursementLinesObservableArray.push({
                                    EditId: btnEditId,
                                    DeleteId: btnDeleteId,
                                    Id: results[i]["Id"],
                                    CVId: results[i]["CVId"],
                                    BranchId: results[i]["BranchId"],
                                    Branch: results[i]["Branch"],
                                    AccountId: results[i]["AccountId"],
                                    Account: results[i]["Account"],
                                    ArticleId: results[i]["ArticleId"],
                                    Article: results[i]["Article"],
                                    RRId: results[i]["RRId"],
                                    RRNumber: results[i]["RRNumber"],
                                    Particulars: results[i]["Particulars"],
                                    Amount: results[i]["Amount"],
                                    AmountDisplay: parseFloat(results[i]["Amount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                });

                                totalAmount += results[i]["Amount"];
                            }
                        }

                        document.getElementById('totalCVAmount').value = parseFloat(totalAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        document.getElementById('disbursement_Amount').value = parseFloat(totalAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        NProgress.done();
                    }
                });
            }

            return disbursementLinesObservableArray;
        }

        // =========================
        // Update Navigation Buttons
        // =========================
        function updateNavigateButtonsItems() {
            if (disbursementLines.pageSize <= 0) {
                document.getElementById('naviagtionPageGrid').style.display = 'none';
                return;
            }
            document.getElementById('naviagtionPageGrid').style.display = 'block';
            if (disbursementLines.pageIndex === 0) {
                btnFirstPageGrid.setAttribute('disabled', 'disabled');
                btnPreviousPageGrid.setAttribute('disabled', 'disabled');
                btnNextPageGrid.removeAttribute('disabled');
                btnLastPageGrid.removeAttribute('disabled');
            } else if (disbursementLines.pageIndex === (disbursementLines.pageCount - 1)) {
                btnFirstPageGrid.removeAttribute('disabled');
                btnPreviousPageGrid.removeAttribute('disabled');
                btnLastPageGrid.setAttribute('disabled', 'disabled');
                btnNextPageGrid.setAttribute('disabled', 'disabled');
            } else {
                btnFirstPageGrid.removeAttribute('disabled');
                btnPreviousPageGrid.removeAttribute('disabled');
                btnNextPageGrid.removeAttribute('disabled');
                btnLastPageGrid.removeAttribute('disabled');
            }
            btnCurrentPageGrid.innerHTML = (disbursementLines.pageIndex + 1) + ' / ' + disbursementLines.pageCount;
        }

        // ===============
        // Show Rows Table
        // ===============
        function createCboShowRows() {
            var rowsObservableArray = new wijmo.collections.ObservableArray();

            for (var i = 0; i <= 4; i++) {
                var rows = 0;
                var rowsString = "";

                if (i == 0) {
                    rows = 15;
                    rowsString = "Show 15 Rows";
                } else if (i == 1) {
                    rows = 50;
                    rowsString = "Show 50 Rows";
                } else if (i == 2) {
                    rows = 100;
                    rowsString = "Show 100 Rows";
                } else if (i == 3) {
                    rows = 150;
                    rowsString = "Show 150 Rows";
                } else {
                    rows = 200;
                    rowsString = "Show 200 Rows";
                }

                rowsObservableArray.push({
                    rowNumber: rows,
                    rowString: rowsString
                });
            }

            cboDisbursementLineShowNumberOfRows.dispose();
            cboDisbursementLineShowNumberOfRows = new wijmo.input.ComboBox('#cboDisbursementLineShowNumberOfRows', {
                isEditable: false,
                itemsSource: rowsObservableArray,
                displayMemberPath: "rowString",
                selectedValuePath: "rowNumber",
                selectedValue: 50,
                onSelectedIndexChanged: function () {
                    NProgress.start();

                    setTimeout(function () {
                        var numberOfRows = cboDisbursementLineShowNumberOfRows.selectedValue;
                        disbursementLines.pageSize = parseInt(numberOfRows);
                        disbursementLines.refresh();
                        disbursementGrid.refresh();

                        NProgress.done();
                    }, 300);
                }
            });
        }

        // =================================
        // Refresh Disbursment Line FlexGrid
        // =================================
        function refreshDisbursementLineFlexGrid() {
            disbursementLines = new wijmo.collections.CollectionView(getDisbursementLines());
            disbursementLines.canFilter = true;
            disbursementLines.pageSize = cboDisbursementLineShowNumberOfRows.selectedValue;

            var filterText = '';
            $('#DisbursementLineInputFilter').keyup(function () {
                filterText = this.value.toLowerCase();
                disbursementLines.refresh();
            });

            disbursementLines.filter = function (item) {
                return !filterText || (item.Branch.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Account.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Article.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Particulars.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.RRNumber.toLowerCase().indexOf(filterText) > -1);
            }

            disbursementLines.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsItems();
            });

            disbursementGrid.itemsSource = disbursementLines;
            disbursementGrid.trackChanges = true;
        }

        // =========================
        // Disbursment Line FlexGrid
        // =========================
        function createDisbursementLineFlexGrid() {
            disbursementLines = new wijmo.collections.CollectionView(getDisbursementLines());
            disbursementLines.canFilter = true;
            disbursementLines.pageSize = cboDisbursementLineShowNumberOfRows.selectedValue;

            var filterText = '';
            $('#DisbursementLineInputFilter').keyup(function () {
                filterText = this.value.toLowerCase();
                disbursementLines.refresh();
            });

            disbursementLines.filter = function (item) {
                return !filterText || (item.Branch.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Account.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Article.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Particulars.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.RRNumber.toLowerCase().indexOf(filterText) > -1);
            }

            disbursementLines.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsItems();
            });

            disbursementGrid = new wijmo.grid.FlexGrid('#DisbursementLineGrid');
            disbursementGrid.initialize({
                columns: [
                    @{
                        if (canEdit)
                        {
                            <text>
                                {
                                    "header": "Edit",
                                    "binding": "EditId",
                                    "width": 70,
                                    "align": "center",
                                    "allowResizing": false,
                                    "allowSorting": false,
                                    "isContentHtml": true
                                },
                            </text>
                        }
                        if (canDelete)
                        {
                            <text>
                                {
                                    "header": "Delete",
                                    "binding": "DeleteId",
                                    "width": 70,
                                    "align": "center",
                                    "allowResizing": false,
                                    "allowSorting": false,
                                    "isContentHtml": true
                                },
                            </text>
                        }
                    }
                    {
                        "header": "Branch",
                        "binding": "Branch",
                        "allowSorting": true,
                        "width": "2*"
                    },
                    {
                        "header": "Account",
                        "binding": "Account",
                        "allowSorting": true,
                        "width": "3*"
                    },
                    {
                        "header": "Article",
                        "binding": "Article",
                        "allowSorting": true,
                        "width": "3*"
                    },
                    {
                        "header": "Particulars",
                        "binding": "Particulars",
                        "allowSorting": true,
                        "width": "3*"
                    },
                    {
                        "header": "RR No.",
                        "binding": "RRNumber",
                        "allowSorting": true,
                        "width": "2*"
                    },
                    {
                        "header": "Amount",
                        "binding": "AmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": "2*"
                    }
                ],
                autoGenerateColumns: false,
                itemsSource: disbursementLines,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            disbursementGrid.trackChanges = true;

            updateNavigateButtonsItems();

            btnFirstPageGrid.addEventListener('click', function () {
                disbursementLines.moveToFirstPage();
                updateNavigateButtonsItems();
            });

            btnPreviousPageGrid.addEventListener('click', function () {
                disbursementLines.moveToPreviousPage();
                updateNavigateButtonsItems();
            });

            btnNextPageGrid.addEventListener('click', function () {
                disbursementLines.moveToNextPage();
                updateNavigateButtonsItems();
            });

            btnLastPageGrid.addEventListener('click', function () {
                disbursementLines.moveToLastPage();
                updateNavigateButtonsItems();
            });
        }

        // ==========================================
        // GET Disbursement Line Branch for Combo Box
        // ==========================================
        function getDisbursementBranchesForComboBox(branchId, accountId, articleId, RRId) {
            var disbursementLineBranchesObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/disbursementLine/dropdown/list/branch',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            disbursementLineBranchesObservableArray.push({
                                Id: results[i]["Id"],
                                Branch: results[i]["Branch"]
                            });
                        }
                    }

                    var disabled = true;
                    if (results.length > 0) {
                        disabled = false;
                        $("#cmdSaveDisbursementLineButton").prop("disabled", false);
                    } else {
                        $("#cmdSaveDisbursementLineButton").prop("disabled", true);
                    }

                    cboDisbursementLineBranch.dispose();
                    cboDisbursementLineBranch = new wijmo.input.ComboBox('#cboDisbursementLineBranch', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: disbursementLineBranchesObservableArray,
                        displayMemberPath: "Branch",
                        selectedValuePath: "Id",
                        selectedValue: branchId
                    });

                    getDisbursementLineAccountForComboBox(accountId, articleId, RRId)
                }
            });
        }

        // =============================
        // Get Disbursement Line Account
        // =============================
        function getDisbursementLineAccountForComboBox(accountId, articleId, RRId) {
            var disbursementLineAccountsObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/disbursementLine/dropdown/list/account',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            disbursementLineAccountsObservableArray.push({
                                Id: results[i]["Id"],
                                AccountCode: results[i]["AccountCode"],
                                Account: results[i]["Account"]
                            });
                        }
                    }

                    var disabled = true;
                    if (results.length > 0) {
                        disabled = false;
                    } else {
                        $("#cmdSaveDisbursementLineButton").prop("disabled", true);
                    }

                    cboDisbursementLineAccountCode.dispose();
                    cboDisbursementLineAccountCode = new wijmo.input.ComboBox('#cboDisbursementLineAccountCode', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: disbursementLineAccountsObservableArray,
                        displayMemberPath: "AccountCode",
                        selectedValuePath: "Id",
                        selectedValue: accountId,
                        onSelectedIndexChanged: function () {
                            cboDisbursementLineAccount.selectedValue = this.selectedValue;
                        }
                    });

                    cboDisbursementLineAccount.dispose();
                    cboDisbursementLineAccount = new wijmo.input.ComboBox('#cboDisbursementLineAccount', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: disbursementLineAccountsObservableArray,
                        displayMemberPath: "Account",
                        selectedValuePath: "Id",
                        selectedValue: accountId,
                        onSelectedIndexChanged: function () {
                            cboDisbursementLineAccountCode.selectedValue = this.selectedValue;
                            cboDisbursementLineArticle.disabled = true;
                            IsAccountChanged = true;
                            getDisbursementArticlesForComboBox(articleId, RRId);
                        }
                    });

                    getDisbursementArticlesForComboBox(articleId, RRId);
                }
            });
        }

        // ============================================
        // GET Disbursement Line Articles for Combo Box
        // ============================================
        function getDisbursementArticlesForComboBox(articleId, RRId) {
            var disbursementLineArticlesObservableArray = new wijmo.collections.ObservableArray();
            if (cboDisbursementLineAccount.selectedValue != null) {
                $.ajax({
                    url: '/api/disbursementLine/dropdown/list/article/' + cboDisbursementLineAccount.selectedValue,
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    success: function (results) {
                        if (results.length > 0) {
                            for (i = 0; i < results.length; i++) {
                                disbursementLineArticlesObservableArray.push({
                                    Id: results[i]["Id"],
                                    Article: results[i]["Article"]
                                });
                            }
                        }

                        var disabled = true;
                        if (results.length > 0) {
                            disabled = false;
                            $("#cmdSaveDisbursementLineButton").prop("disabled", false);
                        } else {
                            $("#cmdSaveDisbursementLineButton").prop("disabled", true);
                        }

                        cboDisbursementLineArticle.dispose();
                        cboDisbursementLineArticle = new wijmo.input.ComboBox('#cboDisbursementLineArticle', {
                            disabled: disabled,
                            isEditable: false,
                            itemsSource: disbursementLineArticlesObservableArray,
                            displayMemberPath: "Article",
                            selectedValuePath: "Id",
                            selectedValue: articleId
                        });

                        if (!IsAccountChanged) {
                            getReceivingReceiptForComboBoxInDisbursementLine(RRId);
                        }
                    }
                });
            } else {
                cboDisbursementLineArticle.dispose();
                cboDisbursementLineArticle = new wijmo.input.ComboBox('#cboDisbursementLineArticle', {
                    disabled: true,
                    isEditable: false,
                    itemsSource: disbursementLineArticlesObservableArray
                });

                if (!IsAccountChanged) {
                    getReceivingReceiptForComboBoxInDisbursementLine(RRId);
                }
            }
        }

        // ================================================
        // GET RR Number for Combo Box in Disbursement Line
        // ================================================
        function getReceivingReceiptForComboBoxInDisbursementLine(RRId) {
            var disbursementLineReceivingReceiptsObservableArray = new wijmo.collections.ObservableArray();
            var supplierId = cboCVSupplier.selectedValue;
            $.ajax({
                url: '/api/disbursementLine/dropdown/list/receivingReceipt/' + supplierId,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            disbursementLineReceivingReceiptsObservableArray.push({
                                Id: results[i]["Id"],
                                RRNumber: results[i]["RRNumber"],
                                RRDate: results[i]["RRDate"],
                                RRDetails: results[i]["RRNumber"] + " (" + (results[i]["RRDate"]).replace(/\//g, '-') + ")",
                                BalanceAmount: results[i]["BalanceAmount"],
                            });
                        }
                    }

                    var disabled = true;
                    if (results.length > 0) {
                        disabled = false;
                    }

                    cboDisbursementLineRRNo.dispose();
                    cboDisbursementLineRRNo = new wijmo.input.ComboBox('#cboDisbursementLineRRNo', {
                        disabled: disabled,
                        required: false,
                        isEditable: false,
                        itemsSource: disbursementLineReceivingReceiptsObservableArray,
                        displayMemberPath: "RRDetails",
                        selectedValuePath: "Id",
                        selectedValue: RRId,
                        onSelectedIndexChanged: function () {
                            if (this.selectedValue != null) {
                                document.getElementById("disbursementLine_Amount").value = formatDecimalValues(this.selectedItem["BalanceAmount"]);
                            } else {
                                document.getElementById("disbursementLine_Amount").value = formatDecimalValues(0);
                            }
                        }
                    });

                    if (disbursementLineId == 0) {
                        if (cboDisbursementLineRRNo.selectedValue != null) {
                            document.getElementById("disbursementLine_Amount").value = formatDecimalValues(cboDisbursementLineRRNo.selectedItem["BalanceAmount"]);
                        } else {
                            document.getElementById("disbursementLine_Amount").value = formatDecimalValues(0);
                        }
                    }

                    $("#loadingLines").hide();
                    $("#disbursementLineDetailForm").show();
                }
            });
        }

        // =====================
        // ADD Disbursement Line
        // =====================
        function cmdAddDisbursementLineButton_OnClick() {
            $('#disbursementLineEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $("#loadingLines").show();
            document.getElementById("loadingLines").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#disbursementLineDetailForm").hide();

            document.getElementById('cmdSaveDisbursementLineButton').innerHTML = "<i class='fa fa-save'></i> Save";
            $("#cmdSaveDisbursementLineButton").prop("disabled", true);
            $("#cmdDisbursementLineDetailCloseButton").prop("disabled", false);

            $('.requiredDisbursementLine').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            IsAccountChanged = false;
            disbursementLineId = 0;

            var cboCVBranchId = cboCVBranch.selectedValue;
            getDisbursementBranchesForComboBox(cboCVBranchId, 0, 0, 0);
            var headerParticulars = document.getElementById("disbursement_Particulars").value;
            document.getElementById('disbursementLine_Particulars').value = headerParticulars;
        }

        // ======================
        // Edit Disbursement Line
        // ======================
        function btnEditDisbursementLine_OnClick() {
            $('#disbursementLineEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $("#loadingLines").show();
            document.getElementById("loadingLines").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#disbursementLineDetailForm").hide();

            document.getElementById('cmdSaveDisbursementLineButton').innerHTML = "<i class='fa fa-save'></i> Save";
            $("#cmdSaveDisbursementLineButton").prop("disabled", true);
            $("#cmdDisbursementLineDetailCloseButton").prop("disabled", false);

            $('.requiredDisbursementLine').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            IsAccountChanged = false;
            disbursementLines.editItem(disbursementLines.currentItem);
            var disbursementLine = disbursementLines.currentEditItem;
            disbursementLineId = disbursementLine.Id;
            getDisbursementBranchesForComboBox(disbursementLine.BranchId, disbursementLine.AccountId, disbursementLine.ArticleId, disbursementLine.RRId);
            document.getElementById('disbursementLine_Particulars').value = disbursementLine.Particulars;
            document.getElementById('disbursementLine_Amount').value = formatDecimalValues(disbursementLine.Amount);
        }

        // ======================
        // SAVE Disbursement Line
        // ======================
        function cmdDisbursementLineSaveButton_OnClick() {
            var disbursementLineObject = new Object();
            disbursementLineObject.BranchId = cboDisbursementLineBranch.selectedValue;
            disbursementLineObject.AccountId = cboDisbursementLineAccount.selectedValue;
            disbursementLineObject.ArticleId = cboDisbursementLineArticle.selectedValue;
            disbursementLineObject.RRId = cboDisbursementLineRRNo.selectedValue;
            disbursementLineObject.Particulars = document.getElementById('disbursementLine_Particulars').value;
            disbursementLineObject.Amount = document.getElementById('disbursementLine_Amount').value;
            var disbursementLineData = JSON.stringify(disbursementLineObject);

            var isValid = true;
            $('.requiredDisbursementLine').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                } else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            if (isValid) {
                document.getElementById('cmdSaveDisbursementLineButton').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Saving";
                $("#cmdSaveDisbursementLineButton").prop("disabled", true);
                $("#cmdDisbursementLineDetailCloseButton").prop("disabled", true);

                var CVId = getParam("id");

                if (disbursementLineId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/disbursementLine/add/' + CVId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: disbursementLineData,
                        statusCode: {
                            200: function () {
                                toastr.success("Save Successful");
                                $('#disbursementLineEdit').modal('hide');
                                refreshDisbursementLineFlexGrid();
                            },
                            404: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                                $('#disbursementLineEdit').modal('hide');
                                document.getElementById('cmdSaveDisbursementLineButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#cmdSaveDisbursementLineButton").prop("disabled", false);
                                $("#cmdDisbursementLineDetailCloseButton").prop("disabled", false);
                            },
                            400: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                                $('#disbursementLineEdit').modal('hide');
                                document.getElementById('cmdSaveDisbursementLineButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#cmdSaveDisbursementLineButton").prop("disabled", false);
                                $("#cmdDisbursementLineDetailCloseButton").prop("disabled", false);
                            },
                            500: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                                $('#disbursementLineEdit').modal('hide');
                                document.getElementById('cmdSaveDisbursementLineButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#cmdSaveDisbursementLineButton").prop("disabled", false);
                                $("#cmdDisbursementLineDetailCloseButton").prop("disabled", false);
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/disbursementLine/update/' + disbursementLineId + '/' + CVId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: disbursementLineData,
                        statusCode: {
                            200: function () {
                                toastr.success("Update Successful");
                                $('#disbursementLineEdit').modal('hide');
                                refreshDisbursementLineFlexGrid();
                            },
                            404: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                                $('#disbursementLineEdit').modal('hide');
                                document.getElementById('cmdSaveDisbursementLineButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#cmdSaveDisbursementLineButton").prop("disabled", false);
                                $("#cmdDisbursementLineDetailCloseButton").prop("disabled", false);
                            },
                            400: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                                $('#disbursementLineEdit').modal('hide');
                                document.getElementById('cmdSaveDisbursementLineButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#cmdSaveDisbursementLineButton").prop("disabled", false);
                                $("#cmdDisbursementLineDetailCloseButton").prop("disabled", false);
                            },
                            500: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                                $('#disbursementLineEdit').modal('hide');
                                document.getElementById('cmdSaveDisbursementLineButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#cmdSaveDisbursementLineButton").prop("disabled", false);
                                $("#cmdDisbursementLineDetailCloseButton").prop("disabled", false);
                            }
                        }
                    });
                }
            } else {
                toastr.error("Invalid Entry");
            }
        }

        // ========================
        // Delete Disbursement Line
        // ========================
        function btnDeleteDisbursementLine_OnClick() {
            $('#deleteDisbursementLineConfirm').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById('cmdConfirmDeleteDisbursementLine').innerHTML = "<i class='fa fa-trash'></i> Delete";
            $("#cmdConfirmDeleteDisbursementLine").prop("disabled", false);
            $("#cmdDisbursementLineDetailCloseButton").prop("disabled", false);
        }

        // Confirm Delete Disbursement Line
        function cmdDisbursementLineConfirmDeleteButton_OnClick() {
            document.getElementById('cmdConfirmDeleteDisbursementLine').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Deleting";
            $("#cmdConfirmDeleteDisbursementLine").prop("disabled", true);
            $("#cmdDisbursementLineDetailCloseButton").prop("disabled", true);

            var CVId = getParam("id");

            disbursementLines.editItem(disbursementLines.currentItem);
            var disbursementLineId = disbursementLines.currentEditItem.Id;

            $.ajax({
                url: '/api/disbursementLine/delete/' + disbursementLineId + '/' + CVId,
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Delete Successful");
                        $('#deleteDisbursementLineConfirm').modal('hide');
                        refreshDisbursementLineFlexGrid();
                    },
                    404: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                        document.getElementById('cmdConfirmDeleteDisbursementLine').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $("#cmdConfirmDeleteDisbursementLine").prop("disabled", false);
                        $("#cmdDisbursementLineDetailCloseButton").prop("disabled", false);
                    },
                    400: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                        document.getElementById('cmdConfirmDeleteDisbursementLine').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $("#cmdConfirmDeleteDisbursementLine").prop("disabled", false);
                        $("#cmdDisbursementLineDetailCloseButton").prop("disabled", false);
                    },
                    500: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                        document.getElementById('cmdConfirmDeleteDisbursementLine').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $("#cmdConfirmDeleteDisbursementLine").prop("disabled", false);
                        $("#cmdDisbursementLineDetailCloseButton").prop("disabled", false);
                    }
                }
            });
        }

        // ===========
        // Get Journal
        // ===========
        function getJournalListForRR() {
            var journalsObservableArray = new wijmo.collections.ObservableArray;
            var CVId = getParam('id');
            $.ajax({
                url: '/api/jounal/disbursement/list/' + CVId,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {

                            var journalDateResult = new Date(results[i]["JournalDate"])
                            var journalDate = ('0' + (journalDateResult.getMonth() + 1)).slice(-2) + '-' + ('0' + journalDateResult.getDate()).slice(-2) + '-' + journalDateResult.getFullYear();

                            journalsObservableArray.push({
                                Branch: results[i]["Branch"],
                                JournalDate: journalDate,
                                AccountCode: results[i]["AccountCode"],
                                Account: results[i]["Account"],
                                Article: results[i]["Article"],
                                DebitAmountDisplay: parseFloat(results[i]["DebitAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                CreditAmountDisplay: parseFloat(results[i]["CreditAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")
                            });

                            var debitAmountTotal = 0;
                            var creditAmountTotal = 0;

                            var a = 0;
                            while (a < results.length) {
                                debitAmountTotal += results[a]["DebitAmount"];
                                creditAmountTotal += results[a]["CreditAmount"];
                                a++;
                            }
                        }

                        document.getElementById('totalDebitInJournal').value = debitAmountTotal.toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        document.getElementById('totalCreditInJournal').value = creditAmountTotal.toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        var variance = debitAmountTotal - creditAmountTotal;
                        document.getElementById('variance').value = variance.toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                    }

                    $("#loadingJournalGridList").hide();
                    $("#journal_Content").show();
                }
            });

            return journalsObservableArray;
        }

        // ============
        // Journal List
        // ============
        function btnJournalDisbursementOnclick() {
            $('#journalDetail').modal({
                show: true,
                backdrop: 'static'
            });

            $("#loadingJournalGridList").show();
            document.getElementById("loadingJournalGridList").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#journal_Content").hide();

            setTimeout(function () {
                createJournalFlexGrid();
            }, 500)
        }

        function createJournalFlexGrid() {
            journalCollectionView = new wijmo.collections.CollectionView(getJournalListForRR());

            journalFlexGrid.dispose();
            journalFlexGrid = new wijmo.grid.FlexGrid('#journalFlexGrid');
            journalFlexGrid.initialize({
                columns: [
                    {
                        "header": "Branch",
                        "binding": "Branch",
                        "allowSorting": true,
                        "width": "2.5*"
                    },
                    {
                        "header": "Date",
                        "binding": "JournalDate",
                        "allowSorting": true,
                        "width": "1.5*"
                    },
                    {
                        "header": "Code",
                        "binding": "AccountCode",
                        "allowSorting": true,
                        "width": "1.8*"
                    },
                    {
                        "header": "Account",
                        "binding": "Account",
                        "allowSorting": true,
                        "width": "3*"
                    },
                    {
                        "header": "Article",
                        "binding": "Article",
                        "allowSorting": true,
                        "width": "3*"
                    },
                    {
                        "header": "Debit",
                        "binding": "DebitAmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": "2*",
                    },
                    {
                        "header": "Credit",
                        "binding": "CreditAmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": "2*"
                    }
                ],
                autoGenerateColumns: false,
                itemsSource: journalCollectionView,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            journalFlexGrid.trackChanges = true;
        }

        // =========
        // AP Onlick
        // =========
        function btnnOclickAP() {
            $('#RRStatus').modal({
                show: true,
                backdrop: 'static'
            });

            $('#loadingRRStatus').show();
            document.getElementById("loadingRRStatus").innerHTML = "<b><i class='fa fa-spinner fa-spin'></i></b>";
            $('#statusGrid').hide();
            $('#btnIdApplyAllRR').prop("disabled", true);

            setTimeout(function () {
                createReceivingReceiptStatusFlexGrid();
            }, 500);
        }

        // ==============
        // RR Status Data
        // ==============
        function getReceivingReceiptBySupplierByBalance() {
            var receivingReceiptsObservableArray = new wijmo.collections.ObservableArray;
            $.ajax({
                url: '/api/disbursementLine/popUp/list/receivingReceiptStatus/' + cboCVSupplier.selectedValue,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    $('#btnIdApplyAllRR').prop("disabled", false);
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {

                            var RRDateResult = new Date(results[i]["RRDate"])
                            var RRDate = ('0' + (RRDateResult.getMonth() + 1)).slice(-2) + '-' + ('0' + RRDateResult.getDate()).slice(-2) + '-' + RRDateResult.getFullYear();

                            receivingReceiptsObservableArray.push({
                                Id: results[i]["Id"],
                                RRNumber: results[i]["RRNumber"],
                                RRDate: RRDate,
                                DocumentReference: results[i]["DocumentReference"],
                                Amount: results[i]["Amount"],
                                AmountDisplay: parseFloat(results[i]["Amount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                PaidAmount: results[i]["PaidAmount"],
                                PaidAmountDisplay: parseFloat(results[i]["PaidAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                AdjustmentAmount: results[i]["AdjustmentAmount"],
                                AdjustmentAmountDisplay: parseFloat(results[i]["AdjustmentAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                BalanceAmount: results[i]["BalanceAmount"],
                                BalanceAmountDisplay: parseFloat(results[i]["BalanceAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                Balance: results[i]["BalanceAmount"],
                                BalanceDisplay: parseFloat(results[i]["BalanceAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                Pick: results[i]["BalanceAmount"] == 0 ? "<button class='btn btn-primary btn-xs' onclick='btnPickAmount()'><i class='fa fa-arrow-right'></i></button>" : "<button class='btn btn-warning btn-xs' onclick='btnUnpickAmountReverse()'><i class='fa fa-arrow-left'></i></button>",
                            });
                        }
                    } else {
                        $('#btnIdApplyAllRR').prop("disabled", true);
                    }

                    $('#loadingRRStatus').hide();
                    $('#statusGrid').show();
                }
            });

            return receivingReceiptsObservableArray;
        }

        // ============
        // PICK Balance
        // ============
        function btnPickAmount() {
            receivingReceipts.editItem(receivingReceipts.currentItem);
            var receivingReceipt = receivingReceipts.currentEditItem;
            var balance = receivingReceipt.Amount - receivingReceipt.PaidAmount;
            if (balance > 0) {
                receivingReceipt.Balance = parseFloat(balance).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                receivingReceipt.Pick = "<button class='btn btn-warning btn-xs' onclick='btnUnpickAmountReverse()'><i class='fa fa-arrow-left'></i></button>";
                receivingReceipts.refresh();
                receivingStatusGrid.refresh();
            }
        }

        // ==============
        // REPICK Balance
        // ==============
        function btnUnpickAmountReverse() {
            receivingReceipts.editItem(receivingReceipts.currentItem);
            var receivingReceipt = receivingReceipts.currentEditItem;
            receivingReceipt.Balance = formatDecimalValues(0);
            receivingReceipt.Pick = "<button class='btn btn-primary btn-xs' onclick='btnPickAmount()'><i class='fa fa-arrow-right'></i></button>";
            receivingReceipts.refresh();
            receivingStatusGrid.refresh();
        }

        function btnOnclickApplyAllRR() {
            $('#applyAmount').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById('cmdConfirmApplyAmount').innerHTML = "<i class='fa fa-check'></i> Apply";
            $("#cmdConfirmApplyAmount").prop("disabled", false);
            $("#cmdCloseButtonApplyAmount").prop("disabled", false);
        }

        function btnConfrimApplyAmountOnClick() {
            document.getElementById('cmdConfirmApplyAmount').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Applying";
            $("#cmdConfirmApplyAmount").prop("disabled", true);
            $("#cmdCloseButtonApplyAmount").prop("disabled", true);

            var receivingReceiptArrays = new Array();

            for (var i = 0; i < receivingReceipts.items.length; i++) {
                var item = receivingReceipts.items[i];
                if (item.Balance > 0) {
                    receivingReceiptArrays.push({
                        RRId: item.Id,
                        Amount: item.Balance,
                    });
                }
            }

            var receivingReceitItemsObjects = JSON.stringify(receivingReceiptArrays);
            var CVId = getParam("id");

            $.ajax({
                url: '/api/disbursementLine/popUp/apply/receivingReceiptStatus/' + CVId,
                type: "POST",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: receivingReceitItemsObjects,
                statusCode: {
                    200: function () {
                        toastr.success("Apply Successful");
                        $('#applyAmount').modal('hide');
                        $('#RRStatus').modal('hide');
                        refreshDisbursementLineFlexGrid();
                    },
                    404: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                        $('#applyAmount').modal('hide');
                        $('#RRStatus').modal('hide');
                        document.getElementById('cmdConfirmApplyAmount').innerHTML = "<i class='fa fa-check'></i> Apply";
                        $("#cmdConfirmApplyAmount").prop("disabled", false);
                        $("#cmdCloseButtonApplyAmount").prop("disabled", false);
                    },
                    400: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                        $('#applyAmount').modal('hide');
                        $('#RRStatus').modal('hide');
                        document.getElementById('cmdConfirmApplyAmount').innerHTML = "<i class='fa fa-check'></i> Apply";
                        $("#cmdConfirmApplyAmount").prop("disabled", false);
                        $("#cmdCloseButtonApplyAmount").prop("disabled", false);
                    },
                    500: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                        $('#applyAmount').modal('hide');
                        $('#RRStatus').modal('hide');
                        document.getElementById('cmdConfirmApplyAmount').innerHTML = "<i class='fa fa-check'></i> Apply";
                        $("#cmdConfirmApplyAmount").prop("disabled", false);
                        $("#cmdCloseButtonApplyAmount").prop("disabled", false);
                    }
                }
            });
        }

        // =========================
        // Update Navigation Buttons
        // =========================
        function updateNavigateButtonsRRStatus() {
            if (receivingReceipts.pageSize <= 0) {
                document.getElementById('naviagtionPageGridRRStatus').style.display = 'none';
                return;
            }
            document.getElementById('naviagtionPageGridRRStatus').style.display = 'block';
            if (receivingReceipts.pageIndex === 0) {
                btnFirstPageGridRRStatus.setAttribute('disabled', 'disabled');
                btnPreviousPageGridRRStatus.setAttribute('disabled', 'disabled');
                btnNextPageGridRRStatus.removeAttribute('disabled');
                btnLastPageGridRRStatus.removeAttribute('disabled');
            } else if (receivingReceipts.pageIndex === (receivingReceipts.pageCount - 1)) {
                btnFirstPageGridRRStatus.removeAttribute('disabled');
                btnPreviousPageGridRRStatus.removeAttribute('disabled');
                btnNextPageGridRRStatus.setAttribute('disabled', 'disabled');
                btnLastPageGridRRStatus.setAttribute('disabled', 'disabled');
            } else {
                btnFirstPageGridRRStatus.removeAttribute('disabled');
                btnPreviousPageGridRRStatus.removeAttribute('disabled');
                btnNextPageGridRRStatus.removeAttribute('disabled');
                btnLastPageGridRRStatus.removeAttribute('disabled');
            }
            btnCurrentPageGridRRStatus.innerHTML = (receivingReceipts.pageIndex + 1) + ' / ' + receivingReceipts.pageCount;
        }

        var isAPClicked = false;

        // =============================
        // Receiving Receipt Status Grid
        // =============================
        function createReceivingReceiptStatusFlexGrid() {
            receivingReceipts = new wijmo.collections.CollectionView(getReceivingReceiptBySupplierByBalance());
            receivingReceipts.canFilter = true;
            receivingReceipts.pageSize = 10;

            var filterText = '';
            $('#RRStatusFilter').keyup(function () {
                filterText = this.value.toLowerCase();
                receivingReceipts.refresh();
            });

            receivingReceipts.filter = function (item) {
                return !filterText || (item.DocumentReference.toLowerCase().indexOf(filterText) > -1)
                || (item.RRNumber.toLowerCase().indexOf(filterText) > -1);
            }

            receivingReceipts.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsRRStatus();
            });

            receivingStatusGrid.dispose();
            receivingStatusGrid = new wijmo.grid.FlexGrid('#receivingStatusGrid');
            receivingStatusGrid.initialize({
                columns: [
                            {
                                "header": "RR No.",
                                "binding": "RRNumber",
                                "allowSorting": true,
                                "isReadOnly": true,
                                "width": "1.5*"
                            },
                            {
                                "header": "Doc Ref",
                                "binding": "DocumentReference",
                                "allowSorting": true,
                                "isReadOnly": true,
                                "width": "3*"
                            },
                            {
                                "header": "Date",
                                "binding": "RRDate",
                                "allowSorting": true,
                                "isReadOnly": true,
                                "width": "1.5*"
                            },
                            {
                                "header": "RR Amount",
                                "binding": "AmountDisplay",
                                "allowSorting": true,
                                "align": "right",
                                "isReadOnly": true,
                                "width": "2*"
                            },
                            {
                                "header": "Payments",
                                "binding": "PaidAmountDisplay",
                                "allowSorting": true,
                                "align": "right",
                                "isReadOnly": true,
                                "width": "2*"
                            },
                            {
                                "header": "Adjustments",
                                "binding": "AdjustmentAmountDisplay",
                                "allowSorting": true,
                                "align": "right",
                                "isReadOnly": true,
                                "width": "2*"
                            },
                            {
                                "header": "Balance",
                                "binding": "BalanceAmountDisplay",
                                "allowSorting": true,
                                "align": "right",
                                "isReadOnly": true,
                                "width": "2*"
                            },
                            {
                                "header": "Pick",
                                "binding": "Pick",
                                "allowSorting": true,
                                "isReadOnly": true,
                                "width": 50,
                                "align": "center",
                                "allowResizing": false,
                                "allowSorting": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Balance",
                                "binding": "Balance",
                                "allowSorting": true,
                                "isReadOnly": false,
                                "width": "2*"
                            },
                ],
                autoGenerateColumns: false,
                itemsSource: receivingReceipts,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            receivingStatusGrid.trackChanges = true;

            var hr = new wijmo.grid.Row();
            receivingStatusGrid.allowMerging = wijmo.grid.AllowMerging.AllHeaders;
            receivingStatusGrid.columnHeaders.rows.push(hr);
            receivingStatusGrid.columnHeaders.rows[0].allowMerging = true;

            receivingStatusGrid.columnHeaders.columns[0].allowMerging = true;
            receivingStatusGrid.columnHeaders.setCellData(0, 0, 'RR No.');

            receivingStatusGrid.columnHeaders.columns[1].allowMerging = true;
            receivingStatusGrid.columnHeaders.setCellData(0, 1, 'Doc Ref');

            receivingStatusGrid.columnHeaders.columns[2].allowMerging = true;
            receivingStatusGrid.columnHeaders.setCellData(0, 2, 'Date');

            for (var columnQuantityTopAssigned = 3; columnQuantityTopAssigned <= 6; columnQuantityTopAssigned++) {
                receivingStatusGrid.columnHeaders.setCellData(0, columnQuantityTopAssigned, 'Amount');
            }

            receivingStatusGrid.columnHeaders.columns[7].allowMerging = true;
            receivingStatusGrid.columnHeaders.setCellData(0, 7, 'Pick')

            receivingStatusGrid.columnHeaders.columns[8].allowMerging = true;
            receivingStatusGrid.columnHeaders.setCellData(0, 8, 'Balance');

            if (!isAPClicked) {
                updateNavigateButtonsRRStatus();

                btnFirstPageGridRRStatus.addEventListener('click', function () {
                    receivingReceipts.moveToFirstPage();
                    updateNavigateButtonsRRStatus();
                });

                btnPreviousPageGridRRStatus.addEventListener('click', function () {
                    receivingReceipts.moveToPreviousPage();
                    updateNavigateButtonsRRStatus();
                });

                btnNextPageGridRRStatus.addEventListener('click', function () {
                    receivingReceipts.moveToNextPage();
                    updateNavigateButtonsRRStatus();
                });

                btnLastPageGridRRStatus.addEventListener('click', function () {
                    receivingReceipts.moveToLastPage();
                    updateNavigateButtonsRRStatus();
                });

                isAPClicked = true;
            }
        }

        function getJournalByArticleId() {
            var RRAdvancesObservableArray = new wijmo.collections.ObservableArray;
            $.ajax({
                url: '/api/disbursementLine/popUp/list/supplierAdvances/' + cboCVSupplier.selectedValue,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            RRAdvancesObservableArray.push({
                                BranchId: results[i]["BranchId"],
                                Branch: results[i]["Branch"],
                                AccountId: results[i]["AccountId"],
                                Account: results[i]["Account"],
                                AccountCode: results[i]["AccountCode"],
                                ArticleId: results[i]["ArticleId"],
                                Article: results[i]["Article"],
                                DebitAmount: results[i]["DebitAmount"],
                                DebitAmountDisplay: parseFloat(results[i]["DebitAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                CreditAmount: results[i]["CreditAmount"],
                                CreditAmountDisplay: parseFloat(results[i]["CreditAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                Balance: results[i]["Balance"],
                                BalanceDisplay: parseFloat(results[i]["Balance"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                Pick: "<button class='btn btn-primary btn-xs' onclick='btnApplyAdvancesOnclick()'><i class='fa fa-check'></i> Apply </button>"
                            });
                        }
                    }

                    $('#loadingRRAdvances').hide();
                    $('#AdvancesGrid').show();
                }
            });

            return RRAdvancesObservableArray;
        }

        // ========
        // Advances
        // ========
        function btnnOclickAdvances() {
            $('#SupplierAdvances').modal({
                show: true,
                backdrop: 'static'
            });

            $('#loadingRRAdvances').show();
            document.getElementById("loadingRRAdvances").innerHTML = "<b><i class='fa fa-spinner fa-spin'></i></b>";
            $('#AdvancesGrid').hide();

            setTimeout(function () {
                createRRAdvancesFlexGrid();
            }, 500);
        }

        // =========================
        // Update Navigation Buttons
        // =========================
        function updateNavigateButtonsRRAdvances() {
            if (RRAdvances.pageSize <= 0) {
                document.getElementById('naviagtionPageGridRRAdvances').style.display = 'none';
                return;
            }
            document.getElementById('naviagtionPageGridRRAdvances').style.display = 'block';
            if (RRAdvances.pageIndex === 0) {
                btnFirstPageGridRRAdvances.setAttribute('disabled', 'disabled');
                btnPreviousPageGridRRAdvances.setAttribute('disabled', 'disabled');
                btnNextPageGridRRAdvances.removeAttribute('disabled');
                btnLastPageGridRRAdvances.removeAttribute('disabled');
            } else if (RRAdvances.pageIndex === (RRAdvances.pageCount - 1)) {
                btnFirstPageGridRRAdvances.removeAttribute('disabled');
                btnPreviousPageGridRRAdvances.removeAttribute('disabled');
                btnNextPageGridRRAdvances.setAttribute('disabled', 'disabled');
                btnLastPageGridRRAdvances.setAttribute('disabled', 'disabled');
            } else {
                btnFirstPageGridRRAdvances.removeAttribute('disabled');
                btnPreviousPageGridRRAdvances.removeAttribute('disabled');
                btnNextPageGridRRAdvances.removeAttribute('disabled');
                btnLastPageGridRRAdvances.removeAttribute('disabled');
            }
            btnCurrentPageGridRRAdvances.innerHTML = (RRAdvances.pageIndex + 1) + ' / ' + RRAdvances.pageCount;
        }

        var isAdvancesClicked = false;

        // ===============================
        // Receiving Receipt Advances Grid
        // ===============================
        function createRRAdvancesFlexGrid() {
            RRAdvances = new wijmo.collections.CollectionView(getJournalByArticleId());
            RRAdvances.canFilter = true;
            RRAdvances.pageSize = 10;

            var filterText = '';
            $('#RRAdvancesFilter').keyup(function () {
                filterText = this.value.toLowerCase();
                RRAdvances.refresh();
            });

            RRAdvances.filter = function (item) {
                return !filterText || (item.AccountCode.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Account.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Article.toLowerCase().indexOf(filterText) > -1);
            }

            RRAdvances.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsRRAdvances();
            });

            RRAdvancesGrid.dispose();
            RRAdvancesGrid = new wijmo.grid.FlexGrid('#RRAdvancesGrid');
            RRAdvancesGrid.initialize({
                columns: [
                    {
                        "header": "Code",
                        "binding": "AccountCode",
                        "allowSorting": true,
                        "width": "1.5*"
                    },
                    {
                        "header": "Account",
                        "binding": "Account",
                        "allowSorting": true,
                        "width": "3*"
                    },
                    {
                        "header": "Article",
                        "binding": "Article",
                        "allowSorting": true,
                        "width": "3*"
                    },
                    {
                        "header": "Debit",
                        "binding": "DebitAmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": "2*"
                    },
                    {
                        "header": "Credit",
                        "binding": "CreditAmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": "2*"
                    },
                    {
                        "header": "Balance",
                        "binding": "BalanceDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": "2*"
                    },
                    {
                        "header": "Apply",
                        "binding": "Pick",
                        "allowSorting": true,
                        "width": 70,
                        "align": "center",
                        "allowResizing": false,
                        "allowSorting": false,
                        "isContentHtml": true
                    },
                ],
                autoGenerateColumns: false,
                itemsSource: RRAdvances,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            RRAdvancesGrid.trackChanges = true;

            if (!isAdvancesClicked) {
                updateNavigateButtonsRRAdvances();

                btnFirstPageGridRRAdvances.addEventListener('click', function () {
                    RRAdvances.moveToFirstPage();
                    updateNavigateButtonsRRAdvances();
                });

                btnPreviousPageGridRRAdvances.addEventListener('click', function () {
                    RRAdvances.moveToPreviousPage();
                    updateNavigateButtonsRRAdvances();
                });

                btnNextPageGridRRAdvances.addEventListener('click', function () {
                    RRAdvances.moveToNextPage();
                    updateNavigateButtonsRRAdvances();
                });

                btnLastPageGridRRAdvances.addEventListener('click', function () {
                    RRAdvances.moveToLastPage();
                    updateNavigateButtonsRRAdvances();
                });

                isAdvancesClicked = true;
            }
        }

        function btnApplyAdvancesOnclick() {
            $('#applyConfirm').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById('cmdConfirmApplyAdvances').innerHTML = "<i class='fa fa-check'></i> Apply";
            $("#cmdConfirmApplyAdvances").prop("disabled", false);
            $("#cmdCloseButtonApplyAdvances").prop("disabled", false);
        }

        function btnConfrimApplyAdvances_OnClick() {
            document.getElementById('cmdConfirmApplyAdvances').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Applying";
            $("#cmdConfirmApplyAdvances").prop("disabled", true);
            $("#cmdCloseButtonApplyAdvances").prop("disabled", true);

            RRAdvances.editItem(RRAdvances.currentItem);
            var RRAdvancesItem = RRAdvances.currentEditItem;

            var CVId = getParam("id");

            var receivingReceiptAdvancesObject = new Object();
            receivingReceiptAdvancesObject.AccountId = RRAdvancesItem.AccountId;
            receivingReceiptAdvancesObject.ArticleId = RRAdvancesItem.ArticleId;
            var receivingReceiptAdvancesData = JSON.stringify(receivingReceiptAdvancesObject);

            $.ajax({
                url: '/api/disbursementLine/popUp/apply/supplierAdvances/' + CVId,
                type: "POST",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: receivingReceiptAdvancesData,
                statusCode: {
                    200: function () {
                        toastr.success("Apply Successful");
                        $('#applyConfirm').modal('hide');
                        refreshDisbursementLineFlexGrid();
                    },
                    404: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                        $('#applyConfirm').modal('hide');
                        document.getElementById('cmdConfirmApplyAdvances').innerHTML = "<i class='fa fa-check'></i> Apply";
                        $("#cmdConfirmApplyAdvances").prop("disabled", false);
                        $("#cmdCloseButtonApplyAdvances").prop("disabled", false);
                    },
                    400: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                        $('#applyConfirm').modal('hide');
                        document.getElementById('cmdConfirmApplyAdvances').innerHTML = "<i class='fa fa-check'></i> Apply";
                        $("#cmdConfirmApplyAdvances").prop("disabled", false);
                        $("#cmdCloseButtonApplyAdvances").prop("disabled", false);
                    },
                    500: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                        $('#applyConfirm').modal('hide');
                        document.getElementById('cmdConfirmApplyAdvances').innerHTML = "<i class='fa fa-check'></i> Apply";
                        $("#cmdConfirmApplyAdvances").prop("disabled", false);
                        $("#cmdCloseButtonApplyAdvances").prop("disabled", false);
                    }
                }
            });
        }

        // ===========
        // OnLoad Page
        // ===========
        $(document).ready(function () {
            getBranchesForComboBox();

            $(document).on('show.bs.modal', '.modal', function (event) {
                var zIndex = 1040 + (10 * $('.modal:visible').length);
                $(this).css('z-index', zIndex);
                setTimeout(function () {
                    $('.modal-backdrop').not('.modal-stack').css('z-index', zIndex - 1).addClass('modal-stack');
                }, 0);
            });

            $(document).on('hidden.bs.modal', '.modal', function () {
                $('.modal:visible').length && $(document.body).addClass('modal-open');
            });
        });
    </script>
    <script type="text/javascript">
        var cboUserBranches = new wijmo.input.ComboBox('#cboUserBranches');
        function getUserBranches() {
            $("#loadingUserBranches").show();
            document.getElementById("loadingUserBranches").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#userBranchContent").hide();

            $('#userBranchesModal').modal({ show: true, backdrop: 'static' });

            document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
            $("#updateUserBranch").prop("disabled", false);
            $("#closeUserBranch").prop("disabled", false);

            var userBranchesObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/userBranch/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (userBranchesresults) {
                    if (userBranchesresults.length > 0) {
                        for (i = 0; i < userBranchesresults.length; i++) {
                            userBranchesObservableArray.push({
                                BranchId: userBranchesresults[i]["BranchId"],
                                Branch: userBranchesresults[i]["Branch"]
                            });
                        }
                    }

                    var currentBranch = "@ViewData["BranchId"]";
                    cboUserBranches.dispose();
                    cboUserBranches = new wijmo.input.ComboBox('#cboUserBranches', {
                        isEditable: false,
                        placeholder: "Select Branches",
                        itemsSource: userBranchesObservableArray,
                        displayMemberPath: "Branch",
                        selectedValuePath: "BranchId",
                        selectedValue: currentBranch
                    });

                    setTimeout(function () {
                        $("#loadingUserBranches").hide();
                        $("#userBranchContent").show();
                    }, 500)
                }
            });
        }

        function updateUserBranchOnclick() {
            document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Updating";
            $("#updateUserBranch").prop("disabled", true);
            $("#closeUserBranch").prop("disabled", true);

            var userBranchObject = new Object();
            userBranchObject.BranchId = cboUserBranches.selectedValue;
            var userBranchData = JSON.stringify(userBranchObject);

            $.ajax({
                type: "PUT",
                url: '/api/userBranch/update',
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: userBranchData,
                statusCode: {
                    200: function () {
                        toastr.success("Update Successful");
                        window.setTimeout(function () {
                            location.reload()
                        }, 1000);
                    },
                    404: function () {
                        toastr.error("Not Found");
                        document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
                        $("#updateUserBranch").prop("disabled", false);
                        $("#closeUserBranch").prop("disabled", false);
                    },
                    500: function () {
                        toastr.error("Bad Request");
                        document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
                        $("#updateUserBranch").prop("disabled", false);
                        $("#closeUserBranch").prop("disabled", false);
                    }
                }
            });
        }
    </script>
    <script type="text/javascript">
        var slideLeft = new Menu({
            wrapper: '#o-wrapper',
            type: 'slide-left',
            menuOpenerClass: '.c-button',
            maskId: '#c-mask'
        });

        var slideLeftBtn = document.querySelector('#c-button--slide-left');

        slideLeftBtn.addEventListener('click', function (e) {
            e.preventDefault;
            slideLeft.open();
        });
    </script>
</body>
</html>