@model easyfis.Entities.MstUserForm
@{
    // =====================
    // User Rights Variables
    // =====================
    var canAdd = Model.CanAdd;
    var canEdit = Model.CanEdit;
    var canDelete = Model.CanDelete;
    var canLock = Model.CanLock;
    var canUnlock = Model.CanUnlock;
    var canPrint = Model.CanPrint;
}
<!DOCTYPE html>
<html>
<head>
    <!-- Meta -->
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">

    <!-- Title of the Page -->
    <link rel="shortcut icon" href="~/Images/icon/easyfislogomini.ico">
    <title>Stock Out Detail</title>

    <!-- CSS StyleSheets-->
    @Styles.Render("~/Content/Software-css")
</head>
<body>
    <div id="o-wrapper" class="o-wrapper">
        <main class="o-content">
            @Html.Partial("_SoftwareHeader")
            <section class="content-header">
                <div class="container">
                    <h3>
                        Stock Out Detail
                    </h3>
                    <p>
                        <i class="fa fa-building-o fa-fw"></i> &nbsp; @ViewData["Company"] <br />
                        <i class="fa fa-home fa-fw"></i> &nbsp; <a href="#" onclick="getUserBranches()" style="color: white;">@ViewData["Branch"]</a>
                    </p>
                </div>
            </section>
            <section class="container">
                <div class="panel panel-default">
                    <div class="panel-heading">
                        <div class="row">
                            <div class="col-md-12" align="right">
                                <button class="btn btn-primary" id="cmdStockOutJournal" onclick="stockOutJournal_OnClick()"><i class="fa fa-book"></i> Journal</button>
                                @{
                                    if (canLock)
                                    {
                                        <button class="btn btn-primary" id="cmdStockOutSaveLock" onclick="btnStockOutSaveLock_OnClick()"><i class="fa fa-lock"></i> Lock</button>
                                    }
                                    if (canUnlock)
                                    {
                                        <button class="btn btn-primary" id="cmdStockOutEdit" onclick="btnStockOutEdit_OnClick()"><i class="fa fa-unlock"></i> Unlock</button>
                                    }
                                    if (canPrint)
                                    {
                                        <button class="btn btn-primary" id="cmdStockOutPrint" onclick="btnStockOutPrint_OnClick()"><i class="fa fa-print"></i> Print</button>
                                    }
                                }
                                <button class="btn btn-danger" onclick="window.location.href = '@Url.Action("StockOut", "Software")'" id="cmdStockOutClose"><i class="fa fa-times"></i> Close</button>
                            </div>
                        </div>
                    </div>
                    <div class="panel-body">
                        <form class="form-horizontal" role="form">
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Branch</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboOUTBranch"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">OT Number</label>
                                        <div class="col-sm-8">
                                            <input type="text" class="form-control requiredStockOut" id="StockOut_OTNumber" disabled />
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">OT Date</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboOUTDate"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Account</label>
                                        <div class="col-sm-8">
                                            <table style="width: 100%" border="0">
                                                <tr>
                                                    <td style="width: 30%">
                                                        <div class="comboBox-wide" id="cboOUTAccountCode"></div>
                                                    </td>
                                                    <td style="width: 1%"></td>
                                                    <td style="width: 69%">
                                                        <div class="comboBox-wide" id="cboOUTAccount"></div>
                                                    </td>
                                                </tr>
                                            </table>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Article</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboOUTArticle"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Particulars</label>
                                        <div class="col-sm-8">
                                            <textarea rows="5" class="form-control textarea-custom requiredStockOut" id="StockOut_Particulars" placeholder="Particulars"></textarea>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Manual OT Number</label>
                                        <div class="col-sm-8">
                                            <input type="text" class="form-control requiredStockOut" id="StockOUt_ManualOTNumber" placeholder="Manual OT Number">
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Prepared by</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboOUTPreparedBy"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Checked by</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboOUTCheckedBy"></div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-sm-4">Approved by</label>
                                        <div class="col-sm-8">
                                            <div class="comboBox-wide" id="cboOUTApprovedBy"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
                <ul class="nav nav-tabs" role="tablist" id="myTab">
                    <li role="presentation" class="active"><a data-toggle="tab" href="#Items" id="itemTabId">Items</a></li>
                    <li role="presentation"><a data-toggle="tab" href="#InventoryEntries" id="inventoryEntryTabId">Inventory Entries</a></li>
                </ul>
                <br />
                <div class="tab-content">
                    <div id="Items" class="tab-pane active">
                        <div class="panel panel-default">
                            <div class="panel-heading">
                                <table style="width: 100%" border="0">
                                    <tr>
                                        <td style="width: 49.5%">
                                            <div class="input-group">
                                                <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                                <input type="text" class="form-control " id="StockOutInputFilter" placeholder="Search...">
                                            </div>
                                        </td>
                                        <td style="width: 1%"></td>
                                        <td style="width: 24%">
                                            <div class="input-group">
                                                <span class="input-group-addon"><b><i class="fa fa-table"></i></b></span>
                                                <div class="comboBox-wide" id="cboStockOutItemsShowNumberOfRows"></div>
                                            </div>
                                        </td>
                                        <td style="width: 1%"></td>
                                        <td style="width: 24.5%" align="right">
                                            @{
                                                if (canAdd)
                                                {
                                                    <button class="btn btn-primary " id="btnStockOutAddItem" onclick="cmdStockOutItem_OnClick()"><i class="fa fa-plus"></i> Add</button>
                                                    <button class="btn btn-primary " id="btnItemQueryStockOutItem" onclick="cmdItemQueryStockOutItem_OnClick()"><i class="fa fa-search-plus"></i> Item Query</button>
                                                }
                                            }
                                        </td>
                                    </tr>
                                </table>
                            </div>
                            <div class="panel-body">
                                <div id="ItemGrid" class="grid"></div>
                            </div>
                            <div class="panel-footer">
                                <div class="row">
                                    <div class="btn-group col-md-7" id="naviagtionPageGridItem">
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToFirstPageGridItem">
                                            <span class="glyphicon glyphicon-fast-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToPreviousPageGridItem">
                                            <span class="glyphicon glyphicon-step-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnCurrentPageGridItem"></button>
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToNextPageGridItem">
                                            <span class="glyphicon glyphicon-step-forward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToLastPageGridItem">
                                            <span class="glyphicon glyphicon-fast-forward"></span>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="panel panel-default">
                            <div class="panel-body" style="padding-bottom: 0px;">
                                <div class="row">
                                    <div class="col-md-7">

                                    </div>
                                    <div class="col-md-5">
                                        <dl class="dl-horizontal">
                                            <dt>
                                                <b>Total Amount</b>
                                            </dt>
                                            <dd>
                                                <input type="text" class="form-control numberField" id="totalOTAmount" placeholder="0.00" disabled />
                                            </dd>
                                        </dl>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div id="InventoryEntries" class="tab-pane">
                        <div class="panel panel-default">
                            <div class="panel-heading">
                                <table style="width: 100%" border="0">
                                    <tr>
                                        <td style="width: 49.5%">
                                            <div class="input-group">
                                                <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                                <input type="text" class="form-control " id="InventoryEntryInputFilter" placeholder="Search...">
                                            </div>
                                        </td>
                                        <td style="width: 1%"></td>
                                        <td style="width: 24%">
                                            <div class="input-group">
                                                <span class="input-group-addon"><b><i class="fa fa-table"></i></b></span>
                                                <div class="comboBox-wide" id="cboInventoryEntryShowNumberOfRows"></div>
                                            </div>
                                        </td>
                                        <td style="width: 1%"></td>
                                        <td style="width: 24.5%" align="right"></td>
                                    </tr>
                                </table>
                            </div>
                            <div class="panel-body">
                                <div id="InventoryEntryGrid"></div>
                            </div>
                            <div class="panel-footer">
                                <div class="row">
                                    <div class="btn-group col-md-7" id="naviagtionPageGridInventoryEntry">
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToFirstPageGridInventoryEntry">
                                            <span class="glyphicon glyphicon-fast-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToPreviousPageGridInventoryEntry">
                                            <span class="glyphicon glyphicon-step-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnCurrentPageGridInventoryEntry"></button>
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToNextPageGridInventoryEntry">
                                            <span class="glyphicon glyphicon-step-forward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToLastPageGridInventoryEntry">
                                            <span class="glyphicon glyphicon-fast-forward"></span>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </section>
            @Html.Partial("_SoftwareFooter")
        </main>
    </div>
    <div id="c-mask" class="c-mask"></div>

    <!-- ===================== -->
    <!-- Stock Out Item Detail -->
    <!-- ===================== -->
    <div class="modal fade" id="stockOutItemsEdit" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="stockOutItemsModalLabel">Stock-Out Item</h4>
                </div>
                <div class="modal-body">
                    <center>
                        <span id="loadingModalItem"></span>
                    </center>
                    <div id="stockOutItemsDetailForm">
                        <ul class="nav nav-tabs" role="tablist" id="myTab">
                            <li role="presentation" class="active"><a data-toggle="tab" href="#OTItem" id="OTItemTabId">Items</a></li>
                            <li role="presentation"><a data-toggle="tab" href="#OTExpenseAccount" id="OTExpenseAccountTabId">Expense Account</a></li>
                        </ul>
                        <br />
                        <div class="tab-content">
                            <div id="OTItem" class="tab-pane active">
                                <input type="hidden" id="stockOutItem_Id" />
                                <dl class="dl-horizontal">
                                    <dt>Item</dt>
                                    <dd>
                                        <table style="width: 100%" border="0">
                                            <tr>
                                                <td style="width: 30%">
                                                    <div class="" id="cboOUTItemCode"></div>
                                                </td>
                                                <td style="width: 1%"></td>
                                                <td style="width: 69%">
                                                    <div class="" id="cboOUTItemDescription"></div>
                                                </td>
                                            </tr>
                                        </table>
                                    </dd>
                                    <dt>Particulars</dt>
                                    <dd><textarea rows="5" class="form-control textarea-custom requiredStockOutItem" id="stockOutItem_Particulars"></textarea></dd>
                                    <dt>Item Inventory Code</dt>
                                    <dd><div class="comboBox-wide" id="cboOUTItemInventoryCode"></div></dd>
                                    <dt>Quantity</dt>
                                    <dd><input type="text" class="form-control  numberField  requiredStockOutItem" id="stockOutItem_Quantity" placeholder="0.00" /></dd>
                                    <dt>Unit</dt>
                                    <dd><div class="comboBox-wide" id="cboOUTItemUnit"></div></dd>
                                    <dt>Cost</dt>
                                    <dd><input type="text" class="form-control  numberField  requiredStockOutItem" id="stockOutItem_Cost" placeholder="0.00" /></dd>
                                    <dt>Amount</dt>
                                    <dd><input type="text" class="form-control  numberField  requiredStockOutItem" id="stockOutItem_Amount" placeholder="0.00" disabled /></dd>
                                </dl>
                            </div>
                            <div id="OTExpenseAccount" class="tab-pane">
                                <dl class="dl-horizontal">
                                    <dt>Expense Account</dt>
                                    <dd>
                                        <table style="width: 100%" border="0">
                                            <tr>
                                                <td style="width: 30%">
                                                    <div class="comboBox-wide" id="cboOUTItemExpenseAccountCode"></div>
                                                </td>
                                                <td style="width: 1%"></td>
                                                <td style="width: 69%">
                                                    <div class="comboBox-wide" id="cboOUTItemExpenseAccount"></div>
                                                </td>
                                            </tr>
                                        </table>
                                    </dd>
                                </dl>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button id="cmdSaveStockOutItemButton" class="btn btn-primary" onclick="cmdStockOutItemSaveButton_OnClick()"><i class="fa fa-save"></i> Save</button>
                    <button id="cmdStockOutItemDetailCloseButton" class="btn btn-danger" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Journal -->
    <div class="modal fade" id="journalDetail" role="dialog">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="journalModalLabel"> Journal</h4>
                </div>
                <div class="modal-body">
                    <center>
                        <span id="loadingJournalGridList"></span>
                    </center>
                    <div id="journal_Content">
                        <div id="journalFlexGrid" style="max-height: 250px;"></div>
                        <br /><br />
                        <div class="row">
                            <div class="col-md-7"></div>
                            <div class="col-md-5">
                                <dl class="dl-horizontal">
                                    <dt>
                                        <b>Total Debit</b>
                                    </dt>
                                    <dd>
                                        <input type="text" class="form-control  numberField  requiredStockTransferItem" id="totalDebitInJournal" placeholder="0.00" disabled />
                                    </dd>
                                    <dt>
                                        <b>Total Credit</b>
                                    </dt>
                                    <dd>
                                        <input type="text" class="form-control  numberField  requiredStockTransferItem" id="totalCreditInJournal" placeholder="0.00" disabled />
                                    </dd>
                                    <dt>
                                        <b>Variance</b>
                                    </dt>
                                    <dd>
                                        <input type="text" class="form-control  numberField  requiredStockTransferItem" id="variance" placeholder="0.00" disabled />
                                    </dd>
                                </dl>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button id="cmdJournalDetailCloseButton" class="btn btn-danger" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- ========================================= -->
    <!-- Stock Out Items Delete Modal Confirmation -->
    <!-- ========================================= -->
    <div class="modal fade" id="deletStockOutItemsConfirm" role="dialog">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Delete</h4>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete this stock out item?
                </div>
                <div class="modal-footer">
                    <button id="cmdConfirmDeleteStockOutItems" class="btn btn-danger" onclick="cmdStockOutItemsConfirmDeleteButton_OnClick()"><i class="fa fa-trash"></i> Delete</button>
                    <button id="cmdConfirmDeleteStockOutItemsCloseButton" class="btn btn-primary" data-dismiss="modal"><i class="fa fa-close"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <!-- ========================== -->
    <!-- Stock Out Item Query Modal -->
    <!-- ========================== -->
    <div class="modal fade" id="stockOutItemsItemQuery" role="dialog">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Item Query</h4>
                </div>
                <div class="modal-body">
                    <center>
                        <span id="loadingItemQuery"></span>
                    </center>
                    <div id="itemQueryPanel">
                        <div class="panel panel-default">
                            <div class="panel-heading">
                                <div class="input-group  ">
                                    <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                    <input type="text" class="form-control " id="itemQueryFilter" placeholder="Search">
                                </div>
                            </div>
                            <div class="panel-body">
                                <div id="itemQueryGrid"></div>
                            </div>
                            <div class="panel-footer">
                                <div class="row">
                                    <div class="btn-group col-md-7" id="naviagtionPageGridItemQuery">
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToFirstPageGridItemQuery">
                                            <span class="glyphicon glyphicon-fast-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToPreviousPageGridItemQuery">
                                            <span class="glyphicon glyphicon-step-backward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnCurrentPageGridItemQuery"></button>
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToNextPageGridItemQuery">
                                            <span class="glyphicon glyphicon-step-forward"></span>
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToLastPageGridItemQuery">
                                            <span class="glyphicon glyphicon-fast-forward"></span>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    @Scripts.Render("~/Scripts/Software-js")
    <script type="text/javascript">
        // ================
        // Global Variables
        // ================
        var cboOUTBranch = new wijmo.input.ComboBox('#cboOUTBranch');
        var cboOUTAccountCode = new wijmo.input.ComboBox('#cboOUTAccountCode');
        var cboOUTAccount = new wijmo.input.ComboBox('#cboOUTAccount');
        var cboOUTArticle = new wijmo.input.ComboBox('#cboOUTArticle');
        var isAccountChanged = false;
        var cboOUTPreparedBy = new wijmo.input.ComboBox('#cboOUTPreparedBy');
        var cboOUTCheckedBy = new wijmo.input.ComboBox('#cboOUTCheckedBy');
        var cboOUTApprovedBy = new wijmo.input.ComboBox('#cboOUTApprovedBy');
        var cboOUTDate = new wijmo.input.InputDate('#cboOUTDate');
        var articleIdSelectedId = 0;
        var isLocked = false;
        var items;
        var itemGrid;
        var cboOUTItemCode = new wijmo.input.ComboBox('#cboOUTItemCode');
        var cboOUTItemDescription = new wijmo.input.ComboBox('#cboOUTItemDescription');
        var cboOUTItemInventoryCode = new wijmo.input.ComboBox('#cboOUTItemInventoryCode');
        var cboOUTItemUnit = new wijmo.input.ComboBox('#cboOUTItemUnit');
        var cboOUTItemExpenseAccountCode = new wijmo.input.ComboBox('#cboOUTItemExpenseAccountCode');
        var cboOUTItemExpenseAccount = new wijmo.input.ComboBox('#cboOUTItemExpenseAccount');
        var stockOutItemId = 0;
        var isItemChange = false;
        var journalCollectionView;
        var journalFlexGrid = new wijmo.grid.FlexGrid('#journalFlexGrid');
        var inventoryCollectionView;
        var inventoryFlexGrid;
        var itemQueryItemsCollection;
        var itemQueryGrid = new wijmo.grid.FlexGrid('#itemQueryGrid');
        var cboStockOutItemsShowNumberOfRows = new wijmo.input.ComboBox('#cboStockOutItemsShowNumberOfRows');
        var btnMoveToFirstPageGridItem = document.getElementById('btnMoveToFirstPageGridItem');
        var btnMoveToPreviousPageGridItem = document.getElementById('btnMoveToPreviousPageGridItem');
        var btnMoveToNextPageGridItem = document.getElementById('btnMoveToNextPageGridItem');
        var btnMoveToLastPageGridItem = document.getElementById('btnMoveToLastPageGridItem');
        var btnCurrentPageGridItem = document.getElementById('btnCurrentPageGridItem');
        var btnMoveToFirstPageGridItemQuery = document.getElementById('btnMoveToFirstPageGridItemQuery');
        var btnMoveToPreviousPageGridItemQuery = document.getElementById('btnMoveToPreviousPageGridItemQuery');
        var btnMoveToNextPageGridItemQuery = document.getElementById('btnMoveToNextPageGridItemQuery');
        var btnMoveToLastPageGridItemQuery = document.getElementById('btnMoveToLastPageGridItemQuery');
        var btnCurrentPageGridItemQuery = document.getElementById('btnCurrentPageGridItemQuery');
        var cboInventoryEntryShowNumberOfRows = new wijmo.input.ComboBox('#cboInventoryEntryShowNumberOfRows');
        var btnMoveToFirstPageGridInventoryEntry = document.getElementById('btnMoveToFirstPageGridInventoryEntry');
        var btnMoveToPreviousPageGridInventoryEntry = document.getElementById('btnMoveToPreviousPageGridInventoryEntry');
        var btnMoveToNextPageGridInventoryEntry = document.getElementById('btnMoveToNextPageGridInventoryEntry');
        var btnMoveToLastPageGridInventoryEntry = document.getElementById('btnMoveToLastPageGridInventoryEntry');
        var isItemQueryClicked = false;


        // =======================
        // Get URL Parameter Value
        // =======================
        function getParam(name) {
            name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");

            var regexS = "[\\?&]" + name + "=([^&#]*)";
            var regex = new RegExp(regexS);

            var results = regex.exec(window.location.href);
            if (results == null) {
                return "";
            } else {
                return results[1];
            }
        }

        // ========================
        // GET Branch for Combo Box
        // ========================
        function getBranchesForComboBox() {
            NProgress.start();
            var branchesObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/stockOut/dropdown/list/branch',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            branchesObservableArray.push({
                                Id: results[i]["Id"],
                                Branch: results[i]["Branch"]
                            });
                        }
                    }

                    cboOUTBranch.dispose();
                    cboOUTBranch = new wijmo.input.ComboBox('#cboOUTBranch', {
                        disabled: true,
                        isEditable: false,
                        placeholder: "Select Branch",
                        itemsSource: branchesObservableArray,
                        displayMemberPath: "Branch",
                        selectedValuePath: "Id"
                    });

                    getAccountForComboBox();
                }
            });
        }

        // =====================
        // Get Stock out Account
        // =====================
        function getAccountForComboBox() {
            var accountsObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/stockOut/dropdown/list/account',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            accountsObservableArray.push({
                                Id: results[i]["Id"],
                                AccountCode: results[i]["AccountCode"],
                                Account: results[i]["Account"]
                            });
                        }
                    }

                    cboOUTAccountCode.dispose();
                    cboOUTAccountCode = new wijmo.input.ComboBox('#cboOUTAccountCode', {
                        isEditable: false,
                        placeholder: "Select Code",
                        itemsSource: accountsObservableArray,
                        displayMemberPath: "AccountCode",
                        selectedValuePath: "Id",
                        onSelectedIndexChanged: function () {
                            cboOUTAccount.selectedValue = this.selectedValue;
                        }
                    });

                    cboOUTAccount.dispose();
                    cboOUTAccount = new wijmo.input.ComboBox('#cboOUTAccount', {
                        isEditable: false,
                        placeholder: "Select Account",
                        itemsSource: accountsObservableArray,
                        displayMemberPath: "Account",
                        selectedValuePath: "Id",
                        onSelectedIndexChanged: function () {
                            cboOUTAccountCode.selectedValue = this.selectedValue;
                            isAccountChanged = true;

                            getArticlesForComboBox();
                        }
                    });

                    getArticlesForComboBox();
                }
            });
        }

        // ==========================
        // GET Articles for Combo Box
        // ==========================
        function getArticlesForComboBox() {
            var articlesObservableArray = new wijmo.collections.ObservableArray();
            if (cboOUTAccount.selectedValue != null) {
                $.ajax({
                    url: '/api/stockOut/dropdown/list/article/' + cboOUTAccount.selectedValue,
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    success: function (results) {
                        if (results.length > 0) {
                            for (i = 0; i < results.length; i++) {
                                articlesObservableArray.push({
                                    Id: results[i]["Id"],
                                    Article: results[i]["Article"]
                                });
                            }
                        }

                        var disabled = true;
                        if (!isLocked) {
                            if (results.length > 0) {
                                disabled = false;
                            } else {
                                $("#cmdStockInSaveLock").prop("disabled", true);
                            }
                        } else {
                            $("#cmdStockInSaveLock").prop("disabled", true);
                        }

                        cboOUTArticle.dispose();
                        cboOUTArticle = new wijmo.input.ComboBox('#cboOUTArticle', {
                            disabled: disabled,
                            isEditable: false,
                            placeholder: "Select Article",
                            itemsSource: articlesObservableArray,
                            displayMemberPath: "Article",
                            selectedValuePath: "Id",
                            selectedValue: articleIdSelectedId
                        });

                        if (!isAccountChanged) {
                            getUsersForComboBox();
                        }
                    }
                });
            } else {
                cboOUTArticle.dispose();
                cboOUTArticle = new wijmo.input.ComboBox('#cboOUTArticle', {
                    disabled: true,
                    isEditable: false,
                    itemsSource: articlesObservableArray,
                });

                if (!isAccountChanged) {
                    getUsersForComboBox();
                }
            }
        }

        // =======================
        // GET Users for Combo Box
        // =======================
        function getUsersForComboBox() {
            var usersObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/stockOut/dropdown/list/users',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            usersObservableArray.push({
                                Id: results[i]["Id"],
                                FullName: results[i]["FullName"]
                            });
                        }
                    }

                    cboOUTPreparedBy.dispose();
                    cboOUTPreparedBy = new wijmo.input.ComboBox('#cboOUTPreparedBy', {
                        disabled: true,
                        isEditable: false,
                        placeholder: "Select User",
                        itemsSource: usersObservableArray,
                        displayMemberPath: "FullName",
                        selectedValuePath: "Id"
                    });

                    cboOUTCheckedBy.dispose();
                    cboOUTCheckedBy = new wijmo.input.ComboBox('#cboOUTCheckedBy', {
                        isEditable: false,
                        placeholder: "Select User",
                        itemsSource: usersObservableArray,
                        displayMemberPath: "FullName",
                        selectedValuePath: "Id"
                    });

                    cboOUTApprovedBy.dispose();
                    cboOUTApprovedBy = new wijmo.input.ComboBox('#cboOUTApprovedBy', {
                        isEditable: false,
                        placeholder: "Select User",
                        itemsSource: usersObservableArray,
                        displayMemberPath: "FullName",
                        selectedValuePath: "Id"
                    });

                    getStockOutById();
                }
            });
        }

        // ==================
        // GET Stock out List
        // ==================
        function getStockOutById() {
            if (document.location.search.length > 0) {
                var id = getParam("id");
                 $.ajax({
                     url: '/api/stockOut/detail/' + id,
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    success: function (results) {
                        if (results != null) {
                            cboOUTBranch.selectedValue = results.BranchId;
                            document.getElementById('StockOut_OTNumber').value = results.OTNumber;
                            cboOUTDate.dispose();
                            cboOUTDate = new wijmo.input.InputDate('#cboOUTDate', {
                                format: 'MM-dd-yyyy',
                                value: new Date(results.OTDate),
                            });
                            cboOUTAccountCode.selectedValue = results.AccountId;
                            cboOUTAccount.selectedValue = results.AccountId;
                            cboOUTArticle.selectedValue = results.ArticleId;
                            articleIdSelectedId = results.ArticleId;
                            document.getElementById('StockOut_Particulars').value = results.Particulars;
                            document.getElementById('StockOUt_ManualOTNumber').value = results.ManualOTNumber;
                            cboOUTPreparedBy.selectedValue = results.PreparedById;
                            cboOUTCheckedBy.selectedValue = results.CheckedById;
                            cboOUTApprovedBy.selectedValue = results.ApprovedById;

                            document.getElementById('createdBy').innerHTML = results.CreatedBy;
                            document.getElementById('createdDate').innerHTML = results.CreatedDateTime;
                            document.getElementById('updatedBy').innerHTML = results.UpdatedBy;
                            document.getElementById('updatedDate').innerHTML = results.UpdatedDateTime;

                            if (results.IsLocked) {
                                cboOUTBranch.disabled = true;
                                cboOUTDate.disabled = true;
                                cboOUTAccountCode.disabled = true;
                                cboOUTAccount.disabled = true;
                                cboOUTArticle.disabled = true;
                                document.getElementById('StockOut_Particulars').disabled = true;
                                document.getElementById('StockOUt_ManualOTNumber').disabled = true;
                                cboOUTPreparedBy.disabled = true;
                                cboOUTCheckedBy.disabled = true;
                                cboOUTApprovedBy.disabled = true;

                                $("#cmdStockOutSaveLock").prop("disabled", true);
                                $('#btnStockOutAddItem').prop("disabled", true);
                                $('#btnItemQueryStockOutItem').prop("disabled", true);

                                isLocked = true;
                            } else {
                                $("#cmdStockOutJournal").prop("disabled", true);
                                $("#cmdStockOutEdit").prop("disabled", true);
                                $("#cmdStockOutPrint").prop("disabled", true);
                            }

                            createCboShowRows();
                            createStockOutItemFlexGrid();
                            createInventoryFlexGrid();
                        }
                    }
                });
            } else {
                alert("No Id Parameter Value");
                window.location = "/Software/StockOut";
            }
        }

        // ======================
        // Save Stock Out - Lock
        // =====================
        function btnStockOutSaveLock_OnClick() {
            var stockOutObject = new Object();
            stockOutObject.OTDate = cboOUTDate.value.toLocaleDateString();
            stockOutObject.AccountId = cboOUTAccount.selectedValue;
            stockOutObject.ArticleId = cboOUTArticle.selectedValue;
            stockOutObject.Particulars = document.getElementById('StockOut_Particulars').value;
            stockOutObject.ManualOTNumber = document.getElementById('StockOUt_ManualOTNumber').value;
            stockOutObject.PreparedById = cboOUTPreparedBy.selectedValue;
            stockOutObject.CheckedById = cboOUTCheckedBy.selectedValue;
            stockOutObject.ApprovedById = cboOUTApprovedBy.selectedValue;
            var data = JSON.stringify(stockOutObject);

            var isValid = true;
            $('.requiredStockOut').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                } else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            if (isValid) {
                document.getElementById('cmdStockOutSaveLock').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Locking";
                $("#cmdStockOutJournal").prop("disabled", true);
                $("#cmdStockOutSaveLock").prop("disabled", true);
                $("#cmdStockOutEdit").prop("disabled", true);
                $("#cmdStockOutPrint").prop("disabled", true);
                $("#cmdStockOutClose").prop("disabled", true);

                var id = getParam("id");

                $.ajax({
                    type: "PUT",
                    url: '/api/stockOut/lock/' + id,
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    data: data,
                    statusCode: {
                        200: function () {
                            toastr.success("Lock Successful");
                            window.setTimeout(function () {
                                location.reload()
                            }, 1000);
                        },
                        404: function (message) {
                            toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                            document.getElementById('cmdStockOutSaveLock').innerHTML = "<i class='fa fa-lock'></i> Lock";
                            $("#cmdStockOutSaveLock").prop("disabled", false);
                            $("#cmdStockOutClose").prop("disabled", false);
                        },
                        400: function (message) {
                            toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                            document.getElementById('cmdStockOutSaveLock').innerHTML = "<i class='fa fa-lock'></i> Lock";
                            $("#cmdStockOutSaveLock").prop("disabled", false);
                            $("#cmdStockOutClose").prop("disabled", false);
                        },
                        500: function (message) {
                            toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                            document.getElementById('cmdStockOutSaveLock').innerHTML = "<i class='fa fa-lock'></i> Lock";
                            $("#cmdStockOutSaveLock").prop("disabled", false);
                            $("#cmdStockOutClose").prop("disabled", false);
                        }
                    },
                });
            } else {
                toastr.error("Invalid Entry");
            }
        }

        // =========================
        // Save Stock Out - UnLocked
        // =========================
        function btnStockOutEdit_OnClick() {
            document.getElementById('cmdStockOutEdit').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Unlocking";
            $("#cmdStockOutJournal").prop("disabled", true);
            $("#cmdStockOutSaveLock").prop("disabled", true);
            $("#cmdStockOutEdit").prop("disabled", true);
            $("#cmdStockOutPrint").prop("disabled", true);
            $("#cmdStockOutClose").prop("disabled", true);

            var id = getParam("id");

            $.ajax({
                type: "PUT",
                url: '/api/stockOut/unlock/' + id,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Unlock Successful");
                        window.setTimeout(function () {
                            location.reload()
                        }, 1000);
                    },
                    404: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                        document.getElementById('cmdStockOutEdit').innerHTML = "<i class='fa fa-unlock'></i> Unlock";
                        $("#cmdStockOutJournal").prop("disabled", false);
                        $("#cmdStockOutEdit").prop("disabled", false);
                        $("#cmdStockOutPrint").prop("disabled", false);
                        $("#cmdStockOutClose").prop("disabled", false);
                    },
                    400: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                        document.getElementById('cmdStockOutEdit').innerHTML = "<i class='fa fa-unlock'></i> Unlock";
                        $("#cmdStockOutJournal").prop("disabled", false);
                        $("#cmdStockOutEdit").prop("disabled", false);
                        $("#cmdStockOutPrint").prop("disabled", false);
                        $("#cmdStockOutClose").prop("disabled", false);
                    },
                    500: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                        document.getElementById('cmdStockOutEdit').innerHTML = "<i class='fa fa-unlock'></i> Unlock";
                        $("#cmdStockOutJournal").prop("disabled", false);
                        $("#cmdStockOutEdit").prop("disabled", false);
                        $("#cmdStockOutPrint").prop("disabled", false);
                        $("#cmdStockOutClose").prop("disabled", false);
                    }
                }
            });
        }

        // ========
        // Print OT
        // ========
        function btnStockOutPrint_OnClick() {
            var stockOutId = getParam("id");
            var pirntLink = "/RepStockOut/StockOut?StockOutId=" + stockOutId;
            window.open(pirntLink, '_blank');
        }

        // =======================
        // GET Stock OUT Item List
        // =======================
        function getItem() {
            var items = new wijmo.collections.ObservableArray;
            if (document.location.search.length > 0) {
                var OTId = getParam("id");
                $.ajax({
                    url: '/api/stockOutItem/list/' + OTId,
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    success: function (results) {
                        var totalAmount = 0;
                        if (results.length > 0) {
                            var btnEditId = "<button class='btn btn-primary btn-xs btn-block' onclick='btnEditStockOutItem_OnClick()'><i class='fa fa-edit'></i> Edit</button>";
                            var btnDeleteId = "<button class='btn btn-danger btn-xs btn-block' onclick='btnDeleteStockOutItem_OnClick()'><i class='fa fa-trash'></i> Delete</button>";
                            if (isLocked) {
                                btnEditId = "<button class='btn btn-primary btn-xs btn-block' onclick='btnEditStockOutItem_OnClick()' disabled><i class='fa fa-edit'></i> Edit</button>";
                                btnDeleteId =  "<button class='btn btn-danger btn-xs btn-block' onclick='btnDeleteStockOutItem_OnClick()' disabled><i class='fa fa-trash'></i> Delete</button>";
                            }

                            for (i = 0; i < results.length; i++) {
                                items.push({
                                    EditId: btnEditId,
                                    DeleteId: btnDeleteId,
                                    Id: results[i]["Id"],
                                    OTId: results[i]["OTId"],
                                    ItemId: results[i]["ItemId"],
                                    ItemCode: results[i]["ItemCode"],
                                    ItemDescription: results[i]["ItemDescription"],
                                    Particulars: results[i]["Particulars"],
                                    ItemInventoryId: results[i]["ItemInventoryId"],
                                    ItemInventoryCode: results[i]["ItemInventoryCode"],
                                    Quantity: results[i]["Quantity"],
                                    QuantityDisplay: parseFloat(results[i]["Quantity"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                    UnitId: results[i]["UnitId"],
                                    Unit: results[i]["Unit"],
                                    Cost: results[i]["Cost"],
                                    CostDisplay: parseFloat(results[i]["Cost"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                    Amount: results[i]["Amount"],
                                    AmountDisplay: parseFloat(results[i]["Amount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                    BaseUnitId: results[i]["BaseUnitId"],
                                    BaseUnit: results[i]["BaseUnit"],
                                    BaseQuantity: results[i]["BaseQuantity"],
                                    BaseQuantityDisplay: parseFloat(results[i]["BaseQuantity"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                    BaseCost: results[i]["BaseCost"],
                                    BaseCostDisplay: parseFloat(results[i]["BaseCost"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                    ExpenseAccountId: results[i]["ExpenseAccountId"],
                                    ExpenseAccount: results[i]["ExpenseAccount"],
                                });

                                totalAmount += results[i]["Amount"];
                            }
                        }

                        document.getElementById('totalOTAmount').value = parseFloat(totalAmount).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        NProgress.done();
                    }
                });
            }

            return items;
        }

        $('#stockOutItem_Quantity').keyup(function () {
            computeAmount();
        });

        $('#stockOutItem_Cost').keyup(function () {
            computeAmount();
        });

        function computeAmount() {
            var stockOut_Quantity = document.getElementById('stockOutItem_Quantity').value.replace(/\,/g, '');
            var stockOut_Cost = document.getElementById('stockOutItem_Cost').value.replace(/\,/g, '');
            var stocOutItemAmount = stockOut_Quantity * stockOut_Cost;
            document.getElementById('stockOutItem_Amount').value = formatDecimalValues(stocOutItemAmount);
        }


        // ===============
        // Show Rows Table
        // ===============
        function createCboShowRows() {
            var rowsObservableArray = new wijmo.collections.ObservableArray();

            for (var i = 0; i <= 4; i++) {
                var rows = 0;
                var rowsString = "";

                if (i == 0) {
                    rows = 15;
                    rowsString = "Show 15 Rows";
                } else if (i == 1) {
                    rows = 50;
                    rowsString = "Show 50 Rows";
                } else if (i == 2) {
                    rows = 100;
                    rowsString = "Show 100 Rows";
                } else if (i == 3) {
                    rows = 150;
                    rowsString = "Show 150 Rows";
                } else {
                    rows = 200;
                    rowsString = "Show 200 Rows";
                }

                rowsObservableArray.push({
                    rowNumber: rows,
                    rowString: rowsString
                });
            }

            cboStockOutItemsShowNumberOfRows.dispose();
            cboStockOutItemsShowNumberOfRows = new wijmo.input.ComboBox('#cboStockOutItemsShowNumberOfRows', {
                isEditable: false,
                itemsSource: rowsObservableArray,
                displayMemberPath: "rowString",
                selectedValuePath: "rowNumber",
                selectedValue: 50,
                onSelectedIndexChanged: function () {
                    NProgress.start();

                    setTimeout(function () {
                        var numberOfRows = cboStockOutItemsShowNumberOfRows.selectedValue;
                        items.pageSize = parseInt(numberOfRows);
                        items.refresh();
                        itemGrid.refresh();

                        NProgress.done();
                    }, 300);
                }
            });

            cboInventoryEntryShowNumberOfRows.dispose();
            cboInventoryEntryShowNumberOfRows = new wijmo.input.ComboBox('#cboInventoryEntryShowNumberOfRows', {
                isEditable: false,
                itemsSource: rowsObservableArray,
                displayMemberPath: "rowString",
                selectedValuePath: "rowNumber",
                selectedValue: 50,
                onSelectedIndexChanged: function () {
                    NProgress.start();

                    setTimeout(function () {
                        var numberOfRows = cboInventoryEntryShowNumberOfRows.selectedValue;
                        inventoryCollectionView.pageSize = parseInt(numberOfRows);
                        inventoryCollectionView.refresh();
                        inventoryFlexGrid.refresh();

                        NProgress.done();
                    }, 300);
                }
            });
        }

        // =========================
        // Update Navigation Buttons
        // =========================
        function updateNavigateButtonsItems() {
            if (items.pageSize <= 0) {
                document.getElementById('naviagtionPageGridItem').style.display = 'none';
                return;
            }
            document.getElementById('naviagtionPageGridItem').style.display = 'block';
            if (items.pageIndex === 0) {
                btnMoveToFirstPageGridItem.setAttribute('disabled', 'disabled');
                btnMoveToPreviousPageGridItem.setAttribute('disabled', 'disabled');
                btnMoveToNextPageGridItem.removeAttribute('disabled');
                btnMoveToLastPageGridItem.removeAttribute('disabled');
            } else if (items.pageIndex === (items.pageCount - 1)) {
                btnMoveToFirstPageGridItem.removeAttribute('disabled');
                btnMoveToPreviousPageGridItem.removeAttribute('disabled');
                btnMoveToNextPageGridItem.setAttribute('disabled', 'disabled');
                btnMoveToLastPageGridItem.setAttribute('disabled', 'disabled');
            } else {
                btnMoveToFirstPageGridItem.removeAttribute('disabled');
                btnMoveToPreviousPageGridItem.removeAttribute('disabled');
                btnMoveToNextPageGridItem.removeAttribute('disabled');
                btnMoveToLastPageGridItem.removeAttribute('disabled');
            }
            btnCurrentPageGridItem.innerHTML = (items.pageIndex + 1) + ' / ' + items.pageCount;
        }


        // ======================
        // Refresh Items FlexGrid
        // ======================
        function refreshStockOutItemFlexGrid() {
            items = new wijmo.collections.CollectionView(getItem());
            items.canFilter = true;
            items.pageSize = cboStockOutItemsShowNumberOfRows.selectedValue;

            var filterText = '';
            $('#StockOutInputFilter').keyup(function () {
                filterText = this.value.toLowerCase();
                items.refresh();
            });

            items.filter = function (item) {
                return !filterText || (item.ItemCode.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.ItemDescription.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Particulars.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.ItemInventoryCode.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Unit.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.BaseUnit.toLowerCase().indexOf(filterText) > -1);
            }

            items.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsItems();
            });

            itemGrid.itemsSource = items;
            itemGrid.trackChanges = true;
        }

        // ==============
        // Items FlexGrid
        // ==============
        function createStockOutItemFlexGrid() {
            items = new wijmo.collections.CollectionView(getItem());
            items.canFilter = true;
            items.pageSize = cboStockOutItemsShowNumberOfRows.selectedValue;

            var filterText = '';
            $('#StockOutInputFilter').keyup(function () {
                filterText = this.value.toLowerCase();
                items.refresh();
            });

            items.filter = function (item) {
                return !filterText || (item.ItemCode.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.ItemDescription.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Particulars.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.ItemInventoryCode.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Unit.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.BaseUnit.toLowerCase().indexOf(filterText) > -1);
            }

            items.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsItems();
            });

            itemGrid = new wijmo.grid.FlexGrid('#ItemGrid');
            itemGrid.initialize({
                columns: [
                    @{
                        if (canEdit)
                        {
                            <text>
                                {
                                    "header": "Edit",
                                    "binding": "EditId",
                                    "width": 70,
                                    "align": "center",
                                    "allowResizing": false,
                                    "allowSorting": false,
                                    "isContentHtml": true
                                },
                            </text>
                        }
                        if (canDelete)
                        {
                            <text>
                                {
                                    "header": "Delete",
                                    "binding": "DeleteId",
                                    "width": 70,
                                    "align": "center",
                                    "allowResizing": false,
                                    "allowSorting": false,
                                    "isContentHtml": true
                                },
                            </text>
                        }
                    }
                    {
                        "header": "Code",
                        "binding": "ItemCode",
                        "allowSorting": true,
                        "width": 120,
                    },
                    {
                        "header": "Description",
                        "binding": "ItemDescription",
                        "allowSorting": true,
                        "width": 140,
                    },
                    {
                        "header": "Particulars",
                        "binding": "Particulars",
                        "allowSorting": true,
                        "width": 120
                    },
                    {
                        "header": "Inventory Code",
                        "binding": "ItemInventoryCode",
                        "allowSorting": true,
                        "width": 150
                    },
                    {
                        "header": "Quantity",
                        "binding": "QuantityDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": 100
                    },
                    {
                        "header": "Unit",
                        "binding": "Unit",
                        "allowSorting": true,
                        "width": 100
                    },
                    {
                        "header": "Cost",
                        "binding": "CostDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": 100
                    },
                    {
                        "header": "Amount",
                        "binding": "AmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": 100
                    },
                    {
                        "header": "Unit",
                        "binding": "BaseUnit",
                        "allowSorting": true,
                        "width": 100
                    },
                    {
                        "header": "Quantity",
                        "binding": "BaseQuantityDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": 100
                    },
                    {
                        "header": "Cost",
                        "binding": "BaseCostDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": 100
                    },
                    {
                        "header": "Expense Account",
                        "binding": "ExpenseAccount",
                        "allowSorting": true,
                        "width": 150
                    },
                ],
                autoGenerateColumns: false,
                itemsSource: items,
                isReadOnly: true,
                @{
                    if (canEdit)
                    {
                        if (canDelete)
                        {
                            <text>
                                frozenColumns: 2,
                            </text>
                        }
                        else
                        {
                            <text>
                                frozenColumns: 1,
                            </text>
                        }
                    }
                    else
                    {
                        if (canDelete)
                        {
                            <text>
                                frozenColumns: 1,
                            </text>
                        }
                        else
                        {
                            <text>
                                frozenColumns: 0,
                            </text>
                        }
                    }
                }
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            itemGrid.trackChanges = true;

            var hr = new wijmo.grid.Row();
            itemGrid.allowMerging = wijmo.grid.AllowMerging.AllHeaders;
            itemGrid.columnHeaders.rows.push(hr);
            itemGrid.columnHeaders.rows[0].allowMerging = true;

            @{
                if (canEdit)
                {
                    if (canDelete)
                    {
                        <text>
                            var columnName = "";
                            for (var i = 0; i <= 13; i++) {
                                if (i == 0) {
                                    columnName = "Edit";
                                } else if (i == 1) {
                                    columnName = "Delete";
                                } else if (i == 2) {
                                    columnName = "Code";
                                } else if (i == 3) {
                                    columnName = "Description";
                                } else if (i == 4) {
                                    columnName = "Particulars";
                                } else if (i == 5) {
                                    columnName = "Inventory Code";
                                } else if (i == 6) {
                                    columnName = "Quantity";
                                } else if (i == 7) {
                                    columnName = "Unit";
                                } else if (i == 8) {
                                    columnName = "Cost";
                                } else if (i == 9) {
                                    columnName = "Amount";
                                } else {
                                    if (i >= 10) {
                                        columnName = "Basic Unit Conversion";
                                        for (var j = 10; j <= 12; j++) {
                                            itemGrid.columnHeaders.columns[j].allowMerging = true;
                                            itemGrid.columnHeaders.setCellData(0, j, columnName);
                                        }
                                    }
                                }

                                if (i <= 9) {
                                    itemGrid.columnHeaders.columns[i].allowMerging = true;
                                    itemGrid.columnHeaders.setCellData(0, i, columnName);
                                }

                                if (i == 13) {
                                    columnName = "Expense Account";
                                    itemGrid.columnHeaders.columns[i].allowMerging = true;
                                    itemGrid.columnHeaders.setCellData(0, i, columnName);
                                }
                            }
                        </text>
                    }
                    else
                    {
                         <text>
                            var columnName = "";
                            for (var i = 0; i <= 12; i++) {
                                if (i == 0) {
                                    columnName = "Edit";
                                } else if (i == 1) {
                                    columnName = "Code";
                                } else if (i == 2) {
                                    columnName = "Description";
                                } else if (i == 3) {
                                    columnName = "Particulars";
                                } else if (i == 4) {
                                    columnName = "Inventory Code";
                                } else if (i == 5) {
                                    columnName = "Quantity";
                                } else if (i == 6) {
                                    columnName = "Unit";
                                } else if (i == 7) {
                                    columnName = "Cost";
                                } else if (i == 8) {
                                    columnName = "Amount";
                                } else {
                                    if (i >= 9) {
                                        columnName = "Basic Unit Conversion";
                                        for (var j = 9; j <= 11; j++) {
                                            itemGrid.columnHeaders.columns[j].allowMerging = true;
                                            itemGrid.columnHeaders.setCellData(0, j, columnName);
                                        }
                                    }
                                }

                                if (i <= 8) {
                                    itemGrid.columnHeaders.columns[i].allowMerging = true;
                                    itemGrid.columnHeaders.setCellData(0, i, columnName);
                                }

                                if (i == 12) {
                                    columnName = "Expense Account";
                                    itemGrid.columnHeaders.columns[i].allowMerging = true;
                                    itemGrid.columnHeaders.setCellData(0, i, columnName);
                                }
                            }
                        </text>
                    }
                }
                else
                {
                    if (canDelete)
                    {
                        <text>
                            var columnName = "";
                            for (var i = 0; i <= 12; i++) {
                                if (i == 0) {
                                    columnName = "Delete";
                                } else if (i == 1) {
                                    columnName = "Code";
                                } else if (i == 2) {
                                    columnName = "Description";
                                } else if (i == 3) {
                                    columnName = "Particulars";
                                } else if (i == 4) {
                                    columnName = "Inventory Code";
                                } else if (i == 5) {
                                    columnName = "Quantity";
                                } else if (i == 6) {
                                    columnName = "Unit";
                                } else if (i == 7) {
                                    columnName = "Cost";
                                } else if (i == 8) {
                                    columnName = "Amount";
                                } else {
                                    if (i >= 9) {
                                        columnName = "Basic Unit Conversion";
                                        for (var j = 9; j <= 11; j++) {
                                            itemGrid.columnHeaders.columns[j].allowMerging = true;
                                            itemGrid.columnHeaders.setCellData(0, j, columnName);
                                        }
                                    }
                                }

                                if (i <= 8) {
                                    itemGrid.columnHeaders.columns[i].allowMerging = true;
                                    itemGrid.columnHeaders.setCellData(0, i, columnName);
                                }

                                if (i == 12) {
                                    columnName = "Expense Account";
                                    itemGrid.columnHeaders.columns[i].allowMerging = true;
                                    itemGrid.columnHeaders.setCellData(0, i, columnName);
                                }
                            }
                        </text>
                    }
                    else
                    {
                         <text>
                            var columnName = "";
                            for (var i = 0; i <= 11; i++) {
                                if (i == 0) {
                                    columnName = "Code";
                                } else if (i == 1) {
                                    columnName = "Description";
                                } else if (i == 2) {
                                    columnName = "Particulars";
                                } else if (i == 3) {
                                    columnName = "Inventory Code";
                                } else if (i == 4) {
                                    columnName = "Quantity";
                                } else if (i == 5) {
                                    columnName = "Unit";
                                } else if (i == 6) {
                                    columnName = "Cost";
                                } else if (i == 7) {
                                    columnName = "Amount";
                                } else {
                                    if (i >= 8) {
                                        columnName = "Basic Unit Conversion";
                                        for (var j = 8; j <= 10; j++) {
                                            itemGrid.columnHeaders.columns[j].allowMerging = true;
                                            itemGrid.columnHeaders.setCellData(0, j, columnName);
                                        }
                                    }
                                }

                                if (i <= 7) {
                                    itemGrid.columnHeaders.columns[i].allowMerging = true;
                                    itemGrid.columnHeaders.setCellData(0, i, columnName);
                                }

                                if (i == 11) {
                                    columnName = "Expense Account";
                                    itemGrid.columnHeaders.columns[i].allowMerging = true;
                                    itemGrid.columnHeaders.setCellData(0, i, columnName);
                                }
                            }
                        </text>
                    }
                }
            }

            updateNavigateButtonsItems();

            btnMoveToFirstPageGridItem.addEventListener('click', function () {
                items.moveToFirstPage();
                updateNavigateButtonsItems();
            });

            btnMoveToPreviousPageGridItem.addEventListener('click', function () {
                items.moveToPreviousPage();
                updateNavigateButtonsItems();
            });

            btnMoveToNextPageGridItem.addEventListener('click', function () {
                items.moveToNextPage();
                updateNavigateButtonsItems();
            });

            btnMoveToLastPageGridItem.addEventListener('click', function () {
                items.moveToLastPage();
                updateNavigateButtonsItems();
            });
        }

        // ======================================
        // GET Item Id, Manual Code and Component
        // ======================================
        function getArticleItemForManualCodeAndComponent(ItemId, InventoryCodeId, UnitId, ExpenseAccountId) {
            var articleInventoriesObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/stockOutItem/dropdown/list/itemInventory/item',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            articleInventoriesObservableArray.push({
                                Id: results[i]["Id"],
                                ItemId: results[i]["ArticleId"],
                                ItemCode: results[i]["ManualArticleCode"],
                                ItemDescription: results[i]["Article"],
                                ExpenseAccountId: results[i]["ExpenseAccountId"],
                            });
                        }
                    }

                    var disabled = true;
                    if (results.length > 0) {
                        disabled = false;
                        $("#cmdSaveStockOutItemButton").prop("disabled", false);
                    } else {
                        $("#cmdSaveStockOutItemButton").prop("disabled", true);
                    }

                    cboOUTItemCode.dispose();
                    cboOUTItemCode = new wijmo.input.ComboBox('#cboOUTItemCode', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: articleInventoriesObservableArray,
                        displayMemberPath: "ItemCode",
                        selectedValuePath: "ItemId",
                        selectedValue: ItemId,
                        onSelectedIndexChanged: function () {
                            cboOUTItemDescription.selectedValue = this.selectedValue;
                        }
                    });

                    cboOUTItemDescription.dispose();
                    cboOUTItemDescription = new wijmo.input.ComboBox('#cboOUTItemDescription', {
                        isEditable: false,
                        itemsSource: articleInventoriesObservableArray,
                        displayMemberPath: "ItemDescription",
                        selectedValuePath: "ItemId",
                        selectedValue: ItemId,
                        onSelectedIndexChanged: function () {
                            cboOUTItemCode.selectedValue = this.selectedValue;
                            isItemChange = true;
                            createCboForInventoryCode(InventoryCodeId, UnitId, ExpenseAccountId);
                        }
                    });

                    createCboForInventoryCode(InventoryCodeId, UnitId, ExpenseAccountId);
                }
            });
        }

        // ===========================
        // CBO for Item Inventory Code
        // ===========================
        function createCboForInventoryCode(InventoryCodeId, UnitId, ExpenseAccountId) {
            var articleInventoriesByItemObservableArray = new wijmo.collections.ObservableArray();
            if (cboOUTItemDescription.selectedValue != null) {
                 $.ajax({
                     url: '/api/stockOutItem/dropdown/list/itemInventoryCode/' + cboOUTItemDescription.selectedValue,
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    success: function (results) {
                        if (results.length > 0) {
                            for (i = 0; i < results.length; i++) {
                                articleInventoriesByItemObservableArray.push({
                                    Id: results[i]["Id"],
                                    InventoryCode: results[i]["InventoryCode"],
                                    Cost: results[i]["Cost"]
                                });
                            }
                        }

                        var disabled = true;
                        var InventoryType = "@ViewData["InventoryType"]";
                        if (results.length > 0) {
                            if (InventoryType == "Moving Average") {
                                disabled = true;
                            } else {
                                disabled = false;
                            }
                        } else {
                            $("#cmdSaveStockOutItemButton").prop("disabled", true);
                        }

                        cboOUTItemInventoryCode.dispose();
                        cboOUTItemInventoryCode = new wijmo.input.ComboBox('#cboOUTItemInventoryCode', {
                            disabled: disabled,
                            isEditable: false,
                            itemsSource: articleInventoriesByItemObservableArray,
                            displayMemberPath: "InventoryCode",
                            selectedValuePath: "Id",
                            selectedValue: InventoryCodeId,
                            onSelectedIndexChanged: function () {
                                if (stockOutItemId == 0) {
                                    if (cboOUTItemInventoryCode.selectedValue != null) {
                                        document.getElementById("stockOutItem_Cost").value = formatDecimalValues(this.selectedItem["Cost"]);
                                    } else {
                                        document.getElementById("stockOutItem_Cost").value = formatDecimalValues(0);
                                    }

                                    computeAmount();
                                }
                            }
                        });

                        if (stockOutItemId == 0) {
                            if (cboOUTItemInventoryCode.selectedValue != null) {
                                document.getElementById("stockOutItem_Cost").value = formatDecimalValues(cboOUTItemInventoryCode.selectedItem["Cost"]);
                            } else {
                                document.getElementById("stockOutItem_Cost").value = formatDecimalValues(0);
                            }

                            computeAmount();
                        }

                        getStockOutItemUnitForComboBox(UnitId, ExpenseAccountId);
                    }
                });
            } else {
                cboOUTItemInventoryCode.dispose();
                cboOUTItemInventoryCode = new wijmo.input.ComboBox('#cboOUTItemInventoryCode', {
                    disabled: true,
                    isEditable: false,
                    itemsSource: articleInventoriesByItemObservableArray,
                });

                getStockOutItemUnitForComboBox(UnitId, ExpenseAccountId);
            }
        }

        // =============
        // Get Item Unit
        // =============
        function getStockOutItemUnitForComboBox(UnitId, ExpenseAccountId) {
            var stockOutUnitsObservableArray = new wijmo.collections.ObservableArray();
            if (cboOUTItemDescription.selectedValue != null) {
                $.ajax({
                    url: '/api/stockOutItem/dropdown/list/itemUnit/' + cboOUTItemDescription.selectedValue,
                    cache: false,
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    success: function (results) {
                        if (results.length > 0) {
                            for (i = 0; i < results.length; i++) {
                                stockOutUnitsObservableArray.push({
                                    UnitId: results[i]["UnitId"],
                                    Unit: results[i]["Unit"],
                                    Multiplier: results[i]["Multiplier"]
                                });
                            }
                        }

                        var disabled = true;
                        if (results.length > 0) {
                            disabled = false;
                        } else {
                            $("#cmdSaveStockOutItemButton").prop("disabled", true);
                        }

                        cboOUTItemUnit.dispose();
                        cboOUTItemUnit = new wijmo.input.ComboBox('#cboOUTItemUnit', {
                            disabled: disabled,
                            isEditable: false,
                            itemsSource: stockOutUnitsObservableArray,
                            displayMemberPath: "Unit",
                            selectedValuePath: "UnitId",
                            selectedValue: UnitId
                        });

                        if (!isItemChange) {
                            getStockOutItemAccountForComboBox(ExpenseAccountId);
                        }
                    }
                });
            } else {
                cboStockOutUnit.dispose();
                cboStockOutUnit = new wijmo.input.ComboBox('#cboOUTItemUnit', {
                    disabled: true,
                    isEditable: false,
                    itemsSource: stockOutUnitsObservableArray,
                });

                if (!isItemChange) {
                    getStockOutItemAccountForComboBox(ExpenseAccountId);
                }
            }
        }

        // =====================
        // Get Stock Out Account
        // =====================
        function getStockOutItemAccountForComboBox(ExpenseAccountId) {
            var stockOutItemAccountsObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/stockOutItem/dropdown/list/expenseAccount',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (accountListResult) {
                    if (accountListResult.length > 0) {
                        for (i = 0; i < accountListResult.length; i++) {
                            stockOutItemAccountsObservableArray.push({
                                Id: accountListResult[i]["Id"],
                                AccountCode: accountListResult[i]["AccountCode"],
                                Account: accountListResult[i]["Account"]
                            });
                        }
                    }

                    var disabled = true;
                    if (accountListResult.length > 0) {
                        disabled = false;
                    } else {
                        $("#cmdSaveStockOutItemButton").prop("disabled", true);
                    }

                    if (ExpenseAccountId == 0) {
                        ExpenseAccountId = cboOUTItemDescription.selectedItem["ExpenseAccountId"];
                    }

                    cboOUTItemExpenseAccountCode.dispose();
                    cboOUTItemExpenseAccountCode = new wijmo.input.ComboBox('#cboOUTItemExpenseAccountCode', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: stockOutItemAccountsObservableArray,
                        displayMemberPath: "AccountCode",
                        selectedValuePath: "Id",
                        selectedValue: ExpenseAccountId,
                        onSelectedIndexChanged: function () {
                            cboOUTItemExpenseAccount.selectedValue = this.selectedValue;
                        }
                    });

                    cboOUTItemExpenseAccount.dispose();
                    cboOUTItemExpenseAccount = new wijmo.input.ComboBox('#cboOUTItemExpenseAccount', {
                        disabled: disabled,
                        isEditable: false,
                        itemsSource: stockOutItemAccountsObservableArray,
                        displayMemberPath: "Account",
                        selectedValuePath: "Id",
                        selectedValue: ExpenseAccountId,
                        onSelectedIndexChanged: function () {
                            cboOUTItemExpenseAccountCode.selectedValue = this.selectedValue;
                        }
                    });

                    $("#loadingModalItem").hide();
                    $("#stockOutItemsDetailForm").show();
                }
            });
        }

        // ==================
        // ADD Stock Out Item
        // ==================
        function cmdStockOutItem_OnClick() {
            $('#stockOutItemsEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $('.requiredStockOutItem').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            $("#loadingModalItem").show();
            document.getElementById("loadingModalItem").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#stockOutItemsDetailForm").hide();

            document.getElementById('cmdSaveStockOutItemButton').innerHTML = "<i class='fa fa-save'></i> Save";
            $("#cmdSaveStockOutItemButton").prop("disabled", true);
            $("#cmdStockOutItemDetailCloseButton").prop("disabled", false);

            stockOutItemId = 0;
            getArticleItemForManualCodeAndComponent(0, 0, 0, 0);
            document.getElementById('stockOutItem_Particulars').value = 'NA';
            document.getElementById('stockOutItem_Quantity').value = formatDecimalValues(1);
            document.getElementById('stockOutItem_Cost').value = formatDecimalValues(0);
            document.getElementById('stockOutItem_Amount').value = formatDecimalValues(0);
        }

        // ===================
        // Edit Stock Out Item
        // ===================
        function btnEditStockOutItem_OnClick() {
            $('#stockOutItemsEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $('.requiredStockOutItem').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            $("#loadingModalItem").show();
            document.getElementById("loadingModalItem").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#stockOutItemsDetailForm").hide();

            document.getElementById('cmdSaveStockOutItemButton').innerHTML = "<i class='fa fa-save'></i> Save";
            $("#cmdSaveStockOutItemButton").prop("disabled", true);
            $("#cmdStockOutItemDetailCloseButton").prop("disabled", false);

            items.editItem(items.currentItem);
            var item = items.currentEditItem;
            stockOutItemId = item.Id;
            getArticleItemForManualCodeAndComponent(item.ItemId, item.ItemInventoryId, item.UnitId, item.ExpenseAccountId);
            document.getElementById('stockOutItem_Particulars').value = item.Particulars;
            document.getElementById('stockOutItem_Quantity').value = formatDecimalValues(item.Quantity);
            document.getElementById('stockOutItem_Cost').value = formatDecimalValues(item.Cost);
            document.getElementById('stockOutItem_Amount').value = formatDecimalValues(item.Amount);
        }

        // ===================
        // Save Stock Out Item
        // ===================
        function cmdStockOutItemSaveButton_OnClick() {
            var stockOutItemObject = new Object();
            stockOutItemObject.ItemId = cboOUTItemDescription.selectedValue;
            stockOutItemObject.Particulars = document.getElementById('stockOutItem_Particulars').value;
            stockOutItemObject.ItemInventoryId = cboOUTItemInventoryCode.selectedValue;
            stockOutItemObject.UnitId = cboOUTItemUnit.selectedValue;
            stockOutItemObject.Quantity = document.getElementById('stockOutItem_Quantity').value;
            stockOutItemObject.Cost = document.getElementById('stockOutItem_Cost').value;
            stockOutItemObject.Amount = document.getElementById('stockOutItem_Amount').value;
            stockOutItemObject.ExpenseAccountId = cboOUTItemExpenseAccount.selectedValue;
            var stockOutItemData = JSON.stringify(stockOutItemObject);

            var isValid = true;
            $('.requiredStockOutItem').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                } else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            if (isValid) {
                document.getElementById('cmdSaveStockOutItemButton').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Saving";
                $("#cmdSaveStockOutItemButton").prop("disabled", true);
                $("#cmdStockOutItemDetailCloseButton").prop("disabled", true);

                var OTId = getParam("id");

                if (stockOutItemId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/stockOutItem/add/' + OTId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: stockOutItemData,
                        statusCode: {
                            200: function () {
                                toastr.success("Save Successful");
                                $('#stockOutItemsEdit').modal('hide');
                                refreshStockOutItemFlexGrid();
                            },
                            404: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                                document.getElementById('cmdSaveStockOutItemButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#cmdSaveStockOutItemButton").prop("disabled", false);
                                $("#cmdStockOutItemDetailCloseButton").prop("disabled", false);
                            },
                            400: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                                document.getElementById('cmdSaveStockOutItemButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#cmdSaveStockOutItemButton").prop("disabled", false);
                                $("#cmdStockOutItemDetailCloseButton").prop("disabled", false);
                            },
                            500: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                                document.getElementById('cmdSaveStockOutItemButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#cmdSaveStockOutItemButton").prop("disabled", false);
                                $("#cmdStockOutItemDetailCloseButton").prop("disabled", false);
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/stockOutItem/update/' + stockOutItemId + '/' + OTId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: stockOutItemData,
                        statusCode: {
                            200: function () {
                                toastr.success("Update Successful");
                                $('#stockOutItemsEdit').modal('hide');
                                refreshStockOutItemFlexGrid();
                            },
                            404: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                                $('#stockOutItemsEdit').modal('hide');
                                document.getElementById('cmdSaveStockOutItemButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#cmdSaveStockOutItemButton").prop("disabled", false);
                                $("#cmdStockOutItemDetailCloseButton").prop("disabled", false);
                            },
                            400: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                                $('#stockOutItemsEdit').modal('hide');
                                document.getElementById('cmdSaveStockOutItemButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#cmdSaveStockOutItemButton").prop("disabled", false);
                                $("#cmdStockOutItemDetailCloseButton").prop("disabled", false);
                            },
                            500: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                                $('#stockOutItemsEdit').modal('hide');
                                document.getElementById('cmdSaveStockOutItemButton').innerHTML = "<i class='fa fa-save'></i> Save";
                                $("#cmdSaveStockOutItemButton").prop("disabled", false);
                                $("#cmdStockOutItemDetailCloseButton").prop("disabled", false);
                            }
                        }
                    });
                }
            } else {
                toastr.error("Invalid Entry");
            }
        }

        // =====================
        // Delete Stock Out Item
        // =====================
        function btnDeleteStockOutItem_OnClick() {
            $('#deletStockOutItemsConfirm').modal({
                show: true,
                backdrop: 'static'
            });

            document.getElementById('cmdConfirmDeleteStockOutItems').innerHTML = "<i class='fa fa-trash'></i> Delete";
            $("#cmdConfirmDeleteStockOutItems").prop("disabled", false);
            $("#cmdConfirmDeleteStockOutItemsCloseButton").prop("disabled", false);
        }

        // Confirm Delete Stock Out Item
        function cmdStockOutItemsConfirmDeleteButton_OnClick() {
            document.getElementById('cmdConfirmDeleteStockOutItems').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Deleting";
            $("#cmdConfirmDeleteStockOutItems").prop("disabled", true);
            $("#cmdConfirmDeleteStockOutItemsCloseButton").prop("disabled", true);

            items.editItem(items.currentItem);
            var id = items.currentEditItem.Id;
            var OTId = getParam("id");

            $.ajax({
                url: '/api/stockOutItem/delete/' + id + '/' + OTId,
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Delete Successful");
                        $('#deletStockOutItemsConfirm').modal('hide');
                        refreshStockOutItemFlexGrid();
                    },
                    404: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 404");
                        $('#deletStockOutItemsConfirm').modal('hide');
                        document.getElementById('cmdConfirmDeleteStockOutItems').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $("#cmdConfirmDeleteStockOutItems").prop("disabled", false);
                        $("#cmdConfirmDeleteStockOutItemsCloseButton").prop("disabled", false);
                    },
                    400: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 400");
                        $('#deletStockOutItemsConfirm').modal('hide');
                        document.getElementById('cmdConfirmDeleteStockOutItems').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $("#cmdConfirmDeleteStockOutItems").prop("disabled", false);
                        $("#cmdConfirmDeleteStockOutItemsCloseButton").prop("disabled", false);
                    },
                    500: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Error 500");
                        $('#deletStockOutItemsConfirm').modal('hide');
                        document.getElementById('cmdConfirmDeleteStockOutItems').innerHTML = "<i class='fa fa-trash'></i> Delete";
                        $("#cmdConfirmDeleteStockOutItems").prop("disabled", false);
                        $("#cmdConfirmDeleteStockOutItemsCloseButton").prop("disabled", false);
                    }
                }
            });
        }

        // ===========
        // Get Journal
        // ===========
        function getJournalListForRR() {
            var journalsObservableArray = new wijmo.collections.ObservableArray;
            var OTId = getParam('id');

            $.ajax({
                url: '/api/jounal/stockOut/list/' + OTId,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {

                            var journalDateResult = new Date(results[i]["JournalDate"])
                            var journalDate = ('0' + (journalDateResult.getMonth() + 1)).slice(-2) + '-' + ('0' + journalDateResult.getDate()).slice(-2) + '-' + journalDateResult.getFullYear();

                            journalsObservableArray.push({
                                Branch: results[i]["Branch"],
                                JournalDate: journalDate,
                                AccountCode: results[i]["AccountCode"],
                                Account: results[i]["Account"],
                                Article: results[i]["Article"],
                                DebitAmountDisplay: parseFloat(results[i]["DebitAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                CreditAmountDisplay: parseFloat(results[i]["CreditAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")
                            });

                            var debitAmountTotal = 0;
                            var creditAmountTotal = 0;

                            var a = 0;
                            while (a < results.length) {
                                debitAmountTotal += results[a]["DebitAmount"];
                                creditAmountTotal += results[a]["CreditAmount"];
                                a++;
                            }
                        }

                        document.getElementById('totalDebitInJournal').value = debitAmountTotal.toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        document.getElementById('totalCreditInJournal').value = creditAmountTotal.toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        var variance = debitAmountTotal - creditAmountTotal;
                        document.getElementById('variance').value = variance.toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                    }

                    $("#loadingJournalGridList").hide();
                    $("#journal_Content").show();
                }
            });


            return journalsObservableArray;
        }

        // ============
        // Journal List
        // ============
        function stockOutJournal_OnClick() {
            $('#journalDetail').modal({
                show: true,
                backdrop: 'static'
            });

            $("#loadingJournalGridList").show();
            document.getElementById("loadingJournalGridList").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#journal_Content").hide();

            setTimeout(function () {
                createJournalFlexGrid();
            }, 500)
        }

        function createJournalFlexGrid() {
            journalCollectionView = new wijmo.collections.CollectionView(getJournalListForRR());

            journalFlexGrid.dispose();
            journalFlexGrid = new wijmo.grid.FlexGrid('#journalFlexGrid');
            journalFlexGrid.initialize({
                columns: [
                    {
                        "header": "Branch",
                        "binding": "Branch",
                        "allowSorting": true,
                        "width": "2.5*"
                    },
                    {
                        "header": "Date",
                        "binding": "JournalDate",
                        "allowSorting": true,
                        "width": "1.5*"
                    },
                    {
                        "header": "Code",
                        "binding": "AccountCode",
                        "allowSorting": true,
                        "width": "1.8*"
                    },
                    {
                        "header": "Account",
                        "binding": "Account",
                        "allowSorting": true,
                        "width": "3*"
                    },
                    {
                        "header": "Article",
                        "binding": "Article",
                        "allowSorting": true,
                        "width": "3*"
                    },
                    {
                        "header": "Debit",
                        "binding": "DebitAmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": "2*",
                    },
                    {
                        "header": "Credit",
                        "binding": "CreditAmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": "2*"
                    }
                ],
                autoGenerateColumns: false,
                itemsSource: journalCollectionView,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            journalFlexGrid.trackChanges = true;
        }

        // =====================
        // GET Inventory Entries
        // =====================
        function getInventoryEntries() {
            var OTId = getParam('id');
            var inventoryObservableArray = new wijmo.collections.ObservableArray;

            $.ajax({
                url: '/api/inventory/stockOut/list/' + OTId,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {

                            var InventoryDateResult = new Date(results[i]["InventoryDate"])
                            var InventoryDate = ('0' + (InventoryDateResult.getMonth() + 1)).slice(-2) + '-' + ('0' + InventoryDateResult.getDate()).slice(-2) + '-' + InventoryDateResult.getFullYear();

                            inventoryObservableArray.push({
                                Id: results[i]["Id"],
                                InventoryDate: InventoryDate,
                                Branch: results[i]["Branch"],
                                Article: results[i]["Article"],
                                Particulars: results[i]["Particulars"],
                                ArticleInventoryCode: results[i]["ArticleInventoryCode"],
                                Quantity: results[i]["Quantity"],
                                QuantityDisplay: parseFloat(results[i]["Quantity"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                ArticleUnit: results[i]["ArticleUnit"],
                                Amount: results[i]["Amount"],
                                AmountDisplay: parseFloat(results[i]["Amount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                            });
                        }
                    }

                    NProgress.done();
                }
            });

            return inventoryObservableArray;
        }

        // =========================
        // Update Navigation Buttons
        // =========================
        function updateNavigateButtonsInventoryEntry() {
            if (inventoryCollectionView.pageSize <= 0) {
                document.getElementById('naviagtionPageGridInventoryEntry').style.display = 'none';
                return;
            }
            document.getElementById('naviagtionPageGridInventoryEntry').style.display = 'block';
            if (inventoryCollectionView.pageIndex === 0) {
                btnMoveToFirstPageGridInventoryEntry.setAttribute('disabled', 'disabled');
                btnMoveToPreviousPageGridInventoryEntry.setAttribute('disabled', 'disabled');
                btnMoveToNextPageGridInventoryEntry.removeAttribute('disabled');
                btnMoveToLastPageGridInventoryEntry.removeAttribute('disabled');
            } else if (inventoryCollectionView.pageIndex === (inventoryCollectionView.pageCount - 1)) {
                btnMoveToFirstPageGridInventoryEntry.removeAttribute('disabled');
                btnMoveToPreviousPageGridInventoryEntry.removeAttribute('disabled');
                btnMoveToNextPageGridInventoryEntry.setAttribute('disabled', 'disabled');
                btnMoveToLastPageGridInventoryEntry.setAttribute('disabled', 'disabled');
            } else {
                btnMoveToFirstPageGridInventoryEntry.removeAttribute('disabled');
                btnMoveToPreviousPageGridInventoryEntry.removeAttribute('disabled');
                btnMoveToNextPageGridInventoryEntry.removeAttribute('disabled');
                btnMoveToLastPageGridInventoryEntry.removeAttribute('disabled');
            }
            btnCurrentPageGridInventoryEntry.innerHTML = (inventoryCollectionView.pageIndex + 1) + ' / ' + inventoryCollectionView.pageCount;
        }

        // ===========================
        // Refresh Inventory Flex Grid
        // ===========================
        function refreshInventoryFlexGrid() {
            inventoryCollectionView = new wijmo.collections.CollectionView(getInventoryEntries());
            inventoryCollectionView.canFilter = true;
            inventoryCollectionView.pageSize = cboInventoryEntryShowNumberOfRows.selectedValue;

            var filterText = '';
            $('#InventoryEntryInputFilter').keyup(function () {
                filterText = this.value.toLowerCase();
                inventoryCollectionView.refresh();
            });

            inventoryCollectionView.filter = function (item) {
                return !filterText || (item.Branch.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Article.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Particulars.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.ArticleInventoryCode.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.ArticleUnit.toLowerCase().indexOf(filterText) > -1);
            }

            inventoryCollectionView.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsInventoryEntry();
            });

            inventoryFlexGrid.itemsSource = inventoryCollectionView;
            inventoryFlexGrid.trackChanges = true;
        }

        // ================================
        // On Page Load for Inventory Entry
        // ================================
        function createInventoryFlexGrid() {
            inventoryCollectionView = new wijmo.collections.CollectionView(getInventoryEntries());
            inventoryCollectionView.canFilter = true;
            inventoryCollectionView.pageSize = cboInventoryEntryShowNumberOfRows.selectedValue;

            var filterText = '';
            $('#InventoryEntryInputFilter').keyup(function () {
                filterText = this.value.toLowerCase();
                inventoryCollectionView.refresh();
            });

            inventoryCollectionView.filter = function (item) {
                return !filterText || (item.Branch.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Article.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.Particulars.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.ArticleInventoryCode.toLowerCase().indexOf(filterText) > -1)
                    || !filterText || (item.ArticleUnit.toLowerCase().indexOf(filterText) > -1);
            }

            inventoryCollectionView.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsInventoryEntry();
            });

            inventoryFlexGrid = new wijmo.grid.FlexGrid('#InventoryEntryGrid');
            inventoryFlexGrid.initialize({
                columns: [
                    {
                        "header": "Date",
                        "binding": "InventoryDate",
                        "allowSorting": true,
                        "width": "1*"
                    },
                    {
                        "header": "Branch",
                        "binding": "Branch",
                        "allowSorting": true,
                        "width": "1.5*",
                    },
                    {
                        "header": "Item",
                        "binding": "Article",
                        "align": "left",
                        "allowSorting": true,
                        "width": "1.7*",
                    },
                    {
                        "header": "Particulars",
                        "binding": "Particulars",
                        "align": "left",
                        "allowSorting": true,
                        "width": "1.5*",
                    },
                    {
                        "header": "Inventory Code",
                        "binding": "ArticleInventoryCode",
                        "allowSorting": true,
                        "width": "1.3*",
                    },
                    {
                        "header": "Quantity",
                        "binding": "QuantityDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": "1*",
                    },
                    {
                        "header": "Unit",
                        "binding": "ArticleUnit",
                        "allowSorting": true,
                        "width": "1*",
                    },
                    {
                        "header": "Amount",
                        "binding": "AmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": "1*",
                    },
                ],
                autoGenerateColumns: false,
                itemsSource: inventoryCollectionView,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            inventoryFlexGrid.trackChanges = true;

            updateNavigateButtonsInventoryEntry();

            btnMoveToFirstPageGridInventoryEntry.addEventListener('click', function () {
                inventoryCollectionView.moveToFirstPage();
                updateNavigateButtonsInventoryEntry();
            });

            btnMoveToPreviousPageGridInventoryEntry.addEventListener('click', function () {
                inventoryCollectionView.moveToPreviousPage();
                updateNavigateButtonsInventoryEntry();
            });

            btnMoveToNextPageGridInventoryEntry.addEventListener('click', function () {
                inventoryCollectionView.moveToNextPage();
                updateNavigateButtonsInventoryEntry();
            });

            btnMoveToLastPageGridInventoryEntry.addEventListener('click', function () {
                inventoryCollectionView.moveToLastPage();
                updateNavigateButtonsInventoryEntry();
            });
        }

        // Item Query Stock Transfer Item
        function cmdItemQueryStockOutItem_OnClick() {
            $('#stockOutItemsItemQuery').modal({
                show: true,
                backdrop: 'static'
            });

            $("#loadingItemQuery").show();
            document.getElementById("loadingItemQuery").innerHTML = "<b><i class='fa fa-spinner fa-spin'></i></b>";
            $("#itemQueryPanel").hide();

            setTimeout(function () {
                createFlexGridForItemQuery();
            }, 1000)
        }

        // get article inventory for stock transfer item query
        function getArticleInventoryForItemQuery() {
            var items = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/stockOutItem/popUp/list/itemQuery',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    for (i = 0; i < results.length; i++) {
                        items.push({
                            Id: results[i]["Id"],
                            ArticleId: results[i]["ArticleId"],
                            ManualArticleCode: results[i]["ManualArticleCode"],
                            Article: results[i]["Article"],
                            InventoryCode: results[i]["InventoryCode"],
                            Price: results[i]["Price"],
                            PriceDisplay: parseFloat(results[i]["Price"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                            Quantity: results[i]["Quantity"],
                            QuantityDisplay: parseFloat(results[i]["Quantity"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                            Cost: results[i]["Cost"],
                            CostDisplay: parseFloat(results[i]["Cost"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                            Amount: results[i]["Amount"],
                            AmountDisplay: parseFloat(results[i]["Amount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                            Particulars: results[i]["Particulars"],
                            UnitId: results[i]["UnitId"],
                            Unit: results[i]["Unit"],
                            Pick: "<button class='btn btn-primary btn-xs btn-block' onclick='pickToApplyOnClick()'><i class='fa fa-hand-o-right'></i> Pick</button>",
                        });
                    }

                    $("#loadingItemQuery").hide();
                    $("#itemQueryPanel").show();
                }
            });

            return items;
        }

        // =========================
        // Update Navigation Buttons
        // =========================
        function updateNavigateButtonsItemQuery() {
            if (itemQueryItemsCollection.pageSize <= 0) {
                document.getElementById('naviagtionPageGridItemQuery').style.display = 'none';
                return;
            }
            document.getElementById('naviagtionPageGridItemQuery').style.display = 'block';
            if (itemQueryItemsCollection.pageIndex === 0) {
                btnMoveToFirstPageGridItemQuery.setAttribute('disabled', 'disabled');
                btnMoveToPreviousPageGridItemQuery.setAttribute('disabled', 'disabled');
                btnMoveToNextPageGridItemQuery.removeAttribute('disabled');
                btnMoveToLastPageGridItemQuery.removeAttribute('disabled');
            } else if (itemQueryItemsCollection.pageIndex === (itemQueryItemsCollection.pageCount - 1)) {
                btnMoveToFirstPageGridItemQuery.removeAttribute('disabled');
                btnMoveToPreviousPageGridItemQuery.removeAttribute('disabled');
                btnMoveToNextPageGridItemQuery.setAttribute('disabled', 'disabled');
                btnMoveToLastPageGridItemQuery.setAttribute('disabled', 'disabled');
            } else {
                btnMoveToFirstPageGridItemQuery.removeAttribute('disabled');
                btnMoveToPreviousPageGridItemQuery.removeAttribute('disabled');
                btnMoveToNextPageGridItemQuery.removeAttribute('disabled');
                btnMoveToLastPageGridItemQuery.removeAttribute('disabled');
            }
            btnCurrentPageGridItemQuery.innerHTML = (itemQueryItemsCollection.pageIndex + 1) + ' / ' + itemQueryItemsCollection.pageCount;
        }

        // creates flexgrid for the item query
        function createFlexGridForItemQuery() {
            itemQueryItemsCollection = new wijmo.collections.CollectionView(getArticleInventoryForItemQuery());
            itemQueryItemsCollection.canFilter = true;
            itemQueryItemsCollection.pageSize = 10;

            var filterText = '';
            $('#itemQueryFilter').keyup(function () {
                filterText = this.value.toLowerCase();
                itemQueryItemsCollection.refresh();
            });

            itemQueryItemsCollection.filter = function (item) {
                return !filterText || (item.ManualArticleCode.toLowerCase().indexOf(filterText) > -1)
                    || (item.Article.toLowerCase().indexOf(filterText) > -1);
            }

            itemQueryItemsCollection.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsItemQuery();
            });

            // Flex Grid for Purchase Order Line
            itemQueryGrid.dispose();
            itemQueryGrid = new wijmo.grid.FlexGrid('#itemQueryGrid');
            itemQueryGrid.initialize({
                columns: [
                    {
                        "header": "Code",
                        "binding": "ManualArticleCode",
                        "allowSorting": true,
                        "width": "3*"
                    },
                    {
                        "header": "Item",
                        "binding": "Article",
                        "allowSorting": true,
                        "width": "4*"
                    },
                    {
                        "header": "Inventory",
                        "binding": "InventoryCode",
                        "allowSorting": true,
                        "width": "3*"
                    },
                    {
                        "header": "Price",
                        "binding": "PriceDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": "2*"
                    },
                    {
                        "header": "Quantity",
                        "binding": "QuantityDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": "2*"
                    },
                    {
                        "header": "Unit",
                        "binding": "Unit",
                        "allowSorting": true,
                        "width": 120
                    },
                    {
                        "header": "Pick",
                        "binding": "Pick",
                        "width": 70,
                        "align": "center",
                        "allowResizing": false,
                        "allowSorting": false,
                        "isContentHtml": true
                    },
                ],
                autoGenerateColumns: false,
                itemsSource: itemQueryItemsCollection,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            itemQueryGrid.trackChanges = true;

            if (!isItemQueryClicked) {
                updateNavigateButtonsItemQuery();

                btnMoveToFirstPageGridItemQuery.addEventListener('click', function () {
                    itemQueryItemsCollection.moveToFirstPage();
                    updateNavigateButtonsItemQuery();
                });

                btnMoveToPreviousPageGridItemQuery.addEventListener('click', function () {
                    itemQueryItemsCollection.moveToPreviousPage();
                    updateNavigateButtonsItemQuery();
                });

                btnMoveToNextPageGridItemQuery.addEventListener('click', function () {
                    itemQueryItemsCollection.moveToNextPage();
                    updateNavigateButtonsItemQuery();
                });

                btnMoveToLastPageGridItemQuery.addEventListener('click', function () {
                    itemQueryItemsCollection.moveToLastPage();
                    updateNavigateButtonsItemQuery();
                });

                isItemQueryClicked = true;
            }
        }

        // pick
        function pickToApplyOnClick() {
            $('#stockOutItemsEdit').modal({
                show: true,
                backdrop: 'static'
            });

            $('.requiredStockOutItem').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            $("#loadingModalItem").show();
            document.getElementById("loadingModalItem").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#stockOutItemsDetailForm").hide();

            document.getElementById('cmdSaveStockOutItemButton').innerHTML = "<i class='fa fa-save'></i> Save";
            $("#cmdSaveStockOutItemButton").prop("disabled", true);
            $("#cmdStockOutItemDetailCloseButton").prop("disabled", false);

            itemQueryItemsCollection.editItem(itemQueryItemsCollection.currentItem);
            var item = itemQueryItemsCollection.currentEditItem;
            stockOutItemId = 0;
            getArticleItemForManualCodeAndComponent(item.ArticleId, item.Id, item.UnitId, 0);
            document.getElementById('stockOutItem_Particulars').value = 'NA';
            document.getElementById('stockOutItem_Quantity').value = formatDecimalValues(item.Quantity);
            document.getElementById('stockOutItem_Cost').value = formatDecimalValues(item.Cost);
            document.getElementById('stockOutItem_Amount').value = formatDecimalValues(item.Amount);
        }

        // ====
        // TABS
        // ====
        $('#itemTabId').click(function () {
            $('#Items').show();
            $('#InventoryEntries').hide();
            NProgress.start();
            refreshStockOutItemFlexGrid();
        });

        $('#inventoryEntryTabId').click(function () {
            $('#Items').hide();
            $('#InventoryEntries').show();
            NProgress.start();
            refreshInventoryFlexGrid();
        });

        // ===========
        // OnLoad Page
        // ===========
        $(document).ready(function () {
            getBranchesForComboBox();

            $(document).on('show.bs.modal', '.modal', function (event) {
                var zIndex = 1040 + (10 * $('.modal:visible').length);
                $(this).css('z-index', zIndex);
                setTimeout(function () {
                    $('.modal-backdrop').not('.modal-stack').css('z-index', zIndex - 1).addClass('modal-stack');
                }, 0);
            });

            $(document).on('hidden.bs.modal', '.modal', function () {
                $('.modal:visible').length && $(document.body).addClass('modal-open');
            });
        });
    </script>
    <script type="text/javascript">
        var cboUserBranches = new wijmo.input.ComboBox('#cboUserBranches');
        function getUserBranches() {
            $("#loadingUserBranches").show();
            document.getElementById("loadingUserBranches").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#userBranchContent").hide();

            $('#userBranchesModal').modal({ show: true, backdrop: 'static' });

            document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
            $("#updateUserBranch").prop("disabled", false);
            $("#closeUserBranch").prop("disabled", false);

            var userBranchesObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/userBranch/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (userBranchesresults) {
                    if (userBranchesresults.length > 0) {
                        for (i = 0; i < userBranchesresults.length; i++) {
                            userBranchesObservableArray.push({
                                BranchId: userBranchesresults[i]["BranchId"],
                                Branch: userBranchesresults[i]["Branch"]
                            });
                        }
                    }

                    var currentBranch = "@ViewData["BranchId"]";
                    cboUserBranches.dispose();
                    cboUserBranches = new wijmo.input.ComboBox('#cboUserBranches', {
                        isEditable: false,
                        placeholder: "Select Branches",
                        itemsSource: userBranchesObservableArray,
                        displayMemberPath: "Branch",
                        selectedValuePath: "BranchId",
                        selectedValue: currentBranch
                    });

                    setTimeout(function () {
                        $("#loadingUserBranches").hide();
                        $("#userBranchContent").show();
                    }, 500)
                }
            });
        }

        function updateUserBranchOnclick() {
            document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Updating";
            $("#updateUserBranch").prop("disabled", true);
            $("#closeUserBranch").prop("disabled", true);

            var userBranchObject = new Object();
            userBranchObject.BranchId = cboUserBranches.selectedValue;
            var userBranchData = JSON.stringify(userBranchObject);

            $.ajax({
                type: "PUT",
                url: '/api/userBranch/update',
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: userBranchData,
                statusCode: {
                    200: function () {
                        toastr.success("Update Successful");
                        window.setTimeout(function () {
                            location.reload()
                        }, 1000);
                    },
                    404: function () {
                        toastr.error("Not Found");
                        document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
                        $("#updateUserBranch").prop("disabled", false);
                        $("#closeUserBranch").prop("disabled", false);
                    },
                    500: function () {
                        toastr.error("Bad Request");
                        document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
                        $("#updateUserBranch").prop("disabled", false);
                        $("#closeUserBranch").prop("disabled", false);
                    }
                }
            });
        }
    </script>
    <script type="text/javascript">
        var slideLeft = new Menu({
            wrapper: '#o-wrapper',
            type: 'slide-left',
            menuOpenerClass: '.c-button',
            maskId: '#c-mask'
        });

        var slideLeftBtn = document.querySelector('#c-button--slide-left');

        slideLeftBtn.addEventListener('click', function (e) {
            e.preventDefault;
            slideLeft.open();
        });
    </script>
</body>
</html>