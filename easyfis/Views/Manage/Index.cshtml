<!DOCTYPE html>
<html>
<head>
    <!-- Meta Tags -->
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <!-- Title of the Page -->
    <title>@ViewData["FullName"]</title>

    <!-- CSS StyleSheets-->
    @Styles.Render("~/Content/css")
    @Styles.Render("~/Font-Awesome/css")
    @Styles.Render("~/Content/custom-css")
    @Styles.Render("~/WijmoCSS/Wijmo-css")
</head>
<body data-spy="scroll" data-offset="100" id="home">
    <!-- Header -->
    @Html.Partial("_ManageHeader")

    <!-- Manage -->
    @Html.Partial("_ManageIndex")

    <!-- Footer -->
    @Html.Partial("_ManageFooter")

    <!-- User Edit Detail -->
    <div class="modal fade" id="userEdit" role="dialog">
        <div class="modal-dialog">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Edit Profile Detail</h4>
                </div>
                <div class="modal-body">
                    <form id="userDetailForm">
                        <input type="hidden" id="userId" value="@ViewData["UserId"]" />
                        <dl class="dl-horizontal">
                            <dt>First Name:</dt>
                            <dd><input type="text" class="form-control input-sm requiredUser" id="profileDetail_firstName" value="@ViewData["FirstName"]" /></dd>
                            <dt>Last Name:</dt>
                            <dd><input type="text" class="form-control input-sm requiredUser" id="profileDetail_lastName" value="@ViewData["LastName"]" /></dd>
                            <dt>Address:</dt>
                            <dd><textarea type="text" class="form-control textarea-custom-profile requiredUser" id="profileDetail_address">@ViewData["Address"]</textarea></dd>
                            <dt>Email Address:</dt>
                            <dd><input type="text" class="form-control input-sm requiredUser" id="profileDetail_email" value="@ViewData["Email"]" /></dd>
                            <dt>Username:</dt>
                            <dd><input type="text" class="form-control input-sm requiredUser" id="profileDetail_userName" value="@ViewData["UserName"]" readonly /></dd>
                        </dl>
                    </form>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary btn-sm" id="cmdSaveUserButton" onclick="cmdUserSaveButton_OnClick()"><i class="fa fa-save"></i> Save</button>
                    <button id="cmdUserDetailCloseButton" class="btn btn-danger btn-sm" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Scripts JavaScripts -->
    @Scripts.Render("~/Scripts/js")
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/WijmoScripts/Wijmo-js")
    <script type="text/javascript">
        // ================
        // Global Variables
        // ================
        var branches;
        var cboBranch;

        // =================
        // Modal User Detail
        // =================
        function cmdEditProfileDetails_OnClickButton() {
            $('#userEdit').modal({
                show: true,
                backdrop: 'static'
            });
        }

        // ==================
        // Update User Detail
        // ==================
        function cmdUserSaveButton_OnClick() {
            var userObject = new Object();
            var id = document.getElementById('userId').value;

            userObject.FirstName = document.getElementById('profileDetail_firstName').value;
            userObject.LastName = document.getElementById('profileDetail_lastName').value;
            userObject.Address = document.getElementById('profileDetail_address').value;
            userObject.Email = document.getElementById('profileDetail_email').value;
            var data = JSON.stringify(userObject);

            var isValid = true;
            $('.requiredUser').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "2px solid red",
                        "transition": "border 1s ease 0s"
                    });
                }
                else {
                    $(this).css({
                        "border": "",
                    });
                }
            });
            if (isValid == false) {
                e.preventDefault();
            }
            else {
                $.ajax({
                    type: "PUT",
                    url: '/api/updateAspUser/' + id,
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    data: data,
                    statusCode: {
                        200: function () {
                            $("#cmdSaveUserButton").prop("disabled", true);
                            $("#cmdUserDetailCloseButton").prop("disabled", true);
                            toastr.success("Successfully Updated Profile");
                            window.setTimeout(function () {
                                location.reload()
                            }, 1000);
                        },
                        404: function () {
                            toastr.error("Can't Update");
                        },
                        400: function () {
                            toastr.error("Bad Request");
                        },
                        500: function () {
                            toastr.error("Server Error");
                        }
                    }
                });

                $.ajax({
                    type: "PUT",
                    url: '/api/updateMstUser/' + id,
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    data: data,
                    statusCode: {
                        200: function () {
                            $("#cmdSaveUserButton").prop("disabled", true);
                            $("#cmdUserDetailCloseButton").prop("disabled", true);
                            window.setTimeout(function () {
                                location.reload()
                            }, 1000);
                        },
                        404: function () {
                            toastr.error("Can't Update");
                        },
                        400: function () {
                            toastr.error("Bad Request");
                        },
                        500: function () {
                            toastr.error("Server Error");
                        }
                    }
                });
            }
        }

        // ========================
        // GET Branch for Combo Box
        // ========================
        function getBranchesForComboBox() {
            branches = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/listBranch',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            branches.push({
                                BranchId: results[i]["Id"],
                                BranchBranch: results[i]["Branch"]
                            });
                        }
                        createCboBranch(branches);
                    }
                }
            }).fail(function (xhr, textStatus, err) {
                alert(err);
            }
            );
        }

        // ======================
        // Combo Box for Branches
        // ======================
        function createCboBranch(branches) {
            var branchCollections = new wijmo.collections.CollectionView(branches);
            var branchList = new Array();
            for (var i = 0; i < branchCollections.items.length; i++) {
                branchList.push(branchCollections.items[i].BranchBranch);
            }

            //cboBranch.dispose();
            cboBranch = new wijmo.input.ComboBox('#branch_Id', {
                placeholder: "Select branch",
                itemsSource: branchList,
                isEditable: false,
                required: false,
                selectedValue: "",
                onSelectedIndexChanged: function () {
                    $("#branch_Id_Data").val(branchCollections.items[this.selectedIndex].BranchId);
                    $('#LaunchSoftware').prop('disabled', false);
                }
            });
        }

        // ===============
        // Launch Software
        // ===============
        function cmdLaunchSoftware_OnClick() {
            var branchId = document.getElementById('branch_Id_Data').value;
            window.location = '/Software?BranchId=' + branchId;
        }

        // =======
        // On Load
        // =======
        $(document).ready(function () {
            toastr.options = {
                "closeButton": true,
                "debug": true,
                "newestOnTop": true,
                "progressBar": true,
                "positionClass": "toast-top-right",
                "preventDuplicates": true,
                "onclick": null,
                "showDuration": "300",
                "hideDuration": "1000",
                "timeOut": "5000",
                "extendedTimeOut": "1000",
                "showEasing": "swing",
                "hideEasing": "linear",
                "showMethod": "fadeIn",
                "hideMethod": "fadeOut"
            }

            getBranchesForComboBox();
            $('#LaunchSoftware').prop('disabled', true);
        });
    </script>
</body>
</html>

@*@model easyfis.Models.IndexViewModel
    @{
        ViewBag.Title = "Manage";
    }

    <h2>@ViewBag.Title.</h2>

    <p class="text-success">@ViewBag.StatusMessage</p>
    <div>
        <h4>Change your account settings</h4>
        <hr />
        <dl class="dl-horizontal">
            <dt>Password:</dt>
            <dd>
                [*@
@*<p class="text-success">@ViewBag.StatusMessage</p>
    @if (Model.HasPassword)
    {
        //Response.Redirect("~/Manage/AccountSettings");
        @Html.ActionLink("Change your password", "ChangePassword")
    }
    else
    {
        @Html.ActionLink("Create", "SetPassword")
    }*@
@*]*@
@*</dd>*@
@*<dt>External Logins:</dt>
    <dd>
        @Model.Logins.Count [
        @Html.ActionLink("Manage", "ManageLogins") ]
    </dd>*@
@*
    Phone Numbers can used as a second factor of verification in a two-factor authentication system.

     See <a href="http://go.microsoft.com/fwlink/?LinkId=403804">this article</a>
        for details on setting up this ASP.NET application to support two-factor authentication using SMS.

     Uncomment the following block after you have set up two-factor authentication
*@
@*
    <dt>Phone Number:</dt>
    <dd>
        @(Model.PhoneNumber ?? "None") [
        @if (Model.PhoneNumber != null)
        {
            @Html.ActionLink("Change", "AddPhoneNumber")
            @: &nbsp;|&nbsp;
            @Html.ActionLink("Remove", "RemovePhoneNumber")
        }
        else
        {
            @Html.ActionLink("Add", "AddPhoneNumber")
        }
        ]
    </dd>
*@
@*<dt>Two-Factor Authentication:</dt>
    <dd>
        <p>
            There are no two-factor authentication providers configured. See <a href="http://go.microsoft.com/fwlink/?LinkId=403804">this article</a>
            for details on setting up this ASP.NET application to support two-factor authentication.
        </p>*@
@*@if (Model.TwoFactor)
    {
        using (Html.BeginForm("DisableTwoFactorAuthentication", "Manage", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
        {
            @Html.AntiForgeryToken()
            <text>Enabled
            <input type="submit" value="Disable" class="btn btn-link" />
            </text>
        }
    }
    else
    {
        using (Html.BeginForm("EnableTwoFactorAuthentication", "Manage", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
        {
            @Html.AntiForgeryToken()
            <text>Disabled
            <input type="submit" value="Enable" class="btn btn-link" />
            </text>
        }
    }*@
@*</dd>*@
@*</dl>
    </div>*@
